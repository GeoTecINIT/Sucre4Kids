
c:/Users/SVO/GITSUCRE/Sucre4Kids/target/5.3.0/argon/Sucre4Kids.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000095e4  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000bd604  000bd604  0000d604  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .data         000000bc  2003c674  000bd628  0001c674  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000020c0  2003c730  2003c730  0003c730  2**2
                  ALLOC
  6 .backup       00000004  2003f400  000bd6e4  0001f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_product 00000006  000bd6e8  000bd6e8  0002d6e8  2**0
                  ALLOC
  8 .module_info_suffix 00000024  000bd6ee  000bd6ee  0002d6ee  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .module_info_crc 00000004  000bd712  000bd712  0002d712  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .debug_info   001774a9  00000000  00000000  0002d716  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0001978e  00000000  00000000  001a4bbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    0005435a  00000000  00000000  001be34d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000038f0  00000000  00000000  002126a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 0000c978  00000000  00000000  00215f97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00045c10  00000000  00000000  0022290f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0005d53a  00000000  00000000  0026851f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0014685d  00000000  00000000  002c5a59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  0000ae54  00000000  00000000  0040c2b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <__aeabi_drsub>:
   b4020:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b4024:	e002      	b.n	b402c <__adddf3>
   b4026:	bf00      	nop

000b4028 <__aeabi_dsub>:
   b4028:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b402c <__adddf3>:
   b402c:	b530      	push	{r4, r5, lr}
   b402e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b4032:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b4036:	ea94 0f05 	teq	r4, r5
   b403a:	bf08      	it	eq
   b403c:	ea90 0f02 	teqeq	r0, r2
   b4040:	bf1f      	itttt	ne
   b4042:	ea54 0c00 	orrsne.w	ip, r4, r0
   b4046:	ea55 0c02 	orrsne.w	ip, r5, r2
   b404a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b404e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b4052:	f000 80e2 	beq.w	b421a <__adddf3+0x1ee>
   b4056:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b405a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b405e:	bfb8      	it	lt
   b4060:	426d      	neglt	r5, r5
   b4062:	dd0c      	ble.n	b407e <__adddf3+0x52>
   b4064:	442c      	add	r4, r5
   b4066:	ea80 0202 	eor.w	r2, r0, r2
   b406a:	ea81 0303 	eor.w	r3, r1, r3
   b406e:	ea82 0000 	eor.w	r0, r2, r0
   b4072:	ea83 0101 	eor.w	r1, r3, r1
   b4076:	ea80 0202 	eor.w	r2, r0, r2
   b407a:	ea81 0303 	eor.w	r3, r1, r3
   b407e:	2d36      	cmp	r5, #54	; 0x36
   b4080:	bf88      	it	hi
   b4082:	bd30      	pophi	{r4, r5, pc}
   b4084:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b4088:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b408c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b4090:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b4094:	d002      	beq.n	b409c <__adddf3+0x70>
   b4096:	4240      	negs	r0, r0
   b4098:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b409c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b40a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b40a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b40a8:	d002      	beq.n	b40b0 <__adddf3+0x84>
   b40aa:	4252      	negs	r2, r2
   b40ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b40b0:	ea94 0f05 	teq	r4, r5
   b40b4:	f000 80a7 	beq.w	b4206 <__adddf3+0x1da>
   b40b8:	f1a4 0401 	sub.w	r4, r4, #1
   b40bc:	f1d5 0e20 	rsbs	lr, r5, #32
   b40c0:	db0d      	blt.n	b40de <__adddf3+0xb2>
   b40c2:	fa02 fc0e 	lsl.w	ip, r2, lr
   b40c6:	fa22 f205 	lsr.w	r2, r2, r5
   b40ca:	1880      	adds	r0, r0, r2
   b40cc:	f141 0100 	adc.w	r1, r1, #0
   b40d0:	fa03 f20e 	lsl.w	r2, r3, lr
   b40d4:	1880      	adds	r0, r0, r2
   b40d6:	fa43 f305 	asr.w	r3, r3, r5
   b40da:	4159      	adcs	r1, r3
   b40dc:	e00e      	b.n	b40fc <__adddf3+0xd0>
   b40de:	f1a5 0520 	sub.w	r5, r5, #32
   b40e2:	f10e 0e20 	add.w	lr, lr, #32
   b40e6:	2a01      	cmp	r2, #1
   b40e8:	fa03 fc0e 	lsl.w	ip, r3, lr
   b40ec:	bf28      	it	cs
   b40ee:	f04c 0c02 	orrcs.w	ip, ip, #2
   b40f2:	fa43 f305 	asr.w	r3, r3, r5
   b40f6:	18c0      	adds	r0, r0, r3
   b40f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b40fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b4100:	d507      	bpl.n	b4112 <__adddf3+0xe6>
   b4102:	f04f 0e00 	mov.w	lr, #0
   b4106:	f1dc 0c00 	rsbs	ip, ip, #0
   b410a:	eb7e 0000 	sbcs.w	r0, lr, r0
   b410e:	eb6e 0101 	sbc.w	r1, lr, r1
   b4112:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b4116:	d31b      	bcc.n	b4150 <__adddf3+0x124>
   b4118:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b411c:	d30c      	bcc.n	b4138 <__adddf3+0x10c>
   b411e:	0849      	lsrs	r1, r1, #1
   b4120:	ea5f 0030 	movs.w	r0, r0, rrx
   b4124:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b4128:	f104 0401 	add.w	r4, r4, #1
   b412c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b4130:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b4134:	f080 809a 	bcs.w	b426c <__adddf3+0x240>
   b4138:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b413c:	bf08      	it	eq
   b413e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b4142:	f150 0000 	adcs.w	r0, r0, #0
   b4146:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b414a:	ea41 0105 	orr.w	r1, r1, r5
   b414e:	bd30      	pop	{r4, r5, pc}
   b4150:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b4154:	4140      	adcs	r0, r0
   b4156:	eb41 0101 	adc.w	r1, r1, r1
   b415a:	3c01      	subs	r4, #1
   b415c:	bf28      	it	cs
   b415e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b4162:	d2e9      	bcs.n	b4138 <__adddf3+0x10c>
   b4164:	f091 0f00 	teq	r1, #0
   b4168:	bf04      	itt	eq
   b416a:	4601      	moveq	r1, r0
   b416c:	2000      	moveq	r0, #0
   b416e:	fab1 f381 	clz	r3, r1
   b4172:	bf08      	it	eq
   b4174:	3320      	addeq	r3, #32
   b4176:	f1a3 030b 	sub.w	r3, r3, #11
   b417a:	f1b3 0220 	subs.w	r2, r3, #32
   b417e:	da0c      	bge.n	b419a <__adddf3+0x16e>
   b4180:	320c      	adds	r2, #12
   b4182:	dd08      	ble.n	b4196 <__adddf3+0x16a>
   b4184:	f102 0c14 	add.w	ip, r2, #20
   b4188:	f1c2 020c 	rsb	r2, r2, #12
   b418c:	fa01 f00c 	lsl.w	r0, r1, ip
   b4190:	fa21 f102 	lsr.w	r1, r1, r2
   b4194:	e00c      	b.n	b41b0 <__adddf3+0x184>
   b4196:	f102 0214 	add.w	r2, r2, #20
   b419a:	bfd8      	it	le
   b419c:	f1c2 0c20 	rsble	ip, r2, #32
   b41a0:	fa01 f102 	lsl.w	r1, r1, r2
   b41a4:	fa20 fc0c 	lsr.w	ip, r0, ip
   b41a8:	bfdc      	itt	le
   b41aa:	ea41 010c 	orrle.w	r1, r1, ip
   b41ae:	4090      	lslle	r0, r2
   b41b0:	1ae4      	subs	r4, r4, r3
   b41b2:	bfa2      	ittt	ge
   b41b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b41b8:	4329      	orrge	r1, r5
   b41ba:	bd30      	popge	{r4, r5, pc}
   b41bc:	ea6f 0404 	mvn.w	r4, r4
   b41c0:	3c1f      	subs	r4, #31
   b41c2:	da1c      	bge.n	b41fe <__adddf3+0x1d2>
   b41c4:	340c      	adds	r4, #12
   b41c6:	dc0e      	bgt.n	b41e6 <__adddf3+0x1ba>
   b41c8:	f104 0414 	add.w	r4, r4, #20
   b41cc:	f1c4 0220 	rsb	r2, r4, #32
   b41d0:	fa20 f004 	lsr.w	r0, r0, r4
   b41d4:	fa01 f302 	lsl.w	r3, r1, r2
   b41d8:	ea40 0003 	orr.w	r0, r0, r3
   b41dc:	fa21 f304 	lsr.w	r3, r1, r4
   b41e0:	ea45 0103 	orr.w	r1, r5, r3
   b41e4:	bd30      	pop	{r4, r5, pc}
   b41e6:	f1c4 040c 	rsb	r4, r4, #12
   b41ea:	f1c4 0220 	rsb	r2, r4, #32
   b41ee:	fa20 f002 	lsr.w	r0, r0, r2
   b41f2:	fa01 f304 	lsl.w	r3, r1, r4
   b41f6:	ea40 0003 	orr.w	r0, r0, r3
   b41fa:	4629      	mov	r1, r5
   b41fc:	bd30      	pop	{r4, r5, pc}
   b41fe:	fa21 f004 	lsr.w	r0, r1, r4
   b4202:	4629      	mov	r1, r5
   b4204:	bd30      	pop	{r4, r5, pc}
   b4206:	f094 0f00 	teq	r4, #0
   b420a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b420e:	bf06      	itte	eq
   b4210:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b4214:	3401      	addeq	r4, #1
   b4216:	3d01      	subne	r5, #1
   b4218:	e74e      	b.n	b40b8 <__adddf3+0x8c>
   b421a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b421e:	bf18      	it	ne
   b4220:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b4224:	d029      	beq.n	b427a <__adddf3+0x24e>
   b4226:	ea94 0f05 	teq	r4, r5
   b422a:	bf08      	it	eq
   b422c:	ea90 0f02 	teqeq	r0, r2
   b4230:	d005      	beq.n	b423e <__adddf3+0x212>
   b4232:	ea54 0c00 	orrs.w	ip, r4, r0
   b4236:	bf04      	itt	eq
   b4238:	4619      	moveq	r1, r3
   b423a:	4610      	moveq	r0, r2
   b423c:	bd30      	pop	{r4, r5, pc}
   b423e:	ea91 0f03 	teq	r1, r3
   b4242:	bf1e      	ittt	ne
   b4244:	2100      	movne	r1, #0
   b4246:	2000      	movne	r0, #0
   b4248:	bd30      	popne	{r4, r5, pc}
   b424a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b424e:	d105      	bne.n	b425c <__adddf3+0x230>
   b4250:	0040      	lsls	r0, r0, #1
   b4252:	4149      	adcs	r1, r1
   b4254:	bf28      	it	cs
   b4256:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b425a:	bd30      	pop	{r4, r5, pc}
   b425c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b4260:	bf3c      	itt	cc
   b4262:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b4266:	bd30      	popcc	{r4, r5, pc}
   b4268:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b426c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b4270:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b4274:	f04f 0000 	mov.w	r0, #0
   b4278:	bd30      	pop	{r4, r5, pc}
   b427a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b427e:	bf1a      	itte	ne
   b4280:	4619      	movne	r1, r3
   b4282:	4610      	movne	r0, r2
   b4284:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b4288:	bf1c      	itt	ne
   b428a:	460b      	movne	r3, r1
   b428c:	4602      	movne	r2, r0
   b428e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b4292:	bf06      	itte	eq
   b4294:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b4298:	ea91 0f03 	teqeq	r1, r3
   b429c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b42a0:	bd30      	pop	{r4, r5, pc}
   b42a2:	bf00      	nop

000b42a4 <__aeabi_ui2d>:
   b42a4:	f090 0f00 	teq	r0, #0
   b42a8:	bf04      	itt	eq
   b42aa:	2100      	moveq	r1, #0
   b42ac:	4770      	bxeq	lr
   b42ae:	b530      	push	{r4, r5, lr}
   b42b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b42b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b42b8:	f04f 0500 	mov.w	r5, #0
   b42bc:	f04f 0100 	mov.w	r1, #0
   b42c0:	e750      	b.n	b4164 <__adddf3+0x138>
   b42c2:	bf00      	nop

000b42c4 <__aeabi_i2d>:
   b42c4:	f090 0f00 	teq	r0, #0
   b42c8:	bf04      	itt	eq
   b42ca:	2100      	moveq	r1, #0
   b42cc:	4770      	bxeq	lr
   b42ce:	b530      	push	{r4, r5, lr}
   b42d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b42d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b42d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b42dc:	bf48      	it	mi
   b42de:	4240      	negmi	r0, r0
   b42e0:	f04f 0100 	mov.w	r1, #0
   b42e4:	e73e      	b.n	b4164 <__adddf3+0x138>
   b42e6:	bf00      	nop

000b42e8 <__aeabi_f2d>:
   b42e8:	0042      	lsls	r2, r0, #1
   b42ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b42ee:	ea4f 0131 	mov.w	r1, r1, rrx
   b42f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b42f6:	bf1f      	itttt	ne
   b42f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b42fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b4300:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b4304:	4770      	bxne	lr
   b4306:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b430a:	bf08      	it	eq
   b430c:	4770      	bxeq	lr
   b430e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b4312:	bf04      	itt	eq
   b4314:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b4318:	4770      	bxeq	lr
   b431a:	b530      	push	{r4, r5, lr}
   b431c:	f44f 7460 	mov.w	r4, #896	; 0x380
   b4320:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b4324:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b4328:	e71c      	b.n	b4164 <__adddf3+0x138>
   b432a:	bf00      	nop

000b432c <__aeabi_ul2d>:
   b432c:	ea50 0201 	orrs.w	r2, r0, r1
   b4330:	bf08      	it	eq
   b4332:	4770      	bxeq	lr
   b4334:	b530      	push	{r4, r5, lr}
   b4336:	f04f 0500 	mov.w	r5, #0
   b433a:	e00a      	b.n	b4352 <__aeabi_l2d+0x16>

000b433c <__aeabi_l2d>:
   b433c:	ea50 0201 	orrs.w	r2, r0, r1
   b4340:	bf08      	it	eq
   b4342:	4770      	bxeq	lr
   b4344:	b530      	push	{r4, r5, lr}
   b4346:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b434a:	d502      	bpl.n	b4352 <__aeabi_l2d+0x16>
   b434c:	4240      	negs	r0, r0
   b434e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b4352:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b4356:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b435a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b435e:	f43f aed8 	beq.w	b4112 <__adddf3+0xe6>
   b4362:	f04f 0203 	mov.w	r2, #3
   b4366:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b436a:	bf18      	it	ne
   b436c:	3203      	addne	r2, #3
   b436e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b4372:	bf18      	it	ne
   b4374:	3203      	addne	r2, #3
   b4376:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b437a:	f1c2 0320 	rsb	r3, r2, #32
   b437e:	fa00 fc03 	lsl.w	ip, r0, r3
   b4382:	fa20 f002 	lsr.w	r0, r0, r2
   b4386:	fa01 fe03 	lsl.w	lr, r1, r3
   b438a:	ea40 000e 	orr.w	r0, r0, lr
   b438e:	fa21 f102 	lsr.w	r1, r1, r2
   b4392:	4414      	add	r4, r2
   b4394:	e6bd      	b.n	b4112 <__adddf3+0xe6>
   b4396:	bf00      	nop

000b4398 <__aeabi_dmul>:
   b4398:	b570      	push	{r4, r5, r6, lr}
   b439a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b439e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b43a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b43a6:	bf1d      	ittte	ne
   b43a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b43ac:	ea94 0f0c 	teqne	r4, ip
   b43b0:	ea95 0f0c 	teqne	r5, ip
   b43b4:	f000 f8de 	bleq	b4574 <__aeabi_dmul+0x1dc>
   b43b8:	442c      	add	r4, r5
   b43ba:	ea81 0603 	eor.w	r6, r1, r3
   b43be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b43c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b43c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b43ca:	bf18      	it	ne
   b43cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b43d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b43d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b43d8:	d038      	beq.n	b444c <__aeabi_dmul+0xb4>
   b43da:	fba0 ce02 	umull	ip, lr, r0, r2
   b43de:	f04f 0500 	mov.w	r5, #0
   b43e2:	fbe1 e502 	umlal	lr, r5, r1, r2
   b43e6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b43ea:	fbe0 e503 	umlal	lr, r5, r0, r3
   b43ee:	f04f 0600 	mov.w	r6, #0
   b43f2:	fbe1 5603 	umlal	r5, r6, r1, r3
   b43f6:	f09c 0f00 	teq	ip, #0
   b43fa:	bf18      	it	ne
   b43fc:	f04e 0e01 	orrne.w	lr, lr, #1
   b4400:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b4404:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b4408:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b440c:	d204      	bcs.n	b4418 <__aeabi_dmul+0x80>
   b440e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b4412:	416d      	adcs	r5, r5
   b4414:	eb46 0606 	adc.w	r6, r6, r6
   b4418:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b441c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b4420:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b4424:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b4428:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b442c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b4430:	bf88      	it	hi
   b4432:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b4436:	d81e      	bhi.n	b4476 <__aeabi_dmul+0xde>
   b4438:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b443c:	bf08      	it	eq
   b443e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b4442:	f150 0000 	adcs.w	r0, r0, #0
   b4446:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b444a:	bd70      	pop	{r4, r5, r6, pc}
   b444c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b4450:	ea46 0101 	orr.w	r1, r6, r1
   b4454:	ea40 0002 	orr.w	r0, r0, r2
   b4458:	ea81 0103 	eor.w	r1, r1, r3
   b445c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b4460:	bfc2      	ittt	gt
   b4462:	ebd4 050c 	rsbsgt	r5, r4, ip
   b4466:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b446a:	bd70      	popgt	{r4, r5, r6, pc}
   b446c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b4470:	f04f 0e00 	mov.w	lr, #0
   b4474:	3c01      	subs	r4, #1
   b4476:	f300 80ab 	bgt.w	b45d0 <__aeabi_dmul+0x238>
   b447a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b447e:	bfde      	ittt	le
   b4480:	2000      	movle	r0, #0
   b4482:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b4486:	bd70      	pople	{r4, r5, r6, pc}
   b4488:	f1c4 0400 	rsb	r4, r4, #0
   b448c:	3c20      	subs	r4, #32
   b448e:	da35      	bge.n	b44fc <__aeabi_dmul+0x164>
   b4490:	340c      	adds	r4, #12
   b4492:	dc1b      	bgt.n	b44cc <__aeabi_dmul+0x134>
   b4494:	f104 0414 	add.w	r4, r4, #20
   b4498:	f1c4 0520 	rsb	r5, r4, #32
   b449c:	fa00 f305 	lsl.w	r3, r0, r5
   b44a0:	fa20 f004 	lsr.w	r0, r0, r4
   b44a4:	fa01 f205 	lsl.w	r2, r1, r5
   b44a8:	ea40 0002 	orr.w	r0, r0, r2
   b44ac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b44b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b44b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b44b8:	fa21 f604 	lsr.w	r6, r1, r4
   b44bc:	eb42 0106 	adc.w	r1, r2, r6
   b44c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b44c4:	bf08      	it	eq
   b44c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b44ca:	bd70      	pop	{r4, r5, r6, pc}
   b44cc:	f1c4 040c 	rsb	r4, r4, #12
   b44d0:	f1c4 0520 	rsb	r5, r4, #32
   b44d4:	fa00 f304 	lsl.w	r3, r0, r4
   b44d8:	fa20 f005 	lsr.w	r0, r0, r5
   b44dc:	fa01 f204 	lsl.w	r2, r1, r4
   b44e0:	ea40 0002 	orr.w	r0, r0, r2
   b44e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b44e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b44ec:	f141 0100 	adc.w	r1, r1, #0
   b44f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b44f4:	bf08      	it	eq
   b44f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b44fa:	bd70      	pop	{r4, r5, r6, pc}
   b44fc:	f1c4 0520 	rsb	r5, r4, #32
   b4500:	fa00 f205 	lsl.w	r2, r0, r5
   b4504:	ea4e 0e02 	orr.w	lr, lr, r2
   b4508:	fa20 f304 	lsr.w	r3, r0, r4
   b450c:	fa01 f205 	lsl.w	r2, r1, r5
   b4510:	ea43 0302 	orr.w	r3, r3, r2
   b4514:	fa21 f004 	lsr.w	r0, r1, r4
   b4518:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b451c:	fa21 f204 	lsr.w	r2, r1, r4
   b4520:	ea20 0002 	bic.w	r0, r0, r2
   b4524:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b4528:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b452c:	bf08      	it	eq
   b452e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b4532:	bd70      	pop	{r4, r5, r6, pc}
   b4534:	f094 0f00 	teq	r4, #0
   b4538:	d10f      	bne.n	b455a <__aeabi_dmul+0x1c2>
   b453a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b453e:	0040      	lsls	r0, r0, #1
   b4540:	eb41 0101 	adc.w	r1, r1, r1
   b4544:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b4548:	bf08      	it	eq
   b454a:	3c01      	subeq	r4, #1
   b454c:	d0f7      	beq.n	b453e <__aeabi_dmul+0x1a6>
   b454e:	ea41 0106 	orr.w	r1, r1, r6
   b4552:	f095 0f00 	teq	r5, #0
   b4556:	bf18      	it	ne
   b4558:	4770      	bxne	lr
   b455a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b455e:	0052      	lsls	r2, r2, #1
   b4560:	eb43 0303 	adc.w	r3, r3, r3
   b4564:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b4568:	bf08      	it	eq
   b456a:	3d01      	subeq	r5, #1
   b456c:	d0f7      	beq.n	b455e <__aeabi_dmul+0x1c6>
   b456e:	ea43 0306 	orr.w	r3, r3, r6
   b4572:	4770      	bx	lr
   b4574:	ea94 0f0c 	teq	r4, ip
   b4578:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b457c:	bf18      	it	ne
   b457e:	ea95 0f0c 	teqne	r5, ip
   b4582:	d00c      	beq.n	b459e <__aeabi_dmul+0x206>
   b4584:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b4588:	bf18      	it	ne
   b458a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b458e:	d1d1      	bne.n	b4534 <__aeabi_dmul+0x19c>
   b4590:	ea81 0103 	eor.w	r1, r1, r3
   b4594:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b4598:	f04f 0000 	mov.w	r0, #0
   b459c:	bd70      	pop	{r4, r5, r6, pc}
   b459e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b45a2:	bf06      	itte	eq
   b45a4:	4610      	moveq	r0, r2
   b45a6:	4619      	moveq	r1, r3
   b45a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b45ac:	d019      	beq.n	b45e2 <__aeabi_dmul+0x24a>
   b45ae:	ea94 0f0c 	teq	r4, ip
   b45b2:	d102      	bne.n	b45ba <__aeabi_dmul+0x222>
   b45b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b45b8:	d113      	bne.n	b45e2 <__aeabi_dmul+0x24a>
   b45ba:	ea95 0f0c 	teq	r5, ip
   b45be:	d105      	bne.n	b45cc <__aeabi_dmul+0x234>
   b45c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b45c4:	bf1c      	itt	ne
   b45c6:	4610      	movne	r0, r2
   b45c8:	4619      	movne	r1, r3
   b45ca:	d10a      	bne.n	b45e2 <__aeabi_dmul+0x24a>
   b45cc:	ea81 0103 	eor.w	r1, r1, r3
   b45d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b45d4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b45d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b45dc:	f04f 0000 	mov.w	r0, #0
   b45e0:	bd70      	pop	{r4, r5, r6, pc}
   b45e2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b45e6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b45ea:	bd70      	pop	{r4, r5, r6, pc}

000b45ec <__aeabi_ddiv>:
   b45ec:	b570      	push	{r4, r5, r6, lr}
   b45ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b45f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b45f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b45fa:	bf1d      	ittte	ne
   b45fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b4600:	ea94 0f0c 	teqne	r4, ip
   b4604:	ea95 0f0c 	teqne	r5, ip
   b4608:	f000 f8a7 	bleq	b475a <__aeabi_ddiv+0x16e>
   b460c:	eba4 0405 	sub.w	r4, r4, r5
   b4610:	ea81 0e03 	eor.w	lr, r1, r3
   b4614:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b4618:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b461c:	f000 8088 	beq.w	b4730 <__aeabi_ddiv+0x144>
   b4620:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b4624:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b4628:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b462c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b4630:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b4634:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b4638:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b463c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b4640:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b4644:	429d      	cmp	r5, r3
   b4646:	bf08      	it	eq
   b4648:	4296      	cmpeq	r6, r2
   b464a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b464e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b4652:	d202      	bcs.n	b465a <__aeabi_ddiv+0x6e>
   b4654:	085b      	lsrs	r3, r3, #1
   b4656:	ea4f 0232 	mov.w	r2, r2, rrx
   b465a:	1ab6      	subs	r6, r6, r2
   b465c:	eb65 0503 	sbc.w	r5, r5, r3
   b4660:	085b      	lsrs	r3, r3, #1
   b4662:	ea4f 0232 	mov.w	r2, r2, rrx
   b4666:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b466a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b466e:	ebb6 0e02 	subs.w	lr, r6, r2
   b4672:	eb75 0e03 	sbcs.w	lr, r5, r3
   b4676:	bf22      	ittt	cs
   b4678:	1ab6      	subcs	r6, r6, r2
   b467a:	4675      	movcs	r5, lr
   b467c:	ea40 000c 	orrcs.w	r0, r0, ip
   b4680:	085b      	lsrs	r3, r3, #1
   b4682:	ea4f 0232 	mov.w	r2, r2, rrx
   b4686:	ebb6 0e02 	subs.w	lr, r6, r2
   b468a:	eb75 0e03 	sbcs.w	lr, r5, r3
   b468e:	bf22      	ittt	cs
   b4690:	1ab6      	subcs	r6, r6, r2
   b4692:	4675      	movcs	r5, lr
   b4694:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b4698:	085b      	lsrs	r3, r3, #1
   b469a:	ea4f 0232 	mov.w	r2, r2, rrx
   b469e:	ebb6 0e02 	subs.w	lr, r6, r2
   b46a2:	eb75 0e03 	sbcs.w	lr, r5, r3
   b46a6:	bf22      	ittt	cs
   b46a8:	1ab6      	subcs	r6, r6, r2
   b46aa:	4675      	movcs	r5, lr
   b46ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b46b0:	085b      	lsrs	r3, r3, #1
   b46b2:	ea4f 0232 	mov.w	r2, r2, rrx
   b46b6:	ebb6 0e02 	subs.w	lr, r6, r2
   b46ba:	eb75 0e03 	sbcs.w	lr, r5, r3
   b46be:	bf22      	ittt	cs
   b46c0:	1ab6      	subcs	r6, r6, r2
   b46c2:	4675      	movcs	r5, lr
   b46c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b46c8:	ea55 0e06 	orrs.w	lr, r5, r6
   b46cc:	d018      	beq.n	b4700 <__aeabi_ddiv+0x114>
   b46ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b46d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b46d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b46da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b46de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b46e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b46e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b46ea:	d1c0      	bne.n	b466e <__aeabi_ddiv+0x82>
   b46ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b46f0:	d10b      	bne.n	b470a <__aeabi_ddiv+0x11e>
   b46f2:	ea41 0100 	orr.w	r1, r1, r0
   b46f6:	f04f 0000 	mov.w	r0, #0
   b46fa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b46fe:	e7b6      	b.n	b466e <__aeabi_ddiv+0x82>
   b4700:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b4704:	bf04      	itt	eq
   b4706:	4301      	orreq	r1, r0
   b4708:	2000      	moveq	r0, #0
   b470a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b470e:	bf88      	it	hi
   b4710:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b4714:	f63f aeaf 	bhi.w	b4476 <__aeabi_dmul+0xde>
   b4718:	ebb5 0c03 	subs.w	ip, r5, r3
   b471c:	bf04      	itt	eq
   b471e:	ebb6 0c02 	subseq.w	ip, r6, r2
   b4722:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b4726:	f150 0000 	adcs.w	r0, r0, #0
   b472a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b472e:	bd70      	pop	{r4, r5, r6, pc}
   b4730:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b4734:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b4738:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b473c:	bfc2      	ittt	gt
   b473e:	ebd4 050c 	rsbsgt	r5, r4, ip
   b4742:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b4746:	bd70      	popgt	{r4, r5, r6, pc}
   b4748:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b474c:	f04f 0e00 	mov.w	lr, #0
   b4750:	3c01      	subs	r4, #1
   b4752:	e690      	b.n	b4476 <__aeabi_dmul+0xde>
   b4754:	ea45 0e06 	orr.w	lr, r5, r6
   b4758:	e68d      	b.n	b4476 <__aeabi_dmul+0xde>
   b475a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b475e:	ea94 0f0c 	teq	r4, ip
   b4762:	bf08      	it	eq
   b4764:	ea95 0f0c 	teqeq	r5, ip
   b4768:	f43f af3b 	beq.w	b45e2 <__aeabi_dmul+0x24a>
   b476c:	ea94 0f0c 	teq	r4, ip
   b4770:	d10a      	bne.n	b4788 <__aeabi_ddiv+0x19c>
   b4772:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b4776:	f47f af34 	bne.w	b45e2 <__aeabi_dmul+0x24a>
   b477a:	ea95 0f0c 	teq	r5, ip
   b477e:	f47f af25 	bne.w	b45cc <__aeabi_dmul+0x234>
   b4782:	4610      	mov	r0, r2
   b4784:	4619      	mov	r1, r3
   b4786:	e72c      	b.n	b45e2 <__aeabi_dmul+0x24a>
   b4788:	ea95 0f0c 	teq	r5, ip
   b478c:	d106      	bne.n	b479c <__aeabi_ddiv+0x1b0>
   b478e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b4792:	f43f aefd 	beq.w	b4590 <__aeabi_dmul+0x1f8>
   b4796:	4610      	mov	r0, r2
   b4798:	4619      	mov	r1, r3
   b479a:	e722      	b.n	b45e2 <__aeabi_dmul+0x24a>
   b479c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b47a0:	bf18      	it	ne
   b47a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b47a6:	f47f aec5 	bne.w	b4534 <__aeabi_dmul+0x19c>
   b47aa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b47ae:	f47f af0d 	bne.w	b45cc <__aeabi_dmul+0x234>
   b47b2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b47b6:	f47f aeeb 	bne.w	b4590 <__aeabi_dmul+0x1f8>
   b47ba:	e712      	b.n	b45e2 <__aeabi_dmul+0x24a>

000b47bc <__gedf2>:
   b47bc:	f04f 3cff 	mov.w	ip, #4294967295
   b47c0:	e006      	b.n	b47d0 <__cmpdf2+0x4>
   b47c2:	bf00      	nop

000b47c4 <__ledf2>:
   b47c4:	f04f 0c01 	mov.w	ip, #1
   b47c8:	e002      	b.n	b47d0 <__cmpdf2+0x4>
   b47ca:	bf00      	nop

000b47cc <__cmpdf2>:
   b47cc:	f04f 0c01 	mov.w	ip, #1
   b47d0:	f84d cd04 	str.w	ip, [sp, #-4]!
   b47d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b47d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b47dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b47e0:	bf18      	it	ne
   b47e2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   b47e6:	d01b      	beq.n	b4820 <__cmpdf2+0x54>
   b47e8:	b001      	add	sp, #4
   b47ea:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   b47ee:	bf0c      	ite	eq
   b47f0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   b47f4:	ea91 0f03 	teqne	r1, r3
   b47f8:	bf02      	ittt	eq
   b47fa:	ea90 0f02 	teqeq	r0, r2
   b47fe:	2000      	moveq	r0, #0
   b4800:	4770      	bxeq	lr
   b4802:	f110 0f00 	cmn.w	r0, #0
   b4806:	ea91 0f03 	teq	r1, r3
   b480a:	bf58      	it	pl
   b480c:	4299      	cmppl	r1, r3
   b480e:	bf08      	it	eq
   b4810:	4290      	cmpeq	r0, r2
   b4812:	bf2c      	ite	cs
   b4814:	17d8      	asrcs	r0, r3, #31
   b4816:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   b481a:	f040 0001 	orr.w	r0, r0, #1
   b481e:	4770      	bx	lr
   b4820:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b4824:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b4828:	d102      	bne.n	b4830 <__cmpdf2+0x64>
   b482a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b482e:	d107      	bne.n	b4840 <__cmpdf2+0x74>
   b4830:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b4834:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b4838:	d1d6      	bne.n	b47e8 <__cmpdf2+0x1c>
   b483a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b483e:	d0d3      	beq.n	b47e8 <__cmpdf2+0x1c>
   b4840:	f85d 0b04 	ldr.w	r0, [sp], #4
   b4844:	4770      	bx	lr
   b4846:	bf00      	nop

000b4848 <__aeabi_cdrcmple>:
   b4848:	4684      	mov	ip, r0
   b484a:	4610      	mov	r0, r2
   b484c:	4662      	mov	r2, ip
   b484e:	468c      	mov	ip, r1
   b4850:	4619      	mov	r1, r3
   b4852:	4663      	mov	r3, ip
   b4854:	e000      	b.n	b4858 <__aeabi_cdcmpeq>
   b4856:	bf00      	nop

000b4858 <__aeabi_cdcmpeq>:
   b4858:	b501      	push	{r0, lr}
   b485a:	f7ff ffb7 	bl	b47cc <__cmpdf2>
   b485e:	2800      	cmp	r0, #0
   b4860:	bf48      	it	mi
   b4862:	f110 0f00 	cmnmi.w	r0, #0
   b4866:	bd01      	pop	{r0, pc}

000b4868 <__aeabi_dcmpeq>:
   b4868:	f84d ed08 	str.w	lr, [sp, #-8]!
   b486c:	f7ff fff4 	bl	b4858 <__aeabi_cdcmpeq>
   b4870:	bf0c      	ite	eq
   b4872:	2001      	moveq	r0, #1
   b4874:	2000      	movne	r0, #0
   b4876:	f85d fb08 	ldr.w	pc, [sp], #8
   b487a:	bf00      	nop

000b487c <__aeabi_dcmplt>:
   b487c:	f84d ed08 	str.w	lr, [sp, #-8]!
   b4880:	f7ff ffea 	bl	b4858 <__aeabi_cdcmpeq>
   b4884:	bf34      	ite	cc
   b4886:	2001      	movcc	r0, #1
   b4888:	2000      	movcs	r0, #0
   b488a:	f85d fb08 	ldr.w	pc, [sp], #8
   b488e:	bf00      	nop

000b4890 <__aeabi_dcmple>:
   b4890:	f84d ed08 	str.w	lr, [sp, #-8]!
   b4894:	f7ff ffe0 	bl	b4858 <__aeabi_cdcmpeq>
   b4898:	bf94      	ite	ls
   b489a:	2001      	movls	r0, #1
   b489c:	2000      	movhi	r0, #0
   b489e:	f85d fb08 	ldr.w	pc, [sp], #8
   b48a2:	bf00      	nop

000b48a4 <__aeabi_dcmpge>:
   b48a4:	f84d ed08 	str.w	lr, [sp, #-8]!
   b48a8:	f7ff ffce 	bl	b4848 <__aeabi_cdrcmple>
   b48ac:	bf94      	ite	ls
   b48ae:	2001      	movls	r0, #1
   b48b0:	2000      	movhi	r0, #0
   b48b2:	f85d fb08 	ldr.w	pc, [sp], #8
   b48b6:	bf00      	nop

000b48b8 <__aeabi_dcmpgt>:
   b48b8:	f84d ed08 	str.w	lr, [sp, #-8]!
   b48bc:	f7ff ffc4 	bl	b4848 <__aeabi_cdrcmple>
   b48c0:	bf34      	ite	cc
   b48c2:	2001      	movcc	r0, #1
   b48c4:	2000      	movcs	r0, #0
   b48c6:	f85d fb08 	ldr.w	pc, [sp], #8
   b48ca:	bf00      	nop

000b48cc <__aeabi_d2iz>:
   b48cc:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b48d0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b48d4:	d215      	bcs.n	b4902 <__aeabi_d2iz+0x36>
   b48d6:	d511      	bpl.n	b48fc <__aeabi_d2iz+0x30>
   b48d8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b48dc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b48e0:	d912      	bls.n	b4908 <__aeabi_d2iz+0x3c>
   b48e2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b48e6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b48ea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b48ee:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b48f2:	fa23 f002 	lsr.w	r0, r3, r2
   b48f6:	bf18      	it	ne
   b48f8:	4240      	negne	r0, r0
   b48fa:	4770      	bx	lr
   b48fc:	f04f 0000 	mov.w	r0, #0
   b4900:	4770      	bx	lr
   b4902:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b4906:	d105      	bne.n	b4914 <__aeabi_d2iz+0x48>
   b4908:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   b490c:	bf08      	it	eq
   b490e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   b4912:	4770      	bx	lr
   b4914:	f04f 0000 	mov.w	r0, #0
   b4918:	4770      	bx	lr
   b491a:	bf00      	nop

000b491c <__aeabi_d2f>:
   b491c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b4920:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   b4924:	bf24      	itt	cs
   b4926:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   b492a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   b492e:	d90d      	bls.n	b494c <__aeabi_d2f+0x30>
   b4930:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   b4934:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   b4938:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   b493c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   b4940:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   b4944:	bf08      	it	eq
   b4946:	f020 0001 	biceq.w	r0, r0, #1
   b494a:	4770      	bx	lr
   b494c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   b4950:	d121      	bne.n	b4996 <__aeabi_d2f+0x7a>
   b4952:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   b4956:	bfbc      	itt	lt
   b4958:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   b495c:	4770      	bxlt	lr
   b495e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b4962:	ea4f 5252 	mov.w	r2, r2, lsr #21
   b4966:	f1c2 0218 	rsb	r2, r2, #24
   b496a:	f1c2 0c20 	rsb	ip, r2, #32
   b496e:	fa10 f30c 	lsls.w	r3, r0, ip
   b4972:	fa20 f002 	lsr.w	r0, r0, r2
   b4976:	bf18      	it	ne
   b4978:	f040 0001 	orrne.w	r0, r0, #1
   b497c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b4980:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   b4984:	fa03 fc0c 	lsl.w	ip, r3, ip
   b4988:	ea40 000c 	orr.w	r0, r0, ip
   b498c:	fa23 f302 	lsr.w	r3, r3, r2
   b4990:	ea4f 0343 	mov.w	r3, r3, lsl #1
   b4994:	e7cc      	b.n	b4930 <__aeabi_d2f+0x14>
   b4996:	ea7f 5362 	mvns.w	r3, r2, asr #21
   b499a:	d107      	bne.n	b49ac <__aeabi_d2f+0x90>
   b499c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   b49a0:	bf1e      	ittt	ne
   b49a2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   b49a6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   b49aa:	4770      	bxne	lr
   b49ac:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   b49b0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   b49b4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   b49b8:	4770      	bx	lr
   b49ba:	bf00      	nop

000b49bc <strlen>:
   b49bc:	4603      	mov	r3, r0
   b49be:	f813 2b01 	ldrb.w	r2, [r3], #1
   b49c2:	2a00      	cmp	r2, #0
   b49c4:	d1fb      	bne.n	b49be <strlen+0x2>
   b49c6:	1a18      	subs	r0, r3, r0
   b49c8:	3801      	subs	r0, #1
   b49ca:	4770      	bx	lr

000b49cc <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b49cc:	4809      	ldr	r0, [pc, #36]	; (b49f4 <module_user_pre_init+0x28>)
   b49ce:	490a      	ldr	r1, [pc, #40]	; (b49f8 <module_user_pre_init+0x2c>)
   b49d0:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b49d2:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b49d4:	d005      	beq.n	b49e2 <module_user_pre_init+0x16>
   b49d6:	4a09      	ldr	r2, [pc, #36]	; (b49fc <module_user_pre_init+0x30>)
   b49d8:	4282      	cmp	r2, r0
   b49da:	d002      	beq.n	b49e2 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b49dc:	1a12      	subs	r2, r2, r0
   b49de:	f006 fd61 	bl	bb4a4 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b49e2:	4807      	ldr	r0, [pc, #28]	; (b4a00 <module_user_pre_init+0x34>)
   b49e4:	4a07      	ldr	r2, [pc, #28]	; (b4a04 <module_user_pre_init+0x38>)
   b49e6:	2100      	movs	r1, #0
   b49e8:	1a12      	subs	r2, r2, r0
   b49ea:	f006 fd69 	bl	bb4c0 <memset>
    return &link_global_data_start;
}
   b49ee:	4801      	ldr	r0, [pc, #4]	; (b49f4 <module_user_pre_init+0x28>)
   b49f0:	bd08      	pop	{r3, pc}
   b49f2:	bf00      	nop
   b49f4:	2003c674 	.word	0x2003c674
   b49f8:	000bd628 	.word	0x000bd628
   b49fc:	2003c730 	.word	0x2003c730
   b4a00:	2003c730 	.word	0x2003c730
   b4a04:	2003e7f0 	.word	0x2003e7f0

000b4a08 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4a08:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4a0a:	4e07      	ldr	r6, [pc, #28]	; (b4a28 <module_user_init+0x20>)
   b4a0c:	4c07      	ldr	r4, [pc, #28]	; (b4a2c <module_user_init+0x24>)
    module_user_init_hook();
   b4a0e:	f006 f8d9 	bl	babc4 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4a12:	1ba4      	subs	r4, r4, r6
   b4a14:	08a4      	lsrs	r4, r4, #2
   b4a16:	2500      	movs	r5, #0
   b4a18:	42ac      	cmp	r4, r5
   b4a1a:	d100      	bne.n	b4a1e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4a1c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4a1e:	f856 3b04 	ldr.w	r3, [r6], #4
   b4a22:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4a24:	3501      	adds	r5, #1
   b4a26:	e7f7      	b.n	b4a18 <module_user_init+0x10>
   b4a28:	000bd5e0 	.word	0x000bd5e0
   b4a2c:	000bd604 	.word	0x000bd604

000b4a30 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4a30:	f001 ba70 	b.w	b5f14 <setup>

000b4a34 <module_user_loop>:
}

void module_user_loop() {
   b4a34:	b508      	push	{r3, lr}
    loop();
   b4a36:	f002 f943 	bl	b6cc0 <loop>
    _post_loop();
}
   b4a3a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4a3e:	f006 b879 	b.w	bab34 <_post_loop>

000b4a42 <_Znaj>:
   b4a42:	f005 bceb 	b.w	ba41c <malloc>

000b4a46 <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b4a46:	f005 bcf1 	b.w	ba42c <free>
	...

000b4a4c <__cxa_pure_virtual>:
int __wrap_printf(const char* fmt, ...) {
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b4a4c:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b4a4e:	4a03      	ldr	r2, [pc, #12]	; (b4a5c <__cxa_pure_virtual+0x10>)
   b4a50:	4903      	ldr	r1, [pc, #12]	; (b4a60 <__cxa_pure_virtual+0x14>)
   b4a52:	200c      	movs	r0, #12
   b4a54:	f005 fc46 	bl	ba2e4 <panic_>
  while (1);
   b4a58:	e7fe      	b.n	b4a58 <__cxa_pure_virtual+0xc>
   b4a5a:	bf00      	nop
   b4a5c:	000ba035 	.word	0x000ba035
   b4a60:	000bb6f4 	.word	0x000bb6f4

000b4a64 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b4a64:	7800      	ldrb	r0, [r0, #0]
   b4a66:	fab0 f080 	clz	r0, r0
   b4a6a:	0940      	lsrs	r0, r0, #5
   b4a6c:	4770      	bx	lr

000b4a6e <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b4a6e:	2301      	movs	r3, #1
   b4a70:	7003      	strb	r3, [r0, #0]
   b4a72:	4770      	bx	lr

000b4a74 <_Z10borradoALLi.part.0>:
{
   switch (modo)
   {
   case 0: {
      Bloque bloque;
      bloques[0] = bloque;
   b4a74:	4a06      	ldr	r2, [pc, #24]	; (b4a90 <_Z10borradoALLi.part.0+0x1c>)
   b4a76:	2300      	movs	r3, #0
   b4a78:	6013      	str	r3, [r2, #0]
   b4a7a:	f8c2 3144 	str.w	r3, [r2, #324]	; 0x144
      bloque2[0] = bloque;
   b4a7e:	4a05      	ldr	r2, [pc, #20]	; (b4a94 <_Z10borradoALLi.part.0+0x20>)
   b4a80:	6013      	str	r3, [r2, #0]
   b4a82:	f8c2 3144 	str.w	r3, [r2, #324]	; 0x144
      numSensoresBloque = 0;
   b4a86:	4a04      	ldr	r2, [pc, #16]	; (b4a98 <_Z10borradoALLi.part.0+0x24>)
   b4a88:	6013      	str	r3, [r2, #0]
      numActuadoresBloque = 0;
   b4a8a:	4a04      	ldr	r2, [pc, #16]	; (b4a9c <_Z10borradoALLi.part.0+0x28>)
   b4a8c:	6013      	str	r3, [r2, #0]
      tam_bucle = 0;
   }
   default:
      break;
   }
}
   b4a8e:	4770      	bx	lr
   b4a90:	2003cd28 	.word	0x2003cd28
   b4a94:	2003c750 	.word	0x2003c750
   b4a98:	2003da2c 	.word	0x2003da2c
   b4a9c:	2003da24 	.word	0x2003da24

000b4aa0 <_ZN5Print7printlnIiLi0EEEjT_i.isra.0>:

    size_t println(const char[]);
    size_t println(char);
    template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value), int> = 0>
    size_t println(T b, int base = DEC) {
   b4aa0:	b570      	push	{r4, r5, r6, lr}
   b4aa2:	4605      	mov	r5, r0
   b4aa4:	460c      	mov	r4, r1

template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value), int>>
size_t Print::print(T n, int base)
{
    if (base == 0) {
   b4aa6:	4616      	mov	r6, r2
   b4aa8:	b942      	cbnz	r2, b4abc <_ZN5Print7printlnIiLi0EEEjT_i.isra.0+0x1c>
        return write(n);
   b4aaa:	6803      	ldr	r3, [r0, #0]
   b4aac:	b2c9      	uxtb	r1, r1
   b4aae:	689b      	ldr	r3, [r3, #8]
   b4ab0:	4798      	blx	r3
        n += println();
   b4ab2:	4628      	mov	r0, r5
    }
   b4ab4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        n += println();
   b4ab8:	f005 bf4b 	b.w	ba952 <_ZN5Print7printlnEv>
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
   b4abc:	2900      	cmp	r1, #0
   b4abe:	da0a      	bge.n	b4ad6 <_ZN5Print7printlnIiLi0EEEjT_i.isra.0+0x36>
   b4ac0:	2a0a      	cmp	r2, #10
   b4ac2:	d108      	bne.n	b4ad6 <_ZN5Print7printlnIiLi0EEEjT_i.isra.0+0x36>
            t = print('-');
   b4ac4:	212d      	movs	r1, #45	; 0x2d
   b4ac6:	f005 ff41 	bl	ba94c <_ZN5Print5printEc>
            val = -n;
   b4aca:	4261      	negs	r1, r4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b4acc:	b2f2      	uxtb	r2, r6
   b4ace:	4628      	mov	r0, r5
   b4ad0:	f005 ff55 	bl	ba97e <_ZN5Print11printNumberEmh>
   b4ad4:	e7ed      	b.n	b4ab2 <_ZN5Print7printlnIiLi0EEEjT_i.isra.0+0x12>
            val = n;
   b4ad6:	4621      	mov	r1, r4
   b4ad8:	e7f8      	b.n	b4acc <_ZN5Print7printlnIiLi0EEEjT_i.isra.0+0x2c>

000b4ada <_ZN5Print6printfEPKcz>:
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4ada:	b40e      	push	{r1, r2, r3}
   b4adc:	b503      	push	{r0, r1, lr}
   b4ade:	ab03      	add	r3, sp, #12
        auto r = this->vprintf(false, format, args);
   b4ae0:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4ae2:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b4ae6:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b4ae8:	f005 ff67 	bl	ba9ba <_ZN5Print7vprintfEbPKcSt9__va_list>
    }
   b4aec:	b002      	add	sp, #8
   b4aee:	f85d eb04 	ldr.w	lr, [sp], #4
   b4af2:	b003      	add	sp, #12
   b4af4:	4770      	bx	lr

000b4af6 <_ZN5Print8printlnfEPKcz>:
    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4af6:	b40e      	push	{r1, r2, r3}
   b4af8:	b503      	push	{r0, r1, lr}
   b4afa:	ab03      	add	r3, sp, #12
        auto r = this->vprintf(true, format, args);
   b4afc:	2101      	movs	r1, #1
    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4afe:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b4b02:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(true, format, args);
   b4b04:	f005 ff59 	bl	ba9ba <_ZN5Print7vprintfEbPKcSt9__va_list>
    }
   b4b08:	b002      	add	sp, #8
   b4b0a:	f85d eb04 	ldr.w	lr, [sp], #4
   b4b0e:	b003      	add	sp, #12
   b4b10:	4770      	bx	lr

000b4b12 <_Z11noDistanciai>:
//---------------------------------------------------------------------------------------------------
//------------------------------------- M O D O   1 -------------------------------------------------
//---------------------------------------------------------------------------------------------------

bool noDistancia(int puerto)
{
   b4b12:	b507      	push	{r0, r1, r2, lr}
   b4b14:	4601      	mov	r1, r0
    Ultrasonic ultrasonic(puerto);
   b4b16:	a801      	add	r0, sp, #4
   b4b18:	f004 fbfe 	bl	b9318 <_ZN10UltrasonicC1Ei>
    long range = ultrasonic.MeasureInCentimeters();
   b4b1c:	a801      	add	r0, sp, #4
   b4b1e:	f004 fbfd 	bl	b931c <_ZN10Ultrasonic20MeasureInCentimetersEv>
    // Serial.printlnf("Distancia: %d", range);
    if (range >= 0 && range < 10)
        return true;
    else
        return false;
}
   b4b22:	2809      	cmp	r0, #9
   b4b24:	bf8c      	ite	hi
   b4b26:	2000      	movhi	r0, #0
   b4b28:	2001      	movls	r0, #1
   b4b2a:	b003      	add	sp, #12
   b4b2c:	f85d fb04 	ldr.w	pc, [sp], #4

000b4b30 <_Z11siDistanciai>:

bool siDistancia(int puerto)
{
   b4b30:	b507      	push	{r0, r1, r2, lr}
   b4b32:	4601      	mov	r1, r0
    Ultrasonic ultrasonic(puerto);
   b4b34:	a801      	add	r0, sp, #4
   b4b36:	f004 fbef 	bl	b9318 <_ZN10UltrasonicC1Ei>
    long range = ultrasonic.MeasureInCentimeters();
   b4b3a:	a801      	add	r0, sp, #4
   b4b3c:	f004 fbee 	bl	b931c <_ZN10Ultrasonic20MeasureInCentimetersEv>
    // Serial.printlnf("Distancia: %d", range);
    if (range > 10)
        return true;
    else
        return false;
}
   b4b40:	280a      	cmp	r0, #10
   b4b42:	bfd4      	ite	le
   b4b44:	2000      	movle	r0, #0
   b4b46:	2001      	movgt	r0, #1
   b4b48:	b003      	add	sp, #12
   b4b4a:	f85d fb04 	ldr.w	pc, [sp], #4

000b4b4e <_Z5siLuzi>:

bool siLuz(int puerto)
{
    int threshold = 1000;
    
    switch (puerto)
   b4b4e:	2802      	cmp	r0, #2
{
   b4b50:	b508      	push	{r3, lr}
    switch (puerto)
   b4b52:	d00b      	beq.n	b4b6c <_Z5siLuzi+0x1e>
   b4b54:	2804      	cmp	r0, #4
   b4b56:	d00b      	beq.n	b4b70 <_Z5siLuzi+0x22>
   b4b58:	b960      	cbnz	r0, b4b74 <_Z5siLuzi+0x26>
    {
    case 0:
        if (analogRead(A0) >= threshold)
   b4b5a:	2013      	movs	r0, #19
        if (analogRead(A2) >= threshold)
            return true;
        return false;

    case 4:
        if (analogRead(A4) >= threshold)
   b4b5c:	f006 fbc7 	bl	bb2ee <analogRead>
   b4b60:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   b4b64:	bfb4      	ite	lt
   b4b66:	2000      	movlt	r0, #0
   b4b68:	2001      	movge	r0, #1
        return false;

    default:
        return false;
    }
}
   b4b6a:	bd08      	pop	{r3, pc}
        if (analogRead(A2) >= threshold)
   b4b6c:	2011      	movs	r0, #17
   b4b6e:	e7f5      	b.n	b4b5c <_Z5siLuzi+0xe>
        if (analogRead(A4) >= threshold)
   b4b70:	200f      	movs	r0, #15
   b4b72:	e7f3      	b.n	b4b5c <_Z5siLuzi+0xe>
    switch (puerto)
   b4b74:	2000      	movs	r0, #0
   b4b76:	e7f8      	b.n	b4b6a <_Z5siLuzi+0x1c>

000b4b78 <_Z5noLuzi>:

bool noLuz(int puerto)
{
    int threshold = 1000;
    switch (puerto)
   b4b78:	2802      	cmp	r0, #2
{
   b4b7a:	b508      	push	{r3, lr}
    switch (puerto)
   b4b7c:	d00b      	beq.n	b4b96 <_Z5noLuzi+0x1e>
   b4b7e:	2804      	cmp	r0, #4
   b4b80:	d00b      	beq.n	b4b9a <_Z5noLuzi+0x22>
   b4b82:	b960      	cbnz	r0, b4b9e <_Z5noLuzi+0x26>
    {
    case 0:
        if (analogRead(A0) <= threshold)
   b4b84:	2013      	movs	r0, #19
        if (analogRead(A2) <= threshold)
            return true;
        return false;

    case 4:
        if (analogRead(A4) <= threshold)
   b4b86:	f006 fbb2 	bl	bb2ee <analogRead>
   b4b8a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   b4b8e:	bfcc      	ite	gt
   b4b90:	2000      	movgt	r0, #0
   b4b92:	2001      	movle	r0, #1
        return false;

    default:
        return false;
    }
}
   b4b94:	bd08      	pop	{r3, pc}
        if (analogRead(A2) <= threshold)
   b4b96:	2011      	movs	r0, #17
   b4b98:	e7f5      	b.n	b4b86 <_Z5noLuzi+0xe>
        if (analogRead(A4) <= threshold)
   b4b9a:	200f      	movs	r0, #15
   b4b9c:	e7f3      	b.n	b4b86 <_Z5noLuzi+0xe>
    switch (puerto)
   b4b9e:	2000      	movs	r0, #0
   b4ba0:	e7f8      	b.n	b4b94 <_Z5noLuzi+0x1c>
	...

000b4ba4 <_Z7siRuidoi>:

bool siRuido(int puerto)
{
    int p;
    switch (puerto)
   b4ba4:	2802      	cmp	r0, #2
{
   b4ba6:	b510      	push	{r4, lr}
    switch (puerto)
   b4ba8:	d019      	beq.n	b4bde <_Z7siRuidoi+0x3a>
   b4baa:	2804      	cmp	r0, #4
   b4bac:	d019      	beq.n	b4be2 <_Z7siRuidoi+0x3e>
   b4bae:	b9d0      	cbnz	r0, b4be6 <_Z7siRuidoi+0x42>
    {
    case 0:
        p = A0;
   b4bb0:	2013      	movs	r0, #19

    default:
        return false;
    }

    int sonido = analogRead(p);
   b4bb2:	f006 fb9c 	bl	bb2ee <analogRead>
   b4bb6:	4604      	mov	r4, r0
    Serial.println(sonido);
   b4bb8:	f006 f926 	bl	bae08 <_Z16_fetch_usbserialv>
   b4bbc:	220a      	movs	r2, #10
   b4bbe:	4621      	mov	r1, r4
   b4bc0:	f7ff ff6e 	bl	b4aa0 <_ZN5Print7printlnIiLi0EEEjT_i.isra.0>
    if (sonido >= 1600)
   b4bc4:	f5b4 6fc8 	cmp.w	r4, #1600	; 0x640
   b4bc8:	4a08      	ldr	r2, [pc, #32]	; (b4bec <_Z7siRuidoi+0x48>)
        ruid = 12;
   b4bca:	bfa4      	itt	ge
   b4bcc:	230c      	movge	r3, #12
   b4bce:	6013      	strge	r3, [r2, #0]
    if (ruid > 0){
   b4bd0:	6813      	ldr	r3, [r2, #0]
   b4bd2:	2b00      	cmp	r3, #0
   b4bd4:	dd07      	ble.n	b4be6 <_Z7siRuidoi+0x42>
        ruid--;
   b4bd6:	3b01      	subs	r3, #1
   b4bd8:	6013      	str	r3, [r2, #0]
        return true;}
   b4bda:	2001      	movs	r0, #1
    return false;
}
   b4bdc:	bd10      	pop	{r4, pc}
    switch (puerto)
   b4bde:	2011      	movs	r0, #17
   b4be0:	e7e7      	b.n	b4bb2 <_Z7siRuidoi+0xe>
        p = A4;
   b4be2:	200f      	movs	r0, #15
   b4be4:	e7e5      	b.n	b4bb2 <_Z7siRuidoi+0xe>
    return false;
   b4be6:	2000      	movs	r0, #0
   b4be8:	e7f8      	b.n	b4bdc <_Z7siRuidoi+0x38>
   b4bea:	bf00      	nop
   b4bec:	2003da4c 	.word	0x2003da4c

000b4bf0 <_Z7noRuidoi>:

bool noRuido(int puerto)
{
   b4bf0:	b508      	push	{r3, lr}
    if (analogRead(puerto) <= 700)
   b4bf2:	b280      	uxth	r0, r0
   b4bf4:	f006 fb7b 	bl	bb2ee <analogRead>
        return true;
    return false;
}
   b4bf8:	f5b0 7f2f 	cmp.w	r0, #700	; 0x2bc
   b4bfc:	bfcc      	ite	gt
   b4bfe:	2000      	movgt	r0, #0
   b4c00:	2001      	movle	r0, #1
   b4c02:	bd08      	pop	{r3, pc}

000b4c04 <_Z7siBotoni>:

bool siBoton(int puerto)
{
   b4c04:	b507      	push	{r0, r1, r2, lr}
    pinMode(puerto, INPUT);
   b4c06:	b280      	uxth	r0, r0
   b4c08:	2100      	movs	r1, #0
   b4c0a:	9001      	str	r0, [sp, #4]
   b4c0c:	f006 fb32 	bl	bb274 <pinMode>
    if (digitalRead(puerto) == HIGH)
   b4c10:	9801      	ldr	r0, [sp, #4]
   b4c12:	f006 fb59 	bl	bb2c8 <digitalRead>
        return true;
    return false;
}
   b4c16:	1e43      	subs	r3, r0, #1
   b4c18:	4258      	negs	r0, r3
   b4c1a:	4158      	adcs	r0, r3
   b4c1c:	b003      	add	sp, #12
   b4c1e:	f85d fb04 	ldr.w	pc, [sp], #4

000b4c22 <_Z7noBotoni>:

bool noBoton(int puerto)
{
   b4c22:	b507      	push	{r0, r1, r2, lr}
    pinMode(puerto, INPUT);
   b4c24:	b280      	uxth	r0, r0
   b4c26:	2100      	movs	r1, #0
   b4c28:	9001      	str	r0, [sp, #4]
   b4c2a:	f006 fb23 	bl	bb274 <pinMode>
    if (digitalRead(puerto) == LOW)
   b4c2e:	9801      	ldr	r0, [sp, #4]
   b4c30:	f006 fb4a 	bl	bb2c8 <digitalRead>
        return true;
    return false;
}
   b4c34:	fab0 f080 	clz	r0, r0
   b4c38:	0940      	lsrs	r0, r0, #5
   b4c3a:	b003      	add	sp, #12
   b4c3c:	f85d fb04 	ldr.w	pc, [sp], #4

000b4c40 <_Z10siRotativoi>:

bool siRotativo(int puerto)
{
    float voltage;
    int sensor_value;
    switch (puerto)
   b4c40:	2802      	cmp	r0, #2
{
   b4c42:	b507      	push	{r0, r1, r2, lr}
    switch (puerto)
   b4c44:	d030      	beq.n	b4ca8 <_Z10siRotativoi+0x68>
   b4c46:	2804      	cmp	r0, #4
   b4c48:	d030      	beq.n	b4cac <_Z10siRotativoi+0x6c>
   b4c4a:	b918      	cbnz	r0, b4c54 <_Z10siRotativoi+0x14>
    {
    case 0:
        sensor_value = analogRead(A0);
   b4c4c:	2013      	movs	r0, #19
        break;
    case 2:
        sensor_value = analogRead(A2);
        break;
    case 4:
        sensor_value = analogRead(A4);
   b4c4e:	f006 fb4e 	bl	bb2ee <analogRead>
   b4c52:	9001      	str	r0, [sp, #4]
        break;
    }

    voltage = (float)sensor_value * 3.3 / 1023;
   b4c54:	eddd 7a01 	vldr	s15, [sp, #4]
   b4c58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b4c5c:	ee17 0a90 	vmov	r0, s15
   b4c60:	f7ff fb42 	bl	b42e8 <__aeabi_f2d>
   b4c64:	a314      	add	r3, pc, #80	; (adr r3, b4cb8 <_Z10siRotativoi+0x78>)
   b4c66:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4c6a:	f7ff fb95 	bl	b4398 <__aeabi_dmul>
   b4c6e:	a314      	add	r3, pc, #80	; (adr r3, b4cc0 <_Z10siRotativoi+0x80>)
   b4c70:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4c74:	f7ff fcba 	bl	b45ec <__aeabi_ddiv>
   b4c78:	f7ff fe50 	bl	b491c <__aeabi_d2f>
    float degrees = (voltage * 300) / 5;
   b4c7c:	eddf 7a0c 	vldr	s15, [pc, #48]	; b4cb0 <_Z10siRotativoi+0x70>
   b4c80:	ee07 0a10 	vmov	s14, r0
   b4c84:	ee67 7a27 	vmul.f32	s15, s14, s15
   b4c88:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
   b4c8c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
    if (degrees <= 360)
   b4c90:	eddf 7a08 	vldr	s15, [pc, #32]	; b4cb4 <_Z10siRotativoi+0x74>
   b4c94:	eeb4 7ae7 	vcmpe.f32	s14, s15
   b4c98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        return true;
    return false;
}
   b4c9c:	bf94      	ite	ls
   b4c9e:	2001      	movls	r0, #1
   b4ca0:	2000      	movhi	r0, #0
   b4ca2:	b003      	add	sp, #12
   b4ca4:	f85d fb04 	ldr.w	pc, [sp], #4
        sensor_value = analogRead(A2);
   b4ca8:	2011      	movs	r0, #17
   b4caa:	e7d0      	b.n	b4c4e <_Z10siRotativoi+0xe>
        sensor_value = analogRead(A4);
   b4cac:	200f      	movs	r0, #15
   b4cae:	e7ce      	b.n	b4c4e <_Z10siRotativoi+0xe>
   b4cb0:	43960000 	.word	0x43960000
   b4cb4:	43b40000 	.word	0x43b40000
   b4cb8:	66666666 	.word	0x66666666
   b4cbc:	400a6666 	.word	0x400a6666
   b4cc0:	00000000 	.word	0x00000000
   b4cc4:	408ff800 	.word	0x408ff800

000b4cc8 <_Z10noRotativoi>:

bool noRotativo(int puerto)
{
    float voltage;
    int sensor_value;
    switch (puerto)
   b4cc8:	2802      	cmp	r0, #2
{
   b4cca:	b507      	push	{r0, r1, r2, lr}
    switch (puerto)
   b4ccc:	d030      	beq.n	b4d30 <_Z10noRotativoi+0x68>
   b4cce:	2804      	cmp	r0, #4
   b4cd0:	d030      	beq.n	b4d34 <_Z10noRotativoi+0x6c>
   b4cd2:	b918      	cbnz	r0, b4cdc <_Z10noRotativoi+0x14>
    {
    case 0:
        sensor_value = analogRead(A0);
   b4cd4:	2013      	movs	r0, #19
        break;
    case 2:
        sensor_value = analogRead(A2);
        break;
    case 4:
        sensor_value = analogRead(A4);
   b4cd6:	f006 fb0a 	bl	bb2ee <analogRead>
   b4cda:	9001      	str	r0, [sp, #4]
        break;
    }

    voltage = (float)sensor_value * 3.3 / 1023;
   b4cdc:	eddd 7a01 	vldr	s15, [sp, #4]
   b4ce0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b4ce4:	ee17 0a90 	vmov	r0, s15
   b4ce8:	f7ff fafe 	bl	b42e8 <__aeabi_f2d>
   b4cec:	a314      	add	r3, pc, #80	; (adr r3, b4d40 <_Z10noRotativoi+0x78>)
   b4cee:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4cf2:	f7ff fb51 	bl	b4398 <__aeabi_dmul>
   b4cf6:	a314      	add	r3, pc, #80	; (adr r3, b4d48 <_Z10noRotativoi+0x80>)
   b4cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4cfc:	f7ff fc76 	bl	b45ec <__aeabi_ddiv>
   b4d00:	f7ff fe0c 	bl	b491c <__aeabi_d2f>
    float degrees = (voltage * 300) / 5;
   b4d04:	eddf 7a0c 	vldr	s15, [pc, #48]	; b4d38 <_Z10noRotativoi+0x70>
   b4d08:	ee07 0a10 	vmov	s14, r0
   b4d0c:	ee67 7a27 	vmul.f32	s15, s14, s15
   b4d10:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
   b4d14:	ee87 7aa6 	vdiv.f32	s14, s15, s13

    if (degrees >= 360)
   b4d18:	eddf 7a08 	vldr	s15, [pc, #32]	; b4d3c <_Z10noRotativoi+0x74>
   b4d1c:	eeb4 7ae7 	vcmpe.f32	s14, s15
   b4d20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        return true;
    return false;
}
   b4d24:	bfac      	ite	ge
   b4d26:	2001      	movge	r0, #1
   b4d28:	2000      	movlt	r0, #0
   b4d2a:	b003      	add	sp, #12
   b4d2c:	f85d fb04 	ldr.w	pc, [sp], #4
        sensor_value = analogRead(A2);
   b4d30:	2011      	movs	r0, #17
   b4d32:	e7d0      	b.n	b4cd6 <_Z10noRotativoi+0xe>
        sensor_value = analogRead(A4);
   b4d34:	200f      	movs	r0, #15
   b4d36:	e7ce      	b.n	b4cd6 <_Z10noRotativoi+0xe>
   b4d38:	43960000 	.word	0x43960000
   b4d3c:	43b40000 	.word	0x43b40000
   b4d40:	66666666 	.word	0x66666666
   b4d44:	400a6666 	.word	0x400a6666
   b4d48:	00000000 	.word	0x00000000
   b4d4c:	408ff800 	.word	0x408ff800

000b4d50 <_Z10BotonDualAi>:

bool BotonDualA(int puerto)
{
   b4d50:	b538      	push	{r3, r4, r5, lr}
    pinMode(puerto, INPUT);
   b4d52:	b284      	uxth	r4, r0
    pinMode(puerto+1, INPUT);
   b4d54:	1c65      	adds	r5, r4, #1
    pinMode(puerto, INPUT);
   b4d56:	2100      	movs	r1, #0
   b4d58:	4620      	mov	r0, r4
    pinMode(puerto+1, INPUT);
   b4d5a:	b2ad      	uxth	r5, r5
    pinMode(puerto, INPUT);
   b4d5c:	f006 fa8a 	bl	bb274 <pinMode>
    pinMode(puerto+1, INPUT);
   b4d60:	4628      	mov	r0, r5
   b4d62:	2100      	movs	r1, #0
   b4d64:	f006 fa86 	bl	bb274 <pinMode>
    if (digitalRead(puerto) == LOW && digitalRead(puerto+1) == HIGH)
   b4d68:	4620      	mov	r0, r4
   b4d6a:	f006 faad 	bl	bb2c8 <digitalRead>
   b4d6e:	b930      	cbnz	r0, b4d7e <_Z10BotonDualAi+0x2e>
   b4d70:	4628      	mov	r0, r5
   b4d72:	f006 faa9 	bl	bb2c8 <digitalRead>
   b4d76:	1e43      	subs	r3, r0, #1
   b4d78:	4258      	negs	r0, r3
   b4d7a:	4158      	adcs	r0, r3
        return true;
    return false;
}
   b4d7c:	bd38      	pop	{r3, r4, r5, pc}
    return false;
   b4d7e:	2000      	movs	r0, #0
   b4d80:	e7fc      	b.n	b4d7c <_Z10BotonDualAi+0x2c>

000b4d82 <_Z10BotonDualBi>:

bool BotonDualB(int puerto)
{
   b4d82:	b538      	push	{r3, r4, r5, lr}
    pinMode(puerto+1, INPUT);
   b4d84:	b284      	uxth	r4, r0
   b4d86:	1c65      	adds	r5, r4, #1
   b4d88:	b2ad      	uxth	r5, r5
   b4d8a:	2100      	movs	r1, #0
   b4d8c:	4628      	mov	r0, r5
   b4d8e:	f006 fa71 	bl	bb274 <pinMode>
    pinMode(puerto, INPUT);
   b4d92:	4620      	mov	r0, r4
   b4d94:	2100      	movs	r1, #0
   b4d96:	f006 fa6d 	bl	bb274 <pinMode>
    if (digitalRead(puerto+1) == LOW && digitalRead(puerto) == HIGH)
   b4d9a:	4628      	mov	r0, r5
   b4d9c:	f006 fa94 	bl	bb2c8 <digitalRead>
   b4da0:	b930      	cbnz	r0, b4db0 <_Z10BotonDualBi+0x2e>
   b4da2:	4620      	mov	r0, r4
   b4da4:	f006 fa90 	bl	bb2c8 <digitalRead>
   b4da8:	1e43      	subs	r3, r0, #1
   b4daa:	4258      	negs	r0, r3
   b4dac:	4158      	adcs	r0, r3
        return true;
    return false;
}
   b4dae:	bd38      	pop	{r3, r4, r5, pc}
    return false;
   b4db0:	2000      	movs	r0, #0
   b4db2:	e7fc      	b.n	b4dae <_Z10BotonDualBi+0x2c>

000b4db4 <_Z10BotonDual2i>:

bool BotonDual2(int puerto)
{
   b4db4:	b538      	push	{r3, r4, r5, lr}
    pinMode(puerto, INPUT);
   b4db6:	b284      	uxth	r4, r0
    pinMode(puerto+1, INPUT);
   b4db8:	1c65      	adds	r5, r4, #1
    pinMode(puerto, INPUT);
   b4dba:	2100      	movs	r1, #0
   b4dbc:	4620      	mov	r0, r4
    pinMode(puerto+1, INPUT);
   b4dbe:	b2ad      	uxth	r5, r5
    pinMode(puerto, INPUT);
   b4dc0:	f006 fa58 	bl	bb274 <pinMode>
    pinMode(puerto+1, INPUT);
   b4dc4:	4628      	mov	r0, r5
   b4dc6:	2100      	movs	r1, #0
   b4dc8:	f006 fa54 	bl	bb274 <pinMode>
    if (digitalRead(puerto) == LOW && digitalRead(puerto+1) == LOW)
   b4dcc:	4620      	mov	r0, r4
   b4dce:	f006 fa7b 	bl	bb2c8 <digitalRead>
   b4dd2:	b930      	cbnz	r0, b4de2 <_Z10BotonDual2i+0x2e>
   b4dd4:	4628      	mov	r0, r5
   b4dd6:	f006 fa77 	bl	bb2c8 <digitalRead>
   b4dda:	fab0 f080 	clz	r0, r0
   b4dde:	0940      	lsrs	r0, r0, #5
        return true;
    return false;
}
   b4de0:	bd38      	pop	{r3, r4, r5, pc}
    return false;
   b4de2:	2000      	movs	r0, #0
   b4de4:	e7fc      	b.n	b4de0 <_Z10BotonDual2i+0x2c>

000b4de6 <_Z11noBotonDuali>:

bool noBotonDual(int puerto)
{
   b4de6:	b538      	push	{r3, r4, r5, lr}
    pinMode(puerto, INPUT);
   b4de8:	b284      	uxth	r4, r0
    pinMode(puerto+1, INPUT);
   b4dea:	1c65      	adds	r5, r4, #1
    pinMode(puerto, INPUT);
   b4dec:	2100      	movs	r1, #0
   b4dee:	4620      	mov	r0, r4
    pinMode(puerto+1, INPUT);
   b4df0:	b2ad      	uxth	r5, r5
    pinMode(puerto, INPUT);
   b4df2:	f006 fa3f 	bl	bb274 <pinMode>
    pinMode(puerto+1, INPUT);
   b4df6:	2100      	movs	r1, #0
   b4df8:	4628      	mov	r0, r5
   b4dfa:	f006 fa3b 	bl	bb274 <pinMode>
    if (digitalRead(puerto) == HIGH && digitalRead(puerto+1) == HIGH)
   b4dfe:	4620      	mov	r0, r4
   b4e00:	f006 fa62 	bl	bb2c8 <digitalRead>
   b4e04:	2801      	cmp	r0, #1
   b4e06:	d106      	bne.n	b4e16 <_Z11noBotonDuali+0x30>
   b4e08:	4628      	mov	r0, r5
   b4e0a:	f006 fa5d 	bl	bb2c8 <digitalRead>
   b4e0e:	1e43      	subs	r3, r0, #1
   b4e10:	4258      	negs	r0, r3
   b4e12:	4158      	adcs	r0, r3
        return true;
    return false;
}
   b4e14:	bd38      	pop	{r3, r4, r5, pc}
    return false;
   b4e16:	2000      	movs	r0, #0
   b4e18:	e7fc      	b.n	b4e14 <_Z11noBotonDuali+0x2e>

000b4e1a <_Z4Cafei>:


bool Cafe(int puerto)
{
    int sensor_value;
    switch (puerto)
   b4e1a:	2802      	cmp	r0, #2
{
   b4e1c:	b510      	push	{r4, lr}
    switch (puerto)
   b4e1e:	d012      	beq.n	b4e46 <_Z4Cafei+0x2c>
   b4e20:	2804      	cmp	r0, #4
   b4e22:	d012      	beq.n	b4e4a <_Z4Cafei+0x30>
   b4e24:	b918      	cbnz	r0, b4e2e <_Z4Cafei+0x14>
    {
    case 0:
        sensor_value = analogRead(A0);
   b4e26:	2013      	movs	r0, #19
        break;
    case 2:
        sensor_value = analogRead(A2);
        break;
    case 4:
        sensor_value = analogRead(A4);
   b4e28:	f006 fa61 	bl	bb2ee <analogRead>
   b4e2c:	4604      	mov	r4, r0
        break;
    }
    Serial.println(sensor_value);
   b4e2e:	f005 ffeb 	bl	bae08 <_Z16_fetch_usbserialv>
   b4e32:	220a      	movs	r2, #10
   b4e34:	4621      	mov	r1, r4
   b4e36:	f7ff fe33 	bl	b4aa0 <_ZN5Print7printlnIiLi0EEEjT_i.isra.0>
    if (sensor_value < 2000)
        return true;
    return false;
}
   b4e3a:	f5b4 6ffa 	cmp.w	r4, #2000	; 0x7d0
   b4e3e:	bfac      	ite	ge
   b4e40:	2000      	movge	r0, #0
   b4e42:	2001      	movlt	r0, #1
   b4e44:	bd10      	pop	{r4, pc}
        sensor_value = analogRead(A2);
   b4e46:	2011      	movs	r0, #17
   b4e48:	e7ee      	b.n	b4e28 <_Z4Cafei+0xe>
        sensor_value = analogRead(A4);
   b4e4a:	200f      	movs	r0, #15
   b4e4c:	e7ec      	b.n	b4e28 <_Z4Cafei+0xe>

000b4e4e <_Z9AguaClarai>:

bool AguaClara(int puerto)
{
    int sensor_value;
    switch (puerto)
   b4e4e:	2802      	cmp	r0, #2
{
   b4e50:	b508      	push	{r3, lr}
    switch (puerto)
   b4e52:	d00d      	beq.n	b4e70 <_Z9AguaClarai+0x22>
   b4e54:	2804      	cmp	r0, #4
   b4e56:	d00d      	beq.n	b4e74 <_Z9AguaClarai+0x26>
   b4e58:	b918      	cbnz	r0, b4e62 <_Z9AguaClarai+0x14>
    {
    case 0:
        sensor_value = analogRead(A0);
   b4e5a:	2013      	movs	r0, #19
        break;
    case 2:
        sensor_value = analogRead(A2);
        break;
    case 4:
        sensor_value = analogRead(A4);
   b4e5c:	f006 fa47 	bl	bb2ee <analogRead>
   b4e60:	4603      	mov	r3, r0
        break;
    }
    if (sensor_value > 2500)
        return true;
    return false;
}
   b4e62:	f640 10c4 	movw	r0, #2500	; 0x9c4
   b4e66:	4283      	cmp	r3, r0
   b4e68:	bfd4      	ite	le
   b4e6a:	2000      	movle	r0, #0
   b4e6c:	2001      	movgt	r0, #1
   b4e6e:	bd08      	pop	{r3, pc}
        sensor_value = analogRead(A2);
   b4e70:	2011      	movs	r0, #17
   b4e72:	e7f3      	b.n	b4e5c <_Z9AguaClarai+0xe>
        sensor_value = analogRead(A4);
   b4e74:	200f      	movs	r0, #15
   b4e76:	e7f1      	b.n	b4e5c <_Z9AguaClarai+0xe>

000b4e78 <_Z8tempFrioi>:

bool tempFrio(int puerto)
{
   b4e78:	b530      	push	{r4, r5, lr}
   b4e7a:	ed2d 8b02 	vpush	{d8}
   b4e7e:	b087      	sub	sp, #28
    DHT dht(puerto, DHT11);
   b4e80:	b2c1      	uxtb	r1, r0
   b4e82:	2306      	movs	r3, #6
   b4e84:	220b      	movs	r2, #11
   b4e86:	a801      	add	r0, sp, #4
   b4e88:	f004 fa6c 	bl	b9364 <_ZN3DHTC1Ehhh>
    dht.begin();
   b4e8c:	a801      	add	r0, sp, #4
   b4e8e:	f004 fa70 	bl	b9372 <_ZN3DHT5beginEv>
    float t = dht.getTempCelcius();
   b4e92:	a801      	add	r0, sp, #4
   b4e94:	f004 fb2a 	bl	b94ec <_ZN3DHT14getTempCelciusEv>

    // The fast read may cause an invalid value like 0.0000 or NuLL. Repeat until valid value.
    while (isnan(t) | t == 0.0)
   b4e98:	eeb5 0a40 	vcmp.f32	s0, #0.0
   b4e9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr bool
  isnan(float __x)
  { return __builtin_isnan(__x); }
   b4ea0:	eeb4 0a40 	vcmp.f32	s0, s0
   b4ea4:	bf0c      	ite	eq
   b4ea6:	2401      	moveq	r4, #1
   b4ea8:	2400      	movne	r4, #0
   b4eaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4eae:	bf68      	it	vs
   b4eb0:	f044 0401 	orrvs.w	r4, r4, #1
    float t = dht.getTempCelcius();
   b4eb4:	eeb0 8a40 	vmov.f32	s16, s0
    while (isnan(t) | t == 0.0)
   b4eb8:	2c00      	cmp	r4, #0
   b4eba:	d1ea      	bne.n	b4e92 <_Z8tempFrioi+0x1a>
    {
        t = dht.getTempCelcius();
    }

    Serial.printlnf("Temp: %f", t);
   b4ebc:	f005 ffa4 	bl	bae08 <_Z16_fetch_usbserialv>
   b4ec0:	4605      	mov	r5, r0
   b4ec2:	ee18 0a10 	vmov	r0, s16
   b4ec6:	f7ff fa0f 	bl	b42e8 <__aeabi_f2d>
   b4eca:	4602      	mov	r2, r0
   b4ecc:	460b      	mov	r3, r1
   b4ece:	4628      	mov	r0, r5
   b4ed0:	490a      	ldr	r1, [pc, #40]	; (b4efc <_Z8tempFrioi+0x84>)
   b4ed2:	f7ff fe10 	bl	b4af6 <_ZN5Print8printlnfEPKcz>
    if (t > 0.0 && t < 8)
   b4ed6:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
   b4eda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4ede:	dd08      	ble.n	b4ef2 <_Z8tempFrioi+0x7a>
   b4ee0:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
   b4ee4:	eeb4 8ae7 	vcmpe.f32	s16, s15
   b4ee8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4eec:	bf4c      	ite	mi
   b4eee:	2401      	movmi	r4, #1
   b4ef0:	2400      	movpl	r4, #0
        return true;
    else
        return false;
}
   b4ef2:	4620      	mov	r0, r4
   b4ef4:	b007      	add	sp, #28
   b4ef6:	ecbd 8b02 	vpop	{d8}
   b4efa:	bd30      	pop	{r4, r5, pc}
   b4efc:	000bb709 	.word	0x000bb709

000b4f00 <_Z12tempTempladoi>:

bool tempTemplado(int puerto)
{
   b4f00:	b510      	push	{r4, lr}
   b4f02:	ed2d 8b02 	vpush	{d8}
   b4f06:	b086      	sub	sp, #24
    DHT dht(puerto, DHT11);
   b4f08:	b2c1      	uxtb	r1, r0
   b4f0a:	2306      	movs	r3, #6
   b4f0c:	220b      	movs	r2, #11
   b4f0e:	a801      	add	r0, sp, #4
   b4f10:	f004 fa28 	bl	b9364 <_ZN3DHTC1Ehhh>
    dht.begin();
   b4f14:	a801      	add	r0, sp, #4
   b4f16:	f004 fa2c 	bl	b9372 <_ZN3DHT5beginEv>
    float t = dht.getTempCelcius();
   b4f1a:	a801      	add	r0, sp, #4
   b4f1c:	f004 fae6 	bl	b94ec <_ZN3DHT14getTempCelciusEv>

    // The fast read may cause an invalid value like 0.0000 or NuLL. Repeat until valid value.
    while (isnan(t) || (t == 0.0))
   b4f20:	eeb4 0a40 	vcmp.f32	s0, s0
   b4f24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    float t = dht.getTempCelcius();
   b4f28:	eeb0 8a40 	vmov.f32	s16, s0
    while (isnan(t) || (t == 0.0))
   b4f2c:	d6f5      	bvs.n	b4f1a <_Z12tempTempladoi+0x1a>
   b4f2e:	eeb5 0a40 	vcmp.f32	s0, #0.0
   b4f32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4f36:	d0f0      	beq.n	b4f1a <_Z12tempTempladoi+0x1a>
    {
        t = dht.getTempCelcius();
    }

    Serial.printlnf("Temp: %f", t);
   b4f38:	f005 ff66 	bl	bae08 <_Z16_fetch_usbserialv>
   b4f3c:	4604      	mov	r4, r0
   b4f3e:	ee18 0a10 	vmov	r0, s16
   b4f42:	f7ff f9d1 	bl	b42e8 <__aeabi_f2d>
   b4f46:	4602      	mov	r2, r0
   b4f48:	460b      	mov	r3, r1
   b4f4a:	4620      	mov	r0, r4
   b4f4c:	490c      	ldr	r1, [pc, #48]	; (b4f80 <_Z12tempTempladoi+0x80>)
   b4f4e:	f7ff fdd2 	bl	b4af6 <_ZN5Print8printlnfEPKcz>
    if (t > 7 && t < 26)
   b4f52:	eef1 7a0c 	vmov.f32	s15, #28	; 0x40e00000  7.0
   b4f56:	eeb4 8ae7 	vcmpe.f32	s16, s15
   b4f5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4f5e:	dc04      	bgt.n	b4f6a <_Z12tempTempladoi+0x6a>
        return true;
    else
        return false;
   b4f60:	2000      	movs	r0, #0
}
   b4f62:	b006      	add	sp, #24
   b4f64:	ecbd 8b02 	vpop	{d8}
   b4f68:	bd10      	pop	{r4, pc}
    if (t > 7 && t < 26)
   b4f6a:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
   b4f6e:	eeb4 8ae7 	vcmpe.f32	s16, s15
   b4f72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4f76:	bf4c      	ite	mi
   b4f78:	2001      	movmi	r0, #1
   b4f7a:	2000      	movpl	r0, #0
   b4f7c:	e7f1      	b.n	b4f62 <_Z12tempTempladoi+0x62>
   b4f7e:	bf00      	nop
   b4f80:	000bb709 	.word	0x000bb709

000b4f84 <_Z9tempCalori>:

bool tempCalor(int puerto)
{
   b4f84:	b530      	push	{r4, r5, lr}
   b4f86:	ed2d 8b02 	vpush	{d8}
   b4f8a:	b087      	sub	sp, #28
    DHT dht(puerto, DHT11);
   b4f8c:	b2c1      	uxtb	r1, r0
   b4f8e:	2306      	movs	r3, #6
   b4f90:	220b      	movs	r2, #11
   b4f92:	a801      	add	r0, sp, #4
   b4f94:	f004 f9e6 	bl	b9364 <_ZN3DHTC1Ehhh>
    dht.begin();
   b4f98:	a801      	add	r0, sp, #4
   b4f9a:	f004 f9ea 	bl	b9372 <_ZN3DHT5beginEv>
    float t = dht.getTempCelcius();
   b4f9e:	a801      	add	r0, sp, #4
   b4fa0:	f004 faa4 	bl	b94ec <_ZN3DHT14getTempCelciusEv>

    // The fast read may cause an invalid value like 0.0000 or NuLL. Repeat until valid value.
    while (isnan(t) | t == 0.0)
   b4fa4:	eeb5 0a40 	vcmp.f32	s0, #0.0
   b4fa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4fac:	eeb4 0a40 	vcmp.f32	s0, s0
   b4fb0:	bf0c      	ite	eq
   b4fb2:	2401      	moveq	r4, #1
   b4fb4:	2400      	movne	r4, #0
   b4fb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4fba:	bf68      	it	vs
   b4fbc:	f044 0401 	orrvs.w	r4, r4, #1
    float t = dht.getTempCelcius();
   b4fc0:	eeb0 8a40 	vmov.f32	s16, s0
    while (isnan(t) | t == 0.0)
   b4fc4:	2c00      	cmp	r4, #0
   b4fc6:	d1ea      	bne.n	b4f9e <_Z9tempCalori+0x1a>
    {
        t = dht.getTempCelcius();
    }

    Serial.printlnf("Temp: %f", t);
   b4fc8:	f005 ff1e 	bl	bae08 <_Z16_fetch_usbserialv>
   b4fcc:	4605      	mov	r5, r0
   b4fce:	ee18 0a10 	vmov	r0, s16
   b4fd2:	f7ff f989 	bl	b42e8 <__aeabi_f2d>
   b4fd6:	4602      	mov	r2, r0
   b4fd8:	460b      	mov	r3, r1
   b4fda:	4628      	mov	r0, r5
   b4fdc:	490b      	ldr	r1, [pc, #44]	; (b500c <_Z9tempCalori+0x88>)
   b4fde:	f7ff fd8a 	bl	b4af6 <_ZN5Print8printlnfEPKcz>
    if (t > 25 && t < 50)
   b4fe2:	eef3 7a09 	vmov.f32	s15, #57	; 0x41c80000  25.0
   b4fe6:	eeb4 8ae7 	vcmpe.f32	s16, s15
   b4fea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4fee:	dd08      	ble.n	b5002 <_Z9tempCalori+0x7e>
   b4ff0:	eddf 7a07 	vldr	s15, [pc, #28]	; b5010 <_Z9tempCalori+0x8c>
   b4ff4:	eeb4 8ae7 	vcmpe.f32	s16, s15
   b4ff8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4ffc:	bf4c      	ite	mi
   b4ffe:	2401      	movmi	r4, #1
   b5000:	2400      	movpl	r4, #0
        return true;
    else
        return false;
}
   b5002:	4620      	mov	r0, r4
   b5004:	b007      	add	sp, #28
   b5006:	ecbd 8b02 	vpop	{d8}
   b500a:	bd30      	pop	{r4, r5, pc}
   b500c:	000bb709 	.word	0x000bb709
   b5010:	42480000 	.word	0x42480000

000b5014 <_Z12DistanciaExpi>:
//---------------------------------------------------------------------------------------------------
//------------------------------------- M O D O   3 -------------------------------------------------
//---------------------------------------------------------------------------------------------------

int DistanciaExp(int puerto)
{
   b5014:	b507      	push	{r0, r1, r2, lr}
   b5016:	4601      	mov	r1, r0
    Ultrasonic ultrasonic(puerto);
   b5018:	a801      	add	r0, sp, #4
   b501a:	f004 f97d 	bl	b9318 <_ZN10UltrasonicC1Ei>
    int range = ultrasonic.MeasureInCentimeters();
   b501e:	a801      	add	r0, sp, #4
   b5020:	f004 f97c 	bl	b931c <_ZN10Ultrasonic20MeasureInCentimetersEv>
    // Serial.printlnf("Distancia: %d", range);
    return range;
}
   b5024:	b003      	add	sp, #12
   b5026:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b502c <_Z9AnguloExpv>:

int AnguloExp()
{
   b502c:	b510      	push	{r4, lr}
   b502e:	ed2d 8b04 	vpush	{d8-d9}
   float voltage;
    int sensor_value;
    for (int i = 0; i < 50; i++){
        sensor_value = analogRead(rotoryAngle_PIN);
        voltage += (float)sensor_value * 5 / 1023;
   b5032:	ed9f 9a1b 	vldr	s18, [pc, #108]	; b50a0 <_Z9AnguloExpv+0x74>
{
   b5036:	2432      	movs	r4, #50	; 0x32
        voltage += (float)sensor_value * 5 / 1023;
   b5038:	eeb1 8a04 	vmov.f32	s16, #20	; 0x40a00000  5.0
        sensor_value = analogRead(rotoryAngle_PIN);
   b503c:	2013      	movs	r0, #19
   b503e:	f006 f956 	bl	bb2ee <analogRead>
        voltage += (float)sensor_value * 5 / 1023;
   b5042:	ee07 0a90 	vmov	s15, r0
   b5046:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    for (int i = 0; i < 50; i++){
   b504a:	3c01      	subs	r4, #1
        voltage += (float)sensor_value * 5 / 1023;
   b504c:	ee67 7a88 	vmul.f32	s15, s15, s16
   b5050:	ee87 7a89 	vdiv.f32	s14, s15, s18
   b5054:	ee78 8a87 	vadd.f32	s17, s17, s14
    for (int i = 0; i < 50; i++){
   b5058:	d1f0      	bne.n	b503c <_Z9AnguloExpv+0x10>
    }
    voltage = voltage/50;
   b505a:	ed9f 7a12 	vldr	s14, [pc, #72]	; b50a4 <_Z9AnguloExpv+0x78>
   float degrees = (voltage * 300) / 5;
   degrees = degrees * 270 / 1200;
   b505e:	ed9f 6a12 	vldr	s12, [pc, #72]	; b50a8 <_Z9AnguloExpv+0x7c>
    voltage = voltage/50;
   b5062:	eec8 7a87 	vdiv.f32	s15, s17, s14
   float degrees = (voltage * 300) / 5;
   b5066:	ed9f 7a11 	vldr	s14, [pc, #68]	; b50ac <_Z9AnguloExpv+0x80>
   b506a:	ee67 7a87 	vmul.f32	s15, s15, s14
   b506e:	ee87 7a88 	vdiv.f32	s14, s15, s16
   degrees = 270 - degrees;
   if (degrees < 0)
    degrees = 0;

   return (int) degrees;
}
   b5072:	ecbd 8b04 	vpop	{d8-d9}
   degrees = degrees * 270 / 1200;
   b5076:	eddf 7a0e 	vldr	s15, [pc, #56]	; b50b0 <_Z9AnguloExpv+0x84>
   b507a:	ee27 7a27 	vmul.f32	s14, s14, s15
   b507e:	eec7 6a06 	vdiv.f32	s13, s14, s12
   degrees = 270 - degrees;
   b5082:	ee77 7ae6 	vsub.f32	s15, s15, s13
   if (degrees < 0)
   b5086:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   b508a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    degrees = 0;
   b508e:	bf48      	it	mi
   b5090:	eddf 7a08 	vldrmi	s15, [pc, #32]	; b50b4 <_Z9AnguloExpv+0x88>
}
   b5094:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   b5098:	ee17 0a90 	vmov	r0, s15
   b509c:	bd10      	pop	{r4, pc}
   b509e:	bf00      	nop
   b50a0:	447fc000 	.word	0x447fc000
   b50a4:	42480000 	.word	0x42480000
   b50a8:	44960000 	.word	0x44960000
   b50ac:	43960000 	.word	0x43960000
   b50b0:	43870000 	.word	0x43870000
   b50b4:	00000000 	.word	0x00000000

000b50b8 <_Z6LuzExpv>:

int LuzExp()
{
   b50b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b50ba:	2432      	movs	r4, #50	; 0x32
    int value = 0;
   b50bc:	2500      	movs	r5, #0
    for (int i = 0; i < 50; i++){
        value += analogRead(sensorLuz_PIN);
   b50be:	2013      	movs	r0, #19
   b50c0:	f006 f915 	bl	bb2ee <analogRead>
    for (int i = 0; i < 50; i++){
   b50c4:	3c01      	subs	r4, #1
        value += analogRead(sensorLuz_PIN);
   b50c6:	4405      	add	r5, r0
    for (int i = 0; i < 50; i++){
   b50c8:	d1f9      	bne.n	b50be <_Z6LuzExpv+0x6>
    }
    value = value/50;
    value = map(value, 0, 4095, 0, 100);
   b50ca:	2364      	movs	r3, #100	; 0x64
   b50cc:	9300      	str	r3, [sp, #0]
   b50ce:	f640 72ff 	movw	r2, #4095	; 0xfff
   b50d2:	4623      	mov	r3, r4
   b50d4:	4621      	mov	r1, r4
   b50d6:	2032      	movs	r0, #50	; 0x32
   b50d8:	fb95 f0f0 	sdiv	r0, r5, r0
   b50dc:	f005 fcb0 	bl	baa40 <_Z3mapiiiii>
    return value;
   
}
   b50e0:	b003      	add	sp, #12
   b50e2:	bd30      	pop	{r4, r5, pc}
   b50e4:	0000      	movs	r0, r0
	...

000b50e8 <_Z15SensorSonidoExpv>:

int SensorSonidoExp()
{
   b50e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b50ec:	f004 ffaa 	bl	ba044 <HAL_Timer_Get_Milli_Seconds>
    unsigned int sample;
    unsigned long startMillis= millis();                   // Start of sample window
    double peakToPeak = 0;                                 // peak-to-peak level
    
    unsigned int signalMax = 0;                            //minimum value
    unsigned int signalMin = 1024;                         //maximum value
   b50f0:	f44f 6580 	mov.w	r5, #1024	; 0x400
   b50f4:	4607      	mov	r7, r0
    unsigned int signalMax = 0;                            //minimum value
   b50f6:	2600      	movs	r6, #0
   b50f8:	f004 ffa4 	bl	ba044 <HAL_Timer_Get_Milli_Seconds>
    
                                                            // collect data for 50 mS
    while (millis() - startMillis < sampleWindow)
   b50fc:	1bc0      	subs	r0, r0, r7
   b50fe:	2831      	cmp	r0, #49	; 0x31
   b5100:	d818      	bhi.n	b5134 <_Z15SensorSonidoExpv+0x4c>
    {
        sample = analogRead(sensorSonido_PIN);              //get reading from microphone
   b5102:	2013      	movs	r0, #19
   b5104:	f006 f8f3 	bl	bb2ee <analogRead>
   b5108:	4604      	mov	r4, r0
        Serial.println(sample);
   b510a:	f005 fe7d 	bl	bae08 <_Z16_fetch_usbserialv>
        return printNumber(val, base) + t;
   b510e:	220a      	movs	r2, #10
   b5110:	4680      	mov	r8, r0
   b5112:	4621      	mov	r1, r4
   b5114:	f005 fc33 	bl	ba97e <_ZN5Print11printNumberEmh>
        n += println();
   b5118:	4640      	mov	r0, r8
   b511a:	f005 fc1a 	bl	ba952 <_ZN5Print7printlnEv>
        if (sample < 1024)                                  // toss out spurious readings
   b511e:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
   b5122:	d2e9      	bcs.n	b50f8 <_Z15SensorSonidoExpv+0x10>
        {
            if (sample > signalMax)
   b5124:	42a6      	cmp	r6, r4
   b5126:	d303      	bcc.n	b5130 <_Z15SensorSonidoExpv+0x48>
            {
                signalMax = sample;                           // save just the max levels
            }
            else if (sample < signalMin)
   b5128:	42a5      	cmp	r5, r4
   b512a:	bf28      	it	cs
   b512c:	4625      	movcs	r5, r4
   b512e:	e7e3      	b.n	b50f8 <_Z15SensorSonidoExpv+0x10>
   b5130:	4626      	mov	r6, r4
   b5132:	e7e1      	b.n	b50f8 <_Z15SensorSonidoExpv+0x10>
                signalMin = sample;                           // save just the min levels
            }
        }
    }
        
    peakToPeak = signalMax - signalMin;                    // max - min = peak-peak amplitude
   b5134:	1b70      	subs	r0, r6, r5
   b5136:	f7ff f8b5 	bl	b42a4 <__aeabi_ui2d>
    int db = map(peakToPeak,20.0,900.0,49.5,90.0); 
   b513a:	ed9f 4b09 	vldr	d4, [pc, #36]	; b5160 <_Z15SensorSonidoExpv+0x78>
   b513e:	ed9f 3b0a 	vldr	d3, [pc, #40]	; b5168 <_Z15SensorSonidoExpv+0x80>
   b5142:	ed9f 2b0b 	vldr	d2, [pc, #44]	; b5170 <_Z15SensorSonidoExpv+0x88>
   b5146:	ed9f 1b0c 	vldr	d1, [pc, #48]	; b5178 <_Z15SensorSonidoExpv+0x90>
   b514a:	ec41 0b10 	vmov	d0, r0, r1
   b514e:	f005 fc83 	bl	baa58 <_Z3mapddddd>
   b5152:	ec51 0b10 	vmov	r0, r1, d0
   b5156:	f7ff fbb9 	bl	b48cc <__aeabi_d2iz>
    return db;
    }
   b515a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b515e:	bf00      	nop
   b5160:	00000000 	.word	0x00000000
   b5164:	40568000 	.word	0x40568000
   b5168:	00000000 	.word	0x00000000
   b516c:	4048c000 	.word	0x4048c000
   b5170:	00000000 	.word	0x00000000
   b5174:	408c2000 	.word	0x408c2000
   b5178:	00000000 	.word	0x00000000
   b517c:	40340000 	.word	0x40340000

000b5180 <_Z13SensorTempExpi>:

int SensorTempExp(int puerto)
{
   b5180:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    DHT dht(puerto, DHT11);
   b5182:	b2c1      	uxtb	r1, r0
   b5184:	2306      	movs	r3, #6
   b5186:	220b      	movs	r2, #11
   b5188:	a801      	add	r0, sp, #4
   b518a:	f004 f8eb 	bl	b9364 <_ZN3DHTC1Ehhh>
    dht.begin();
   b518e:	a801      	add	r0, sp, #4
   b5190:	f004 f8ef 	bl	b9372 <_ZN3DHT5beginEv>
    float t = dht.getTempCelcius();
   b5194:	a801      	add	r0, sp, #4
   b5196:	f004 f9a9 	bl	b94ec <_ZN3DHT14getTempCelciusEv>

    // The fast read may cause an invalid value like 0.0000 or NuLL. Repeat until valid value.
    while (isnan(t) | t == 0.0)
   b519a:	eeb5 0a40 	vcmp.f32	s0, #0.0
   b519e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b51a2:	d0f7      	beq.n	b5194 <_Z13SensorTempExpi+0x14>
   b51a4:	eeb4 0a40 	vcmp.f32	s0, s0
   b51a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b51ac:	d6f2      	bvs.n	b5194 <_Z13SensorTempExpi+0x14>
    }

    //t = ajusta_temp(t); 
    
    return t;
}
   b51ae:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   b51b2:	ee17 0a90 	vmov	r0, s15
   b51b6:	b007      	add	sp, #28
   b51b8:	f85d fb04 	ldr.w	pc, [sp], #4

000b51bc <_Z9TurbiaExpi>:

int TurbiaExp(int puerto)
{
    int sensor_value;
    switch (puerto)
   b51bc:	2802      	cmp	r0, #2
   b51be:	d005      	beq.n	b51cc <_Z9TurbiaExpi+0x10>
   b51c0:	2804      	cmp	r0, #4
   b51c2:	d005      	beq.n	b51d0 <_Z9TurbiaExpi+0x14>
   b51c4:	b930      	cbnz	r0, b51d4 <_Z9TurbiaExpi+0x18>
    {
    case 0: 
        sensor_value = analogRead(A0);
   b51c6:	2013      	movs	r0, #19
        break;
    case 2:
        sensor_value = analogRead(A2);
        break;
    case 4:
        sensor_value = analogRead(A4);
   b51c8:	f006 b891 	b.w	bb2ee <analogRead>
        sensor_value = analogRead(A2);
   b51cc:	2011      	movs	r0, #17
   b51ce:	e7fb      	b.n	b51c8 <_Z9TurbiaExpi+0xc>
        sensor_value = analogRead(A4);
   b51d0:	200f      	movs	r0, #15
   b51d2:	e7f9      	b.n	b51c8 <_Z9TurbiaExpi+0xc>
        break;
    }
    return sensor_value;
}
   b51d4:	2000      	movs	r0, #0
   b51d6:	4770      	bx	lr

000b51d8 <_Z10leerSensoriii>:


bool leerSensor(int id, int condicion, int puerto)
{
   b51d8:	b508      	push	{r3, lr}
   b51da:	4603      	mov	r3, r0
   b51dc:	3b01      	subs	r3, #1
   b51de:	4610      	mov	r0, r2
   b51e0:	2b0b      	cmp	r3, #11
   b51e2:	d85f      	bhi.n	b52a4 <_Z10leerSensoriii+0xcc>
   b51e4:	e8df f003 	tbb	[pc, r3]
   b51e8:	1d140b06 	.word	0x1d140b06
   b51ec:	40062b22 	.word	0x40062b22
   b51f0:	5b575346 	.word	0x5b575346
    switch (id)
    {
    case 1:
        return (condicion == 0 ? noDistancia(puerto) : siDistancia(puerto));
   b51f4:	bba1      	cbnz	r1, b5260 <_Z10leerSensoriii+0x88>

    default:
        Serial.println("InvalidSensorError");
        return false;
    }
}
   b51f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0 ? noDistancia(puerto) : siDistancia(puerto));
   b51fa:	f7ff bc8a 	b.w	b4b12 <_Z11noDistanciai>
        return (condicion == 0 ? noLuz(puerto) : siLuz(puerto));
   b51fe:	b919      	cbnz	r1, b5208 <_Z10leerSensoriii+0x30>
}
   b5200:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0 ? noLuz(puerto) : siLuz(puerto));
   b5204:	f7ff bcb8 	b.w	b4b78 <_Z5noLuzi>
}
   b5208:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0 ? noLuz(puerto) : siLuz(puerto));
   b520c:	f7ff bc9f 	b.w	b4b4e <_Z5siLuzi>
        return (condicion == 0 ? noRuido(puerto) : siRuido(puerto));
   b5210:	b919      	cbnz	r1, b521a <_Z10leerSensoriii+0x42>
}
   b5212:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0 ? noRuido(puerto) : siRuido(puerto));
   b5216:	f7ff bceb 	b.w	b4bf0 <_Z7noRuidoi>
}
   b521a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0 ? noRuido(puerto) : siRuido(puerto));
   b521e:	f7ff bcc1 	b.w	b4ba4 <_Z7siRuidoi>
        return (condicion == 0 ? noBoton(puerto) : siBoton(puerto));
   b5222:	bb19      	cbnz	r1, b526c <_Z10leerSensoriii+0x94>
}
   b5224:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0 ? noBoton(puerto) : siBoton(puerto));
   b5228:	f7ff bcfb 	b.w	b4c22 <_Z7noBotoni>
        return (condicion == 0 ? noRotativo(puerto) : siRotativo(puerto));
   b522c:	b919      	cbnz	r1, b5236 <_Z10leerSensoriii+0x5e>
}
   b522e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0 ? noRotativo(puerto) : siRotativo(puerto));
   b5232:	f7ff bd49 	b.w	b4cc8 <_Z10noRotativoi>
}
   b5236:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0 ? noRotativo(puerto) : siRotativo(puerto));
   b523a:	f7ff bd01 	b.w	b4c40 <_Z10siRotativoi>
        switch (condicion)
   b523e:	2901      	cmp	r1, #1
   b5240:	d006      	beq.n	b5250 <_Z10leerSensoriii+0x78>
   b5242:	2902      	cmp	r1, #2
   b5244:	d008      	beq.n	b5258 <_Z10leerSensoriii+0x80>
   b5246:	b959      	cbnz	r1, b5260 <_Z10leerSensoriii+0x88>
}
   b5248:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            return tempFrio(puerto);
   b524c:	f7ff be14 	b.w	b4e78 <_Z8tempFrioi>
}
   b5250:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            return tempTemplado(puerto);
   b5254:	f7ff be54 	b.w	b4f00 <_Z12tempTempladoi>
}
   b5258:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            return tempCalor(puerto);
   b525c:	f7ff be92 	b.w	b4f84 <_Z9tempCalori>
}
   b5260:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0 ? noDistancia(puerto) : siDistancia(puerto));
   b5264:	f7ff bc64 	b.w	b4b30 <_Z11siDistanciai>
        return (condicion == 0 ? noAgua(puerto) : siAgua(puerto));
   b5268:	2900      	cmp	r1, #0
   b526a:	d1db      	bne.n	b5224 <_Z10leerSensoriii+0x4c>
}
   b526c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0 ? noBoton(puerto) : siBoton(puerto));
   b5270:	f7ff bcc8 	b.w	b4c04 <_Z7siBotoni>
        switch (condicion)
   b5274:	2901      	cmp	r1, #1
   b5276:	d006      	beq.n	b5286 <_Z10leerSensoriii+0xae>
   b5278:	2903      	cmp	r1, #3
   b527a:	d00c      	beq.n	b5296 <_Z10leerSensoriii+0xbe>
   b527c:	b939      	cbnz	r1, b528e <_Z10leerSensoriii+0xb6>
}
   b527e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            return noBotonDual(puerto);
   b5282:	f7ff bdb0 	b.w	b4de6 <_Z11noBotonDuali>
}
   b5286:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            return BotonDualA(puerto);
   b528a:	f7ff bd61 	b.w	b4d50 <_Z10BotonDualAi>
}
   b528e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            return BotonDualB(puerto);
   b5292:	f7ff bd76 	b.w	b4d82 <_Z10BotonDualBi>
}
   b5296:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            return BotonDual2(puerto);
   b529a:	f7ff bd8b 	b.w	b4db4 <_Z10BotonDual2i>
        switch (condicion)
   b529e:	b141      	cbz	r1, b52b2 <_Z10leerSensoriii+0xda>
   b52a0:	2901      	cmp	r1, #1
   b52a2:	d00a      	beq.n	b52ba <_Z10leerSensoriii+0xe2>
        Serial.println("InvalidSensorError");
   b52a4:	f005 fdb0 	bl	bae08 <_Z16_fetch_usbserialv>
   b52a8:	4906      	ldr	r1, [pc, #24]	; (b52c4 <_Z10leerSensoriii+0xec>)
   b52aa:	f005 fb5e 	bl	ba96a <_ZN5Print7printlnEPKc>
}
   b52ae:	2000      	movs	r0, #0
   b52b0:	bd08      	pop	{r3, pc}
   b52b2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            return Cafe(puerto);
   b52b6:	f7ff bdb0 	b.w	b4e1a <_Z4Cafei>
}
   b52ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            return AguaClara(puerto);           
   b52be:	f7ff bdc6 	b.w	b4e4e <_Z9AguaClarai>
   b52c2:	bf00      	nop
   b52c4:	000bb712 	.word	0x000bb712

000b52c8 <_Z13leerSensorExpii>:

int leerSensorExp(int id, int puerto){
   b52c8:	b508      	push	{r3, lr}
   b52ca:	4603      	mov	r3, r0
   b52cc:	3b02      	subs	r3, #2
   b52ce:	4608      	mov	r0, r1
   b52d0:	2b0a      	cmp	r3, #10
   b52d2:	d81f      	bhi.n	b5314 <_Z13leerSensorExpii+0x4c>
   b52d4:	e8df f003 	tbb	[pc, r3]
   b52d8:	0e1e0a06 	.word	0x0e1e0a06
   b52dc:	1e1e1612 	.word	0x1e1e1612
   b52e0:	1e1e      	.short	0x1e1e
   b52e2:	1a          	.byte	0x1a
   b52e3:	00          	.byte	0x00
    
    default:
        Serial.println("InvalidSensorError");
        return -1;
    }
}
   b52e4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return LuzExp();
   b52e8:	f7ff bee6 	b.w	b50b8 <_Z6LuzExpv>
}
   b52ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return SensorSonidoExp();
   b52f0:	f7ff befa 	b.w	b50e8 <_Z15SensorSonidoExpv>
}
   b52f4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return AnguloExp();
   b52f8:	f7ff be98 	b.w	b502c <_Z9AnguloExpv>
}
   b52fc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return SensorTempExp(puerto);
   b5300:	f7ff bf3e 	b.w	b5180 <_Z13SensorTempExpi>
}
   b5304:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return DistanciaExp(puerto);
   b5308:	f7ff be84 	b.w	b5014 <_Z12DistanciaExpi>
}
   b530c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return TurbiaExp(puerto);
   b5310:	f7ff bf54 	b.w	b51bc <_Z9TurbiaExpi>
        Serial.println("InvalidSensorError");
   b5314:	f005 fd78 	bl	bae08 <_Z16_fetch_usbserialv>
   b5318:	4902      	ldr	r1, [pc, #8]	; (b5324 <_Z13leerSensorExpii+0x5c>)
   b531a:	f005 fb26 	bl	ba96a <_ZN5Print7printlnEPKc>
}
   b531e:	f04f 30ff 	mov.w	r0, #4294967295
   b5322:	bd08      	pop	{r3, pc}
   b5324:	000bb712 	.word	0x000bb712

000b5328 <_Z9ledApagarv>:
bool init = false;

int counter = 0;

void ledApagar()
{
   b5328:	b507      	push	{r0, r1, r2, lr}
   ledObject.setColorRGB(0, 0, 0, 0);
   b532a:	2300      	movs	r3, #0
   b532c:	4804      	ldr	r0, [pc, #16]	; (b5340 <_Z9ledApagarv+0x18>)
   b532e:	9300      	str	r3, [sp, #0]
   b5330:	461a      	mov	r2, r3
   b5332:	4619      	mov	r1, r3
   b5334:	f004 fdb4 	bl	b9ea0 <_ZN12ChainableLED11setColorRGBEhhhh>
}
   b5338:	b003      	add	sp, #12
   b533a:	f85d fb04 	ldr.w	pc, [sp], #4
   b533e:	bf00      	nop
   b5340:	2003d6ec 	.word	0x2003d6ec

000b5344 <_Z7ledRojov>:
void ledRojo()
{
   b5344:	b507      	push	{r0, r1, r2, lr}
    // Serial.println("LedRojo");
    ledObject.setColorRGB(0, 255, 0, 0);
   b5346:	2300      	movs	r3, #0
   b5348:	4804      	ldr	r0, [pc, #16]	; (b535c <_Z7ledRojov+0x18>)
   b534a:	9300      	str	r3, [sp, #0]
   b534c:	22ff      	movs	r2, #255	; 0xff
   b534e:	4619      	mov	r1, r3
   b5350:	f004 fda6 	bl	b9ea0 <_ZN12ChainableLED11setColorRGBEhhhh>
}
   b5354:	b003      	add	sp, #12
   b5356:	f85d fb04 	ldr.w	pc, [sp], #4
   b535a:	bf00      	nop
   b535c:	2003d6ec 	.word	0x2003d6ec

000b5360 <_Z8ledVerdev>:
void ledVerde()
{
   b5360:	b507      	push	{r0, r1, r2, lr}
    ledObject.setColorRGB(0, 0, 255, 10);
   b5362:	230a      	movs	r3, #10
   b5364:	2200      	movs	r2, #0
   b5366:	9300      	str	r3, [sp, #0]
   b5368:	4803      	ldr	r0, [pc, #12]	; (b5378 <_Z8ledVerdev+0x18>)
   b536a:	23ff      	movs	r3, #255	; 0xff
   b536c:	4611      	mov	r1, r2
   b536e:	f004 fd97 	bl	b9ea0 <_ZN12ChainableLED11setColorRGBEhhhh>
}
   b5372:	b003      	add	sp, #12
   b5374:	f85d fb04 	ldr.w	pc, [sp], #4
   b5378:	2003d6ec 	.word	0x2003d6ec

000b537c <_Z7ledAzulv>:
void ledAzul()
{
   b537c:	b507      	push	{r0, r1, r2, lr}
    ledObject.setColorRGB(0, 0, 0, 255);
   b537e:	23ff      	movs	r3, #255	; 0xff
   b5380:	9300      	str	r3, [sp, #0]
   b5382:	2300      	movs	r3, #0
   b5384:	4803      	ldr	r0, [pc, #12]	; (b5394 <_Z7ledAzulv+0x18>)
   b5386:	461a      	mov	r2, r3
   b5388:	4619      	mov	r1, r3
   b538a:	f004 fd89 	bl	b9ea0 <_ZN12ChainableLED11setColorRGBEhhhh>
}
   b538e:	b003      	add	sp, #12
   b5390:	f85d fb04 	ldr.w	pc, [sp], #4
   b5394:	2003d6ec 	.word	0x2003d6ec

000b5398 <_Z11ledAmarillov>:
void ledAmarillo()
{
   b5398:	b507      	push	{r0, r1, r2, lr}
    ledObject.setColorRGB(0, 255, 233, 0);
   b539a:	2100      	movs	r1, #0
   b539c:	4804      	ldr	r0, [pc, #16]	; (b53b0 <_Z11ledAmarillov+0x18>)
   b539e:	9100      	str	r1, [sp, #0]
   b53a0:	23e9      	movs	r3, #233	; 0xe9
   b53a2:	22ff      	movs	r2, #255	; 0xff
   b53a4:	f004 fd7c 	bl	b9ea0 <_ZN12ChainableLED11setColorRGBEhhhh>
}
   b53a8:	b003      	add	sp, #12
   b53aa:	f85d fb04 	ldr.w	pc, [sp], #4
   b53ae:	bf00      	nop
   b53b0:	2003d6ec 	.word	0x2003d6ec

000b53b4 <_Z9ledMoradov>:
void ledMorado()
{
   b53b4:	b507      	push	{r0, r1, r2, lr}
    ledObject.setColorRGB(0, 108, 70, 117);
   b53b6:	2375      	movs	r3, #117	; 0x75
   b53b8:	9300      	str	r3, [sp, #0]
   b53ba:	4804      	ldr	r0, [pc, #16]	; (b53cc <_Z9ledMoradov+0x18>)
   b53bc:	2346      	movs	r3, #70	; 0x46
   b53be:	226c      	movs	r2, #108	; 0x6c
   b53c0:	2100      	movs	r1, #0
   b53c2:	f004 fd6d 	bl	b9ea0 <_ZN12ChainableLED11setColorRGBEhhhh>
}
   b53c6:	b003      	add	sp, #12
   b53c8:	f85d fb04 	ldr.w	pc, [sp], #4
   b53cc:	2003d6ec 	.word	0x2003d6ec

000b53d0 <_Z10ledNaranjav>:
void ledNaranja()
{
   b53d0:	b507      	push	{r0, r1, r2, lr}
    ledObject.setColorRGB(0, 255, 128, 0);
   b53d2:	2100      	movs	r1, #0
   b53d4:	4804      	ldr	r0, [pc, #16]	; (b53e8 <_Z10ledNaranjav+0x18>)
   b53d6:	9100      	str	r1, [sp, #0]
   b53d8:	2380      	movs	r3, #128	; 0x80
   b53da:	22ff      	movs	r2, #255	; 0xff
   b53dc:	f004 fd60 	bl	b9ea0 <_ZN12ChainableLED11setColorRGBEhhhh>
}
   b53e0:	b003      	add	sp, #12
   b53e2:	f85d fb04 	ldr.w	pc, [sp], #4
   b53e6:	bf00      	nop
   b53e8:	2003d6ec 	.word	0x2003d6ec

000b53ec <_Z9ledBlancov>:
void ledBlanco()
{
   b53ec:	b507      	push	{r0, r1, r2, lr}
    ledObject.setColorRGB(0, 255, 255, 255);
   b53ee:	23ff      	movs	r3, #255	; 0xff
   b53f0:	4804      	ldr	r0, [pc, #16]	; (b5404 <_Z9ledBlancov+0x18>)
   b53f2:	9300      	str	r3, [sp, #0]
   b53f4:	461a      	mov	r2, r3
   b53f6:	2100      	movs	r1, #0
   b53f8:	f004 fd52 	bl	b9ea0 <_ZN12ChainableLED11setColorRGBEhhhh>
}
   b53fc:	b003      	add	sp, #12
   b53fe:	f85d fb04 	ldr.w	pc, [sp], #4
   b5402:	bf00      	nop
   b5404:	2003d6ec 	.word	0x2003d6ec

000b5408 <_Z11ledArcoirisv>:
void ledArcoiris()
{
   b5408:	b510      	push	{r4, lr}
   switch (counter)
   b540a:	4c11      	ldr	r4, [pc, #68]	; (b5450 <_Z11ledArcoirisv+0x48>)
   b540c:	6823      	ldr	r3, [r4, #0]
   b540e:	2b05      	cmp	r3, #5
   b5410:	d809      	bhi.n	b5426 <_Z11ledArcoirisv+0x1e>
   b5412:	e8df f003 	tbb	[pc, r3]
   b5416:	0d03      	.short	0x0d03
   b5418:	19161310 	.word	0x19161310
   {
   case 0:
      ledRojo();
   b541c:	f7ff ff92 	bl	b5344 <_Z7ledRojov>
      counter++;
      break;

   case 4:
      ledMorado();
      counter++;
   b5420:	6823      	ldr	r3, [r4, #0]
   b5422:	3301      	adds	r3, #1
      break;

   case 5:
      ledAzul();
      counter = 0;
   b5424:	6023      	str	r3, [r4, #0]
    for (double i = 0; i < 1; i += 0.01)
    {
        ledObject.setColorHSB(0, i, 0.75, 0.75);
    }*/

}
   b5426:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   delay(150);
   b542a:	2096      	movs	r0, #150	; 0x96
   b542c:	f005 bb57 	b.w	baade <delay>
      ledNaranja();
   b5430:	f7ff ffce 	bl	b53d0 <_Z10ledNaranjav>
      counter++;
   b5434:	e7f4      	b.n	b5420 <_Z11ledArcoirisv+0x18>
      ledAmarillo();
   b5436:	f7ff ffaf 	bl	b5398 <_Z11ledAmarillov>
      counter++;
   b543a:	e7f1      	b.n	b5420 <_Z11ledArcoirisv+0x18>
      ledVerde();
   b543c:	f7ff ff90 	bl	b5360 <_Z8ledVerdev>
      counter++;
   b5440:	e7ee      	b.n	b5420 <_Z11ledArcoirisv+0x18>
      ledMorado();
   b5442:	f7ff ffb7 	bl	b53b4 <_Z9ledMoradov>
   b5446:	e7eb      	b.n	b5420 <_Z11ledArcoirisv+0x18>
      ledAzul();
   b5448:	f7ff ff98 	bl	b537c <_Z7ledAzulv>
      counter = 0;
   b544c:	2300      	movs	r3, #0
   b544e:	e7e9      	b.n	b5424 <_Z11ledArcoirisv+0x1c>
   b5450:	2003d344 	.word	0x2003d344

000b5454 <_Z9pitidoON0v>:
//--------------------------------- M O D O   0 ---------------------------------
//-------------------------------------------------------------------------------

void 
pitidoON0()
{
   b5454:	b508      	push	{r3, lr}
   //Serial.println("Zumbador ON");
   digitalWrite(Zumbador_PIN, 1);
   b5456:	2101      	movs	r1, #1
   b5458:	2006      	movs	r0, #6
   b545a:	f005 ff1c 	bl	bb296 <digitalWrite>
   digitalWrite(Zumbador_PIN, HIGH);
   b545e:	2101      	movs	r1, #1
   b5460:	2006      	movs	r0, #6
   b5462:	f005 ff18 	bl	bb296 <digitalWrite>
   digitalWrite(D7, HIGH);
   b5466:	2101      	movs	r1, #1
   b5468:	2007      	movs	r0, #7
   b546a:	f005 ff14 	bl	bb296 <digitalWrite>
   digitalWrite(D7, 1);
}
   b546e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   digitalWrite(D7, 1);
   b5472:	2101      	movs	r1, #1
   b5474:	2007      	movs	r0, #7
   b5476:	f005 bf0e 	b.w	bb296 <digitalWrite>

000b547a <_Z10pitidoOFF0v>:

void pitidoOFF0()
{
   b547a:	b508      	push	{r3, lr}
   //Serial.println("Zumbador OFF");
   digitalWrite(Zumbador_PIN, 0);
   b547c:	2100      	movs	r1, #0
   b547e:	2006      	movs	r0, #6
   b5480:	f005 ff09 	bl	bb296 <digitalWrite>
   digitalWrite(Zumbador_PIN, LOW);
   b5484:	2100      	movs	r1, #0
   b5486:	2006      	movs	r0, #6
   b5488:	f005 ff05 	bl	bb296 <digitalWrite>
   digitalWrite(D7, LOW);
   b548c:	2100      	movs	r1, #0
   b548e:	2007      	movs	r0, #7
   b5490:	f005 ff01 	bl	bb296 <digitalWrite>
   digitalWrite(D7, 0);
}
   b5494:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   digitalWrite(D7, 0);
   b5498:	2100      	movs	r1, #0
   b549a:	2007      	movs	r0, #7
   b549c:	f005 befb 	b.w	bb296 <digitalWrite>

000b54a0 <_Z12pitidoBlink0v>:

void pitidoBlink0()
{
   b54a0:	b508      	push	{r3, lr}
   pitidoON0();
   b54a2:	f7ff ffd7 	bl	b5454 <_Z9pitidoON0v>
   delay(100);
   b54a6:	2064      	movs	r0, #100	; 0x64
   b54a8:	f005 fb19 	bl	baade <delay>
   pitidoOFF0();
   b54ac:	f7ff ffe5 	bl	b547a <_Z10pitidoOFF0v>
   delay(100);
}
   b54b0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   delay(100);
   b54b4:	2064      	movs	r0, #100	; 0x64
   b54b6:	f005 bb12 	b.w	baade <delay>

000b54ba <_Z14ledAzulNaranjab>:

void ledAzulNaranja(boolean estado)
{
   if (estado)
   b54ba:	b108      	cbz	r0, b54c0 <_Z14ledAzulNaranjab+0x6>
   {
      ledAzul();
   b54bc:	f7ff bf5e 	b.w	b537c <_Z7ledAzulv>
   }
   else
   {
      ledNaranja();
   b54c0:	f7ff bf86 	b.w	b53d0 <_Z10ledNaranjav>

000b54c4 <_Z17ledMoradoAmarillob>:
   }
}
void ledMoradoAmarillo(boolean estado)
{
   if (estado)
   b54c4:	b108      	cbz	r0, b54ca <_Z17ledMoradoAmarillob+0x6>
   {
      ledAmarillo();
   b54c6:	f7ff bf67 	b.w	b5398 <_Z11ledAmarillov>
   }
   else
   {
      ledMorado();
   b54ca:	f7ff bf73 	b.w	b53b4 <_Z9ledMoradov>

000b54ce <_Z12ledVerdeRojob>:
   }
}
void ledVerdeRojo(boolean estado)
{
   if (estado)
   b54ce:	b108      	cbz	r0, b54d4 <_Z12ledVerdeRojob+0x6>
   {
      ledVerde();
   b54d0:	f7ff bf46 	b.w	b5360 <_Z8ledVerdev>
   }
   else
   {
      ledRojo();
   b54d4:	f7ff bf36 	b.w	b5344 <_Z7ledRojov>

000b54d8 <_Z9ledBlink0b>:
   }
}
void ledBlink0(boolean estado)
{
   b54d8:	b508      	push	{r3, lr}
   if (estado)
   b54da:	b160      	cbz	r0, b54f6 <_Z9ledBlink0b+0x1e>
   {
      ledBlanco();
   b54dc:	f7ff ff86 	bl	b53ec <_Z9ledBlancov>
      delay(400);
   b54e0:	f44f 70c8 	mov.w	r0, #400	; 0x190
   b54e4:	f005 fafb 	bl	baade <delay>
      ledApagar();
   b54e8:	f7ff ff1e 	bl	b5328 <_Z9ledApagarv>
   }
   else
   {
      ledApagar();
   }
}
   b54ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      delay(200);
   b54f0:	20c8      	movs	r0, #200	; 0xc8
   b54f2:	f005 baf4 	b.w	baade <delay>
}
   b54f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      ledApagar();
   b54fa:	f7ff bf15 	b.w	b5328 <_Z9ledApagarv>

000b54fe <_Z8ledOnOffb>:

void ledOnOff(boolean estado)
{
   if (estado)
   b54fe:	b108      	cbz	r0, b5504 <_Z8ledOnOffb+0x6>
   {
      ledBlanco();
   b5500:	f7ff bf74 	b.w	b53ec <_Z9ledBlancov>
   }
   else
   {
      ledApagar();
   b5504:	f7ff bf10 	b.w	b5328 <_Z9ledApagarv>

000b5508 <_Z12ledArcoiris0b>:
   }
}

void ledArcoiris0(boolean estado)
{
   if (estado)
   b5508:	b108      	cbz	r0, b550e <_Z12ledArcoiris0b+0x6>
   {
      ledArcoiris();
   b550a:	f7ff bf7d 	b.w	b5408 <_Z11ledArcoirisv>
   }
   else
   {
      ledApagar();
   b550e:	f7ff bf0b 	b.w	b5328 <_Z9ledApagarv>

000b5512 <_Z13blinkAndSleepb>:
   }
}

void blinkAndSleep(boolean estado)
{
   if (estado)
   b5512:	b108      	cbz	r0, b5518 <_Z13blinkAndSleepb+0x6>
   {
      pitidoBlink0();
   b5514:	f7ff bfc4 	b.w	b54a0 <_Z12pitidoBlink0v>
   }
   else
   {
      pitidoOFF0();
   b5518:	f7ff bfaf 	b.w	b547a <_Z10pitidoOFF0v>

000b551c <_Z8zumbadorb>:
   }
}
void zumbador(boolean estado)
{
   if (estado)
   b551c:	b108      	cbz	r0, b5522 <_Z8zumbadorb+0x6>
   {
      pitidoON0();
   b551e:	f7ff bf99 	b.w	b5454 <_Z9pitidoON0v>
   }
   else
   {
      pitidoOFF0();
   b5522:	f7ff bfaa 	b.w	b547a <_Z10pitidoOFF0v>
	...

000b5528 <_Z15activarActuadoriib>:
   }
}

void activarActuador(int id, int opcion, boolean valor)
{
   switch (id)
   b5528:	2801      	cmp	r0, #1
{
   b552a:	b538      	push	{r3, r4, r5, lr}
   b552c:	460d      	mov	r5, r1
   b552e:	4614      	mov	r4, r2
   switch (id)
   b5530:	d027      	beq.n	b5582 <_Z15activarActuadoriib+0x5a>
   b5532:	280d      	cmp	r0, #13
   b5534:	d03b      	beq.n	b55ae <_Z15activarActuadoriib+0x86>
   b5536:	bb48      	cbnz	r0, b558c <_Z15activarActuadoriib+0x64>
   {
      pitidoOFF0();
   // Actuador led
   case 0:

      switch (opcion) {
   b5538:	2905      	cmp	r1, #5
   b553a:	d827      	bhi.n	b558c <_Z15activarActuadoriib+0x64>
   b553c:	e8df f001 	tbb	[pc, r1]
   b5540:	120d0803 	.word	0x120d0803
   b5544:	1c17      	.short	0x1c17
      
   default:
      Serial.println("Valor no valido");
      break;
   }
}
   b5546:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            ledVerdeRojo(valor);
   b554a:	4610      	mov	r0, r2
   b554c:	f7ff bfbf 	b.w	b54ce <_Z12ledVerdeRojob>
}
   b5550:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            ledMoradoAmarillo(valor);
   b5554:	4610      	mov	r0, r2
   b5556:	f7ff bfb5 	b.w	b54c4 <_Z17ledMoradoAmarillob>
}
   b555a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            ledAzulNaranja(valor);
   b555e:	4610      	mov	r0, r2
   b5560:	f7ff bfab 	b.w	b54ba <_Z14ledAzulNaranjab>
}
   b5564:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            ledBlink0(valor);
   b5568:	4610      	mov	r0, r2
   b556a:	f7ff bfb5 	b.w	b54d8 <_Z9ledBlink0b>
}
   b556e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            ledArcoiris0(valor);
   b5572:	4610      	mov	r0, r2
   b5574:	f7ff bfc8 	b.w	b5508 <_Z12ledArcoiris0b>
}
   b5578:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            ledOnOff(valor);
   b557c:	4610      	mov	r0, r2
   b557e:	f7ff bfbe 	b.w	b54fe <_Z8ledOnOffb>
      ledApagar();
   b5582:	f7ff fed1 	bl	b5328 <_Z9ledApagarv>
      switch (opcion) {
   b5586:	b145      	cbz	r5, b559a <_Z15activarActuadoriib+0x72>
   b5588:	2d01      	cmp	r5, #1
   b558a:	d00b      	beq.n	b55a4 <_Z15activarActuadoriib+0x7c>
            Serial.println("Valor no valido");
   b558c:	f005 fc3c 	bl	bae08 <_Z16_fetch_usbserialv>
}
   b5590:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            Serial.println("Valor no valido");
   b5594:	490f      	ldr	r1, [pc, #60]	; (b55d4 <_Z15activarActuadoriib+0xac>)
   b5596:	f005 b9e8 	b.w	ba96a <_ZN5Print7printlnEPKc>
            zumbador(valor);
   b559a:	4620      	mov	r0, r4
}
   b559c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            zumbador(valor);
   b55a0:	f7ff bfbc 	b.w	b551c <_Z8zumbadorb>
            blinkAndSleep(valor);
   b55a4:	4620      	mov	r0, r4
}
   b55a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            blinkAndSleep(valor);
   b55aa:	f7ff bfb2 	b.w	b5512 <_Z13blinkAndSleepb>
      pitidoOFF0();
   b55ae:	f7ff ff64 	bl	b547a <_Z10pitidoOFF0v>
      ledApagar();
   b55b2:	f7ff feb9 	bl	b5328 <_Z9ledApagarv>
      pinMode(A2, OUTPUT);
   b55b6:	2101      	movs	r1, #1
   b55b8:	2011      	movs	r0, #17
   b55ba:	f005 fe5b 	bl	bb274 <pinMode>
      if (valor) {
   b55be:	b134      	cbz	r4, b55ce <_Z15activarActuadoriib+0xa6>
         analogWrite(A2, 50, 40);
   b55c0:	2228      	movs	r2, #40	; 0x28
   b55c2:	2132      	movs	r1, #50	; 0x32
}
   b55c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
         analogWrite(A2, 0, 0);
   b55c8:	2011      	movs	r0, #17
   b55ca:	f005 bea7 	b.w	bb31c <_Z11analogWritetmm>
   b55ce:	4622      	mov	r2, r4
   b55d0:	4621      	mov	r1, r4
   b55d2:	e7f7      	b.n	b55c4 <_Z15activarActuadoriib+0x9c>
   b55d4:	000bb725 	.word	0x000bb725

000b55d8 <_Z8ledBlinkv>:
//-------------------------------------------------------------------------------
//--------------------------------- M O D O   1 ---------------------------------
//-------------------------------------------------------------------------------

void ledBlink()
{
   b55d8:	b508      	push	{r3, lr}
    ledBlanco();
   b55da:	f7ff ff07 	bl	b53ec <_Z9ledBlancov>
    delay(400);
   b55de:	f44f 70c8 	mov.w	r0, #400	; 0x190
   b55e2:	f005 fa7c 	bl	baade <delay>
    ledApagar();
   b55e6:	f7ff fe9f 	bl	b5328 <_Z9ledApagarv>
    delay(200);
}
   b55ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    delay(200);
   b55ee:	20c8      	movs	r0, #200	; 0xc8
   b55f0:	f005 ba75 	b.w	baade <delay>

000b55f4 <_Z9pitidoON1i>:

// Acciones del zumbador MODO 1
void pitidoON1(int puerto)
{
   b55f4:	b513      	push	{r0, r1, r4, lr}
    digitalWrite(puerto, 1);
   b55f6:	b284      	uxth	r4, r0
   b55f8:	4620      	mov	r0, r4
   b55fa:	2101      	movs	r1, #1
   b55fc:	f005 fe4b 	bl	bb296 <digitalWrite>
    digitalWrite(puerto, HIGH);
   b5600:	4620      	mov	r0, r4
   b5602:	2101      	movs	r1, #1
   b5604:	f005 fe47 	bl	bb296 <digitalWrite>
    digitalWrite(puerto + 1, HIGH);
   b5608:	1c60      	adds	r0, r4, #1
   b560a:	b280      	uxth	r0, r0
   b560c:	2101      	movs	r1, #1
   b560e:	9001      	str	r0, [sp, #4]
   b5610:	f005 fe41 	bl	bb296 <digitalWrite>
    digitalWrite(puerto + 1, 1);
   b5614:	9801      	ldr	r0, [sp, #4]
   b5616:	2101      	movs	r1, #1
}
   b5618:	b002      	add	sp, #8
   b561a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    digitalWrite(puerto + 1, 1);
   b561e:	f005 be3a 	b.w	bb296 <digitalWrite>

000b5622 <_Z10pitidoOFF1i>:

void pitidoOFF1(int puerto)
{
   b5622:	b513      	push	{r0, r1, r4, lr}
    digitalWrite(puerto, 0);
   b5624:	b284      	uxth	r4, r0
   b5626:	4620      	mov	r0, r4
   b5628:	2100      	movs	r1, #0
   b562a:	f005 fe34 	bl	bb296 <digitalWrite>
    digitalWrite(puerto, LOW);
   b562e:	4620      	mov	r0, r4
   b5630:	2100      	movs	r1, #0
   b5632:	f005 fe30 	bl	bb296 <digitalWrite>
    digitalWrite(puerto + 1, LOW);
   b5636:	1c60      	adds	r0, r4, #1
   b5638:	b280      	uxth	r0, r0
   b563a:	2100      	movs	r1, #0
   b563c:	9001      	str	r0, [sp, #4]
   b563e:	f005 fe2a 	bl	bb296 <digitalWrite>
    digitalWrite(puerto + 1, 0);
   b5642:	9801      	ldr	r0, [sp, #4]
   b5644:	2100      	movs	r1, #0
}
   b5646:	b002      	add	sp, #8
   b5648:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    digitalWrite(puerto + 1, 0);
   b564c:	f005 be23 	b.w	bb296 <digitalWrite>

000b5650 <_Z12pitidoBlink1i>:

void pitidoBlink1(int puerto)
{
   b5650:	b510      	push	{r4, lr}
   b5652:	4604      	mov	r4, r0
    pitidoON1(puerto);
   b5654:	f7ff ffce 	bl	b55f4 <_Z9pitidoON1i>
    delay(100);
   b5658:	2064      	movs	r0, #100	; 0x64
   b565a:	f005 fa40 	bl	baade <delay>
    pitidoOFF1(puerto);
   b565e:	4620      	mov	r0, r4
   b5660:	f7ff ffdf 	bl	b5622 <_Z10pitidoOFF1i>
    delay(100);
}
   b5664:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delay(100);
   b5668:	2064      	movs	r0, #100	; 0x64
   b566a:	f005 ba38 	b.w	baade <delay>
	...

000b5670 <_Z10activarLEDii>:

// Recive el actuador que es, el tipo de actuador, el puerto al que esta conectado, el valor de los sensores para actuar en consecuencia y los puertos de dichos sensores.
void activarLED(int opcion, int puerto)
{
   b5670:	b508      	push	{r3, lr}
   b5672:	2807      	cmp	r0, #7
   b5674:	d825      	bhi.n	b56c2 <_Z10activarLEDii+0x52>
   b5676:	e8df f000 	tbb	[pc, r0]
   b567a:	0804      	.short	0x0804
   b567c:	1814100c 	.word	0x1814100c
   b5680:	201c      	.short	0x201c

    default:
        Serial.println("LedErrorOption");
        break;
    }
}
   b5682:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        ledVerde();
   b5686:	f7ff be6b 	b.w	b5360 <_Z8ledVerdev>
}
   b568a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        ledRojo();
   b568e:	f7ff be59 	b.w	b5344 <_Z7ledRojov>
}
   b5692:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        ledAmarillo();
   b5696:	f7ff be7f 	b.w	b5398 <_Z11ledAmarillov>
}
   b569a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        ledMorado();
   b569e:	f7ff be89 	b.w	b53b4 <_Z9ledMoradov>
}
   b56a2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        ledAzul();
   b56a6:	f7ff be69 	b.w	b537c <_Z7ledAzulv>
}
   b56aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        ledNaranja();
   b56ae:	f7ff be8f 	b.w	b53d0 <_Z10ledNaranjav>
}
   b56b2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        ledBlink();
   b56b6:	f7ff bf8f 	b.w	b55d8 <_Z8ledBlinkv>
}
   b56ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        ledArcoiris();
   b56be:	f7ff bea3 	b.w	b5408 <_Z11ledArcoirisv>
        Serial.println("LedErrorOption");
   b56c2:	f005 fba1 	bl	bae08 <_Z16_fetch_usbserialv>
}
   b56c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        Serial.println("LedErrorOption");
   b56ca:	4901      	ldr	r1, [pc, #4]	; (b56d0 <_Z10activarLEDii+0x60>)
   b56cc:	f005 b94d 	b.w	ba96a <_ZN5Print7printlnEPKc>
   b56d0:	000bb735 	.word	0x000bb735

000b56d4 <_Z15activarZumbadorii>:

void activarZumbador(int opcion, int puerto)
{
   b56d4:	b538      	push	{r3, r4, r5, lr}
   b56d6:	460c      	mov	r4, r1
   b56d8:	4605      	mov	r5, r0
    pinMode(puerto, OUTPUT);
   b56da:	2101      	movs	r1, #1
   b56dc:	b2a0      	uxth	r0, r4
   b56de:	f005 fdc9 	bl	bb274 <pinMode>

    switch (opcion)
   b56e2:	b145      	cbz	r5, b56f6 <_Z15activarZumbadorii+0x22>
   b56e4:	2d01      	cmp	r5, #1
   b56e6:	d00b      	beq.n	b5700 <_Z15activarZumbadorii+0x2c>
        break;
    case 1:
        pitidoBlink1(puerto);
        break;
    default:
        Serial.println("Valor no valido");
   b56e8:	f005 fb8e 	bl	bae08 <_Z16_fetch_usbserialv>
        break;
    }
}
   b56ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        Serial.println("Valor no valido");
   b56f0:	4906      	ldr	r1, [pc, #24]	; (b570c <_Z15activarZumbadorii+0x38>)
   b56f2:	f005 b93a 	b.w	ba96a <_ZN5Print7printlnEPKc>
        pitidoON1(puerto);
   b56f6:	4620      	mov	r0, r4
}
   b56f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        pitidoON1(puerto);
   b56fc:	f7ff bf7a 	b.w	b55f4 <_Z9pitidoON1i>
        pitidoBlink1(puerto);
   b5700:	4620      	mov	r0, r4
}
   b5702:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        pitidoBlink1(puerto);
   b5706:	f7ff bfa3 	b.w	b5650 <_Z12pitidoBlink1i>
   b570a:	bf00      	nop
   b570c:	000bb725 	.word	0x000bb725

000b5710 <_Z17activarVentiladorii>:

void activarVentilador(int opcion, int puerto)
{
   b5710:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b5712:	460c      	mov	r4, r1
   b5714:	4605      	mov	r5, r0
   pitidoOFF0();
   b5716:	f7ff feb0 	bl	b547a <_Z10pitidoOFF0v>
   ledApagar();
   b571a:	f7ff fe05 	bl	b5328 <_Z9ledApagarv>

   int p;
   switch (puerto)
   b571e:	2c04      	cmp	r4, #4
   b5720:	bf9a      	itte	ls
   b5722:	4b0d      	ldrls	r3, [pc, #52]	; (b5758 <_Z17activarVentiladorii+0x48>)
   b5724:	571b      	ldrsbls	r3, [r3, r4]
   ledApagar();
   b5726:	f04f 33ff 	movhi.w	r3, #4294967295
    default:
        p = -1;
        break;
    }

   pinMode(p, OUTPUT);
   b572a:	b298      	uxth	r0, r3
   b572c:	2101      	movs	r1, #1
   b572e:	9001      	str	r0, [sp, #4]
   b5730:	f005 fda0 	bl	bb274 <pinMode>
    switch (opcion)
   b5734:	2d01      	cmp	r5, #1
   b5736:	d807      	bhi.n	b5748 <_Z17activarVentiladorii+0x38>
    {
    case 0:
      analogWrite(p, 50, 50);
      break;
    case 1:
      analogWrite(p, 50, 50);
   b5738:	2232      	movs	r2, #50	; 0x32
   b573a:	9801      	ldr	r0, [sp, #4]
   b573c:	4611      	mov	r1, r2
      Serial.println("Valor no valido");
      break;
    }


}
   b573e:	b003      	add	sp, #12
   b5740:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      analogWrite(p, 50, 50);
   b5744:	f005 bdea 	b.w	bb31c <_Z11analogWritetmm>
      Serial.println("Valor no valido");
   b5748:	f005 fb5e 	bl	bae08 <_Z16_fetch_usbserialv>
   b574c:	4903      	ldr	r1, [pc, #12]	; (b575c <_Z17activarVentiladorii+0x4c>)
}
   b574e:	b003      	add	sp, #12
   b5750:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      Serial.println("Valor no valido");
   b5754:	f005 b909 	b.w	ba96a <_ZN5Print7printlnEPKc>
   b5758:	000bc20f 	.word	0x000bc20f
   b575c:	000bb725 	.word	0x000bb725

000b5760 <_Z10ventApagari>:

void ventApagar(int puerto)
{
      int p;
      switch (puerto)
   b5760:	2804      	cmp	r0, #4
{
   b5762:	b507      	push	{r0, r1, r2, lr}
   b5764:	bf9a      	itte	ls
   b5766:	4b08      	ldrls	r3, [pc, #32]	; (b5788 <_Z10ventApagari+0x28>)
   b5768:	5618      	ldrsbls	r0, [r3, r0]
   b576a:	f04f 30ff 	movhi.w	r0, #4294967295

      default:
         p = -1;
         break;
      }
      pinMode(p, OUTPUT);
   b576e:	b280      	uxth	r0, r0
   b5770:	2101      	movs	r1, #1
   b5772:	9001      	str	r0, [sp, #4]
   b5774:	f005 fd7e 	bl	bb274 <pinMode>
      analogWrite(p, 0, 0);
   b5778:	2200      	movs	r2, #0
   b577a:	9801      	ldr	r0, [sp, #4]
   b577c:	4611      	mov	r1, r2
}
   b577e:	b003      	add	sp, #12
   b5780:	f85d eb04 	ldr.w	lr, [sp], #4
      analogWrite(p, 0, 0);
   b5784:	f005 bdca 	b.w	bb31c <_Z11analogWritetmm>
   b5788:	000bc20f 	.word	0x000bc20f

000b578c <_Z14apagarActuadorii>:

void apagarActuador(int id, int puerto)
{
   b578c:	b538      	push	{r3, r4, r5, lr}
   b578e:	460c      	mov	r4, r1
    id == 0 ? ledApagar() : digitalWrite(puerto, 0);
   b5790:	4605      	mov	r5, r0
   b5792:	b918      	cbnz	r0, b579c <_Z14apagarActuadorii+0x10>
    if (id == 13){
      ventApagar(puerto);
    }

}
   b5794:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    id == 0 ? ledApagar() : digitalWrite(puerto, 0);
   b5798:	f7ff bdc6 	b.w	b5328 <_Z9ledApagarv>
   b579c:	2100      	movs	r1, #0
   b579e:	b2a0      	uxth	r0, r4
   b57a0:	f005 fd79 	bl	bb296 <digitalWrite>
    if (id == 13){
   b57a4:	2d0d      	cmp	r5, #13
   b57a6:	d104      	bne.n	b57b2 <_Z14apagarActuadorii+0x26>
      ventApagar(puerto);
   b57a8:	4620      	mov	r0, r4
}
   b57aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ventApagar(puerto);
   b57ae:	f7ff bfd7 	b.w	b5760 <_Z10ventApagari>
}
   b57b2:	bd38      	pop	{r3, r4, r5, pc}

000b57b4 <_Z15actuadorHandleriii>:

void actuadorHandler(int id, int opcion, int puerto)
{
   b57b4:	4603      	mov	r3, r0
    if (id < 2)
   b57b6:	2b01      	cmp	r3, #1
{
   b57b8:	4608      	mov	r0, r1
   b57ba:	4611      	mov	r1, r2
    if (id < 2)
   b57bc:	dc04      	bgt.n	b57c8 <_Z15actuadorHandleriii+0x14>
        id == 0 ? activarLED(opcion, puerto) : activarZumbador(opcion, puerto);
   b57be:	b90b      	cbnz	r3, b57c4 <_Z15actuadorHandleriii+0x10>
   b57c0:	f7ff bf56 	b.w	b5670 <_Z10activarLEDii>
   b57c4:	f7ff bf86 	b.w	b56d4 <_Z15activarZumbadorii>
   if (id == 13)
   b57c8:	2b0d      	cmp	r3, #13
   b57ca:	d101      	bne.n	b57d0 <_Z15actuadorHandleriii+0x1c>
      activarVentilador(opcion, puerto);
   b57cc:	f7ff bfa0 	b.w	b5710 <_Z17activarVentiladorii>
}
   b57d0:	4770      	bx	lr
	...

000b57d4 <_Z10borradoALLi>:
   switch (modo)
   b57d4:	2801      	cmp	r0, #1
   b57d6:	d004      	beq.n	b57e2 <_Z10borradoALLi+0xe>
   b57d8:	2802      	cmp	r0, #2
   b57da:	d013      	beq.n	b5804 <_Z10borradoALLi+0x30>
   b57dc:	b988      	cbnz	r0, b5802 <_Z10borradoALLi+0x2e>
   b57de:	f7ff b949 	b.w	b4a74 <_Z10borradoALLi.part.0>
      IF_pasado = false;
   b57e2:	4a0c      	ldr	r2, [pc, #48]	; (b5814 <_Z10borradoALLi+0x40>)
   b57e4:	2300      	movs	r3, #0
   b57e6:	7013      	strb	r3, [r2, #0]
      THEN_pasado = false;
   b57e8:	4a0b      	ldr	r2, [pc, #44]	; (b5818 <_Z10borradoALLi+0x44>)
   b57ea:	7013      	strb	r3, [r2, #0]
      ELSE_pasado = false;
   b57ec:	4a0b      	ldr	r2, [pc, #44]	; (b581c <_Z10borradoALLi+0x48>)
   b57ee:	7013      	strb	r3, [r2, #0]
      numBloque = -1;
   b57f0:	4a0b      	ldr	r2, [pc, #44]	; (b5820 <_Z10borradoALLi+0x4c>)
   b57f2:	f04f 31ff 	mov.w	r1, #4294967295
   b57f6:	6011      	str	r1, [r2, #0]
      puertoDigital = 3;
   b57f8:	4a0a      	ldr	r2, [pc, #40]	; (b5824 <_Z10borradoALLi+0x50>)
   b57fa:	2103      	movs	r1, #3
   b57fc:	6011      	str	r1, [r2, #0]
      puertoAnalogico = 0;
   b57fe:	4a0a      	ldr	r2, [pc, #40]	; (b5828 <_Z10borradoALLi+0x54>)
      tam_bucle = 0;
   b5800:	6013      	str	r3, [r2, #0]
}
   b5802:	4770      	bx	lr
      posicion = 0;
   b5804:	4a09      	ldr	r2, [pc, #36]	; (b582c <_Z10borradoALLi+0x58>)
   b5806:	2300      	movs	r3, #0
   b5808:	6013      	str	r3, [r2, #0]
      bucle = false;
   b580a:	4a09      	ldr	r2, [pc, #36]	; (b5830 <_Z10borradoALLi+0x5c>)
   b580c:	7013      	strb	r3, [r2, #0]
      tam_bucle = 0;
   b580e:	4a09      	ldr	r2, [pc, #36]	; (b5834 <_Z10borradoALLi+0x60>)
   b5810:	e7f6      	b.n	b5800 <_Z10borradoALLi+0x2c>
   b5812:	bf00      	nop
   b5814:	2003c73d 	.word	0x2003c73d
   b5818:	2003c74c 	.word	0x2003c74c
   b581c:	2003c73c 	.word	0x2003c73c
   b5820:	2003c69c 	.word	0x2003c69c
   b5824:	2003c6a0 	.word	0x2003c6a0
   b5828:	2003da3c 	.word	0x2003da3c
   b582c:	2003da34 	.word	0x2003da34
   b5830:	2003d300 	.word	0x2003d300
   b5834:	2003dc38 	.word	0x2003dc38

000b5838 <_Z10borradoPOPv>:
      break;
   }
}

void borradoPOP(){
   posicion--;
   b5838:	4a0e      	ldr	r2, [pc, #56]	; (b5874 <_Z10borradoPOPv+0x3c>)
   b583a:	6813      	ldr	r3, [r2, #0]
   b583c:	3b01      	subs	r3, #1
   b583e:	6013      	str	r3, [r2, #0]

   if (notas[posicion] == -2) { // Ultima es N iter
   b5840:	4a0d      	ldr	r2, [pc, #52]	; (b5878 <_Z10borradoPOPv+0x40>)
   b5842:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
   b5846:	1c8a      	adds	r2, r1, #2
   b5848:	4a0c      	ldr	r2, [pc, #48]	; (b587c <_Z10borradoPOPv+0x44>)
   b584a:	d107      	bne.n	b585c <_Z10borradoPOPv+0x24>
      bucle = true;
   b584c:	2101      	movs	r1, #1
   b584e:	7011      	strb	r1, [r2, #0]
      tam_bucle = duraciones[posicion];
   b5850:	4a0b      	ldr	r2, [pc, #44]	; (b5880 <_Z10borradoPOPv+0x48>)
   b5852:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   b5856:	4b0b      	ldr	r3, [pc, #44]	; (b5884 <_Z10borradoPOPv+0x4c>)
   b5858:	601a      	str	r2, [r3, #0]
   b585a:	4770      	bx	lr

   } else if (notas[posicion] == -1) { // Ultima es LOOP
   b585c:	3101      	adds	r1, #1
   b585e:	d102      	bne.n	b5866 <_Z10borradoPOPv+0x2e>
      bucle = false;
   b5860:	2300      	movs	r3, #0
   b5862:	7013      	strb	r3, [r2, #0]
   b5864:	4770      	bx	lr

   } else {
      if (bucle) {
   b5866:	7813      	ldrb	r3, [r2, #0]
   b5868:	b11b      	cbz	r3, b5872 <_Z10borradoPOPv+0x3a>
         tam_bucle--;
   b586a:	4a06      	ldr	r2, [pc, #24]	; (b5884 <_Z10borradoPOPv+0x4c>)
   b586c:	6813      	ldr	r3, [r2, #0]
   b586e:	3b01      	subs	r3, #1
   b5870:	6013      	str	r3, [r2, #0]
      }
   }
}
   b5872:	4770      	bx	lr
   b5874:	2003da34 	.word	0x2003da34
   b5878:	2003d704 	.word	0x2003d704
   b587c:	2003d300 	.word	0x2003d300
   b5880:	2003d3bc 	.word	0x2003d3bc
   b5884:	2003dc38 	.word	0x2003dc38

000b5888 <_Z15decodificarNOTAi>:

//--------------------------------  REPRODUCCION  -------------------------------------

int decodificarNOTA(int nota) {
   b5888:	b508      	push	{r3, lr}
   b588a:	2807      	cmp	r0, #7
   b588c:	d816      	bhi.n	b58bc <_Z15decodificarNOTAi+0x34>
   b588e:	e8df f000 	tbb	[pc, r0]
   b5892:	0704      	.short	0x0704
   b5894:	0f0d0b09 	.word	0x0f0d0b09
   b5898:	1311      	.short	0x1311
   switch (nota)
   {
   case 0:
      return DO;
   b589a:	4b0c      	ldr	r3, [pc, #48]	; (b58cc <_Z15decodificarNOTAi+0x44>)

   case 6:
      return SI;

   case 7:
      return DO_;
   b589c:	6818      	ldr	r0, [r3, #0]

   default:
      Serial.println("Nota inválida");
      return -1;
   }
}
   b589e:	bd08      	pop	{r3, pc}
      return RE;
   b58a0:	4b0b      	ldr	r3, [pc, #44]	; (b58d0 <_Z15decodificarNOTAi+0x48>)
   b58a2:	e7fb      	b.n	b589c <_Z15decodificarNOTAi+0x14>
      return MI;
   b58a4:	4b0b      	ldr	r3, [pc, #44]	; (b58d4 <_Z15decodificarNOTAi+0x4c>)
   b58a6:	e7f9      	b.n	b589c <_Z15decodificarNOTAi+0x14>
      return FA;
   b58a8:	4b0b      	ldr	r3, [pc, #44]	; (b58d8 <_Z15decodificarNOTAi+0x50>)
   b58aa:	e7f7      	b.n	b589c <_Z15decodificarNOTAi+0x14>
      return SOL;
   b58ac:	4b0b      	ldr	r3, [pc, #44]	; (b58dc <_Z15decodificarNOTAi+0x54>)
   b58ae:	e7f5      	b.n	b589c <_Z15decodificarNOTAi+0x14>
      return LA;
   b58b0:	4b0b      	ldr	r3, [pc, #44]	; (b58e0 <_Z15decodificarNOTAi+0x58>)
   b58b2:	e7f3      	b.n	b589c <_Z15decodificarNOTAi+0x14>
      return SI;
   b58b4:	4b0b      	ldr	r3, [pc, #44]	; (b58e4 <_Z15decodificarNOTAi+0x5c>)
   b58b6:	e7f1      	b.n	b589c <_Z15decodificarNOTAi+0x14>
      return DO_;
   b58b8:	4b0b      	ldr	r3, [pc, #44]	; (b58e8 <_Z15decodificarNOTAi+0x60>)
   b58ba:	e7ef      	b.n	b589c <_Z15decodificarNOTAi+0x14>
      Serial.println("Nota inválida");
   b58bc:	f005 faa4 	bl	bae08 <_Z16_fetch_usbserialv>
   b58c0:	490a      	ldr	r1, [pc, #40]	; (b58ec <_Z15decodificarNOTAi+0x64>)
   b58c2:	f005 f852 	bl	ba96a <_ZN5Print7printlnEPKc>
      return -1;
   b58c6:	f04f 30ff 	mov.w	r0, #4294967295
   b58ca:	e7e8      	b.n	b589e <_Z15decodificarNOTAi+0x16>
   b58cc:	2003c674 	.word	0x2003c674
   b58d0:	2003c688 	.word	0x2003c688
   b58d4:	2003c684 	.word	0x2003c684
   b58d8:	2003c67c 	.word	0x2003c67c
   b58dc:	2003c690 	.word	0x2003c690
   b58e0:	2003c680 	.word	0x2003c680
   b58e4:	2003c68c 	.word	0x2003c68c
   b58e8:	2003c678 	.word	0x2003c678
   b58ec:	000bb744 	.word	0x000bb744

000b58f0 <_Z15decodificarTIPOi>:

int decodificarTIPO(int tipo) {
   switch (tipo)
   b58f0:	2802      	cmp	r0, #2
int decodificarTIPO(int tipo) {
   b58f2:	b508      	push	{r3, lr}
   b58f4:	d803      	bhi.n	b58fe <_Z15decodificarTIPOi+0xe>
   b58f6:	4b06      	ldr	r3, [pc, #24]	; (b5910 <_Z15decodificarTIPOi+0x20>)
   b58f8:	f933 0010 	ldrsh.w	r0, [r3, r0, lsl #1]

   default:
      Serial.println("Tipo inválido");
      return -1;
   }
}
   b58fc:	bd08      	pop	{r3, pc}
      Serial.println("Tipo inválido");
   b58fe:	f005 fa83 	bl	bae08 <_Z16_fetch_usbserialv>
   b5902:	4904      	ldr	r1, [pc, #16]	; (b5914 <_Z15decodificarTIPOi+0x24>)
   b5904:	f005 f831 	bl	ba96a <_ZN5Print7printlnEPKc>
   b5908:	f04f 30ff 	mov.w	r0, #4294967295
   b590c:	e7f6      	b.n	b58fc <_Z15decodificarTIPOi+0xc>
   b590e:	bf00      	nop
   b5910:	000bc214 	.word	0x000bc214
   b5914:	000bb753 	.word	0x000bb753

000b5918 <_Z19decodificarNOTA_msgi>:

String decodificarNOTA_msg(int nota) {
   b5918:	b510      	push	{r4, lr}
   b591a:	4604      	mov	r4, r0
   b591c:	2907      	cmp	r1, #7
   b591e:	d819      	bhi.n	b5954 <_Z19decodificarNOTA_msgi+0x3c>
   b5920:	e8df f001 	tbb	[pc, r1]
   b5924:	0e0c0a04 	.word	0x0e0c0a04
   b5928:	16141210 	.word	0x16141210
   switch (nota)
   {
   case 0:
      return "DO";
   b592c:	490a      	ldr	r1, [pc, #40]	; (b5958 <_Z19decodificarNOTA_msgi+0x40>)

   case 7:
      return "do";

   default:
      return "Nota inválida";
   b592e:	4620      	mov	r0, r4
   b5930:	f004 ff4d 	bl	ba7ce <_ZN6StringC1EPK19__FlashStringHelper>
   }
}
   b5934:	4620      	mov	r0, r4
   b5936:	bd10      	pop	{r4, pc}
      return "RE";
   b5938:	4908      	ldr	r1, [pc, #32]	; (b595c <_Z19decodificarNOTA_msgi+0x44>)
   b593a:	e7f8      	b.n	b592e <_Z19decodificarNOTA_msgi+0x16>
      return "MI";
   b593c:	4908      	ldr	r1, [pc, #32]	; (b5960 <_Z19decodificarNOTA_msgi+0x48>)
   b593e:	e7f6      	b.n	b592e <_Z19decodificarNOTA_msgi+0x16>
      return "FA";
   b5940:	4908      	ldr	r1, [pc, #32]	; (b5964 <_Z19decodificarNOTA_msgi+0x4c>)
   b5942:	e7f4      	b.n	b592e <_Z19decodificarNOTA_msgi+0x16>
      return "SOL";
   b5944:	4908      	ldr	r1, [pc, #32]	; (b5968 <_Z19decodificarNOTA_msgi+0x50>)
   b5946:	e7f2      	b.n	b592e <_Z19decodificarNOTA_msgi+0x16>
      return "LA";
   b5948:	4908      	ldr	r1, [pc, #32]	; (b596c <_Z19decodificarNOTA_msgi+0x54>)
   b594a:	e7f0      	b.n	b592e <_Z19decodificarNOTA_msgi+0x16>
      return "SI";
   b594c:	4908      	ldr	r1, [pc, #32]	; (b5970 <_Z19decodificarNOTA_msgi+0x58>)
   b594e:	e7ee      	b.n	b592e <_Z19decodificarNOTA_msgi+0x16>
      return "do";
   b5950:	4908      	ldr	r1, [pc, #32]	; (b5974 <_Z19decodificarNOTA_msgi+0x5c>)
   b5952:	e7ec      	b.n	b592e <_Z19decodificarNOTA_msgi+0x16>
      return "Nota inválida";
   b5954:	4908      	ldr	r1, [pc, #32]	; (b5978 <_Z19decodificarNOTA_msgi+0x60>)
   b5956:	e7ea      	b.n	b592e <_Z19decodificarNOTA_msgi+0x16>
   b5958:	000bbbb3 	.word	0x000bbbb3
   b595c:	000bb762 	.word	0x000bb762
   b5960:	000bb765 	.word	0x000bb765
   b5964:	000bb768 	.word	0x000bb768
   b5968:	000bb76b 	.word	0x000bb76b
   b596c:	000bb76f 	.word	0x000bb76f
   b5970:	000bb772 	.word	0x000bb772
   b5974:	000bbd71 	.word	0x000bbd71
   b5978:	000bb744 	.word	0x000bb744

000b597c <_Z19decodificarTIPO_msgi>:

String decodificarTIPO_msg(int tipo) {
   switch (tipo)
   b597c:	2901      	cmp	r1, #1
String decodificarTIPO_msg(int tipo) {
   b597e:	b510      	push	{r4, lr}
   b5980:	4604      	mov	r4, r0
   switch (tipo)
   b5982:	d007      	beq.n	b5994 <_Z19decodificarTIPO_msgi+0x18>
   b5984:	2902      	cmp	r1, #2
   b5986:	d007      	beq.n	b5998 <_Z19decodificarTIPO_msgi+0x1c>
   b5988:	b941      	cbnz	r1, b599c <_Z19decodificarTIPO_msgi+0x20>
   {
   case 0:
      return "_C";
   b598a:	4905      	ldr	r1, [pc, #20]	; (b59a0 <_Z19decodificarTIPO_msgi+0x24>)

   case 2:
      return "_B";

   default:
      return "Tipo inválido";
   b598c:	f004 ff1f 	bl	ba7ce <_ZN6StringC1EPK19__FlashStringHelper>
   }
}
   b5990:	4620      	mov	r0, r4
   b5992:	bd10      	pop	{r4, pc}
      return "_N";
   b5994:	4903      	ldr	r1, [pc, #12]	; (b59a4 <_Z19decodificarTIPO_msgi+0x28>)
   b5996:	e7f9      	b.n	b598c <_Z19decodificarTIPO_msgi+0x10>
      return "_B";
   b5998:	4903      	ldr	r1, [pc, #12]	; (b59a8 <_Z19decodificarTIPO_msgi+0x2c>)
   b599a:	e7f7      	b.n	b598c <_Z19decodificarTIPO_msgi+0x10>
      return "Tipo inválido";
   b599c:	4903      	ldr	r1, [pc, #12]	; (b59ac <_Z19decodificarTIPO_msgi+0x30>)
   b599e:	e7f5      	b.n	b598c <_Z19decodificarTIPO_msgi+0x10>
   b59a0:	000bb775 	.word	0x000bb775
   b59a4:	000bb778 	.word	0x000bb778
   b59a8:	000bb77b 	.word	0x000bb77b
   b59ac:	000bb753 	.word	0x000bb753

000b59b0 <_Z14reproducirNOTAii>:

void reproducirNOTA(int nota, int tipo) {
   b59b0:	b513      	push	{r0, r1, r4, lr}
   b59b2:	460c      	mov	r4, r1
   int frecuencia = decodificarNOTA(nota);
   b59b4:	f7ff ff68 	bl	b5888 <_Z15decodificarNOTAi>
   b59b8:	9001      	str	r0, [sp, #4]
   int duracion = decodificarTIPO(tipo);
   b59ba:	4620      	mov	r0, r4
   b59bc:	f7ff ff98 	bl	b58f0 <_Z15decodificarTIPOi>

   tone(Zumbador_PIN, frecuencia);
   b59c0:	9901      	ldr	r1, [sp, #4]
   b59c2:	2200      	movs	r2, #0
   int duracion = decodificarTIPO(tipo);
   b59c4:	4604      	mov	r4, r0
   tone(Zumbador_PIN, frecuencia);
   b59c6:	2006      	movs	r0, #6
   b59c8:	f005 fa48 	bl	bae5c <tone>
   delay(duracion);
   b59cc:	4620      	mov	r0, r4
   b59ce:	f005 f886 	bl	baade <delay>
   noTone(Zumbador_PIN);
   b59d2:	2006      	movs	r0, #6
   b59d4:	f005 fa59 	bl	bae8a <noTone>
   delay(30);
   b59d8:	201e      	movs	r0, #30
}
   b59da:	b002      	add	sp, #8
   b59dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   delay(30);
   b59e0:	f005 b87d 	b.w	baade <delay>

000b59e4 <_Z13isValidSensori>:
   return type == 0;
}

// TRUE Si el disposivo no ha sido utilizado en el bloque ACTUAL.
bool isValidSensor(int deviceID)
{
   b59e4:	b510      	push	{r4, lr}
  for (int i = 0; i < bloques[numBloque].numSensores; i++)
   b59e6:	4b0d      	ldr	r3, [pc, #52]	; (b5a1c <_Z13isValidSensori+0x38>)
   b59e8:	681a      	ldr	r2, [r3, #0]
   b59ea:	4b0d      	ldr	r3, [pc, #52]	; (b5a20 <_Z13isValidSensori+0x3c>)
   b59ec:	f44f 713b 	mov.w	r1, #748	; 0x2ec
   b59f0:	434a      	muls	r2, r1
   b59f2:	5899      	ldr	r1, [r3, r2]
   b59f4:	4413      	add	r3, r2
   b59f6:	2200      	movs	r2, #0
   b59f8:	4291      	cmp	r1, r2
   b59fa:	dd0d      	ble.n	b5a18 <_Z13isValidSensori+0x34>
  {
    if (bloques[numBloque].sensores[i].id == deviceID)
   b59fc:	685c      	ldr	r4, [r3, #4]
   b59fe:	4284      	cmp	r4, r0
   b5a00:	f103 0310 	add.w	r3, r3, #16
   b5a04:	d106      	bne.n	b5a14 <_Z13isValidSensori+0x30>
    {
      Serial.println("Invalid sensor! -> Sensor repetido en el bloque");
   b5a06:	f005 f9ff 	bl	bae08 <_Z16_fetch_usbserialv>
   b5a0a:	4906      	ldr	r1, [pc, #24]	; (b5a24 <_Z13isValidSensori+0x40>)
   b5a0c:	f004 ffad 	bl	ba96a <_ZN5Print7printlnEPKc>
   b5a10:	2000      	movs	r0, #0
      return false;
    }
  };

  return true;
}
   b5a12:	bd10      	pop	{r4, pc}
  for (int i = 0; i < bloques[numBloque].numSensores; i++)
   b5a14:	3201      	adds	r2, #1
   b5a16:	e7ef      	b.n	b59f8 <_Z13isValidSensori+0x14>
  return true;
   b5a18:	2001      	movs	r0, #1
   b5a1a:	e7fa      	b.n	b5a12 <_Z13isValidSensori+0x2e>
   b5a1c:	2003c69c 	.word	0x2003c69c
   b5a20:	2003cd28 	.word	0x2003cd28
   b5a24:	000bb77e 	.word	0x000bb77e

000b5a28 <_Z11isNewSensori>:

// -1 si el sensor es nuevo, o el puerto donde esta siendo usado.
int isNewSensor(int deviceID)
{
   b5a28:	b5f0      	push	{r4, r5, r6, r7, lr}
  for (int i = 0; i <= numBloque; i++)
   b5a2a:	4b11      	ldr	r3, [pc, #68]	; (b5a70 <_Z11isNewSensori+0x48>)
   b5a2c:	4a11      	ldr	r2, [pc, #68]	; (b5a74 <_Z11isNewSensori+0x4c>)
   b5a2e:	681e      	ldr	r6, [r3, #0]
   b5a30:	4694      	mov	ip, r2
   b5a32:	2300      	movs	r3, #0
   b5a34:	429e      	cmp	r6, r3
   b5a36:	db17      	blt.n	b5a68 <_Z11isNewSensori+0x40>
  {
    for (int j = 0; j < bloques[i].numSensores; j++)
   b5a38:	6817      	ldr	r7, [r2, #0]
   b5a3a:	4615      	mov	r5, r2
   b5a3c:	2100      	movs	r1, #0
   b5a3e:	428f      	cmp	r7, r1
   b5a40:	dd0e      	ble.n	b5a60 <_Z11isNewSensori+0x38>
    {
      if (bloques[i].sensores[j].id == deviceID)
   b5a42:	686c      	ldr	r4, [r5, #4]
   b5a44:	4284      	cmp	r4, r0
   b5a46:	f105 0510 	add.w	r5, r5, #16
   b5a4a:	d107      	bne.n	b5a5c <_Z11isNewSensori+0x34>
        return bloques[i].sensores[j].puerto;
   b5a4c:	f44f 723b 	mov.w	r2, #748	; 0x2ec
   b5a50:	4353      	muls	r3, r2
   b5a52:	eb03 1301 	add.w	r3, r3, r1, lsl #4
   b5a56:	4463      	add	r3, ip
   b5a58:	6918      	ldr	r0, [r3, #16]
    }
  }
  return -1;
}
   b5a5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    for (int j = 0; j < bloques[i].numSensores; j++)
   b5a5c:	3101      	adds	r1, #1
   b5a5e:	e7ee      	b.n	b5a3e <_Z11isNewSensori+0x16>
  for (int i = 0; i <= numBloque; i++)
   b5a60:	3301      	adds	r3, #1
   b5a62:	f502 723b 	add.w	r2, r2, #748	; 0x2ec
   b5a66:	e7e5      	b.n	b5a34 <_Z11isNewSensori+0xc>
  return -1;
   b5a68:	f04f 30ff 	mov.w	r0, #4294967295
   b5a6c:	e7f5      	b.n	b5a5a <_Z11isNewSensori+0x32>
   b5a6e:	bf00      	nop
   b5a70:	2003c69c 	.word	0x2003c69c
   b5a74:	2003cd28 	.word	0x2003cd28

000b5a78 <_Z15isValidActuadorii>:


bool isValidActuador(int deviceState, int actuadorID)
{
   b5a78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    }
    
    // Comprobar que no se ha empleado en el bloque anterior, si existe
    if ( numBloque == 1)
    {
      for (int j = 0; j < bloques[0].numActuadores; j++)
   b5a7c:	4d19      	ldr	r5, [pc, #100]	; (b5ae4 <_Z15isValidActuadorii+0x6c>)
  for (int i = 0; i <= numBloque; i++)
   b5a7e:	4b1a      	ldr	r3, [pc, #104]	; (b5ae8 <_Z15isValidActuadorii+0x70>)
      for (int j = 0; j < bloques[0].numActuadores; j++)
   b5a80:	f8d5 e144 	ldr.w	lr, [r5, #324]	; 0x144
  for (int i = 0; i <= numBloque; i++)
   b5a84:	681f      	ldr	r7, [r3, #0]
{
   b5a86:	4684      	mov	ip, r0
      for (int j = 0; j < bloques[0].numActuadores; j++)
   b5a88:	462b      	mov	r3, r5
  for (int i = 0; i <= numBloque; i++)
   b5a8a:	2400      	movs	r4, #0
   b5a8c:	42a7      	cmp	r7, r4
   b5a8e:	db23      	blt.n	b5ad8 <_Z15isValidActuadorii+0x60>
    if ( i == numBloque ) 
   b5a90:	d110      	bne.n	b5ab4 <_Z15isValidActuadorii+0x3c>
      for (int j = 0; j < bloques[i].numActuadores; j++)
   b5a92:	f8d3 8144 	ldr.w	r8, [r3, #324]	; 0x144
   b5a96:	461a      	mov	r2, r3
   b5a98:	2600      	movs	r6, #0
   b5a9a:	45b0      	cmp	r8, r6
   b5a9c:	dd0a      	ble.n	b5ab4 <_Z15isValidActuadorii+0x3c>
        if (bloques[i].actuadores[j].condicion == deviceState && bloques[i].actuadores[j].id == actuadorID)
   b5a9e:	f8d2 014c 	ldr.w	r0, [r2, #332]	; 0x14c
   b5aa2:	4560      	cmp	r0, ip
   b5aa4:	d103      	bne.n	b5aae <_Z15isValidActuadorii+0x36>
   b5aa6:	f8d2 0148 	ldr.w	r0, [r2, #328]	; 0x148
   b5aaa:	4288      	cmp	r0, r1
   b5aac:	d017      	beq.n	b5ade <_Z15isValidActuadorii+0x66>
      for (int j = 0; j < bloques[i].numActuadores; j++)
   b5aae:	3601      	adds	r6, #1
   b5ab0:	3214      	adds	r2, #20
   b5ab2:	e7f2      	b.n	b5a9a <_Z15isValidActuadorii+0x22>
    if ( numBloque == 1)
   b5ab4:	2f01      	cmp	r7, #1
   b5ab6:	d10b      	bne.n	b5ad0 <_Z15isValidActuadorii+0x58>
   b5ab8:	462e      	mov	r6, r5
      for (int j = 0; j < bloques[0].numActuadores; j++)
   b5aba:	2200      	movs	r2, #0
   b5abc:	4596      	cmp	lr, r2
   b5abe:	dd07      	ble.n	b5ad0 <_Z15isValidActuadorii+0x58>
      {
        // Mismo actuador
        if (bloques[0].actuadores[j].id == actuadorID)
   b5ac0:	f8d6 0148 	ldr.w	r0, [r6, #328]	; 0x148
   b5ac4:	4288      	cmp	r0, r1
   b5ac6:	f106 0614 	add.w	r6, r6, #20
   b5aca:	d008      	beq.n	b5ade <_Z15isValidActuadorii+0x66>
      for (int j = 0; j < bloques[0].numActuadores; j++)
   b5acc:	3201      	adds	r2, #1
   b5ace:	e7f5      	b.n	b5abc <_Z15isValidActuadorii+0x44>
  for (int i = 0; i <= numBloque; i++)
   b5ad0:	3401      	adds	r4, #1
   b5ad2:	f503 733b 	add.w	r3, r3, #748	; 0x2ec
   b5ad6:	e7d9      	b.n	b5a8c <_Z15isValidActuadorii+0x14>
      }
      
    }
  }
  
  return true;
   b5ad8:	2001      	movs	r0, #1
}
   b5ada:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          return false;
   b5ade:	2000      	movs	r0, #0
   b5ae0:	e7fb      	b.n	b5ada <_Z15isValidActuadorii+0x62>
   b5ae2:	bf00      	nop
   b5ae4:	2003cd28 	.word	0x2003cd28
   b5ae8:	2003c69c 	.word	0x2003c69c

000b5aec <_Z13isNewActuadori>:


// -1 si no ha sido usado en ningun bloque, o el puerto donde se encuantra conectado.
int isNewActuador(int deviceID)
{
   b5aec:	b5f0      	push	{r4, r5, r6, r7, lr}

  for (int j = 0; j <= numBloque; j++)
   b5aee:	4b1d      	ldr	r3, [pc, #116]	; (b5b64 <_Z13isNewActuadori+0x78>)
   b5af0:	4a1d      	ldr	r2, [pc, #116]	; (b5b68 <_Z13isNewActuadori+0x7c>)
   b5af2:	681e      	ldr	r6, [r3, #0]
   b5af4:	4694      	mov	ip, r2
   b5af6:	2300      	movs	r3, #0
   b5af8:	429e      	cmp	r6, r3
   b5afa:	db15      	blt.n	b5b28 <_Z13isNewActuadori+0x3c>
  {
    for (int i = 0; i < bloques[j].numActuadores; i++)
   b5afc:	f8d2 7144 	ldr.w	r7, [r2, #324]	; 0x144
   b5b00:	4615      	mov	r5, r2
   b5b02:	2100      	movs	r1, #0
   b5b04:	428f      	cmp	r7, r1
   b5b06:	dd24      	ble.n	b5b52 <_Z13isNewActuadori+0x66>
    {
      if (bloques[j].actuadores[i].id == deviceID)
   b5b08:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
   b5b0c:	4284      	cmp	r4, r0
   b5b0e:	f105 0514 	add.w	r5, r5, #20
   b5b12:	d11c      	bne.n	b5b4e <_Z13isNewActuadori+0x62>
      {
        return bloques[j].actuadores[i].puerto;
   b5b14:	f44f 723b 	mov.w	r2, #748	; 0x2ec
   b5b18:	4353      	muls	r3, r2
   b5b1a:	2214      	movs	r2, #20
   b5b1c:	fb02 3301 	mla	r3, r2, r1, r3
   b5b20:	4463      	add	r3, ip
   b5b22:	f8d3 0154 	ldr.w	r0, [r3, #340]	; 0x154
        return bloque2[0].actuadores[i].puerto;
      }
    }
  
  return -1;
}
   b5b26:	bdf0      	pop	{r4, r5, r6, r7, pc}
   for (int i = 0; i < bloque2[0].numActuadores; i++)
   b5b28:	4b10      	ldr	r3, [pc, #64]	; (b5b6c <_Z13isNewActuadori+0x80>)
   b5b2a:	f8d3 4144 	ldr.w	r4, [r3, #324]	; 0x144
   b5b2e:	2200      	movs	r2, #0
   b5b30:	4619      	mov	r1, r3
   b5b32:	4294      	cmp	r4, r2
   b5b34:	dd13      	ble.n	b5b5e <_Z13isNewActuadori+0x72>
      if (bloque2[0].actuadores[i].id == deviceID)
   b5b36:	f8d3 5148 	ldr.w	r5, [r3, #328]	; 0x148
   b5b3a:	42a8      	cmp	r0, r5
   b5b3c:	f103 0314 	add.w	r3, r3, #20
   b5b40:	d10b      	bne.n	b5b5a <_Z13isNewActuadori+0x6e>
        return bloque2[0].actuadores[i].puerto;
   b5b42:	2314      	movs	r3, #20
   b5b44:	fb03 1202 	mla	r2, r3, r2, r1
   b5b48:	f8d2 0154 	ldr.w	r0, [r2, #340]	; 0x154
   b5b4c:	e7eb      	b.n	b5b26 <_Z13isNewActuadori+0x3a>
    for (int i = 0; i < bloques[j].numActuadores; i++)
   b5b4e:	3101      	adds	r1, #1
   b5b50:	e7d8      	b.n	b5b04 <_Z13isNewActuadori+0x18>
  for (int j = 0; j <= numBloque; j++)
   b5b52:	3301      	adds	r3, #1
   b5b54:	f502 723b 	add.w	r2, r2, #748	; 0x2ec
   b5b58:	e7ce      	b.n	b5af8 <_Z13isNewActuadori+0xc>
   for (int i = 0; i < bloque2[0].numActuadores; i++)
   b5b5a:	3201      	adds	r2, #1
   b5b5c:	e7e9      	b.n	b5b32 <_Z13isNewActuadori+0x46>
  return -1;
   b5b5e:	f04f 30ff 	mov.w	r0, #4294967295
   b5b62:	e7e0      	b.n	b5b26 <_Z13isNewActuadori+0x3a>
   b5b64:	2003c69c 	.word	0x2003c69c
   b5b68:	2003cd28 	.word	0x2003cd28
   b5b6c:	2003c750 	.word	0x2003c750

000b5b70 <_Z14isActuadorDualii>:

// True si el actuador es usado tanto para THEN como ELSE; Necesario para no apagarlo y encenderlo constantemente.
bool isActuadorDual(int deviceID, int bloque)
{
   b5b70:	b530      	push	{r4, r5, lr}
  int contador = 0;
  for (int i = 0; i < bloques[bloque].numActuadores; i++)
   b5b72:	4b0c      	ldr	r3, [pc, #48]	; (b5ba4 <_Z14isActuadorDualii+0x34>)
   b5b74:	f44f 723b 	mov.w	r2, #748	; 0x2ec
   b5b78:	fb02 3101 	mla	r1, r2, r1, r3
   b5b7c:	2200      	movs	r2, #0
   b5b7e:	f8d1 4144 	ldr.w	r4, [r1, #324]	; 0x144
  int contador = 0;
   b5b82:	4613      	mov	r3, r2
  for (int i = 0; i < bloques[bloque].numActuadores; i++)
   b5b84:	4294      	cmp	r4, r2
   b5b86:	dd08      	ble.n	b5b9a <_Z14isActuadorDualii+0x2a>
  {
    if (bloques[bloque].actuadores[i].id == deviceID)
   b5b88:	f8d1 5148 	ldr.w	r5, [r1, #328]	; 0x148
   b5b8c:	4285      	cmp	r5, r0
   b5b8e:	d101      	bne.n	b5b94 <_Z14isActuadorDualii+0x24>
      contador++;

    if (contador > 1)
   b5b90:	b92b      	cbnz	r3, b5b9e <_Z14isActuadorDualii+0x2e>
   b5b92:	2301      	movs	r3, #1
  for (int i = 0; i < bloques[bloque].numActuadores; i++)
   b5b94:	3201      	adds	r2, #1
   b5b96:	3114      	adds	r1, #20
   b5b98:	e7f4      	b.n	b5b84 <_Z14isActuadorDualii+0x14>
      return true;
  }

  return false;
   b5b9a:	2000      	movs	r0, #0
}
   b5b9c:	bd30      	pop	{r4, r5, pc}
      return true;
   b5b9e:	4618      	mov	r0, r3
   b5ba0:	e7fc      	b.n	b5b9c <_Z14isActuadorDualii+0x2c>
   b5ba2:	bf00      	nop
   b5ba4:	2003cd28 	.word	0x2003cd28

000b5ba8 <_Z12makeEvaluate6BLOQUE>:

// Evaluate recorre el vector de sensores, leyendo su valor y concatenandolo con el valor del siguiente
// en funcion de la condición que los une (AND u OR). Comenienzando por el primer sensor.
bool makeEvaluate(Bloque bloque)
{
   b5ba8:	b084      	sub	sp, #16
   b5baa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5bac:	ac06      	add	r4, sp, #24
   b5bae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   bool valorEvaluado = leerSensor(bloque.sensores[0].id, bloque.sensores[0].condicion, bloque.sensores[0].puerto);
   b5bb2:	e9dd 0107 	ldrd	r0, r1, [sp, #28]
   b5bb6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   b5bb8:	f7ff fb0e 	bl	b51d8 <_Z10leerSensoriii>
   b5bbc:	ad06      	add	r5, sp, #24
   b5bbe:	4604      	mov	r4, r0

   for (int i = 1; i < bloque.numSensores; i++)
   b5bc0:	afbc      	add	r7, sp, #752	; 0x2f0
   b5bc2:	2601      	movs	r6, #1
   b5bc4:	9b06      	ldr	r3, [sp, #24]
   b5bc6:	42b3      	cmp	r3, r6
   b5bc8:	dd12      	ble.n	b5bf0 <_Z12makeEvaluate6BLOQUE+0x48>
   {
      Sensor sigSensor = bloque.sensores[i];
      bool nextValor = leerSensor(sigSensor.id, sigSensor.condicion, sigSensor.puerto);
   b5bca:	e9d5 0105 	ldrd	r0, r1, [r5, #20]
   b5bce:	6a2a      	ldr	r2, [r5, #32]
   b5bd0:	f7ff fb02 	bl	b51d8 <_Z10leerSensoriii>

      if (bloque.condiciones.condicionesBloque[i - 1])
   b5bd4:	f817 3b01 	ldrb.w	r3, [r7], #1
   b5bd8:	b133      	cbz	r3, b5be8 <_Z12makeEvaluate6BLOQUE+0x40>
         valorEvaluado = (valorEvaluado && nextValor);
   b5bda:	2c00      	cmp	r4, #0
   b5bdc:	bf08      	it	eq
   b5bde:	2000      	moveq	r0, #0
   for (int i = 1; i < bloque.numSensores; i++)
   b5be0:	3601      	adds	r6, #1
   b5be2:	3510      	adds	r5, #16
   b5be4:	4604      	mov	r4, r0
   b5be6:	e7ed      	b.n	b5bc4 <_Z12makeEvaluate6BLOQUE+0x1c>
         valorEvaluado = (valorEvaluado && nextValor);
   b5be8:	2c00      	cmp	r4, #0
   b5bea:	bf18      	it	ne
   b5bec:	4620      	movne	r0, r4
   b5bee:	e7f7      	b.n	b5be0 <_Z12makeEvaluate6BLOQUE+0x38>
      else
         valorEvaluado = (valorEvaluado || nextValor);
   }

   return valorEvaluado;
}
   b5bf0:	4620      	mov	r0, r4
   b5bf2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   b5bf6:	b004      	add	sp, #16
   b5bf8:	4770      	bx	lr
	...

000b5bfc <_Z11serieBeforei>:

void serieBefore(int bloque){
   int esp;
   for (int j = 0; j < bloque2[bloque].numActuadores; j++)
   b5bfc:	4b0f      	ldr	r3, [pc, #60]	; (b5c3c <_Z11serieBeforei+0x40>)
void serieBefore(int bloque){
   b5bfe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b5c00:	f44f 743b 	mov.w	r4, #748	; 0x2ec
   b5c04:	fb04 3400 	mla	r4, r4, r0, r3
   for (int j = 0; j < bloque2[bloque].numActuadores; j++)
   b5c08:	2500      	movs	r5, #0
   b5c0a:	4627      	mov	r7, r4
   b5c0c:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
   b5c10:	42ab      	cmp	r3, r5
   b5c12:	f104 0414 	add.w	r4, r4, #20
   b5c16:	dd0f      	ble.n	b5c38 <_Z11serieBeforei+0x3c>
  {
   esp = 100;
   Actuador actuador = bloque2[bloque].actuadores[j];
   b5c18:	f8d4 6140 	ldr.w	r6, [r4, #320]	; 0x140
   b5c1c:	f8d4 0134 	ldr.w	r0, [r4, #308]	; 0x134
      actuadorHandler(actuador.id, actuador.condicion, actuador.puerto);
   b5c20:	f8d4 1138 	ldr.w	r1, [r4, #312]	; 0x138
   b5c24:	9001      	str	r0, [sp, #4]
   b5c26:	4632      	mov	r2, r6
   b5c28:	f7ff fdc4 	bl	b57b4 <_Z15actuadorHandleriii>
      
      while (esp > 0){
         esp--;
         //getTagID(tagInfo);
      }
      apagarActuador(actuador.id, actuador.puerto);
   b5c2c:	9801      	ldr	r0, [sp, #4]
   b5c2e:	4631      	mov	r1, r6
   b5c30:	f7ff fdac 	bl	b578c <_Z14apagarActuadorii>
   for (int j = 0; j < bloque2[bloque].numActuadores; j++)
   b5c34:	3501      	adds	r5, #1
   b5c36:	e7e9      	b.n	b5c0c <_Z11serieBeforei+0x10>
   }
}
   b5c38:	b003      	add	sp, #12
   b5c3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b5c3c:	2003c750 	.word	0x2003c750

000b5c40 <_Z18ejecutarEvaluacionbi>:

void ejecutarEvaluacion(bool evaluacion, int bloque) {
   b5c40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b5c44:	4c17      	ldr	r4, [pc, #92]	; (b5ca4 <_Z18ejecutarEvaluacionbi+0x64>)
   b5c46:	f44f 733b 	mov.w	r3, #748	; 0x2ec
   b5c4a:	fb03 4401 	mla	r4, r3, r1, r4
   b5c4e:	4680      	mov	r8, r0
   b5c50:	460d      	mov	r5, r1

  for (int j = 0; j < bloques[bloque].numActuadores; j++)
   b5c52:	2700      	movs	r7, #0
   b5c54:	46a2      	mov	sl, r4
   b5c56:	f8da 3144 	ldr.w	r3, [sl, #324]	; 0x144
   b5c5a:	42bb      	cmp	r3, r7
   b5c5c:	dd1f      	ble.n	b5c9e <_Z18ejecutarEvaluacionbi+0x5e>
  {
    Actuador actuador = bloques[bloque].actuadores[j];
    //Serial.println(actuador.condicion);
    if (evaluacion == actuador.evaluate)
   b5c5e:	f894 3158 	ldrb.w	r3, [r4, #344]	; 0x158
    Actuador actuador = bloques[bloque].actuadores[j];
   b5c62:	f8d4 6148 	ldr.w	r6, [r4, #328]	; 0x148
   b5c66:	f8d4 9154 	ldr.w	r9, [r4, #340]	; 0x154
    if (evaluacion == actuador.evaluate)
   b5c6a:	4543      	cmp	r3, r8
   b5c6c:	d10e      	bne.n	b5c8c <_Z18ejecutarEvaluacionbi+0x4c>
    {
      actuadorHandler(actuador.id, actuador.condicion, actuador.puerto);
   b5c6e:	4630      	mov	r0, r6
   b5c70:	f8d4 114c 	ldr.w	r1, [r4, #332]	; 0x14c
   b5c74:	464a      	mov	r2, r9
   b5c76:	f7ff fd9d 	bl	b57b4 <_Z15actuadorHandleriii>
      delay(1000);
   b5c7a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b5c7e:	f004 ff2e 	bl	baade <delay>
    
    else
    {
      if (!isActuadorDual(actuador.id, bloque))
      {
        apagarActuador(actuador.id, actuador.puerto);
   b5c82:	4649      	mov	r1, r9
   b5c84:	4630      	mov	r0, r6
   b5c86:	f7ff fd81 	bl	b578c <_Z14apagarActuadorii>
   b5c8a:	e005      	b.n	b5c98 <_Z18ejecutarEvaluacionbi+0x58>
      if (!isActuadorDual(actuador.id, bloque))
   b5c8c:	4629      	mov	r1, r5
   b5c8e:	4630      	mov	r0, r6
   b5c90:	f7ff ff6e 	bl	b5b70 <_Z14isActuadorDualii>
   b5c94:	2800      	cmp	r0, #0
   b5c96:	d0f4      	beq.n	b5c82 <_Z18ejecutarEvaluacionbi+0x42>
  for (int j = 0; j < bloques[bloque].numActuadores; j++)
   b5c98:	3701      	adds	r7, #1
   b5c9a:	3414      	adds	r4, #20
   b5c9c:	e7db      	b.n	b5c56 <_Z18ejecutarEvaluacionbi+0x16>
      }
    }
    
  }

}
   b5c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b5ca2:	bf00      	nop
   b5ca4:	2003cd28 	.word	0x2003cd28

000b5ca8 <_Z4atoiPc>:
      Serial.print(buffer[i], HEX);
   }
}

int atoi(char *str)
{
   b5ca8:	b530      	push	{r4, r5, lr}
   int num = 0;
   int i = 0;
   bool isNegetive = false;
   if (str[i] == '-')
   b5caa:	7803      	ldrb	r3, [r0, #0]
   b5cac:	2b2d      	cmp	r3, #45	; 0x2d
   {
      isNegetive = true;
   b5cae:	bf0c      	ite	eq
   b5cb0:	2201      	moveq	r2, #1
   bool isNegetive = false;
   b5cb2:	2200      	movne	r2, #0
   int i = 0;
   b5cb4:	4613      	mov	r3, r2
   b5cb6:	4403      	add	r3, r0
      i++;
   }

   while (str[i] && (str[i] >= '0' && str[i] <= '9'))
   {
      num = num * 10 + (str[i] - '0');
   b5cb8:	240a      	movs	r4, #10
      i++;
   b5cba:	2000      	movs	r0, #0
   while (str[i] && (str[i] >= '0' && str[i] <= '9'))
   b5cbc:	f813 1b01 	ldrb.w	r1, [r3], #1
   b5cc0:	3930      	subs	r1, #48	; 0x30
   b5cc2:	b2cd      	uxtb	r5, r1
   b5cc4:	2d09      	cmp	r5, #9
   b5cc6:	d802      	bhi.n	b5cce <_Z4atoiPc+0x26>
      num = num * 10 + (str[i] - '0');
   b5cc8:	fb04 1000 	mla	r0, r4, r0, r1
   while (str[i] && (str[i] >= '0' && str[i] <= '9'))
   b5ccc:	e7f6      	b.n	b5cbc <_Z4atoiPc+0x14>
      i++;
   }

   if (isNegetive)
   b5cce:	b102      	cbz	r2, b5cd2 <_Z4atoiPc+0x2a>
      num = -1 * num;
   b5cd0:	4240      	negs	r0, r0
   return num;
}
   b5cd2:	bd30      	pop	{r4, r5, pc}

000b5cd4 <_Z5splitPcS_Pi>:

void split(char cadena[], char delim[], int solution[])
{
   b5cd4:	b538      	push	{r3, r4, r5, lr}
   b5cd6:	4614      	mov	r4, r2
   b5cd8:	460d      	mov	r5, r1
   char *ptr = strtok(cadena, delim);
   b5cda:	f005 fc3f 	bl	bb55c <strtok>
   int j = 0;
   b5cde:	3c04      	subs	r4, #4
   while (ptr != NULL)
   b5ce0:	b140      	cbz	r0, b5cf4 <_Z5splitPcS_Pi+0x20>
   {
      solution[j] = atoi(ptr);
   b5ce2:	f7ff ffe1 	bl	b5ca8 <_Z4atoiPc>
      j++;
      ptr = strtok(NULL, delim);
   b5ce6:	4629      	mov	r1, r5
      solution[j] = atoi(ptr);
   b5ce8:	f844 0f04 	str.w	r0, [r4, #4]!
      ptr = strtok(NULL, delim);
   b5cec:	2000      	movs	r0, #0
   b5cee:	f005 fc35 	bl	bb55c <strtok>
   while (ptr != NULL)
   b5cf2:	e7f5      	b.n	b5ce0 <_Z5splitPcS_Pi+0xc>
   }
}
   b5cf4:	bd38      	pop	{r3, r4, r5, pc}
	...

000b5cf8 <_Z17readDataFromBlockhPhh>:
      tarjeta++;
   }
}

bool readDataFromBlock(byte blockAddr, byte buffer[], byte size)
{
   b5cf8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b5cfa:	f88d 2007 	strb.w	r2, [sp, #7]
   // Serial.print(F("Leer datos del sector ")); Serial.print(blockAddr);
   status = (MFRC522::StatusCode)mfrc522.MIFARE_Read(blockAddr, buffer, &size);
   b5cfe:	f10d 0307 	add.w	r3, sp, #7
   b5d02:	460a      	mov	r2, r1
   b5d04:	4601      	mov	r1, r0
   b5d06:	480d      	ldr	r0, [pc, #52]	; (b5d3c <_Z17readDataFromBlockhPhh+0x44>)
   b5d08:	4d0d      	ldr	r5, [pc, #52]	; (b5d40 <_Z17readDataFromBlockhPhh+0x48>)
   b5d0a:	f003 f961 	bl	b8fd0 <_ZN7MFRC52211MIFARE_ReadEhPhS0_>
   if (status != MFRC522::STATUS_OK)
   b5d0e:	2801      	cmp	r0, #1
   status = (MFRC522::StatusCode)mfrc522.MIFARE_Read(blockAddr, buffer, &size);
   b5d10:	7028      	strb	r0, [r5, #0]
   if (status != MFRC522::STATUS_OK)
   b5d12:	d010      	beq.n	b5d36 <_Z17readDataFromBlockhPhh+0x3e>
   {
      Serial.print(F("MIFARE_Read() failed: "));
   b5d14:	f005 f878 	bl	bae08 <_Z16_fetch_usbserialv>
   b5d18:	490a      	ldr	r1, [pc, #40]	; (b5d44 <_Z17readDataFromBlockhPhh+0x4c>)
   b5d1a:	f004 fe13 	bl	ba944 <_ZN5Print5printEPKc>
      Serial.println(mfrc522.GetStatusCodeName(status));
   b5d1e:	f005 f873 	bl	bae08 <_Z16_fetch_usbserialv>
   b5d22:	7829      	ldrb	r1, [r5, #0]
   b5d24:	4604      	mov	r4, r0
   b5d26:	4805      	ldr	r0, [pc, #20]	; (b5d3c <_Z17readDataFromBlockhPhh+0x44>)
   b5d28:	f002 fea6 	bl	b8a78 <_ZN7MFRC52217GetStatusCodeNameEh>
   b5d2c:	4601      	mov	r1, r0
   b5d2e:	4620      	mov	r0, r4
   b5d30:	f004 fe1b 	bl	ba96a <_ZN5Print7printlnEPKc>
   b5d34:	2000      	movs	r0, #0
      return false;
   }
   return true;
}
   b5d36:	b003      	add	sp, #12
   b5d38:	bd30      	pop	{r4, r5, pc}
   b5d3a:	bf00      	nop
   b5d3c:	2003d6f4 	.word	0x2003d6f4
   b5d40:	2003dc34 	.word	0x2003dc34
   b5d44:	000bb7ae 	.word	0x000bb7ae

000b5d48 <_Z8getTagIDPi>:

void getTagID(int infoTag[])
{
   b5d48:	b5f0      	push	{r4, r5, r6, r7, lr}
   b5d4a:	b08d      	sub	sp, #52	; 0x34

   status = (MFRC522::StatusCode)mfrc522.PCD_Authenticate(MFRC522::PICC_CMD_MF_AUTH_KEY_A, trailerBlock, &key, &(mfrc522.uid));
   b5d4c:	4d1e      	ldr	r5, [pc, #120]	; (b5dc8 <_Z8getTagIDPi+0x80>)
   b5d4e:	4a1f      	ldr	r2, [pc, #124]	; (b5dcc <_Z8getTagIDPi+0x84>)
   b5d50:	9500      	str	r5, [sp, #0]
   b5d52:	4b1f      	ldr	r3, [pc, #124]	; (b5dd0 <_Z8getTagIDPi+0x88>)
   b5d54:	7812      	ldrb	r2, [r2, #0]
   b5d56:	4f1f      	ldr	r7, [pc, #124]	; (b5dd4 <_Z8getTagIDPi+0x8c>)
{
   b5d58:	4606      	mov	r6, r0
   status = (MFRC522::StatusCode)mfrc522.PCD_Authenticate(MFRC522::PICC_CMD_MF_AUTH_KEY_A, trailerBlock, &key, &(mfrc522.uid));
   b5d5a:	2160      	movs	r1, #96	; 0x60
   b5d5c:	4628      	mov	r0, r5
   b5d5e:	f003 f958 	bl	b9012 <_ZN7MFRC52216PCD_AuthenticateEhhPNS_10MIFARE_KeyEPNS_3UidE>
   if (status != MFRC522::STATUS_OK)
   b5d62:	2801      	cmp	r0, #1
   status = (MFRC522::StatusCode)mfrc522.PCD_Authenticate(MFRC522::PICC_CMD_MF_AUTH_KEY_A, trailerBlock, &key, &(mfrc522.uid));
   b5d64:	7038      	strb	r0, [r7, #0]
   if (status != MFRC522::STATUS_OK)
   b5d66:	d00f      	beq.n	b5d88 <_Z8getTagIDPi+0x40>
   {
      Serial.print(F("PCD_Authenticate() failed: "));
   b5d68:	f005 f84e 	bl	bae08 <_Z16_fetch_usbserialv>
   b5d6c:	491a      	ldr	r1, [pc, #104]	; (b5dd8 <_Z8getTagIDPi+0x90>)
   b5d6e:	f004 fde9 	bl	ba944 <_ZN5Print5printEPKc>
         Serial.println(mfrc522.GetStatusCodeName(status));
   b5d72:	f005 f849 	bl	bae08 <_Z16_fetch_usbserialv>
   b5d76:	7839      	ldrb	r1, [r7, #0]
   b5d78:	4604      	mov	r4, r0
   b5d7a:	4628      	mov	r0, r5
   b5d7c:	f002 fe7c 	bl	b8a78 <_ZN7MFRC52217GetStatusCodeNameEh>
   b5d80:	4601      	mov	r1, r0
   b5d82:	4620      	mov	r0, r4
   b5d84:	f004 fdf1 	bl	ba96a <_ZN5Print7printlnEPKc>
      //writeDataToBLock(blockAddr);

      // Read data from the block's Tag.
      byte buffer[18];
      byte size = sizeof(buffer);
      if (!readDataFromBlock(blockAddr, buffer, size))
   b5d88:	4b14      	ldr	r3, [pc, #80]	; (b5ddc <_Z8getTagIDPi+0x94>)
   b5d8a:	2212      	movs	r2, #18
   b5d8c:	7818      	ldrb	r0, [r3, #0]
   b5d8e:	a907      	add	r1, sp, #28
   b5d90:	f7ff ffb2 	bl	b5cf8 <_Z17readDataFromBlockhPhh>
   b5d94:	b1b0      	cbz	r0, b5dc4 <_Z8getTagIDPi+0x7c>
      // Convert from hex to String:
      char tagInfo[16];
      int i = 0;
      for (byte j = 0; j < sizeof(buffer); j++)
      {
         tagInfo[i] = (char)buffer[j];
   b5d96:	ac07      	add	r4, sp, #28
   b5d98:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b5d9a:	ad03      	add	r5, sp, #12
   b5d9c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b5d9e:	6823      	ldr	r3, [r4, #0]
   b5da0:	802b      	strh	r3, [r5, #0]
         i++;
         // Serial.write(buffer[j]);
         // tagInfo += Serial.write(buffer[j]);
      }
      Serial.printlnf("TagInfo: %s", tagInfo);
   b5da2:	f005 f831 	bl	bae08 <_Z16_fetch_usbserialv>
   b5da6:	490e      	ldr	r1, [pc, #56]	; (b5de0 <_Z8getTagIDPi+0x98>)
   b5da8:	aa03      	add	r2, sp, #12
   b5daa:	f7fe fea4 	bl	b4af6 <_ZN5Print8printlnfEPKcz>
   split(tagInfo, delim, infoTag);
   b5dae:	490d      	ldr	r1, [pc, #52]	; (b5de4 <_Z8getTagIDPi+0x9c>)
   b5db0:	4632      	mov	r2, r6
   b5db2:	a803      	add	r0, sp, #12
   b5db4:	f7ff ff8e 	bl	b5cd4 <_Z5splitPcS_Pi>

   // Evitamos seguir leyendo la misma tag.
   mfrc522.PICC_HaltA();
   b5db8:	4803      	ldr	r0, [pc, #12]	; (b5dc8 <_Z8getTagIDPi+0x80>)
   b5dba:	f003 f8e4 	bl	b8f86 <_ZN7MFRC52210PICC_HaltAEv>
   // Stop encryption on PCD
   mfrc522.PCD_StopCrypto1();
   b5dbe:	4802      	ldr	r0, [pc, #8]	; (b5dc8 <_Z8getTagIDPi+0x80>)
   b5dc0:	f002 ff41 	bl	b8c46 <_ZN7MFRC52215PCD_StopCrypto1Ev>
}
   b5dc4:	b00d      	add	sp, #52	; 0x34
   b5dc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b5dc8:	2003d6f4 	.word	0x2003d6f4
   b5dcc:	2003c6c0 	.word	0x2003c6c0
   b5dd0:	2003d6e5 	.word	0x2003d6e5
   b5dd4:	2003dc34 	.word	0x2003dc34
   b5dd8:	000bb7c5 	.word	0x000bb7c5
   b5ddc:	2003c694 	.word	0x2003c694
   b5de0:	000bb7e1 	.word	0x000bb7e1
   b5de4:	2003c695 	.word	0x2003c695

000b5de8 <_Z13asignarPuertoi>:


int asignarPuerto(int type)
{
   b5de8:	b510      	push	{r4, lr}
   int option;
   
   if (esAnalogico(type))
   b5dea:	b940      	cbnz	r0, b5dfe <_Z13asignarPuertoi+0x16>
   {
      option = puertoAnalogico;
   b5dec:	4b32      	ldr	r3, [pc, #200]	; (b5eb8 <_Z13asignarPuertoi+0xd0>)
   }
   else
      option = puertoDigital;
   b5dee:	681c      	ldr	r4, [r3, #0]

   switch (option)
   b5df0:	2c05      	cmp	r4, #5
   b5df2:	d858      	bhi.n	b5ea6 <_Z13asignarPuertoi+0xbe>
   b5df4:	e8df f004 	tbb	[pc, r4]
   b5df8:	32221305 	.word	0x32221305
   b5dfc:	483d      	.short	0x483d
      option = puertoDigital;
   b5dfe:	4b2f      	ldr	r3, [pc, #188]	; (b5ebc <_Z13asignarPuertoi+0xd4>)
   b5e00:	e7f5      	b.n	b5dee <_Z13asignarPuertoi+0x6>
   {
   case 0:
      Serial.print("Conectar al puerto A0\n");
   b5e02:	f005 f801 	bl	bae08 <_Z16_fetch_usbserialv>
   b5e06:	492e      	ldr	r1, [pc, #184]	; (b5ec0 <_Z13asignarPuertoi+0xd8>)
   b5e08:	f004 fd9c 	bl	ba944 <_ZN5Print5printEPKc>
      puertoAnalogico++;
   b5e0c:	4a2a      	ldr	r2, [pc, #168]	; (b5eb8 <_Z13asignarPuertoi+0xd0>)
   b5e0e:	6813      	ldr	r3, [r2, #0]
   b5e10:	3301      	adds	r3, #1
   b5e12:	6013      	str	r3, [r2, #0]
      puertoAnalogico_bloque++;
   b5e14:	4a2b      	ldr	r2, [pc, #172]	; (b5ec4 <_Z13asignarPuertoi+0xdc>)
      return 2;

   case 4:
      Serial.print("Conectar al puerto D4\n");
      puertoDigital++;
      puertoDigital_bloque++;
   b5e16:	6813      	ldr	r3, [r2, #0]
   b5e18:	3301      	adds	r3, #1
   b5e1a:	6013      	str	r3, [r2, #0]
      return 4;
   b5e1c:	e01c      	b.n	b5e58 <_Z13asignarPuertoi+0x70>
      Serial.print("Conectar al puerto A2\n");
   b5e1e:	f004 fff3 	bl	bae08 <_Z16_fetch_usbserialv>
   b5e22:	4929      	ldr	r1, [pc, #164]	; (b5ec8 <_Z13asignarPuertoi+0xe0>)
   b5e24:	f004 fd8e 	bl	ba944 <_ZN5Print5printEPKc>
      puertoAnalogico++;
   b5e28:	4a23      	ldr	r2, [pc, #140]	; (b5eb8 <_Z13asignarPuertoi+0xd0>)
   b5e2a:	6813      	ldr	r3, [r2, #0]
   b5e2c:	3301      	adds	r3, #1
   b5e2e:	6013      	str	r3, [r2, #0]
      puertoAnalogico_bloque++;
   b5e30:	4a24      	ldr	r2, [pc, #144]	; (b5ec4 <_Z13asignarPuertoi+0xdc>)
      puertoDigital_bloque++;
   b5e32:	6813      	ldr	r3, [r2, #0]
   b5e34:	3301      	adds	r3, #1
   b5e36:	6013      	str	r3, [r2, #0]
      return 2;
   b5e38:	2402      	movs	r4, #2
   b5e3a:	e00d      	b.n	b5e58 <_Z13asignarPuertoi+0x70>
      Serial.print("Conectar al puerto A4\n");
   b5e3c:	f004 ffe4 	bl	bae08 <_Z16_fetch_usbserialv>
   b5e40:	4922      	ldr	r1, [pc, #136]	; (b5ecc <_Z13asignarPuertoi+0xe4>)
   b5e42:	f004 fd7f 	bl	ba944 <_ZN5Print5printEPKc>
      puertoAnalogico = -1;
   b5e46:	4b1c      	ldr	r3, [pc, #112]	; (b5eb8 <_Z13asignarPuertoi+0xd0>)
   b5e48:	f04f 32ff 	mov.w	r2, #4294967295
   b5e4c:	601a      	str	r2, [r3, #0]
      puertoAnalogico_bloque++;
   b5e4e:	4a1d      	ldr	r2, [pc, #116]	; (b5ec4 <_Z13asignarPuertoi+0xdc>)
   b5e50:	6813      	ldr	r3, [r2, #0]
   b5e52:	3301      	adds	r3, #1
   b5e54:	6013      	str	r3, [r2, #0]
      return 4;
   b5e56:	2404      	movs	r4, #4
   default:
      Serial.print("Error: No hay mas puertos disponibles \n");
      return -1;
   }

}
   b5e58:	4620      	mov	r0, r4
   b5e5a:	bd10      	pop	{r4, pc}
      Serial.print("Conectar al puerto D2\n");
   b5e5c:	f004 ffd4 	bl	bae08 <_Z16_fetch_usbserialv>
   b5e60:	491b      	ldr	r1, [pc, #108]	; (b5ed0 <_Z13asignarPuertoi+0xe8>)
   b5e62:	f004 fd6f 	bl	ba944 <_ZN5Print5printEPKc>
      puertoDigital++;
   b5e66:	4a15      	ldr	r2, [pc, #84]	; (b5ebc <_Z13asignarPuertoi+0xd4>)
   b5e68:	6813      	ldr	r3, [r2, #0]
   b5e6a:	3301      	adds	r3, #1
   b5e6c:	6013      	str	r3, [r2, #0]
      puertoDigital_bloque++;
   b5e6e:	4a19      	ldr	r2, [pc, #100]	; (b5ed4 <_Z13asignarPuertoi+0xec>)
   b5e70:	e7df      	b.n	b5e32 <_Z13asignarPuertoi+0x4a>
      Serial.print("Conectar al puerto D4\n");
   b5e72:	f004 ffc9 	bl	bae08 <_Z16_fetch_usbserialv>
   b5e76:	4918      	ldr	r1, [pc, #96]	; (b5ed8 <_Z13asignarPuertoi+0xf0>)
   b5e78:	f004 fd64 	bl	ba944 <_ZN5Print5printEPKc>
      puertoDigital++;
   b5e7c:	4a0f      	ldr	r2, [pc, #60]	; (b5ebc <_Z13asignarPuertoi+0xd4>)
   b5e7e:	6813      	ldr	r3, [r2, #0]
   b5e80:	3301      	adds	r3, #1
   b5e82:	6013      	str	r3, [r2, #0]
      puertoDigital_bloque++;
   b5e84:	4a13      	ldr	r2, [pc, #76]	; (b5ed4 <_Z13asignarPuertoi+0xec>)
   b5e86:	e7c6      	b.n	b5e16 <_Z13asignarPuertoi+0x2e>
      Serial.print("Conectar al puerto D6\n");
   b5e88:	f004 ffbe 	bl	bae08 <_Z16_fetch_usbserialv>
   b5e8c:	4913      	ldr	r1, [pc, #76]	; (b5edc <_Z13asignarPuertoi+0xf4>)
   b5e8e:	f004 fd59 	bl	ba944 <_ZN5Print5printEPKc>
      puertoDigital = -1;
   b5e92:	4b0a      	ldr	r3, [pc, #40]	; (b5ebc <_Z13asignarPuertoi+0xd4>)
   b5e94:	f04f 32ff 	mov.w	r2, #4294967295
   b5e98:	601a      	str	r2, [r3, #0]
      puertoDigital_bloque++;
   b5e9a:	4a0e      	ldr	r2, [pc, #56]	; (b5ed4 <_Z13asignarPuertoi+0xec>)
   b5e9c:	6813      	ldr	r3, [r2, #0]
   b5e9e:	3301      	adds	r3, #1
   b5ea0:	6013      	str	r3, [r2, #0]
      return 6;
   b5ea2:	2406      	movs	r4, #6
   b5ea4:	e7d8      	b.n	b5e58 <_Z13asignarPuertoi+0x70>
      Serial.print("Error: No hay mas puertos disponibles \n");
   b5ea6:	f004 ffaf 	bl	bae08 <_Z16_fetch_usbserialv>
   b5eaa:	490d      	ldr	r1, [pc, #52]	; (b5ee0 <_Z13asignarPuertoi+0xf8>)
   b5eac:	f004 fd4a 	bl	ba944 <_ZN5Print5printEPKc>
      return -1;
   b5eb0:	f04f 34ff 	mov.w	r4, #4294967295
   b5eb4:	e7d0      	b.n	b5e58 <_Z13asignarPuertoi+0x70>
   b5eb6:	bf00      	nop
   b5eb8:	2003da3c 	.word	0x2003da3c
   b5ebc:	2003c6a0 	.word	0x2003c6a0
   b5ec0:	000bb7ed 	.word	0x000bb7ed
   b5ec4:	2003da40 	.word	0x2003da40
   b5ec8:	000bb804 	.word	0x000bb804
   b5ecc:	000bb81b 	.word	0x000bb81b
   b5ed0:	000bb832 	.word	0x000bb832
   b5ed4:	2003da44 	.word	0x2003da44
   b5ed8:	000bb849 	.word	0x000bb849
   b5edc:	000bb860 	.word	0x000bb860
   b5ee0:	000bb877 	.word	0x000bb877

000b5ee4 <_Z11ajusta_tempi>:

// Eliminar 'outliers' de la temperatura
   int ajusta_temp(int val)
   {
   b5ee4:	b510      	push	{r4, lr}
      if (temp_rep == 0){
   b5ee6:	4a09      	ldr	r2, [pc, #36]	; (b5f0c <_Z11ajusta_tempi+0x28>)
   b5ee8:	4909      	ldr	r1, [pc, #36]	; (b5f10 <_Z11ajusta_tempi+0x2c>)
   b5eea:	6813      	ldr	r3, [r2, #0]
   b5eec:	b923      	cbnz	r3, b5ef8 <_Z11ajusta_tempi+0x14>
         temp_prev = val;
   b5eee:	6008      	str	r0, [r1, #0]
         temp_rep++;}
   b5ef0:	2301      	movs	r3, #1
      else if (temp_prev == val && temp_rep < 6)
         temp_rep++;
      else
         temp_rep--;
   b5ef2:	6013      	str	r3, [r2, #0]
         val = temp_prev;
      return val;
   }
   b5ef4:	6808      	ldr	r0, [r1, #0]
   b5ef6:	bd10      	pop	{r4, pc}
      else if (temp_prev == val && temp_rep < 6)
   b5ef8:	680c      	ldr	r4, [r1, #0]
   b5efa:	4284      	cmp	r4, r0
   b5efc:	d103      	bne.n	b5f06 <_Z11ajusta_tempi+0x22>
   b5efe:	2b05      	cmp	r3, #5
   b5f00:	dc01      	bgt.n	b5f06 <_Z11ajusta_tempi+0x22>
         temp_rep++;
   b5f02:	3301      	adds	r3, #1
   b5f04:	e7f5      	b.n	b5ef2 <_Z11ajusta_tempi+0xe>
         temp_rep--;
   b5f06:	3b01      	subs	r3, #1
   b5f08:	e7f3      	b.n	b5ef2 <_Z11ajusta_tempi+0xe>
   b5f0a:	bf00      	nop
   b5f0c:	2003e6ac 	.word	0x2003e6ac
   b5f10:	2003c6bc 	.word	0x2003c6bc

000b5f14 <setup>:
// Unconnected mode ON, evita conexion wifi.

SYSTEM_MODE(SEMI_AUTOMATIC);

void setup()
{
   b5f14:	b570      	push	{r4, r5, r6, lr}
   b5f16:	b08a      	sub	sp, #40	; 0x28
inline CloudDisconnectOptions::CloudDisconnectOptions(unsigned flags, system_tick_t timeout, bool graceful,
        bool clearSession) :
        flags_(flags),
        timeout_(timeout),
        graceful_(graceful),
        clearSession_(clearSession) {
   b5f18:	2400      	movs	r4, #0
  // Unconnected mode ON
  Particle.disconnect();
   b5f1a:	a807      	add	r0, sp, #28
   b5f1c:	e9cd 4407 	strd	r4, r4, [sp, #28]
        bool clearSession) :
   b5f20:	f8ad 4024 	strh.w	r4, [sp, #36]	; 0x24
   b5f24:	f004 fe80 	bl	bac28 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   b5f28:	4843      	ldr	r0, [pc, #268]	; (b6038 <setup+0x124>)
   b5f2a:	4623      	mov	r3, r4
   b5f2c:	4622      	mov	r2, r4
   b5f2e:	4621      	mov	r1, r4
   b5f30:	6840      	ldr	r0, [r0, #4]

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b5f32:	4c42      	ldr	r4, [pc, #264]	; (b603c <setup+0x128>)
   b5f34:	f004 fa2a 	bl	ba38c <network_off>
  WiFi.off();

  // Particle setup
  Serial.begin(9600);
   b5f38:	f004 ff66 	bl	bae08 <_Z16_fetch_usbserialv>
   b5f3c:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b5f40:	f004 ff56 	bl	badf0 <_ZN9USBSerial5beginEl>
   b5f44:	7821      	ldrb	r1, [r4, #0]
   b5f46:	f3bf 8f5b 	dmb	ish
   b5f4a:	f011 0101 	ands.w	r1, r1, #1
   b5f4e:	d10b      	bne.n	b5f68 <setup+0x54>
   b5f50:	4620      	mov	r0, r4
   b5f52:	9105      	str	r1, [sp, #20]
   b5f54:	f7fe fd86 	bl	b4a64 <__cxa_guard_acquire>
   b5f58:	9905      	ldr	r1, [sp, #20]
   b5f5a:	b128      	cbz	r0, b5f68 <setup+0x54>
   b5f5c:	4838      	ldr	r0, [pc, #224]	; (b6040 <setup+0x12c>)
   b5f5e:	f004 fae1 	bl	ba524 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b5f62:	4620      	mov	r0, r4
   b5f64:	f7fe fd83 	bl	b4a6e <__cxa_guard_release>

    hal_spi_interface_t interface() {
         return instance().interface();
    }
    void begin() {
        instance().begin();
   b5f68:	4835      	ldr	r0, [pc, #212]	; (b6040 <setup+0x12c>)
  for (byte i = 0; i < 6; i++)
  {
    key.keyByte[i] = 0xFF;
  }

  MODE = EEPROM.read(0);
   b5f6a:	4c36      	ldr	r4, [pc, #216]	; (b6044 <setup+0x130>)
  display.begin(SSD1306_SWITCHCAPVCC, 0x3C);
   b5f6c:	2501      	movs	r5, #1
   b5f6e:	f004 fae3 	bl	ba538 <_ZN8SPIClass5beginEv>
   b5f72:	462b      	mov	r3, r5
   b5f74:	223c      	movs	r2, #60	; 0x3c
   b5f76:	2102      	movs	r1, #2
   b5f78:	4833      	ldr	r0, [pc, #204]	; (b6048 <setup+0x134>)
   b5f7a:	9500      	str	r5, [sp, #0]
   b5f7c:	f003 fc32 	bl	b97e4 <_ZN16Adafruit_SSD13065beginEhhbb>
  display.clearDisplay();
   b5f80:	4831      	ldr	r0, [pc, #196]	; (b6048 <setup+0x134>)
   b5f82:	f003 fc21 	bl	b97c8 <_ZN16Adafruit_SSD130612clearDisplayEv>
  display.display();
   b5f86:	4830      	ldr	r0, [pc, #192]	; (b6048 <setup+0x134>)
   b5f88:	f003 fe86 	bl	b9c98 <_ZN16Adafruit_SSD13067displayEv>
  mfrc522.PCD_Init();
   b5f8c:	482f      	ldr	r0, [pc, #188]	; (b604c <setup+0x138>)
   b5f8e:	f002 febe 	bl	b8d0e <_ZN7MFRC5228PCD_InitEv>
    key.keyByte[i] = 0xFF;
   b5f92:	4a2f      	ldr	r2, [pc, #188]	; (b6050 <setup+0x13c>)
   b5f94:	21ff      	movs	r1, #255	; 0xff
   b5f96:	7011      	strb	r1, [r2, #0]
   b5f98:	7051      	strb	r1, [r2, #1]
   b5f9a:	7091      	strb	r1, [r2, #2]
   b5f9c:	70d1      	strb	r1, [r2, #3]
   b5f9e:	7111      	strb	r1, [r2, #4]
   b5fa0:	7151      	strb	r1, [r2, #5]
  MODE = EEPROM.read(0);
   b5fa2:	f005 fa19 	bl	bb3d8 <_Z21__fetch_global_EEPROMv>

    EERef( const int index )
        : index( index )                 {}

    //Access/read members.
    uint8_t operator*() const            { return HAL_EEPROM_Read(index); }
   b5fa6:	2000      	movs	r0, #0
   b5fa8:	f004 f85c 	bl	ba064 <HAL_EEPROM_Read>

  // EEPROM empty
  if ( MODE == 0xFF ) {
   b5fac:	28ff      	cmp	r0, #255	; 0xff
  MODE = EEPROM.read(0);
   b5fae:	7020      	strb	r0, [r4, #0]
  if ( MODE == 0xFF ) {
   b5fb0:	d10d      	bne.n	b5fce <setup+0xba>
    
    Serial.println("EEPROM empty");
   b5fb2:	f004 ff29 	bl	bae08 <_Z16_fetch_usbserialv>
    MODE = 0;
   b5fb6:	2600      	movs	r6, #0
    Serial.println("EEPROM empty");
   b5fb8:	4926      	ldr	r1, [pc, #152]	; (b6054 <setup+0x140>)
   b5fba:	f004 fcd6 	bl	ba96a <_ZN5Print7printlnEPKc>
    MODE = 0;
   b5fbe:	7026      	strb	r6, [r4, #0]
    EEPROM.put(0, MODE);
   b5fc0:	f005 fa0a 	bl	bb3d8 <_Z21__fetch_global_EEPROMv>
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   b5fc4:	462a      	mov	r2, r5
   b5fc6:	4621      	mov	r1, r4
   b5fc8:	4630      	mov	r0, r6
   b5fca:	f004 f853 	bl	ba074 <HAL_EEPROM_Put>

  }

  if ( MODE == 0 ) {
   b5fce:	7824      	ldrb	r4, [r4, #0]
   b5fd0:	bb54      	cbnz	r4, b6028 <setup+0x114>

    // MODO BÁSICO iniciado
    pinMode(Zumbador_PIN, OUTPUT);
   b5fd2:	2101      	movs	r1, #1
   b5fd4:	2006      	movs	r0, #6
   b5fd6:	f005 f94d 	bl	bb274 <pinMode>
    ledObject.init();
   b5fda:	481f      	ldr	r0, [pc, #124]	; (b6058 <setup+0x144>)
   b5fdc:	f003 ffa8 	bl	b9f30 <_ZN12ChainableLED4initEv>
    init = true;
   b5fe0:	4b1e      	ldr	r3, [pc, #120]	; (b605c <setup+0x148>)
   b5fe2:	2201      	movs	r2, #1
   b5fe4:	701a      	strb	r2, [r3, #0]

    Bloque bloque;
    numBloque++;
   b5fe6:	4a1e      	ldr	r2, [pc, #120]	; (b6060 <setup+0x14c>)
   b5fe8:	6813      	ldr	r3, [r2, #0]
   b5fea:	3301      	adds	r3, #1
   b5fec:	6013      	str	r3, [r2, #0]
    bloques[numBloque] = bloque;
   b5fee:	f44f 713b 	mov.w	r1, #748	; 0x2ec
   b5ff2:	4a1c      	ldr	r2, [pc, #112]	; (b6064 <setup+0x150>)
   b5ff4:	434b      	muls	r3, r1
   b5ff6:	18d1      	adds	r1, r2, r3
   b5ff8:	50d4      	str	r4, [r2, r3]
   b5ffa:	f8c1 4144 	str.w	r4, [r1, #324]	; 0x144
    // MODO MUSICA iniciado
    pinMode(Zumbador_PIN, OUTPUT);
    //showBitmap(0,2,"");
  }

  display.drawBitmap(0,0, sucreLogo_data, sucreLogo_width, sucreLogo_height, 1);
   b5ffe:	2340      	movs	r3, #64	; 0x40
   b6000:	2201      	movs	r2, #1
   b6002:	e9cd 3201 	strd	r3, r2, [sp, #4]
   b6006:	2200      	movs	r2, #0
   b6008:	2380      	movs	r3, #128	; 0x80
   b600a:	4611      	mov	r1, r2
   b600c:	9300      	str	r3, [sp, #0]
   b600e:	480e      	ldr	r0, [pc, #56]	; (b6048 <setup+0x134>)
   b6010:	4b15      	ldr	r3, [pc, #84]	; (b6068 <setup+0x154>)
   b6012:	f002 fad1 	bl	b85b8 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
  display.display();
   b6016:	480c      	ldr	r0, [pc, #48]	; (b6048 <setup+0x134>)
   b6018:	f003 fe3e 	bl	b9c98 <_ZN16Adafruit_SSD13067displayEv>
   b601c:	f004 f812 	bl	ba044 <HAL_Timer_Get_Milli_Seconds>
  startTime = millis();
   b6020:	4b12      	ldr	r3, [pc, #72]	; (b606c <setup+0x158>)
   b6022:	6018      	str	r0, [r3, #0]
  
}
   b6024:	b00a      	add	sp, #40	; 0x28
   b6026:	bd70      	pop	{r4, r5, r6, pc}
  } else if ( MODE == 1 ) {
   b6028:	2c01      	cmp	r4, #1
   b602a:	d0e8      	beq.n	b5ffe <setup+0xea>
    pinMode(Zumbador_PIN, OUTPUT);
   b602c:	2101      	movs	r1, #1
   b602e:	2006      	movs	r0, #6
   b6030:	f005 f920 	bl	bb274 <pinMode>
   b6034:	e7e3      	b.n	b5ffe <setup+0xea>
   b6036:	bf00      	nop
   b6038:	2003e710 	.word	0x2003e710
   b603c:	2003c730 	.word	0x2003c730
   b6040:	2003c734 	.word	0x2003c734
   b6044:	2003c73e 	.word	0x2003c73e
   b6048:	2003d34c 	.word	0x2003d34c
   b604c:	2003d6f4 	.word	0x2003d6f4
   b6050:	2003d6e5 	.word	0x2003d6e5
   b6054:	000bb89f 	.word	0x000bb89f
   b6058:	2003d6ec 	.word	0x2003d6ec
   b605c:	2003d6e4 	.word	0x2003d6e4
   b6060:	2003c69c 	.word	0x2003c69c
   b6064:	2003cd28 	.word	0x2003cd28
   b6068:	000bc21a 	.word	0x000bc21a
   b606c:	2003dc30 	.word	0x2003dc30

000b6070 <_GLOBAL__sub_I_ruid>:
ChainableLED ledObject = ChainableLED(led_PIN1, led_PIN2, NUM_LEDS);
   b6070:	2305      	movs	r3, #5
              showBitmap(2,4,"");
              play=false;
        }

  }
   b6072:	b570      	push	{r4, r5, r6, lr}
   b6074:	461a      	mov	r2, r3
   b6076:	2104      	movs	r1, #4
   b6078:	48aa      	ldr	r0, [pc, #680]	; (b6324 <_GLOBAL__sub_I_ruid+0x2b4>)
String tarjetas[80] = {"3#0#0#12#0","3#0#1#6#0", "1#0#1#9#3", "1#0#0#12#1", "1#1#0#13#1"};
   b607a:	4dab      	ldr	r5, [pc, #684]	; (b6328 <_GLOBAL__sub_I_ruid+0x2b8>)
   b607c:	4eab      	ldr	r6, [pc, #684]	; (b632c <_GLOBAL__sub_I_ruid+0x2bc>)
   b607e:	f003 fea5 	bl	b9dcc <_ZN12ChainableLEDC1Ehhh>
    int bloque;
    int puerto;
    bool evaluate;
} Actuador;

typedef struct BLOQUE
   b6082:	4bab      	ldr	r3, [pc, #684]	; (b6330 <_GLOBAL__sub_I_ruid+0x2c0>)
Adafruit_SSD1306 display(-1);
   b6084:	48ab      	ldr	r0, [pc, #684]	; (b6334 <_GLOBAL__sub_I_ruid+0x2c4>)
   b6086:	2400      	movs	r4, #0
   b6088:	601c      	str	r4, [r3, #0]
   b608a:	f8c3 4144 	str.w	r4, [r3, #324]	; 0x144
   b608e:	f8c3 42ec 	str.w	r4, [r3, #748]	; 0x2ec
   b6092:	f8c3 4430 	str.w	r4, [r3, #1072]	; 0x430
   b6096:	4ba8      	ldr	r3, [pc, #672]	; (b6338 <_GLOBAL__sub_I_ruid+0x2c8>)
   b6098:	f04f 31ff 	mov.w	r1, #4294967295
   b609c:	601c      	str	r4, [r3, #0]
   b609e:	f8c3 4144 	str.w	r4, [r3, #324]	; 0x144
   b60a2:	f8c3 42ec 	str.w	r4, [r3, #748]	; 0x2ec
   b60a6:	f8c3 4430 	str.w	r4, [r3, #1072]	; 0x430
   b60aa:	f003 fa99 	bl	b95e0 <_ZN16Adafruit_SSD1306C1Ea>
String dispositivos[2] = {"-", "-"};
   b60ae:	49a3      	ldr	r1, [pc, #652]	; (b633c <_GLOBAL__sub_I_ruid+0x2cc>)
   b60b0:	48a3      	ldr	r0, [pc, #652]	; (b6340 <_GLOBAL__sub_I_ruid+0x2d0>)
   b60b2:	f004 fb8c 	bl	ba7ce <_ZN6StringC1EPK19__FlashStringHelper>
   b60b6:	49a1      	ldr	r1, [pc, #644]	; (b633c <_GLOBAL__sub_I_ruid+0x2cc>)
   b60b8:	48a2      	ldr	r0, [pc, #648]	; (b6344 <_GLOBAL__sub_I_ruid+0x2d4>)
   b60ba:	f004 fb88 	bl	ba7ce <_ZN6StringC1EPK19__FlashStringHelper>
String tarjetas_modoBasico[16] = { "0#2#0","0#3#0","0#4#1","0#9#1","0#10#1","0#11#1","0#1#1#0","0#1#1#1","0#0#1#0","0#0#1#1","0#0#1#2","0#0#1#3","0#0#1#4","0#0#1#5"};
   b60be:	49a2      	ldr	r1, [pc, #648]	; (b6348 <_GLOBAL__sub_I_ruid+0x2d8>)
   b60c0:	48a2      	ldr	r0, [pc, #648]	; (b634c <_GLOBAL__sub_I_ruid+0x2dc>)
   b60c2:	f004 fb84 	bl	ba7ce <_ZN6StringC1EPK19__FlashStringHelper>
   b60c6:	49a2      	ldr	r1, [pc, #648]	; (b6350 <_GLOBAL__sub_I_ruid+0x2e0>)
   b60c8:	48a2      	ldr	r0, [pc, #648]	; (b6354 <_GLOBAL__sub_I_ruid+0x2e4>)
   b60ca:	f004 fb80 	bl	ba7ce <_ZN6StringC1EPK19__FlashStringHelper>
   b60ce:	49a2      	ldr	r1, [pc, #648]	; (b6358 <_GLOBAL__sub_I_ruid+0x2e8>)
   b60d0:	48a2      	ldr	r0, [pc, #648]	; (b635c <_GLOBAL__sub_I_ruid+0x2ec>)
   b60d2:	f004 fb7c 	bl	ba7ce <_ZN6StringC1EPK19__FlashStringHelper>
   b60d6:	49a2      	ldr	r1, [pc, #648]	; (b6360 <_GLOBAL__sub_I_ruid+0x2f0>)
   b60d8:	48a2      	ldr	r0, [pc, #648]	; (b6364 <_GLOBAL__sub_I_ruid+0x2f4>)
   b60da:	f004 fb78 	bl	ba7ce <_ZN6StringC1EPK19__FlashStringHelper>
   b60de:	49a2      	ldr	r1, [pc, #648]	; (b6368 <_GLOBAL__sub_I_ruid+0x2f8>)
   b60e0:	48a2      	ldr	r0, [pc, #648]	; (b636c <_GLOBAL__sub_I_ruid+0x2fc>)
   b60e2:	f004 fb74 	bl	ba7ce <_ZN6StringC1EPK19__FlashStringHelper>
   b60e6:	49a2      	ldr	r1, [pc, #648]	; (b6370 <_GLOBAL__sub_I_ruid+0x300>)
   b60e8:	48a2      	ldr	r0, [pc, #648]	; (b6374 <_GLOBAL__sub_I_ruid+0x304>)
   b60ea:	f004 fb70 	bl	ba7ce <_ZN6StringC1EPK19__FlashStringHelper>
   b60ee:	49a2      	ldr	r1, [pc, #648]	; (b6378 <_GLOBAL__sub_I_ruid+0x308>)
   b60f0:	48a2      	ldr	r0, [pc, #648]	; (b637c <_GLOBAL__sub_I_ruid+0x30c>)
   b60f2:	f004 fb6c 	bl	ba7ce <_ZN6StringC1EPK19__FlashStringHelper>
   b60f6:	49a2      	ldr	r1, [pc, #648]	; (b6380 <_GLOBAL__sub_I_ruid+0x310>)
   b60f8:	48a2      	ldr	r0, [pc, #648]	; (b6384 <_GLOBAL__sub_I_ruid+0x314>)
   b60fa:	f004 fb68 	bl	ba7ce <_ZN6StringC1EPK19__FlashStringHelper>
   b60fe:	49a2      	ldr	r1, [pc, #648]	; (b6388 <_GLOBAL__sub_I_ruid+0x318>)
   b6100:	48a2      	ldr	r0, [pc, #648]	; (b638c <_GLOBAL__sub_I_ruid+0x31c>)
   b6102:	f004 fb64 	bl	ba7ce <_ZN6StringC1EPK19__FlashStringHelper>
   b6106:	49a2      	ldr	r1, [pc, #648]	; (b6390 <_GLOBAL__sub_I_ruid+0x320>)
   b6108:	48a2      	ldr	r0, [pc, #648]	; (b6394 <_GLOBAL__sub_I_ruid+0x324>)
   b610a:	f004 fb60 	bl	ba7ce <_ZN6StringC1EPK19__FlashStringHelper>
   b610e:	49a2      	ldr	r1, [pc, #648]	; (b6398 <_GLOBAL__sub_I_ruid+0x328>)
   b6110:	48a2      	ldr	r0, [pc, #648]	; (b639c <_GLOBAL__sub_I_ruid+0x32c>)
   b6112:	f004 fb5c 	bl	ba7ce <_ZN6StringC1EPK19__FlashStringHelper>
   b6116:	49a2      	ldr	r1, [pc, #648]	; (b63a0 <_GLOBAL__sub_I_ruid+0x330>)
   b6118:	48a2      	ldr	r0, [pc, #648]	; (b63a4 <_GLOBAL__sub_I_ruid+0x334>)
   b611a:	f004 fb58 	bl	ba7ce <_ZN6StringC1EPK19__FlashStringHelper>
   b611e:	49a2      	ldr	r1, [pc, #648]	; (b63a8 <_GLOBAL__sub_I_ruid+0x338>)
   b6120:	48a2      	ldr	r0, [pc, #648]	; (b63ac <_GLOBAL__sub_I_ruid+0x33c>)
   b6122:	f004 fb54 	bl	ba7ce <_ZN6StringC1EPK19__FlashStringHelper>
   b6126:	49a2      	ldr	r1, [pc, #648]	; (b63b0 <_GLOBAL__sub_I_ruid+0x340>)
   b6128:	48a2      	ldr	r0, [pc, #648]	; (b63b4 <_GLOBAL__sub_I_ruid+0x344>)
   b612a:	f004 fb50 	bl	ba7ce <_ZN6StringC1EPK19__FlashStringHelper>
   b612e:	497f      	ldr	r1, [pc, #508]	; (b632c <_GLOBAL__sub_I_ruid+0x2bc>)
   b6130:	48a1      	ldr	r0, [pc, #644]	; (b63b8 <_GLOBAL__sub_I_ruid+0x348>)
   b6132:	f004 fb4c 	bl	ba7ce <_ZN6StringC1EPK19__FlashStringHelper>
   b6136:	497d      	ldr	r1, [pc, #500]	; (b632c <_GLOBAL__sub_I_ruid+0x2bc>)
   b6138:	48a0      	ldr	r0, [pc, #640]	; (b63bc <_GLOBAL__sub_I_ruid+0x34c>)
   b613a:	f004 fb48 	bl	ba7ce <_ZN6StringC1EPK19__FlashStringHelper>
                        "1#2","1#3#0","1#3#1","1#4","1#5" };
   b613e:	49a0      	ldr	r1, [pc, #640]	; (b63c0 <_GLOBAL__sub_I_ruid+0x350>)
   b6140:	48a0      	ldr	r0, [pc, #640]	; (b63c4 <_GLOBAL__sub_I_ruid+0x354>)
   b6142:	f004 fb44 	bl	ba7ce <_ZN6StringC1EPK19__FlashStringHelper>
   b6146:	49a0      	ldr	r1, [pc, #640]	; (b63c8 <_GLOBAL__sub_I_ruid+0x358>)
   b6148:	48a0      	ldr	r0, [pc, #640]	; (b63cc <_GLOBAL__sub_I_ruid+0x35c>)
   b614a:	f004 fb40 	bl	ba7ce <_ZN6StringC1EPK19__FlashStringHelper>
   b614e:	49a0      	ldr	r1, [pc, #640]	; (b63d0 <_GLOBAL__sub_I_ruid+0x360>)
   b6150:	48a0      	ldr	r0, [pc, #640]	; (b63d4 <_GLOBAL__sub_I_ruid+0x364>)
   b6152:	f004 fb3c 	bl	ba7ce <_ZN6StringC1EPK19__FlashStringHelper>
   b6156:	49a0      	ldr	r1, [pc, #640]	; (b63d8 <_GLOBAL__sub_I_ruid+0x368>)
   b6158:	48a0      	ldr	r0, [pc, #640]	; (b63dc <_GLOBAL__sub_I_ruid+0x36c>)
   b615a:	f004 fb38 	bl	ba7ce <_ZN6StringC1EPK19__FlashStringHelper>
   b615e:	49a0      	ldr	r1, [pc, #640]	; (b63e0 <_GLOBAL__sub_I_ruid+0x370>)
   b6160:	48a0      	ldr	r0, [pc, #640]	; (b63e4 <_GLOBAL__sub_I_ruid+0x374>)
   b6162:	f004 fb34 	bl	ba7ce <_ZN6StringC1EPK19__FlashStringHelper>
   b6166:	49a0      	ldr	r1, [pc, #640]	; (b63e8 <_GLOBAL__sub_I_ruid+0x378>)
   b6168:	48a0      	ldr	r0, [pc, #640]	; (b63ec <_GLOBAL__sub_I_ruid+0x37c>)
   b616a:	f004 fb30 	bl	ba7ce <_ZN6StringC1EPK19__FlashStringHelper>
   b616e:	49a0      	ldr	r1, [pc, #640]	; (b63f0 <_GLOBAL__sub_I_ruid+0x380>)
   b6170:	48a0      	ldr	r0, [pc, #640]	; (b63f4 <_GLOBAL__sub_I_ruid+0x384>)
   b6172:	f004 fb2c 	bl	ba7ce <_ZN6StringC1EPK19__FlashStringHelper>
   b6176:	49a0      	ldr	r1, [pc, #640]	; (b63f8 <_GLOBAL__sub_I_ruid+0x388>)
   b6178:	48a0      	ldr	r0, [pc, #640]	; (b63fc <_GLOBAL__sub_I_ruid+0x38c>)
   b617a:	f004 fb28 	bl	ba7ce <_ZN6StringC1EPK19__FlashStringHelper>
   b617e:	49a0      	ldr	r1, [pc, #640]	; (b6400 <_GLOBAL__sub_I_ruid+0x390>)
   b6180:	48a0      	ldr	r0, [pc, #640]	; (b6404 <_GLOBAL__sub_I_ruid+0x394>)
   b6182:	f004 fb24 	bl	ba7ce <_ZN6StringC1EPK19__FlashStringHelper>
   b6186:	49a0      	ldr	r1, [pc, #640]	; (b6408 <_GLOBAL__sub_I_ruid+0x398>)
   b6188:	48a0      	ldr	r0, [pc, #640]	; (b640c <_GLOBAL__sub_I_ruid+0x39c>)
   b618a:	f004 fb20 	bl	ba7ce <_ZN6StringC1EPK19__FlashStringHelper>
   b618e:	49a0      	ldr	r1, [pc, #640]	; (b6410 <_GLOBAL__sub_I_ruid+0x3a0>)
   b6190:	48a0      	ldr	r0, [pc, #640]	; (b6414 <_GLOBAL__sub_I_ruid+0x3a4>)
   b6192:	f004 fb1c 	bl	ba7ce <_ZN6StringC1EPK19__FlashStringHelper>
   b6196:	49a0      	ldr	r1, [pc, #640]	; (b6418 <_GLOBAL__sub_I_ruid+0x3a8>)
   b6198:	48a0      	ldr	r0, [pc, #640]	; (b641c <_GLOBAL__sub_I_ruid+0x3ac>)
   b619a:	f004 fb18 	bl	ba7ce <_ZN6StringC1EPK19__FlashStringHelper>
   b619e:	49a0      	ldr	r1, [pc, #640]	; (b6420 <_GLOBAL__sub_I_ruid+0x3b0>)
   b61a0:	48a0      	ldr	r0, [pc, #640]	; (b6424 <_GLOBAL__sub_I_ruid+0x3b4>)
   b61a2:	f004 fb14 	bl	ba7ce <_ZN6StringC1EPK19__FlashStringHelper>
   b61a6:	49a0      	ldr	r1, [pc, #640]	; (b6428 <_GLOBAL__sub_I_ruid+0x3b8>)
   b61a8:	48a0      	ldr	r0, [pc, #640]	; (b642c <_GLOBAL__sub_I_ruid+0x3bc>)
   b61aa:	f004 fb10 	bl	ba7ce <_ZN6StringC1EPK19__FlashStringHelper>
   b61ae:	49a0      	ldr	r1, [pc, #640]	; (b6430 <_GLOBAL__sub_I_ruid+0x3c0>)
   b61b0:	48a0      	ldr	r0, [pc, #640]	; (b6434 <_GLOBAL__sub_I_ruid+0x3c4>)
   b61b2:	f004 fb0c 	bl	ba7ce <_ZN6StringC1EPK19__FlashStringHelper>
   b61b6:	49a0      	ldr	r1, [pc, #640]	; (b6438 <_GLOBAL__sub_I_ruid+0x3c8>)
   b61b8:	48a0      	ldr	r0, [pc, #640]	; (b643c <_GLOBAL__sub_I_ruid+0x3cc>)
   b61ba:	f004 fb08 	bl	ba7ce <_ZN6StringC1EPK19__FlashStringHelper>
   b61be:	49a0      	ldr	r1, [pc, #640]	; (b6440 <_GLOBAL__sub_I_ruid+0x3d0>)
   b61c0:	48a0      	ldr	r0, [pc, #640]	; (b6444 <_GLOBAL__sub_I_ruid+0x3d4>)
   b61c2:	f004 fb04 	bl	ba7ce <_ZN6StringC1EPK19__FlashStringHelper>
   b61c6:	49a0      	ldr	r1, [pc, #640]	; (b6448 <_GLOBAL__sub_I_ruid+0x3d8>)
   b61c8:	48a0      	ldr	r0, [pc, #640]	; (b644c <_GLOBAL__sub_I_ruid+0x3dc>)
   b61ca:	f004 fb00 	bl	ba7ce <_ZN6StringC1EPK19__FlashStringHelper>
   b61ce:	49a0      	ldr	r1, [pc, #640]	; (b6450 <_GLOBAL__sub_I_ruid+0x3e0>)
   b61d0:	48a0      	ldr	r0, [pc, #640]	; (b6454 <_GLOBAL__sub_I_ruid+0x3e4>)
   b61d2:	f004 fafc 	bl	ba7ce <_ZN6StringC1EPK19__FlashStringHelper>
   b61d6:	49a0      	ldr	r1, [pc, #640]	; (b6458 <_GLOBAL__sub_I_ruid+0x3e8>)
   b61d8:	48a0      	ldr	r0, [pc, #640]	; (b645c <_GLOBAL__sub_I_ruid+0x3ec>)
   b61da:	f004 faf8 	bl	ba7ce <_ZN6StringC1EPK19__FlashStringHelper>
   b61de:	49a0      	ldr	r1, [pc, #640]	; (b6460 <_GLOBAL__sub_I_ruid+0x3f0>)
   b61e0:	48a0      	ldr	r0, [pc, #640]	; (b6464 <_GLOBAL__sub_I_ruid+0x3f4>)
   b61e2:	f004 faf4 	bl	ba7ce <_ZN6StringC1EPK19__FlashStringHelper>
   b61e6:	49a0      	ldr	r1, [pc, #640]	; (b6468 <_GLOBAL__sub_I_ruid+0x3f8>)
   b61e8:	48a0      	ldr	r0, [pc, #640]	; (b646c <_GLOBAL__sub_I_ruid+0x3fc>)
   b61ea:	f004 faf0 	bl	ba7ce <_ZN6StringC1EPK19__FlashStringHelper>
   b61ee:	49a0      	ldr	r1, [pc, #640]	; (b6470 <_GLOBAL__sub_I_ruid+0x400>)
   b61f0:	48a0      	ldr	r0, [pc, #640]	; (b6474 <_GLOBAL__sub_I_ruid+0x404>)
   b61f2:	f004 faec 	bl	ba7ce <_ZN6StringC1EPK19__FlashStringHelper>
   b61f6:	49a0      	ldr	r1, [pc, #640]	; (b6478 <_GLOBAL__sub_I_ruid+0x408>)
   b61f8:	48a0      	ldr	r0, [pc, #640]	; (b647c <_GLOBAL__sub_I_ruid+0x40c>)
   b61fa:	f004 fae8 	bl	ba7ce <_ZN6StringC1EPK19__FlashStringHelper>
   b61fe:	49a0      	ldr	r1, [pc, #640]	; (b6480 <_GLOBAL__sub_I_ruid+0x410>)
   b6200:	48a0      	ldr	r0, [pc, #640]	; (b6484 <_GLOBAL__sub_I_ruid+0x414>)
   b6202:	f004 fae4 	bl	ba7ce <_ZN6StringC1EPK19__FlashStringHelper>
   b6206:	49a0      	ldr	r1, [pc, #640]	; (b6488 <_GLOBAL__sub_I_ruid+0x418>)
   b6208:	48a0      	ldr	r0, [pc, #640]	; (b648c <_GLOBAL__sub_I_ruid+0x41c>)
   b620a:	f004 fae0 	bl	ba7ce <_ZN6StringC1EPK19__FlashStringHelper>
   b620e:	49a0      	ldr	r1, [pc, #640]	; (b6490 <_GLOBAL__sub_I_ruid+0x420>)
   b6210:	48a0      	ldr	r0, [pc, #640]	; (b6494 <_GLOBAL__sub_I_ruid+0x424>)
   b6212:	f004 fadc 	bl	ba7ce <_ZN6StringC1EPK19__FlashStringHelper>
   b6216:	49a0      	ldr	r1, [pc, #640]	; (b6498 <_GLOBAL__sub_I_ruid+0x428>)
   b6218:	48a0      	ldr	r0, [pc, #640]	; (b649c <_GLOBAL__sub_I_ruid+0x42c>)
   b621a:	f004 fad8 	bl	ba7ce <_ZN6StringC1EPK19__FlashStringHelper>
                        "2#1#0","2#2#0","2#2#1","2#2#2","2#2#3","2#2#4","2#2#5","2#2#6","2#2#7","2#2#8"};
   b621e:	49a0      	ldr	r1, [pc, #640]	; (b64a0 <_GLOBAL__sub_I_ruid+0x430>)
   b6220:	48a0      	ldr	r0, [pc, #640]	; (b64a4 <_GLOBAL__sub_I_ruid+0x434>)
   b6222:	f004 fad4 	bl	ba7ce <_ZN6StringC1EPK19__FlashStringHelper>
   b6226:	49a0      	ldr	r1, [pc, #640]	; (b64a8 <_GLOBAL__sub_I_ruid+0x438>)
   b6228:	48a0      	ldr	r0, [pc, #640]	; (b64ac <_GLOBAL__sub_I_ruid+0x43c>)
   b622a:	f004 fad0 	bl	ba7ce <_ZN6StringC1EPK19__FlashStringHelper>
   b622e:	49a0      	ldr	r1, [pc, #640]	; (b64b0 <_GLOBAL__sub_I_ruid+0x440>)
   b6230:	48a0      	ldr	r0, [pc, #640]	; (b64b4 <_GLOBAL__sub_I_ruid+0x444>)
   b6232:	f004 facc 	bl	ba7ce <_ZN6StringC1EPK19__FlashStringHelper>
   b6236:	49a0      	ldr	r1, [pc, #640]	; (b64b8 <_GLOBAL__sub_I_ruid+0x448>)
   b6238:	48a0      	ldr	r0, [pc, #640]	; (b64bc <_GLOBAL__sub_I_ruid+0x44c>)
   b623a:	f004 fac8 	bl	ba7ce <_ZN6StringC1EPK19__FlashStringHelper>
   b623e:	49a0      	ldr	r1, [pc, #640]	; (b64c0 <_GLOBAL__sub_I_ruid+0x450>)
   b6240:	48a0      	ldr	r0, [pc, #640]	; (b64c4 <_GLOBAL__sub_I_ruid+0x454>)
   b6242:	f004 fac4 	bl	ba7ce <_ZN6StringC1EPK19__FlashStringHelper>
   b6246:	49a0      	ldr	r1, [pc, #640]	; (b64c8 <_GLOBAL__sub_I_ruid+0x458>)
   b6248:	48a0      	ldr	r0, [pc, #640]	; (b64cc <_GLOBAL__sub_I_ruid+0x45c>)
   b624a:	f004 fac0 	bl	ba7ce <_ZN6StringC1EPK19__FlashStringHelper>
   b624e:	49a0      	ldr	r1, [pc, #640]	; (b64d0 <_GLOBAL__sub_I_ruid+0x460>)
   b6250:	48a0      	ldr	r0, [pc, #640]	; (b64d4 <_GLOBAL__sub_I_ruid+0x464>)
   b6252:	f004 fabc 	bl	ba7ce <_ZN6StringC1EPK19__FlashStringHelper>
   b6256:	49a0      	ldr	r1, [pc, #640]	; (b64d8 <_GLOBAL__sub_I_ruid+0x468>)
   b6258:	48a0      	ldr	r0, [pc, #640]	; (b64dc <_GLOBAL__sub_I_ruid+0x46c>)
   b625a:	f004 fab8 	bl	ba7ce <_ZN6StringC1EPK19__FlashStringHelper>
   b625e:	49a0      	ldr	r1, [pc, #640]	; (b64e0 <_GLOBAL__sub_I_ruid+0x470>)
   b6260:	48a0      	ldr	r0, [pc, #640]	; (b64e4 <_GLOBAL__sub_I_ruid+0x474>)
   b6262:	f004 fab4 	bl	ba7ce <_ZN6StringC1EPK19__FlashStringHelper>
   b6266:	49a0      	ldr	r1, [pc, #640]	; (b64e8 <_GLOBAL__sub_I_ruid+0x478>)
   b6268:	48a0      	ldr	r0, [pc, #640]	; (b64ec <_GLOBAL__sub_I_ruid+0x47c>)
   b626a:	f004 fab0 	bl	ba7ce <_ZN6StringC1EPK19__FlashStringHelper>
   b626e:	49a0      	ldr	r1, [pc, #640]	; (b64f0 <_GLOBAL__sub_I_ruid+0x480>)
   b6270:	48a0      	ldr	r0, [pc, #640]	; (b64f4 <_GLOBAL__sub_I_ruid+0x484>)
   b6272:	f004 faac 	bl	ba7ce <_ZN6StringC1EPK19__FlashStringHelper>
   b6276:	49a0      	ldr	r1, [pc, #640]	; (b64f8 <_GLOBAL__sub_I_ruid+0x488>)
   b6278:	48a0      	ldr	r0, [pc, #640]	; (b64fc <_GLOBAL__sub_I_ruid+0x48c>)
   b627a:	f004 faa8 	bl	ba7ce <_ZN6StringC1EPK19__FlashStringHelper>
   b627e:	49a0      	ldr	r1, [pc, #640]	; (b6500 <_GLOBAL__sub_I_ruid+0x490>)
   b6280:	48a0      	ldr	r0, [pc, #640]	; (b6504 <_GLOBAL__sub_I_ruid+0x494>)
   b6282:	f004 faa4 	bl	ba7ce <_ZN6StringC1EPK19__FlashStringHelper>
   b6286:	49a0      	ldr	r1, [pc, #640]	; (b6508 <_GLOBAL__sub_I_ruid+0x498>)
   b6288:	48a0      	ldr	r0, [pc, #640]	; (b650c <_GLOBAL__sub_I_ruid+0x49c>)
   b628a:	f004 faa0 	bl	ba7ce <_ZN6StringC1EPK19__FlashStringHelper>
   b628e:	49a0      	ldr	r1, [pc, #640]	; (b6510 <_GLOBAL__sub_I_ruid+0x4a0>)
   b6290:	48a0      	ldr	r0, [pc, #640]	; (b6514 <_GLOBAL__sub_I_ruid+0x4a4>)
   b6292:	f004 fa9c 	bl	ba7ce <_ZN6StringC1EPK19__FlashStringHelper>
   b6296:	49a0      	ldr	r1, [pc, #640]	; (b6518 <_GLOBAL__sub_I_ruid+0x4a8>)
   b6298:	48a0      	ldr	r0, [pc, #640]	; (b651c <_GLOBAL__sub_I_ruid+0x4ac>)
   b629a:	f004 fa98 	bl	ba7ce <_ZN6StringC1EPK19__FlashStringHelper>
   b629e:	49a0      	ldr	r1, [pc, #640]	; (b6520 <_GLOBAL__sub_I_ruid+0x4b0>)
   b62a0:	48a0      	ldr	r0, [pc, #640]	; (b6524 <_GLOBAL__sub_I_ruid+0x4b4>)
   b62a2:	f004 fa94 	bl	ba7ce <_ZN6StringC1EPK19__FlashStringHelper>
   b62a6:	49a0      	ldr	r1, [pc, #640]	; (b6528 <_GLOBAL__sub_I_ruid+0x4b8>)
   b62a8:	48a0      	ldr	r0, [pc, #640]	; (b652c <_GLOBAL__sub_I_ruid+0x4bc>)
   b62aa:	f004 fa90 	bl	ba7ce <_ZN6StringC1EPK19__FlashStringHelper>
   b62ae:	49a0      	ldr	r1, [pc, #640]	; (b6530 <_GLOBAL__sub_I_ruid+0x4c0>)
   b62b0:	48a0      	ldr	r0, [pc, #640]	; (b6534 <_GLOBAL__sub_I_ruid+0x4c4>)
   b62b2:	f004 fa8c 	bl	ba7ce <_ZN6StringC1EPK19__FlashStringHelper>
   b62b6:	49a0      	ldr	r1, [pc, #640]	; (b6538 <_GLOBAL__sub_I_ruid+0x4c8>)
   b62b8:	48a0      	ldr	r0, [pc, #640]	; (b653c <_GLOBAL__sub_I_ruid+0x4cc>)
   b62ba:	f004 fa88 	bl	ba7ce <_ZN6StringC1EPK19__FlashStringHelper>
   b62be:	49a0      	ldr	r1, [pc, #640]	; (b6540 <_GLOBAL__sub_I_ruid+0x4d0>)
   b62c0:	48a0      	ldr	r0, [pc, #640]	; (b6544 <_GLOBAL__sub_I_ruid+0x4d4>)
   b62c2:	f004 fa84 	bl	ba7ce <_ZN6StringC1EPK19__FlashStringHelper>
   b62c6:	49a0      	ldr	r1, [pc, #640]	; (b6548 <_GLOBAL__sub_I_ruid+0x4d8>)
   b62c8:	48a0      	ldr	r0, [pc, #640]	; (b654c <_GLOBAL__sub_I_ruid+0x4dc>)
   b62ca:	f004 fa80 	bl	ba7ce <_ZN6StringC1EPK19__FlashStringHelper>
   b62ce:	49a0      	ldr	r1, [pc, #640]	; (b6550 <_GLOBAL__sub_I_ruid+0x4e0>)
   b62d0:	48a0      	ldr	r0, [pc, #640]	; (b6554 <_GLOBAL__sub_I_ruid+0x4e4>)
   b62d2:	f004 fa7c 	bl	ba7ce <_ZN6StringC1EPK19__FlashStringHelper>
   b62d6:	49a0      	ldr	r1, [pc, #640]	; (b6558 <_GLOBAL__sub_I_ruid+0x4e8>)
   b62d8:	48a0      	ldr	r0, [pc, #640]	; (b655c <_GLOBAL__sub_I_ruid+0x4ec>)
   b62da:	f004 fa78 	bl	ba7ce <_ZN6StringC1EPK19__FlashStringHelper>
   b62de:	49a0      	ldr	r1, [pc, #640]	; (b6560 <_GLOBAL__sub_I_ruid+0x4f0>)
   b62e0:	48a0      	ldr	r0, [pc, #640]	; (b6564 <_GLOBAL__sub_I_ruid+0x4f4>)
   b62e2:	f004 fa74 	bl	ba7ce <_ZN6StringC1EPK19__FlashStringHelper>
   b62e6:	49a0      	ldr	r1, [pc, #640]	; (b6568 <_GLOBAL__sub_I_ruid+0x4f8>)
   b62e8:	48a0      	ldr	r0, [pc, #640]	; (b656c <_GLOBAL__sub_I_ruid+0x4fc>)
   b62ea:	f004 fa70 	bl	ba7ce <_ZN6StringC1EPK19__FlashStringHelper>
   b62ee:	49a0      	ldr	r1, [pc, #640]	; (b6570 <_GLOBAL__sub_I_ruid+0x500>)
   b62f0:	48a0      	ldr	r0, [pc, #640]	; (b6574 <_GLOBAL__sub_I_ruid+0x504>)
   b62f2:	f004 fa6c 	bl	ba7ce <_ZN6StringC1EPK19__FlashStringHelper>
   b62f6:	49a0      	ldr	r1, [pc, #640]	; (b6578 <_GLOBAL__sub_I_ruid+0x508>)
   b62f8:	48a0      	ldr	r0, [pc, #640]	; (b657c <_GLOBAL__sub_I_ruid+0x50c>)
   b62fa:	f004 fa68 	bl	ba7ce <_ZN6StringC1EPK19__FlashStringHelper>
   b62fe:	49a0      	ldr	r1, [pc, #640]	; (b6580 <_GLOBAL__sub_I_ruid+0x510>)
   b6300:	48a0      	ldr	r0, [pc, #640]	; (b6584 <_GLOBAL__sub_I_ruid+0x514>)
   b6302:	f004 fa64 	bl	ba7ce <_ZN6StringC1EPK19__FlashStringHelper>
   b6306:	49a0      	ldr	r1, [pc, #640]	; (b6588 <_GLOBAL__sub_I_ruid+0x518>)
   b6308:	48a0      	ldr	r0, [pc, #640]	; (b658c <_GLOBAL__sub_I_ruid+0x51c>)
   b630a:	f004 fa60 	bl	ba7ce <_ZN6StringC1EPK19__FlashStringHelper>
   b630e:	49a0      	ldr	r1, [pc, #640]	; (b6590 <_GLOBAL__sub_I_ruid+0x520>)
   b6310:	48a0      	ldr	r0, [pc, #640]	; (b6594 <_GLOBAL__sub_I_ruid+0x524>)
   b6312:	f004 fa5c 	bl	ba7ce <_ZN6StringC1EPK19__FlashStringHelper>
   b6316:	49a0      	ldr	r1, [pc, #640]	; (b6598 <_GLOBAL__sub_I_ruid+0x528>)
   b6318:	48a0      	ldr	r0, [pc, #640]	; (b659c <_GLOBAL__sub_I_ruid+0x52c>)
   b631a:	f004 fa58 	bl	ba7ce <_ZN6StringC1EPK19__FlashStringHelper>
   b631e:	49a0      	ldr	r1, [pc, #640]	; (b65a0 <_GLOBAL__sub_I_ruid+0x530>)
   b6320:	e140      	b.n	b65a4 <_GLOBAL__sub_I_ruid+0x534>
   b6322:	bf00      	nop
   b6324:	2003d6ec 	.word	0x2003d6ec
   b6328:	2003dc8c 	.word	0x2003dc8c
   b632c:	000bb89e 	.word	0x000bb89e
   b6330:	2003cd28 	.word	0x2003cd28
   b6334:	2003d34c 	.word	0x2003d34c
   b6338:	2003c750 	.word	0x2003c750
   b633c:	000bb8ac 	.word	0x000bb8ac
   b6340:	2003d39c 	.word	0x2003d39c
   b6344:	2003d3ac 	.word	0x2003d3ac
   b6348:	000bb91a 	.word	0x000bb91a
   b634c:	2003e37c 	.word	0x2003e37c
   b6350:	000bb92e 	.word	0x000bb92e
   b6354:	2003e38c 	.word	0x2003e38c
   b6358:	000bba5e 	.word	0x000bba5e
   b635c:	2003e39c 	.word	0x2003e39c
   b6360:	000bb8ae 	.word	0x000bb8ae
   b6364:	2003e3ac 	.word	0x2003e3ac
   b6368:	000bb8b4 	.word	0x000bb8b4
   b636c:	2003e3bc 	.word	0x2003e3bc
   b6370:	000bb8bb 	.word	0x000bb8bb
   b6374:	2003e3cc 	.word	0x2003e3cc
   b6378:	000bb8c2 	.word	0x000bb8c2
   b637c:	2003e3dc 	.word	0x2003e3dc
   b6380:	000bb8ca 	.word	0x000bb8ca
   b6384:	2003e3ec 	.word	0x2003e3ec
   b6388:	000bb8d2 	.word	0x000bb8d2
   b638c:	2003e3fc 	.word	0x2003e3fc
   b6390:	000bb8da 	.word	0x000bb8da
   b6394:	2003e40c 	.word	0x2003e40c
   b6398:	000bb8e2 	.word	0x000bb8e2
   b639c:	2003e41c 	.word	0x2003e41c
   b63a0:	000bb8ea 	.word	0x000bb8ea
   b63a4:	2003e42c 	.word	0x2003e42c
   b63a8:	000bb8f2 	.word	0x000bb8f2
   b63ac:	2003e43c 	.word	0x2003e43c
   b63b0:	000bb8fa 	.word	0x000bb8fa
   b63b4:	2003e44c 	.word	0x2003e44c
   b63b8:	2003e45c 	.word	0x2003e45c
   b63bc:	2003e46c 	.word	0x2003e46c
   b63c0:	000bb902 	.word	0x000bb902
   b63c4:	2003e1bc 	.word	0x2003e1bc
   b63c8:	000bb90c 	.word	0x000bb90c
   b63cc:	2003e1cc 	.word	0x2003e1cc
   b63d0:	000bb916 	.word	0x000bb916
   b63d4:	2003e1dc 	.word	0x2003e1dc
   b63d8:	000bb920 	.word	0x000bb920
   b63dc:	2003e1ec 	.word	0x2003e1ec
   b63e0:	000bb92a 	.word	0x000bb92a
   b63e4:	2003e1fc 	.word	0x2003e1fc
   b63e8:	000bb934 	.word	0x000bb934
   b63ec:	2003e20c 	.word	0x2003e20c
   b63f0:	000bb93e 	.word	0x000bb93e
   b63f4:	2003e21c 	.word	0x2003e21c
   b63f8:	000bb948 	.word	0x000bb948
   b63fc:	2003e22c 	.word	0x2003e22c
   b6400:	000bb952 	.word	0x000bb952
   b6404:	2003e23c 	.word	0x2003e23c
   b6408:	000bb95c 	.word	0x000bb95c
   b640c:	2003e24c 	.word	0x2003e24c
   b6410:	000bb966 	.word	0x000bb966
   b6414:	2003e25c 	.word	0x2003e25c
   b6418:	000bb970 	.word	0x000bb970
   b641c:	2003e26c 	.word	0x2003e26c
   b6420:	000bb97a 	.word	0x000bb97a
   b6424:	2003e27c 	.word	0x2003e27c
   b6428:	000bb984 	.word	0x000bb984
   b642c:	2003e28c 	.word	0x2003e28c
   b6430:	000bb98e 	.word	0x000bb98e
   b6434:	2003e29c 	.word	0x2003e29c
   b6438:	000bb998 	.word	0x000bb998
   b643c:	2003e2ac 	.word	0x2003e2ac
   b6440:	000bb9a2 	.word	0x000bb9a2
   b6444:	2003e2bc 	.word	0x2003e2bc
   b6448:	000bb9ac 	.word	0x000bb9ac
   b644c:	2003e2cc 	.word	0x2003e2cc
   b6450:	000bb9b6 	.word	0x000bb9b6
   b6454:	2003e2dc 	.word	0x2003e2dc
   b6458:	000bb9c0 	.word	0x000bb9c0
   b645c:	2003e2ec 	.word	0x2003e2ec
   b6460:	000bb9ca 	.word	0x000bb9ca
   b6464:	2003e2fc 	.word	0x2003e2fc
   b6468:	000bb9d4 	.word	0x000bb9d4
   b646c:	2003e30c 	.word	0x2003e30c
   b6470:	000bb9de 	.word	0x000bb9de
   b6474:	2003e31c 	.word	0x2003e31c
   b6478:	000bb8e6 	.word	0x000bb8e6
   b647c:	2003e32c 	.word	0x2003e32c
   b6480:	000bb9e8 	.word	0x000bb9e8
   b6484:	2003e33c 	.word	0x2003e33c
   b6488:	000bb9ee 	.word	0x000bb9ee
   b648c:	2003e34c 	.word	0x2003e34c
   b6490:	000bb8f6 	.word	0x000bb8f6
   b6494:	2003e35c 	.word	0x2003e35c
   b6498:	000bb8fe 	.word	0x000bb8fe
   b649c:	2003e36c 	.word	0x2003e36c
   b64a0:	000bb9f4 	.word	0x000bb9f4
   b64a4:	2003e47c 	.word	0x2003e47c
   b64a8:	000bb9fc 	.word	0x000bb9fc
   b64ac:	2003e48c 	.word	0x2003e48c
   b64b0:	000bba04 	.word	0x000bba04
   b64b4:	2003e49c 	.word	0x2003e49c
   b64b8:	000bba0c 	.word	0x000bba0c
   b64bc:	2003e4ac 	.word	0x2003e4ac
   b64c0:	000bba14 	.word	0x000bba14
   b64c4:	2003e4bc 	.word	0x2003e4bc
   b64c8:	000bba1c 	.word	0x000bba1c
   b64cc:	2003e4cc 	.word	0x2003e4cc
   b64d0:	000bba24 	.word	0x000bba24
   b64d4:	2003e4dc 	.word	0x2003e4dc
   b64d8:	000bba2c 	.word	0x000bba2c
   b64dc:	2003e4ec 	.word	0x2003e4ec
   b64e0:	000bba34 	.word	0x000bba34
   b64e4:	2003e4fc 	.word	0x2003e4fc
   b64e8:	000bba3c 	.word	0x000bba3c
   b64ec:	2003e50c 	.word	0x2003e50c
   b64f0:	000bba44 	.word	0x000bba44
   b64f4:	2003e51c 	.word	0x2003e51c
   b64f8:	000bba4c 	.word	0x000bba4c
   b64fc:	2003e52c 	.word	0x2003e52c
   b6500:	000bba54 	.word	0x000bba54
   b6504:	2003e53c 	.word	0x2003e53c
   b6508:	000bba5c 	.word	0x000bba5c
   b650c:	2003e54c 	.word	0x2003e54c
   b6510:	000bba64 	.word	0x000bba64
   b6514:	2003e55c 	.word	0x2003e55c
   b6518:	000bba6c 	.word	0x000bba6c
   b651c:	2003e56c 	.word	0x2003e56c
   b6520:	000bba74 	.word	0x000bba74
   b6524:	2003e57c 	.word	0x2003e57c
   b6528:	000bba7c 	.word	0x000bba7c
   b652c:	2003e58c 	.word	0x2003e58c
   b6530:	000bba84 	.word	0x000bba84
   b6534:	2003e59c 	.word	0x2003e59c
   b6538:	000bba8c 	.word	0x000bba8c
   b653c:	2003e5ac 	.word	0x2003e5ac
   b6540:	000bba94 	.word	0x000bba94
   b6544:	2003e5bc 	.word	0x2003e5bc
   b6548:	000bba9c 	.word	0x000bba9c
   b654c:	2003e5cc 	.word	0x2003e5cc
   b6550:	000bbaa4 	.word	0x000bbaa4
   b6554:	2003e5dc 	.word	0x2003e5dc
   b6558:	000bbaac 	.word	0x000bbaac
   b655c:	2003e5ec 	.word	0x2003e5ec
   b6560:	000bbab4 	.word	0x000bbab4
   b6564:	2003e5fc 	.word	0x2003e5fc
   b6568:	000bbaba 	.word	0x000bbaba
   b656c:	2003e60c 	.word	0x2003e60c
   b6570:	000bbac0 	.word	0x000bbac0
   b6574:	2003e61c 	.word	0x2003e61c
   b6578:	000bbac6 	.word	0x000bbac6
   b657c:	2003e62c 	.word	0x2003e62c
   b6580:	000bbacc 	.word	0x000bbacc
   b6584:	2003e63c 	.word	0x2003e63c
   b6588:	000bbad2 	.word	0x000bbad2
   b658c:	2003e64c 	.word	0x2003e64c
   b6590:	000bbad8 	.word	0x000bbad8
   b6594:	2003e65c 	.word	0x2003e65c
   b6598:	000bbade 	.word	0x000bbade
   b659c:	2003e66c 	.word	0x2003e66c
   b65a0:	000bbae4 	.word	0x000bbae4
   b65a4:	4831      	ldr	r0, [pc, #196]	; (b666c <_GLOBAL__sub_I_ruid+0x5fc>)
   b65a6:	f004 f912 	bl	ba7ce <_ZN6StringC1EPK19__FlashStringHelper>
   b65aa:	4931      	ldr	r1, [pc, #196]	; (b6670 <_GLOBAL__sub_I_ruid+0x600>)
   b65ac:	4831      	ldr	r0, [pc, #196]	; (b6674 <_GLOBAL__sub_I_ruid+0x604>)
   b65ae:	f004 f90e 	bl	ba7ce <_ZN6StringC1EPK19__FlashStringHelper>
   b65b2:	4931      	ldr	r1, [pc, #196]	; (b6678 <_GLOBAL__sub_I_ruid+0x608>)
   b65b4:	4831      	ldr	r0, [pc, #196]	; (b667c <_GLOBAL__sub_I_ruid+0x60c>)
   b65b6:	f004 f90a 	bl	ba7ce <_ZN6StringC1EPK19__FlashStringHelper>
String tarjetas_comunes[8] = {"6#0#0","6#0#1","6#0#2","6#1#0","6#2#0","6#2#1","6#2#2"};
   b65ba:	4931      	ldr	r1, [pc, #196]	; (b6680 <_GLOBAL__sub_I_ruid+0x610>)
   b65bc:	4831      	ldr	r0, [pc, #196]	; (b6684 <_GLOBAL__sub_I_ruid+0x614>)
   b65be:	f004 f906 	bl	ba7ce <_ZN6StringC1EPK19__FlashStringHelper>
   b65c2:	4931      	ldr	r1, [pc, #196]	; (b6688 <_GLOBAL__sub_I_ruid+0x618>)
   b65c4:	4831      	ldr	r0, [pc, #196]	; (b668c <_GLOBAL__sub_I_ruid+0x61c>)
   b65c6:	f004 f902 	bl	ba7ce <_ZN6StringC1EPK19__FlashStringHelper>
   b65ca:	4931      	ldr	r1, [pc, #196]	; (b6690 <_GLOBAL__sub_I_ruid+0x620>)
   b65cc:	4831      	ldr	r0, [pc, #196]	; (b6694 <_GLOBAL__sub_I_ruid+0x624>)
   b65ce:	f004 f8fe 	bl	ba7ce <_ZN6StringC1EPK19__FlashStringHelper>
   b65d2:	4931      	ldr	r1, [pc, #196]	; (b6698 <_GLOBAL__sub_I_ruid+0x628>)
   b65d4:	4831      	ldr	r0, [pc, #196]	; (b669c <_GLOBAL__sub_I_ruid+0x62c>)
   b65d6:	f004 f8fa 	bl	ba7ce <_ZN6StringC1EPK19__FlashStringHelper>
   b65da:	4931      	ldr	r1, [pc, #196]	; (b66a0 <_GLOBAL__sub_I_ruid+0x630>)
   b65dc:	4831      	ldr	r0, [pc, #196]	; (b66a4 <_GLOBAL__sub_I_ruid+0x634>)
   b65de:	f004 f8f6 	bl	ba7ce <_ZN6StringC1EPK19__FlashStringHelper>
   b65e2:	4931      	ldr	r1, [pc, #196]	; (b66a8 <_GLOBAL__sub_I_ruid+0x638>)
   b65e4:	4831      	ldr	r0, [pc, #196]	; (b66ac <_GLOBAL__sub_I_ruid+0x63c>)
   b65e6:	f004 f8f2 	bl	ba7ce <_ZN6StringC1EPK19__FlashStringHelper>
   b65ea:	4931      	ldr	r1, [pc, #196]	; (b66b0 <_GLOBAL__sub_I_ruid+0x640>)
   b65ec:	4831      	ldr	r0, [pc, #196]	; (b66b4 <_GLOBAL__sub_I_ruid+0x644>)
   b65ee:	f004 f8ee 	bl	ba7ce <_ZN6StringC1EPK19__FlashStringHelper>
   b65f2:	4921      	ldr	r1, [pc, #132]	; (b6678 <_GLOBAL__sub_I_ruid+0x608>)
   b65f4:	4830      	ldr	r0, [pc, #192]	; (b66b8 <_GLOBAL__sub_I_ruid+0x648>)
   b65f6:	f004 f8ea 	bl	ba7ce <_ZN6StringC1EPK19__FlashStringHelper>
String tarjetas[80] = {"3#0#0#12#0","3#0#1#6#0", "1#0#1#9#3", "1#0#0#12#1", "1#1#0#13#1"};
   b65fa:	4930      	ldr	r1, [pc, #192]	; (b66bc <_GLOBAL__sub_I_ruid+0x64c>)
   b65fc:	4830      	ldr	r0, [pc, #192]	; (b66c0 <_GLOBAL__sub_I_ruid+0x650>)
   b65fe:	f004 f8e6 	bl	ba7ce <_ZN6StringC1EPK19__FlashStringHelper>
   b6602:	4930      	ldr	r1, [pc, #192]	; (b66c4 <_GLOBAL__sub_I_ruid+0x654>)
   b6604:	4830      	ldr	r0, [pc, #192]	; (b66c8 <_GLOBAL__sub_I_ruid+0x658>)
   b6606:	f004 f8e2 	bl	ba7ce <_ZN6StringC1EPK19__FlashStringHelper>
   b660a:	4930      	ldr	r1, [pc, #192]	; (b66cc <_GLOBAL__sub_I_ruid+0x65c>)
   b660c:	4830      	ldr	r0, [pc, #192]	; (b66d0 <_GLOBAL__sub_I_ruid+0x660>)
   b660e:	f004 f8de 	bl	ba7ce <_ZN6StringC1EPK19__FlashStringHelper>
   b6612:	4930      	ldr	r1, [pc, #192]	; (b66d4 <_GLOBAL__sub_I_ruid+0x664>)
   b6614:	4830      	ldr	r0, [pc, #192]	; (b66d8 <_GLOBAL__sub_I_ruid+0x668>)
   b6616:	f004 f8da 	bl	ba7ce <_ZN6StringC1EPK19__FlashStringHelper>
   b661a:	4930      	ldr	r1, [pc, #192]	; (b66dc <_GLOBAL__sub_I_ruid+0x66c>)
   b661c:	4830      	ldr	r0, [pc, #192]	; (b66e0 <_GLOBAL__sub_I_ruid+0x670>)
   b661e:	f004 f8d6 	bl	ba7ce <_ZN6StringC1EPK19__FlashStringHelper>
   b6622:	1928      	adds	r0, r5, r4
   b6624:	4631      	mov	r1, r6
   b6626:	3410      	adds	r4, #16
   b6628:	f004 f8d1 	bl	ba7ce <_ZN6StringC1EPK19__FlashStringHelper>
   b662c:	f5b4 6f96 	cmp.w	r4, #1200	; 0x4b0
   b6630:	d1f7      	bne.n	b6622 <_GLOBAL__sub_I_ruid+0x5b2>
MFRC522 mfrc522(SS_PIN, RST_PIN);
   b6632:	482c      	ldr	r0, [pc, #176]	; (b66e4 <_GLOBAL__sub_I_ruid+0x674>)
String secuencia[30];
   b6634:	4d2c      	ldr	r5, [pc, #176]	; (b66e8 <_GLOBAL__sub_I_ruid+0x678>)
   b6636:	4e10      	ldr	r6, [pc, #64]	; (b6678 <_GLOBAL__sub_I_ruid+0x608>)
MFRC522 mfrc522(SS_PIN, RST_PIN);
   b6638:	2208      	movs	r2, #8
   b663a:	2110      	movs	r1, #16
   b663c:	f002 fa05 	bl	b8a4a <_ZN7MFRC522C1Ehh>
   b6640:	2400      	movs	r4, #0
String secuencia[30];
   b6642:	1928      	adds	r0, r5, r4
   b6644:	4631      	mov	r1, r6
   b6646:	3410      	adds	r4, #16
   b6648:	f004 f8c1 	bl	ba7ce <_ZN6StringC1EPK19__FlashStringHelper>
   b664c:	f5b4 7ff0 	cmp.w	r4, #480	; 0x1e0
   b6650:	d1f7      	bne.n	b6642 <_GLOBAL__sub_I_ruid+0x5d2>

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b6652:	4b26      	ldr	r3, [pc, #152]	; (b66ec <_GLOBAL__sub_I_ruid+0x67c>)
   b6654:	2200      	movs	r2, #0
   b6656:	e9c3 2200 	strd	r2, r2, [r3]
    SleepResult() {}
   b665a:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
   b665e:	609a      	str	r2, [r3, #8]
   b6660:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b6664:	2002      	movs	r0, #2
   b6666:	f003 be45 	b.w	ba2f4 <set_system_mode>
   b666a:	bf00      	nop
   b666c:	2003e67c 	.word	0x2003e67c
   b6670:	000bbaea 	.word	0x000bbaea
   b6674:	2003e68c 	.word	0x2003e68c
   b6678:	000bb89e 	.word	0x000bb89e
   b667c:	2003e69c 	.word	0x2003e69c
   b6680:	000bbaf0 	.word	0x000bbaf0
   b6684:	2003e13c 	.word	0x2003e13c
   b6688:	000bbaf6 	.word	0x000bbaf6
   b668c:	2003e14c 	.word	0x2003e14c
   b6690:	000bbafc 	.word	0x000bbafc
   b6694:	2003e15c 	.word	0x2003e15c
   b6698:	000bbb02 	.word	0x000bbb02
   b669c:	2003e16c 	.word	0x2003e16c
   b66a0:	000bbb08 	.word	0x000bbb08
   b66a4:	2003e17c 	.word	0x2003e17c
   b66a8:	000bbb0e 	.word	0x000bbb0e
   b66ac:	2003e18c 	.word	0x2003e18c
   b66b0:	000bbb14 	.word	0x000bbb14
   b66b4:	2003e19c 	.word	0x2003e19c
   b66b8:	2003e1ac 	.word	0x2003e1ac
   b66bc:	000bbb1a 	.word	0x000bbb1a
   b66c0:	2003dc3c 	.word	0x2003dc3c
   b66c4:	000bbb25 	.word	0x000bbb25
   b66c8:	2003dc4c 	.word	0x2003dc4c
   b66cc:	000bbb2f 	.word	0x000bbb2f
   b66d0:	2003dc5c 	.word	0x2003dc5c
   b66d4:	000bbb39 	.word	0x000bbb39
   b66d8:	2003dc6c 	.word	0x2003dc6c
   b66dc:	000bbb44 	.word	0x000bbb44
   b66e0:	2003dc7c 	.word	0x2003dc7c
   b66e4:	2003d6f4 	.word	0x2003d6f4
   b66e8:	2003da50 	.word	0x2003da50
   b66ec:	2003c740 	.word	0x2003c740

000b66f0 <_Z10showBitmapii6String>:
void showBitmap(int id1, int id2, String msg) {
   b66f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   display.clearDisplay();
   b66f4:	4f99      	ldr	r7, [pc, #612]	; (b695c <_Z10showBitmapii6String+0x26c>)
void showBitmap(int id1, int id2, String msg) {
   b66f6:	b088      	sub	sp, #32
   b66f8:	4606      	mov	r6, r0
   display.clearDisplay();
   b66fa:	4638      	mov	r0, r7
void showBitmap(int id1, int id2, String msg) {
   b66fc:	460d      	mov	r5, r1
   b66fe:	4614      	mov	r4, r2
   display.clearDisplay();
   b6700:	f003 f862 	bl	b97c8 <_ZN16Adafruit_SSD130612clearDisplayEv>
    @brief  Set text cursor location
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
   b6704:	2300      	movs	r3, #0
   b6706:	613b      	str	r3, [r7, #16]
   bitmap = true;
   b6708:	4b95      	ldr	r3, [pc, #596]	; (b6960 <_Z10showBitmapii6String+0x270>)
   b670a:	2201      	movs	r2, #1
   b670c:	701a      	strb	r2, [r3, #0]
   b670e:	f003 fc99 	bl	ba044 <HAL_Timer_Get_Milli_Seconds>
   startTime = millis();
   b6712:	4b94      	ldr	r3, [pc, #592]	; (b6964 <_Z10showBitmapii6String+0x274>)
   b6714:	6018      	str	r0, [r3, #0]
   switch (id1)
   b6716:	2e03      	cmp	r6, #3
   b6718:	d816      	bhi.n	b6748 <_Z10showBitmapii6String+0x58>
   b671a:	e8df f016 	tbh	[pc, r6, lsl #1]
   b671e:	0004      	.short	0x0004
   b6720:	00f0002d 	.word	0x00f0002d
   b6724:	0116      	.short	0x0116
      switch (id2)
   b6726:	2d03      	cmp	r5, #3
   b6728:	d80e      	bhi.n	b6748 <_Z10showBitmapii6String+0x58>
   b672a:	e8df f005 	tbb	[pc, r5]
   b672e:	0702      	.short	0x0702
   b6730:	0b09      	.short	0x0b09
         snprintf(buf, sizeof(buf), "MODO BASICO");
   b6732:	498d      	ldr	r1, [pc, #564]	; (b6968 <_Z10showBitmapii6String+0x278>)
         snprintf(buf, sizeof(buf), "Tarjeta invalida para este modo");
   b6734:	488d      	ldr	r0, [pc, #564]	; (b696c <_Z10showBitmapii6String+0x27c>)
   b6736:	f004 ff09 	bl	bb54c <strcpy>
         break;
   b673a:	e00e      	b.n	b675a <_Z10showBitmapii6String+0x6a>
         snprintf(buf, sizeof(buf), "MODO AVANZADO");
   b673c:	498c      	ldr	r1, [pc, #560]	; (b6970 <_Z10showBitmapii6String+0x280>)
   b673e:	e7f9      	b.n	b6734 <_Z10showBitmapii6String+0x44>
         snprintf(buf, sizeof(buf), "MODO MUSICA");
   b6740:	498c      	ldr	r1, [pc, #560]	; (b6974 <_Z10showBitmapii6String+0x284>)
   b6742:	e7f7      	b.n	b6734 <_Z10showBitmapii6String+0x44>
         snprintf(buf, sizeof(buf), "MODO EXPLORA");
   b6744:	498c      	ldr	r1, [pc, #560]	; (b6978 <_Z10showBitmapii6String+0x288>)
   b6746:	e7f5      	b.n	b6734 <_Z10showBitmapii6String+0x44>
         snprintf(buf, sizeof(buf), "Bitmap not available.");
   b6748:	498c      	ldr	r1, [pc, #560]	; (b697c <_Z10showBitmapii6String+0x28c>)
   b674a:	4888      	ldr	r0, [pc, #544]	; (b696c <_Z10showBitmapii6String+0x27c>)
   b674c:	f004 fefe 	bl	bb54c <strcpy>
         Serial.println("Bitmap not available.");
   b6750:	f004 fb5a 	bl	bae08 <_Z16_fetch_usbserialv>
   b6754:	4989      	ldr	r1, [pc, #548]	; (b697c <_Z10showBitmapii6String+0x28c>)
   b6756:	f004 f908 	bl	ba96a <_ZN5Print7printlnEPKc>
   Serial.println(buf);
   b675a:	f004 fb55 	bl	bae08 <_Z16_fetch_usbserialv>
   b675e:	4983      	ldr	r1, [pc, #524]	; (b696c <_Z10showBitmapii6String+0x27c>)
   b6760:	f004 f903 	bl	ba96a <_ZN5Print7printlnEPKc>
   display.print(buf);
   b6764:	4981      	ldr	r1, [pc, #516]	; (b696c <_Z10showBitmapii6String+0x27c>)
   b6766:	487d      	ldr	r0, [pc, #500]	; (b695c <_Z10showBitmapii6String+0x26c>)
   b6768:	f004 f8ec 	bl	ba944 <_ZN5Print5printEPKc>
   display.display();
   b676c:	487b      	ldr	r0, [pc, #492]	; (b695c <_Z10showBitmapii6String+0x26c>)
}
   b676e:	b008      	add	sp, #32
   b6770:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   display.display();
   b6774:	f003 ba90 	b.w	b9c98 <_ZN16Adafruit_SSD13067displayEv>
      switch (id2)
   b6778:	2d06      	cmp	r5, #6
   b677a:	d8e5      	bhi.n	b6748 <_Z10showBitmapii6String+0x58>
   b677c:	e8df f005 	tbb	[pc, r5]
   b6780:	6c513704 	.word	0x6c513704
   b6784:	b090      	.short	0xb090
   b6786:	bd          	.byte	0xbd
   b6787:	00          	.byte	0x00
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
   b6788:	4621      	mov	r1, r4
   b678a:	a804      	add	r0, sp, #16
   b678c:	f004 f842 	bl	ba814 <_ZN6StringC1ERKS_>
         snprintf(buf, sizeof(buf), msg+"     CONECTAR A:");
   b6790:	497b      	ldr	r1, [pc, #492]	; (b6980 <_Z10showBitmapii6String+0x290>)
   b6792:	a804      	add	r0, sp, #16
   b6794:	f004 f891 	bl	ba8ba <_ZplRK15StringSumHelperPKc>
   b6798:	2140      	movs	r1, #64	; 0x40
   b679a:	6802      	ldr	r2, [r0, #0]
   b679c:	4873      	ldr	r0, [pc, #460]	; (b696c <_Z10showBitmapii6String+0x27c>)
   b679e:	f003 fe55 	bl	ba44c <snprintf>
class StringSumHelper : public String
   b67a2:	a804      	add	r0, sp, #16
   b67a4:	f003 ffc8 	bl	ba738 <_ZN6StringD1Ev>
         display.fillTriangle(40, 40, 50, 20, 50, 60,WHITE);
   b67a8:	2414      	movs	r4, #20
   b67aa:	2501      	movs	r5, #1
   b67ac:	2632      	movs	r6, #50	; 0x32
   b67ae:	2228      	movs	r2, #40	; 0x28
   b67b0:	f04f 083c 	mov.w	r8, #60	; 0x3c
   b67b4:	4611      	mov	r1, r2
   b67b6:	4869      	ldr	r0, [pc, #420]	; (b695c <_Z10showBitmapii6String+0x26c>)
   b67b8:	4633      	mov	r3, r6
         display.fillRect(50,20,20,40,WHITE);
   b67ba:	2728      	movs	r7, #40	; 0x28
         display.fillTriangle(40, 40, 50, 20, 50, 60,WHITE);
   b67bc:	e9cd 8502 	strd	r8, r5, [sp, #8]
   b67c0:	e9cd 4600 	strd	r4, r6, [sp]
   b67c4:	f001 fe0e 	bl	b83e4 <_ZN12Adafruit_GFX12fillTriangleEsssssst>
         display.fillRect(50,20,20,40,WHITE);
   b67c8:	4623      	mov	r3, r4
   b67ca:	4622      	mov	r2, r4
   b67cc:	4631      	mov	r1, r6
   b67ce:	4863      	ldr	r0, [pc, #396]	; (b695c <_Z10showBitmapii6String+0x26c>)
   b67d0:	9501      	str	r5, [sp, #4]
   b67d2:	9700      	str	r7, [sp, #0]
   b67d4:	f001 fc65 	bl	b80a2 <_ZN12Adafruit_GFX8fillRectEsssst>
         display.fillTriangle(70, 20, 80, 40, 70, 60,WHITE);
   b67d8:	2146      	movs	r1, #70	; 0x46
   b67da:	e9cd 8502 	strd	r8, r5, [sp, #8]
   b67de:	e9cd 7100 	strd	r7, r1, [sp]
   b67e2:	2350      	movs	r3, #80	; 0x50
   b67e4:	4622      	mov	r2, r4
         display.fillTriangle(60, 20, 30, 100, 90, 100,WHITE);
   b67e6:	485d      	ldr	r0, [pc, #372]	; (b695c <_Z10showBitmapii6String+0x26c>)
   b67e8:	f001 fdfc 	bl	b83e4 <_ZN12Adafruit_GFX12fillTriangleEsssssst>
         break;
   b67ec:	e7b5      	b.n	b675a <_Z10showBitmapii6String+0x6a>
	StringSumHelper(const String &s) : String(s) {}
   b67ee:	4621      	mov	r1, r4
   b67f0:	a804      	add	r0, sp, #16
   b67f2:	f004 f80f 	bl	ba814 <_ZN6StringC1ERKS_>
         snprintf(buf, sizeof(buf), msg+"     CONECTAR A:");
   b67f6:	4962      	ldr	r1, [pc, #392]	; (b6980 <_Z10showBitmapii6String+0x290>)
   b67f8:	a804      	add	r0, sp, #16
   b67fa:	f004 f85e 	bl	ba8ba <_ZplRK15StringSumHelperPKc>
   b67fe:	2140      	movs	r1, #64	; 0x40
   b6800:	6802      	ldr	r2, [r0, #0]
   b6802:	485a      	ldr	r0, [pc, #360]	; (b696c <_Z10showBitmapii6String+0x27c>)
   b6804:	f003 fe22 	bl	ba44c <snprintf>
class StringSumHelper : public String
   b6808:	a804      	add	r0, sp, #16
   b680a:	f003 ff95 	bl	ba738 <_ZN6StringD1Ev>
         display.fillRect(40,20,40,40,WHITE);
   b680e:	2328      	movs	r3, #40	; 0x28
   b6810:	2001      	movs	r0, #1
   b6812:	e9cd 3000 	strd	r3, r0, [sp]
   b6816:	2214      	movs	r2, #20
   b6818:	4619      	mov	r1, r3
         display.fillRect(10,50,90,40,BLACK);
   b681a:	4850      	ldr	r0, [pc, #320]	; (b695c <_Z10showBitmapii6String+0x26c>)
   b681c:	f001 fc41 	bl	b80a2 <_ZN12Adafruit_GFX8fillRectEsssst>
         break;
   b6820:	e79b      	b.n	b675a <_Z10showBitmapii6String+0x6a>
	StringSumHelper(const String &s) : String(s) {}
   b6822:	4621      	mov	r1, r4
   b6824:	a804      	add	r0, sp, #16
   b6826:	f003 fff5 	bl	ba814 <_ZN6StringC1ERKS_>
         snprintf(buf, sizeof(buf), msg+"     CONECTAR A:");
   b682a:	4955      	ldr	r1, [pc, #340]	; (b6980 <_Z10showBitmapii6String+0x290>)
   b682c:	a804      	add	r0, sp, #16
   b682e:	f004 f844 	bl	ba8ba <_ZplRK15StringSumHelperPKc>
   b6832:	2140      	movs	r1, #64	; 0x40
   b6834:	6802      	ldr	r2, [r0, #0]
   b6836:	484d      	ldr	r0, [pc, #308]	; (b696c <_Z10showBitmapii6String+0x27c>)
   b6838:	f003 fe08 	bl	ba44c <snprintf>
class StringSumHelper : public String
   b683c:	a804      	add	r0, sp, #16
   b683e:	f003 ff7b 	bl	ba738 <_ZN6StringD1Ev>
         display.fillTriangle(60, 20, 30, 100, 90, 100,WHITE);
   b6842:	2364      	movs	r3, #100	; 0x64
   b6844:	225a      	movs	r2, #90	; 0x5a
   b6846:	2101      	movs	r1, #1
   b6848:	e9cd 3200 	strd	r3, r2, [sp]
   b684c:	e9cd 3102 	strd	r3, r1, [sp, #8]
   b6850:	2214      	movs	r2, #20
   b6852:	231e      	movs	r3, #30
   b6854:	213c      	movs	r1, #60	; 0x3c
   b6856:	e7c6      	b.n	b67e6 <_Z10showBitmapii6String+0xf6>
	StringSumHelper(const String &s) : String(s) {}
   b6858:	4621      	mov	r1, r4
   b685a:	a804      	add	r0, sp, #16
   b685c:	f003 ffda 	bl	ba814 <_ZN6StringC1ERKS_>
         snprintf(buf, sizeof(buf), msg+"     CONECTAR A:");
   b6860:	4947      	ldr	r1, [pc, #284]	; (b6980 <_Z10showBitmapii6String+0x290>)
   b6862:	a804      	add	r0, sp, #16
   b6864:	f004 f829 	bl	ba8ba <_ZplRK15StringSumHelperPKc>
   b6868:	2140      	movs	r1, #64	; 0x40
   b686a:	6802      	ldr	r2, [r0, #0]
   b686c:	483f      	ldr	r0, [pc, #252]	; (b696c <_Z10showBitmapii6String+0x27c>)
   b686e:	f003 fded 	bl	ba44c <snprintf>
         display.fillTriangle(60, 20, 52, 40, 67, 40,WHITE);
   b6872:	2428      	movs	r4, #40	; 0x28
   b6874:	2601      	movs	r6, #1
   b6876:	2543      	movs	r5, #67	; 0x43
class StringSumHelper : public String
   b6878:	a804      	add	r0, sp, #16
   b687a:	f003 ff5d 	bl	ba738 <_ZN6StringD1Ev>
   b687e:	2334      	movs	r3, #52	; 0x34
   b6880:	2214      	movs	r2, #20
   b6882:	e9cd 4602 	strd	r4, r6, [sp, #8]
   b6886:	e9cd 4500 	strd	r4, r5, [sp]
   b688a:	4834      	ldr	r0, [pc, #208]	; (b695c <_Z10showBitmapii6String+0x26c>)
   b688c:	213c      	movs	r1, #60	; 0x3c
   b688e:	f001 fda9 	bl	b83e4 <_ZN12Adafruit_GFX12fillTriangleEsssssst>
         display.fillTriangle(60, 60, 52, 40, 67, 40,WHITE);
   b6892:	e9cd 4602 	strd	r4, r6, [sp, #8]
   b6896:	e9cd 4500 	strd	r4, r5, [sp]
   b689a:	2334      	movs	r3, #52	; 0x34
   b689c:	223c      	movs	r2, #60	; 0x3c
   b689e:	e7d9      	b.n	b6854 <_Z10showBitmapii6String+0x164>
	StringSumHelper(const String &s) : String(s) {}
   b68a0:	4621      	mov	r1, r4
   b68a2:	a804      	add	r0, sp, #16
   b68a4:	f003 ffb6 	bl	ba814 <_ZN6StringC1ERKS_>
         snprintf(buf, sizeof(buf), msg+"     CONECTAR A:");
   b68a8:	4935      	ldr	r1, [pc, #212]	; (b6980 <_Z10showBitmapii6String+0x290>)
   b68aa:	a804      	add	r0, sp, #16
   b68ac:	f004 f805 	bl	ba8ba <_ZplRK15StringSumHelperPKc>
   b68b0:	2140      	movs	r1, #64	; 0x40
   b68b2:	6802      	ldr	r2, [r0, #0]
   b68b4:	482d      	ldr	r0, [pc, #180]	; (b696c <_Z10showBitmapii6String+0x27c>)
   b68b6:	f003 fdc9 	bl	ba44c <snprintf>
class StringSumHelper : public String
   b68ba:	a804      	add	r0, sp, #16
   b68bc:	f003 ff3c 	bl	ba738 <_ZN6StringD1Ev>
         display.fillCircle(60,50,15,WHITE);
   b68c0:	2301      	movs	r3, #1
   b68c2:	9300      	str	r3, [sp, #0]
   b68c4:	2232      	movs	r2, #50	; 0x32
   b68c6:	230f      	movs	r3, #15
   b68c8:	213c      	movs	r1, #60	; 0x3c
   b68ca:	4824      	ldr	r0, [pc, #144]	; (b695c <_Z10showBitmapii6String+0x26c>)
   b68cc:	f001 fd5f 	bl	b838e <_ZN12Adafruit_GFX10fillCircleEssst>
         display.fillRect(10,50,90,40,BLACK);
   b68d0:	2328      	movs	r3, #40	; 0x28
   b68d2:	2200      	movs	r2, #0
   b68d4:	e9cd 3200 	strd	r3, r2, [sp]
   b68d8:	210a      	movs	r1, #10
   b68da:	235a      	movs	r3, #90	; 0x5a
   b68dc:	2232      	movs	r2, #50	; 0x32
   b68de:	e79c      	b.n	b681a <_Z10showBitmapii6String+0x12a>
         snprintf(buf, sizeof(buf), "     CONECTAR A:");
   b68e0:	4927      	ldr	r1, [pc, #156]	; (b6980 <_Z10showBitmapii6String+0x290>)
   b68e2:	4822      	ldr	r0, [pc, #136]	; (b696c <_Z10showBitmapii6String+0x27c>)
   b68e4:	f004 fe32 	bl	bb54c <strcpy>
         display.fillCircle(60,40,15,WHITE);
   b68e8:	2301      	movs	r3, #1
   b68ea:	9300      	str	r3, [sp, #0]
   b68ec:	481b      	ldr	r0, [pc, #108]	; (b695c <_Z10showBitmapii6String+0x26c>)
   b68ee:	230f      	movs	r3, #15
   b68f0:	2228      	movs	r2, #40	; 0x28
   b68f2:	213c      	movs	r1, #60	; 0x3c
   b68f4:	f001 fd4b 	bl	b838e <_ZN12Adafruit_GFX10fillCircleEssst>
         break;
   b68f8:	e72f      	b.n	b675a <_Z10showBitmapii6String+0x6a>
         snprintf(buf, sizeof(buf), "YA CONECTADO");
   b68fa:	4922      	ldr	r1, [pc, #136]	; (b6984 <_Z10showBitmapii6String+0x294>)
   b68fc:	e71a      	b.n	b6734 <_Z10showBitmapii6String+0x44>
      switch (id2)
   b68fe:	2d06      	cmp	r5, #6
   b6900:	f63f af22 	bhi.w	b6748 <_Z10showBitmapii6String+0x58>
   b6904:	e8df f005 	tbb	[pc, r5]
   b6908:	0a080604 	.word	0x0a080604
   b690c:	1d0c      	.short	0x1d0c
   b690e:	1f          	.byte	0x1f
   b690f:	00          	.byte	0x00
         snprintf(buf, sizeof(buf), "Tarjeta invalida para este modo");
   b6910:	491d      	ldr	r1, [pc, #116]	; (b6988 <_Z10showBitmapii6String+0x298>)
   b6912:	e70f      	b.n	b6734 <_Z10showBitmapii6String+0x44>
         snprintf(buf, sizeof(buf), "Borrado invalido para este modo");
   b6914:	491d      	ldr	r1, [pc, #116]	; (b698c <_Z10showBitmapii6String+0x29c>)
   b6916:	e70d      	b.n	b6734 <_Z10showBitmapii6String+0x44>
         snprintf(buf, sizeof(buf), "Orden de tarjetas invalido");
   b6918:	491d      	ldr	r1, [pc, #116]	; (b6990 <_Z10showBitmapii6String+0x2a0>)
   b691a:	e70b      	b.n	b6734 <_Z10showBitmapii6String+0x44>
         snprintf(buf, sizeof(buf), "Puerto no disponible");
   b691c:	491d      	ldr	r1, [pc, #116]	; (b6994 <_Z10showBitmapii6String+0x2a4>)
   b691e:	e709      	b.n	b6734 <_Z10showBitmapii6String+0x44>
	StringSumHelper(const char *p) : String(p) {}
   b6920:	491d      	ldr	r1, [pc, #116]	; (b6998 <_Z10showBitmapii6String+0x2a8>)
   b6922:	a804      	add	r0, sp, #16
   b6924:	f003 ff53 	bl	ba7ce <_ZN6StringC1EPK19__FlashStringHelper>
         snprintf(buf, sizeof(buf), "Play no disponible"+msg);
   b6928:	4621      	mov	r1, r4
   b692a:	a804      	add	r0, sp, #16
   b692c:	f003 ffb9 	bl	ba8a2 <_ZplRK15StringSumHelperRK6String>
   b6930:	2140      	movs	r1, #64	; 0x40
   b6932:	6802      	ldr	r2, [r0, #0]
   b6934:	480d      	ldr	r0, [pc, #52]	; (b696c <_Z10showBitmapii6String+0x27c>)
   b6936:	f003 fd89 	bl	ba44c <snprintf>
class StringSumHelper : public String
   b693a:	a804      	add	r0, sp, #16
   b693c:	f003 fefc 	bl	ba738 <_ZN6StringD1Ev>
         break;
   b6940:	e70b      	b.n	b675a <_Z10showBitmapii6String+0x6a>
         snprintf(buf, sizeof(buf), "Sensor no disponible (en uso)");
   b6942:	4916      	ldr	r1, [pc, #88]	; (b699c <_Z10showBitmapii6String+0x2ac>)
   b6944:	e6f6      	b.n	b6734 <_Z10showBitmapii6String+0x44>
         snprintf(buf, sizeof(buf), "Actuador no disponible (en uso)");
   b6946:	4916      	ldr	r1, [pc, #88]	; (b69a0 <_Z10showBitmapii6String+0x2b0>)
   b6948:	e6f4      	b.n	b6734 <_Z10showBitmapii6String+0x44>
      switch (id2)
   b694a:	2d00      	cmp	r5, #0
   b694c:	f47f aefc 	bne.w	b6748 <_Z10showBitmapii6String+0x58>
         snprintf(buf, sizeof(buf), msg);
   b6950:	6822      	ldr	r2, [r4, #0]
   b6952:	4806      	ldr	r0, [pc, #24]	; (b696c <_Z10showBitmapii6String+0x27c>)
   b6954:	2140      	movs	r1, #64	; 0x40
   b6956:	f003 fd79 	bl	ba44c <snprintf>
         break;
   b695a:	e6fe      	b.n	b675a <_Z10showBitmapii6String+0x6a>
   b695c:	2003d34c 	.word	0x2003d34c
   b6960:	2003c74d 	.word	0x2003c74d
   b6964:	2003dc30 	.word	0x2003dc30
   b6968:	000bbb4f 	.word	0x000bbb4f
   b696c:	2003d301 	.word	0x2003d301
   b6970:	000bbb5b 	.word	0x000bbb5b
   b6974:	000bbb69 	.word	0x000bbb69
   b6978:	000bbb75 	.word	0x000bbb75
   b697c:	000bbb82 	.word	0x000bbb82
   b6980:	000bbb98 	.word	0x000bbb98
   b6984:	000bbba9 	.word	0x000bbba9
   b6988:	000bbbb6 	.word	0x000bbbb6
   b698c:	000bbbd6 	.word	0x000bbbd6
   b6990:	000bbbf6 	.word	0x000bbbf6
   b6994:	000bbc11 	.word	0x000bbc11
   b6998:	000bbc26 	.word	0x000bbc26
   b699c:	000bbc39 	.word	0x000bbc39
   b69a0:	000bbc57 	.word	0x000bbc57

000b69a4 <_Z8showPortii>:
void showPort(int id, int puerto ) {
   b69a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   if (tagInfo[2]==0) { // A0, A2, A4
   b69a6:	4b24      	ldr	r3, [pc, #144]	; (b6a38 <_Z8showPortii+0x94>)
   b69a8:	689b      	ldr	r3, [r3, #8]
   b69aa:	bb4b      	cbnz	r3, b6a00 <_Z8showPortii+0x5c>
      switch (puerto)
   b69ac:	2902      	cmp	r1, #2
   b69ae:	d011      	beq.n	b69d4 <_Z8showPortii+0x30>
   b69b0:	2904      	cmp	r1, #4
   b69b2:	d016      	beq.n	b69e2 <_Z8showPortii+0x3e>
   b69b4:	b9e1      	cbnz	r1, b69f0 <_Z8showPortii+0x4c>
         showBitmap(1,3,"");
   b69b6:	4921      	ldr	r1, [pc, #132]	; (b6a3c <_Z8showPortii+0x98>)
   b69b8:	4668      	mov	r0, sp
   b69ba:	f003 ff08 	bl	ba7ce <_ZN6StringC1EPK19__FlashStringHelper>
   b69be:	466a      	mov	r2, sp
   b69c0:	2103      	movs	r1, #3
         showBitmap(1,2,"");
   b69c2:	2001      	movs	r0, #1
         showBitmap(2,3,""); //PUERTO NO DISPO.
   b69c4:	f7ff fe94 	bl	b66f0 <_Z10showBitmapii6String>
   b69c8:	4668      	mov	r0, sp
   b69ca:	f003 feb5 	bl	ba738 <_ZN6StringD1Ev>
}
   b69ce:	b005      	add	sp, #20
   b69d0:	f85d fb04 	ldr.w	pc, [sp], #4
         showBitmap(1,4,"");
   b69d4:	4919      	ldr	r1, [pc, #100]	; (b6a3c <_Z8showPortii+0x98>)
   b69d6:	4668      	mov	r0, sp
   b69d8:	f003 fef9 	bl	ba7ce <_ZN6StringC1EPK19__FlashStringHelper>
   b69dc:	466a      	mov	r2, sp
   b69de:	2104      	movs	r1, #4
   b69e0:	e7ef      	b.n	b69c2 <_Z8showPortii+0x1e>
         showBitmap(1,5,"");
   b69e2:	4916      	ldr	r1, [pc, #88]	; (b6a3c <_Z8showPortii+0x98>)
   b69e4:	4668      	mov	r0, sp
   b69e6:	f003 fef2 	bl	ba7ce <_ZN6StringC1EPK19__FlashStringHelper>
   b69ea:	466a      	mov	r2, sp
   b69ec:	2105      	movs	r1, #5
   b69ee:	e7e8      	b.n	b69c2 <_Z8showPortii+0x1e>
         showBitmap(2,3,""); //PUERTO NO DISPO.
   b69f0:	4912      	ldr	r1, [pc, #72]	; (b6a3c <_Z8showPortii+0x98>)
   b69f2:	4668      	mov	r0, sp
         showBitmap(2,3,""); //PUERTO NO DISPO.
   b69f4:	f003 feeb 	bl	ba7ce <_ZN6StringC1EPK19__FlashStringHelper>
   b69f8:	466a      	mov	r2, sp
   b69fa:	2103      	movs	r1, #3
   b69fc:	2002      	movs	r0, #2
   b69fe:	e7e1      	b.n	b69c4 <_Z8showPortii+0x20>
      switch (puerto)
   b6a00:	2904      	cmp	r1, #4
   b6a02:	d00a      	beq.n	b6a1a <_Z8showPortii+0x76>
   b6a04:	2906      	cmp	r1, #6
   b6a06:	d00f      	beq.n	b6a28 <_Z8showPortii+0x84>
   b6a08:	2902      	cmp	r1, #2
         showBitmap(2,3,""); //PUERTO NO DISPO.
   b6a0a:	4668      	mov	r0, sp
   b6a0c:	490b      	ldr	r1, [pc, #44]	; (b6a3c <_Z8showPortii+0x98>)
      switch (puerto)
   b6a0e:	d1f1      	bne.n	b69f4 <_Z8showPortii+0x50>
         showBitmap(1,0,"");
   b6a10:	f003 fedd 	bl	ba7ce <_ZN6StringC1EPK19__FlashStringHelper>
   b6a14:	466a      	mov	r2, sp
   b6a16:	2100      	movs	r1, #0
   b6a18:	e7d3      	b.n	b69c2 <_Z8showPortii+0x1e>
         showBitmap(1,1,"");
   b6a1a:	4908      	ldr	r1, [pc, #32]	; (b6a3c <_Z8showPortii+0x98>)
   b6a1c:	4668      	mov	r0, sp
   b6a1e:	f003 fed6 	bl	ba7ce <_ZN6StringC1EPK19__FlashStringHelper>
   b6a22:	466a      	mov	r2, sp
   b6a24:	2101      	movs	r1, #1
   b6a26:	e7cc      	b.n	b69c2 <_Z8showPortii+0x1e>
         showBitmap(1,2,"");
   b6a28:	4904      	ldr	r1, [pc, #16]	; (b6a3c <_Z8showPortii+0x98>)
   b6a2a:	4668      	mov	r0, sp
   b6a2c:	f003 fecf 	bl	ba7ce <_ZN6StringC1EPK19__FlashStringHelper>
   b6a30:	466a      	mov	r2, sp
   b6a32:	2102      	movs	r1, #2
   b6a34:	e7c5      	b.n	b69c2 <_Z8showPortii+0x1e>
   b6a36:	bf00      	nop
   b6a38:	2003c6a4 	.word	0x2003c6a4
   b6a3c:	000bb89e 	.word	0x000bb89e

000b6a40 <_Z13borradoBLOQUEi>:
   switch (modo)
   b6a40:	2801      	cmp	r0, #1
{
   b6a42:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   switch (modo)
   b6a44:	d003      	beq.n	b6a4e <_Z13borradoBLOQUEi+0xe>
   b6a46:	2802      	cmp	r0, #2
   b6a48:	d03c      	beq.n	b6ac4 <_Z13borradoBLOQUEi+0x84>
}
   b6a4a:	b004      	add	sp, #16
   b6a4c:	bd70      	pop	{r4, r5, r6, pc}
      if (numBloque==0) {
   b6a4e:	4b37      	ldr	r3, [pc, #220]	; (b6b2c <_Z13borradoBLOQUEi+0xec>)
   b6a50:	681c      	ldr	r4, [r3, #0]
   b6a52:	b974      	cbnz	r4, b6a72 <_Z13borradoBLOQUEi+0x32>
         borradoALL(1);
   b6a54:	f7fe febe 	bl	b57d4 <_Z10borradoALLi>
         showBitmap(3,0,"Borrado de bloque realizado");
   b6a58:	4935      	ldr	r1, [pc, #212]	; (b6b30 <_Z13borradoBLOQUEi+0xf0>)
   b6a5a:	4668      	mov	r0, sp
   b6a5c:	f003 feb7 	bl	ba7ce <_ZN6StringC1EPK19__FlashStringHelper>
   b6a60:	466a      	mov	r2, sp
   b6a62:	2100      	movs	r1, #0
   b6a64:	2003      	movs	r0, #3
   b6a66:	f7ff fe43 	bl	b66f0 <_Z10showBitmapii6String>
   b6a6a:	4668      	mov	r0, sp
   b6a6c:	f003 fe64 	bl	ba738 <_ZN6StringD1Ev>
   b6a70:	e7eb      	b.n	b6a4a <_Z13borradoBLOQUEi+0xa>
      } else if (numBloque==1) {
   b6a72:	2c01      	cmp	r4, #1
   b6a74:	d11e      	bne.n	b6ab4 <_Z13borradoBLOQUEi+0x74>
         IF_pasado = false;
   b6a76:	2200      	movs	r2, #0
         numBloque = 0;
   b6a78:	601a      	str	r2, [r3, #0]
         IF_pasado = false;
   b6a7a:	492e      	ldr	r1, [pc, #184]	; (b6b34 <_Z13borradoBLOQUEi+0xf4>)
         THEN_pasado = true;           //Para permitir la ejecucion del primer bloque
   b6a7c:	4b2e      	ldr	r3, [pc, #184]	; (b6b38 <_Z13borradoBLOQUEi+0xf8>)
         IF_pasado = false;
   b6a7e:	700a      	strb	r2, [r1, #0]
         THEN_pasado = true;           //Para permitir la ejecucion del primer bloque
   b6a80:	701c      	strb	r4, [r3, #0]
         if (puertoAnalogico == -1){   
   b6a82:	4a2e      	ldr	r2, [pc, #184]	; (b6b3c <_Z13borradoBLOQUEi+0xfc>)
         numActuadoresBloque = 1;      //Para permitir iniciar el segundo bloque
   b6a84:	4b2e      	ldr	r3, [pc, #184]	; (b6b40 <_Z13borradoBLOQUEi+0x100>)
         puertoAnalogico -= puertoAnalogico_bloque;
   b6a86:	482f      	ldr	r0, [pc, #188]	; (b6b44 <_Z13borradoBLOQUEi+0x104>)
         numActuadoresBloque = 1;      //Para permitir iniciar el segundo bloque
   b6a88:	601c      	str	r4, [r3, #0]
         if (puertoAnalogico == -1){   
   b6a8a:	6813      	ldr	r3, [r2, #0]
         puertoAnalogico -= puertoAnalogico_bloque;
   b6a8c:	6800      	ldr	r0, [r0, #0]
         if (puertoAnalogico == -1){   
   b6a8e:	3301      	adds	r3, #1
            puertoAnalogico=3;
   b6a90:	bf04      	itt	eq
   b6a92:	2303      	moveq	r3, #3
   b6a94:	6013      	streq	r3, [r2, #0]
         if (puertoDigital == -1){
   b6a96:	4b2c      	ldr	r3, [pc, #176]	; (b6b48 <_Z13borradoBLOQUEi+0x108>)
   b6a98:	6819      	ldr	r1, [r3, #0]
   b6a9a:	3101      	adds	r1, #1
            puertoDigital=6;
   b6a9c:	bf04      	itt	eq
   b6a9e:	2106      	moveq	r1, #6
   b6aa0:	6019      	streq	r1, [r3, #0]
         puertoAnalogico -= puertoAnalogico_bloque;
   b6aa2:	6811      	ldr	r1, [r2, #0]
   b6aa4:	1a09      	subs	r1, r1, r0
   b6aa6:	6011      	str	r1, [r2, #0]
         puertoDigital -= puertoDigital_bloque;
   b6aa8:	4928      	ldr	r1, [pc, #160]	; (b6b4c <_Z13borradoBLOQUEi+0x10c>)
   b6aaa:	681a      	ldr	r2, [r3, #0]
   b6aac:	6809      	ldr	r1, [r1, #0]
   b6aae:	1a52      	subs	r2, r2, r1
   b6ab0:	601a      	str	r2, [r3, #0]
   b6ab2:	e7d1      	b.n	b6a58 <_Z13borradoBLOQUEi+0x18>
         Serial.println("Nada que borrar");
   b6ab4:	f004 f9a8 	bl	bae08 <_Z16_fetch_usbserialv>
   b6ab8:	4925      	ldr	r1, [pc, #148]	; (b6b50 <_Z13borradoBLOQUEi+0x110>)
}
   b6aba:	b004      	add	sp, #16
   b6abc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
         Serial.println("Nada que borrar");
   b6ac0:	f003 bf53 	b.w	ba96a <_ZN5Print7printlnEPKc>
      if (bucle) {
   b6ac4:	4e23      	ldr	r6, [pc, #140]	; (b6b54 <_Z13borradoBLOQUEi+0x114>)
         posicion = posicion - (tam_bucle+1);
   b6ac6:	4a24      	ldr	r2, [pc, #144]	; (b6b58 <_Z13borradoBLOQUEi+0x118>)
      if (bucle) {
   b6ac8:	7834      	ldrb	r4, [r6, #0]
         posicion = posicion - (tam_bucle+1);
   b6aca:	6813      	ldr	r3, [r2, #0]
   b6acc:	4d23      	ldr	r5, [pc, #140]	; (b6b5c <_Z13borradoBLOQUEi+0x11c>)
      if (bucle) {
   b6ace:	b19c      	cbz	r4, b6af8 <_Z13borradoBLOQUEi+0xb8>
         posicion = posicion - (tam_bucle+1);
   b6ad0:	6829      	ldr	r1, [r5, #0]
   b6ad2:	3101      	adds	r1, #1
   b6ad4:	1a5b      	subs	r3, r3, r1
         showBitmap(3,0,"Borrado de loop realizado");
   b6ad6:	4668      	mov	r0, sp
   b6ad8:	4921      	ldr	r1, [pc, #132]	; (b6b60 <_Z13borradoBLOQUEi+0x120>)
         posicion = posicion - (tam_bucle+1);
   b6ada:	6013      	str	r3, [r2, #0]
         showBitmap(3,0,"Borrado de loop realizado");
   b6adc:	f003 fe77 	bl	ba7ce <_ZN6StringC1EPK19__FlashStringHelper>
   b6ae0:	466a      	mov	r2, sp
   b6ae2:	2100      	movs	r1, #0
         showBitmap(3,0,"Nada que borrar.");
   b6ae4:	2003      	movs	r0, #3
   b6ae6:	f7ff fe03 	bl	b66f0 <_Z10showBitmapii6String>
   b6aea:	4668      	mov	r0, sp
   b6aec:	f003 fe24 	bl	ba738 <_ZN6StringD1Ev>
      bucle = false;
   b6af0:	2300      	movs	r3, #0
   b6af2:	7033      	strb	r3, [r6, #0]
      tam_bucle = 0;
   b6af4:	602b      	str	r3, [r5, #0]
}
   b6af6:	e7a8      	b.n	b6a4a <_Z13borradoBLOQUEi+0xa>
      } else if ( notas[posicion-1] == -2 ) {
   b6af8:	481a      	ldr	r0, [pc, #104]	; (b6b64 <_Z13borradoBLOQUEi+0x124>)
   b6afa:	1e59      	subs	r1, r3, #1
   b6afc:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
   b6b00:	3002      	adds	r0, #2
   b6b02:	d10c      	bne.n	b6b1e <_Z13borradoBLOQUEi+0xde>
         posicion = posicion - (duraciones[posicion-1]+2);
   b6b04:	4818      	ldr	r0, [pc, #96]	; (b6b68 <_Z13borradoBLOQUEi+0x128>)
   b6b06:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
   b6b0a:	3102      	adds	r1, #2
   b6b0c:	1a5b      	subs	r3, r3, r1
         showBitmap(3,0,"Borrado de loop realizado");
   b6b0e:	4914      	ldr	r1, [pc, #80]	; (b6b60 <_Z13borradoBLOQUEi+0x120>)
         posicion = posicion - (duraciones[posicion-1]+2);
   b6b10:	6013      	str	r3, [r2, #0]
         showBitmap(3,0,"Nada que borrar.");
   b6b12:	4668      	mov	r0, sp
   b6b14:	f003 fe5b 	bl	ba7ce <_ZN6StringC1EPK19__FlashStringHelper>
   b6b18:	466a      	mov	r2, sp
   b6b1a:	4621      	mov	r1, r4
   b6b1c:	e7e2      	b.n	b6ae4 <_Z13borradoBLOQUEi+0xa4>
         Serial.println("Nada que borrar.");
   b6b1e:	f004 f973 	bl	bae08 <_Z16_fetch_usbserialv>
   b6b22:	4912      	ldr	r1, [pc, #72]	; (b6b6c <_Z13borradoBLOQUEi+0x12c>)
   b6b24:	f003 ff21 	bl	ba96a <_ZN5Print7printlnEPKc>
         showBitmap(3,0,"Nada que borrar.");
   b6b28:	4910      	ldr	r1, [pc, #64]	; (b6b6c <_Z13borradoBLOQUEi+0x12c>)
   b6b2a:	e7f2      	b.n	b6b12 <_Z13borradoBLOQUEi+0xd2>
   b6b2c:	2003c69c 	.word	0x2003c69c
   b6b30:	000bbc77 	.word	0x000bbc77
   b6b34:	2003c73d 	.word	0x2003c73d
   b6b38:	2003c74c 	.word	0x2003c74c
   b6b3c:	2003da3c 	.word	0x2003da3c
   b6b40:	2003da24 	.word	0x2003da24
   b6b44:	2003da40 	.word	0x2003da40
   b6b48:	2003c6a0 	.word	0x2003c6a0
   b6b4c:	2003da44 	.word	0x2003da44
   b6b50:	000bbc93 	.word	0x000bbc93
   b6b54:	2003d300 	.word	0x2003d300
   b6b58:	2003da34 	.word	0x2003da34
   b6b5c:	2003dc38 	.word	0x2003dc38
   b6b60:	000bbca3 	.word	0x000bbca3
   b6b64:	2003d704 	.word	0x2003d704
   b6b68:	2003d3bc 	.word	0x2003d3bc
   b6b6c:	000bbcbd 	.word	0x000bbcbd

000b6b70 <_Z10reproducirv>:
void reproducir() {
   b6b70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   if (!bucle) {
   b6b74:	4b1e      	ldr	r3, [pc, #120]	; (b6bf0 <_Z10reproducirv+0x80>)
   b6b76:	781c      	ldrb	r4, [r3, #0]
   b6b78:	bb34      	cbnz	r4, b6bc8 <_Z10reproducirv+0x58>
      while ( i < posicion) {
   b6b7a:	f8df a08c 	ldr.w	sl, [pc, #140]	; b6c08 <_Z10reproducirv+0x98>
         Serial.printlnf("%d - %d", notas[i], duraciones[i]);
   b6b7e:	4e1d      	ldr	r6, [pc, #116]	; (b6bf4 <_Z10reproducirv+0x84>)
   b6b80:	4f1d      	ldr	r7, [pc, #116]	; (b6bf8 <_Z10reproducirv+0x88>)
      while ( i < posicion) {
   b6b82:	f8da 3000 	ldr.w	r3, [sl]
   b6b86:	42a3      	cmp	r3, r4
   b6b88:	dd2f      	ble.n	b6bea <_Z10reproducirv+0x7a>
         Serial.printlnf("%d - %d", notas[i], duraciones[i]);
   b6b8a:	f004 f93d 	bl	bae08 <_Z16_fetch_usbserialv>
   b6b8e:	f857 2024 	ldr.w	r2, [r7, r4, lsl #2]
   b6b92:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
   b6b96:	4919      	ldr	r1, [pc, #100]	; (b6bfc <_Z10reproducirv+0x8c>)
   b6b98:	f7fd ffad 	bl	b4af6 <_ZN5Print8printlnfEPKcz>
         if ( notas[i] == -1 ) {
   b6b9c:	f857 0024 	ldr.w	r0, [r7, r4, lsl #2]
   b6ba0:	1c42      	adds	r2, r0, #1
   b6ba2:	d105      	bne.n	b6bb0 <_Z10reproducirv+0x40>
            n = duraciones[i];
   b6ba4:	f856 8024 	ldr.w	r8, [r6, r4, lsl #2]
            inicio=i;
   b6ba8:	46a1      	mov	r9, r4
            iteracion = 0;            
   b6baa:	2500      	movs	r5, #0
         i++;
   b6bac:	3401      	adds	r4, #1
      while ( i < posicion) {
   b6bae:	e7e8      	b.n	b6b82 <_Z10reproducirv+0x12>
         } else if ( notas[i] == -2 ) {
   b6bb0:	1c83      	adds	r3, r0, #2
   b6bb2:	d104      	bne.n	b6bbe <_Z10reproducirv+0x4e>
            iteracion++;
   b6bb4:	3501      	adds	r5, #1
               i = inicio;
   b6bb6:	45a8      	cmp	r8, r5
   b6bb8:	bfc8      	it	gt
   b6bba:	464c      	movgt	r4, r9
   b6bbc:	e7f6      	b.n	b6bac <_Z10reproducirv+0x3c>
            reproducirNOTA(notas[i],duraciones[i]);
   b6bbe:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
   b6bc2:	f7fe fef5 	bl	b59b0 <_Z14reproducirNOTAii>
   b6bc6:	e7f1      	b.n	b6bac <_Z10reproducirv+0x3c>
      Serial.println("Finaliza el bucle antes de reproducir");
   b6bc8:	f004 f91e 	bl	bae08 <_Z16_fetch_usbserialv>
   b6bcc:	490c      	ldr	r1, [pc, #48]	; (b6c00 <_Z10reproducirv+0x90>)
   b6bce:	f003 fecc 	bl	ba96a <_ZN5Print7printlnEPKc>
      showBitmap(2,4,"");
   b6bd2:	490c      	ldr	r1, [pc, #48]	; (b6c04 <_Z10reproducirv+0x94>)
   b6bd4:	4668      	mov	r0, sp
   b6bd6:	f003 fdfa 	bl	ba7ce <_ZN6StringC1EPK19__FlashStringHelper>
   b6bda:	2002      	movs	r0, #2
   b6bdc:	466a      	mov	r2, sp
   b6bde:	2104      	movs	r1, #4
   b6be0:	f7ff fd86 	bl	b66f0 <_Z10showBitmapii6String>
   b6be4:	4668      	mov	r0, sp
   b6be6:	f003 fda7 	bl	ba738 <_ZN6StringD1Ev>
}
   b6bea:	b004      	add	sp, #16
   b6bec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b6bf0:	2003d300 	.word	0x2003d300
   b6bf4:	2003d3bc 	.word	0x2003d3bc
   b6bf8:	2003d704 	.word	0x2003d704
   b6bfc:	000bbcce 	.word	0x000bbcce
   b6c00:	000bbcd6 	.word	0x000bbcd6
   b6c04:	000bb89e 	.word	0x000bb89e
   b6c08:	2003da34 	.word	0x2003da34

000b6c0c <_Z10cambioModoi>:
{
   b6c0c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   if (modo == 0 ) {
   b6c0e:	4604      	mov	r4, r0
   b6c10:	b9e0      	cbnz	r0, b6c4c <_Z10cambioModoi+0x40>
      Serial.println("Modo BASICO detectado");
   b6c12:	f004 f8f9 	bl	bae08 <_Z16_fetch_usbserialv>
   b6c16:	4921      	ldr	r1, [pc, #132]	; (b6c9c <_Z10cambioModoi+0x90>)
   b6c18:	f003 fea7 	bl	ba96a <_ZN5Print7printlnEPKc>
      MODE = 0;
   b6c1c:	4b20      	ldr	r3, [pc, #128]	; (b6ca0 <_Z10cambioModoi+0x94>)
      showBitmap(3,0,"Iniciando modo BASICO...");
   b6c1e:	4921      	ldr	r1, [pc, #132]	; (b6ca4 <_Z10cambioModoi+0x98>)
      MODE = 0;
   b6c20:	701c      	strb	r4, [r3, #0]
      showBitmap(3,0,"Iniciando modo MUSICA...");
   b6c22:	4668      	mov	r0, sp
   b6c24:	f003 fdd3 	bl	ba7ce <_ZN6StringC1EPK19__FlashStringHelper>
   b6c28:	466a      	mov	r2, sp
   b6c2a:	2100      	movs	r1, #0
   b6c2c:	2003      	movs	r0, #3
      showBitmap(3,0,"Iniciando modo EXPLORA...");
   b6c2e:	f7ff fd5f 	bl	b66f0 <_Z10showBitmapii6String>
   b6c32:	4668      	mov	r0, sp
   b6c34:	f003 fd80 	bl	ba738 <_ZN6StringD1Ev>
   EEPROM.put(0, MODE);
   b6c38:	f004 fbce 	bl	bb3d8 <_Z21__fetch_global_EEPROMv>
   b6c3c:	4918      	ldr	r1, [pc, #96]	; (b6ca0 <_Z10cambioModoi+0x94>)
   b6c3e:	2201      	movs	r2, #1
   b6c40:	2000      	movs	r0, #0
}
   b6c42:	b004      	add	sp, #16
   b6c44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b6c48:	f003 ba14 	b.w	ba074 <HAL_EEPROM_Put>
   } else if (modo == 1) {
   b6c4c:	2801      	cmp	r0, #1
   b6c4e:	d108      	bne.n	b6c62 <_Z10cambioModoi+0x56>
      Serial.println("Modo AVANZADO detectado");
   b6c50:	f004 f8da 	bl	bae08 <_Z16_fetch_usbserialv>
   b6c54:	4914      	ldr	r1, [pc, #80]	; (b6ca8 <_Z10cambioModoi+0x9c>)
   b6c56:	f003 fe88 	bl	ba96a <_ZN5Print7printlnEPKc>
      MODE = 1;
   b6c5a:	4b11      	ldr	r3, [pc, #68]	; (b6ca0 <_Z10cambioModoi+0x94>)
      showBitmap(3,0,"Iniciando modo AVANZADO...");
   b6c5c:	4913      	ldr	r1, [pc, #76]	; (b6cac <_Z10cambioModoi+0xa0>)
      MODE = 1;
   b6c5e:	701c      	strb	r4, [r3, #0]
      showBitmap(3,0,"Iniciando modo AVANZADO...");
   b6c60:	e7df      	b.n	b6c22 <_Z10cambioModoi+0x16>
   } else if (modo == 2) {
   b6c62:	2802      	cmp	r0, #2
   b6c64:	d108      	bne.n	b6c78 <_Z10cambioModoi+0x6c>
      Serial.println("Modo MUSICA detectado");
   b6c66:	f004 f8cf 	bl	bae08 <_Z16_fetch_usbserialv>
   b6c6a:	4911      	ldr	r1, [pc, #68]	; (b6cb0 <_Z10cambioModoi+0xa4>)
   b6c6c:	f003 fe7d 	bl	ba96a <_ZN5Print7printlnEPKc>
      MODE = 2;
   b6c70:	4b0b      	ldr	r3, [pc, #44]	; (b6ca0 <_Z10cambioModoi+0x94>)
      showBitmap(3,0,"Iniciando modo MUSICA...");
   b6c72:	4910      	ldr	r1, [pc, #64]	; (b6cb4 <_Z10cambioModoi+0xa8>)
      MODE = 2;
   b6c74:	701c      	strb	r4, [r3, #0]
      showBitmap(3,0,"Iniciando modo MUSICA...");
   b6c76:	e7d4      	b.n	b6c22 <_Z10cambioModoi+0x16>
   } else if (modo == 3) {
   b6c78:	2803      	cmp	r0, #3
   b6c7a:	d1dd      	bne.n	b6c38 <_Z10cambioModoi+0x2c>
      Serial.println("Modo EXPLORA detectado");
   b6c7c:	f004 f8c4 	bl	bae08 <_Z16_fetch_usbserialv>
   b6c80:	490d      	ldr	r1, [pc, #52]	; (b6cb8 <_Z10cambioModoi+0xac>)
   b6c82:	f003 fe72 	bl	ba96a <_ZN5Print7printlnEPKc>
      MODE = 3;
   b6c86:	4b06      	ldr	r3, [pc, #24]	; (b6ca0 <_Z10cambioModoi+0x94>)
      showBitmap(3,0,"Iniciando modo EXPLORA...");
   b6c88:	490c      	ldr	r1, [pc, #48]	; (b6cbc <_Z10cambioModoi+0xb0>)
      MODE = 3;
   b6c8a:	701c      	strb	r4, [r3, #0]
      showBitmap(3,0,"Iniciando modo EXPLORA...");
   b6c8c:	4668      	mov	r0, sp
   b6c8e:	f003 fd9e 	bl	ba7ce <_ZN6StringC1EPK19__FlashStringHelper>
   b6c92:	466a      	mov	r2, sp
   b6c94:	2100      	movs	r1, #0
   b6c96:	4620      	mov	r0, r4
   b6c98:	e7c9      	b.n	b6c2e <_Z10cambioModoi+0x22>
   b6c9a:	bf00      	nop
   b6c9c:	000bbcfc 	.word	0x000bbcfc
   b6ca0:	2003c73e 	.word	0x2003c73e
   b6ca4:	000bbd12 	.word	0x000bbd12
   b6ca8:	000bbd2b 	.word	0x000bbd2b
   b6cac:	000bbd43 	.word	0x000bbd43
   b6cb0:	000bbd5e 	.word	0x000bbd5e
   b6cb4:	000bbd74 	.word	0x000bbd74
   b6cb8:	000bbd8d 	.word	0x000bbd8d
   b6cbc:	000bbda4 	.word	0x000bbda4

000b6cc0 <loop>:
{
   b6cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (iniciando) {
   b6cc4:	f8df 8324 	ldr.w	r8, [pc, #804]	; b6fec <loop+0x32c>
   b6cc8:	f898 3000 	ldrb.w	r3, [r8]
{
   b6ccc:	f5ad 7d45 	sub.w	sp, sp, #788	; 0x314
  if (iniciando) {
   b6cd0:	2b00      	cmp	r3, #0
   b6cd2:	d034      	beq.n	b6d3e <loop+0x7e>
   b6cd4:	f003 f9b6 	bl	ba044 <HAL_Timer_Get_Milli_Seconds>
    currentTime = millis();
   b6cd8:	4fad      	ldr	r7, [pc, #692]	; (b6f90 <loop+0x2d0>)
    while(currentTime-startTime<limit){
   b6cda:	f8df 92dc 	ldr.w	r9, [pc, #732]	; b6fb8 <loop+0x2f8>
   b6cde:	f8df a2dc 	ldr.w	sl, [pc, #732]	; b6fbc <loop+0x2fc>
    currentTime = millis();
   b6ce2:	6038      	str	r0, [r7, #0]
    while(currentTime-startTime<limit){
   b6ce4:	f8d9 2000 	ldr.w	r2, [r9]
   b6ce8:	683b      	ldr	r3, [r7, #0]
   b6cea:	1a9b      	subs	r3, r3, r2
   b6cec:	f8da 2000 	ldr.w	r2, [sl]
   b6cf0:	4293      	cmp	r3, r2
   b6cf2:	d203      	bcs.n	b6cfc <loop+0x3c>
   b6cf4:	f003 f9a6 	bl	ba044 <HAL_Timer_Get_Milli_Seconds>
      currentTime = millis();
   b6cf8:	6038      	str	r0, [r7, #0]
    while(currentTime-startTime<limit){
   b6cfa:	e7f3      	b.n	b6ce4 <loop+0x24>
    display.clearDisplay();
   b6cfc:	4ea5      	ldr	r6, [pc, #660]	; (b6f94 <loop+0x2d4>)
   b6cfe:	4630      	mov	r0, r6
   b6d00:	f002 fd62 	bl	b97c8 <_ZN16Adafruit_SSD130612clearDisplayEv>
    display.setTextSize(1.5);
   b6d04:	2101      	movs	r1, #1
   b6d06:	4630      	mov	r0, r6
   b6d08:	f001 fe99 	bl	b8a3e <_ZN12Adafruit_GFX11setTextSizeEh>
    @param   c   16-bit 5-6-5 Color to draw text with
    @note    For 'transparent' background, background and foreground
             are set to same color rather than using a separate flag.
  */
  /**********************************************************************/
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   b6d0c:	2500      	movs	r5, #0
   b6d0e:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   b6d12:	e9c6 5304 	strd	r5, r3, [r6, #16]
    if( MODE == 0 )
   b6d16:	4ba0      	ldr	r3, [pc, #640]	; (b6f98 <loop+0x2d8>)
      showBitmap(0,0,"");
   b6d18:	49a0      	ldr	r1, [pc, #640]	; (b6f9c <loop+0x2dc>)
    if( MODE == 0 )
   b6d1a:	781c      	ldrb	r4, [r3, #0]
      showBitmap(0,0,"");
   b6d1c:	a8c0      	add	r0, sp, #768	; 0x300
    if( MODE == 0 )
   b6d1e:	2c00      	cmp	r4, #0
   b6d20:	d15d      	bne.n	b6dde <loop+0x11e>
      showBitmap(0,0,"");
   b6d22:	f003 fd54 	bl	ba7ce <_ZN6StringC1EPK19__FlashStringHelper>
   b6d26:	aac0      	add	r2, sp, #768	; 0x300
   b6d28:	4621      	mov	r1, r4
   b6d2a:	4620      	mov	r0, r4
      showBitmap(1,2,"Zumbador:");
   b6d2c:	f7ff fce0 	bl	b66f0 <_Z10showBitmapii6String>
   b6d30:	a8c0      	add	r0, sp, #768	; 0x300
   b6d32:	f003 fd01 	bl	ba738 <_ZN6StringD1Ev>
    iniciando = false;
   b6d36:	2300      	movs	r3, #0
   b6d38:	f888 3000 	strb.w	r3, [r8]
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
   b6d3c:	6133      	str	r3, [r6, #16]
  if (mfrc522.PICC_IsNewCardPresent())
   b6d3e:	4898      	ldr	r0, [pc, #608]	; (b6fa0 <loop+0x2e0>)
   b6d40:	4d98      	ldr	r5, [pc, #608]	; (b6fa4 <loop+0x2e4>)
   b6d42:	f002 f90f 	bl	b8f64 <_ZN7MFRC52221PICC_IsNewCardPresentEv>
   b6d46:	b190      	cbz	r0, b6d6e <loop+0xae>
    Serial.print("Tag Detectada --> ");
   b6d48:	f004 f85e 	bl	bae08 <_Z16_fetch_usbserialv>
   b6d4c:	4996      	ldr	r1, [pc, #600]	; (b6fa8 <loop+0x2e8>)
   b6d4e:	f003 fdf9 	bl	ba944 <_ZN5Print5printEPKc>
    if (!mfrc522.PICC_ReadCardSerial())
   b6d52:	4893      	ldr	r0, [pc, #588]	; (b6fa0 <loop+0x2e0>)
   b6d54:	f002 fad7 	bl	b9306 <_ZN7MFRC52219PICC_ReadCardSerialEv>
    getTagID(tagInfo);
   b6d58:	4894      	ldr	r0, [pc, #592]	; (b6fac <loop+0x2ec>)
   b6d5a:	f7fe fff5 	bl	b5d48 <_Z8getTagIDPi>
    play = false;
   b6d5e:	2300      	movs	r3, #0
   b6d60:	702b      	strb	r3, [r5, #0]
    if ( MODE == 0 ) {
   b6d62:	4b8d      	ldr	r3, [pc, #564]	; (b6f98 <loop+0x2d8>)
   b6d64:	781b      	ldrb	r3, [r3, #0]
   b6d66:	2b00      	cmp	r3, #0
   b6d68:	d163      	bne.n	b6e32 <loop+0x172>
      pitidoOFF0();
   b6d6a:	f7fe fb86 	bl	b547a <_Z10pitidoOFF0v>
  if (!play && init) {
   b6d6e:	782b      	ldrb	r3, [r5, #0]
   b6d70:	b923      	cbnz	r3, b6d7c <loop+0xbc>
   b6d72:	4b8f      	ldr	r3, [pc, #572]	; (b6fb0 <loop+0x2f0>)
   b6d74:	781b      	ldrb	r3, [r3, #0]
   b6d76:	b10b      	cbz	r3, b6d7c <loop+0xbc>
    ledApagar();
   b6d78:	f7fe fad6 	bl	b5328 <_Z9ledApagarv>
  if (bitmap) {
   b6d7c:	4e8d      	ldr	r6, [pc, #564]	; (b6fb4 <loop+0x2f4>)
   b6d7e:	7833      	ldrb	r3, [r6, #0]
   b6d80:	2b00      	cmp	r3, #0
   b6d82:	d067      	beq.n	b6e54 <loop+0x194>
   b6d84:	f003 f95e 	bl	ba044 <HAL_Timer_Get_Milli_Seconds>
    currentTime = millis();
   b6d88:	4b81      	ldr	r3, [pc, #516]	; (b6f90 <loop+0x2d0>)
   b6d8a:	6018      	str	r0, [r3, #0]
    if ( currentTime-startTime >= limit ) {
   b6d8c:	4b8a      	ldr	r3, [pc, #552]	; (b6fb8 <loop+0x2f8>)
   b6d8e:	681b      	ldr	r3, [r3, #0]
   b6d90:	1ac0      	subs	r0, r0, r3
   b6d92:	4b8a      	ldr	r3, [pc, #552]	; (b6fbc <loop+0x2fc>)
   b6d94:	681b      	ldr	r3, [r3, #0]
   b6d96:	4298      	cmp	r0, r3
   b6d98:	d35c      	bcc.n	b6e54 <loop+0x194>
   b6d9a:	487e      	ldr	r0, [pc, #504]	; (b6f94 <loop+0x2d4>)
      for (int i = 0; i < posicion; i++)
   b6d9c:	4f88      	ldr	r7, [pc, #544]	; (b6fc0 <loop+0x300>)
          snprintf(buf, sizeof(buf), "...");
   b6d9e:	f8df 8250 	ldr.w	r8, [pc, #592]	; b6ff0 <loop+0x330>
      bitmap=false;
   b6da2:	2400      	movs	r4, #0
   b6da4:	6104      	str	r4, [r0, #16]
   b6da6:	7034      	strb	r4, [r6, #0]
      display.clearDisplay();
   b6da8:	f002 fd0e 	bl	b97c8 <_ZN16Adafruit_SSD130612clearDisplayEv>
      display.display();
   b6dac:	4879      	ldr	r0, [pc, #484]	; (b6f94 <loop+0x2d4>)
          snprintf(buf, sizeof(buf), "...");
   b6dae:	4e85      	ldr	r6, [pc, #532]	; (b6fc4 <loop+0x304>)
      display.display();
   b6db0:	f002 ff72 	bl	b9c98 <_ZN16Adafruit_SSD13067displayEv>
      for (int i = 0; i < posicion; i++)
   b6db4:	683b      	ldr	r3, [r7, #0]
   b6db6:	42a3      	cmp	r3, r4
   b6db8:	dd4c      	ble.n	b6e54 <loop+0x194>
        if (i<23) {
   b6dba:	2c16      	cmp	r4, #22
   b6dbc:	dc43      	bgt.n	b6e46 <loop+0x186>
          snprintf(buf, sizeof(buf), secuencia[i]);
   b6dbe:	4b82      	ldr	r3, [pc, #520]	; (b6fc8 <loop+0x308>)
	const char * c_str() const { return buffer; }
   b6dc0:	0122      	lsls	r2, r4, #4
   b6dc2:	2140      	movs	r1, #64	; 0x40
   b6dc4:	58d2      	ldr	r2, [r2, r3]
   b6dc6:	4630      	mov	r0, r6
   b6dc8:	f003 fb40 	bl	ba44c <snprintf>
        display.print(buf);
   b6dcc:	4631      	mov	r1, r6
   b6dce:	4871      	ldr	r0, [pc, #452]	; (b6f94 <loop+0x2d4>)
   b6dd0:	f003 fdb8 	bl	ba944 <_ZN5Print5printEPKc>
        display.display();
   b6dd4:	486f      	ldr	r0, [pc, #444]	; (b6f94 <loop+0x2d4>)
   b6dd6:	f002 ff5f 	bl	b9c98 <_ZN16Adafruit_SSD13067displayEv>
      for (int i = 0; i < posicion; i++)
   b6dda:	3401      	adds	r4, #1
   b6ddc:	e7ea      	b.n	b6db4 <loop+0xf4>
    } else if (MODE == 1)
   b6dde:	2c01      	cmp	r4, #1
   b6de0:	d105      	bne.n	b6dee <loop+0x12e>
      showBitmap(0,3,"");
   b6de2:	f003 fcf4 	bl	ba7ce <_ZN6StringC1EPK19__FlashStringHelper>
   b6de6:	aac0      	add	r2, sp, #768	; 0x300
   b6de8:	4621      	mov	r1, r4
   b6dea:	4628      	mov	r0, r5
   b6dec:	e79e      	b.n	b6d2c <loop+0x6c>
    } else if (MODE == 3)
   b6dee:	2c03      	cmp	r4, #3
   b6df0:	d0f7      	beq.n	b6de2 <loop+0x122>
      showBitmap(0,2,"");
   b6df2:	f003 fcec 	bl	ba7ce <_ZN6StringC1EPK19__FlashStringHelper>
   b6df6:	aac0      	add	r2, sp, #768	; 0x300
   b6df8:	2102      	movs	r1, #2
   b6dfa:	4628      	mov	r0, r5
   b6dfc:	f7ff fc78 	bl	b66f0 <_Z10showBitmapii6String>
   b6e00:	a8c0      	add	r0, sp, #768	; 0x300
   b6e02:	f003 fc99 	bl	ba738 <_ZN6StringD1Ev>
      bitmap=false;
   b6e06:	4b6b      	ldr	r3, [pc, #428]	; (b6fb4 <loop+0x2f4>)
   b6e08:	701d      	strb	r5, [r3, #0]
      while(currentTime-startTime<limit){
   b6e0a:	f8d9 2000 	ldr.w	r2, [r9]
   b6e0e:	683b      	ldr	r3, [r7, #0]
   b6e10:	1a9b      	subs	r3, r3, r2
   b6e12:	f8da 2000 	ldr.w	r2, [sl]
   b6e16:	4293      	cmp	r3, r2
   b6e18:	d203      	bcs.n	b6e22 <loop+0x162>
   b6e1a:	f003 f913 	bl	ba044 <HAL_Timer_Get_Milli_Seconds>
        currentTime = millis();
   b6e1e:	6038      	str	r0, [r7, #0]
      while(currentTime-startTime<limit){
   b6e20:	e7f3      	b.n	b6e0a <loop+0x14a>
      showBitmap(1,2,"Zumbador:");
   b6e22:	496a      	ldr	r1, [pc, #424]	; (b6fcc <loop+0x30c>)
   b6e24:	a8c0      	add	r0, sp, #768	; 0x300
   b6e26:	f003 fcd2 	bl	ba7ce <_ZN6StringC1EPK19__FlashStringHelper>
   b6e2a:	aac0      	add	r2, sp, #768	; 0x300
   b6e2c:	2102      	movs	r1, #2
   b6e2e:	2001      	movs	r0, #1
   b6e30:	e77c      	b.n	b6d2c <loop+0x6c>
      pitidoOFF1(2);
   b6e32:	2002      	movs	r0, #2
   b6e34:	f7fe fbf5 	bl	b5622 <_Z10pitidoOFF1i>
      pitidoOFF1(4);
   b6e38:	2004      	movs	r0, #4
   b6e3a:	f7fe fbf2 	bl	b5622 <_Z10pitidoOFF1i>
      pitidoOFF1(6);
   b6e3e:	2006      	movs	r0, #6
   b6e40:	f7fe fbef 	bl	b5622 <_Z10pitidoOFF1i>
   b6e44:	e793      	b.n	b6d6e <loop+0xae>
        } else if (i==23){
   b6e46:	2c17      	cmp	r4, #23
   b6e48:	d1c0      	bne.n	b6dcc <loop+0x10c>
          snprintf(buf, sizeof(buf), "...");
   b6e4a:	4641      	mov	r1, r8
   b6e4c:	4630      	mov	r0, r6
   b6e4e:	f004 fb7d 	bl	bb54c <strcpy>
   b6e52:	e7bb      	b.n	b6dcc <loop+0x10c>
  Serial.println(tagInfo[0]);
   b6e54:	4c55      	ldr	r4, [pc, #340]	; (b6fac <loop+0x2ec>)
   b6e56:	f003 ffd7 	bl	bae08 <_Z16_fetch_usbserialv>
   b6e5a:	6821      	ldr	r1, [r4, #0]
   b6e5c:	220a      	movs	r2, #10
   b6e5e:	f7fd fe1f 	bl	b4aa0 <_ZN5Print7printlnIiLi0EEEjT_i.isra.0>
  Serial.println(tagInfo[1]);
   b6e62:	f003 ffd1 	bl	bae08 <_Z16_fetch_usbserialv>
   b6e66:	6861      	ldr	r1, [r4, #4]
   b6e68:	220a      	movs	r2, #10
   b6e6a:	f7fd fe19 	bl	b4aa0 <_ZN5Print7printlnIiLi0EEEjT_i.isra.0>
  Serial.println(tagInfo[2]);
   b6e6e:	f003 ffcb 	bl	bae08 <_Z16_fetch_usbserialv>
   b6e72:	68a1      	ldr	r1, [r4, #8]
   b6e74:	220a      	movs	r2, #10
   b6e76:	f7fd fe13 	bl	b4aa0 <_ZN5Print7printlnIiLi0EEEjT_i.isra.0>
  Serial.println(tagInfo[3]);
   b6e7a:	f003 ffc5 	bl	bae08 <_Z16_fetch_usbserialv>
   b6e7e:	68e1      	ldr	r1, [r4, #12]
   b6e80:	220a      	movs	r2, #10
   b6e82:	f7fd fe0d 	bl	b4aa0 <_ZN5Print7printlnIiLi0EEEjT_i.isra.0>
  Serial.println(tagInfo[4]);
   b6e86:	f003 ffbf 	bl	bae08 <_Z16_fetch_usbserialv>
   b6e8a:	6921      	ldr	r1, [r4, #16]
   b6e8c:	220a      	movs	r2, #10
   b6e8e:	f7fd fe07 	bl	b4aa0 <_ZN5Print7printlnIiLi0EEEjT_i.isra.0>
  Serial.println(tagInfo[5]);
   b6e92:	f003 ffb9 	bl	bae08 <_Z16_fetch_usbserialv>
   b6e96:	6961      	ldr	r1, [r4, #20]
   b6e98:	220a      	movs	r2, #10
   b6e9a:	f7fd fe01 	bl	b4aa0 <_ZN5Print7printlnIiLi0EEEjT_i.isra.0>
  if ( MODE == 0 ) 
   b6e9e:	4b3e      	ldr	r3, [pc, #248]	; (b6f98 <loop+0x2d8>)
   b6ea0:	781f      	ldrb	r7, [r3, #0]
   b6ea2:	2f00      	cmp	r7, #0
   b6ea4:	f040 813a 	bne.w	b711c <loop+0x45c>
    switch (tagInfo[0])
   b6ea8:	6823      	ldr	r3, [r4, #0]
   b6eaa:	f8df 8148 	ldr.w	r8, [pc, #328]	; b6ff4 <loop+0x334>
   b6eae:	2b00      	cmp	r3, #0
   b6eb0:	f000 80a2 	beq.w	b6ff8 <loop+0x338>
   b6eb4:	2b06      	cmp	r3, #6
   b6eb6:	f040 8110 	bne.w	b70da <loop+0x41a>
      pitidoBlink0();
   b6eba:	f7fe faf1 	bl	b54a0 <_Z12pitidoBlink0v>
        switch (tagInfo[1])
   b6ebe:	6866      	ldr	r6, [r4, #4]
   b6ec0:	2e01      	cmp	r6, #1
   b6ec2:	d03f      	beq.n	b6f44 <loop+0x284>
   b6ec4:	2e02      	cmp	r6, #2
   b6ec6:	d03f      	beq.n	b6f48 <loop+0x288>
   b6ec8:	b92e      	cbnz	r6, b6ed6 <loop+0x216>
            cambioModo(tagInfo[2]);
   b6eca:	68a0      	ldr	r0, [r4, #8]
   b6ecc:	f7ff fe9e 	bl	b6c0c <_Z10cambioModoi>
            resetFunc();
   b6ed0:	4b3f      	ldr	r3, [pc, #252]	; (b6fd0 <loop+0x310>)
   b6ed2:	681b      	ldr	r3, [r3, #0]
   b6ed4:	4798      	blx	r3
    if (tagInfo[0]!=-1) { 
   b6ed6:	6823      	ldr	r3, [r4, #0]
   b6ed8:	3301      	adds	r3, #1
      tagInfo[0]=-1;
   b6eda:	bf1c      	itt	ne
   b6edc:	f04f 33ff 	movne.w	r3, #4294967295
   b6ee0:	6023      	strne	r3, [r4, #0]
    if (numActuadoresBloque > 0 && play == true)
   b6ee2:	f8d8 4000 	ldr.w	r4, [r8]
   b6ee6:	2c00      	cmp	r4, #0
   b6ee8:	f340 8104 	ble.w	b70f4 <loop+0x434>
   b6eec:	782b      	ldrb	r3, [r5, #0]
   b6eee:	2b00      	cmp	r3, #0
   b6ef0:	f000 8110 	beq.w	b7114 <loop+0x454>
      valor = leerSensor(bloques[0].sensores[0].id, 1, bloques[0].sensores[0].puerto);
   b6ef4:	4c37      	ldr	r4, [pc, #220]	; (b6fd4 <loop+0x314>)
   b6ef6:	4d38      	ldr	r5, [pc, #224]	; (b6fd8 <loop+0x318>)
   b6ef8:	6922      	ldr	r2, [r4, #16]
   b6efa:	6860      	ldr	r0, [r4, #4]
   b6efc:	2101      	movs	r1, #1
   b6efe:	f7fe f96b 	bl	b51d8 <_Z10leerSensoriii>
      activarActuador(bloques[0].actuadores[0].id, estado, valor);
   b6f02:	4b36      	ldr	r3, [pc, #216]	; (b6fdc <loop+0x31c>)
      valor = leerSensor(bloques[0].sensores[0].id, 1, bloques[0].sensores[0].puerto);
   b6f04:	7028      	strb	r0, [r5, #0]
      activarActuador(bloques[0].actuadores[0].id, estado, valor);
   b6f06:	6819      	ldr	r1, [r3, #0]
      valor = leerSensor(bloques[0].sensores[0].id, 1, bloques[0].sensores[0].puerto);
   b6f08:	4602      	mov	r2, r0
      activarActuador(bloques[0].actuadores[0].id, estado, valor);
   b6f0a:	f8d4 0148 	ldr.w	r0, [r4, #328]	; 0x148
   b6f0e:	f7fe fb0b 	bl	b5528 <_Z15activarActuadoriib>
      valor ? snprintf(buf, sizeof(buf), "TRUE") : snprintf(buf, sizeof(buf), "FALSE");
   b6f12:	782b      	ldrb	r3, [r5, #0]
   b6f14:	2b00      	cmp	r3, #0
   b6f16:	f000 80eb 	beq.w	b70f0 <loop+0x430>
   b6f1a:	4931      	ldr	r1, [pc, #196]	; (b6fe0 <loop+0x320>)
      display.clearDisplay();
   b6f1c:	4c1d      	ldr	r4, [pc, #116]	; (b6f94 <loop+0x2d4>)
      valor ? snprintf(buf, sizeof(buf), "TRUE") : snprintf(buf, sizeof(buf), "FALSE");
   b6f1e:	4829      	ldr	r0, [pc, #164]	; (b6fc4 <loop+0x304>)
   b6f20:	f004 fb14 	bl	bb54c <strcpy>
      display.clearDisplay();
   b6f24:	4620      	mov	r0, r4
   b6f26:	f002 fc4f 	bl	b97c8 <_ZN16Adafruit_SSD130612clearDisplayEv>
   b6f2a:	2300      	movs	r3, #0
      display.print(buf);
   b6f2c:	4925      	ldr	r1, [pc, #148]	; (b6fc4 <loop+0x304>)
   b6f2e:	6123      	str	r3, [r4, #16]
   b6f30:	4620      	mov	r0, r4
   b6f32:	f003 fd07 	bl	ba944 <_ZN5Print5printEPKc>
      display.display();
   b6f36:	4620      	mov	r0, r4
   b6f38:	f50d 7d45 	add.w	sp, sp, #788	; 0x314
   b6f3c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
          display.display();
   b6f40:	f002 beaa 	b.w	b9c98 <_ZN16Adafruit_SSD13067displayEv>
            play = true;
   b6f44:	702e      	strb	r6, [r5, #0]
            break;
   b6f46:	e7c6      	b.n	b6ed6 <loop+0x216>
            if ( tagInfo[2] == 1 ) {
   b6f48:	68a3      	ldr	r3, [r4, #8]
   b6f4a:	2b01      	cmp	r3, #1
   b6f4c:	d10e      	bne.n	b6f6c <loop+0x2ac>
              showBitmap(3,0,"Borrado completo realizado");
   b6f4e:	4925      	ldr	r1, [pc, #148]	; (b6fe4 <loop+0x324>)
   b6f50:	a8c0      	add	r0, sp, #768	; 0x300
   b6f52:	f7fd fd8f 	bl	b4a74 <_Z10borradoALLi.part.0>
   b6f56:	f003 fc3a 	bl	ba7ce <_ZN6StringC1EPK19__FlashStringHelper>
   b6f5a:	aac0      	add	r2, sp, #768	; 0x300
   b6f5c:	4639      	mov	r1, r7
   b6f5e:	2003      	movs	r0, #3
          showBitmap(2,0,"");
   b6f60:	f7ff fbc6 	bl	b66f0 <_Z10showBitmapii6String>
   b6f64:	a8c0      	add	r0, sp, #768	; 0x300
   b6f66:	f003 fbe7 	bl	ba738 <_ZN6StringD1Ev>
   b6f6a:	e7b4      	b.n	b6ed6 <loop+0x216>
              showBitmap(2,1,"");
   b6f6c:	490b      	ldr	r1, [pc, #44]	; (b6f9c <loop+0x2dc>)
   b6f6e:	a8c0      	add	r0, sp, #768	; 0x300
   b6f70:	f003 fc2d 	bl	ba7ce <_ZN6StringC1EPK19__FlashStringHelper>
   b6f74:	aac0      	add	r2, sp, #768	; 0x300
   b6f76:	2101      	movs	r1, #1
   b6f78:	4630      	mov	r0, r6
   b6f7a:	f7ff fbb9 	bl	b66f0 <_Z10showBitmapii6String>
   b6f7e:	a8c0      	add	r0, sp, #768	; 0x300
   b6f80:	f003 fbda 	bl	ba738 <_ZN6StringD1Ev>
              Serial.println("Borrado no permitido para este modo");
   b6f84:	f003 ff40 	bl	bae08 <_Z16_fetch_usbserialv>
   b6f88:	4917      	ldr	r1, [pc, #92]	; (b6fe8 <loop+0x328>)
   b6f8a:	f003 fcee 	bl	ba96a <_ZN5Print7printlnEPKc>
   b6f8e:	e7a2      	b.n	b6ed6 <loop+0x216>
   b6f90:	2003d348 	.word	0x2003d348
   b6f94:	2003d34c 	.word	0x2003d34c
   b6f98:	2003c73e 	.word	0x2003c73e
   b6f9c:	000bb89e 	.word	0x000bb89e
   b6fa0:	2003d6f4 	.word	0x2003d6f4
   b6fa4:	2003da30 	.word	0x2003da30
   b6fa8:	000bbdc8 	.word	0x000bbdc8
   b6fac:	2003c6a4 	.word	0x2003c6a4
   b6fb0:	2003d6e4 	.word	0x2003d6e4
   b6fb4:	2003c74d 	.word	0x2003c74d
   b6fb8:	2003dc30 	.word	0x2003dc30
   b6fbc:	2003c698 	.word	0x2003c698
   b6fc0:	2003da34 	.word	0x2003da34
   b6fc4:	2003d301 	.word	0x2003d301
   b6fc8:	2003da50 	.word	0x2003da50
   b6fcc:	000bbdbe 	.word	0x000bbdbe
   b6fd0:	2003da48 	.word	0x2003da48
   b6fd4:	2003cd28 	.word	0x2003cd28
   b6fd8:	2003e6b8 	.word	0x2003e6b8
   b6fdc:	2003d6dc 	.word	0x2003d6dc
   b6fe0:	000bc0a9 	.word	0x000bc0a9
   b6fe4:	000bbddb 	.word	0x000bbddb
   b6fe8:	000bbdf6 	.word	0x000bbdf6
   b6fec:	2003c697 	.word	0x2003c697
   b6ff0:	000bbd89 	.word	0x000bbd89
   b6ff4:	2003da24 	.word	0x2003da24
        id = tagInfo[3];
   b6ff8:	4f87      	ldr	r7, [pc, #540]	; (b7218 <loop+0x558>)
   b6ffa:	68e3      	ldr	r3, [r4, #12]
        tipo = tagInfo[2];
   b6ffc:	4e87      	ldr	r6, [pc, #540]	; (b721c <loop+0x55c>)
        if (tagInfo[1] == 0) {
   b6ffe:	f8d4 a004 	ldr.w	sl, [r4, #4]
        id = tagInfo[3];
   b7002:	603b      	str	r3, [r7, #0]
        tipo = tagInfo[2];
   b7004:	68a3      	ldr	r3, [r4, #8]
   b7006:	f8df 924c 	ldr.w	r9, [pc, #588]	; b7254 <loop+0x594>
   b700a:	6033      	str	r3, [r6, #0]
        if (tagInfo[1] == 0) {
   b700c:	f1ba 0f00 	cmp.w	sl, #0
   b7010:	d123      	bne.n	b705a <loop+0x39a>
          Serial.println("Sensor detectado");
   b7012:	f003 fef9 	bl	bae08 <_Z16_fetch_usbserialv>
   b7016:	4982      	ldr	r1, [pc, #520]	; (b7220 <loop+0x560>)
   b7018:	f003 fca7 	bl	ba96a <_ZN5Print7printlnEPKc>
          bloques[0].sensores[0] = sensor;
   b701c:	4a81      	ldr	r2, [pc, #516]	; (b7224 <loop+0x564>)
          tipo == 0 ? sensor.puerto = 0 : sensor.puerto = 2;
   b701e:	6833      	ldr	r3, [r6, #0]
          sensor.id = id;
   b7020:	6839      	ldr	r1, [r7, #0]
          bloques[0].sensores[0] = sensor;
   b7022:	6051      	str	r1, [r2, #4]
          bloques[0].numSensores++;
   b7024:	6811      	ldr	r1, [r2, #0]
          tipo == 0 ? sensor.puerto = 0 : sensor.puerto = 2;
   b7026:	2b00      	cmp	r3, #0
          bloques[0].numSensores++;
   b7028:	f101 0101 	add.w	r1, r1, #1
          tipo == 0 ? sensor.puerto = 0 : sensor.puerto = 2;
   b702c:	bf18      	it	ne
   b702e:	2302      	movne	r3, #2
          bloques[0].numSensores++;
   b7030:	6011      	str	r1, [r2, #0]
          bloques[0].sensores[0] = sensor;
   b7032:	6113      	str	r3, [r2, #16]
          numSensoresBloque++;
   b7034:	f8d9 2000 	ldr.w	r2, [r9]
            showBitmap(1,3,""); //A0
   b7038:	497b      	ldr	r1, [pc, #492]	; (b7228 <loop+0x568>)
          numSensoresBloque++;
   b703a:	3201      	adds	r2, #1
   b703c:	f8c9 2000 	str.w	r2, [r9]
            showBitmap(1,3,""); //A0
   b7040:	a8c0      	add	r0, sp, #768	; 0x300
          if (sensor.puerto == 0) {
   b7042:	2b00      	cmp	r3, #0
   b7044:	d13b      	bne.n	b70be <loop+0x3fe>
            showBitmap(1,3,""); //A0
   b7046:	f003 fbc2 	bl	ba7ce <_ZN6StringC1EPK19__FlashStringHelper>
   b704a:	aac0      	add	r2, sp, #768	; 0x300
   b704c:	2103      	movs	r1, #3
            showBitmap(1,0,""); //D2
   b704e:	2001      	movs	r0, #1
   b7050:	f7ff fb4e 	bl	b66f0 <_Z10showBitmapii6String>
   b7054:	a8c0      	add	r0, sp, #768	; 0x300
   b7056:	f003 fb6f 	bl	ba738 <_ZN6StringD1Ev>
        if ( numSensoresBloque > 0) {
   b705a:	f8d9 3000 	ldr.w	r3, [r9]
   b705e:	2b00      	cmp	r3, #0
   b7060:	dd38      	ble.n	b70d4 <loop+0x414>
          if (tagInfo[1] == 1) {
   b7062:	f8d4 9004 	ldr.w	r9, [r4, #4]
   b7066:	f1b9 0f01 	cmp.w	r9, #1
   b706a:	f47f af34 	bne.w	b6ed6 <loop+0x216>
            Serial.println("Actuador detectado");
   b706e:	f003 fecb 	bl	bae08 <_Z16_fetch_usbserialv>
   b7072:	496e      	ldr	r1, [pc, #440]	; (b722c <loop+0x56c>)
   b7074:	f003 fc79 	bl	ba96a <_ZN5Print7printlnEPKc>
            estado = tagInfo[4];
   b7078:	4b6d      	ldr	r3, [pc, #436]	; (b7230 <loop+0x570>)
   b707a:	6922      	ldr	r2, [r4, #16]
   b707c:	601a      	str	r2, [r3, #0]
            tipo == 0 ? actuador.puerto = 2 : actuador.puerto = 4;
   b707e:	6833      	ldr	r3, [r6, #0]
            actuador.id = id;
   b7080:	683a      	ldr	r2, [r7, #0]
            tipo == 0 ? actuador.puerto = 2 : actuador.puerto = 4;
   b7082:	2b00      	cmp	r3, #0
            bloques[0].actuadores[0] = actuador;
   b7084:	4b67      	ldr	r3, [pc, #412]	; (b7224 <loop+0x564>)
   b7086:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
            bloques[0].numActuadores++;
   b708a:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
            tipo == 0 ? actuador.puerto = 2 : actuador.puerto = 4;
   b708e:	bf0c      	ite	eq
   b7090:	2102      	moveq	r1, #2
   b7092:	2104      	movne	r1, #4
            bloques[0].numActuadores++;
   b7094:	3201      	adds	r2, #1
            bloques[0].actuadores[0] = actuador;
   b7096:	f8c3 1154 	str.w	r1, [r3, #340]	; 0x154
            bloques[0].numActuadores++;
   b709a:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
            numActuadoresBloque++;
   b709e:	f8d8 3000 	ldr.w	r3, [r8]
            if (actuador.puerto == 2) {
   b70a2:	2902      	cmp	r1, #2
            numActuadoresBloque++;
   b70a4:	f103 0301 	add.w	r3, r3, #1
              showBitmap(1,4,""); //A2
   b70a8:	495f      	ldr	r1, [pc, #380]	; (b7228 <loop+0x568>)
            numActuadoresBloque++;
   b70aa:	f8c8 3000 	str.w	r3, [r8]
              showBitmap(1,4,""); //A2
   b70ae:	a8c0      	add	r0, sp, #768	; 0x300
            if (actuador.puerto == 2) {
   b70b0:	d10a      	bne.n	b70c8 <loop+0x408>
              showBitmap(1,4,""); //A2
   b70b2:	f003 fb8c 	bl	ba7ce <_ZN6StringC1EPK19__FlashStringHelper>
   b70b6:	aac0      	add	r2, sp, #768	; 0x300
   b70b8:	2104      	movs	r1, #4
   b70ba:	4648      	mov	r0, r9
   b70bc:	e750      	b.n	b6f60 <loop+0x2a0>
            showBitmap(1,0,""); //D2
   b70be:	f003 fb86 	bl	ba7ce <_ZN6StringC1EPK19__FlashStringHelper>
   b70c2:	aac0      	add	r2, sp, #768	; 0x300
   b70c4:	4651      	mov	r1, sl
   b70c6:	e7c2      	b.n	b704e <loop+0x38e>
              showBitmap(1,1,""); //D4
   b70c8:	f003 fb81 	bl	ba7ce <_ZN6StringC1EPK19__FlashStringHelper>
   b70cc:	aac0      	add	r2, sp, #768	; 0x300
   b70ce:	4649      	mov	r1, r9
   b70d0:	4648      	mov	r0, r9
   b70d2:	e745      	b.n	b6f60 <loop+0x2a0>
            ledApagar();
   b70d4:	f7fe f928 	bl	b5328 <_Z9ledApagarv>
   b70d8:	e6fd      	b.n	b6ed6 <loop+0x216>
        if ( tagInfo[0] != -1 ) {
   b70da:	3301      	adds	r3, #1
   b70dc:	f43f aefb 	beq.w	b6ed6 <loop+0x216>
          showBitmap(2,0,"");
   b70e0:	4951      	ldr	r1, [pc, #324]	; (b7228 <loop+0x568>)
   b70e2:	a8c0      	add	r0, sp, #768	; 0x300
   b70e4:	f003 fb73 	bl	ba7ce <_ZN6StringC1EPK19__FlashStringHelper>
   b70e8:	aac0      	add	r2, sp, #768	; 0x300
   b70ea:	4639      	mov	r1, r7
   b70ec:	2002      	movs	r0, #2
   b70ee:	e737      	b.n	b6f60 <loop+0x2a0>
      valor ? snprintf(buf, sizeof(buf), "TRUE") : snprintf(buf, sizeof(buf), "FALSE");
   b70f0:	4950      	ldr	r1, [pc, #320]	; (b7234 <loop+0x574>)
   b70f2:	e713      	b.n	b6f1c <loop+0x25c>
    } else if (numActuadoresBloque==0 && play == true) {
   b70f4:	d10e      	bne.n	b7114 <loop+0x454>
   b70f6:	782b      	ldrb	r3, [r5, #0]
   b70f8:	b163      	cbz	r3, b7114 <loop+0x454>
      showBitmap(2,4,"");
   b70fa:	494b      	ldr	r1, [pc, #300]	; (b7228 <loop+0x568>)
   b70fc:	a8c0      	add	r0, sp, #768	; 0x300
   b70fe:	f003 fb66 	bl	ba7ce <_ZN6StringC1EPK19__FlashStringHelper>
   b7102:	aac0      	add	r2, sp, #768	; 0x300
   b7104:	2104      	movs	r1, #4
   b7106:	2002      	movs	r0, #2
   b7108:	f7ff faf2 	bl	b66f0 <_Z10showBitmapii6String>
   b710c:	a8c0      	add	r0, sp, #768	; 0x300
   b710e:	f003 fb13 	bl	ba738 <_ZN6StringD1Ev>
      play=false;
   b7112:	702c      	strb	r4, [r5, #0]
   b7114:	f50d 7d45 	add.w	sp, sp, #788	; 0x314
   b7118:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  } else if ( MODE == 1 ) {
   b711c:	2f01      	cmp	r7, #1
    switch (tagInfo[0])
   b711e:	6826      	ldr	r6, [r4, #0]
  } else if ( MODE == 1 ) {
   b7120:	f040 83c9 	bne.w	b78b6 <loop+0xbf6>
    switch (tagInfo[0])
   b7124:	2e01      	cmp	r6, #1
   b7126:	d05a      	beq.n	b71de <loop+0x51e>
   b7128:	2e06      	cmp	r6, #6
   b712a:	f040 8363 	bne.w	b77f4 <loop+0xb34>
        switch (tagInfo[1])
   b712e:	6866      	ldr	r6, [r4, #4]
   b7130:	2e01      	cmp	r6, #1
   b7132:	d02b      	beq.n	b718c <loop+0x4cc>
   b7134:	2e02      	cmp	r6, #2
   b7136:	d02b      	beq.n	b7190 <loop+0x4d0>
   b7138:	b92e      	cbnz	r6, b7146 <loop+0x486>
            cambioModo(tagInfo[2]);
   b713a:	68a0      	ldr	r0, [r4, #8]
   b713c:	f7ff fd66 	bl	b6c0c <_Z10cambioModoi>
            resetFunc();
   b7140:	4b3d      	ldr	r3, [pc, #244]	; (b7238 <loop+0x578>)
   b7142:	681b      	ldr	r3, [r3, #0]
   b7144:	4798      	blx	r3
    tagInfo[0] = -1;
   b7146:	f04f 33ff 	mov.w	r3, #4294967295
   b714a:	6023      	str	r3, [r4, #0]
    if (play) {
   b714c:	782b      	ldrb	r3, [r5, #0]
   b714e:	2b00      	cmp	r3, #0
   b7150:	d0e0      	beq.n	b7114 <loop+0x454>
      if ( (numBloque==0 && bloques[0].numActuadores>0) || numBloque==1 ) {
   b7152:	4e3a      	ldr	r6, [pc, #232]	; (b723c <loop+0x57c>)
      serieBefore(0);
   b7154:	2000      	movs	r0, #0
   b7156:	f7fe fd51 	bl	b5bfc <_Z11serieBeforei>
      if ( (numBloque==0 && bloques[0].numActuadores>0) || numBloque==1 ) {
   b715a:	6833      	ldr	r3, [r6, #0]
   b715c:	2b00      	cmp	r3, #0
   b715e:	f040 8358 	bne.w	b7812 <loop+0xb52>
   b7162:	4b30      	ldr	r3, [pc, #192]	; (b7224 <loop+0x564>)
   b7164:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
   b7168:	2b00      	cmp	r3, #0
   b716a:	f300 8355 	bgt.w	b7818 <loop+0xb58>
        showBitmap(2,4,"  acaba bloque 1");
   b716e:	4934      	ldr	r1, [pc, #208]	; (b7240 <loop+0x580>)
   b7170:	a8c0      	add	r0, sp, #768	; 0x300
   b7172:	f003 fb2c 	bl	ba7ce <_ZN6StringC1EPK19__FlashStringHelper>
   b7176:	aac0      	add	r2, sp, #768	; 0x300
   b7178:	2104      	movs	r1, #4
   b717a:	2002      	movs	r0, #2
   b717c:	f7ff fab8 	bl	b66f0 <_Z10showBitmapii6String>
   b7180:	a8c0      	add	r0, sp, #768	; 0x300
   b7182:	f003 fad9 	bl	ba738 <_ZN6StringD1Ev>
        play = false;
   b7186:	2300      	movs	r3, #0
   b7188:	702b      	strb	r3, [r5, #0]
   b718a:	e361      	b.n	b7850 <loop+0xb90>
            play = true;
   b718c:	702e      	strb	r6, [r5, #0]
            break;
   b718e:	e7da      	b.n	b7146 <loop+0x486>
            if ( tagInfo[2] == 1 ) {
   b7190:	68a0      	ldr	r0, [r4, #8]
   b7192:	2801      	cmp	r0, #1
   b7194:	d110      	bne.n	b71b8 <loop+0x4f8>
   switch (modo)
   b7196:	f7fd fc6d 	bl	b4a74 <_Z10borradoALLi.part.0>
              borradoALL(1);
   b719a:	f7fe fb1b 	bl	b57d4 <_Z10borradoALLi>
              showBitmap(3,0,"Borrado completo realizado");
   b719e:	4929      	ldr	r1, [pc, #164]	; (b7244 <loop+0x584>)
   b71a0:	a8c0      	add	r0, sp, #768	; 0x300
   b71a2:	f003 fb14 	bl	ba7ce <_ZN6StringC1EPK19__FlashStringHelper>
   b71a6:	aac0      	add	r2, sp, #768	; 0x300
   b71a8:	2100      	movs	r1, #0
   b71aa:	2003      	movs	r0, #3
          showBitmap(2,0,"");
   b71ac:	f7ff faa0 	bl	b66f0 <_Z10showBitmapii6String>
   b71b0:	a8c0      	add	r0, sp, #768	; 0x300
   b71b2:	f003 fac1 	bl	ba738 <_ZN6StringD1Ev>
   b71b6:	e7c6      	b.n	b7146 <loop+0x486>
            } else if (tagInfo[2] == 2) {
   b71b8:	2802      	cmp	r0, #2
   b71ba:	d103      	bne.n	b71c4 <loop+0x504>
              borradoBLOQUE(1);
   b71bc:	4638      	mov	r0, r7
   b71be:	f7ff fc3f 	bl	b6a40 <_Z13borradoBLOQUEi>
   b71c2:	e7c0      	b.n	b7146 <loop+0x486>
              Serial.println("Borrado no permitido para este modo");
   b71c4:	f003 fe20 	bl	bae08 <_Z16_fetch_usbserialv>
   b71c8:	491f      	ldr	r1, [pc, #124]	; (b7248 <loop+0x588>)
   b71ca:	f003 fbce 	bl	ba96a <_ZN5Print7printlnEPKc>
              showBitmap(2,1,"");
   b71ce:	4916      	ldr	r1, [pc, #88]	; (b7228 <loop+0x568>)
   b71d0:	a8c0      	add	r0, sp, #768	; 0x300
   b71d2:	f003 fafc 	bl	ba7ce <_ZN6StringC1EPK19__FlashStringHelper>
   b71d6:	aac0      	add	r2, sp, #768	; 0x300
   b71d8:	4639      	mov	r1, r7
          showBitmap(2,0,"");
   b71da:	2002      	movs	r0, #2
   b71dc:	e7e6      	b.n	b71ac <loop+0x4ec>
        id = tagInfo[3];
   b71de:	f8df 8038 	ldr.w	r8, [pc, #56]	; b7218 <loop+0x558>
   b71e2:	68e3      	ldr	r3, [r4, #12]
   b71e4:	f8c8 3000 	str.w	r3, [r8]
        Serial.print("Ejecutando tag --> ");
   b71e8:	f003 fe0e 	bl	bae08 <_Z16_fetch_usbserialv>
   b71ec:	4917      	ldr	r1, [pc, #92]	; (b724c <loop+0x58c>)
   b71ee:	4e0d      	ldr	r6, [pc, #52]	; (b7224 <loop+0x564>)
   b71f0:	f8df 9060 	ldr.w	r9, [pc, #96]	; b7254 <loop+0x594>
   b71f4:	4f16      	ldr	r7, [pc, #88]	; (b7250 <loop+0x590>)
   b71f6:	f8df a060 	ldr.w	sl, [pc, #96]	; b7258 <loop+0x598>
   b71fa:	f8df b040 	ldr.w	fp, [pc, #64]	; b723c <loop+0x57c>
   b71fe:	f003 fba1 	bl	ba944 <_ZN5Print5printEPKc>
        switch (tagInfo[1])
   b7202:	6863      	ldr	r3, [r4, #4]
   b7204:	2b05      	cmp	r3, #5
   b7206:	d869      	bhi.n	b72dc <loop+0x61c>
   b7208:	e8df f013 	tbh	[pc, r3, lsl #1]
   b720c:	00cb0028 	.word	0x00cb0028
   b7210:	028c0252 	.word	0x028c0252
   b7214:	02de02c3 	.word	0x02de02c3
   b7218:	2003d6e0 	.word	0x2003d6e0
   b721c:	2003e6b0 	.word	0x2003e6b0
   b7220:	000bbe1a 	.word	0x000bbe1a
   b7224:	2003cd28 	.word	0x2003cd28
   b7228:	000bb89e 	.word	0x000bb89e
   b722c:	000bbe2b 	.word	0x000bbe2b
   b7230:	2003d6dc 	.word	0x2003d6dc
   b7234:	000bc0b8 	.word	0x000bc0b8
   b7238:	2003da48 	.word	0x2003da48
   b723c:	2003c69c 	.word	0x2003c69c
   b7240:	000bc0be 	.word	0x000bc0be
   b7244:	000bbddb 	.word	0x000bbddb
   b7248:	000bbdf6 	.word	0x000bbdf6
   b724c:	000bbe3e 	.word	0x000bbe3e
   b7250:	2003da24 	.word	0x2003da24
   b7254:	2003da2c 	.word	0x2003da2c
   b7258:	2003da28 	.word	0x2003da28
            if ( IF_pasado && (numSensoresBloque == numCondicionalesBloque) && isValidSensor(id) ) {
   b725c:	4fbd      	ldr	r7, [pc, #756]	; (b7554 <loop+0x894>)
            Serial.println("Sensor detectado");
   b725e:	f003 fdd3 	bl	bae08 <_Z16_fetch_usbserialv>
   b7262:	49bd      	ldr	r1, [pc, #756]	; (b7558 <loop+0x898>)
   b7264:	f003 fb81 	bl	ba96a <_ZN5Print7printlnEPKc>
            if ( IF_pasado && (numSensoresBloque == numCondicionalesBloque) && isValidSensor(id) ) {
   b7268:	783b      	ldrb	r3, [r7, #0]
   b726a:	2b00      	cmp	r3, #0
   b726c:	d05d      	beq.n	b732a <loop+0x66a>
   b726e:	f8d9 2000 	ldr.w	r2, [r9]
   b7272:	f8da 3000 	ldr.w	r3, [sl]
   b7276:	429a      	cmp	r2, r3
   b7278:	d174      	bne.n	b7364 <loop+0x6a4>
   b727a:	f8d8 0000 	ldr.w	r0, [r8]
   b727e:	f7fe fbb1 	bl	b59e4 <_Z13isValidSensori>
   b7282:	2800      	cmp	r0, #0
   b7284:	d04f      	beq.n	b7326 <loop+0x666>
              puerto = isNewSensor(id);
   b7286:	f8d8 0000 	ldr.w	r0, [r8]
   b728a:	4fb4      	ldr	r7, [pc, #720]	; (b755c <loop+0x89c>)
   b728c:	f7fe fbcc 	bl	b5a28 <_Z11isNewSensori>
   b7290:	6038      	str	r0, [r7, #0]
              if (puerto == -1) {
   b7292:	3001      	adds	r0, #1
   b7294:	d14d      	bne.n	b7332 <loop+0x672>
                puerto = asignarPuerto(tagInfo[2]);
   b7296:	68a0      	ldr	r0, [r4, #8]
   b7298:	f7fe fda6 	bl	b5de8 <_Z13asignarPuertoi>
   b729c:	4601      	mov	r1, r0
   b729e:	6038      	str	r0, [r7, #0]
                showPort(tagInfo[2], puerto);
   b72a0:	68a0      	ldr	r0, [r4, #8]
   b72a2:	f7ff fb7f 	bl	b69a4 <_Z8showPortii>
              if (puerto != -1) {
   b72a6:	6839      	ldr	r1, [r7, #0]
   b72a8:	1c48      	adds	r0, r1, #1
   b72aa:	d04f      	beq.n	b734c <loop+0x68c>
                newSensor.bloque = numBloque;
   b72ac:	f8db 0000 	ldr.w	r0, [fp]
                bloques[numBloque].sensores[numSensoresBloque] = newSensor;
   b72b0:	f8d9 c000 	ldr.w	ip, [r9]
   b72b4:	f8d8 7000 	ldr.w	r7, [r8]
   b72b8:	f44f 723b 	mov.w	r2, #748	; 0x2ec
   b72bc:	4342      	muls	r2, r0
   b72be:	eb02 130c 	add.w	r3, r2, ip, lsl #4
   b72c2:	4433      	add	r3, r6
   b72c4:	605f      	str	r7, [r3, #4]
   b72c6:	6927      	ldr	r7, [r4, #16]
   b72c8:	6119      	str	r1, [r3, #16]
   b72ca:	e9c3 7002 	strd	r7, r0, [r3, #8]
                bloques[numBloque].numSensores++;
   b72ce:	58b3      	ldr	r3, [r6, r2]
   b72d0:	3301      	adds	r3, #1
                numSensoresBloque++;
   b72d2:	f10c 0701 	add.w	r7, ip, #1
                bloques[numBloque].numSensores++;
   b72d6:	50b3      	str	r3, [r6, r2]
                numSensoresBloque++;
   b72d8:	f8c9 7000 	str.w	r7, [r9]
        Serial.println("Fin Tag");
   b72dc:	f003 fd94 	bl	bae08 <_Z16_fetch_usbserialv>
   b72e0:	499f      	ldr	r1, [pc, #636]	; (b7560 <loop+0x8a0>)
   b72e2:	f003 fb42 	bl	ba96a <_ZN5Print7printlnEPKc>
        Serial.println("# Bloque | # Sensores | # Condiciones | # Actuadores");
   b72e6:	f003 fd8f 	bl	bae08 <_Z16_fetch_usbserialv>
   b72ea:	499e      	ldr	r1, [pc, #632]	; (b7564 <loop+0x8a4>)
   b72ec:	f003 fb3d 	bl	ba96a <_ZN5Print7printlnEPKc>
        Serial.printlnf("    %d \t|\t %d \t|\t %d \t|\t %d \t|\t %d", numBloque, numSensoresBloque, numCondicionalesBloque, numActuadoresBloque, bloques[numBloque].numActuadores);
   b72f0:	f003 fd8a 	bl	bae08 <_Z16_fetch_usbserialv>
   b72f4:	4b9c      	ldr	r3, [pc, #624]	; (b7568 <loop+0x8a8>)
   b72f6:	499d      	ldr	r1, [pc, #628]	; (b756c <loop+0x8ac>)
   b72f8:	681a      	ldr	r2, [r3, #0]
   b72fa:	f44f 733b 	mov.w	r3, #748	; 0x2ec
   b72fe:	fb03 6602 	mla	r6, r3, r2, r6
   b7302:	f8d6 3144 	ldr.w	r3, [r6, #324]	; 0x144
   b7306:	9302      	str	r3, [sp, #8]
   b7308:	4b99      	ldr	r3, [pc, #612]	; (b7570 <loop+0x8b0>)
   b730a:	681b      	ldr	r3, [r3, #0]
   b730c:	9301      	str	r3, [sp, #4]
   b730e:	4b99      	ldr	r3, [pc, #612]	; (b7574 <loop+0x8b4>)
   b7310:	681b      	ldr	r3, [r3, #0]
   b7312:	9300      	str	r3, [sp, #0]
   b7314:	4b98      	ldr	r3, [pc, #608]	; (b7578 <loop+0x8b8>)
   b7316:	681b      	ldr	r3, [r3, #0]
   b7318:	f7fd fbed 	bl	b4af6 <_ZN5Print8printlnfEPKcz>
        Serial.println();
   b731c:	f003 fd74 	bl	bae08 <_Z16_fetch_usbserialv>
   b7320:	f003 fb17 	bl	ba952 <_ZN5Print7printlnEv>
        break;
   b7324:	e70f      	b.n	b7146 <loop+0x486>
              if ((!IF_pasado)) {
   b7326:	783b      	ldrb	r3, [r7, #0]
   b7328:	b9b3      	cbnz	r3, b7358 <loop+0x698>
                Serial.println("Se esperaba IF tag");
   b732a:	f003 fd6d 	bl	bae08 <_Z16_fetch_usbserialv>
   b732e:	4993      	ldr	r1, [pc, #588]	; (b757c <loop+0x8bc>)
   b7330:	e01b      	b.n	b736a <loop+0x6aa>
                showBitmap(1,6,"");
   b7332:	4993      	ldr	r1, [pc, #588]	; (b7580 <loop+0x8c0>)
   b7334:	a8c0      	add	r0, sp, #768	; 0x300
   b7336:	f003 fa4a 	bl	ba7ce <_ZN6StringC1EPK19__FlashStringHelper>
   b733a:	aac0      	add	r2, sp, #768	; 0x300
   b733c:	2106      	movs	r1, #6
   b733e:	2001      	movs	r0, #1
   b7340:	f7ff f9d6 	bl	b66f0 <_Z10showBitmapii6String>
   b7344:	a8c0      	add	r0, sp, #768	; 0x300
   b7346:	f003 f9f7 	bl	ba738 <_ZN6StringD1Ev>
   b734a:	e7ac      	b.n	b72a6 <loop+0x5e6>
                Serial.println("Puerto no disponibleeee");
   b734c:	f003 fd5c 	bl	bae08 <_Z16_fetch_usbserialv>
   b7350:	498c      	ldr	r1, [pc, #560]	; (b7584 <loop+0x8c4>)
                Serial.println("Puerto no disponible");
   b7352:	f003 fb0a 	bl	ba96a <_ZN5Print7printlnEPKc>
   b7356:	e7c1      	b.n	b72dc <loop+0x61c>
              } else if (numSensoresBloque != numCondicionalesBloque) {
   b7358:	f8d9 2000 	ldr.w	r2, [r9]
   b735c:	f8da 3000 	ldr.w	r3, [sl]
   b7360:	429a      	cmp	r2, r3
   b7362:	d00c      	beq.n	b737e <loop+0x6be>
                Serial.println("Despues de un sensor se espera una concion: AND u OR");
   b7364:	f003 fd50 	bl	bae08 <_Z16_fetch_usbserialv>
   b7368:	4987      	ldr	r1, [pc, #540]	; (b7588 <loop+0x8c8>)
                Serial.println("Introduce un Actuador para la evaluación a TRUE");
   b736a:	f003 fafe 	bl	ba96a <_ZN5Print7printlnEPKc>
                showBitmap(2,2,"");
   b736e:	4984      	ldr	r1, [pc, #528]	; (b7580 <loop+0x8c0>)
   b7370:	a8c0      	add	r0, sp, #768	; 0x300
   b7372:	f003 fa2c 	bl	ba7ce <_ZN6StringC1EPK19__FlashStringHelper>
   b7376:	2102      	movs	r1, #2
   b7378:	aac0      	add	r2, sp, #768	; 0x300
   b737a:	4608      	mov	r0, r1
   b737c:	e00b      	b.n	b7396 <loop+0x6d6>
                Serial.println("Sensor invalido");
   b737e:	f003 fd43 	bl	bae08 <_Z16_fetch_usbserialv>
   b7382:	4982      	ldr	r1, [pc, #520]	; (b758c <loop+0x8cc>)
   b7384:	f003 faf1 	bl	ba96a <_ZN5Print7printlnEPKc>
                showBitmap(2,5,"");
   b7388:	497d      	ldr	r1, [pc, #500]	; (b7580 <loop+0x8c0>)
   b738a:	a8c0      	add	r0, sp, #768	; 0x300
   b738c:	f003 fa1f 	bl	ba7ce <_ZN6StringC1EPK19__FlashStringHelper>
   b7390:	aac0      	add	r2, sp, #768	; 0x300
   b7392:	2105      	movs	r1, #5
                  showBitmap(2,6,"");
   b7394:	2002      	movs	r0, #2
                showBitmap(2,2,"");
   b7396:	f7ff f9ab 	bl	b66f0 <_Z10showBitmapii6String>
   b739a:	a8c0      	add	r0, sp, #768	; 0x300
   b739c:	f003 f9cc 	bl	ba738 <_ZN6StringD1Ev>
   b73a0:	e79c      	b.n	b72dc <loop+0x61c>
            Serial.println("Actuador detectado");
   b73a2:	f003 fd31 	bl	bae08 <_Z16_fetch_usbserialv>
            estado = tagInfo[4];
   b73a6:	f8df a1f4 	ldr.w	sl, [pc, #500]	; b759c <loop+0x8dc>
            Serial.println("Actuador detectado");
   b73aa:	4979      	ldr	r1, [pc, #484]	; (b7590 <loop+0x8d0>)
   b73ac:	f003 fadd 	bl	ba96a <_ZN5Print7printlnEPKc>
            estado = tagInfo[4];
   b73b0:	6923      	ldr	r3, [r4, #16]
   b73b2:	f8ca 3000 	str.w	r3, [sl]
              if (!IF_pasado) {
   b73b6:	4b67      	ldr	r3, [pc, #412]	; (b7554 <loop+0x894>)
   b73b8:	781b      	ldrb	r3, [r3, #0]
   b73ba:	bbd3      	cbnz	r3, b7432 <loop+0x772>
              puerto = isNewActuador(id);
   b73bc:	f8d8 0000 	ldr.w	r0, [r8]
   b73c0:	f8df 9198 	ldr.w	r9, [pc, #408]	; b755c <loop+0x89c>
   b73c4:	f7fe fb92 	bl	b5aec <_Z13isNewActuadori>
   b73c8:	f8c9 0000 	str.w	r0, [r9]
              if (puerto == -1) {
   b73cc:	3001      	adds	r0, #1
   b73ce:	f040 8092 	bne.w	b74f6 <loop+0x836>
                puerto = asignarPuerto(tagInfo[2]);
   b73d2:	68a0      	ldr	r0, [r4, #8]
   b73d4:	f7fe fd08 	bl	b5de8 <_Z13asignarPuertoi>
   b73d8:	4601      	mov	r1, r0
   b73da:	f8c9 0000 	str.w	r0, [r9]
                showPort(tagInfo[2], puerto);
   b73de:	68a0      	ldr	r0, [r4, #8]
   b73e0:	f7ff fae0 	bl	b69a4 <_Z8showPortii>
              if (puerto != -1) {
   b73e4:	f8d9 0000 	ldr.w	r0, [r9]
   b73e8:	1c42      	adds	r2, r0, #1
   b73ea:	d022      	beq.n	b7432 <loop+0x772>
                bloque2[0].actuadores[numActuadoresBloque] = newActuador;
   b73ec:	f8d7 c000 	ldr.w	ip, [r7]
   b73f0:	f8df 91b4 	ldr.w	r9, [pc, #436]	; b75a8 <loop+0x8e8>
                newActuador.bloque = numBloque;
   b73f4:	f8db 1000 	ldr.w	r1, [fp]
                bloque2[0].actuadores[numActuadoresBloque] = newActuador;
   b73f8:	f8d8 2000 	ldr.w	r2, [r8]
                newActuador.condicion = estado;
   b73fc:	f8da e000 	ldr.w	lr, [sl]
                bloque2[0].actuadores[numActuadoresBloque] = newActuador;
   b7400:	2314      	movs	r3, #20
   b7402:	fb03 930c 	mla	r3, r3, ip, r9
   b7406:	e9c3 1054 	strd	r1, r0, [r3, #336]	; 0x150
   b740a:	2101      	movs	r1, #1
   b740c:	f883 1158 	strb.w	r1, [r3, #344]	; 0x158
   b7410:	e9c3 2e52 	strd	r2, lr, [r3, #328]	; 0x148
                bloque2[0].numActuadores++;
   b7414:	f8d9 3144 	ldr.w	r3, [r9, #324]	; 0x144
   b7418:	440b      	add	r3, r1
                numActuadoresBloque++;
   b741a:	eb0c 0201 	add.w	r2, ip, r1
                bloque2[0].numActuadores++;
   b741e:	f8c9 3144 	str.w	r3, [r9, #324]	; 0x144
                numActuadoresBloque++;
   b7422:	603a      	str	r2, [r7, #0]
                Serial.println(bloque2[0].numActuadores);
   b7424:	f003 fcf0 	bl	bae08 <_Z16_fetch_usbserialv>
   b7428:	f8d9 1144 	ldr.w	r1, [r9, #324]	; 0x144
   b742c:	220a      	movs	r2, #10
   b742e:	f7fd fb37 	bl	b4aa0 <_ZN5Print7printlnIiLi0EEEjT_i.isra.0>
            if ( THEN_pasado && !ELSE_pasado) {
   b7432:	4b58      	ldr	r3, [pc, #352]	; (b7594 <loop+0x8d4>)
   b7434:	f893 9000 	ldrb.w	r9, [r3]
   b7438:	f1b9 0f00 	cmp.w	r9, #0
   b743c:	d07d      	beq.n	b753a <loop+0x87a>
   b743e:	4b56      	ldr	r3, [pc, #344]	; (b7598 <loop+0x8d8>)
              puerto = isNewActuador(id);
   b7440:	f8d8 1000 	ldr.w	r1, [r8]
            if ( THEN_pasado && !ELSE_pasado) {
   b7444:	781b      	ldrb	r3, [r3, #0]
   b7446:	f8df a120 	ldr.w	sl, [pc, #288]	; b7568 <loop+0x8a8>
   b744a:	2b00      	cmp	r3, #0
   b744c:	d16d      	bne.n	b752a <loop+0x86a>
              puerto = isNewActuador(id);
   b744e:	4608      	mov	r0, r1
   b7450:	f7fe fb4c 	bl	b5aec <_Z13isNewActuadori>
   b7454:	f8df 9104 	ldr.w	r9, [pc, #260]	; b755c <loop+0x89c>
   b7458:	f8c9 0000 	str.w	r0, [r9]
              if (puerto == -1) {
   b745c:	3001      	adds	r0, #1
   b745e:	d157      	bne.n	b7510 <loop+0x850>
                puerto = asignarPuerto(tagInfo[2]);
   b7460:	68a0      	ldr	r0, [r4, #8]
   b7462:	f7fe fcc1 	bl	b5de8 <_Z13asignarPuertoi>
   b7466:	4601      	mov	r1, r0
   b7468:	f8c9 0000 	str.w	r0, [r9]
                showPort(tagInfo[2], puerto);
   b746c:	68a0      	ldr	r0, [r4, #8]
   b746e:	f7ff fa99 	bl	b69a4 <_Z8showPortii>
              if (puerto != -1) {
   b7472:	f8d9 1000 	ldr.w	r1, [r9]
   b7476:	1c4b      	adds	r3, r1, #1
   b7478:	f000 80fa 	beq.w	b7670 <loop+0x9b0>
                newActuador.condicion = estado;
   b747c:	4b47      	ldr	r3, [pc, #284]	; (b759c <loop+0x8dc>)
                newActuador.bloque = numBloque;
   b747e:	f8da e000 	ldr.w	lr, [sl]
                bloques[numBloque].actuadores[numActuadoresBloque] = newActuador;
   b7482:	6838      	ldr	r0, [r7, #0]
                newActuador.id = id;
   b7484:	f8d8 c000 	ldr.w	ip, [r8]
                newActuador.condicion = estado;
   b7488:	f8d3 8000 	ldr.w	r8, [r3]
                bloques[numBloque].actuadores[numActuadoresBloque] = newActuador;
   b748c:	f44f 733b 	mov.w	r3, #748	; 0x2ec
   b7490:	fb03 f20e 	mul.w	r2, r3, lr
   b7494:	2314      	movs	r3, #20
   b7496:	fb03 2300 	mla	r3, r3, r0, r2
   b749a:	4433      	add	r3, r6
   b749c:	e9c3 c852 	strd	ip, r8, [r3, #328]	; 0x148
   b74a0:	f04f 0801 	mov.w	r8, #1
   b74a4:	e9c3 e154 	strd	lr, r1, [r3, #336]	; 0x150
   b74a8:	f883 8158 	strb.w	r8, [r3, #344]	; 0x158
                bloques[numBloque].numActuadores++;
   b74ac:	18b3      	adds	r3, r6, r2
                numActuadoresBloque++;
   b74ae:	4440      	add	r0, r8
                bloques[numBloque].numActuadores++;
   b74b0:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
                numActuadoresBloque++;
   b74b4:	6038      	str	r0, [r7, #0]
                bloques[numBloque].numActuadores++;
   b74b6:	4442      	add	r2, r8
   b74b8:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
                if (id == 0)
   b74bc:	f1bc 0f00 	cmp.w	ip, #0
   b74c0:	f47f af0c 	bne.w	b72dc <loop+0x61c>
                  ledObject = ChainableLED(puerto, puerto+1, 5);
   b74c4:	b2c9      	uxtb	r1, r1
   b74c6:	eb01 0208 	add.w	r2, r1, r8
   b74ca:	afc0      	add	r7, sp, #768	; 0x300
   b74cc:	2305      	movs	r3, #5
   b74ce:	b2d2      	uxtb	r2, r2
   b74d0:	4638      	mov	r0, r7
   b74d2:	f002 fc7b 	bl	b9dcc <_ZN12ChainableLEDC1Ehhh>
   b74d6:	e897 0003 	ldmia.w	r7, {r0, r1}
   b74da:	f8df 90d0 	ldr.w	r9, [pc, #208]	; b75ac <loop+0x8ec>
   b74de:	e889 0003 	stmia.w	r9, {r0, r1}
   b74e2:	4638      	mov	r0, r7
   b74e4:	f002 fc7f 	bl	b9de6 <_ZN12ChainableLEDD1Ev>
                  ledObject.init();
   b74e8:	4648      	mov	r0, r9
   b74ea:	f002 fd21 	bl	b9f30 <_ZN12ChainableLED4initEv>
                  init = true;
   b74ee:	4b2c      	ldr	r3, [pc, #176]	; (b75a0 <loop+0x8e0>)
   b74f0:	f883 8000 	strb.w	r8, [r3]
   b74f4:	e6f2      	b.n	b72dc <loop+0x61c>
                showBitmap(1,6,"");
   b74f6:	4922      	ldr	r1, [pc, #136]	; (b7580 <loop+0x8c0>)
   b74f8:	a8c0      	add	r0, sp, #768	; 0x300
   b74fa:	f003 f968 	bl	ba7ce <_ZN6StringC1EPK19__FlashStringHelper>
   b74fe:	aac0      	add	r2, sp, #768	; 0x300
   b7500:	2106      	movs	r1, #6
   b7502:	2001      	movs	r0, #1
   b7504:	f7ff f8f4 	bl	b66f0 <_Z10showBitmapii6String>
   b7508:	a8c0      	add	r0, sp, #768	; 0x300
   b750a:	f003 f915 	bl	ba738 <_ZN6StringD1Ev>
   b750e:	e769      	b.n	b73e4 <loop+0x724>
                showBitmap(1,6,"");
   b7510:	491b      	ldr	r1, [pc, #108]	; (b7580 <loop+0x8c0>)
   b7512:	a8c0      	add	r0, sp, #768	; 0x300
   b7514:	f003 f95b 	bl	ba7ce <_ZN6StringC1EPK19__FlashStringHelper>
   b7518:	aac0      	add	r2, sp, #768	; 0x300
   b751a:	2106      	movs	r1, #6
   b751c:	2001      	movs	r0, #1
   b751e:	f7ff f8e7 	bl	b66f0 <_Z10showBitmapii6String>
   b7522:	a8c0      	add	r0, sp, #768	; 0x300
   b7524:	f003 f908 	bl	ba738 <_ZN6StringD1Ev>
   b7528:	e7a3      	b.n	b7472 <loop+0x7b2>
            } else if ( THEN_pasado && ELSE_pasado && isValidActuador(estado, id) ) {
   b752a:	f8df b070 	ldr.w	fp, [pc, #112]	; b759c <loop+0x8dc>
   b752e:	f8db 0000 	ldr.w	r0, [fp]
   b7532:	f7fe faa1 	bl	b5a78 <_Z15isValidActuadorii>
   b7536:	2800      	cmp	r0, #0
   b7538:	d13a      	bne.n	b75b0 <loop+0x8f0>
              if (!IF_pasado) {
   b753a:	4b06      	ldr	r3, [pc, #24]	; (b7554 <loop+0x894>)
   b753c:	781b      	ldrb	r3, [r3, #0]
   b753e:	2b00      	cmp	r3, #0
   b7540:	f43f aecc 	beq.w	b72dc <loop+0x61c>
              } else if (!THEN_pasado) {
   b7544:	f1b9 0f00 	cmp.w	r9, #0
   b7548:	f040 8096 	bne.w	b7678 <loop+0x9b8>
                Serial.println("Se esperaba THEN tag");
   b754c:	f003 fc5c 	bl	bae08 <_Z16_fetch_usbserialv>
   b7550:	4914      	ldr	r1, [pc, #80]	; (b75a4 <loop+0x8e4>)
   b7552:	e70a      	b.n	b736a <loop+0x6aa>
   b7554:	2003c73d 	.word	0x2003c73d
   b7558:	000bbe1a 	.word	0x000bbe1a
   b755c:	2003da38 	.word	0x2003da38
   b7560:	000bc01e 	.word	0x000bc01e
   b7564:	000bc026 	.word	0x000bc026
   b7568:	2003c69c 	.word	0x2003c69c
   b756c:	000bc05b 	.word	0x000bc05b
   b7570:	2003da24 	.word	0x2003da24
   b7574:	2003da28 	.word	0x2003da28
   b7578:	2003da2c 	.word	0x2003da2c
   b757c:	000bbe6a 	.word	0x000bbe6a
   b7580:	000bb89e 	.word	0x000bb89e
   b7584:	000bbe52 	.word	0x000bbe52
   b7588:	000bbe7d 	.word	0x000bbe7d
   b758c:	000bbeb2 	.word	0x000bbeb2
   b7590:	000bbe2b 	.word	0x000bbe2b
   b7594:	2003c74c 	.word	0x2003c74c
   b7598:	2003c73c 	.word	0x2003c73c
   b759c:	2003d6dc 	.word	0x2003d6dc
   b75a0:	2003d6e4 	.word	0x2003d6e4
   b75a4:	000bbec2 	.word	0x000bbec2
   b75a8:	2003c750 	.word	0x2003c750
   b75ac:	2003d6ec 	.word	0x2003d6ec
              puerto = isNewActuador(id);
   b75b0:	4608      	mov	r0, r1
   b75b2:	f7fe fa9b 	bl	b5aec <_Z13isNewActuadori>
   b75b6:	f8df 93cc 	ldr.w	r9, [pc, #972]	; b7984 <loop+0xcc4>
   b75ba:	f8c9 0000 	str.w	r0, [r9]
              if (puerto == -1) {
   b75be:	3001      	adds	r0, #1
   b75c0:	d149      	bne.n	b7656 <loop+0x996>
                puerto = asignarPuerto(tagInfo[2]);
   b75c2:	68a0      	ldr	r0, [r4, #8]
   b75c4:	f7fe fc10 	bl	b5de8 <_Z13asignarPuertoi>
   b75c8:	4601      	mov	r1, r0
   b75ca:	f8c9 0000 	str.w	r0, [r9]
                showPort(tagInfo[2], puerto);
   b75ce:	68a0      	ldr	r0, [r4, #8]
   b75d0:	f7ff f9e8 	bl	b69a4 <_Z8showPortii>
              if (puerto != -1) {
   b75d4:	f8d9 1000 	ldr.w	r1, [r9]
   b75d8:	1c48      	adds	r0, r1, #1
   b75da:	d049      	beq.n	b7670 <loop+0x9b0>
                newActuador.bloque = numBloque;
   b75dc:	f8da e000 	ldr.w	lr, [sl]
                bloques[numBloque].actuadores[numActuadoresBloque] = newActuador;
   b75e0:	f8d7 c000 	ldr.w	ip, [r7]
                newActuador.id = id;
   b75e4:	f8d8 0000 	ldr.w	r0, [r8]
                newActuador.condicion = estado;
   b75e8:	f8db 8000 	ldr.w	r8, [fp]
                bloques[numBloque].actuadores[numActuadoresBloque] = newActuador;
   b75ec:	f44f 733b 	mov.w	r3, #748	; 0x2ec
   b75f0:	fb03 f20e 	mul.w	r2, r3, lr
   b75f4:	2314      	movs	r3, #20
   b75f6:	fb03 230c 	mla	r3, r3, ip, r2
   b75fa:	4433      	add	r3, r6
   b75fc:	f503 79a4 	add.w	r9, r3, #328	; 0x148
   b7600:	e9c3 0852 	strd	r0, r8, [r3, #328]	; 0x148
   b7604:	e9c3 e154 	strd	lr, r1, [r3, #336]	; 0x150
   b7608:	2300      	movs	r3, #0
   b760a:	f889 3010 	strb.w	r3, [r9, #16]
                bloques[numBloque].numActuadores++;
   b760e:	18b3      	adds	r3, r6, r2
   b7610:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
   b7614:	3201      	adds	r2, #1
   b7616:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
                numActuadoresBloque++;
   b761a:	f10c 0301 	add.w	r3, ip, #1
   b761e:	603b      	str	r3, [r7, #0]
                if (id == 0)
   b7620:	2800      	cmp	r0, #0
   b7622:	f47f ae5b 	bne.w	b72dc <loop+0x61c>
                  ledObject = ChainableLED(puerto, puerto+1, 5);
   b7626:	b2c9      	uxtb	r1, r1
   b7628:	1c4a      	adds	r2, r1, #1
   b762a:	afc0      	add	r7, sp, #768	; 0x300
   b762c:	2305      	movs	r3, #5
   b762e:	b2d2      	uxtb	r2, r2
   b7630:	4638      	mov	r0, r7
   b7632:	f002 fbcb 	bl	b9dcc <_ZN12ChainableLEDC1Ehhh>
   b7636:	e897 0003 	ldmia.w	r7, {r0, r1}
   b763a:	f8df 834c 	ldr.w	r8, [pc, #844]	; b7988 <loop+0xcc8>
   b763e:	e888 0003 	stmia.w	r8, {r0, r1}
   b7642:	4638      	mov	r0, r7
   b7644:	f002 fbcf 	bl	b9de6 <_ZN12ChainableLEDD1Ev>
                  ledObject.init();
   b7648:	4640      	mov	r0, r8
   b764a:	f002 fc71 	bl	b9f30 <_ZN12ChainableLED4initEv>
                  init = true;
   b764e:	4baa      	ldr	r3, [pc, #680]	; (b78f8 <loop+0xc38>)
   b7650:	2201      	movs	r2, #1
   b7652:	701a      	strb	r2, [r3, #0]
   b7654:	e642      	b.n	b72dc <loop+0x61c>
                showBitmap(1,6,"");
   b7656:	49a9      	ldr	r1, [pc, #676]	; (b78fc <loop+0xc3c>)
   b7658:	a8c0      	add	r0, sp, #768	; 0x300
   b765a:	f003 f8b8 	bl	ba7ce <_ZN6StringC1EPK19__FlashStringHelper>
   b765e:	aac0      	add	r2, sp, #768	; 0x300
   b7660:	2106      	movs	r1, #6
   b7662:	2001      	movs	r0, #1
   b7664:	f7ff f844 	bl	b66f0 <_Z10showBitmapii6String>
   b7668:	a8c0      	add	r0, sp, #768	; 0x300
   b766a:	f003 f865 	bl	ba738 <_ZN6StringD1Ev>
   b766e:	e7b1      	b.n	b75d4 <loop+0x914>
                Serial.println("Puerto no disponible");
   b7670:	f003 fbca 	bl	bae08 <_Z16_fetch_usbserialv>
   b7674:	49a2      	ldr	r1, [pc, #648]	; (b7900 <loop+0xc40>)
   b7676:	e66c      	b.n	b7352 <loop+0x692>
                if (!isValidActuador(estado, id)) {
   b7678:	4ba2      	ldr	r3, [pc, #648]	; (b7904 <loop+0xc44>)
   b767a:	f8d8 1000 	ldr.w	r1, [r8]
   b767e:	6818      	ldr	r0, [r3, #0]
   b7680:	f7fe f9fa 	bl	b5a78 <_Z15isValidActuadorii>
   b7684:	b958      	cbnz	r0, b769e <loop+0x9de>
                  Serial.println("Invalid Actuador");
   b7686:	f003 fbbf 	bl	bae08 <_Z16_fetch_usbserialv>
   b768a:	499f      	ldr	r1, [pc, #636]	; (b7908 <loop+0xc48>)
   b768c:	f003 f96d 	bl	ba96a <_ZN5Print7printlnEPKc>
                  showBitmap(2,6,"");
   b7690:	499a      	ldr	r1, [pc, #616]	; (b78fc <loop+0xc3c>)
   b7692:	a8c0      	add	r0, sp, #768	; 0x300
   b7694:	f003 f89b 	bl	ba7ce <_ZN6StringC1EPK19__FlashStringHelper>
   b7698:	aac0      	add	r2, sp, #768	; 0x300
   b769a:	2106      	movs	r1, #6
   b769c:	e67a      	b.n	b7394 <loop+0x6d4>
                } else if(!ELSE_pasado) {
   b769e:	4b9b      	ldr	r3, [pc, #620]	; (b790c <loop+0xc4c>)
   b76a0:	781b      	ldrb	r3, [r3, #0]
   b76a2:	2b00      	cmp	r3, #0
   b76a4:	f47f ae1a 	bne.w	b72dc <loop+0x61c>
                  Serial.println("Se esperaba ELSE tag");
   b76a8:	f003 fbae 	bl	bae08 <_Z16_fetch_usbserialv>
   b76ac:	4998      	ldr	r1, [pc, #608]	; (b7910 <loop+0xc50>)
   b76ae:	e65c      	b.n	b736a <loop+0x6aa>
            Serial.println("IF detectado");
   b76b0:	f003 fbaa 	bl	bae08 <_Z16_fetch_usbserialv>
   b76b4:	4997      	ldr	r1, [pc, #604]	; (b7914 <loop+0xc54>)
   b76b6:	f003 f958 	bl	ba96a <_ZN5Print7printlnEPKc>
            if (numBloque == -1 || ( numBloque == 0 && numActuadoresBloque > 0 ) ) {
   b76ba:	f8db 3000 	ldr.w	r3, [fp]
   b76be:	1c5a      	adds	r2, r3, #1
   b76c0:	d003      	beq.n	b76ca <loop+0xa0a>
   b76c2:	bb5b      	cbnz	r3, b771c <loop+0xa5c>
   b76c4:	683a      	ldr	r2, [r7, #0]
   b76c6:	2a00      	cmp	r2, #0
   b76c8:	dd28      	ble.n	b771c <loop+0xa5c>
              IF_pasado = true;
   b76ca:	4a93      	ldr	r2, [pc, #588]	; (b7918 <loop+0xc58>)
   b76cc:	2101      	movs	r1, #1
   b76ce:	7011      	strb	r1, [r2, #0]
              THEN_pasado = false;
   b76d0:	4a92      	ldr	r2, [pc, #584]	; (b791c <loop+0xc5c>)
              showBitmap(3,0,"IF");
   b76d2:	4993      	ldr	r1, [pc, #588]	; (b7920 <loop+0xc60>)
              THEN_pasado = false;
   b76d4:	f04f 0800 	mov.w	r8, #0
   b76d8:	f882 8000 	strb.w	r8, [r2]
              ELSE_pasado = false;
   b76dc:	4a8b      	ldr	r2, [pc, #556]	; (b790c <loop+0xc4c>)
              numCondicionalesBloque = 0;
   b76de:	f8ca 8000 	str.w	r8, [sl]
              ELSE_pasado = false;
   b76e2:	f882 8000 	strb.w	r8, [r2]
              puertoAnalogico_bloque = 0;
   b76e6:	4a8f      	ldr	r2, [pc, #572]	; (b7924 <loop+0xc64>)
              numSensoresBloque = 0;
   b76e8:	f8c9 8000 	str.w	r8, [r9]
              puertoAnalogico_bloque = 0;
   b76ec:	f8c2 8000 	str.w	r8, [r2]
              puertoDigital_bloque = 0;
   b76f0:	4a8d      	ldr	r2, [pc, #564]	; (b7928 <loop+0xc68>)
              numActuadoresBloque = 0;
   b76f2:	f8c7 8000 	str.w	r8, [r7]
              numBloque++;
   b76f6:	3301      	adds	r3, #1
              puertoDigital_bloque = 0;
   b76f8:	f8c2 8000 	str.w	r8, [r2]
              bloques[numBloque] = nuevoBloque;
   b76fc:	f44f 723b 	mov.w	r2, #748	; 0x2ec
              numBloque++;
   b7700:	f8cb 3000 	str.w	r3, [fp]
              bloques[numBloque] = nuevoBloque;
   b7704:	4353      	muls	r3, r2
   b7706:	18f2      	adds	r2, r6, r3
   b7708:	f846 8003 	str.w	r8, [r6, r3]
   b770c:	f8c2 8144 	str.w	r8, [r2, #324]	; 0x144
              showBitmap(3,0,"THEN");
   b7710:	a8c0      	add	r0, sp, #768	; 0x300
   b7712:	f003 f85c 	bl	ba7ce <_ZN6StringC1EPK19__FlashStringHelper>
   b7716:	aac0      	add	r2, sp, #768	; 0x300
   b7718:	2100      	movs	r1, #0
   b771a:	e032      	b.n	b7782 <loop+0xac2>
              Serial.println("Numero de bloques > 2 || Se necesita al menos un actuador para terminar el bloque");
   b771c:	f003 fb74 	bl	bae08 <_Z16_fetch_usbserialv>
   b7720:	4982      	ldr	r1, [pc, #520]	; (b792c <loop+0xc6c>)
   b7722:	e622      	b.n	b736a <loop+0x6aa>
            Serial.println("AND/OR detectado");
   b7724:	f003 fb70 	bl	bae08 <_Z16_fetch_usbserialv>
   b7728:	4981      	ldr	r1, [pc, #516]	; (b7930 <loop+0xc70>)
   b772a:	f003 f91e 	bl	ba96a <_ZN5Print7printlnEPKc>
            if ( IF_pasado && (numCondicionalesBloque < numSensoresBloque) && numActuadoresBloque == 0) {
   b772e:	4b7a      	ldr	r3, [pc, #488]	; (b7918 <loop+0xc58>)
   b7730:	781b      	ldrb	r3, [r3, #0]
   b7732:	2b00      	cmp	r3, #0
   b7734:	f43f adf9 	beq.w	b732a <loop+0x66a>
   b7738:	f8da 3000 	ldr.w	r3, [sl]
   b773c:	f8d9 2000 	ldr.w	r2, [r9]
   b7740:	4293      	cmp	r3, r2
   b7742:	da20      	bge.n	b7786 <loop+0xac6>
   b7744:	683f      	ldr	r7, [r7, #0]
   b7746:	bb07      	cbnz	r7, b778a <loop+0xaca>
              bloques[numBloque].condiciones.condicionesBloque[numCondicionalesBloque] = tagInfo[2];
   b7748:	f8db 2000 	ldr.w	r2, [fp]
   b774c:	f8d4 8008 	ldr.w	r8, [r4, #8]
   b7750:	f44f 713b 	mov.w	r1, #748	; 0x2ec
   b7754:	fb01 6202 	mla	r2, r1, r2, r6
   b7758:	441a      	add	r2, r3
   b775a:	f1b8 0f00 	cmp.w	r8, #0
   b775e:	bf14      	ite	ne
   b7760:	2101      	movne	r1, #1
   b7762:	2100      	moveq	r1, #0
              numCondicionalesBloque++;
   b7764:	f103 0301 	add.w	r3, r3, #1
              bloques[numBloque].condiciones.condicionesBloque[numCondicionalesBloque] = tagInfo[2];
   b7768:	f882 12d8 	strb.w	r1, [r2, #728]	; 0x2d8
              numCondicionalesBloque++;
   b776c:	f8ca 3000 	str.w	r3, [sl]
              tagInfo[2]==0 ? showBitmap(3,0,"OR") : showBitmap(3,0,"AND");
   b7770:	d101      	bne.n	b7776 <loop+0xab6>
   b7772:	4970      	ldr	r1, [pc, #448]	; (b7934 <loop+0xc74>)
   b7774:	e7cc      	b.n	b7710 <loop+0xa50>
   b7776:	4970      	ldr	r1, [pc, #448]	; (b7938 <loop+0xc78>)
   b7778:	a8c0      	add	r0, sp, #768	; 0x300
   b777a:	f003 f828 	bl	ba7ce <_ZN6StringC1EPK19__FlashStringHelper>
   b777e:	aac0      	add	r2, sp, #768	; 0x300
   b7780:	4639      	mov	r1, r7
   b7782:	2003      	movs	r0, #3
   b7784:	e607      	b.n	b7396 <loop+0x6d6>
              } else if ( numSensoresBloque >= numCondicionalesBloque ) {
   b7786:	f73f ada9 	bgt.w	b72dc <loop+0x61c>
                Serial.println("Una concicion solo puede ir seguida de un sensor.");
   b778a:	f003 fb3d 	bl	bae08 <_Z16_fetch_usbserialv>
   b778e:	496b      	ldr	r1, [pc, #428]	; (b793c <loop+0xc7c>)
   b7790:	e5eb      	b.n	b736a <loop+0x6aa>
            Serial.println("THEN detectado");
   b7792:	f003 fb39 	bl	bae08 <_Z16_fetch_usbserialv>
   b7796:	496a      	ldr	r1, [pc, #424]	; (b7940 <loop+0xc80>)
   b7798:	f003 f8e7 	bl	ba96a <_ZN5Print7printlnEPKc>
            if ( IF_pasado && (numSensoresBloque > 0) && (numSensoresBloque > numCondicionalesBloque)) {
   b779c:	4b5e      	ldr	r3, [pc, #376]	; (b7918 <loop+0xc58>)
   b779e:	781b      	ldrb	r3, [r3, #0]
   b77a0:	2b00      	cmp	r3, #0
   b77a2:	f43f adc2 	beq.w	b732a <loop+0x66a>
   b77a6:	f8d9 3000 	ldr.w	r3, [r9]
   b77aa:	2b00      	cmp	r3, #0
   b77ac:	dd08      	ble.n	b77c0 <loop+0xb00>
   b77ae:	f8da 2000 	ldr.w	r2, [sl]
   b77b2:	4293      	cmp	r3, r2
   b77b4:	dd04      	ble.n	b77c0 <loop+0xb00>
              THEN_pasado = true;
   b77b6:	4b59      	ldr	r3, [pc, #356]	; (b791c <loop+0xc5c>)
              showBitmap(3,0,"THEN");
   b77b8:	4962      	ldr	r1, [pc, #392]	; (b7944 <loop+0xc84>)
              THEN_pasado = true;
   b77ba:	2201      	movs	r2, #1
   b77bc:	701a      	strb	r2, [r3, #0]
              showBitmap(3,0,"THEN");
   b77be:	e7a7      	b.n	b7710 <loop+0xa50>
                Serial.println("Numero de sensores infucientes");
   b77c0:	f003 fb22 	bl	bae08 <_Z16_fetch_usbserialv>
   b77c4:	4960      	ldr	r1, [pc, #384]	; (b7948 <loop+0xc88>)
   b77c6:	e5d0      	b.n	b736a <loop+0x6aa>
            Serial.println("ELSE detectado");
   b77c8:	f003 fb1e 	bl	bae08 <_Z16_fetch_usbserialv>
   b77cc:	495f      	ldr	r1, [pc, #380]	; (b794c <loop+0xc8c>)
   b77ce:	f003 f8cc 	bl	ba96a <_ZN5Print7printlnEPKc>
            if ( IF_pasado && (numActuadoresBloque > 0)) {
   b77d2:	4b51      	ldr	r3, [pc, #324]	; (b7918 <loop+0xc58>)
   b77d4:	781b      	ldrb	r3, [r3, #0]
   b77d6:	2b00      	cmp	r3, #0
   b77d8:	f43f ada7 	beq.w	b732a <loop+0x66a>
   b77dc:	683b      	ldr	r3, [r7, #0]
   b77de:	2b00      	cmp	r3, #0
   b77e0:	dd04      	ble.n	b77ec <loop+0xb2c>
              ELSE_pasado = true;
   b77e2:	4b4a      	ldr	r3, [pc, #296]	; (b790c <loop+0xc4c>)
              showBitmap(3,0,"ELSE");
   b77e4:	495a      	ldr	r1, [pc, #360]	; (b7950 <loop+0xc90>)
              ELSE_pasado = true;
   b77e6:	2201      	movs	r2, #1
   b77e8:	701a      	strb	r2, [r3, #0]
              showBitmap(3,0,"ELSE");
   b77ea:	e791      	b.n	b7710 <loop+0xa50>
                Serial.println("Introduce un Actuador para la evaluación a TRUE");
   b77ec:	f003 fb0c 	bl	bae08 <_Z16_fetch_usbserialv>
   b77f0:	4958      	ldr	r1, [pc, #352]	; (b7954 <loop+0xc94>)
   b77f2:	e5ba      	b.n	b736a <loop+0x6aa>
        if ( tagInfo[0] != -1 ) {
   b77f4:	3601      	adds	r6, #1
   b77f6:	f43f aca6 	beq.w	b7146 <loop+0x486>
          Serial.println("Tarjeta inválida para este modo");
   b77fa:	f003 fb05 	bl	bae08 <_Z16_fetch_usbserialv>
   b77fe:	4956      	ldr	r1, [pc, #344]	; (b7958 <loop+0xc98>)
   b7800:	f003 f8b3 	bl	ba96a <_ZN5Print7printlnEPKc>
          showBitmap(2,0,"");
   b7804:	493d      	ldr	r1, [pc, #244]	; (b78fc <loop+0xc3c>)
   b7806:	a8c0      	add	r0, sp, #768	; 0x300
   b7808:	f002 ffe1 	bl	ba7ce <_ZN6StringC1EPK19__FlashStringHelper>
   b780c:	aac0      	add	r2, sp, #768	; 0x300
   b780e:	2100      	movs	r1, #0
   b7810:	e4e3      	b.n	b71da <loop+0x51a>
      if ( (numBloque==0 && bloques[0].numActuadores>0) || numBloque==1 ) {
   b7812:	2b01      	cmp	r3, #1
   b7814:	f47f acab 	bne.w	b716e <loop+0x4ae>
        valor = makeEvaluate(bloques[0]);
   b7818:	4c50      	ldr	r4, [pc, #320]	; (b795c <loop+0xc9c>)
   b781a:	f44f 7237 	mov.w	r2, #732	; 0x2dc
   b781e:	f104 0110 	add.w	r1, r4, #16
   b7822:	4668      	mov	r0, sp
   b7824:	f003 fe3e 	bl	bb4a4 <memcpy>
   b7828:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   b782c:	f7fe f9bc 	bl	b5ba8 <_Z12makeEvaluate6BLOQUE>
   b7830:	4c4b      	ldr	r4, [pc, #300]	; (b7960 <loop+0xca0>)
        ejecutarEvaluacion(valor, 0);
   b7832:	2100      	movs	r1, #0
        valor = makeEvaluate(bloques[0]);
   b7834:	7020      	strb	r0, [r4, #0]
        ejecutarEvaluacion(valor, 0);
   b7836:	f7fe fa03 	bl	b5c40 <_Z18ejecutarEvaluacionbi>
        valor ? snprintf(buf, sizeof(buf), "BLOQUE 1: TRUE") : snprintf(buf, sizeof(buf), "BLOQUE 1: FALSE");
   b783a:	7823      	ldrb	r3, [r4, #0]
   b783c:	2b00      	cmp	r3, #0
   b783e:	d034      	beq.n	b78aa <loop+0xbea>
   b7840:	4948      	ldr	r1, [pc, #288]	; (b7964 <loop+0xca4>)
   b7842:	4849      	ldr	r0, [pc, #292]	; (b7968 <loop+0xca8>)
   b7844:	f003 fe82 	bl	bb54c <strcpy>
        display.println(buf);
   b7848:	4947      	ldr	r1, [pc, #284]	; (b7968 <loop+0xca8>)
   b784a:	4848      	ldr	r0, [pc, #288]	; (b796c <loop+0xcac>)
   b784c:	f003 f88d 	bl	ba96a <_ZN5Print7printlnEPKc>
      if ( numBloque==1 && bloques[1].numActuadores>0 ) {
   b7850:	6835      	ldr	r5, [r6, #0]
   b7852:	2d01      	cmp	r5, #1
   b7854:	d11f      	bne.n	b7896 <loop+0xbd6>
   b7856:	4c41      	ldr	r4, [pc, #260]	; (b795c <loop+0xc9c>)
   b7858:	f8d4 3430 	ldr.w	r3, [r4, #1072]	; 0x430
   b785c:	2b00      	cmp	r3, #0
   b785e:	dd28      	ble.n	b78b2 <loop+0xbf2>
        valor = makeEvaluate(bloques[1]);
   b7860:	f504 713f 	add.w	r1, r4, #764	; 0x2fc
   b7864:	f44f 7237 	mov.w	r2, #732	; 0x2dc
   b7868:	4668      	mov	r0, sp
   b786a:	f003 fe1b 	bl	bb4a4 <memcpy>
   b786e:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
   b7872:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b7874:	f7fe f998 	bl	b5ba8 <_Z12makeEvaluate6BLOQUE>
   b7878:	4c39      	ldr	r4, [pc, #228]	; (b7960 <loop+0xca0>)
        ejecutarEvaluacion(valor, 1);
   b787a:	4629      	mov	r1, r5
        valor = makeEvaluate(bloques[1]);
   b787c:	7020      	strb	r0, [r4, #0]
        ejecutarEvaluacion(valor, 1);
   b787e:	f7fe f9df 	bl	b5c40 <_Z18ejecutarEvaluacionbi>
        valor ? snprintf(buf, sizeof(buf), "BLOQUE 2: TRUE") : snprintf(buf, sizeof(buf), "BLOQUE 2: FALSE");
   b7882:	7823      	ldrb	r3, [r4, #0]
   b7884:	b19b      	cbz	r3, b78ae <loop+0xbee>
   b7886:	493a      	ldr	r1, [pc, #232]	; (b7970 <loop+0xcb0>)
        snprintf(buf, sizeof(buf), "BLOQUE 2:   no finalizado");
   b7888:	4837      	ldr	r0, [pc, #220]	; (b7968 <loop+0xca8>)
   b788a:	f003 fe5f 	bl	bb54c <strcpy>
        display.print(buf);
   b788e:	4936      	ldr	r1, [pc, #216]	; (b7968 <loop+0xca8>)
   b7890:	4836      	ldr	r0, [pc, #216]	; (b796c <loop+0xcac>)
   b7892:	f003 f857 	bl	ba944 <_ZN5Print5printEPKc>
      display.display();
   b7896:	4c35      	ldr	r4, [pc, #212]	; (b796c <loop+0xcac>)
   b7898:	4620      	mov	r0, r4
   b789a:	f002 f9fd 	bl	b9c98 <_ZN16Adafruit_SSD13067displayEv>
      display.clearDisplay();
   b789e:	4620      	mov	r0, r4
   b78a0:	f001 ff92 	bl	b97c8 <_ZN16Adafruit_SSD130612clearDisplayEv>
   b78a4:	2300      	movs	r3, #0
   b78a6:	6123      	str	r3, [r4, #16]
   b78a8:	e434      	b.n	b7114 <loop+0x454>
        valor ? snprintf(buf, sizeof(buf), "BLOQUE 1: TRUE") : snprintf(buf, sizeof(buf), "BLOQUE 1: FALSE");
   b78aa:	4932      	ldr	r1, [pc, #200]	; (b7974 <loop+0xcb4>)
   b78ac:	e7c9      	b.n	b7842 <loop+0xb82>
        valor ? snprintf(buf, sizeof(buf), "BLOQUE 2: TRUE") : snprintf(buf, sizeof(buf), "BLOQUE 2: FALSE");
   b78ae:	4932      	ldr	r1, [pc, #200]	; (b7978 <loop+0xcb8>)
   b78b0:	e7ea      	b.n	b7888 <loop+0xbc8>
        snprintf(buf, sizeof(buf), "BLOQUE 2:   no finalizado");
   b78b2:	4932      	ldr	r1, [pc, #200]	; (b797c <loop+0xcbc>)
   b78b4:	e7e8      	b.n	b7888 <loop+0xbc8>
  } else if (MODE == 2) {
   b78b6:	2f02      	cmp	r7, #2
   b78b8:	f040 81e2 	bne.w	b7c80 <loop+0xfc0>
    switch (tagInfo[0])
   b78bc:	2e02      	cmp	r6, #2
   b78be:	f000 8082 	beq.w	b79c6 <loop+0xd06>
   b78c2:	2e06      	cmp	r6, #6
   b78c4:	f040 81a1 	bne.w	b7c0a <loop+0xf4a>
      switch (tagInfo[1])
   b78c8:	6860      	ldr	r0, [r4, #4]
   b78ca:	2801      	cmp	r0, #1
   b78cc:	d05e      	beq.n	b798c <loop+0xccc>
   b78ce:	2802      	cmp	r0, #2
   b78d0:	d06a      	beq.n	b79a8 <loop+0xce8>
   b78d2:	b928      	cbnz	r0, b78e0 <loop+0xc20>
          cambioModo(tagInfo[2]);
   b78d4:	68a0      	ldr	r0, [r4, #8]
   b78d6:	f7ff f999 	bl	b6c0c <_Z10cambioModoi>
          resetFunc();
   b78da:	4b29      	ldr	r3, [pc, #164]	; (b7980 <loop+0xcc0>)
   b78dc:	681b      	ldr	r3, [r3, #0]
   b78de:	4798      	blx	r3
    tagInfo[0] = -1;
   b78e0:	f04f 33ff 	mov.w	r3, #4294967295
   b78e4:	6023      	str	r3, [r4, #0]
    if (play) {
   b78e6:	782b      	ldrb	r3, [r5, #0]
   b78e8:	2b00      	cmp	r3, #0
   b78ea:	f43f ac13 	beq.w	b7114 <loop+0x454>
      reproducir();
   b78ee:	f7ff f93f 	bl	b6b70 <_Z10reproducirv>
      play = false;
   b78f2:	2300      	movs	r3, #0
   b78f4:	702b      	strb	r3, [r5, #0]
   b78f6:	e40d      	b.n	b7114 <loop+0x454>
   b78f8:	2003d6e4 	.word	0x2003d6e4
   b78fc:	000bb89e 	.word	0x000bb89e
   b7900:	000bbc11 	.word	0x000bbc11
   b7904:	2003d6dc 	.word	0x2003d6dc
   b7908:	000bbed7 	.word	0x000bbed7
   b790c:	2003c73c 	.word	0x2003c73c
   b7910:	000bbee8 	.word	0x000bbee8
   b7914:	000bbefd 	.word	0x000bbefd
   b7918:	2003c73d 	.word	0x2003c73d
   b791c:	2003c74c 	.word	0x2003c74c
   b7920:	000bbf0a 	.word	0x000bbf0a
   b7924:	2003da40 	.word	0x2003da40
   b7928:	2003da44 	.word	0x2003da44
   b792c:	000bbf0d 	.word	0x000bbf0d
   b7930:	000bbf5f 	.word	0x000bbf5f
   b7934:	000bbeaf 	.word	0x000bbeaf
   b7938:	000bbf70 	.word	0x000bbf70
   b793c:	000bbf74 	.word	0x000bbf74
   b7940:	000bbfa6 	.word	0x000bbfa6
   b7944:	000bbfb5 	.word	0x000bbfb5
   b7948:	000bbfba 	.word	0x000bbfba
   b794c:	000bbfd9 	.word	0x000bbfd9
   b7950:	000bbfe8 	.word	0x000bbfe8
   b7954:	000bbfed 	.word	0x000bbfed
   b7958:	000bc07e 	.word	0x000bc07e
   b795c:	2003cd28 	.word	0x2003cd28
   b7960:	2003e6b8 	.word	0x2003e6b8
   b7964:	000bc09f 	.word	0x000bc09f
   b7968:	2003d301 	.word	0x2003d301
   b796c:	2003d34c 	.word	0x2003d34c
   b7970:	000bc0cf 	.word	0x000bc0cf
   b7974:	000bc0ae 	.word	0x000bc0ae
   b7978:	000bc0de 	.word	0x000bc0de
   b797c:	000bc0ee 	.word	0x000bc0ee
   b7980:	2003da48 	.word	0x2003da48
   b7984:	2003da38 	.word	0x2003da38
   b7988:	2003d6ec 	.word	0x2003d6ec
          showBitmap(3,0,"Ejecutando...");   
   b798c:	49a7      	ldr	r1, [pc, #668]	; (b7c2c <loop+0xf6c>)
          play = true;
   b798e:	7028      	strb	r0, [r5, #0]
            showBitmap(3,0,"Borrado completo realizado");
   b7990:	a8c0      	add	r0, sp, #768	; 0x300
   b7992:	f002 ff1c 	bl	ba7ce <_ZN6StringC1EPK19__FlashStringHelper>
   b7996:	aac0      	add	r2, sp, #768	; 0x300
   b7998:	2100      	movs	r1, #0
   b799a:	2003      	movs	r0, #3
        showBitmap(2,0,"");
   b799c:	f7fe fea8 	bl	b66f0 <_Z10showBitmapii6String>
   b79a0:	a8c0      	add	r0, sp, #768	; 0x300
   b79a2:	f002 fec9 	bl	ba738 <_ZN6StringD1Ev>
   b79a6:	e79b      	b.n	b78e0 <loop+0xc20>
          if ( tagInfo[2] == 0 ) {
   b79a8:	68a6      	ldr	r6, [r4, #8]
   b79aa:	b91e      	cbnz	r6, b79b4 <loop+0xcf4>
            borradoPOP();
   b79ac:	f7fd ff44 	bl	b5838 <_Z10borradoPOPv>
            showBitmap(3,0,"Borrada ultima lectura");
   b79b0:	499f      	ldr	r1, [pc, #636]	; (b7c30 <loop+0xf70>)
   b79b2:	e7ed      	b.n	b7990 <loop+0xcd0>
          } else if ( tagInfo[2] == 1 ){
   b79b4:	2e01      	cmp	r6, #1
   b79b6:	d103      	bne.n	b79c0 <loop+0xd00>
            borradoALL(2);
   b79b8:	f7fd ff0c 	bl	b57d4 <_Z10borradoALLi>
            showBitmap(3,0,"Borrado completo realizado");
   b79bc:	499d      	ldr	r1, [pc, #628]	; (b7c34 <loop+0xf74>)
   b79be:	e7e7      	b.n	b7990 <loop+0xcd0>
            borradoBLOQUE(2);
   b79c0:	f7ff f83e 	bl	b6a40 <_Z13borradoBLOQUEi>
   b79c4:	e78c      	b.n	b78e0 <loop+0xc20>
      switch (tagInfo[1])
   b79c6:	6863      	ldr	r3, [r4, #4]
   b79c8:	2b01      	cmp	r3, #1
   b79ca:	d078      	beq.n	b7abe <loop+0xdfe>
   b79cc:	2b02      	cmp	r3, #2
   b79ce:	f000 80bc 	beq.w	b7b4a <loop+0xe8a>
   b79d2:	2b00      	cmp	r3, #0
   b79d4:	d184      	bne.n	b78e0 <loop+0xc20>
        secuencia[posicion] = decodificarNOTA_msg(tagInfo[2])+decodificarTIPO_msg(tagInfo[3])+" - ";
   b79d6:	68a1      	ldr	r1, [r4, #8]
   b79d8:	4e97      	ldr	r6, [pc, #604]	; (b7c38 <loop+0xf78>)
   b79da:	4f98      	ldr	r7, [pc, #608]	; (b7c3c <loop+0xf7c>)
   b79dc:	a8b8      	add	r0, sp, #736	; 0x2e0
   b79de:	f7fd ff9b 	bl	b5918 <_Z19decodificarNOTA_msgi>
	StringSumHelper(const String &s) : String(s) {}
   b79e2:	a9b8      	add	r1, sp, #736	; 0x2e0
   b79e4:	a8c0      	add	r0, sp, #768	; 0x300
   b79e6:	f002 ff15 	bl	ba814 <_ZN6StringC1ERKS_>
   b79ea:	68e1      	ldr	r1, [r4, #12]
   b79ec:	a8bc      	add	r0, sp, #752	; 0x2f0
   b79ee:	f7fd ffc5 	bl	b597c <_Z19decodificarTIPO_msgi>
   b79f2:	a9bc      	add	r1, sp, #752	; 0x2f0
   b79f4:	a8c0      	add	r0, sp, #768	; 0x300
   b79f6:	f002 ff54 	bl	ba8a2 <_ZplRK15StringSumHelperRK6String>
   b79fa:	4991      	ldr	r1, [pc, #580]	; (b7c40 <loop+0xf80>)
   b79fc:	f002 ff5d 	bl	ba8ba <_ZplRK15StringSumHelperPKc>
   b7a00:	4601      	mov	r1, r0
   b7a02:	6830      	ldr	r0, [r6, #0]
   b7a04:	eb07 1000 	add.w	r0, r7, r0, lsl #4
   b7a08:	f002 fef5 	bl	ba7f6 <_ZN6StringaSERKS_>
   b7a0c:	a8bc      	add	r0, sp, #752	; 0x2f0
   b7a0e:	f002 fe93 	bl	ba738 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b7a12:	a8c0      	add	r0, sp, #768	; 0x300
   b7a14:	f002 fe90 	bl	ba738 <_ZN6StringD1Ev>
   b7a18:	a8b8      	add	r0, sp, #736	; 0x2e0
   b7a1a:	f002 fe8d 	bl	ba738 <_ZN6StringD1Ev>
        if (posicion<23) {
   b7a1e:	6833      	ldr	r3, [r6, #0]
   b7a20:	2b16      	cmp	r3, #22
   b7a22:	dc45      	bgt.n	b7ab0 <loop+0xdf0>
	const char * c_str() const { return buffer; }
   b7a24:	011b      	lsls	r3, r3, #4
          snprintf(buf, sizeof(buf), secuencia[posicion]);
   b7a26:	4887      	ldr	r0, [pc, #540]	; (b7c44 <loop+0xf84>)
   b7a28:	58fa      	ldr	r2, [r7, r3]
   b7a2a:	2140      	movs	r1, #64	; 0x40
   b7a2c:	f002 fd0e 	bl	ba44c <snprintf>
          display.print(buf);
   b7a30:	4984      	ldr	r1, [pc, #528]	; (b7c44 <loop+0xf84>)
   b7a32:	4885      	ldr	r0, [pc, #532]	; (b7c48 <loop+0xf88>)
   b7a34:	f002 ff86 	bl	ba944 <_ZN5Print5printEPKc>
          display.display();
   b7a38:	4883      	ldr	r0, [pc, #524]	; (b7c48 <loop+0xf88>)
   b7a3a:	f002 f92d 	bl	b9c98 <_ZN16Adafruit_SSD13067displayEv>
        Serial.printlnf(decodificarNOTA_msg(tagInfo[2])+decodificarTIPO_msg(tagInfo[3]));
   b7a3e:	f003 f9e3 	bl	bae08 <_Z16_fetch_usbserialv>
   b7a42:	68a1      	ldr	r1, [r4, #8]
   b7a44:	4607      	mov	r7, r0
   b7a46:	a8b8      	add	r0, sp, #736	; 0x2e0
   b7a48:	f7fd ff66 	bl	b5918 <_Z19decodificarNOTA_msgi>
	StringSumHelper(const String &s) : String(s) {}
   b7a4c:	a9b8      	add	r1, sp, #736	; 0x2e0
   b7a4e:	a8c0      	add	r0, sp, #768	; 0x300
   b7a50:	f002 fee0 	bl	ba814 <_ZN6StringC1ERKS_>
   b7a54:	68e1      	ldr	r1, [r4, #12]
   b7a56:	a8bc      	add	r0, sp, #752	; 0x2f0
   b7a58:	f7fd ff90 	bl	b597c <_Z19decodificarTIPO_msgi>
   b7a5c:	a9bc      	add	r1, sp, #752	; 0x2f0
   b7a5e:	a8c0      	add	r0, sp, #768	; 0x300
   b7a60:	f002 ff1f 	bl	ba8a2 <_ZplRK15StringSumHelperRK6String>
   b7a64:	6801      	ldr	r1, [r0, #0]
   b7a66:	4638      	mov	r0, r7
   b7a68:	f7fd f845 	bl	b4af6 <_ZN5Print8printlnfEPKcz>
   b7a6c:	a8bc      	add	r0, sp, #752	; 0x2f0
   b7a6e:	f002 fe63 	bl	ba738 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b7a72:	a8c0      	add	r0, sp, #768	; 0x300
   b7a74:	f002 fe60 	bl	ba738 <_ZN6StringD1Ev>
   b7a78:	a8b8      	add	r0, sp, #736	; 0x2e0
   b7a7a:	f002 fe5d 	bl	ba738 <_ZN6StringD1Ev>
        reproducirNOTA(tagInfo[2], tagInfo[3]);
   b7a7e:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
   b7a82:	f7fd ff95 	bl	b59b0 <_Z14reproducirNOTAii>
        notas[posicion] = tagInfo[2];
   b7a86:	6833      	ldr	r3, [r6, #0]
   b7a88:	4a70      	ldr	r2, [pc, #448]	; (b7c4c <loop+0xf8c>)
   b7a8a:	68a1      	ldr	r1, [r4, #8]
   b7a8c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        duraciones[posicion] = tagInfo[3];
   b7a90:	4a6f      	ldr	r2, [pc, #444]	; (b7c50 <loop+0xf90>)
   b7a92:	68e1      	ldr	r1, [r4, #12]
   b7a94:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        posicion++;
   b7a98:	3301      	adds	r3, #1
   b7a9a:	6033      	str	r3, [r6, #0]
        if (bucle) {
   b7a9c:	4b6d      	ldr	r3, [pc, #436]	; (b7c54 <loop+0xf94>)
   b7a9e:	781b      	ldrb	r3, [r3, #0]
   b7aa0:	2b00      	cmp	r3, #0
   b7aa2:	f43f af1d 	beq.w	b78e0 <loop+0xc20>
          tam_bucle++;
   b7aa6:	4a6c      	ldr	r2, [pc, #432]	; (b7c58 <loop+0xf98>)
   b7aa8:	6813      	ldr	r3, [r2, #0]
   b7aaa:	3301      	adds	r3, #1
   b7aac:	6013      	str	r3, [r2, #0]
   b7aae:	e717      	b.n	b78e0 <loop+0xc20>
        } else if (posicion==23){
   b7ab0:	2b17      	cmp	r3, #23
   b7ab2:	d1c4      	bne.n	b7a3e <loop+0xd7e>
          snprintf(buf, sizeof(buf), "...");
   b7ab4:	4969      	ldr	r1, [pc, #420]	; (b7c5c <loop+0xf9c>)
   b7ab6:	4863      	ldr	r0, [pc, #396]	; (b7c44 <loop+0xf84>)
   b7ab8:	f003 fd48 	bl	bb54c <strcpy>
   b7abc:	e7b8      	b.n	b7a30 <loop+0xd70>
        if (!bucle) {
   b7abe:	4f65      	ldr	r7, [pc, #404]	; (b7c54 <loop+0xf94>)
   b7ac0:	783b      	ldrb	r3, [r7, #0]
   b7ac2:	2b00      	cmp	r3, #0
   b7ac4:	d134      	bne.n	b7b30 <loop+0xe70>
          secuencia[posicion] = "Loop - ";
   b7ac6:	4e5c      	ldr	r6, [pc, #368]	; (b7c38 <loop+0xf78>)
   b7ac8:	f8df 8170 	ldr.w	r8, [pc, #368]	; b7c3c <loop+0xf7c>
          Serial.println("Loop");
   b7acc:	f003 f99c 	bl	bae08 <_Z16_fetch_usbserialv>
   b7ad0:	4963      	ldr	r1, [pc, #396]	; (b7c60 <loop+0xfa0>)
   b7ad2:	f002 ff4a 	bl	ba96a <_ZN5Print7printlnEPKc>
          secuencia[posicion] = "Loop - ";
   b7ad6:	6830      	ldr	r0, [r6, #0]
   b7ad8:	4962      	ldr	r1, [pc, #392]	; (b7c64 <loop+0xfa4>)
   b7ada:	eb08 1000 	add.w	r0, r8, r0, lsl #4
   b7ade:	f002 fea4 	bl	ba82a <_ZN6StringaSEPKc>
          if (posicion<23) {
   b7ae2:	6833      	ldr	r3, [r6, #0]
   b7ae4:	2b16      	cmp	r3, #22
   b7ae6:	dc1c      	bgt.n	b7b22 <loop+0xe62>
	const char * c_str() const { return buffer; }
   b7ae8:	011b      	lsls	r3, r3, #4
            snprintf(buf, sizeof(buf), secuencia[posicion]);
   b7aea:	4856      	ldr	r0, [pc, #344]	; (b7c44 <loop+0xf84>)
   b7aec:	f858 2003 	ldr.w	r2, [r8, r3]
   b7af0:	2140      	movs	r1, #64	; 0x40
   b7af2:	f002 fcab 	bl	ba44c <snprintf>
            display.print(buf);
   b7af6:	4953      	ldr	r1, [pc, #332]	; (b7c44 <loop+0xf84>)
   b7af8:	4853      	ldr	r0, [pc, #332]	; (b7c48 <loop+0xf88>)
   b7afa:	f002 ff23 	bl	ba944 <_ZN5Print5printEPKc>
            display.display();
   b7afe:	4852      	ldr	r0, [pc, #328]	; (b7c48 <loop+0xf88>)
   b7b00:	f002 f8ca 	bl	b9c98 <_ZN16Adafruit_SSD13067displayEv>
          notas[posicion] = -1;
   b7b04:	6833      	ldr	r3, [r6, #0]
   b7b06:	4a51      	ldr	r2, [pc, #324]	; (b7c4c <loop+0xf8c>)
   b7b08:	f04f 31ff 	mov.w	r1, #4294967295
   b7b0c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
          duraciones[posicion] = 0;
   b7b10:	4a4f      	ldr	r2, [pc, #316]	; (b7c50 <loop+0xf90>)
   b7b12:	2100      	movs	r1, #0
   b7b14:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
          posicion++;
   b7b18:	3301      	adds	r3, #1
   b7b1a:	6033      	str	r3, [r6, #0]
          bucle = true;
   b7b1c:	2301      	movs	r3, #1
   b7b1e:	703b      	strb	r3, [r7, #0]
   b7b20:	e6de      	b.n	b78e0 <loop+0xc20>
          } else if (posicion==23){
   b7b22:	2b17      	cmp	r3, #23
   b7b24:	d1ee      	bne.n	b7b04 <loop+0xe44>
            snprintf(buf, sizeof(buf), "...");
   b7b26:	494d      	ldr	r1, [pc, #308]	; (b7c5c <loop+0xf9c>)
   b7b28:	4846      	ldr	r0, [pc, #280]	; (b7c44 <loop+0xf84>)
   b7b2a:	f003 fd0f 	bl	bb54c <strcpy>
   b7b2e:	e7e2      	b.n	b7af6 <loop+0xe36>
          Serial.println("Para comenzar un loop hay que finalizar el anterior.");
   b7b30:	f003 f96a 	bl	bae08 <_Z16_fetch_usbserialv>
   b7b34:	494c      	ldr	r1, [pc, #304]	; (b7c68 <loop+0xfa8>)
          Serial.println("Loop sin comenzar o sin contenido");
   b7b36:	f002 ff18 	bl	ba96a <_ZN5Print7printlnEPKc>
          showBitmap(2,2,"");
   b7b3a:	494c      	ldr	r1, [pc, #304]	; (b7c6c <loop+0xfac>)
   b7b3c:	a8c0      	add	r0, sp, #768	; 0x300
   b7b3e:	f002 fe46 	bl	ba7ce <_ZN6StringC1EPK19__FlashStringHelper>
   b7b42:	2102      	movs	r1, #2
   b7b44:	aac0      	add	r2, sp, #768	; 0x300
   b7b46:	4608      	mov	r0, r1
   b7b48:	e728      	b.n	b799c <loop+0xcdc>
        if (bucle && tam_bucle>0) {
   b7b4a:	4f42      	ldr	r7, [pc, #264]	; (b7c54 <loop+0xf94>)
   b7b4c:	783b      	ldrb	r3, [r7, #0]
   b7b4e:	2b00      	cmp	r3, #0
   b7b50:	d057      	beq.n	b7c02 <loop+0xf42>
   b7b52:	f8df 8104 	ldr.w	r8, [pc, #260]	; b7c58 <loop+0xf98>
   b7b56:	f8d8 3000 	ldr.w	r3, [r8]
   b7b5a:	2b00      	cmp	r3, #0
   b7b5c:	dd51      	ble.n	b7c02 <loop+0xf42>
          Serial.println("END Loop");
   b7b5e:	f003 f953 	bl	bae08 <_Z16_fetch_usbserialv>
   b7b62:	4943      	ldr	r1, [pc, #268]	; (b7c70 <loop+0xfb0>)
          secuencia[posicion] = String(tagInfo[2]+2)+"rep - ";
   b7b64:	4e34      	ldr	r6, [pc, #208]	; (b7c38 <loop+0xf78>)
   b7b66:	f8df 90d4 	ldr.w	r9, [pc, #212]	; b7c3c <loop+0xf7c>
          Serial.println("END Loop");
   b7b6a:	f002 fefe 	bl	ba96a <_ZN5Print7printlnEPKc>
          secuencia[posicion] = String(tagInfo[2]+2)+"rep - ";
   b7b6e:	68a1      	ldr	r1, [r4, #8]
   b7b70:	220a      	movs	r2, #10
   b7b72:	3102      	adds	r1, #2
   b7b74:	a8bc      	add	r0, sp, #752	; 0x2f0
   b7b76:	f002 fe6a 	bl	ba84e <_ZN6StringC1Eih>
	StringSumHelper(const String &s) : String(s) {}
   b7b7a:	a9bc      	add	r1, sp, #752	; 0x2f0
   b7b7c:	a8c0      	add	r0, sp, #768	; 0x300
   b7b7e:	f002 fe49 	bl	ba814 <_ZN6StringC1ERKS_>
   b7b82:	493c      	ldr	r1, [pc, #240]	; (b7c74 <loop+0xfb4>)
   b7b84:	a8c0      	add	r0, sp, #768	; 0x300
   b7b86:	f002 fe98 	bl	ba8ba <_ZplRK15StringSumHelperPKc>
   b7b8a:	4601      	mov	r1, r0
   b7b8c:	6830      	ldr	r0, [r6, #0]
   b7b8e:	eb09 1000 	add.w	r0, r9, r0, lsl #4
   b7b92:	f002 fe30 	bl	ba7f6 <_ZN6StringaSERKS_>
class StringSumHelper : public String
   b7b96:	a8c0      	add	r0, sp, #768	; 0x300
   b7b98:	f002 fdce 	bl	ba738 <_ZN6StringD1Ev>
   b7b9c:	a8bc      	add	r0, sp, #752	; 0x2f0
   b7b9e:	f002 fdcb 	bl	ba738 <_ZN6StringD1Ev>
          if (posicion<23) {
   b7ba2:	6833      	ldr	r3, [r6, #0]
   b7ba4:	2b16      	cmp	r3, #22
   b7ba6:	dc25      	bgt.n	b7bf4 <loop+0xf34>
	const char * c_str() const { return buffer; }
   b7ba8:	011b      	lsls	r3, r3, #4
            snprintf(buf, sizeof(buf), secuencia[posicion]);
   b7baa:	4826      	ldr	r0, [pc, #152]	; (b7c44 <loop+0xf84>)
   b7bac:	f859 2003 	ldr.w	r2, [r9, r3]
   b7bb0:	2140      	movs	r1, #64	; 0x40
   b7bb2:	f002 fc4b 	bl	ba44c <snprintf>
            display.print(buf);
   b7bb6:	4923      	ldr	r1, [pc, #140]	; (b7c44 <loop+0xf84>)
   b7bb8:	4823      	ldr	r0, [pc, #140]	; (b7c48 <loop+0xf88>)
   b7bba:	f002 fec3 	bl	ba944 <_ZN5Print5printEPKc>
            display.display();
   b7bbe:	4822      	ldr	r0, [pc, #136]	; (b7c48 <loop+0xf88>)
   b7bc0:	f002 f86a 	bl	b9c98 <_ZN16Adafruit_SSD13067displayEv>
          notas[posicion] = -2;
   b7bc4:	6833      	ldr	r3, [r6, #0]
   b7bc6:	4a21      	ldr	r2, [pc, #132]	; (b7c4c <loop+0xf8c>)
          duraciones[posicion] = tam_bucle; // Almacenamos el tamaño del bucle en la posicion donde acaba
   b7bc8:	4821      	ldr	r0, [pc, #132]	; (b7c50 <loop+0xf90>)
          notas[posicion] = -2;
   b7bca:	f06f 0101 	mvn.w	r1, #1
   b7bce:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
          duraciones[posicion] = tam_bucle; // Almacenamos el tamaño del bucle en la posicion donde acaba
   b7bd2:	f8d8 2000 	ldr.w	r2, [r8]
   b7bd6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
          duraciones[posicion - (tam_bucle+1)] = tagInfo[2]+2; // Almacenamos el num de iteraciones en la posicion de inicio del bucle
   b7bda:	68a1      	ldr	r1, [r4, #8]
   b7bdc:	3201      	adds	r2, #1
   b7bde:	1a9a      	subs	r2, r3, r2
          posicion++;
   b7be0:	3301      	adds	r3, #1
          duraciones[posicion - (tam_bucle+1)] = tagInfo[2]+2; // Almacenamos el num de iteraciones en la posicion de inicio del bucle
   b7be2:	3102      	adds	r1, #2
          posicion++;
   b7be4:	6033      	str	r3, [r6, #0]
          bucle = false;
   b7be6:	2300      	movs	r3, #0
          duraciones[posicion - (tam_bucle+1)] = tagInfo[2]+2; // Almacenamos el num de iteraciones en la posicion de inicio del bucle
   b7be8:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
          bucle = false;
   b7bec:	703b      	strb	r3, [r7, #0]
          tam_bucle = 0;
   b7bee:	f8c8 3000 	str.w	r3, [r8]
   b7bf2:	e675      	b.n	b78e0 <loop+0xc20>
          } else if (posicion==23){
   b7bf4:	2b17      	cmp	r3, #23
   b7bf6:	d1e5      	bne.n	b7bc4 <loop+0xf04>
            snprintf(buf, sizeof(buf), "...");
   b7bf8:	4918      	ldr	r1, [pc, #96]	; (b7c5c <loop+0xf9c>)
   b7bfa:	4812      	ldr	r0, [pc, #72]	; (b7c44 <loop+0xf84>)
   b7bfc:	f003 fca6 	bl	bb54c <strcpy>
   b7c00:	e7d9      	b.n	b7bb6 <loop+0xef6>
          Serial.println("Loop sin comenzar o sin contenido");
   b7c02:	f003 f901 	bl	bae08 <_Z16_fetch_usbserialv>
   b7c06:	491c      	ldr	r1, [pc, #112]	; (b7c78 <loop+0xfb8>)
   b7c08:	e795      	b.n	b7b36 <loop+0xe76>
      if ( tagInfo[0] != -1 ) {
   b7c0a:	3601      	adds	r6, #1
   b7c0c:	f43f ae68 	beq.w	b78e0 <loop+0xc20>
        Serial.println("Tarjeta inválida para este modo");
   b7c10:	f003 f8fa 	bl	bae08 <_Z16_fetch_usbserialv>
   b7c14:	4919      	ldr	r1, [pc, #100]	; (b7c7c <loop+0xfbc>)
   b7c16:	f002 fea8 	bl	ba96a <_ZN5Print7printlnEPKc>
        showBitmap(2,0,"");
   b7c1a:	4914      	ldr	r1, [pc, #80]	; (b7c6c <loop+0xfac>)
   b7c1c:	a8c0      	add	r0, sp, #768	; 0x300
   b7c1e:	f002 fdd6 	bl	ba7ce <_ZN6StringC1EPK19__FlashStringHelper>
   b7c22:	aac0      	add	r2, sp, #768	; 0x300
   b7c24:	2100      	movs	r1, #0
   b7c26:	4638      	mov	r0, r7
   b7c28:	e6b8      	b.n	b799c <loop+0xcdc>
   b7c2a:	bf00      	nop
   b7c2c:	000bc108 	.word	0x000bc108
   b7c30:	000bc116 	.word	0x000bc116
   b7c34:	000bbddb 	.word	0x000bbddb
   b7c38:	2003da34 	.word	0x2003da34
   b7c3c:	2003da50 	.word	0x2003da50
   b7c40:	000bc176 	.word	0x000bc176
   b7c44:	2003d301 	.word	0x2003d301
   b7c48:	2003d34c 	.word	0x2003d34c
   b7c4c:	2003d704 	.word	0x2003d704
   b7c50:	2003d3bc 	.word	0x2003d3bc
   b7c54:	2003d300 	.word	0x2003d300
   b7c58:	2003dc38 	.word	0x2003dc38
   b7c5c:	000bbd89 	.word	0x000bbd89
   b7c60:	000bc16e 	.word	0x000bc16e
   b7c64:	000bc12d 	.word	0x000bc12d
   b7c68:	000bc135 	.word	0x000bc135
   b7c6c:	000bb89e 	.word	0x000bb89e
   b7c70:	000bc16a 	.word	0x000bc16a
   b7c74:	000bc173 	.word	0x000bc173
   b7c78:	000bc17a 	.word	0x000bc17a
   b7c7c:	000bc07e 	.word	0x000bc07e
    switch (tagInfo[0])
   b7c80:	2e03      	cmp	r6, #3
   b7c82:	4f77      	ldr	r7, [pc, #476]	; (b7e60 <loop+0x11a0>)
   b7c84:	d057      	beq.n	b7d36 <loop+0x1076>
   b7c86:	2e06      	cmp	r6, #6
   b7c88:	f040 8088 	bne.w	b7d9c <loop+0x10dc>
   b7c8c:	f7fd fc08 	bl	b54a0 <_Z12pitidoBlink0v>
        switch (tagInfo[1])
   b7c90:	6866      	ldr	r6, [r4, #4]
   b7c92:	2e01      	cmp	r6, #1
   b7c94:	d029      	beq.n	b7cea <loop+0x102a>
   b7c96:	2e02      	cmp	r6, #2
   b7c98:	d029      	beq.n	b7cee <loop+0x102e>
   b7c9a:	b92e      	cbnz	r6, b7ca8 <loop+0xfe8>
            cambioModo(tagInfo[2]);
   b7c9c:	68a0      	ldr	r0, [r4, #8]
   b7c9e:	f7fe ffb5 	bl	b6c0c <_Z10cambioModoi>
            resetFunc();
   b7ca2:	4b70      	ldr	r3, [pc, #448]	; (b7e64 <loop+0x11a4>)
   b7ca4:	681b      	ldr	r3, [r3, #0]
   b7ca6:	4798      	blx	r3
    if (tagInfo[0]!=-1) { 
   b7ca8:	6823      	ldr	r3, [r4, #0]
    if ( numSensoresBloque > 0 &&  play == true) {
   b7caa:	683e      	ldr	r6, [r7, #0]
    if (tagInfo[0]!=-1) { 
   b7cac:	3301      	adds	r3, #1
      tagInfo[0]=-1;
   b7cae:	bf1c      	itt	ne
   b7cb0:	f04f 33ff 	movne.w	r3, #4294967295
   b7cb4:	6023      	strne	r3, [r4, #0]
    if ( numSensoresBloque > 0 &&  play == true) {
   b7cb6:	2e00      	cmp	r6, #0
   b7cb8:	f340 80bd 	ble.w	b7e36 <loop+0x1176>
   b7cbc:	782b      	ldrb	r3, [r5, #0]
   b7cbe:	2b00      	cmp	r3, #0
   b7cc0:	f43f aa28 	beq.w	b7114 <loop+0x454>
          val = leerSensorExp(bloques[0].sensores[0].id, bloques[0].sensores[0].puerto);
   b7cc4:	4b68      	ldr	r3, [pc, #416]	; (b7e68 <loop+0x11a8>)
   b7cc6:	4d69      	ldr	r5, [pc, #420]	; (b7e6c <loop+0x11ac>)
   b7cc8:	6919      	ldr	r1, [r3, #16]
   b7cca:	6858      	ldr	r0, [r3, #4]
   b7ccc:	f7fd fafc 	bl	b52c8 <_Z13leerSensorExpii>
   b7cd0:	68e3      	ldr	r3, [r4, #12]
   b7cd2:	6028      	str	r0, [r5, #0]
          switch (tagInfo[3])
   b7cd4:	3b02      	subs	r3, #2
   b7cd6:	2b0a      	cmp	r3, #10
   b7cd8:	d87b      	bhi.n	b7dd2 <loop+0x1112>
   b7cda:	e8df f003 	tbb	[pc, r3]
   b7cde:	6e69      	.short	0x6e69
   b7ce0:	9e72707a 	.word	0x9e72707a
   b7ce4:	7a7a7a7a 	.word	0x7a7a7a7a
   b7ce8:	a0          	.byte	0xa0
   b7ce9:	00          	.byte	0x00
            play = true;
   b7cea:	702e      	strb	r6, [r5, #0]
            break;
   b7cec:	e7dc      	b.n	b7ca8 <loop+0xfe8>
            if ( tagInfo[2] == 1 ) {
   b7cee:	68a3      	ldr	r3, [r4, #8]
   b7cf0:	2b01      	cmp	r3, #1
   b7cf2:	d10e      	bne.n	b7d12 <loop+0x1052>
              showBitmap(3,0,"Borrado completo realizado");
   b7cf4:	495e      	ldr	r1, [pc, #376]	; (b7e70 <loop+0x11b0>)
   b7cf6:	a8c0      	add	r0, sp, #768	; 0x300
   b7cf8:	f7fc febc 	bl	b4a74 <_Z10borradoALLi.part.0>
   b7cfc:	f002 fd67 	bl	ba7ce <_ZN6StringC1EPK19__FlashStringHelper>
   b7d00:	aac0      	add	r2, sp, #768	; 0x300
   b7d02:	2100      	movs	r1, #0
   b7d04:	2003      	movs	r0, #3
          showBitmap(2,0,"");
   b7d06:	f7fe fcf3 	bl	b66f0 <_Z10showBitmapii6String>
   b7d0a:	a8c0      	add	r0, sp, #768	; 0x300
   b7d0c:	f002 fd14 	bl	ba738 <_ZN6StringD1Ev>
   b7d10:	e7ca      	b.n	b7ca8 <loop+0xfe8>
              showBitmap(2,1,"");
   b7d12:	4958      	ldr	r1, [pc, #352]	; (b7e74 <loop+0x11b4>)
   b7d14:	a8c0      	add	r0, sp, #768	; 0x300
   b7d16:	f002 fd5a 	bl	ba7ce <_ZN6StringC1EPK19__FlashStringHelper>
   b7d1a:	aac0      	add	r2, sp, #768	; 0x300
   b7d1c:	2101      	movs	r1, #1
   b7d1e:	4630      	mov	r0, r6
   b7d20:	f7fe fce6 	bl	b66f0 <_Z10showBitmapii6String>
   b7d24:	a8c0      	add	r0, sp, #768	; 0x300
   b7d26:	f002 fd07 	bl	ba738 <_ZN6StringD1Ev>
              Serial.println("Borrado no permitido para este modo");
   b7d2a:	f003 f86d 	bl	bae08 <_Z16_fetch_usbserialv>
   b7d2e:	4952      	ldr	r1, [pc, #328]	; (b7e78 <loop+0x11b8>)
   b7d30:	f002 fe1b 	bl	ba96a <_ZN5Print7printlnEPKc>
   b7d34:	e7b8      	b.n	b7ca8 <loop+0xfe8>
        id = tagInfo[3];
   b7d36:	f8df a17c 	ldr.w	sl, [pc, #380]	; b7eb4 <loop+0x11f4>
   b7d3a:	68e3      	ldr	r3, [r4, #12]
        tipo = tagInfo[2];
   b7d3c:	f8df 9178 	ldr.w	r9, [pc, #376]	; b7eb8 <loop+0x11f8>
        if (tagInfo[1] == 0) {
   b7d40:	f8d4 8004 	ldr.w	r8, [r4, #4]
        id = tagInfo[3];
   b7d44:	f8ca 3000 	str.w	r3, [sl]
        tipo = tagInfo[2];
   b7d48:	68a3      	ldr	r3, [r4, #8]
   b7d4a:	f8c9 3000 	str.w	r3, [r9]
        if (tagInfo[1] == 0) {
   b7d4e:	f1b8 0f00 	cmp.w	r8, #0
   b7d52:	d1a9      	bne.n	b7ca8 <loop+0xfe8>
          Serial.println("Sensor detectado");
   b7d54:	f003 f858 	bl	bae08 <_Z16_fetch_usbserialv>
   b7d58:	4948      	ldr	r1, [pc, #288]	; (b7e7c <loop+0x11bc>)
   b7d5a:	f002 fe06 	bl	ba96a <_ZN5Print7printlnEPKc>
          bloques[0].sensores[0] = sensor;
   b7d5e:	4a42      	ldr	r2, [pc, #264]	; (b7e68 <loop+0x11a8>)
          tipo == 0 ? sensor.puerto = 0 : sensor.puerto = 2;
   b7d60:	f8d9 3000 	ldr.w	r3, [r9]
          sensor.id = id;
   b7d64:	f8da 1000 	ldr.w	r1, [sl]
          bloques[0].sensores[0] = sensor;
   b7d68:	6051      	str	r1, [r2, #4]
          bloques[0].numSensores++;
   b7d6a:	6811      	ldr	r1, [r2, #0]
          tipo == 0 ? sensor.puerto = 0 : sensor.puerto = 2;
   b7d6c:	2b00      	cmp	r3, #0
          bloques[0].numSensores++;
   b7d6e:	f101 0101 	add.w	r1, r1, #1
          tipo == 0 ? sensor.puerto = 0 : sensor.puerto = 2;
   b7d72:	bf18      	it	ne
   b7d74:	2302      	movne	r3, #2
          bloques[0].numSensores++;
   b7d76:	6011      	str	r1, [r2, #0]
          bloques[0].sensores[0] = sensor;
   b7d78:	6113      	str	r3, [r2, #16]
          numSensoresBloque++;
   b7d7a:	683a      	ldr	r2, [r7, #0]
            showBitmap(1,3,""); //A0
   b7d7c:	493d      	ldr	r1, [pc, #244]	; (b7e74 <loop+0x11b4>)
          numSensoresBloque++;
   b7d7e:	3201      	adds	r2, #1
   b7d80:	603a      	str	r2, [r7, #0]
            showBitmap(1,3,""); //A0
   b7d82:	a8c0      	add	r0, sp, #768	; 0x300
          if (sensor.puerto == 0) {
   b7d84:	b92b      	cbnz	r3, b7d92 <loop+0x10d2>
            showBitmap(1,3,""); //A0
   b7d86:	f002 fd22 	bl	ba7ce <_ZN6StringC1EPK19__FlashStringHelper>
   b7d8a:	aac0      	add	r2, sp, #768	; 0x300
   b7d8c:	4631      	mov	r1, r6
            showBitmap(1,0,""); //D2
   b7d8e:	2001      	movs	r0, #1
   b7d90:	e7b9      	b.n	b7d06 <loop+0x1046>
   b7d92:	f002 fd1c 	bl	ba7ce <_ZN6StringC1EPK19__FlashStringHelper>
   b7d96:	aac0      	add	r2, sp, #768	; 0x300
   b7d98:	4641      	mov	r1, r8
   b7d9a:	e7f8      	b.n	b7d8e <loop+0x10ce>
        if ( tagInfo[0] != -1 ) {
   b7d9c:	3601      	adds	r6, #1
   b7d9e:	d083      	beq.n	b7ca8 <loop+0xfe8>
          showBitmap(2,0,"");
   b7da0:	4934      	ldr	r1, [pc, #208]	; (b7e74 <loop+0x11b4>)
   b7da2:	a8c0      	add	r0, sp, #768	; 0x300
   b7da4:	f002 fd13 	bl	ba7ce <_ZN6StringC1EPK19__FlashStringHelper>
   b7da8:	aac0      	add	r2, sp, #768	; 0x300
   b7daa:	2100      	movs	r1, #0
   b7dac:	2002      	movs	r0, #2
   b7dae:	e7aa      	b.n	b7d06 <loop+0x1046>
              snprintf(buf, sizeof(buf), "         Luz:");
   b7db0:	4933      	ldr	r1, [pc, #204]	; (b7e80 <loop+0x11c0>)
              snprintf(buf, sizeof(buf), "      Turbidez:");
   b7db2:	4834      	ldr	r0, [pc, #208]	; (b7e84 <loop+0x11c4>)
   b7db4:	f003 fbca 	bl	bb54c <strcpy>
              break;
   b7db8:	e00b      	b.n	b7dd2 <loop+0x1112>
              snprintf(buf, sizeof(buf), "  Ruido (decibelios):");
   b7dba:	4933      	ldr	r1, [pc, #204]	; (b7e88 <loop+0x11c8>)
   b7dbc:	e7f9      	b.n	b7db2 <loop+0x10f2>
              snprintf(buf, sizeof(buf), "   Angulo (grados):");
   b7dbe:	4933      	ldr	r1, [pc, #204]	; (b7e8c <loop+0x11cc>)
   b7dc0:	e7f7      	b.n	b7db2 <loop+0x10f2>
              snprintf(buf, sizeof(buf), "  Temperatura (grados):");
   b7dc2:	4933      	ldr	r1, [pc, #204]	; (b7e90 <loop+0x11d0>)
   b7dc4:	482f      	ldr	r0, [pc, #188]	; (b7e84 <loop+0x11c4>)
   b7dc6:	f003 fbc1 	bl	bb54c <strcpy>
              val = ajusta_temp(val);
   b7dca:	6828      	ldr	r0, [r5, #0]
   b7dcc:	f7fe f88a 	bl	b5ee4 <_Z11ajusta_tempi>
   b7dd0:	6028      	str	r0, [r5, #0]
          display.clearDisplay();
   b7dd2:	4c30      	ldr	r4, [pc, #192]	; (b7e94 <loop+0x11d4>)
   b7dd4:	4620      	mov	r0, r4
   b7dd6:	f001 fcf7 	bl	b97c8 <_ZN16Adafruit_SSD130612clearDisplayEv>
   b7dda:	2300      	movs	r3, #0
          display.print(buf);
   b7ddc:	4929      	ldr	r1, [pc, #164]	; (b7e84 <loop+0x11c4>)
   b7dde:	6123      	str	r3, [r4, #16]
   b7de0:	4620      	mov	r0, r4
   b7de2:	f002 fdaf 	bl	ba944 <_ZN5Print5printEPKc>
          snprintf(buf, sizeof(buf), "%d", val);
   b7de6:	682b      	ldr	r3, [r5, #0]
   b7de8:	4a2b      	ldr	r2, [pc, #172]	; (b7e98 <loop+0x11d8>)
   b7dea:	4826      	ldr	r0, [pc, #152]	; (b7e84 <loop+0x11c4>)
   b7dec:	2140      	movs	r1, #64	; 0x40
   b7dee:	f002 fb2d 	bl	ba44c <snprintf>
          if (val <= 9){
   b7df2:	682b      	ldr	r3, [r5, #0]
   b7df4:	2b09      	cmp	r3, #9
   b7df6:	dc14      	bgt.n	b7e22 <loop+0x1162>
   b7df8:	4b28      	ldr	r3, [pc, #160]	; (b7e9c <loop+0x11dc>)
   b7dfa:	6123      	str	r3, [r4, #16]
          display.setTextSize(4);
   b7dfc:	4825      	ldr	r0, [pc, #148]	; (b7e94 <loop+0x11d4>)
   b7dfe:	2104      	movs	r1, #4
   b7e00:	f000 fe1d 	bl	b8a3e <_ZN12Adafruit_GFX11setTextSizeEh>
          display.print(buf);
   b7e04:	491f      	ldr	r1, [pc, #124]	; (b7e84 <loop+0x11c4>)
   b7e06:	4823      	ldr	r0, [pc, #140]	; (b7e94 <loop+0x11d4>)
   b7e08:	f002 fd9c 	bl	ba944 <_ZN5Print5printEPKc>
          display.setTextSize(1);
   b7e0c:	4821      	ldr	r0, [pc, #132]	; (b7e94 <loop+0x11d4>)
   b7e0e:	2101      	movs	r1, #1
   b7e10:	f000 fe15 	bl	b8a3e <_ZN12Adafruit_GFX11setTextSizeEh>
          display.display();
   b7e14:	481f      	ldr	r0, [pc, #124]	; (b7e94 <loop+0x11d4>)
   b7e16:	f7ff b88f 	b.w	b6f38 <loop+0x278>
              snprintf(buf, sizeof(buf), "   Distancia (cm):");
   b7e1a:	4921      	ldr	r1, [pc, #132]	; (b7ea0 <loop+0x11e0>)
   b7e1c:	e7c9      	b.n	b7db2 <loop+0x10f2>
              snprintf(buf, sizeof(buf), "      Turbidez:");
   b7e1e:	4921      	ldr	r1, [pc, #132]	; (b7ea4 <loop+0x11e4>)
   b7e20:	e7c7      	b.n	b7db2 <loop+0x10f2>
          } else if (val <= 99){
   b7e22:	2b63      	cmp	r3, #99	; 0x63
   b7e24:	dc01      	bgt.n	b7e2a <loop+0x116a>
   b7e26:	4b20      	ldr	r3, [pc, #128]	; (b7ea8 <loop+0x11e8>)
   b7e28:	e7e7      	b.n	b7dfa <loop+0x113a>
          } else if (val <= 999){
   b7e2a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   b7e2e:	bfb4      	ite	lt
   b7e30:	4b1e      	ldrlt	r3, [pc, #120]	; (b7eac <loop+0x11ec>)
   b7e32:	4b1f      	ldrge	r3, [pc, #124]	; (b7eb0 <loop+0x11f0>)
   b7e34:	e7e1      	b.n	b7dfa <loop+0x113a>
        }  else if (numSensoresBloque==0 && play == true) {
   b7e36:	f47f a96d 	bne.w	b7114 <loop+0x454>
   b7e3a:	782b      	ldrb	r3, [r5, #0]
   b7e3c:	2b00      	cmp	r3, #0
   b7e3e:	f43f a969 	beq.w	b7114 <loop+0x454>
              showBitmap(2,4,"");
   b7e42:	490c      	ldr	r1, [pc, #48]	; (b7e74 <loop+0x11b4>)
   b7e44:	a8c0      	add	r0, sp, #768	; 0x300
   b7e46:	f002 fcc2 	bl	ba7ce <_ZN6StringC1EPK19__FlashStringHelper>
   b7e4a:	aac0      	add	r2, sp, #768	; 0x300
   b7e4c:	2104      	movs	r1, #4
   b7e4e:	2002      	movs	r0, #2
   b7e50:	f7fe fc4e 	bl	b66f0 <_Z10showBitmapii6String>
   b7e54:	a8c0      	add	r0, sp, #768	; 0x300
   b7e56:	f002 fc6f 	bl	ba738 <_ZN6StringD1Ev>
              play=false;
   b7e5a:	702e      	strb	r6, [r5, #0]
   b7e5c:	f7ff b95a 	b.w	b7114 <loop+0x454>
   b7e60:	2003da2c 	.word	0x2003da2c
   b7e64:	2003da48 	.word	0x2003da48
   b7e68:	2003cd28 	.word	0x2003cd28
   b7e6c:	2003e6b4 	.word	0x2003e6b4
   b7e70:	000bbddb 	.word	0x000bbddb
   b7e74:	000bb89e 	.word	0x000bb89e
   b7e78:	000bbdf6 	.word	0x000bbdf6
   b7e7c:	000bbe1a 	.word	0x000bbe1a
   b7e80:	000bc19c 	.word	0x000bc19c
   b7e84:	2003d301 	.word	0x2003d301
   b7e88:	000bc1aa 	.word	0x000bc1aa
   b7e8c:	000bc1c0 	.word	0x000bc1c0
   b7e90:	000bc1d4 	.word	0x000bc1d4
   b7e94:	2003d34c 	.word	0x2003d34c
   b7e98:	000bc07b 	.word	0x000bc07b
   b7e9c:	00190035 	.word	0x00190035
   b7ea0:	000bc1ec 	.word	0x000bc1ec
   b7ea4:	000bc1ff 	.word	0x000bc1ff
   b7ea8:	00190028 	.word	0x00190028
   b7eac:	0019001b 	.word	0x0019001b
   b7eb0:	0019000a 	.word	0x0019000a
   b7eb4:	2003d6e0 	.word	0x2003d6e0
   b7eb8:	2003e6b0 	.word	0x2003e6b0

000b7ebc <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   b7ebc:	4770      	bx	lr

000b7ebe <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   b7ebe:	b510      	push	{r4, lr}
  }
   b7ec0:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   b7ec2:	4604      	mov	r4, r0
  }
   b7ec4:	f7fc fdbf 	bl	b4a46 <_ZdlPvj>
   b7ec8:	4620      	mov	r0, r4
   b7eca:	bd10      	pop	{r4, pc}

000b7ecc <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   b7ecc:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b7ece:	4604      	mov	r4, r0
   b7ed0:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   b7ed2:	7922      	ldrb	r2, [r4, #4]
   b7ed4:	68a3      	ldr	r3, [r4, #8]
   b7ed6:	b132      	cbz	r2, b7ee6 <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   b7ed8:	b9a3      	cbnz	r3, b7f04 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   b7eda:	490b      	ldr	r1, [pc, #44]	; (b7f08 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   b7edc:	b002      	add	sp, #8
   b7ede:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   b7ee2:	f002 bd2f 	b.w	ba944 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b7ee6:	4a09      	ldr	r2, [pc, #36]	; (b7f0c <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   b7ee8:	7b26      	ldrb	r6, [r4, #12]
   b7eea:	4d09      	ldr	r5, [pc, #36]	; (b7f10 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   b7eec:	4909      	ldr	r1, [pc, #36]	; (b7f14 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   b7eee:	7b64      	ldrb	r4, [r4, #13]
   b7ef0:	2e01      	cmp	r6, #1
   b7ef2:	bf18      	it	ne
   b7ef4:	4629      	movne	r1, r5
   b7ef6:	e9cd 1400 	strd	r1, r4, [sp]
   b7efa:	4907      	ldr	r1, [pc, #28]	; (b7f18 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   b7efc:	f7fc fded 	bl	b4ada <_ZN5Print6printfEPKcz>
  }
   b7f00:	b002      	add	sp, #8
   b7f02:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b7f04:	4a05      	ldr	r2, [pc, #20]	; (b7f1c <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   b7f06:	e7ef      	b.n	b7ee8 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   b7f08:	000bc62b 	.word	0x000bc62b
   b7f0c:	000bb89e 	.word	0x000bb89e
   b7f10:	000bc627 	.word	0x000bc627
   b7f14:	000bc623 	.word	0x000bc623
   b7f18:	000bc641 	.word	0x000bc641
   b7f1c:	000bc61a 	.word	0x000bc61a

000b7f20 <_ZN12Adafruit_GFX9writeLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   b7f20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7f24:	b085      	sub	sp, #20
   b7f26:	461f      	mov	r7, r3
   b7f28:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
   b7f2c:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
#if defined(ESP8266)
    yield();
#endif
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   b7f30:	eba8 0902 	sub.w	r9, r8, r2
   b7f34:	eba7 0a01 	sub.w	sl, r7, r1
   b7f38:	f1b9 0f00 	cmp.w	r9, #0
   b7f3c:	bfb8      	it	lt
   b7f3e:	f1c9 0900 	rsblt	r9, r9, #0
   b7f42:	f1ba 0f00 	cmp.w	sl, #0
   b7f46:	bfb8      	it	lt
   b7f48:	f1ca 0a00 	rsblt	sl, sl, #0
    if (steep) {
   b7f4c:	45d1      	cmp	r9, sl
        uint16_t color) {
   b7f4e:	4683      	mov	fp, r0
   b7f50:	460c      	mov	r4, r1
   b7f52:	4615      	mov	r5, r2
    if (steep) {
   b7f54:	dd04      	ble.n	b7f60 <_ZN12Adafruit_GFX9writeLineEsssst+0x40>
   b7f56:	463a      	mov	r2, r7
        _swap_int16_t(x0, y0);
   b7f58:	462c      	mov	r4, r5
        _swap_int16_t(x1, y1);
   b7f5a:	4647      	mov	r7, r8
        _swap_int16_t(x0, y0);
   b7f5c:	460d      	mov	r5, r1
        _swap_int16_t(x1, y1);
   b7f5e:	4690      	mov	r8, r2
    }

    if (x0 > x1) {
   b7f60:	42bc      	cmp	r4, r7
   b7f62:	dd05      	ble.n	b7f70 <_ZN12Adafruit_GFX9writeLineEsssst+0x50>
   b7f64:	462a      	mov	r2, r5
        _swap_int16_t(x0, x1);
        _swap_int16_t(y0, y1);
   b7f66:	4645      	mov	r5, r8
   b7f68:	4690      	mov	r8, r2
    if (x0 > x1) {
   b7f6a:	4622      	mov	r2, r4
   b7f6c:	463c      	mov	r4, r7
   b7f6e:	4617      	mov	r7, r2
    }

    int16_t dx, dy;
    dx = x1 - x0;
   b7f70:	1b3e      	subs	r6, r7, r4
   b7f72:	b2b2      	uxth	r2, r6
   b7f74:	9200      	str	r2, [sp, #0]
    dy = abs(y1 - y0);
   b7f76:	eba8 0205 	sub.w	r2, r8, r5
   b7f7a:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
   b7f7e:	eba1 71e2 	sub.w	r1, r1, r2, asr #31

    int16_t err = dx / 2;
   b7f82:	f3c6 32c0 	ubfx	r2, r6, #15, #1
   b7f86:	fa02 f686 	sxtah	r6, r2, r6
    int16_t ystep;

    if (y0 < y1) {
        ystep = 1;
    } else {
        ystep = -1;
   b7f8a:	4545      	cmp	r5, r8
   b7f8c:	bfb4      	ite	lt
   b7f8e:	2201      	movlt	r2, #1
   b7f90:	f04f 32ff 	movge.w	r2, #4294967295
    dy = abs(y1 - y0);
   b7f94:	9101      	str	r1, [sp, #4]
    int16_t err = dx / 2;
   b7f96:	1076      	asrs	r6, r6, #1
        ystep = -1;
   b7f98:	9202      	str	r2, [sp, #8]
    }

    for (; x0<=x1; x0++) {
   b7f9a:	42bc      	cmp	r4, r7
   b7f9c:	dc1c      	bgt.n	b7fd8 <_ZN12Adafruit_GFX9writeLineEsssst+0xb8>
        if (steep) {
            writePixel(y0, x0, color);
   b7f9e:	f8db 2000 	ldr.w	r2, [fp]
   b7fa2:	9303      	str	r3, [sp, #12]
        if (steep) {
   b7fa4:	45d1      	cmp	r9, sl
            writePixel(y0, x0, color);
   b7fa6:	f8d2 8018 	ldr.w	r8, [r2, #24]
   b7faa:	bfc7      	ittee	gt
   b7fac:	4629      	movgt	r1, r5
   b7fae:	4622      	movgt	r2, r4
        } else {
            writePixel(x0, y0, color);
   b7fb0:	462a      	movle	r2, r5
   b7fb2:	4621      	movle	r1, r4
   b7fb4:	4658      	mov	r0, fp
   b7fb6:	47c0      	blx	r8
        }
        err -= dy;
   b7fb8:	9a01      	ldr	r2, [sp, #4]
            writePixel(x0, y0, color);
   b7fba:	9b03      	ldr	r3, [sp, #12]
        err -= dy;
   b7fbc:	1ab6      	subs	r6, r6, r2
   b7fbe:	b2b1      	uxth	r1, r6
   b7fc0:	b236      	sxth	r6, r6
        if (err < 0) {
   b7fc2:	2e00      	cmp	r6, #0
   b7fc4:	da05      	bge.n	b7fd2 <_ZN12Adafruit_GFX9writeLineEsssst+0xb2>
            y0 += ystep;
   b7fc6:	9a02      	ldr	r2, [sp, #8]
   b7fc8:	4415      	add	r5, r2
            err += dx;
   b7fca:	9a00      	ldr	r2, [sp, #0]
   b7fcc:	1856      	adds	r6, r2, r1
            y0 += ystep;
   b7fce:	b22d      	sxth	r5, r5
            err += dx;
   b7fd0:	b236      	sxth	r6, r6
    for (; x0<=x1; x0++) {
   b7fd2:	3401      	adds	r4, #1
   b7fd4:	b224      	sxth	r4, r4
   b7fd6:	e7e0      	b.n	b7f9a <_ZN12Adafruit_GFX9writeLineEsssst+0x7a>
        }
    }
}
   b7fd8:	b005      	add	sp, #20
   b7fda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b7fde <_ZN12Adafruit_GFX10startWriteEv>:
/*!
   @brief    Start a display-writing routine, overwrite in subclasses.
*/
/**************************************************************************/
void Adafruit_GFX::startWrite(){
}
   b7fde:	4770      	bx	lr

000b7fe0 <_ZN12Adafruit_GFX10writePixelEsst>:
    @param   x   x coordinate
    @param   y   y coordinate
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writePixel(int16_t x, int16_t y, uint16_t color){
   b7fe0:	b410      	push	{r4}
    drawPixel(x, y, color);
   b7fe2:	6804      	ldr	r4, [r0, #0]
   b7fe4:	6924      	ldr	r4, [r4, #16]
   b7fe6:	46a4      	mov	ip, r4
}
   b7fe8:	f85d 4b04 	ldr.w	r4, [sp], #4
    drawPixel(x, y, color);
   b7fec:	4760      	bx	ip

000b7fee <_ZN12Adafruit_GFX14writeFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   b7fee:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Can be just writeLine(x, y, x, y+h-1, color);
    // or writeFillRect(x, y, 1, h, color);
    drawFastVLine(x, y, h, color);
   b7ff0:	6804      	ldr	r4, [r0, #0]
        int16_t h, uint16_t color) {
   b7ff2:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastVLine(x, y, h, color);
   b7ff6:	9502      	str	r5, [sp, #8]
   b7ff8:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   b7ffa:	46a4      	mov	ip, r4
}
   b7ffc:	bc30      	pop	{r4, r5}
    drawFastVLine(x, y, h, color);
   b7ffe:	4760      	bx	ip

000b8000 <_ZN12Adafruit_GFX14writeFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   b8000:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Example: writeLine(x, y, x+w-1, y, color);
    // or writeFillRect(x, y, w, 1, color);
    drawFastHLine(x, y, w, color);
   b8002:	6804      	ldr	r4, [r0, #0]
        int16_t w, uint16_t color) {
   b8004:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastHLine(x, y, w, color);
   b8008:	9502      	str	r5, [sp, #8]
   b800a:	6be4      	ldr	r4, [r4, #60]	; 0x3c
   b800c:	46a4      	mov	ip, r4
}
   b800e:	bc30      	pop	{r4, r5}
    drawFastHLine(x, y, w, color);
   b8010:	4760      	bx	ip

000b8012 <_ZN12Adafruit_GFX13writeFillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b8012:	b470      	push	{r4, r5, r6}
   b8014:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
   b8018:	f8bd 6010 	ldrh.w	r6, [sp, #16]
    // Overwrite in subclasses if desired!
    fillRect(x,y,w,h,color);
   b801c:	6804      	ldr	r4, [r0, #0]
   b801e:	e9cd 5603 	strd	r5, r6, [sp, #12]
   b8022:	6c24      	ldr	r4, [r4, #64]	; 0x40
   b8024:	46a4      	mov	ip, r4
}
   b8026:	bc70      	pop	{r4, r5, r6}
    fillRect(x,y,w,h,color);
   b8028:	4760      	bx	ip

000b802a <_ZN12Adafruit_GFX13drawFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   b802a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b802e:	461c      	mov	r4, r3
    startWrite();
   b8030:	6803      	ldr	r3, [r0, #0]
        int16_t h, uint16_t color) {
   b8032:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   b8036:	695b      	ldr	r3, [r3, #20]
        int16_t h, uint16_t color) {
   b8038:	4605      	mov	r5, r0
   b803a:	4616      	mov	r6, r2
    writeLine(x, y, x, y+h-1, color);
   b803c:	3c01      	subs	r4, #1
   b803e:	4434      	add	r4, r6
        int16_t h, uint16_t color) {
   b8040:	460f      	mov	r7, r1
    writeLine(x, y, x, y+h-1, color);
   b8042:	b224      	sxth	r4, r4
    startWrite();
   b8044:	4798      	blx	r3
    writeLine(x, y, x, y+h-1, color);
   b8046:	682b      	ldr	r3, [r5, #0]
   b8048:	f8cd 8004 	str.w	r8, [sp, #4]
   b804c:	9400      	str	r4, [sp, #0]
   b804e:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   b8050:	4628      	mov	r0, r5
   b8052:	463b      	mov	r3, r7
   b8054:	4632      	mov	r2, r6
   b8056:	4639      	mov	r1, r7
   b8058:	47a0      	blx	r4
    endWrite();
   b805a:	682b      	ldr	r3, [r5, #0]
   b805c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b805e:	4628      	mov	r0, r5
}
   b8060:	b002      	add	sp, #8
   b8062:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   b8066:	4718      	bx	r3

000b8068 <_ZN12Adafruit_GFX13drawFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   b8068:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b806c:	461d      	mov	r5, r3
    startWrite();
   b806e:	6803      	ldr	r3, [r0, #0]
        int16_t w, uint16_t color) {
   b8070:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   b8074:	695b      	ldr	r3, [r3, #20]
        int16_t w, uint16_t color) {
   b8076:	4604      	mov	r4, r0
   b8078:	4617      	mov	r7, r2
   b807a:	460e      	mov	r6, r1
    startWrite();
   b807c:	4798      	blx	r3
    writeLine(x, y, x+w-1, y, color);
   b807e:	e9cd 7800 	strd	r7, r8, [sp]
   b8082:	6822      	ldr	r2, [r4, #0]
   b8084:	1e6b      	subs	r3, r5, #1
   b8086:	4433      	add	r3, r6
   b8088:	6a95      	ldr	r5, [r2, #40]	; 0x28
   b808a:	4620      	mov	r0, r4
   b808c:	b21b      	sxth	r3, r3
   b808e:	463a      	mov	r2, r7
   b8090:	4631      	mov	r1, r6
   b8092:	47a8      	blx	r5
    endWrite();
   b8094:	6823      	ldr	r3, [r4, #0]
   b8096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b8098:	4620      	mov	r0, r4
}
   b809a:	b002      	add	sp, #8
   b809c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   b80a0:	4718      	bx	r3

000b80a2 <_ZN12Adafruit_GFX8fillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b80a2:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b80a6:	461e      	mov	r6, r3
    startWrite();
   b80a8:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   b80aa:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
    startWrite();
   b80ae:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   b80b0:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   b80b4:	460c      	mov	r4, r1
   b80b6:	4605      	mov	r5, r0
   b80b8:	4617      	mov	r7, r2
    startWrite();
   b80ba:	4798      	blx	r3
    for (int16_t i=x; i<x+w; i++) {
   b80bc:	4426      	add	r6, r4
   b80be:	42b4      	cmp	r4, r6
        writeFastVLine(i, y, h, color);
   b80c0:	682b      	ldr	r3, [r5, #0]
    for (int16_t i=x; i<x+w; i++) {
   b80c2:	da0b      	bge.n	b80dc <_ZN12Adafruit_GFX8fillRectEsssst+0x3a>
        writeFastVLine(i, y, h, color);
   b80c4:	f8cd 8000 	str.w	r8, [sp]
   b80c8:	f8d3 a020 	ldr.w	sl, [r3, #32]
   b80cc:	4621      	mov	r1, r4
   b80ce:	464b      	mov	r3, r9
   b80d0:	463a      	mov	r2, r7
   b80d2:	4628      	mov	r0, r5
   b80d4:	3401      	adds	r4, #1
   b80d6:	47d0      	blx	sl
    for (int16_t i=x; i<x+w; i++) {
   b80d8:	b224      	sxth	r4, r4
   b80da:	e7f0      	b.n	b80be <_ZN12Adafruit_GFX8fillRectEsssst+0x1c>
    }
    endWrite();
   b80dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b80de:	4628      	mov	r0, r5
}
   b80e0:	b002      	add	sp, #8
   b80e2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   b80e6:	4718      	bx	r3

000b80e8 <_ZN12Adafruit_GFX10fillScreenEt>:
/*!
   @brief    Fill the screen completely with one color. Update in subclasses if desired!
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillScreen(uint16_t color) {
   b80e8:	b513      	push	{r0, r1, r4, lr}
    fillRect(0, 0, _width, _height, color);
   b80ea:	6802      	ldr	r2, [r0, #0]
   b80ec:	9101      	str	r1, [sp, #4]
   b80ee:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
   b80f2:	9100      	str	r1, [sp, #0]
   b80f4:	6c14      	ldr	r4, [r2, #64]	; 0x40
   b80f6:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b80fa:	2200      	movs	r2, #0
   b80fc:	4611      	mov	r1, r2
   b80fe:	47a0      	blx	r4
}
   b8100:	b002      	add	sp, #8
   b8102:	bd10      	pop	{r4, pc}

000b8104 <_ZN12Adafruit_GFX8drawLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   b8104:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    // Update in subclasses if desired!
    if(x0 == x1){
   b8108:	4299      	cmp	r1, r3
        uint16_t color) {
   b810a:	4616      	mov	r6, r2
   b810c:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
   b8110:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
        if(y0 > y1) _swap_int16_t(y0, y1);
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b8114:	6802      	ldr	r2, [r0, #0]
        uint16_t color) {
   b8116:	4680      	mov	r8, r0
   b8118:	460d      	mov	r5, r1
   b811a:	461c      	mov	r4, r3
    if(x0 == x1){
   b811c:	d113      	bne.n	b8146 <_ZN12Adafruit_GFX8drawLineEsssst+0x42>
        if(y0 > y1) _swap_int16_t(y0, y1);
   b811e:	42be      	cmp	r6, r7
   b8120:	bfc8      	it	gt
   b8122:	4633      	movgt	r3, r6
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b8124:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
        if(y0 > y1) _swap_int16_t(y0, y1);
   b8128:	bfc4      	itt	gt
   b812a:	463e      	movgt	r6, r7
   b812c:	461f      	movgt	r7, r3
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b812e:	1c7b      	adds	r3, r7, #1
   b8130:	6b94      	ldr	r4, [r2, #56]	; 0x38
   b8132:	1b9b      	subs	r3, r3, r6
    } else if(y0 == y1){
        if(x0 > x1) _swap_int16_t(x0, x1);
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b8134:	b21b      	sxth	r3, r3
   b8136:	4632      	mov	r2, r6
   b8138:	4629      	mov	r1, r5
   b813a:	4640      	mov	r0, r8
   b813c:	46a4      	mov	ip, r4
    } else {
        startWrite();
        writeLine(x0, y0, x1, y1, color);
        endWrite();
    }
}
   b813e:	b003      	add	sp, #12
   b8140:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b8144:	4760      	bx	ip
    } else if(y0 == y1){
   b8146:	42be      	cmp	r6, r7
   b8148:	d10a      	bne.n	b8160 <_ZN12Adafruit_GFX8drawLineEsssst+0x5c>
        if(x0 > x1) _swap_int16_t(x0, x1);
   b814a:	4299      	cmp	r1, r3
   b814c:	bfc2      	ittt	gt
   b814e:	460b      	movgt	r3, r1
   b8150:	4625      	movgt	r5, r4
   b8152:	461c      	movgt	r4, r3
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b8154:	1c63      	adds	r3, r4, #1
   b8156:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   b815a:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b815c:	1b5b      	subs	r3, r3, r5
   b815e:	e7e9      	b.n	b8134 <_ZN12Adafruit_GFX8drawLineEsssst+0x30>
        startWrite();
   b8160:	6953      	ldr	r3, [r2, #20]
   b8162:	4798      	blx	r3
        writeLine(x0, y0, x1, y1, color);
   b8164:	e9cd 7900 	strd	r7, r9, [sp]
   b8168:	f8d8 3000 	ldr.w	r3, [r8]
   b816c:	4640      	mov	r0, r8
   b816e:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   b8170:	4632      	mov	r2, r6
   b8172:	4623      	mov	r3, r4
   b8174:	4629      	mov	r1, r5
   b8176:	47b8      	blx	r7
        endWrite();
   b8178:	f8d8 3000 	ldr.w	r3, [r8]
   b817c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b817e:	4640      	mov	r0, r8
}
   b8180:	b003      	add	sp, #12
   b8182:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        endWrite();
   b8186:	4718      	bx	r3

000b8188 <_ZN12Adafruit_GFX8drawRectEsssst>:
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b8188:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b818c:	461d      	mov	r5, r3
    startWrite();
   b818e:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   b8190:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
    startWrite();
   b8194:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   b8196:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
   b819a:	4604      	mov	r4, r0
   b819c:	460f      	mov	r7, r1
   b819e:	4616      	mov	r6, r2
    startWrite();
   b81a0:	4798      	blx	r3
    writeFastHLine(x, y, w, color);
   b81a2:	6823      	ldr	r3, [r4, #0]
   b81a4:	f8cd 8000 	str.w	r8, [sp]
   b81a8:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   b81ac:	4632      	mov	r2, r6
   b81ae:	462b      	mov	r3, r5
   b81b0:	4639      	mov	r1, r7
   b81b2:	4620      	mov	r0, r4
   b81b4:	47d0      	blx	sl
    writeFastHLine(x, y+h-1, w, color);
   b81b6:	6823      	ldr	r3, [r4, #0]
   b81b8:	f8cd 8000 	str.w	r8, [sp]
   b81bc:	f109 32ff 	add.w	r2, r9, #4294967295
   b81c0:	4432      	add	r2, r6
   b81c2:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   b81c6:	4639      	mov	r1, r7
   b81c8:	462b      	mov	r3, r5
   b81ca:	4620      	mov	r0, r4
   b81cc:	b212      	sxth	r2, r2
   b81ce:	47d0      	blx	sl
    writeFastVLine(x, y, h, color);
   b81d0:	6823      	ldr	r3, [r4, #0]
   b81d2:	f8cd 8000 	str.w	r8, [sp]
   b81d6:	f8d3 a020 	ldr.w	sl, [r3, #32]
   b81da:	4632      	mov	r2, r6
   b81dc:	464b      	mov	r3, r9
   b81de:	4639      	mov	r1, r7
   b81e0:	4620      	mov	r0, r4
   b81e2:	47d0      	blx	sl
    writeFastVLine(x+w-1, y, h, color);
   b81e4:	1e6b      	subs	r3, r5, #1
   b81e6:	19d9      	adds	r1, r3, r7
   b81e8:	6823      	ldr	r3, [r4, #0]
   b81ea:	f8cd 8000 	str.w	r8, [sp]
   b81ee:	6a1d      	ldr	r5, [r3, #32]
   b81f0:	4620      	mov	r0, r4
   b81f2:	464b      	mov	r3, r9
   b81f4:	4632      	mov	r2, r6
   b81f6:	b209      	sxth	r1, r1
   b81f8:	47a8      	blx	r5
    endWrite();
   b81fa:	6823      	ldr	r3, [r4, #0]
   b81fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b81fe:	4620      	mov	r0, r4
}
   b8200:	b002      	add	sp, #8
   b8202:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   b8206:	4718      	bx	r3

000b8208 <_ZN12Adafruit_GFX13invertDisplayEb>:
    @param   i  True if you want to invert, false to make 'normal'
*/
/**************************************************************************/
void Adafruit_GFX::invertDisplay(boolean i) {
    // Do nothing, must be subclassed if supported by hardware
}
   b8208:	4770      	bx	lr

000b820a <_ZN12Adafruit_GFX11setRotationEh>:
    rotation = (x & 3);
   b820a:	f001 0303 	and.w	r3, r1, #3
            _height = HEIGHT;
   b820e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
    rotation = (x & 3);
   b8212:	7683      	strb	r3, [r0, #26]
    switch(rotation) {
   b8214:	07c9      	lsls	r1, r1, #31
            _width  = WIDTH;
   b8216:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   b821a:	bf59      	ittee	pl
   b821c:	8183      	strhpl	r3, [r0, #12]
            _height = HEIGHT;
   b821e:	81c2      	strhpl	r2, [r0, #14]
            _width  = HEIGHT;
   b8220:	8182      	strhmi	r2, [r0, #12]
            _height = WIDTH;
   b8222:	81c3      	strhmi	r3, [r0, #14]
}
   b8224:	4770      	bx	lr
	...

000b8228 <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   b8228:	b530      	push	{r4, r5, lr}
WIDTH(w), HEIGHT(h)
   b822a:	8142      	strh	r2, [r0, #10]
    _height   = HEIGHT;
   b822c:	81c2      	strh	r2, [r0, #14]
    textsize_x = textsize_y  = 1;
   b822e:	4a07      	ldr	r2, [pc, #28]	; (b824c <_ZN12Adafruit_GFXC1Ess+0x24>)
WIDTH(w), HEIGHT(h)
   b8230:	4d07      	ldr	r5, [pc, #28]	; (b8250 <_ZN12Adafruit_GFXC1Ess+0x28>)
   b8232:	8101      	strh	r1, [r0, #8]
    Print() : write_error(0) {}
   b8234:	2400      	movs	r4, #0
    _width    = WIDTH;
   b8236:	8181      	strh	r1, [r0, #12]
    textsize_x = textsize_y  = 1;
   b8238:	f04f 31ff 	mov.w	r1, #4294967295
   b823c:	e9c0 1205 	strd	r1, r2, [r0, #20]
   b8240:	6044      	str	r4, [r0, #4]
WIDTH(w), HEIGHT(h)
   b8242:	6005      	str	r5, [r0, #0]
    cursor_y  = cursor_x    = 0;
   b8244:	6104      	str	r4, [r0, #16]
    _cp437    = false;
   b8246:	7704      	strb	r4, [r0, #28]
    gfxFont   = NULL;
   b8248:	6204      	str	r4, [r0, #32]
}
   b824a:	bd30      	pop	{r4, r5, pc}
   b824c:	01000101 	.word	0x01000101
   b8250:	000bcb68 	.word	0x000bcb68

000b8254 <_ZN12Adafruit_GFX16fillCircleHelperEssshst>:
  uint8_t corners, int16_t delta, uint16_t color) {
   b8254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8258:	b08b      	sub	sp, #44	; 0x2c
   b825a:	461c      	mov	r4, r3
   b825c:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
   b8260:	9304      	str	r3, [sp, #16]
    int16_t f     = 1 - r;
   b8262:	b2a3      	uxth	r3, r4
   b8264:	f1c3 0501 	rsb	r5, r3, #1
    int16_t ddF_y = -2 * r;
   b8268:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
   b826c:	005b      	lsls	r3, r3, #1
   b826e:	b21b      	sxth	r3, r3
   b8270:	9307      	str	r3, [sp, #28]
    delta++; // Avoid some +1's in the loop
   b8272:	f9bd 3054 	ldrsh.w	r3, [sp, #84]	; 0x54
   b8276:	3301      	adds	r3, #1
   b8278:	b29b      	uxth	r3, r3
   b827a:	9305      	str	r3, [sp, #20]
   b827c:	b293      	uxth	r3, r2
   b827e:	9306      	str	r3, [sp, #24]
  uint8_t corners, int16_t delta, uint16_t color) {
   b8280:	4688      	mov	r8, r1
    delta++; // Avoid some +1's in the loop
   b8282:	9b05      	ldr	r3, [sp, #20]
  uint8_t corners, int16_t delta, uint16_t color) {
   b8284:	f89d 1050 	ldrb.w	r1, [sp, #80]	; 0x50
    delta++; // Avoid some +1's in the loop
   b8288:	9303      	str	r3, [sp, #12]
    int16_t x     = 0;
   b828a:	2300      	movs	r3, #0
   b828c:	9302      	str	r3, [sp, #8]
            if(corners & 1) writeFastVLine(x0+x, y0-y, 2*y+delta, color);
   b828e:	f001 0301 	and.w	r3, r1, #1
   b8292:	9308      	str	r3, [sp, #32]
    delta++; // Avoid some +1's in the loop
   b8294:	f8dd a018 	ldr.w	sl, [sp, #24]
            if(corners & 2) writeFastVLine(x0-x, y0-y, 2*y+delta, color);
   b8298:	f001 0302 	and.w	r3, r1, #2
  uint8_t corners, int16_t delta, uint16_t color) {
   b829c:	4683      	mov	fp, r0
    int16_t f     = 1 - r;
   b829e:	b22d      	sxth	r5, r5
            if(corners & 2) writeFastVLine(x0-x, y0-y, 2*y+delta, color);
   b82a0:	9309      	str	r3, [sp, #36]	; 0x24
    while(x < y) {
   b82a2:	9b02      	ldr	r3, [sp, #8]
   b82a4:	42a3      	cmp	r3, r4
   b82a6:	da6f      	bge.n	b8388 <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0x134>
        if (f >= 0) {
   b82a8:	2d00      	cmp	r5, #0
   b82aa:	db6b      	blt.n	b8384 <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0x130>
            ddF_y += 2;
   b82ac:	9b07      	ldr	r3, [sp, #28]
   b82ae:	3302      	adds	r3, #2
            y--;
   b82b0:	1e66      	subs	r6, r4, #1
            ddF_y += 2;
   b82b2:	b21a      	sxth	r2, r3
            f     += ddF_y;
   b82b4:	fa15 f583 	uxtah	r5, r5, r3
            y--;
   b82b8:	b236      	sxth	r6, r6
            ddF_y += 2;
   b82ba:	9207      	str	r2, [sp, #28]
            f     += ddF_y;
   b82bc:	b22d      	sxth	r5, r5
        x++;
   b82be:	9f02      	ldr	r7, [sp, #8]
   b82c0:	3701      	adds	r7, #1
   b82c2:	fa1f f987 	uxth.w	r9, r7
   b82c6:	b23b      	sxth	r3, r7
        ddF_x += 2;
   b82c8:	eb05 0549 	add.w	r5, r5, r9, lsl #1
        f     += ddF_x;
   b82cc:	3501      	adds	r5, #1
        if(x < (y + 1)) {
   b82ce:	429e      	cmp	r6, r3
   b82d0:	9302      	str	r3, [sp, #8]
        f     += ddF_x;
   b82d2:	b22d      	sxth	r5, r5
        if(x < (y + 1)) {
   b82d4:	db29      	blt.n	b832a <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0xd6>
            if(corners & 1) writeFastVLine(x0+x, y0-y, 2*y+delta, color);
   b82d6:	9b08      	ldr	r3, [sp, #32]
   b82d8:	b193      	cbz	r3, b8300 <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0xac>
   b82da:	9804      	ldr	r0, [sp, #16]
   b82dc:	9000      	str	r0, [sp, #0]
   b82de:	f8db 0000 	ldr.w	r0, [fp]
   b82e2:	9906      	ldr	r1, [sp, #24]
   b82e4:	9b05      	ldr	r3, [sp, #20]
   b82e6:	6a00      	ldr	r0, [r0, #32]
   b82e8:	b2b2      	uxth	r2, r6
   b82ea:	eb03 0342 	add.w	r3, r3, r2, lsl #1
   b82ee:	1a8a      	subs	r2, r1, r2
   b82f0:	eb09 0108 	add.w	r1, r9, r8
   b82f4:	4607      	mov	r7, r0
   b82f6:	b21b      	sxth	r3, r3
   b82f8:	b212      	sxth	r2, r2
   b82fa:	b209      	sxth	r1, r1
   b82fc:	4658      	mov	r0, fp
   b82fe:	47b8      	blx	r7
            if(corners & 2) writeFastVLine(x0-x, y0-y, 2*y+delta, color);
   b8300:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b8302:	b193      	cbz	r3, b832a <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0xd6>
   b8304:	9906      	ldr	r1, [sp, #24]
   b8306:	9804      	ldr	r0, [sp, #16]
   b8308:	9b05      	ldr	r3, [sp, #20]
   b830a:	9000      	str	r0, [sp, #0]
   b830c:	b2b2      	uxth	r2, r6
   b830e:	f8db 0000 	ldr.w	r0, [fp]
   b8312:	eb03 0342 	add.w	r3, r3, r2, lsl #1
   b8316:	1a8a      	subs	r2, r1, r2
   b8318:	eba8 0109 	sub.w	r1, r8, r9
   b831c:	b21b      	sxth	r3, r3
   b831e:	f8d0 9020 	ldr.w	r9, [r0, #32]
   b8322:	b212      	sxth	r2, r2
   b8324:	b209      	sxth	r1, r1
   b8326:	4658      	mov	r0, fp
   b8328:	47c8      	blx	r9
        if(y != py) {
   b832a:	42b4      	cmp	r4, r6
   b832c:	d020      	beq.n	b8370 <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0x11c>
            if(corners & 1) writeFastVLine(x0+py, y0-px, 2*px+delta, color);
   b832e:	9b08      	ldr	r3, [sp, #32]
   b8330:	b173      	cbz	r3, b8350 <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0xfc>
   b8332:	f8db 3000 	ldr.w	r3, [fp]
   b8336:	9a04      	ldr	r2, [sp, #16]
   b8338:	9200      	str	r2, [sp, #0]
   b833a:	eb08 0104 	add.w	r1, r8, r4
   b833e:	f8d3 9020 	ldr.w	r9, [r3, #32]
   b8342:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
   b8346:	fa0f f28a 	sxth.w	r2, sl
   b834a:	b209      	sxth	r1, r1
   b834c:	4658      	mov	r0, fp
   b834e:	47c8      	blx	r9
            if(corners & 2) writeFastVLine(x0-py, y0-px, 2*px+delta, color);
   b8350:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b8352:	b16b      	cbz	r3, b8370 <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0x11c>
   b8354:	f8db 3000 	ldr.w	r3, [fp]
   b8358:	9a04      	ldr	r2, [sp, #16]
   b835a:	9200      	str	r2, [sp, #0]
   b835c:	eba8 0104 	sub.w	r1, r8, r4
   b8360:	fa0f f28a 	sxth.w	r2, sl
   b8364:	6a1c      	ldr	r4, [r3, #32]
   b8366:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
   b836a:	b209      	sxth	r1, r1
   b836c:	4658      	mov	r0, fp
   b836e:	47a0      	blx	r4
   b8370:	f10a 33ff 	add.w	r3, sl, #4294967295
   b8374:	fa1f fa83 	uxth.w	sl, r3
   b8378:	9b03      	ldr	r3, [sp, #12]
   b837a:	3302      	adds	r3, #2
   b837c:	b29b      	uxth	r3, r3
   b837e:	9303      	str	r3, [sp, #12]
  uint8_t corners, int16_t delta, uint16_t color) {
   b8380:	4634      	mov	r4, r6
   b8382:	e78e      	b.n	b82a2 <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0x4e>
   b8384:	4626      	mov	r6, r4
   b8386:	e79a      	b.n	b82be <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0x6a>
}
   b8388:	b00b      	add	sp, #44	; 0x2c
   b838a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b838e <_ZN12Adafruit_GFX10fillCircleEssst>:
        uint16_t color) {
   b838e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b8392:	461e      	mov	r6, r3
   b8394:	b086      	sub	sp, #24
    startWrite();
   b8396:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   b8398:	9105      	str	r1, [sp, #20]
   b839a:	4604      	mov	r4, r0
    startWrite();
   b839c:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   b839e:	f8bd 7030 	ldrh.w	r7, [sp, #48]	; 0x30
   b83a2:	4615      	mov	r5, r2
    startWrite();
   b83a4:	4798      	blx	r3
    writeFastVLine(x0, y0-r, 2*r+1, color);
   b83a6:	b2b2      	uxth	r2, r6
   b83a8:	6820      	ldr	r0, [r4, #0]
   b83aa:	9700      	str	r7, [sp, #0]
   b83ac:	0053      	lsls	r3, r2, #1
   b83ae:	3301      	adds	r3, #1
   b83b0:	1aaa      	subs	r2, r5, r2
   b83b2:	f8d0 8020 	ldr.w	r8, [r0, #32]
   b83b6:	9905      	ldr	r1, [sp, #20]
   b83b8:	4620      	mov	r0, r4
   b83ba:	b21b      	sxth	r3, r3
   b83bc:	b212      	sxth	r2, r2
   b83be:	47c0      	blx	r8
    fillCircleHelper(x0, y0, r, 3, 0, color);
   b83c0:	2303      	movs	r3, #3
   b83c2:	2200      	movs	r2, #0
   b83c4:	e9cd 3200 	strd	r3, r2, [sp]
   b83c8:	4620      	mov	r0, r4
   b83ca:	4633      	mov	r3, r6
   b83cc:	9905      	ldr	r1, [sp, #20]
   b83ce:	9702      	str	r7, [sp, #8]
   b83d0:	462a      	mov	r2, r5
   b83d2:	f7ff ff3f 	bl	b8254 <_ZN12Adafruit_GFX16fillCircleHelperEssshst>
    endWrite();
   b83d6:	6823      	ldr	r3, [r4, #0]
   b83d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b83da:	4620      	mov	r0, r4
}
   b83dc:	b006      	add	sp, #24
   b83de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   b83e2:	4718      	bx	r3

000b83e4 <_ZN12Adafruit_GFX12fillTriangleEsssssst>:
        int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color) {
   b83e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b83e8:	b08d      	sub	sp, #52	; 0x34
   b83ea:	461d      	mov	r5, r3
   b83ec:	f9bd 6058 	ldrsh.w	r6, [sp, #88]	; 0x58
   b83f0:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
   b83f4:	f9bd 805c 	ldrsh.w	r8, [sp, #92]	; 0x5c
   b83f8:	f9bd 7060 	ldrsh.w	r7, [sp, #96]	; 0x60
   b83fc:	9304      	str	r3, [sp, #16]
    if (y0 > y1) {
   b83fe:	42b2      	cmp	r2, r6
        int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color) {
   b8400:	4683      	mov	fp, r0
   b8402:	4689      	mov	r9, r1
   b8404:	4614      	mov	r4, r2
    if (y0 > y1) {
   b8406:	f340 80ce 	ble.w	b85a6 <_ZN12Adafruit_GFX12fillTriangleEsssssst+0x1c2>
    if (y1 > y2) {
   b840a:	42ba      	cmp	r2, r7
   b840c:	dd17      	ble.n	b843e <_ZN12Adafruit_GFX12fillTriangleEsssssst+0x5a>
    if (y0 > y1) {
   b840e:	42b7      	cmp	r7, r6
   b8410:	da0f      	bge.n	b8432 <_ZN12Adafruit_GFX12fillTriangleEsssssst+0x4e>
   b8412:	4633      	mov	r3, r6
   b8414:	463e      	mov	r6, r7
   b8416:	4627      	mov	r7, r4
   b8418:	461c      	mov	r4, r3
   b841a:	462b      	mov	r3, r5
   b841c:	4645      	mov	r5, r8
   b841e:	46c8      	mov	r8, r9
    if (y1 > y2) {
   b8420:	4699      	mov	r9, r3
   b8422:	e00c      	b.n	b843e <_ZN12Adafruit_GFX12fillTriangleEsssssst+0x5a>
   b8424:	4623      	mov	r3, r4
   b8426:	4634      	mov	r4, r6
   b8428:	461e      	mov	r6, r3
   b842a:	464b      	mov	r3, r9
   b842c:	46a9      	mov	r9, r5
   b842e:	461d      	mov	r5, r3
   b8430:	e7ed      	b.n	b840e <_ZN12Adafruit_GFX12fillTriangleEsssssst+0x2a>
   b8432:	4623      	mov	r3, r4
   b8434:	463c      	mov	r4, r7
   b8436:	461f      	mov	r7, r3
   b8438:	464b      	mov	r3, r9
   b843a:	46c1      	mov	r9, r8
   b843c:	4698      	mov	r8, r3
    startWrite();
   b843e:	f8db 3000 	ldr.w	r3, [fp]
   b8442:	4658      	mov	r0, fp
   b8444:	695b      	ldr	r3, [r3, #20]
   b8446:	4798      	blx	r3
    if(y0 == y2) { // Handle awkward all-on-same-line case as its own thing
   b8448:	42be      	cmp	r6, r7
   b844a:	d122      	bne.n	b8492 <_ZN12Adafruit_GFX12fillTriangleEsssssst+0xae>
        if(x1 < a)      a = x1;
   b844c:	454d      	cmp	r5, r9
   b844e:	bfc2      	ittt	gt
   b8450:	462b      	movgt	r3, r5
   b8452:	464d      	movgt	r5, r9
   b8454:	4699      	movgt	r9, r3
        if(x2 < a)      a = x2;
   b8456:	4545      	cmp	r5, r8
   b8458:	dc05      	bgt.n	b8466 <_ZN12Adafruit_GFX12fillTriangleEsssssst+0x82>
        else if(x2 > b) b = x2;
   b845a:	45c1      	cmp	r9, r8
   b845c:	bfb8      	it	lt
   b845e:	46c1      	movlt	r9, r8
   b8460:	fa0f f989 	sxth.w	r9, r9
   b8464:	46a8      	mov	r8, r5
        writeFastHLine(a, y0, b-a+1, color);
   b8466:	f8db 2000 	ldr.w	r2, [fp]
   b846a:	9904      	ldr	r1, [sp, #16]
   b846c:	9100      	str	r1, [sp, #0]
   b846e:	f109 0301 	add.w	r3, r9, #1
   b8472:	eba3 0308 	sub.w	r3, r3, r8
   b8476:	6a54      	ldr	r4, [r2, #36]	; 0x24
   b8478:	b21b      	sxth	r3, r3
   b847a:	4632      	mov	r2, r6
   b847c:	4641      	mov	r1, r8
   b847e:	4658      	mov	r0, fp
   b8480:	47a0      	blx	r4
    endWrite();
   b8482:	f8db 3000 	ldr.w	r3, [fp]
   b8486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b8488:	4658      	mov	r0, fp
}
   b848a:	b00d      	add	sp, #52	; 0x34
   b848c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    endWrite();
   b8490:	4718      	bx	r3
    dx01 = x1 - x0,
   b8492:	fa1f f389 	uxth.w	r3, r9
   b8496:	9303      	str	r3, [sp, #12]
   b8498:	b2ab      	uxth	r3, r5
   b849a:	9302      	str	r3, [sp, #8]
   b849c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b84a0:	1a9b      	subs	r3, r3, r2
   b84a2:	b21b      	sxth	r3, r3
    dy01 = y1 - y0,
   b84a4:	fa1f fc86 	uxth.w	ip, r6
    dx01 = x1 - x0,
   b84a8:	9308      	str	r3, [sp, #32]
    dy01 = y1 - y0,
   b84aa:	b2a3      	uxth	r3, r4
   b84ac:	eba3 020c 	sub.w	r2, r3, ip
   b84b0:	b212      	sxth	r2, r2
   b84b2:	9209      	str	r2, [sp, #36]	; 0x24
    dx02 = x2 - x0,
   b84b4:	9a02      	ldr	r2, [sp, #8]
   b84b6:	fa1f f188 	uxth.w	r1, r8
   b84ba:	eba1 0802 	sub.w	r8, r1, r2
    dy02 = y2 - y0,
   b84be:	b2ba      	uxth	r2, r7
   b84c0:	eba2 0c0c 	sub.w	ip, r2, ip
   b84c4:	fa0f f08c 	sxth.w	r0, ip
   b84c8:	9006      	str	r0, [sp, #24]
    dx12 = x2 - x1,
   b84ca:	9803      	ldr	r0, [sp, #12]
    if(y1 == y2) last = y1;   // Include y1 scanline
   b84cc:	42bc      	cmp	r4, r7
    dy12 = y2 - y1;
   b84ce:	eba2 0203 	sub.w	r2, r2, r3
    dx12 = x2 - x1,
   b84d2:	eba1 0100 	sub.w	r1, r1, r0
    else         last = y1-1; // Skip it
   b84d6:	bf18      	it	ne
   b84d8:	f103 33ff 	addne.w	r3, r3, #4294967295
    dy12 = y2 - y1;
   b84dc:	b212      	sxth	r2, r2
    dx12 = x2 - x1,
   b84de:	b209      	sxth	r1, r1
    else         last = y1-1; // Skip it
   b84e0:	bf18      	it	ne
   b84e2:	b21b      	sxthne	r3, r3
    sb   = 0;
   b84e4:	f04f 0900 	mov.w	r9, #0
    dy12 = y2 - y1;
   b84e8:	920a      	str	r2, [sp, #40]	; 0x28
    dx02 = x2 - x0,
   b84ea:	fa0f f888 	sxth.w	r8, r8
    dx12 = x2 - x1,
   b84ee:	9107      	str	r1, [sp, #28]
    else         last = y1-1; // Skip it
   b84f0:	bf14      	ite	ne
   b84f2:	9305      	strne	r3, [sp, #20]
   b84f4:	9405      	streq	r4, [sp, #20]
    for(y=y0; y<=last; y++) {
   b84f6:	4632      	mov	r2, r6
    sa   = 0,
   b84f8:	46ca      	mov	sl, r9
    for(y=y0; y<=last; y++) {
   b84fa:	9b05      	ldr	r3, [sp, #20]
   b84fc:	429a      	cmp	r2, r3
   b84fe:	dc24      	bgt.n	b854a <_ZN12Adafruit_GFX12fillTriangleEsssssst+0x166>
        a   = x0 + sa / dy01;
   b8500:	9b09      	ldr	r3, [sp, #36]	; 0x24
        b   = x0 + sb / dy02;
   b8502:	9802      	ldr	r0, [sp, #8]
        a   = x0 + sa / dy01;
   b8504:	fb9a f1f3 	sdiv	r1, sl, r3
   b8508:	9b02      	ldr	r3, [sp, #8]
        writeFastHLine(a, y, b-a+1, color);
   b850a:	920b      	str	r2, [sp, #44]	; 0x2c
        a   = x0 + sa / dy01;
   b850c:	4419      	add	r1, r3
        b   = x0 + sb / dy02;
   b850e:	9b06      	ldr	r3, [sp, #24]
   b8510:	fb99 f3f3 	sdiv	r3, r9, r3
   b8514:	4403      	add	r3, r0
        sa += dx01;
   b8516:	9808      	ldr	r0, [sp, #32]
        a   = x0 + sa / dy01;
   b8518:	b209      	sxth	r1, r1
        b   = x0 + sb / dy02;
   b851a:	b21b      	sxth	r3, r3
        if(a > b) _swap_int16_t(a,b);
   b851c:	4299      	cmp	r1, r3
        sa += dx01;
   b851e:	4482      	add	sl, r0
        writeFastHLine(a, y, b-a+1, color);
   b8520:	9804      	ldr	r0, [sp, #16]
   b8522:	9000      	str	r0, [sp, #0]
        if(a > b) _swap_int16_t(a,b);
   b8524:	bfc8      	it	gt
   b8526:	468c      	movgt	ip, r1
        writeFastHLine(a, y, b-a+1, color);
   b8528:	f8db 0000 	ldr.w	r0, [fp]
        if(a > b) _swap_int16_t(a,b);
   b852c:	bfc4      	itt	gt
   b852e:	4619      	movgt	r1, r3
   b8530:	4663      	movgt	r3, ip
        writeFastHLine(a, y, b-a+1, color);
   b8532:	6a40      	ldr	r0, [r0, #36]	; 0x24
   b8534:	3301      	adds	r3, #1
   b8536:	1a5b      	subs	r3, r3, r1
   b8538:	4605      	mov	r5, r0
   b853a:	b21b      	sxth	r3, r3
   b853c:	4658      	mov	r0, fp
   b853e:	47a8      	blx	r5
   b8540:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b8542:	3201      	adds	r2, #1
        sb += dx02;
   b8544:	44c1      	add	r9, r8
    for(y=y0; y<=last; y++) {
   b8546:	b212      	sxth	r2, r2
   b8548:	e7d7      	b.n	b84fa <_ZN12Adafruit_GFX12fillTriangleEsssssst+0x116>
    sa = (int32_t)dx12 * (y - y1);
   b854a:	9b07      	ldr	r3, [sp, #28]
   b854c:	1b14      	subs	r4, r2, r4
    sb = (int32_t)dx02 * (y - y0);
   b854e:	1b96      	subs	r6, r2, r6
    sa = (int32_t)dx12 * (y - y1);
   b8550:	435c      	muls	r4, r3
    sb = (int32_t)dx02 * (y - y0);
   b8552:	fb08 f606 	mul.w	r6, r8, r6
    for(; y<=y2; y++) {
   b8556:	42ba      	cmp	r2, r7
   b8558:	dc93      	bgt.n	b8482 <_ZN12Adafruit_GFX12fillTriangleEsssssst+0x9e>
        a   = x1 + sa / dy12;
   b855a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
        b   = x0 + sb / dy02;
   b855c:	9802      	ldr	r0, [sp, #8]
        a   = x1 + sa / dy12;
   b855e:	fb94 f1f3 	sdiv	r1, r4, r3
   b8562:	9b03      	ldr	r3, [sp, #12]
        writeFastHLine(a, y, b-a+1, color);
   b8564:	9205      	str	r2, [sp, #20]
        a   = x1 + sa / dy12;
   b8566:	4419      	add	r1, r3
        b   = x0 + sb / dy02;
   b8568:	9b06      	ldr	r3, [sp, #24]
   b856a:	fb96 f3f3 	sdiv	r3, r6, r3
   b856e:	4403      	add	r3, r0
        a   = x1 + sa / dy12;
   b8570:	b209      	sxth	r1, r1
        b   = x0 + sb / dy02;
   b8572:	b21b      	sxth	r3, r3
        if(a > b) _swap_int16_t(a,b);
   b8574:	4299      	cmp	r1, r3
        sa += dx12;
   b8576:	9807      	ldr	r0, [sp, #28]
        if(a > b) _swap_int16_t(a,b);
   b8578:	bfc8      	it	gt
   b857a:	468c      	movgt	ip, r1
        sa += dx12;
   b857c:	4404      	add	r4, r0
        if(a > b) _swap_int16_t(a,b);
   b857e:	bfc8      	it	gt
   b8580:	4619      	movgt	r1, r3
        writeFastHLine(a, y, b-a+1, color);
   b8582:	9804      	ldr	r0, [sp, #16]
   b8584:	9000      	str	r0, [sp, #0]
        if(a > b) _swap_int16_t(a,b);
   b8586:	bfc8      	it	gt
   b8588:	4663      	movgt	r3, ip
        writeFastHLine(a, y, b-a+1, color);
   b858a:	f8db 0000 	ldr.w	r0, [fp]
   b858e:	3301      	adds	r3, #1
   b8590:	1a5b      	subs	r3, r3, r1
   b8592:	f8d0 9024 	ldr.w	r9, [r0, #36]	; 0x24
   b8596:	b21b      	sxth	r3, r3
   b8598:	4658      	mov	r0, fp
   b859a:	47c8      	blx	r9
   b859c:	9a05      	ldr	r2, [sp, #20]
   b859e:	3201      	adds	r2, #1
        sb += dx02;
   b85a0:	4446      	add	r6, r8
    for(; y<=y2; y++) {
   b85a2:	b212      	sxth	r2, r2
   b85a4:	e7d7      	b.n	b8556 <_ZN12Adafruit_GFX12fillTriangleEsssssst+0x172>
    if (y1 > y2) {
   b85a6:	42be      	cmp	r6, r7
   b85a8:	f73f af3c 	bgt.w	b8424 <_ZN12Adafruit_GFX12fillTriangleEsssssst+0x40>
   b85ac:	4633      	mov	r3, r6
   b85ae:	461c      	mov	r4, r3
   b85b0:	4616      	mov	r6, r2
   b85b2:	462b      	mov	r3, r5
   b85b4:	460d      	mov	r5, r1
   b85b6:	e733      	b.n	b8420 <_ZN12Adafruit_GFX12fillTriangleEsssssst+0x3c>

000b85b8 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>:
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b85b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b85bc:	b089      	sub	sp, #36	; 0x24
   b85be:	e9cd 1202 	strd	r1, r2, [sp, #8]
    startWrite();
   b85c2:	6802      	ldr	r2, [r0, #0]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b85c4:	f9bd 8048 	ldrsh.w	r8, [sp, #72]	; 0x48
   b85c8:	9304      	str	r3, [sp, #16]
   b85ca:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
    startWrite();
   b85ce:	6952      	ldr	r2, [r2, #20]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b85d0:	9305      	str	r3, [sp, #20]
   b85d2:	f8bd a050 	ldrh.w	sl, [sp, #80]	; 0x50
   b85d6:	4604      	mov	r4, r0
    startWrite();
   b85d8:	4790      	blx	r2
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   b85da:	f118 0207 	adds.w	r2, r8, #7
    startWrite();
   b85de:	f04f 0600 	mov.w	r6, #0
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   b85e2:	bf48      	it	mi
   b85e4:	f108 020e 	addmi.w	r2, r8, #14
   b85e8:	ea4f 0be2 	mov.w	fp, r2, asr #3
    startWrite();
   b85ec:	9601      	str	r6, [sp, #4]
    uint8_t byte = 0;
   b85ee:	4635      	mov	r5, r6
   b85f0:	9b03      	ldr	r3, [sp, #12]
   b85f2:	9a01      	ldr	r2, [sp, #4]
    for(int16_t j=0; j<h; j++, y++) {
   b85f4:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
   b85f8:	189a      	adds	r2, r3, r2
   b85fa:	9b05      	ldr	r3, [sp, #20]
   b85fc:	428b      	cmp	r3, r1
   b85fe:	b212      	sxth	r2, r2
   b8600:	dd27      	ble.n	b8652 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x9a>
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b8602:	9b04      	ldr	r3, [sp, #16]
   b8604:	4433      	add	r3, r6
    for(int16_t j=0; j<h; j++, y++) {
   b8606:	f04f 0900 	mov.w	r9, #0
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b860a:	9306      	str	r3, [sp, #24]
   b860c:	fa0f f089 	sxth.w	r0, r9
        for(int16_t i=0; i<w; i++) {
   b8610:	4580      	cmp	r8, r0
   b8612:	fa1f f189 	uxth.w	r1, r9
   b8616:	dd17      	ble.n	b8648 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x90>
            if(i & 7) byte <<= 1;
   b8618:	074f      	lsls	r7, r1, #29
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b861a:	bf05      	ittet	eq
   b861c:	9b06      	ldreq	r3, [sp, #24]
   b861e:	10c0      	asreq	r0, r0, #3
            if(i & 7) byte <<= 1;
   b8620:	006d      	lslne	r5, r5, #1
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b8622:	5c1d      	ldrbeq	r5, [r3, r0]
            if(i & 7) byte <<= 1;
   b8624:	bf18      	it	ne
   b8626:	b2ed      	uxtbne	r5, r5
            if(byte & 0x80) writePixel(x+i, y, color);
   b8628:	062b      	lsls	r3, r5, #24
   b862a:	d50a      	bpl.n	b8642 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x8a>
   b862c:	9b02      	ldr	r3, [sp, #8]
   b862e:	6820      	ldr	r0, [r4, #0]
   b8630:	9207      	str	r2, [sp, #28]
   b8632:	4419      	add	r1, r3
   b8634:	6983      	ldr	r3, [r0, #24]
   b8636:	b209      	sxth	r1, r1
   b8638:	461f      	mov	r7, r3
   b863a:	4620      	mov	r0, r4
   b863c:	4653      	mov	r3, sl
   b863e:	47b8      	blx	r7
   b8640:	9a07      	ldr	r2, [sp, #28]
        for(int16_t i=0; i<w; i++) {
   b8642:	f109 0901 	add.w	r9, r9, #1
   b8646:	e7e1      	b.n	b860c <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x54>
    for(int16_t j=0; j<h; j++, y++) {
   b8648:	9b01      	ldr	r3, [sp, #4]
   b864a:	3301      	adds	r3, #1
   b864c:	9301      	str	r3, [sp, #4]
   b864e:	445e      	add	r6, fp
   b8650:	e7ce      	b.n	b85f0 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x38>
    endWrite();
   b8652:	6823      	ldr	r3, [r4, #0]
   b8654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b8656:	4620      	mov	r0, r4
}
   b8658:	b009      	add	sp, #36	; 0x24
   b865a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    endWrite();
   b865e:	4718      	bx	r3

000b8660 <_ZN12Adafruit_GFX8drawCharEsshtthh>:
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   b8660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8664:	ed2d 8b02 	vpush	{d8}
   b8668:	b091      	sub	sp, #68	; 0x44
   b866a:	4616      	mov	r6, r2
    if(!gfxFont) { // 'Classic' built-in font
   b866c:	6a02      	ldr	r2, [r0, #32]
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   b866e:	f8bd 8074 	ldrh.w	r8, [sp, #116]	; 0x74
   b8672:	f89d 5078 	ldrb.w	r5, [sp, #120]	; 0x78
   b8676:	f89d 407c 	ldrb.w	r4, [sp, #124]	; 0x7c
   b867a:	9103      	str	r1, [sp, #12]
   b867c:	461f      	mov	r7, r3
   b867e:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
   b8682:	9304      	str	r3, [sp, #16]
   b8684:	4683      	mov	fp, r0
    if(!gfxFont) { // 'Classic' built-in font
   b8686:	2a00      	cmp	r2, #0
   b8688:	f040 80c5 	bne.w	b8816 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1b6>
        if((x >= _width)            || // Clip right
   b868c:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b8690:	428b      	cmp	r3, r1
   b8692:	f340 814c 	ble.w	b892e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
   b8696:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
   b869a:	42b3      	cmp	r3, r6
   b869c:	f340 8147 	ble.w	b892e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((x + 6 * size_x - 1) < 0) || // Clip left
   b86a0:	2306      	movs	r3, #6
   b86a2:	fb13 1305 	smlabb	r3, r3, r5, r1
           (y >= _height)           || // Clip bottom
   b86a6:	2b00      	cmp	r3, #0
   b86a8:	f340 8141 	ble.w	b892e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((y + 8 * size_y - 1) < 0))   // Clip top
   b86ac:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
           ((x + 6 * size_x - 1) < 0) || // Clip left
   b86b0:	2b00      	cmp	r3, #0
   b86b2:	f340 813c 	ble.w	b892e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
        if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
   b86b6:	7f03      	ldrb	r3, [r0, #28]
   b86b8:	b91b      	cbnz	r3, b86c2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x62>
   b86ba:	2faf      	cmp	r7, #175	; 0xaf
   b86bc:	bf84      	itt	hi
   b86be:	3701      	addhi	r7, #1
   b86c0:	b2ff      	uxtbhi	r7, r7
        startWrite();
   b86c2:	f8db 3000 	ldr.w	r3, [fp]
   b86c6:	4658      	mov	r0, fp
   b86c8:	695b      	ldr	r3, [r3, #20]
   b86ca:	4798      	blx	r3
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b86cc:	2205      	movs	r2, #5
   b86ce:	9209      	str	r2, [sp, #36]	; 0x24
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   b86d0:	2200      	movs	r2, #0
   b86d2:	9205      	str	r2, [sp, #20]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b86d4:	4a98      	ldr	r2, [pc, #608]	; (b8938 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2d8>)
   b86d6:	eb07 0387 	add.w	r3, r7, r7, lsl #2
   b86da:	18d3      	adds	r3, r2, r3
   b86dc:	930c      	str	r3, [sp, #48]	; 0x30
                        writePixel(x+i, y+j, color);
   b86de:	b2b3      	uxth	r3, r6
   b86e0:	9306      	str	r3, [sp, #24]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b86e2:	9a05      	ldr	r2, [sp, #20]
   b86e4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b86e6:	5c9b      	ldrb	r3, [r3, r2]
   b86e8:	9307      	str	r3, [sp, #28]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b86ea:	b2ab      	uxth	r3, r5
   b86ec:	930b      	str	r3, [sp, #44]	; 0x2c
   b86ee:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   b86f2:	9308      	str	r3, [sp, #32]
   b86f4:	9b03      	ldr	r3, [sp, #12]
   b86f6:	fb02 f905 	mul.w	r9, r2, r5
   b86fa:	fa19 f983 	uxtah	r9, r9, r3
   b86fe:	fa0f f389 	sxth.w	r3, r9
   b8702:	ee08 3a10 	vmov	s16, r3
   b8706:	2308      	movs	r3, #8
   b8708:	930a      	str	r3, [sp, #40]	; 0x28
                        writePixel(x+i, y+j, bg);
   b870a:	9b03      	ldr	r3, [sp, #12]
   b870c:	eb02 0a03 	add.w	sl, r2, r3
            for(int8_t j=0; j<8; j++, line >>= 1) {
   b8710:	f04f 0900 	mov.w	r9, #0
                        writePixel(x+i, y+j, bg);
   b8714:	fa0f fa8a 	sxth.w	sl, sl
                if(line & 1) {
   b8718:	9a07      	ldr	r2, [sp, #28]
                        writePixel(x+i, y+j, color);
   b871a:	f8db 3000 	ldr.w	r3, [fp]
                if(line & 1) {
   b871e:	07d2      	lsls	r2, r2, #31
   b8720:	d552      	bpl.n	b87c8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x168>
                    if(size_x == 1 && size_y == 1)
   b8722:	2d01      	cmp	r5, #1
                        writePixel(x+i, y+j, color);
   b8724:	fa1f f289 	uxth.w	r2, r9
                    if(size_x == 1 && size_y == 1)
   b8728:	d13e      	bne.n	b87a8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
   b872a:	2c01      	cmp	r4, #1
   b872c:	d13c      	bne.n	b87a8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
                        writePixel(x+i, y+j, color);
   b872e:	699b      	ldr	r3, [r3, #24]
   b8730:	9906      	ldr	r1, [sp, #24]
   b8732:	461f      	mov	r7, r3
   b8734:	9b04      	ldr	r3, [sp, #16]
   b8736:	440a      	add	r2, r1
                        writePixel(x+i, y+j, bg);
   b8738:	b212      	sxth	r2, r2
   b873a:	4651      	mov	r1, sl
   b873c:	4658      	mov	r0, fp
   b873e:	47b8      	blx	r7
            for(int8_t j=0; j<8; j++, line >>= 1) {
   b8740:	f109 0301 	add.w	r3, r9, #1
   b8744:	fa4f f983 	sxtb.w	r9, r3
   b8748:	9b07      	ldr	r3, [sp, #28]
   b874a:	085b      	lsrs	r3, r3, #1
   b874c:	9307      	str	r3, [sp, #28]
   b874e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b8750:	3b01      	subs	r3, #1
   b8752:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b8756:	930a      	str	r3, [sp, #40]	; 0x28
   b8758:	d1de      	bne.n	b8718 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xb8>
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   b875a:	9f05      	ldr	r7, [sp, #20]
   b875c:	3701      	adds	r7, #1
   b875e:	b27b      	sxtb	r3, r7
   b8760:	9305      	str	r3, [sp, #20]
   b8762:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b8764:	3b01      	subs	r3, #1
   b8766:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b876a:	9309      	str	r3, [sp, #36]	; 0x24
   b876c:	d1b9      	bne.n	b86e2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x82>
        if(bg != color) { // If opaque, draw vertical line for last column
   b876e:	9b04      	ldr	r3, [sp, #16]
   b8770:	4543      	cmp	r3, r8
   b8772:	d00f      	beq.n	b8794 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
            if(size_x == 1 && size_y == 1) writeFastVLine(x+5, y, 8, bg);
   b8774:	2d01      	cmp	r5, #1
   b8776:	f8db 3000 	ldr.w	r3, [fp]
   b877a:	d13b      	bne.n	b87f4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   b877c:	2c01      	cmp	r4, #1
   b877e:	d139      	bne.n	b87f4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   b8780:	9908      	ldr	r1, [sp, #32]
   b8782:	f8cd 8000 	str.w	r8, [sp]
   b8786:	3105      	adds	r1, #5
   b8788:	6a1c      	ldr	r4, [r3, #32]
   b878a:	4632      	mov	r2, r6
   b878c:	2308      	movs	r3, #8
   b878e:	b209      	sxth	r1, r1
   b8790:	4658      	mov	r0, fp
   b8792:	47a0      	blx	r4
        endWrite();
   b8794:	f8db 3000 	ldr.w	r3, [fp]
   b8798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b879a:	4658      	mov	r0, fp
}
   b879c:	b011      	add	sp, #68	; 0x44
   b879e:	ecbd 8b02 	vpop	{d8}
   b87a2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        endWrite();
   b87a6:	4718      	bx	r3
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, color);
   b87a8:	9906      	ldr	r1, [sp, #24]
   b87aa:	fb14 f202 	smulbb	r2, r4, r2
   b87ae:	440a      	add	r2, r1
   b87b0:	9904      	ldr	r1, [sp, #16]
   b87b2:	9101      	str	r1, [sp, #4]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b87b4:	9400      	str	r4, [sp, #0]
   b87b6:	69db      	ldr	r3, [r3, #28]
   b87b8:	ee18 1a10 	vmov	r1, s16
   b87bc:	461f      	mov	r7, r3
   b87be:	b212      	sxth	r2, r2
   b87c0:	462b      	mov	r3, r5
   b87c2:	4658      	mov	r0, fp
   b87c4:	47b8      	blx	r7
   b87c6:	e7bb      	b.n	b8740 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                } else if(bg != color) {
   b87c8:	9a04      	ldr	r2, [sp, #16]
   b87ca:	4542      	cmp	r2, r8
   b87cc:	d0b8      	beq.n	b8740 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                    if(size_x == 1 && size_y == 1)
   b87ce:	2d01      	cmp	r5, #1
                        writePixel(x+i, y+j, color);
   b87d0:	fa1f f289 	uxth.w	r2, r9
                    if(size_x == 1 && size_y == 1)
   b87d4:	d107      	bne.n	b87e6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
   b87d6:	2c01      	cmp	r4, #1
   b87d8:	d105      	bne.n	b87e6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
                        writePixel(x+i, y+j, bg);
   b87da:	699b      	ldr	r3, [r3, #24]
   b87dc:	9906      	ldr	r1, [sp, #24]
   b87de:	461f      	mov	r7, r3
   b87e0:	440a      	add	r2, r1
   b87e2:	4643      	mov	r3, r8
   b87e4:	e7a8      	b.n	b8738 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xd8>
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b87e6:	9906      	ldr	r1, [sp, #24]
   b87e8:	f8cd 8004 	str.w	r8, [sp, #4]
   b87ec:	fb14 f202 	smulbb	r2, r4, r2
   b87f0:	440a      	add	r2, r1
   b87f2:	e7df      	b.n	b87b4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x154>
            else          writeFillRect(x+5*size_x, y, size_x, 8*size_y, bg);
   b87f4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b87f6:	f8cd 8004 	str.w	r8, [sp, #4]
   b87fa:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   b87fe:	9a08      	ldr	r2, [sp, #32]
   b8800:	00e4      	lsls	r4, r4, #3
   b8802:	440a      	add	r2, r1
   b8804:	4611      	mov	r1, r2
   b8806:	9400      	str	r4, [sp, #0]
   b8808:	69dc      	ldr	r4, [r3, #28]
   b880a:	4632      	mov	r2, r6
   b880c:	462b      	mov	r3, r5
   b880e:	b209      	sxth	r1, r1
   b8810:	4658      	mov	r0, fp
   b8812:	47a0      	blx	r4
        endWrite();
   b8814:	e7be      	b.n	b8794 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   b8816:	7a13      	ldrb	r3, [r2, #8]
    return gfxFont->glyph + c;
   b8818:	6851      	ldr	r1, [r2, #4]
    return gfxFont->bitmap;
   b881a:	6812      	ldr	r2, [r2, #0]
   b881c:	920b      	str	r2, [sp, #44]	; 0x2c
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   b881e:	1aff      	subs	r7, r7, r3
    return gfxFont->glyph + c;
   b8820:	b2ff      	uxtb	r7, r7
   b8822:	eb01 03c7 	add.w	r3, r1, r7, lsl #3
        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
   b8826:	f831 2037 	ldrh.w	r2, [r1, r7, lsl #3]
   b882a:	9206      	str	r2, [sp, #24]
        uint8_t  w  = pgm_read_byte(&glyph->width),
   b882c:	789a      	ldrb	r2, [r3, #2]
   b882e:	9209      	str	r2, [sp, #36]	; 0x24
                 h  = pgm_read_byte(&glyph->height);
   b8830:	78da      	ldrb	r2, [r3, #3]
   b8832:	920c      	str	r2, [sp, #48]	; 0x30
        if(size_x > 1 || size_y > 1) {
   b8834:	2d01      	cmp	r5, #1
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   b8836:	f993 2005 	ldrsb.w	r2, [r3, #5]
                 yo = pgm_read_byte(&glyph->yOffset);
   b883a:	f993 a006 	ldrsb.w	sl, [r3, #6]
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   b883e:	920a      	str	r2, [sp, #40]	; 0x28
        if(size_x > 1 || size_y > 1) {
   b8840:	d801      	bhi.n	b8846 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1e6>
   b8842:	2c01      	cmp	r4, #1
   b8844:	d957      	bls.n	b88f6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x296>
            xo16 = xo;
   b8846:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
   b884a:	9308      	str	r3, [sp, #32]
            yo16 = yo;
   b884c:	fa0f f38a 	sxth.w	r3, sl
   b8850:	9307      	str	r3, [sp, #28]
        startWrite();
   b8852:	f8db 3000 	ldr.w	r3, [fp]
   b8856:	4658      	mov	r0, fp
   b8858:	695b      	ldr	r3, [r3, #20]
   b885a:	4798      	blx	r3
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b885c:	b2b3      	uxth	r3, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   b885e:	f04f 0800 	mov.w	r8, #0
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b8862:	930e      	str	r3, [sp, #56]	; 0x38
                        writePixel(x+xo+xx, y+yo+yy, color);
   b8864:	fa1a f386 	uxtah	r3, sl, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   b8868:	46c1      	mov	r9, r8
        for(yy=0; yy<h; yy++) {
   b886a:	4647      	mov	r7, r8
                        writePixel(x+xo+xx, y+yo+yy, color);
   b886c:	930f      	str	r3, [sp, #60]	; 0x3c
        for(yy=0; yy<h; yy++) {
   b886e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b8870:	429f      	cmp	r7, r3
   b8872:	d28f      	bcs.n	b8794 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b8874:	9b07      	ldr	r3, [sp, #28]
   b8876:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   b8878:	443b      	add	r3, r7
   b887a:	fb03 2304 	mla	r3, r3, r4, r2
            for(xx=0; xx<w; xx++) {
   b887e:	2200      	movs	r2, #0
   b8880:	9205      	str	r2, [sp, #20]
                        writePixel(x+xo+xx, y+yo+yy, color);
   b8882:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b8884:	b21b      	sxth	r3, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   b8886:	eb02 0a07 	add.w	sl, r2, r7
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b888a:	ee08 3a10 	vmov	s16, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   b888e:	fa0f fa8a 	sxth.w	sl, sl
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b8892:	4643      	mov	r3, r8
            for(xx=0; xx<w; xx++) {
   b8894:	9a09      	ldr	r2, [sp, #36]	; 0x24
   b8896:	9905      	ldr	r1, [sp, #20]
   b8898:	4291      	cmp	r1, r2
   b889a:	d241      	bcs.n	b8920 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2c0>
                if(!(bit++ & 7)) {
   b889c:	1c5a      	adds	r2, r3, #1
   b889e:	b2d2      	uxtb	r2, r2
   b88a0:	075b      	lsls	r3, r3, #29
   b88a2:	920d      	str	r2, [sp, #52]	; 0x34
   b88a4:	d107      	bne.n	b88b6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x256>
                    bits = pgm_read_byte(&bitmap[bo++]);
   b88a6:	9b06      	ldr	r3, [sp, #24]
   b88a8:	9906      	ldr	r1, [sp, #24]
   b88aa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b88ac:	3301      	adds	r3, #1
   b88ae:	b29b      	uxth	r3, r3
   b88b0:	f812 9001 	ldrb.w	r9, [r2, r1]
   b88b4:	9306      	str	r3, [sp, #24]
                if(bits & 0x80) {
   b88b6:	f019 0f80 	tst.w	r9, #128	; 0x80
   b88ba:	d012      	beq.n	b88e2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
                    if(size_x == 1 && size_y == 1) {
   b88bc:	2d01      	cmp	r5, #1
                        writePixel(x+xo+xx, y+yo+yy, color);
   b88be:	f8db 3000 	ldr.w	r3, [fp]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b88c2:	f8bd 100c 	ldrh.w	r1, [sp, #12]
                    if(size_x == 1 && size_y == 1) {
   b88c6:	d11a      	bne.n	b88fe <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
   b88c8:	2c01      	cmp	r4, #1
   b88ca:	d118      	bne.n	b88fe <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
                        writePixel(x+xo+xx, y+yo+yy, color);
   b88cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   b88ce:	699b      	ldr	r3, [r3, #24]
   b88d0:	4411      	add	r1, r2
   b88d2:	9a05      	ldr	r2, [sp, #20]
   b88d4:	4411      	add	r1, r2
   b88d6:	461e      	mov	r6, r3
   b88d8:	4652      	mov	r2, sl
   b88da:	9b04      	ldr	r3, [sp, #16]
   b88dc:	b209      	sxth	r1, r1
   b88de:	4658      	mov	r0, fp
   b88e0:	47b0      	blx	r6
            for(xx=0; xx<w; xx++) {
   b88e2:	9e05      	ldr	r6, [sp, #20]
   b88e4:	3601      	adds	r6, #1
   b88e6:	b2f3      	uxtb	r3, r6
                bits <<= 1;
   b88e8:	ea4f 0949 	mov.w	r9, r9, lsl #1
            for(xx=0; xx<w; xx++) {
   b88ec:	9305      	str	r3, [sp, #20]
                bits <<= 1;
   b88ee:	fa5f f989 	uxtb.w	r9, r9
                if(!(bit++ & 7)) {
   b88f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
            for(xx=0; xx<w; xx++) {
   b88f4:	e7ce      	b.n	b8894 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x234>
        int16_t  xo16 = 0, yo16 = 0;
   b88f6:	2300      	movs	r3, #0
   b88f8:	e9cd 3307 	strd	r3, r3, [sp, #28]
   b88fc:	e7a9      	b.n	b8852 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1f2>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b88fe:	9805      	ldr	r0, [sp, #20]
   b8900:	9a08      	ldr	r2, [sp, #32]
   b8902:	4402      	add	r2, r0
   b8904:	fb02 1105 	mla	r1, r2, r5, r1
   b8908:	9a04      	ldr	r2, [sp, #16]
   b890a:	e9cd 4200 	strd	r4, r2, [sp]
   b890e:	69db      	ldr	r3, [r3, #28]
   b8910:	ee18 2a10 	vmov	r2, s16
   b8914:	461e      	mov	r6, r3
   b8916:	b209      	sxth	r1, r1
   b8918:	462b      	mov	r3, r5
   b891a:	4658      	mov	r0, fp
   b891c:	47b0      	blx	r6
   b891e:	e7e0      	b.n	b88e2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
   b8920:	9b09      	ldr	r3, [sp, #36]	; 0x24
        for(yy=0; yy<h; yy++) {
   b8922:	3701      	adds	r7, #1
   b8924:	4498      	add	r8, r3
   b8926:	fa5f f888 	uxtb.w	r8, r8
   b892a:	b2ff      	uxtb	r7, r7
   b892c:	e79f      	b.n	b886e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x20e>
}
   b892e:	b011      	add	sp, #68	; 0x44
   b8930:	ecbd 8b02 	vpop	{d8}
   b8934:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b8938:	000bc65e 	.word	0x000bc65e

000b893c <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
   b893c:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(!gfxFont) { // 'Classic' built-in font
   b893e:	6a02      	ldr	r2, [r0, #32]
size_t Adafruit_GFX::write(uint8_t c) {
   b8940:	b085      	sub	sp, #20
   b8942:	4604      	mov	r4, r0
   b8944:	460b      	mov	r3, r1
    if(!gfxFont) { // 'Classic' built-in font
   b8946:	2a00      	cmp	r2, #0
   b8948:	d134      	bne.n	b89b4 <_ZN12Adafruit_GFX5writeEh+0x78>
        if(c == '\n') {                        // Newline?
   b894a:	290a      	cmp	r1, #10
   b894c:	d108      	bne.n	b8960 <_ZN12Adafruit_GFX5writeEh+0x24>
            cursor_y += textsize_y * 8;        // advance y one line
   b894e:	8a43      	ldrh	r3, [r0, #18]
            cursor_x  = 0;                     // Reset x to zero,
   b8950:	8202      	strh	r2, [r0, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   b8952:	7e42      	ldrb	r2, [r0, #25]
   b8954:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
            cursor_y += (int16_t)textsize_y *
   b8958:	8263      	strh	r3, [r4, #18]
}
   b895a:	2001      	movs	r0, #1
   b895c:	b005      	add	sp, #20
   b895e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        } else if(c != '\r') {                 // Ignore carriage returns
   b8960:	290d      	cmp	r1, #13
   b8962:	d0fa      	beq.n	b895a <_ZN12Adafruit_GFX5writeEh+0x1e>
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b8964:	7ee1      	ldrb	r1, [r4, #27]
   b8966:	7e00      	ldrb	r0, [r0, #24]
            cursor_y += textsize_y * 8;        // advance y one line
   b8968:	7e65      	ldrb	r5, [r4, #25]
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b896a:	b171      	cbz	r1, b898a <_ZN12Adafruit_GFX5writeEh+0x4e>
   b896c:	f9b4 6010 	ldrsh.w	r6, [r4, #16]
   b8970:	2106      	movs	r1, #6
   b8972:	fb11 6100 	smlabb	r1, r1, r0, r6
   b8976:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
   b897a:	42b1      	cmp	r1, r6
            cursor_y += textsize_y * 8;        // advance y one line
   b897c:	bfc1      	itttt	gt
   b897e:	f9b4 1012 	ldrshgt.w	r1, [r4, #18]
                cursor_x  = 0;                 // Reset x to zero,
   b8982:	8222      	strhgt	r2, [r4, #16]
                cursor_y += textsize_y * 8;    // advance y one line
   b8984:	eb01 02c5 	addgt.w	r2, r1, r5, lsl #3
   b8988:	8262      	strhgt	r2, [r4, #18]
            drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   b898a:	8ae2      	ldrh	r2, [r4, #22]
   b898c:	9201      	str	r2, [sp, #4]
   b898e:	8aa2      	ldrh	r2, [r4, #20]
   b8990:	9200      	str	r2, [sp, #0]
   b8992:	e9cd 0502 	strd	r0, r5, [sp, #8]
   b8996:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   b899a:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b899e:	4620      	mov	r0, r4
   b89a0:	f7ff fe5e 	bl	b8660 <_ZN12Adafruit_GFX8drawCharEsshtthh>
            cursor_x += textsize_x * 6;          // Advance x one char
   b89a4:	7e23      	ldrb	r3, [r4, #24]
   b89a6:	8a22      	ldrh	r2, [r4, #16]
   b89a8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   b89ac:	eb02 0343 	add.w	r3, r2, r3, lsl #1
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   b89b0:	8223      	strh	r3, [r4, #16]
   b89b2:	e7d2      	b.n	b895a <_ZN12Adafruit_GFX5writeEh+0x1e>
        if(c == '\n') {
   b89b4:	290a      	cmp	r1, #10
   b89b6:	d107      	bne.n	b89c8 <_ZN12Adafruit_GFX5writeEh+0x8c>
            cursor_x  = 0;
   b89b8:	2300      	movs	r3, #0
   b89ba:	8203      	strh	r3, [r0, #16]
            cursor_y += (int16_t)textsize_y *
   b89bc:	7e41      	ldrb	r1, [r0, #25]
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   b89be:	7a92      	ldrb	r2, [r2, #10]
            cursor_y += (int16_t)textsize_y *
   b89c0:	8a43      	ldrh	r3, [r0, #18]
   b89c2:	fb01 3302 	mla	r3, r1, r2, r3
   b89c6:	e7c7      	b.n	b8958 <_ZN12Adafruit_GFX5writeEh+0x1c>
        } else if(c != '\r') {
   b89c8:	290d      	cmp	r1, #13
   b89ca:	d0c6      	beq.n	b895a <_ZN12Adafruit_GFX5writeEh+0x1e>
            uint8_t first = pgm_read_byte(&gfxFont->first);
   b89cc:	7a15      	ldrb	r5, [r2, #8]
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
   b89ce:	42a9      	cmp	r1, r5
   b89d0:	d3c3      	bcc.n	b895a <_ZN12Adafruit_GFX5writeEh+0x1e>
   b89d2:	7a51      	ldrb	r1, [r2, #9]
   b89d4:	4299      	cmp	r1, r3
   b89d6:	d3c0      	bcc.n	b895a <_ZN12Adafruit_GFX5writeEh+0x1e>
    return gfxFont->glyph + c;
   b89d8:	6851      	ldr	r1, [r2, #4]
                GFXglyph *glyph  = pgm_read_glyph_ptr(gfxFont, c - first);
   b89da:	1b5d      	subs	r5, r3, r5
    return gfxFont->glyph + c;
   b89dc:	b2ed      	uxtb	r5, r5
   b89de:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
                uint8_t   w     = pgm_read_byte(&glyph->width),
   b89e2:	78a8      	ldrb	r0, [r5, #2]
                if((w > 0) && (h > 0)) { // Is there an associated bitmap?
   b89e4:	b328      	cbz	r0, b8a32 <_ZN12Adafruit_GFX5writeEh+0xf6>
   b89e6:	78e9      	ldrb	r1, [r5, #3]
   b89e8:	b319      	cbz	r1, b8a32 <_ZN12Adafruit_GFX5writeEh+0xf6>
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   b89ea:	7ee1      	ldrb	r1, [r4, #27]
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b89ec:	7e26      	ldrb	r6, [r4, #24]
            cursor_y += textsize_y * 8;        // advance y one line
   b89ee:	7e67      	ldrb	r7, [r4, #25]
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   b89f0:	b191      	cbz	r1, b8a18 <_ZN12Adafruit_GFX5writeEh+0xdc>
   b89f2:	f995 1005 	ldrsb.w	r1, [r5, #5]
   b89f6:	4408      	add	r0, r1
   b89f8:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b89fc:	fb06 1100 	mla	r1, r6, r0, r1
   b8a00:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   b8a04:	4281      	cmp	r1, r0
   b8a06:	dd07      	ble.n	b8a18 <_ZN12Adafruit_GFX5writeEh+0xdc>
                        cursor_x  = 0;
   b8a08:	2000      	movs	r0, #0
   b8a0a:	8220      	strh	r0, [r4, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   b8a0c:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   b8a10:	7a92      	ldrb	r2, [r2, #10]
                        cursor_y += (int16_t)textsize_y *
   b8a12:	fb02 1207 	mla	r2, r2, r7, r1
   b8a16:	8262      	strh	r2, [r4, #18]
                    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   b8a18:	8ae2      	ldrh	r2, [r4, #22]
   b8a1a:	9201      	str	r2, [sp, #4]
   b8a1c:	8aa2      	ldrh	r2, [r4, #20]
   b8a1e:	9200      	str	r2, [sp, #0]
   b8a20:	e9cd 6702 	strd	r6, r7, [sp, #8]
   b8a24:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   b8a28:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b8a2c:	4620      	mov	r0, r4
   b8a2e:	f7ff fe17 	bl	b8660 <_ZN12Adafruit_GFX8drawCharEsshtthh>
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   b8a32:	7929      	ldrb	r1, [r5, #4]
   b8a34:	7e22      	ldrb	r2, [r4, #24]
   b8a36:	8a23      	ldrh	r3, [r4, #16]
   b8a38:	fb01 3302 	mla	r3, r1, r2, r3
   b8a3c:	e7b8      	b.n	b89b0 <_ZN12Adafruit_GFX5writeEh+0x74>

000b8a3e <_ZN12Adafruit_GFX11setTextSizeEh>:
    textsize_x = (s_x > 0) ? s_x : 1;
   b8a3e:	2901      	cmp	r1, #1
   b8a40:	bf38      	it	cc
   b8a42:	2101      	movcc	r1, #1
   b8a44:	7601      	strb	r1, [r0, #24]
    textsize_y = (s_y > 0) ? s_y : 1;
   b8a46:	7641      	strb	r1, [r0, #25]
}
   b8a48:	4770      	bx	lr

000b8a4a <_ZN7MFRC522C1Ehh>:

/**
 * Constructor.
 * Prepares the output pins.
 */
MFRC522::MFRC522(	byte chipSelectPin,		///< Arduino pin connected to MFRC522's SPI slave select input (Pin 24, NSS, active low)
   b8a4a:	b538      	push	{r3, r4, r5, lr}
   b8a4c:	4604      	mov	r4, r0
   b8a4e:	4608      	mov	r0, r1
					byte resetPowerDownPin	///< Arduino pin connected to MFRC522's reset and power down input (Pin 6, NRSTPD, active low)
				) {
	// Set the chipSelectPin as digital output, do not select the slave yet
	_chipSelectPin = chipSelectPin;
   b8a50:	7321      	strb	r1, [r4, #12]
	pinMode(_chipSelectPin, OUTPUT);
   b8a52:	2101      	movs	r1, #1
MFRC522::MFRC522(	byte chipSelectPin,		///< Arduino pin connected to MFRC522's SPI slave select input (Pin 24, NSS, active low)
   b8a54:	4615      	mov	r5, r2
	pinMode(_chipSelectPin, OUTPUT);
   b8a56:	f002 fc0d 	bl	bb274 <pinMode>
	digitalWrite(_chipSelectPin, HIGH);
   b8a5a:	7b20      	ldrb	r0, [r4, #12]
   b8a5c:	2101      	movs	r1, #1
   b8a5e:	f002 fc1a 	bl	bb296 <digitalWrite>
	
	// Set the resetPowerDownPin as digital output, do not reset or power down.
	_resetPowerDownPin = resetPowerDownPin;
	pinMode(_resetPowerDownPin, OUTPUT);
   b8a62:	4628      	mov	r0, r5
	_resetPowerDownPin = resetPowerDownPin;
   b8a64:	7365      	strb	r5, [r4, #13]
	pinMode(_resetPowerDownPin, OUTPUT);
   b8a66:	2101      	movs	r1, #1
   b8a68:	f002 fc04 	bl	bb274 <pinMode>
	digitalWrite(_resetPowerDownPin, LOW);
   b8a6c:	7b60      	ldrb	r0, [r4, #13]
   b8a6e:	2100      	movs	r1, #0
   b8a70:	f002 fc11 	bl	bb296 <digitalWrite>
	
	// Set SPI bus to work with MFRC522 chip.
	//setSPIConfig();
} // End constructor
   b8a74:	4620      	mov	r0, r4
   b8a76:	bd38      	pop	{r3, r4, r5, pc}

000b8a78 <_ZN7MFRC52217GetStatusCodeNameEh>:
 * Returns a string pointer to a status code name.
 * 
 */
const char *MFRC522::GetStatusCodeName(byte code	///< One of the StatusCode enums.
										) {
	switch (code) {
   b8a78:	3901      	subs	r1, #1
   b8a7a:	b2c9      	uxtb	r1, r1
   b8a7c:	2908      	cmp	r1, #8
   b8a7e:	bf9a      	itte	ls
   b8a80:	4b02      	ldrls	r3, [pc, #8]	; (b8a8c <_ZN7MFRC52217GetStatusCodeNameEh+0x14>)
   b8a82:	f853 0021 	ldrls.w	r0, [r3, r1, lsl #2]
										) {
   b8a86:	4802      	ldrhi	r0, [pc, #8]	; (b8a90 <_ZN7MFRC52217GetStatusCodeNameEh+0x18>)
		case STATUS_MIFARE_NACK:	return "A MIFARE PICC responded with NAK."; break;
		default:
			return "Unknown error";
			break;
	}
} // End GetStatusCodeName()
   b8a88:	4770      	bx	lr
   b8a8a:	bf00      	nop
   b8a8c:	000bccb0 	.word	0x000bccb0
   b8a90:	000bcbb8 	.word	0x000bcbb8

000b8a94 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
    static SPIClass& instance() {
   b8a94:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   b8a96:	4c0b      	ldr	r4, [pc, #44]	; (b8ac4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   b8a98:	7821      	ldrb	r1, [r4, #0]
   b8a9a:	f3bf 8f5b 	dmb	ish
   b8a9e:	f011 0101 	ands.w	r1, r1, #1
   b8aa2:	d10b      	bne.n	b8abc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b8aa4:	4620      	mov	r0, r4
   b8aa6:	9101      	str	r1, [sp, #4]
   b8aa8:	f7fb ffdc 	bl	b4a64 <__cxa_guard_acquire>
   b8aac:	9901      	ldr	r1, [sp, #4]
   b8aae:	b128      	cbz	r0, b8abc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b8ab0:	4805      	ldr	r0, [pc, #20]	; (b8ac8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b8ab2:	f001 fd37 	bl	ba524 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b8ab6:	4620      	mov	r0, r4
   b8ab8:	f7fb ffd9 	bl	b4a6e <__cxa_guard_release>
    }
   b8abc:	4802      	ldr	r0, [pc, #8]	; (b8ac8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b8abe:	b002      	add	sp, #8
   b8ac0:	bd10      	pop	{r4, pc}
   b8ac2:	bf00      	nop
   b8ac4:	2003c730 	.word	0x2003c730
   b8ac8:	2003c734 	.word	0x2003c734

000b8acc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>:
        return instance().setClockSpeed(value, scale);
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
   b8acc:	b507      	push	{r0, r1, r2, lr}
   b8ace:	9001      	str	r0, [sp, #4]
        return instance().transfer(data);
   b8ad0:	f7ff ffe0 	bl	b8a94 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b8ad4:	9901      	ldr	r1, [sp, #4]
    }
   b8ad6:	b003      	add	sp, #12
   b8ad8:	f85d eb04 	ldr.w	lr, [sp], #4
        return instance().transfer(data);
   b8adc:	f001 bdc8 	b.w	ba670 <_ZN8SPIClass8transferEh>

000b8ae0 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh>:
								) {
   b8ae0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8ae4:	4607      	mov	r7, r0
   b8ae6:	f89d 8030 	ldrb.w	r8, [sp, #48]	; 0x30
   b8aea:	461e      	mov	r6, r3
	if (count == 0) {
   b8aec:	4615      	mov	r5, r2
   b8aee:	2a00      	cmp	r2, #0
   b8af0:	d042      	beq.n	b8b78 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x98>
	byte address = 0x80 | (reg & 0x7E);		// MSB == 1 is for reading. LSB is not used in address. Datasheet section 8.1.2.3.
   b8af2:	f001 017e 	and.w	r1, r1, #126	; 0x7e
	digitalWrite(_chipSelectPin, LOW);		// Select slave
   b8af6:	7b00      	ldrb	r0, [r0, #12]
	byte address = 0x80 | (reg & 0x7E);		// MSB == 1 is for reading. LSB is not used in address. Datasheet section 8.1.2.3.
   b8af8:	f041 0980 	orr.w	r9, r1, #128	; 0x80
	digitalWrite(_chipSelectPin, LOW);		// Select slave
   b8afc:	2100      	movs	r1, #0
   b8afe:	f002 fbca 	bl	bb296 <digitalWrite>
	SPI.transfer(address);					// Tell MFRC522 which address we want to read
   b8b02:	4648      	mov	r0, r9
   b8b04:	f7ff ffe2 	bl	b8acc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
	count--;								// One read is performed outside of the loop
   b8b08:	3d01      	subs	r5, #1
   b8b0a:	b2ed      	uxtb	r5, r5
	SPI.transfer(address);					// Tell MFRC522 which address we want to read
   b8b0c:	f04f 0b00 	mov.w	fp, #0
				mask |= (1 << i);
   b8b10:	f04f 0a01 	mov.w	sl, #1
	while (index < count) {
   b8b14:	fa5f f48b 	uxtb.w	r4, fp
   b8b18:	42a5      	cmp	r5, r4
   b8b1a:	d922      	bls.n	b8b62 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x82>
		if (index == 0 && rxAlign) { // Only update bit positions rxAlign..7 in values[0]
   b8b1c:	b9dc      	cbnz	r4, b8b56 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x76>
   b8b1e:	f1b8 0f00 	cmp.w	r8, #0
   b8b22:	d018      	beq.n	b8b56 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x76>
   b8b24:	4642      	mov	r2, r8
			for (byte i = rxAlign; i <= 7; i++) {
   b8b26:	b2d3      	uxtb	r3, r2
   b8b28:	2b07      	cmp	r3, #7
				mask |= (1 << i);
   b8b2a:	b261      	sxtb	r1, r4
			for (byte i = rxAlign; i <= 7; i++) {
   b8b2c:	d805      	bhi.n	b8b3a <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x5a>
				mask |= (1 << i);
   b8b2e:	fa0a f402 	lsl.w	r4, sl, r2
   b8b32:	430c      	orrs	r4, r1
   b8b34:	b2e4      	uxtb	r4, r4
			for (byte i = rxAlign; i <= 7; i++) {
   b8b36:	3201      	adds	r2, #1
   b8b38:	e7f5      	b.n	b8b26 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x46>
			byte value = SPI.transfer(address);	
   b8b3a:	4648      	mov	r0, r9
   b8b3c:	9101      	str	r1, [sp, #4]
   b8b3e:	f7ff ffc5 	bl	b8acc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
			values[0] = (values[index] & ~mask) | (value & mask);
   b8b42:	7833      	ldrb	r3, [r6, #0]
   b8b44:	9901      	ldr	r1, [sp, #4]
   b8b46:	4004      	ands	r4, r0
   b8b48:	ea23 0301 	bic.w	r3, r3, r1
   b8b4c:	431c      	orrs	r4, r3
   b8b4e:	7034      	strb	r4, [r6, #0]
		index++;
   b8b50:	f10b 0b01 	add.w	fp, fp, #1
	while (index < count) {
   b8b54:	e7de      	b.n	b8b14 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x34>
			values[index] = SPI.transfer(address);	// Read value and tell that we want to read the same address again.
   b8b56:	4648      	mov	r0, r9
   b8b58:	f7ff ffb8 	bl	b8acc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
   b8b5c:	f806 000b 	strb.w	r0, [r6, fp]
   b8b60:	e7f6      	b.n	b8b50 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x70>
	values[index] = SPI.transfer(0);			// Read the final byte. Send 0 to stop reading.
   b8b62:	2000      	movs	r0, #0
   b8b64:	f7ff ffb2 	bl	b8acc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
   b8b68:	5570      	strb	r0, [r6, r5]
	digitalWrite(_chipSelectPin, HIGH);			// Release slave again
   b8b6a:	7b38      	ldrb	r0, [r7, #12]
   b8b6c:	2101      	movs	r1, #1
} // End PCD_ReadRegister()
   b8b6e:	b003      	add	sp, #12
   b8b70:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	digitalWrite(_chipSelectPin, HIGH);			// Release slave again
   b8b74:	f002 bb8f 	b.w	bb296 <digitalWrite>
} // End PCD_ReadRegister()
   b8b78:	b003      	add	sp, #12
   b8b7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b8b7e <_ZN7MFRC52216PCD_ReadRegisterEh>:
								) {
   b8b7e:	b538      	push	{r3, r4, r5, lr}
   b8b80:	460c      	mov	r4, r1
   b8b82:	4605      	mov	r5, r0
	digitalWrite(_chipSelectPin, LOW);			// Select slave
   b8b84:	2100      	movs	r1, #0
   b8b86:	7b00      	ldrb	r0, [r0, #12]
	SPI.transfer(0x80 | (reg & 0x7E));			// MSB == 1 is for reading. LSB is not used in address. Datasheet section 8.1.2.3.
   b8b88:	f004 047e 	and.w	r4, r4, #126	; 0x7e
	digitalWrite(_chipSelectPin, LOW);			// Select slave
   b8b8c:	f002 fb83 	bl	bb296 <digitalWrite>
	SPI.transfer(0x80 | (reg & 0x7E));			// MSB == 1 is for reading. LSB is not used in address. Datasheet section 8.1.2.3.
   b8b90:	f044 0080 	orr.w	r0, r4, #128	; 0x80
   b8b94:	f7ff ff9a 	bl	b8acc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
	value = SPI.transfer(0);					// Read the value back. Send 0 to stop reading.
   b8b98:	2000      	movs	r0, #0
   b8b9a:	f7ff ff97 	bl	b8acc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
	digitalWrite(_chipSelectPin, HIGH);			// Release slave again
   b8b9e:	2101      	movs	r1, #1
	value = SPI.transfer(0);					// Read the value back. Send 0 to stop reading.
   b8ba0:	4604      	mov	r4, r0
	digitalWrite(_chipSelectPin, HIGH);			// Release slave again
   b8ba2:	7b28      	ldrb	r0, [r5, #12]
   b8ba4:	f002 fb77 	bl	bb296 <digitalWrite>
} // End PCD_ReadRegister()
   b8ba8:	4620      	mov	r0, r4
   b8baa:	bd38      	pop	{r3, r4, r5, pc}

000b8bac <_ZN7MFRC52217PCD_WriteRegisterEhhPh>:
								) {
   b8bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8bae:	460f      	mov	r7, r1
   b8bb0:	4606      	mov	r6, r0
	digitalWrite(_chipSelectPin, LOW);		// Select slave
   b8bb2:	2100      	movs	r1, #0
   b8bb4:	7b00      	ldrb	r0, [r0, #12]
								) {
   b8bb6:	4615      	mov	r5, r2
   b8bb8:	461c      	mov	r4, r3
	digitalWrite(_chipSelectPin, LOW);		// Select slave
   b8bba:	f002 fb6c 	bl	bb296 <digitalWrite>
	SPI.transfer(reg & 0x7E);				// MSB == 0 is for writing. LSB is not used in address. Datasheet section 8.1.2.3.
   b8bbe:	f007 007e 	and.w	r0, r7, #126	; 0x7e
   b8bc2:	f7ff ff83 	bl	b8acc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
	for (byte index = 0; index < count; index++) {
   b8bc6:	4425      	add	r5, r4
   b8bc8:	42ac      	cmp	r4, r5
   b8bca:	d004      	beq.n	b8bd6 <_ZN7MFRC52217PCD_WriteRegisterEhhPh+0x2a>
		SPI.transfer(values[index]);
   b8bcc:	f814 0b01 	ldrb.w	r0, [r4], #1
   b8bd0:	f7ff ff7c 	bl	b8acc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
	for (byte index = 0; index < count; index++) {
   b8bd4:	e7f8      	b.n	b8bc8 <_ZN7MFRC52217PCD_WriteRegisterEhhPh+0x1c>
	digitalWrite(_chipSelectPin, HIGH);		// Release slave again
   b8bd6:	7b30      	ldrb	r0, [r6, #12]
   b8bd8:	2101      	movs	r1, #1
} // End PCD_WriteRegister()
   b8bda:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	digitalWrite(_chipSelectPin, HIGH);		// Release slave again
   b8bde:	f002 bb5a 	b.w	bb296 <digitalWrite>

000b8be2 <_ZN7MFRC52217PCD_WriteRegisterEhh>:
								) {
   b8be2:	b570      	push	{r4, r5, r6, lr}
   b8be4:	4604      	mov	r4, r0
   b8be6:	460e      	mov	r6, r1
	digitalWrite(_chipSelectPin, LOW);		// Select slave
   b8be8:	7b00      	ldrb	r0, [r0, #12]
   b8bea:	2100      	movs	r1, #0
								) {
   b8bec:	4615      	mov	r5, r2
	digitalWrite(_chipSelectPin, LOW);		// Select slave
   b8bee:	f002 fb52 	bl	bb296 <digitalWrite>
	SPI.transfer(reg & 0x7E);					// MSB == 0 is for writing. LSB is not used in address. Datasheet section 8.1.2.3.
   b8bf2:	f006 007e 	and.w	r0, r6, #126	; 0x7e
   b8bf6:	f7ff ff69 	bl	b8acc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
	SPI.transfer(value);
   b8bfa:	4628      	mov	r0, r5
   b8bfc:	f7ff ff66 	bl	b8acc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
	digitalWrite(_chipSelectPin, HIGH);		// Release slave again
   b8c00:	7b20      	ldrb	r0, [r4, #12]
   b8c02:	2101      	movs	r1, #1
} // End PCD_WriteRegister()
   b8c04:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	digitalWrite(_chipSelectPin, HIGH);		// Release slave again
   b8c08:	f002 bb45 	b.w	bb296 <digitalWrite>

000b8c0c <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>:
									) { 
   b8c0c:	b570      	push	{r4, r5, r6, lr}
   b8c0e:	4616      	mov	r6, r2
   b8c10:	4604      	mov	r4, r0
   b8c12:	460d      	mov	r5, r1
	tmp = PCD_ReadRegister(reg);
   b8c14:	f7ff ffb3 	bl	b8b7e <_ZN7MFRC52216PCD_ReadRegisterEh>
	PCD_WriteRegister(reg, tmp | mask);			// set bit mask
   b8c18:	4330      	orrs	r0, r6
   b8c1a:	b2c2      	uxtb	r2, r0
   b8c1c:	4629      	mov	r1, r5
   b8c1e:	4620      	mov	r0, r4
} // End PCD_SetRegisterBitMask()
   b8c20:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	PCD_WriteRegister(reg, tmp | mask);			// set bit mask
   b8c24:	f7ff bfdd 	b.w	b8be2 <_ZN7MFRC52217PCD_WriteRegisterEhh>

000b8c28 <_ZN7MFRC52224PCD_ClearRegisterBitMaskEhh>:
									  ) {
   b8c28:	b570      	push	{r4, r5, r6, lr}
   b8c2a:	4616      	mov	r6, r2
   b8c2c:	4604      	mov	r4, r0
   b8c2e:	460d      	mov	r5, r1
	tmp = PCD_ReadRegister(reg);
   b8c30:	f7ff ffa5 	bl	b8b7e <_ZN7MFRC52216PCD_ReadRegisterEh>
	PCD_WriteRegister(reg, tmp & (~mask));		// clear bit mask
   b8c34:	ea20 0006 	bic.w	r0, r0, r6
   b8c38:	b2c2      	uxtb	r2, r0
   b8c3a:	4629      	mov	r1, r5
   b8c3c:	4620      	mov	r0, r4
} // End PCD_ClearRegisterBitMask()
   b8c3e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	PCD_WriteRegister(reg, tmp & (~mask));		// clear bit mask
   b8c42:	f7ff bfce 	b.w	b8be2 <_ZN7MFRC52217PCD_WriteRegisterEhh>

000b8c46 <_ZN7MFRC52215PCD_StopCrypto1Ev>:
	PCD_ClearRegisterBitMask(Status2Reg, 0x08); // Status2Reg[7..0] bits are: TempSensClear I2CForceHS reserved reserved   MFCrypto1On ModemState[2:0]
   b8c46:	2208      	movs	r2, #8
   b8c48:	2110      	movs	r1, #16
   b8c4a:	f7ff bfed 	b.w	b8c28 <_ZN7MFRC52224PCD_ClearRegisterBitMaskEhh>

000b8c4e <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>:
					 ) {
   b8c4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8c50:	4604      	mov	r4, r0
   b8c52:	4615      	mov	r5, r2
   b8c54:	460f      	mov	r7, r1
	PCD_WriteRegister(CommandReg, PCD_Idle);			// Stop any active command.
   b8c56:	2200      	movs	r2, #0
   b8c58:	2102      	movs	r1, #2
					 ) {
   b8c5a:	461e      	mov	r6, r3
	PCD_WriteRegister(CommandReg, PCD_Idle);			// Stop any active command.
   b8c5c:	f7ff ffc1 	bl	b8be2 <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_WriteRegister(DivIrqReg, 0x04);					// Clear the CRCIRq interrupt request bit
   b8c60:	2204      	movs	r2, #4
   b8c62:	210a      	movs	r1, #10
   b8c64:	4620      	mov	r0, r4
   b8c66:	f7ff ffbc 	bl	b8be2 <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_SetRegisterBitMask(FIFOLevelReg, 0x80);		// FlushBuffer = 1, FIFO initialization
   b8c6a:	2280      	movs	r2, #128	; 0x80
   b8c6c:	2114      	movs	r1, #20
   b8c6e:	4620      	mov	r0, r4
   b8c70:	f7ff ffcc 	bl	b8c0c <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>
	PCD_WriteRegister(FIFODataReg, length, data);		// Write data to the FIFO
   b8c74:	462a      	mov	r2, r5
   b8c76:	463b      	mov	r3, r7
   b8c78:	2112      	movs	r1, #18
   b8c7a:	4620      	mov	r0, r4
   b8c7c:	f7ff ff96 	bl	b8bac <_ZN7MFRC52217PCD_WriteRegisterEhhPh>
	PCD_WriteRegister(CommandReg, PCD_CalcCRC);		// Start the calculation
   b8c80:	2203      	movs	r2, #3
   b8c82:	2102      	movs	r1, #2
   b8c84:	4620      	mov	r0, r4
   b8c86:	f7ff ffac 	bl	b8be2 <_ZN7MFRC52217PCD_WriteRegisterEhh>
   b8c8a:	f241 3588 	movw	r5, #5000	; 0x1388
		n = PCD_ReadRegister(DivIrqReg);	// DivIrqReg[7..0] bits are: Set2 reserved reserved MfinActIRq   reserved CRCIRq reserved reserved
   b8c8e:	210a      	movs	r1, #10
   b8c90:	4620      	mov	r0, r4
   b8c92:	f7ff ff74 	bl	b8b7e <_ZN7MFRC52216PCD_ReadRegisterEh>
		if (n & 0x04) {						// CRCIRq bit set - calculation done
   b8c96:	0743      	lsls	r3, r0, #29
   b8c98:	d405      	bmi.n	b8ca6 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0x58>
		if (--i == 0) {						// The emergency break. We will eventually terminate on this one after 89ms. Communication with the MFRC522 might be down.
   b8c9a:	3d01      	subs	r5, #1
   b8c9c:	b2ad      	uxth	r5, r5
   b8c9e:	2d00      	cmp	r5, #0
   b8ca0:	d1f5      	bne.n	b8c8e <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0x40>
			return STATUS_TIMEOUT;
   b8ca2:	2004      	movs	r0, #4
   b8ca4:	e00f      	b.n	b8cc6 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0x78>
	PCD_WriteRegister(CommandReg, PCD_Idle);			// Stop calculating CRC for new content in the FIFO.
   b8ca6:	2200      	movs	r2, #0
   b8ca8:	2102      	movs	r1, #2
   b8caa:	4620      	mov	r0, r4
   b8cac:	f7ff ff99 	bl	b8be2 <_ZN7MFRC52217PCD_WriteRegisterEhh>
	result[0] = PCD_ReadRegister(CRCResultRegL);
   b8cb0:	2144      	movs	r1, #68	; 0x44
   b8cb2:	4620      	mov	r0, r4
   b8cb4:	f7ff ff63 	bl	b8b7e <_ZN7MFRC52216PCD_ReadRegisterEh>
	result[1] = PCD_ReadRegister(CRCResultRegH);
   b8cb8:	2142      	movs	r1, #66	; 0x42
	result[0] = PCD_ReadRegister(CRCResultRegL);
   b8cba:	7030      	strb	r0, [r6, #0]
	result[1] = PCD_ReadRegister(CRCResultRegH);
   b8cbc:	4620      	mov	r0, r4
   b8cbe:	f7ff ff5e 	bl	b8b7e <_ZN7MFRC52216PCD_ReadRegisterEh>
   b8cc2:	7070      	strb	r0, [r6, #1]
	return STATUS_OK;
   b8cc4:	2001      	movs	r0, #1
} // End PCD_CalculateCRC()
   b8cc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b8cc8 <_ZN7MFRC5229PCD_ResetEv>:
void MFRC522::PCD_Reset() {
   b8cc8:	b510      	push	{r4, lr}
	PCD_WriteRegister(CommandReg, PCD_SoftReset);	// Issue the SoftReset command.
   b8cca:	220f      	movs	r2, #15
   b8ccc:	2102      	movs	r1, #2
void MFRC522::PCD_Reset() {
   b8cce:	4604      	mov	r4, r0
	PCD_WriteRegister(CommandReg, PCD_SoftReset);	// Issue the SoftReset command.
   b8cd0:	f7ff ff87 	bl	b8be2 <_ZN7MFRC52217PCD_WriteRegisterEhh>
	delay(50);
   b8cd4:	2032      	movs	r0, #50	; 0x32
   b8cd6:	f001 ff02 	bl	baade <delay>
	while (PCD_ReadRegister(CommandReg) & (1<<4)) {
   b8cda:	2102      	movs	r1, #2
   b8cdc:	4620      	mov	r0, r4
   b8cde:	f7ff ff4e 	bl	b8b7e <_ZN7MFRC52216PCD_ReadRegisterEh>
   b8ce2:	06c3      	lsls	r3, r0, #27
   b8ce4:	d4f9      	bmi.n	b8cda <_ZN7MFRC5229PCD_ResetEv+0x12>
} // End PCD_Reset()
   b8ce6:	bd10      	pop	{r4, pc}

000b8ce8 <_ZN7MFRC52213PCD_AntennaOnEv>:
void MFRC522::PCD_AntennaOn() {
   b8ce8:	b510      	push	{r4, lr}
	byte value = PCD_ReadRegister(TxControlReg);
   b8cea:	2128      	movs	r1, #40	; 0x28
void MFRC522::PCD_AntennaOn() {
   b8cec:	4604      	mov	r4, r0
	byte value = PCD_ReadRegister(TxControlReg);
   b8cee:	f7ff ff46 	bl	b8b7e <_ZN7MFRC52216PCD_ReadRegisterEh>
	if ((value & 0x03) != 0x03) {
   b8cf2:	f000 0303 	and.w	r3, r0, #3
   b8cf6:	2b03      	cmp	r3, #3
   b8cf8:	d008      	beq.n	b8d0c <_ZN7MFRC52213PCD_AntennaOnEv+0x24>
		PCD_WriteRegister(TxControlReg, value | 0x03);
   b8cfa:	f040 0203 	orr.w	r2, r0, #3
   b8cfe:	b2d2      	uxtb	r2, r2
   b8d00:	4620      	mov	r0, r4
   b8d02:	2128      	movs	r1, #40	; 0x28
} // End PCD_AntennaOn()
   b8d04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		PCD_WriteRegister(TxControlReg, value | 0x03);
   b8d08:	f7ff bf6b 	b.w	b8be2 <_ZN7MFRC52217PCD_WriteRegisterEhh>
} // End PCD_AntennaOn()
   b8d0c:	bd10      	pop	{r4, pc}

000b8d0e <_ZN7MFRC5228PCD_InitEv>:
void MFRC522::PCD_Init() {
   b8d0e:	b510      	push	{r4, lr}
   b8d10:	4604      	mov	r4, r0
	if (digitalRead(_resetPowerDownPin) == LOW) { //The MFRC522 chip is in power down mode.
   b8d12:	7b40      	ldrb	r0, [r0, #13]
   b8d14:	f002 fad8 	bl	bb2c8 <digitalRead>
   b8d18:	bb48      	cbnz	r0, b8d6e <_ZN7MFRC5228PCD_InitEv+0x60>
		digitalWrite(_resetPowerDownPin, HIGH);	// Exit power down mode. This triggers a hard reset.
   b8d1a:	7b60      	ldrb	r0, [r4, #13]
   b8d1c:	2101      	movs	r1, #1
   b8d1e:	f002 faba 	bl	bb296 <digitalWrite>
		delay(50);
   b8d22:	2032      	movs	r0, #50	; 0x32
   b8d24:	f001 fedb 	bl	baade <delay>
    PCD_WriteRegister(TModeReg, 0x80);			// TAuto=1; timer starts automatically at the end of the transmission in all communication modes at all speeds
   b8d28:	4620      	mov	r0, r4
   b8d2a:	2280      	movs	r2, #128	; 0x80
   b8d2c:	2154      	movs	r1, #84	; 0x54
   b8d2e:	f7ff ff58 	bl	b8be2 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    PCD_WriteRegister(TPrescalerReg, 0xA9);	// TPreScaler = TModeReg[3..0]:TPrescalerReg, ie 0x0A9 = 169 => f_timer=40kHz, ie a timer period of 25�s.
   b8d32:	4620      	mov	r0, r4
   b8d34:	22a9      	movs	r2, #169	; 0xa9
   b8d36:	2156      	movs	r1, #86	; 0x56
   b8d38:	f7ff ff53 	bl	b8be2 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    PCD_WriteRegister(TReloadRegH, 0x03);		// Reload timer with 0x3E8 = 1000, ie 25ms before timeout.
   b8d3c:	4620      	mov	r0, r4
   b8d3e:	2203      	movs	r2, #3
   b8d40:	2158      	movs	r1, #88	; 0x58
   b8d42:	f7ff ff4e 	bl	b8be2 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    PCD_WriteRegister(TReloadRegL, 0xE8);
   b8d46:	4620      	mov	r0, r4
   b8d48:	22e8      	movs	r2, #232	; 0xe8
   b8d4a:	215a      	movs	r1, #90	; 0x5a
   b8d4c:	f7ff ff49 	bl	b8be2 <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_WriteRegister(TxASKReg, 0x40);		// Default 0x00. Force a 100 % ASK modulation independent of the ModGsPReg register setting
   b8d50:	4620      	mov	r0, r4
   b8d52:	2240      	movs	r2, #64	; 0x40
   b8d54:	212a      	movs	r1, #42	; 0x2a
   b8d56:	f7ff ff44 	bl	b8be2 <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_WriteRegister(ModeReg, 0x3D);		// Default 0x3F. Set the preset value for the CRC coprocessor for the CalcCRC command to 0x6363 (ISO 14443-3 part 6.2.4)
   b8d5a:	4620      	mov	r0, r4
   b8d5c:	223d      	movs	r2, #61	; 0x3d
   b8d5e:	2122      	movs	r1, #34	; 0x22
   b8d60:	f7ff ff3f 	bl	b8be2 <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_AntennaOn();						// Enable the antenna driver pins TX1 and TX2 (they were disabled by the reset)
   b8d64:	4620      	mov	r0, r4
} // End PCD_Init()
   b8d66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	PCD_AntennaOn();						// Enable the antenna driver pins TX1 and TX2 (they were disabled by the reset)
   b8d6a:	f7ff bfbd 	b.w	b8ce8 <_ZN7MFRC52213PCD_AntennaOnEv>
		PCD_Reset();
   b8d6e:	4620      	mov	r0, r4
   b8d70:	f7ff ffaa 	bl	b8cc8 <_ZN7MFRC5229PCD_ResetEv>
   b8d74:	e7d8      	b.n	b8d28 <_ZN7MFRC5228PCD_InitEv+0x1a>

000b8d76 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb>:
									 ) {
   b8d76:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8d7a:	b089      	sub	sp, #36	; 0x24
   b8d7c:	e9dd 5613 	ldrd	r5, r6, [sp, #76]	; 0x4c
   b8d80:	f8dd 9054 	ldr.w	r9, [sp, #84]	; 0x54
   b8d84:	9203      	str	r2, [sp, #12]
   b8d86:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
   b8d8a:	f89d b058 	ldrb.w	fp, [sp, #88]	; 0x58
   b8d8e:	9204      	str	r2, [sp, #16]
   b8d90:	4604      	mov	r4, r0
   b8d92:	468a      	mov	sl, r1
   b8d94:	2700      	movs	r7, #0
	byte txLastBits = validBits ? *validBits : 0;
   b8d96:	f1b9 0f00 	cmp.w	r9, #0
   b8d9a:	d03e      	beq.n	b8e1a <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xa4>
   b8d9c:	f899 8000 	ldrb.w	r8, [r9]
   b8da0:	9305      	str	r3, [sp, #20]
	PCD_WriteRegister(CommandReg, PCD_Idle);			// Stop any active command.
   b8da2:	2200      	movs	r2, #0
   b8da4:	2102      	movs	r1, #2
   b8da6:	4620      	mov	r0, r4
   b8da8:	f7ff ff1b 	bl	b8be2 <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_WriteRegister(ComIrqReg, 0x7F);					// Clear all seven interrupt request bits
   b8dac:	227f      	movs	r2, #127	; 0x7f
   b8dae:	2108      	movs	r1, #8
   b8db0:	4620      	mov	r0, r4
   b8db2:	f7ff ff16 	bl	b8be2 <_ZN7MFRC52217PCD_WriteRegisterEhh>
	byte bitFraming	= (rxAlign << 4) + txLastBits;		// RxAlign = BitFramingReg[6..4]. TxLastBits = BitFramingReg[2..0]
   b8db6:	eb08 180b 	add.w	r8, r8, fp, lsl #4
	PCD_SetRegisterBitMask(FIFOLevelReg, 0x80);		// FlushBuffer = 1, FIFO initialization
   b8dba:	2280      	movs	r2, #128	; 0x80
   b8dbc:	2114      	movs	r1, #20
   b8dbe:	4620      	mov	r0, r4
   b8dc0:	f7ff ff24 	bl	b8c0c <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>
	byte bitFraming	= (rxAlign << 4) + txLastBits;		// RxAlign = BitFramingReg[6..4]. TxLastBits = BitFramingReg[2..0]
   b8dc4:	fa5f f888 	uxtb.w	r8, r8
	PCD_WriteRegister(FIFODataReg, sendLen, sendData);	// Write sendData to the FIFO
   b8dc8:	9b05      	ldr	r3, [sp, #20]
   b8dca:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
   b8dce:	2112      	movs	r1, #18
   b8dd0:	4620      	mov	r0, r4
   b8dd2:	f7ff feeb 	bl	b8bac <_ZN7MFRC52217PCD_WriteRegisterEhhPh>
	PCD_WriteRegister(BitFramingReg, bitFraming);		// Bit adjustments
   b8dd6:	4642      	mov	r2, r8
   b8dd8:	211a      	movs	r1, #26
   b8dda:	4620      	mov	r0, r4
   b8ddc:	f7ff ff01 	bl	b8be2 <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_WriteRegister(CommandReg, command);			// Execute the command
   b8de0:	4652      	mov	r2, sl
   b8de2:	2102      	movs	r1, #2
   b8de4:	4620      	mov	r0, r4
   b8de6:	f7ff fefc 	bl	b8be2 <_ZN7MFRC52217PCD_WriteRegisterEhh>
	if (command == PCD_Transceive) 	{
   b8dea:	f1ba 0f0c 	cmp.w	sl, #12
   b8dee:	d104      	bne.n	b8dfa <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x84>
		PCD_SetRegisterBitMask(BitFramingReg, 0x80);	// StartSend=1, transmission of data starts
   b8df0:	2280      	movs	r2, #128	; 0x80
   b8df2:	211a      	movs	r1, #26
   b8df4:	4620      	mov	r0, r4
   b8df6:	f7ff ff09 	bl	b8c0c <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>
	byte txLastBits = validBits ? *validBits : 0;
   b8dfa:	f44f 68fa 	mov.w	r8, #2000	; 0x7d0
		n = PCD_ReadRegister(ComIrqReg);	// ComIrqReg[7..0] bits are: Set1 TxIRq RxIRq IdleIRq   HiAlertIRq LoAlertIRq ErrIRq TimerIRq
   b8dfe:	2108      	movs	r1, #8
   b8e00:	4620      	mov	r0, r4
   b8e02:	f7ff febc 	bl	b8b7e <_ZN7MFRC52216PCD_ReadRegisterEh>
		if (n & waitIRq) {					// One of the interrupts that signal success has been set.
   b8e06:	9b03      	ldr	r3, [sp, #12]
   b8e08:	4218      	tst	r0, r3
   b8e0a:	d108      	bne.n	b8e1e <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xa8>
		if (n & 0x01) {						// Timer interrupt - nothing received in 25ms
   b8e0c:	07c3      	lsls	r3, r0, #31
   b8e0e:	d402      	bmi.n	b8e16 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xa0>
		if (--i == 0) {						// The emergency break. If all other condions fail we will eventually terminate on this one after 35.7ms. Communication with the MFRC522 might be down.
   b8e10:	f1b8 0801 	subs.w	r8, r8, #1
   b8e14:	d1f3      	bne.n	b8dfe <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x88>
			return STATUS_TIMEOUT;
   b8e16:	2004      	movs	r0, #4
   b8e18:	e04d      	b.n	b8eb6 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
	byte txLastBits = validBits ? *validBits : 0;
   b8e1a:	46c8      	mov	r8, r9
   b8e1c:	e7c0      	b.n	b8da0 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x2a>
	byte errorRegValue = PCD_ReadRegister(ErrorReg); // ErrorReg[7..0] bits are: WrErr TempErr reserved BufferOvfl   CollErr CRCErr ParityErr ProtocolErr
   b8e1e:	210c      	movs	r1, #12
   b8e20:	4620      	mov	r0, r4
   b8e22:	f7ff feac 	bl	b8b7e <_ZN7MFRC52216PCD_ReadRegisterEh>
	if (errorRegValue & 0x13) {	 // BufferOvfl ParityErr ProtocolErr
   b8e26:	f010 0f13 	tst.w	r0, #19
	byte errorRegValue = PCD_ReadRegister(ErrorReg); // ErrorReg[7..0] bits are: WrErr TempErr reserved BufferOvfl   CollErr CRCErr ParityErr ProtocolErr
   b8e2a:	4680      	mov	r8, r0
	if (errorRegValue & 0x13) {	 // BufferOvfl ParityErr ProtocolErr
   b8e2c:	d146      	bne.n	b8ebc <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x146>
	if (backData && backLen) {
   b8e2e:	b1dd      	cbz	r5, b8e68 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xf2>
   b8e30:	b1d6      	cbz	r6, b8e68 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xf2>
		n = PCD_ReadRegister(FIFOLevelReg);						// Number of bytes in the FIFO
   b8e32:	2114      	movs	r1, #20
   b8e34:	4620      	mov	r0, r4
   b8e36:	f7ff fea2 	bl	b8b7e <_ZN7MFRC52216PCD_ReadRegisterEh>
		if (n > *backLen) {
   b8e3a:	7833      	ldrb	r3, [r6, #0]
   b8e3c:	4283      	cmp	r3, r0
		n = PCD_ReadRegister(FIFOLevelReg);						// Number of bytes in the FIFO
   b8e3e:	4602      	mov	r2, r0
		if (n > *backLen) {
   b8e40:	d33e      	bcc.n	b8ec0 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x14a>
		*backLen = n;												// Number of bytes returned
   b8e42:	7030      	strb	r0, [r6, #0]
		PCD_ReadRegister(FIFODataReg, n, backData, rxAlign);		// Get received data from FIFO
   b8e44:	462b      	mov	r3, r5
   b8e46:	2112      	movs	r1, #18
   b8e48:	4620      	mov	r0, r4
   b8e4a:	f8cd b000 	str.w	fp, [sp]
   b8e4e:	f7ff fe47 	bl	b8ae0 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh>
		_validBits = PCD_ReadRegister(ControlReg) & 0x07;	// RxLastBits[2:0] indicates the number of valid bits in the last received byte. If this value is 000b, the whole byte is valid.
   b8e52:	2118      	movs	r1, #24
   b8e54:	4620      	mov	r0, r4
   b8e56:	f7ff fe92 	bl	b8b7e <_ZN7MFRC52216PCD_ReadRegisterEh>
   b8e5a:	f000 0707 	and.w	r7, r0, #7
		if (validBits) {
   b8e5e:	f1b9 0f00 	cmp.w	r9, #0
   b8e62:	d001      	beq.n	b8e68 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xf2>
			*validBits = _validBits;
   b8e64:	f889 7000 	strb.w	r7, [r9]
	if (errorRegValue & 0x08) { // CollErr
   b8e68:	f018 0f08 	tst.w	r8, #8
   b8e6c:	d12a      	bne.n	b8ec4 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x14e>
	if (backData && backLen && checkCRC) {
   b8e6e:	b35d      	cbz	r5, b8ec8 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x152>
   b8e70:	b356      	cbz	r6, b8ec8 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x152>
   b8e72:	9b04      	ldr	r3, [sp, #16]
   b8e74:	b343      	cbz	r3, b8ec8 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x152>
		if (*backLen == 1 && _validBits == 4) {
   b8e76:	7832      	ldrb	r2, [r6, #0]
   b8e78:	2a01      	cmp	r2, #1
   b8e7a:	d103      	bne.n	b8e84 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x10e>
   b8e7c:	2f04      	cmp	r7, #4
   b8e7e:	d125      	bne.n	b8ecc <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x156>
			return STATUS_MIFARE_NACK;
   b8e80:	2009      	movs	r0, #9
   b8e82:	e018      	b.n	b8eb6 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
		if (*backLen < 2 || _validBits != 0) {
   b8e84:	d922      	bls.n	b8ecc <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x156>
   b8e86:	bb0f      	cbnz	r7, b8ecc <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x156>
		n = PCD_CalculateCRC(&backData[0], *backLen - 2, &controlBuffer[0]);
   b8e88:	3a02      	subs	r2, #2
   b8e8a:	ab07      	add	r3, sp, #28
   b8e8c:	b2d2      	uxtb	r2, r2
   b8e8e:	4629      	mov	r1, r5
   b8e90:	4620      	mov	r0, r4
   b8e92:	f7ff fedc 	bl	b8c4e <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
		if (n != STATUS_OK) {
   b8e96:	2801      	cmp	r0, #1
   b8e98:	d10d      	bne.n	b8eb6 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
		if ((backData[*backLen - 2] != controlBuffer[0]) || (backData[*backLen - 1] != controlBuffer[1])) {
   b8e9a:	7833      	ldrb	r3, [r6, #0]
   b8e9c:	441d      	add	r5, r3
   b8e9e:	f89d 301c 	ldrb.w	r3, [sp, #28]
   b8ea2:	f815 2c02 	ldrb.w	r2, [r5, #-2]
   b8ea6:	429a      	cmp	r2, r3
   b8ea8:	d110      	bne.n	b8ecc <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x156>
   b8eaa:	f815 2c01 	ldrb.w	r2, [r5, #-1]
   b8eae:	f89d 301d 	ldrb.w	r3, [sp, #29]
   b8eb2:	429a      	cmp	r2, r3
   b8eb4:	d10a      	bne.n	b8ecc <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x156>
} // End PCD_CommunicateWithPICC()
   b8eb6:	b009      	add	sp, #36	; 0x24
   b8eb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return STATUS_ERROR;
   b8ebc:	2002      	movs	r0, #2
   b8ebe:	e7fa      	b.n	b8eb6 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
			return STATUS_NO_ROOM;
   b8ec0:	2005      	movs	r0, #5
   b8ec2:	e7f8      	b.n	b8eb6 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
		return STATUS_COLLISION;
   b8ec4:	2003      	movs	r0, #3
   b8ec6:	e7f6      	b.n	b8eb6 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
	return STATUS_OK;
   b8ec8:	2001      	movs	r0, #1
   b8eca:	e7f4      	b.n	b8eb6 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
			return STATUS_CRC_WRONG;
   b8ecc:	2008      	movs	r0, #8
   b8ece:	e7f2      	b.n	b8eb6 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>

000b8ed0 <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>:
								 ) {
   b8ed0:	b510      	push	{r4, lr}
   b8ed2:	b086      	sub	sp, #24
	return PCD_CommunicateWithPICC(PCD_Transceive, waitIRq, sendData, sendLen, backData, backLen, validBits, rxAlign, checkCRC);
   b8ed4:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
   b8ed8:	9405      	str	r4, [sp, #20]
   b8eda:	f89d 4028 	ldrb.w	r4, [sp, #40]	; 0x28
   b8ede:	9404      	str	r4, [sp, #16]
   b8ee0:	9c09      	ldr	r4, [sp, #36]	; 0x24
   b8ee2:	9403      	str	r4, [sp, #12]
   b8ee4:	9c08      	ldr	r4, [sp, #32]
   b8ee6:	9200      	str	r2, [sp, #0]
   b8ee8:	e9cd 3401 	strd	r3, r4, [sp, #4]
   b8eec:	2230      	movs	r2, #48	; 0x30
   b8eee:	460b      	mov	r3, r1
   b8ef0:	210c      	movs	r1, #12
   b8ef2:	f7ff ff40 	bl	b8d76 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb>
} // End PCD_TransceiveData()
   b8ef6:	b006      	add	sp, #24
   b8ef8:	bd10      	pop	{r4, pc}

000b8efa <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_>:
							   ) {
   b8efa:	b570      	push	{r4, r5, r6, lr}
   b8efc:	b088      	sub	sp, #32
   b8efe:	4606      	mov	r6, r0
   b8f00:	461c      	mov	r4, r3
   b8f02:	f88d 1017 	strb.w	r1, [sp, #23]
	if (bufferATQA == NULL || *bufferSize < 2) {	// The ATQA response is 2 bytes long.
   b8f06:	4615      	mov	r5, r2
   b8f08:	b31a      	cbz	r2, b8f52 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x58>
   b8f0a:	781b      	ldrb	r3, [r3, #0]
   b8f0c:	2b01      	cmp	r3, #1
   b8f0e:	d920      	bls.n	b8f52 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x58>
	PCD_ClearRegisterBitMask(CollReg, 0x80);			// ValuesAfterColl=1 => Bits received after collision are cleared.
   b8f10:	2280      	movs	r2, #128	; 0x80
   b8f12:	211c      	movs	r1, #28
   b8f14:	f7ff fe88 	bl	b8c28 <_ZN7MFRC52224PCD_ClearRegisterBitMaskEhh>
	validBits = 7;										// For REQA and WUPA we need the short frame format - transmit only 7 bits of the last (and only) byte. TxLastBits = BitFramingReg[2..0]
   b8f18:	2307      	movs	r3, #7
   b8f1a:	f88d 301f 	strb.w	r3, [sp, #31]
	status = PCD_TransceiveData(&command, 1, bufferATQA, bufferSize, &validBits);
   b8f1e:	2300      	movs	r3, #0
   b8f20:	e9cd 3302 	strd	r3, r3, [sp, #8]
   b8f24:	f10d 031f 	add.w	r3, sp, #31
   b8f28:	e9cd 4300 	strd	r4, r3, [sp]
   b8f2c:	2201      	movs	r2, #1
   b8f2e:	462b      	mov	r3, r5
   b8f30:	f10d 0117 	add.w	r1, sp, #23
   b8f34:	4630      	mov	r0, r6
   b8f36:	f7ff ffcb 	bl	b8ed0 <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>
	if (status != STATUS_OK) {
   b8f3a:	2801      	cmp	r0, #1
   b8f3c:	d107      	bne.n	b8f4e <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x54>
	if (*bufferSize != 2 || validBits != 0) {		// ATQA must be exactly 16 bits.
   b8f3e:	7823      	ldrb	r3, [r4, #0]
   b8f40:	2b02      	cmp	r3, #2
   b8f42:	d108      	bne.n	b8f56 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x5c>
   b8f44:	f89d 301f 	ldrb.w	r3, [sp, #31]
		return STATUS_ERROR;
   b8f48:	2b00      	cmp	r3, #0
   b8f4a:	bf18      	it	ne
   b8f4c:	2002      	movne	r0, #2
} // End PICC_REQA_or_WUPA()
   b8f4e:	b008      	add	sp, #32
   b8f50:	bd70      	pop	{r4, r5, r6, pc}
		return STATUS_NO_ROOM;
   b8f52:	2005      	movs	r0, #5
   b8f54:	e7fb      	b.n	b8f4e <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x54>
		return STATUS_ERROR;
   b8f56:	2002      	movs	r0, #2
   b8f58:	e7f9      	b.n	b8f4e <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x54>

000b8f5a <_ZN7MFRC52213PICC_RequestAEPhS0_>:
							) {
   b8f5a:	4613      	mov	r3, r2
	return PICC_REQA_or_WUPA(PICC_CMD_REQA, bufferATQA, bufferSize);
   b8f5c:	460a      	mov	r2, r1
   b8f5e:	2126      	movs	r1, #38	; 0x26
   b8f60:	f7ff bfcb 	b.w	b8efa <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_>

000b8f64 <_ZN7MFRC52221PICC_IsNewCardPresentEv>:
 * Returns true if a PICC responds to PICC_CMD_REQA.
 * Only "new" cards in state IDLE are invited. Sleeping cards in state HALT are ignored.
 * 
 * @return bool
 */
bool MFRC522::PICC_IsNewCardPresent() {
   b8f64:	b507      	push	{r0, r1, r2, lr}
	byte bufferATQA[2];
	byte bufferSize = sizeof(bufferATQA);
   b8f66:	2302      	movs	r3, #2
	byte result = PICC_RequestA(bufferATQA, &bufferSize);
   b8f68:	f10d 0203 	add.w	r2, sp, #3
   b8f6c:	a901      	add	r1, sp, #4
	byte bufferSize = sizeof(bufferATQA);
   b8f6e:	f88d 3003 	strb.w	r3, [sp, #3]
	byte result = PICC_RequestA(bufferATQA, &bufferSize);
   b8f72:	f7ff fff2 	bl	b8f5a <_ZN7MFRC52213PICC_RequestAEPhS0_>
	return (result == STATUS_OK || result == STATUS_COLLISION);
   b8f76:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
} // End PICC_IsNewCardPresent()
   b8f7a:	1e43      	subs	r3, r0, #1
   b8f7c:	4258      	negs	r0, r3
   b8f7e:	4158      	adcs	r0, r3
   b8f80:	b003      	add	sp, #12
   b8f82:	f85d fb04 	ldr.w	pc, [sp], #4

000b8f86 <_ZN7MFRC52210PICC_HaltAEv>:
byte MFRC522::PICC_HaltA() {
   b8f86:	b570      	push	{r4, r5, r6, lr}
   b8f88:	b086      	sub	sp, #24
	buffer[0] = PICC_CMD_HLTA;
   b8f8a:	2350      	movs	r3, #80	; 0x50
   b8f8c:	f88d 3014 	strb.w	r3, [sp, #20]
	buffer[1] = 0;
   b8f90:	2400      	movs	r4, #0
	result = PCD_CalculateCRC(buffer, 2, &buffer[2]);
   b8f92:	f10d 0316 	add.w	r3, sp, #22
   b8f96:	2202      	movs	r2, #2
   b8f98:	a905      	add	r1, sp, #20
byte MFRC522::PICC_HaltA() {
   b8f9a:	4606      	mov	r6, r0
	buffer[1] = 0;
   b8f9c:	f88d 4015 	strb.w	r4, [sp, #21]
	result = PCD_CalculateCRC(buffer, 2, &buffer[2]);
   b8fa0:	f7ff fe55 	bl	b8c4e <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
	if (result != STATUS_OK) {
   b8fa4:	2801      	cmp	r0, #1
	result = PCD_CalculateCRC(buffer, 2, &buffer[2]);
   b8fa6:	4605      	mov	r5, r0
	if (result != STATUS_OK) {
   b8fa8:	d10f      	bne.n	b8fca <_ZN7MFRC52210PICC_HaltAEv+0x44>
	result = PCD_TransceiveData(buffer, sizeof(buffer), NULL, 0);
   b8faa:	e9cd 4402 	strd	r4, r4, [sp, #8]
   b8fae:	e9cd 4400 	strd	r4, r4, [sp]
   b8fb2:	4623      	mov	r3, r4
   b8fb4:	2204      	movs	r2, #4
   b8fb6:	a905      	add	r1, sp, #20
   b8fb8:	4630      	mov	r0, r6
   b8fba:	f7ff ff89 	bl	b8ed0 <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>
	if (result == STATUS_TIMEOUT) {
   b8fbe:	2804      	cmp	r0, #4
   b8fc0:	d003      	beq.n	b8fca <_ZN7MFRC52210PICC_HaltAEv+0x44>
		return STATUS_ERROR;
   b8fc2:	2801      	cmp	r0, #1
   b8fc4:	bf14      	ite	ne
   b8fc6:	4605      	movne	r5, r0
   b8fc8:	2502      	moveq	r5, #2
} // End PICC_HaltA()
   b8fca:	4628      	mov	r0, r5
   b8fcc:	b006      	add	sp, #24
   b8fce:	bd70      	pop	{r4, r5, r6, pc}

000b8fd0 <_ZN7MFRC52211MIFARE_ReadEhPhS0_>:
						) {
   b8fd0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b8fd2:	4606      	mov	r6, r0
   b8fd4:	461d      	mov	r5, r3
	if (buffer == NULL || *bufferSize < 18) {
   b8fd6:	4614      	mov	r4, r2
   b8fd8:	b1ca      	cbz	r2, b900e <_ZN7MFRC52211MIFARE_ReadEhPhS0_+0x3e>
   b8fda:	781b      	ldrb	r3, [r3, #0]
   b8fdc:	2b11      	cmp	r3, #17
   b8fde:	d916      	bls.n	b900e <_ZN7MFRC52211MIFARE_ReadEhPhS0_+0x3e>
	buffer[0] = PICC_CMD_MF_READ;
   b8fe0:	2330      	movs	r3, #48	; 0x30
   b8fe2:	7013      	strb	r3, [r2, #0]
	buffer[1] = blockAddr;
   b8fe4:	7051      	strb	r1, [r2, #1]
	result = PCD_CalculateCRC(buffer, 2, &buffer[2]);
   b8fe6:	1c93      	adds	r3, r2, #2
   b8fe8:	4621      	mov	r1, r4
   b8fea:	2202      	movs	r2, #2
   b8fec:	f7ff fe2f 	bl	b8c4e <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
	if (result != STATUS_OK) {
   b8ff0:	2801      	cmp	r0, #1
   b8ff2:	d10a      	bne.n	b900a <_ZN7MFRC52211MIFARE_ReadEhPhS0_+0x3a>
	return PCD_TransceiveData(buffer, 4, buffer, bufferSize, NULL, 0, true);
   b8ff4:	2300      	movs	r3, #0
   b8ff6:	e9cd 3301 	strd	r3, r3, [sp, #4]
   b8ffa:	9003      	str	r0, [sp, #12]
   b8ffc:	9500      	str	r5, [sp, #0]
   b8ffe:	4623      	mov	r3, r4
   b9000:	2204      	movs	r2, #4
   b9002:	4621      	mov	r1, r4
   b9004:	4630      	mov	r0, r6
   b9006:	f7ff ff63 	bl	b8ed0 <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>
} // End MIFARE_Read()
   b900a:	b004      	add	sp, #16
   b900c:	bd70      	pop	{r4, r5, r6, pc}
		return STATUS_NO_ROOM;
   b900e:	2005      	movs	r0, #5
   b9010:	e7fb      	b.n	b900a <_ZN7MFRC52211MIFARE_ReadEhPhS0_+0x3a>

000b9012 <_ZN7MFRC52216PCD_AuthenticateEhhPNS_10MIFARE_KeyEPNS_3UidE>:
								) {
   b9012:	b510      	push	{r4, lr}
   b9014:	b08a      	sub	sp, #40	; 0x28
   b9016:	9c0c      	ldr	r4, [sp, #48]	; 0x30
	sendData[1] = blockAddr;
   b9018:	f88d 201d 	strb.w	r2, [sp, #29]
		sendData[2+i] = key->keyByte[i];
   b901c:	681a      	ldr	r2, [r3, #0]
   b901e:	889b      	ldrh	r3, [r3, #4]
   b9020:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
		sendData[8+i] = uid->uidByte[i];
   b9024:	7863      	ldrb	r3, [r4, #1]
   b9026:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   b902a:	78a3      	ldrb	r3, [r4, #2]
   b902c:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
   b9030:	78e3      	ldrb	r3, [r4, #3]
   b9032:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
   b9036:	7923      	ldrb	r3, [r4, #4]
   b9038:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
	return PCD_CommunicateWithPICC(PCD_MFAuthent, waitIRq, &sendData[0], sizeof(sendData));
   b903c:	2300      	movs	r3, #0
   b903e:	e9cd 3304 	strd	r3, r3, [sp, #16]
   b9042:	e9cd 3302 	strd	r3, r3, [sp, #8]
   b9046:	9301      	str	r3, [sp, #4]
   b9048:	230c      	movs	r3, #12
	sendData[0] = command;
   b904a:	f88d 101c 	strb.w	r1, [sp, #28]
		sendData[2+i] = key->keyByte[i];
   b904e:	f8cd 201e 	str.w	r2, [sp, #30]
	return PCD_CommunicateWithPICC(PCD_MFAuthent, waitIRq, &sendData[0], sizeof(sendData));
   b9052:	9300      	str	r3, [sp, #0]
   b9054:	2210      	movs	r2, #16
   b9056:	ab07      	add	r3, sp, #28
   b9058:	210e      	movs	r1, #14
   b905a:	f7ff fe8c 	bl	b8d76 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb>
} // End PCD_Authenticate()
   b905e:	b00a      	add	sp, #40	; 0x28
   b9060:	bd10      	pop	{r4, pc}

000b9062 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh>:
						 ) {
   b9062:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (validBits > 80) {
   b9066:	2a50      	cmp	r2, #80	; 0x50
						 ) {
   b9068:	b08b      	sub	sp, #44	; 0x2c
   b906a:	4682      	mov	sl, r0
   b906c:	460f      	mov	r7, r1
   b906e:	4690      	mov	r8, r2
	if (validBits > 80) {
   b9070:	f200 8140 	bhi.w	b92f4 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x292>
	PCD_ClearRegisterBitMask(CollReg, 0x80);			// ValuesAfterColl=1 => Bits received after collision are cleared.
   b9074:	2280      	movs	r2, #128	; 0x80
   b9076:	211c      	movs	r1, #28
   b9078:	f7ff fdd6 	bl	b8c28 <_ZN7MFRC52224PCD_ClearRegisterBitMaskEhh>
				buffer[0] = PICC_CMD_SEL_CL1;
   b907c:	2393      	movs	r3, #147	; 0x93
   b907e:	f88d 301c 	strb.w	r3, [sp, #28]
				useCascadeTag = validBits && uid->size > 4;	// When we know that the UID has more than 4 bytes
   b9082:	f1b8 0f00 	cmp.w	r8, #0
   b9086:	f000 80bc 	beq.w	b9202 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1a0>
   b908a:	783c      	ldrb	r4, [r7, #0]
   b908c:	2c04      	cmp	r4, #4
   b908e:	bf94      	ite	ls
   b9090:	2300      	movls	r3, #0
   b9092:	2301      	movhi	r3, #1
				useCascadeTag = validBits && uid->size > 7;	// When we know that the UID has more than 7 bytes
   b9094:	2501      	movs	r5, #1
   b9096:	2600      	movs	r6, #0
   b9098:	e00b      	b.n	b90b2 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x50>
				buffer[0] = PICC_CMD_SEL_CL2;
   b909a:	2395      	movs	r3, #149	; 0x95
   b909c:	f88d 301c 	strb.w	r3, [sp, #28]
				useCascadeTag = validBits && uid->size > 7;	// When we know that the UID has more than 7 bytes
   b90a0:	f1b8 0f00 	cmp.w	r8, #0
   b90a4:	f000 80af 	beq.w	b9206 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1a4>
   b90a8:	783c      	ldrb	r4, [r7, #0]
   b90aa:	2c07      	cmp	r4, #7
   b90ac:	bf94      	ite	ls
   b90ae:	2300      	movls	r3, #0
   b90b0:	2301      	movhi	r3, #1
		currentLevelKnownBits = validBits - (8 * uidIndex);
   b90b2:	eba8 04c6 	sub.w	r4, r8, r6, lsl #3
   b90b6:	b264      	sxtb	r4, r4
		if (currentLevelKnownBits < 0) {
   b90b8:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
		if (useCascadeTag) {
   b90bc:	2b00      	cmp	r3, #0
   b90be:	f000 80a4 	beq.w	b920a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1a8>
			buffer[index++] = PICC_CMD_CT;
   b90c2:	2288      	movs	r2, #136	; 0x88
   b90c4:	f88d 201e 	strb.w	r2, [sp, #30]
   b90c8:	2103      	movs	r1, #3
		byte bytesToCopy = currentLevelKnownBits / 8 + (currentLevelKnownBits % 8 ? 1 : 0); // The number of bytes needed to represent the known bits for this level.
   b90ca:	f014 0207 	ands.w	r2, r4, #7
   b90ce:	bf18      	it	ne
   b90d0:	2201      	movne	r2, #1
   b90d2:	eb02 02e4 	add.w	r2, r2, r4, asr #3
		if (bytesToCopy) {
   b90d6:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
		byte bytesToCopy = currentLevelKnownBits / 8 + (currentLevelKnownBits % 8 ? 1 : 0); // The number of bytes needed to represent the known bits for this level.
   b90da:	b2e0      	uxtb	r0, r4
		if (bytesToCopy) {
   b90dc:	d01d      	beq.n	b911a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xb8>
			byte maxBytes = useCascadeTag ? 3 : 4; // Max 4 bytes in each Cascade Level. Only 3 left if we use the Cascade Tag
   b90de:	2b00      	cmp	r3, #0
   b90e0:	bf14      	ite	ne
   b90e2:	f04f 0903 	movne.w	r9, #3
   b90e6:	f04f 0904 	moveq.w	r9, #4
			for (count = 0; count < bytesToCopy; count++) {
   b90ea:	f106 0c01 	add.w	ip, r6, #1
   b90ee:	4591      	cmp	r9, r2
   b90f0:	bf94      	ite	ls
   b90f2:	eb01 0e09 	addls.w	lr, r1, r9
   b90f6:	eb01 0e02 	addhi.w	lr, r1, r2
   b90fa:	fa57 fc8c 	uxtab	ip, r7, ip
   b90fe:	fa5f fe8e 	uxtb.w	lr, lr
				buffer[index++] = uid->uidByte[uidIndex + count];
   b9102:	460a      	mov	r2, r1
   b9104:	f10d 0b28 	add.w	fp, sp, #40	; 0x28
   b9108:	3101      	adds	r1, #1
   b910a:	b2c9      	uxtb	r1, r1
   b910c:	445a      	add	r2, fp
   b910e:	f81c 9b01 	ldrb.w	r9, [ip], #1
   b9112:	f802 9c0c 	strb.w	r9, [r2, #-12]
			for (count = 0; count < bytesToCopy; count++) {
   b9116:	4571      	cmp	r1, lr
   b9118:	d1f3      	bne.n	b9102 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xa0>
		if (useCascadeTag) {
   b911a:	b10b      	cbz	r3, b9120 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xbe>
			currentLevelKnownBits += 8;
   b911c:	3008      	adds	r0, #8
   b911e:	b244      	sxtb	r4, r0
			if (currentLevelKnownBits >= 32) { // All UID bits in this Cascade Level are known. This is a SELECT.
   b9120:	2c1f      	cmp	r4, #31
   b9122:	dd74      	ble.n	b920e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1ac>
				buffer[1] = 0x70; // NVB - Number of Valid Bits: Seven whole bytes
   b9124:	f04f 0370 	mov.w	r3, #112	; 0x70
				buffer[6] = buffer[2] ^ buffer[3] ^ buffer[4] ^ buffer[5];
   b9128:	f89d 201f 	ldrb.w	r2, [sp, #31]
				buffer[1] = 0x70; // NVB - Number of Valid Bits: Seven whole bytes
   b912c:	f88d 301d 	strb.w	r3, [sp, #29]
				buffer[6] = buffer[2] ^ buffer[3] ^ buffer[4] ^ buffer[5];
   b9130:	f89d 301e 	ldrb.w	r3, [sp, #30]
   b9134:	4053      	eors	r3, r2
   b9136:	f89d 2020 	ldrb.w	r2, [sp, #32]
   b913a:	4053      	eors	r3, r2
   b913c:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
   b9140:	4053      	eors	r3, r2
   b9142:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
				result = PCD_CalculateCRC(buffer, 7, &buffer[7]);
   b9146:	2207      	movs	r2, #7
   b9148:	f10d 0323 	add.w	r3, sp, #35	; 0x23
   b914c:	a907      	add	r1, sp, #28
   b914e:	4650      	mov	r0, sl
   b9150:	f7ff fd7d 	bl	b8c4e <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
				if (result != STATUS_OK) {
   b9154:	2801      	cmp	r0, #1
				result = PCD_CalculateCRC(buffer, 7, &buffer[7]);
   b9156:	4681      	mov	r9, r0
				if (result != STATUS_OK) {
   b9158:	f040 80c8 	bne.w	b92ec <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28a>
				txLastBits		= 0; // 0 => All 8 bits are valid.
   b915c:	2300      	movs	r3, #0
   b915e:	f88d 301a 	strb.w	r3, [sp, #26]
				responseLength	= 3;
   b9162:	2303      	movs	r3, #3
   b9164:	f88d 301b 	strb.w	r3, [sp, #27]
   b9168:	9404      	str	r4, [sp, #16]
				responseBuffer	= &buffer[6];
   b916a:	f10d 0b22 	add.w	fp, sp, #34	; 0x22
				bufferUsed		= 9;
   b916e:	f04f 0909 	mov.w	r9, #9
			rxAlign = txLastBits;											// Having a seperate variable is overkill. But it makes the next line easier to read.
   b9172:	f89d 301a 	ldrb.w	r3, [sp, #26]
			PCD_WriteRegister(BitFramingReg, (rxAlign << 4) + txLastBits);	// RxAlign = BitFramingReg[6..4]. TxLastBits = BitFramingReg[2..0]
   b9176:	9305      	str	r3, [sp, #20]
   b9178:	eb03 1203 	add.w	r2, r3, r3, lsl #4
   b917c:	b2d2      	uxtb	r2, r2
   b917e:	211a      	movs	r1, #26
   b9180:	4650      	mov	r0, sl
   b9182:	f7ff fd2e 	bl	b8be2 <_ZN7MFRC52217PCD_WriteRegisterEhh>
			result = PCD_TransceiveData(buffer, bufferUsed, responseBuffer, &responseLength, &txLastBits, rxAlign);			
   b9186:	9b05      	ldr	r3, [sp, #20]
   b9188:	9302      	str	r3, [sp, #8]
   b918a:	f10d 031a 	add.w	r3, sp, #26
   b918e:	2200      	movs	r2, #0
   b9190:	9301      	str	r3, [sp, #4]
   b9192:	f10d 031b 	add.w	r3, sp, #27
   b9196:	9203      	str	r2, [sp, #12]
   b9198:	9300      	str	r3, [sp, #0]
   b919a:	464a      	mov	r2, r9
   b919c:	465b      	mov	r3, fp
   b919e:	a907      	add	r1, sp, #28
   b91a0:	4650      	mov	r0, sl
   b91a2:	f7ff fe95 	bl	b8ed0 <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>
			if (result == STATUS_COLLISION) { // More than one PICC in the field => collision.
   b91a6:	2803      	cmp	r0, #3
			result = PCD_TransceiveData(buffer, bufferUsed, responseBuffer, &responseLength, &txLastBits, rxAlign);			
   b91a8:	4681      	mov	r9, r0
			if (result == STATUS_COLLISION) { // More than one PICC in the field => collision.
   b91aa:	d14c      	bne.n	b9246 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1e4>
				result = PCD_ReadRegister(CollReg); // CollReg[7..0] bits are: ValuesAfterColl reserved CollPosNotValid CollPos[4:0]
   b91ac:	211c      	movs	r1, #28
   b91ae:	4650      	mov	r0, sl
   b91b0:	f7ff fce5 	bl	b8b7e <_ZN7MFRC52216PCD_ReadRegisterEh>
				if (result & 0x20) { // CollPosNotValid
   b91b4:	0681      	lsls	r1, r0, #26
   b91b6:	f100 8099 	bmi.w	b92ec <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28a>
					collisionPos = 32;
   b91ba:	f010 001f 	ands.w	r0, r0, #31
   b91be:	bf08      	it	eq
   b91c0:	2020      	moveq	r0, #32
				if (collisionPos <= currentLevelKnownBits) { // No progress - should not happen 
   b91c2:	42a0      	cmp	r0, r4
   b91c4:	f340 8087 	ble.w	b92d6 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x274>
				count			= (currentLevelKnownBits - 1) % 8; // The bit to modify
   b91c8:	1e43      	subs	r3, r0, #1
				index			= 1 + (currentLevelKnownBits / 8) + (count ? 1 : 0); // First byte is index 0.
   b91ca:	f003 0207 	and.w	r2, r3, #7
				currentLevelKnownBits = collisionPos;
   b91ce:	b244      	sxtb	r4, r0
				index			= 1 + (currentLevelKnownBits / 8) + (count ? 1 : 0); // First byte is index 0.
   b91d0:	f013 0307 	ands.w	r3, r3, #7
   b91d4:	ea4f 00d0 	mov.w	r0, r0, lsr #3
   b91d8:	bf18      	it	ne
   b91da:	2301      	movne	r3, #1
   b91dc:	3001      	adds	r0, #1
				buffer[index]	|= (1 << count); 
   b91de:	4418      	add	r0, r3
   b91e0:	ab0a      	add	r3, sp, #40	; 0x28
   b91e2:	4418      	add	r0, r3
   b91e4:	2301      	movs	r3, #1
   b91e6:	fa03 f202 	lsl.w	r2, r3, r2
   b91ea:	f810 3c0c 	ldrb.w	r3, [r0, #-12]
   b91ee:	4313      	orrs	r3, r2
   b91f0:	f800 3c0c 	strb.w	r3, [r0, #-12]
		while ( ! selectDone) {
   b91f4:	e794      	b.n	b9120 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xbe>
				buffer[0] = PICC_CMD_SEL_CL3;
   b91f6:	2397      	movs	r3, #151	; 0x97
   b91f8:	f88d 301c 	strb.w	r3, [sp, #28]
				uidIndex = 6;
   b91fc:	2606      	movs	r6, #6
				useCascadeTag = false;						// Never used in CL3.
   b91fe:	4623      	mov	r3, r4
				break;
   b9200:	e757      	b.n	b90b2 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x50>
				useCascadeTag = validBits && uid->size > 4;	// When we know that the UID has more than 4 bytes
   b9202:	4643      	mov	r3, r8
   b9204:	e746      	b.n	b9094 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x32>
				useCascadeTag = validBits && uid->size > 7;	// When we know that the UID has more than 7 bytes
   b9206:	4643      	mov	r3, r8
   b9208:	e753      	b.n	b90b2 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x50>
		index = 2; // destination index in buffer[]
   b920a:	2102      	movs	r1, #2
   b920c:	e75d      	b.n	b90ca <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x68>
				count			= currentLevelKnownBits / 8;	// Number of whole bytes in the UID part.
   b920e:	10e3      	asrs	r3, r4, #3
				index			= 2 + count;					// Number of whole bytes: SEL + NVB + UIDs
   b9210:	3302      	adds	r3, #2
   b9212:	b2db      	uxtb	r3, r3
				txLastBits		= currentLevelKnownBits % 8;
   b9214:	f004 0207 	and.w	r2, r4, #7
				bufferUsed		= index + (txLastBits ? 1 : 0);
   b9218:	f014 0907 	ands.w	r9, r4, #7
				txLastBits		= currentLevelKnownBits % 8;
   b921c:	f88d 201a 	strb.w	r2, [sp, #26]
				buffer[1]		= (index << 4) + txLastBits;	// NVB - Number of Valid Bits
   b9220:	eb02 1203 	add.w	r2, r2, r3, lsl #4
   b9224:	f88d 201d 	strb.w	r2, [sp, #29]
				bufferUsed		= index + (txLastBits ? 1 : 0);
   b9228:	bf18      	it	ne
   b922a:	f04f 0901 	movne.w	r9, #1
				responseBuffer	= &buffer[index];
   b922e:	aa07      	add	r2, sp, #28
				bufferUsed		= index + (txLastBits ? 1 : 0);
   b9230:	4499      	add	r9, r3
				responseBuffer	= &buffer[index];
   b9232:	eb02 0b03 	add.w	fp, r2, r3
				responseLength	= sizeof(buffer) - index;
   b9236:	f1c3 0309 	rsb	r3, r3, #9
				bufferUsed		= index + (txLastBits ? 1 : 0);
   b923a:	fa5f f989 	uxtb.w	r9, r9
				responseLength	= sizeof(buffer) - index;
   b923e:	f88d 301b 	strb.w	r3, [sp, #27]
   b9242:	9404      	str	r4, [sp, #16]
   b9244:	e795      	b.n	b9172 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x110>
			else if (result != STATUS_OK) {
   b9246:	2801      	cmp	r0, #1
   b9248:	d150      	bne.n	b92ec <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28a>
				if (currentLevelKnownBits >= 32) { // This was a SELECT.
   b924a:	9b04      	ldr	r3, [sp, #16]
   b924c:	2b1f      	cmp	r3, #31
					currentLevelKnownBits = 32;
   b924e:	f04f 0420 	mov.w	r4, #32
				if (currentLevelKnownBits >= 32) { // This was a SELECT.
   b9252:	f77f af67 	ble.w	b9124 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xc2>
		index			= (buffer[2] == PICC_CMD_CT) ? 3 : 2; // source index in buffer[]
   b9256:	f89d 301e 	ldrb.w	r3, [sp, #30]
   b925a:	2b88      	cmp	r3, #136	; 0x88
   b925c:	d13e      	bne.n	b92dc <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x27a>
   b925e:	2303      	movs	r3, #3
		bytesToCopy		= (buffer[2] == PICC_CMD_CT) ? 3 : 4;
   b9260:	461a      	mov	r2, r3
		for (count = 0; count < bytesToCopy; count++) {
   b9262:	3601      	adds	r6, #1
   b9264:	441a      	add	r2, r3
   b9266:	fa57 f686 	uxtab	r6, r7, r6
   b926a:	b2d2      	uxtb	r2, r2
			uid->uidByte[uidIndex + count] = buffer[index++];
   b926c:	4619      	mov	r1, r3
   b926e:	a80a      	add	r0, sp, #40	; 0x28
   b9270:	3301      	adds	r3, #1
   b9272:	4401      	add	r1, r0
   b9274:	b2db      	uxtb	r3, r3
   b9276:	f811 1c0c 	ldrb.w	r1, [r1, #-12]
   b927a:	f806 1b01 	strb.w	r1, [r6], #1
		for (count = 0; count < bytesToCopy; count++) {
   b927e:	4293      	cmp	r3, r2
   b9280:	d1f4      	bne.n	b926c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x20a>
		if (responseLength != 3 || txLastBits != 0) {		// SAK must be exactly 24 bits (1 byte + CRC_A).
   b9282:	f89d 601b 	ldrb.w	r6, [sp, #27]
   b9286:	2e03      	cmp	r6, #3
   b9288:	d137      	bne.n	b92fa <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x298>
   b928a:	f89d 401a 	ldrb.w	r4, [sp, #26]
   b928e:	bba4      	cbnz	r4, b92fa <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x298>
		result = PCD_CalculateCRC(responseBuffer, 1, &buffer[2]);
   b9290:	f10d 031e 	add.w	r3, sp, #30
   b9294:	2201      	movs	r2, #1
   b9296:	4659      	mov	r1, fp
   b9298:	4650      	mov	r0, sl
   b929a:	f7ff fcd8 	bl	b8c4e <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
		if (result != STATUS_OK) {
   b929e:	2801      	cmp	r0, #1
		result = PCD_CalculateCRC(responseBuffer, 1, &buffer[2]);
   b92a0:	4681      	mov	r9, r0
		if (result != STATUS_OK) {
   b92a2:	d123      	bne.n	b92ec <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28a>
		if ((buffer[2] != responseBuffer[1]) || (buffer[3] != responseBuffer[2])) {
   b92a4:	f89d 201e 	ldrb.w	r2, [sp, #30]
   b92a8:	f89b 3001 	ldrb.w	r3, [fp, #1]
   b92ac:	429a      	cmp	r2, r3
   b92ae:	d127      	bne.n	b9300 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x29e>
   b92b0:	f89d 201f 	ldrb.w	r2, [sp, #31]
   b92b4:	f89b 3002 	ldrb.w	r3, [fp, #2]
   b92b8:	429a      	cmp	r2, r3
   b92ba:	d121      	bne.n	b9300 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x29e>
		if (responseBuffer[0] & 0x04) { // Cascade bit set - UID not complete yes
   b92bc:	f89b 3000 	ldrb.w	r3, [fp]
   b92c0:	075a      	lsls	r2, r3, #29
   b92c2:	d50e      	bpl.n	b92e2 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x280>
			cascadeLevel++;
   b92c4:	3501      	adds	r5, #1
   b92c6:	b2ed      	uxtb	r5, r5
		switch (cascadeLevel) {
   b92c8:	2d03      	cmp	r5, #3
   b92ca:	d094      	beq.n	b91f6 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x194>
   b92cc:	2d04      	cmp	r5, #4
   b92ce:	d002      	beq.n	b92d6 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x274>
   b92d0:	2d02      	cmp	r5, #2
   b92d2:	f43f aee2 	beq.w	b909a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x38>
   b92d6:	f04f 0906 	mov.w	r9, #6
   b92da:	e007      	b.n	b92ec <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28a>
		index			= (buffer[2] == PICC_CMD_CT) ? 3 : 2; // source index in buffer[]
   b92dc:	2302      	movs	r3, #2
		bytesToCopy		= (buffer[2] == PICC_CMD_CT) ? 3 : 4;
   b92de:	2204      	movs	r2, #4
   b92e0:	e7bf      	b.n	b9262 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x200>
	uid->size = 3 * cascadeLevel + 1;
   b92e2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   b92e6:	3501      	adds	r5, #1
			uid->sak = responseBuffer[0];
   b92e8:	72fb      	strb	r3, [r7, #11]
	uid->size = 3 * cascadeLevel + 1;
   b92ea:	703d      	strb	r5, [r7, #0]
} // End PICC_Select()
   b92ec:	4648      	mov	r0, r9
   b92ee:	b00b      	add	sp, #44	; 0x2c
   b92f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return STATUS_INVALID;
   b92f4:	f04f 0907 	mov.w	r9, #7
   b92f8:	e7f8      	b.n	b92ec <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28a>
			return STATUS_ERROR;
   b92fa:	f04f 0902 	mov.w	r9, #2
   b92fe:	e7f5      	b.n	b92ec <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28a>
			return STATUS_CRC_WRONG;
   b9300:	f04f 0908 	mov.w	r9, #8
   b9304:	e7f2      	b.n	b92ec <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28a>

000b9306 <_ZN7MFRC52219PICC_ReadCardSerialEv>:
 * Remember to call PICC_IsNewCardPresent(), PICC_RequestA() or PICC_WakeupA() first.
 * The read UID is available in the class variable uid.
 * 
 * @return bool
 */
bool MFRC522::PICC_ReadCardSerial() {
   b9306:	b508      	push	{r3, lr}
   b9308:	4601      	mov	r1, r0
	byte result = PICC_Select(&uid);
   b930a:	2200      	movs	r2, #0
   b930c:	f7ff fea9 	bl	b9062 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh>
	return (result == STATUS_OK);
} // End PICC_ReadCardSerial()
   b9310:	1e43      	subs	r3, r0, #1
   b9312:	4258      	negs	r0, r3
   b9314:	4158      	adcs	r0, r3
   b9316:	bd08      	pop	{r3, pc}

000b9318 <_ZN10UltrasonicC1Ei>:

#endif

Ultrasonic::Ultrasonic(int pin)
{
	_pin = pin;
   b9318:	6001      	str	r1, [r0, #0]
}
   b931a:	4770      	bx	lr

000b931c <_ZN10Ultrasonic20MeasureInCentimetersEv>:
/*The measured distance from the range 0 to 400 Centimeters*/
long Ultrasonic::MeasureInCentimeters(void)
{
   b931c:	b510      	push	{r4, lr}
   b931e:	4604      	mov	r4, r0
	pinMode(_pin, OUTPUT);
   b9320:	2101      	movs	r1, #1
   b9322:	8800      	ldrh	r0, [r0, #0]
   b9324:	f001 ffa6 	bl	bb274 <pinMode>
	digitalWrite(_pin, LOW);
   b9328:	8820      	ldrh	r0, [r4, #0]
   b932a:	2100      	movs	r1, #0
   b932c:	f001 ffb3 	bl	bb296 <digitalWrite>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   b9330:	2002      	movs	r0, #2
   b9332:	f000 fe7f 	bl	ba034 <HAL_Delay_Microseconds>
	delayMicroseconds(2);
	digitalWrite(_pin, HIGH);
   b9336:	8820      	ldrh	r0, [r4, #0]
   b9338:	2101      	movs	r1, #1
   b933a:	f001 ffac 	bl	bb296 <digitalWrite>
   b933e:	2005      	movs	r0, #5
   b9340:	f000 fe78 	bl	ba034 <HAL_Delay_Microseconds>
	delayMicroseconds(5);
	digitalWrite(_pin,LOW);
   b9344:	8820      	ldrh	r0, [r4, #0]
   b9346:	2100      	movs	r1, #0
   b9348:	f001 ffa5 	bl	bb296 <digitalWrite>
	pinMode(_pin,INPUT);
   b934c:	8820      	ldrh	r0, [r4, #0]
   b934e:	2100      	movs	r1, #0
   b9350:	f001 ff90 	bl	bb274 <pinMode>
	long duration;
	duration = pulseIn(_pin,HIGH);
   b9354:	8820      	ldrh	r0, [r4, #0]
   b9356:	2101      	movs	r1, #1
   b9358:	f001 fffc 	bl	bb354 <pulseIn>
	long RangeInCentimeters;
	RangeInCentimeters = duration/29/2;
	return RangeInCentimeters;
}
   b935c:	233a      	movs	r3, #58	; 0x3a
   b935e:	fb90 f0f3 	sdiv	r0, r0, r3
   b9362:	bd10      	pop	{r4, pc}

000b9364 <_ZN3DHTC1Ehhh>:
 * modified for Spark Core by RussGrue
 * */

#include "Adafruit_DHT_Particle.h"

DHT::DHT(uint8_t pin, uint8_t type, uint8_t count) {
   b9364:	b510      	push	{r4, lr}
	_pin = pin;
	_type = type;
	_count = count;
   b9366:	7203      	strb	r3, [r0, #8]
	firstreading = true;
   b9368:	2301      	movs	r3, #1
	_pin = pin;
   b936a:	7181      	strb	r1, [r0, #6]
	_type = type;
   b936c:	71c2      	strb	r2, [r0, #7]
	firstreading = true;
   b936e:	7403      	strb	r3, [r0, #16]
}
   b9370:	bd10      	pop	{r4, pc}

000b9372 <_ZN3DHT5beginEv>:

void DHT::begin(void) {
   b9372:	b510      	push	{r4, lr}
   b9374:	4604      	mov	r4, r0
// set up the pins!
	pinMode(_pin, INPUT);
   b9376:	2100      	movs	r1, #0
   b9378:	7980      	ldrb	r0, [r0, #6]
   b937a:	f001 ff7b 	bl	bb274 <pinMode>
	digitalWrite(_pin, HIGH);
   b937e:	79a0      	ldrb	r0, [r4, #6]
   b9380:	2101      	movs	r1, #1
   b9382:	f001 ff88 	bl	bb296 <digitalWrite>
	_lastreadtime = 0;
   b9386:	2300      	movs	r3, #0
   b9388:	60e3      	str	r3, [r4, #12]
}
   b938a:	bd10      	pop	{r4, pc}

000b938c <_ZN3DHT4readEv>:
	double Td = (b * tC) / (a - tC);
	return Td;
}


boolean DHT::read(void) {
   b938c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b9390:	4604      	mov	r4, r0
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b9392:	f000 fe57 	bl	ba044 <HAL_Timer_Get_Milli_Seconds>
	unsigned long currenttime;

// Check if sensor was read less than two seconds ago and return early
// to use last reading.
	currenttime = millis();
	if (currenttime < _lastreadtime) {
   b9396:	68e3      	ldr	r3, [r4, #12]
   b9398:	4283      	cmp	r3, r0
// ie there was a rollover
		_lastreadtime = 0;
   b939a:	bf84      	itt	hi
   b939c:	2300      	movhi	r3, #0
   b939e:	60e3      	strhi	r3, [r4, #12]
	}
	if (!firstreading && ((currenttime - _lastreadtime) < 2000)) {
   b93a0:	7c23      	ldrb	r3, [r4, #16]
   b93a2:	b923      	cbnz	r3, b93ae <_ZN3DHT4readEv+0x22>
   b93a4:	68e3      	ldr	r3, [r4, #12]
   b93a6:	1ac0      	subs	r0, r0, r3
   b93a8:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
   b93ac:	d367      	bcc.n	b947e <_ZN3DHT4readEv+0xf2>
		return true; // return last correct measurement
//		delay(2000 - (currenttime - _lastreadtime));
	}
	firstreading = false;
   b93ae:	2500      	movs	r5, #0
   b93b0:	7425      	strb	r5, [r4, #16]
   b93b2:	f000 fe47 	bl	ba044 <HAL_Timer_Get_Milli_Seconds>
	_lastreadtime = millis();

	data[0] = data[1] = data[2] = data[3] = data[4] = 0;
  
// pull the pin high and wait 250 milliseconds
	digitalWrite(_pin, HIGH);
   b93b6:	2101      	movs	r1, #1
	_lastreadtime = millis();
   b93b8:	60e0      	str	r0, [r4, #12]
	data[0] = data[1] = data[2] = data[3] = data[4] = 0;
   b93ba:	6025      	str	r5, [r4, #0]
	digitalWrite(_pin, HIGH);
   b93bc:	79a0      	ldrb	r0, [r4, #6]
	data[0] = data[1] = data[2] = data[3] = data[4] = 0;
   b93be:	7125      	strb	r5, [r4, #4]
	digitalWrite(_pin, HIGH);
   b93c0:	f001 ff69 	bl	bb296 <digitalWrite>
	delay(250);
   b93c4:	20fa      	movs	r0, #250	; 0xfa
   b93c6:	f001 fb8a 	bl	baade <delay>

// now pull it low for ~20 milliseconds
	pinMode(_pin, OUTPUT);
   b93ca:	79a0      	ldrb	r0, [r4, #6]
   b93cc:	2101      	movs	r1, #1
   b93ce:	f001 ff51 	bl	bb274 <pinMode>
	digitalWrite(_pin, LOW);
   b93d2:	4629      	mov	r1, r5
   b93d4:	79a0      	ldrb	r0, [r4, #6]
   b93d6:	f001 ff5e 	bl	bb296 <digitalWrite>
	delay(20);
   b93da:	2014      	movs	r0, #20
   b93dc:	f001 fb7f 	bl	baade <delay>
	noInterrupts();
   b93e0:	f001 fd38 	bl	bae54 <_Z12noInterruptsv>
	digitalWrite(_pin, HIGH);
   b93e4:	2101      	movs	r1, #1
   b93e6:	79a0      	ldrb	r0, [r4, #6]
   b93e8:	f001 ff55 	bl	bb296 <digitalWrite>
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   b93ec:	2028      	movs	r0, #40	; 0x28
   b93ee:	f000 fe21 	bl	ba034 <HAL_Delay_Microseconds>
	delayMicroseconds(40);
	pinMode(_pin, INPUT);
   b93f2:	79a0      	ldrb	r0, [r4, #6]
   b93f4:	4629      	mov	r1, r5
   b93f6:	f001 ff3d 	bl	bb274 <pinMode>
	uint8_t j = 0, i;
   b93fa:	462e      	mov	r6, r5
	uint8_t laststate = HIGH;
   b93fc:	2701      	movs	r7, #1
   b93fe:	f04f 0800 	mov.w	r8, #0

// read in timings
	for ( i=0; i< MAXTIMINGS; i++) {
		counter = 0;
		while (digitalRead(_pin) == laststate) {
   b9402:	79a0      	ldrb	r0, [r4, #6]
   b9404:	f001 ff60 	bl	bb2c8 <digitalRead>
   b9408:	42b8      	cmp	r0, r7
   b940a:	fa5f f988 	uxtb.w	r9, r8
   b940e:	d108      	bne.n	b9422 <_ZN3DHT4readEv+0x96>
   b9410:	2001      	movs	r0, #1
			counter++;
			delayMicroseconds(1);
			if (counter == 255) {
   b9412:	f108 0801 	add.w	r8, r8, #1
   b9416:	f000 fe0d 	bl	ba034 <HAL_Delay_Microseconds>
   b941a:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   b941e:	d1f0      	bne.n	b9402 <_ZN3DHT4readEv+0x76>
   b9420:	46c1      	mov	r9, r8
				break;
			}
		}
		laststate = digitalRead(_pin);
   b9422:	79a0      	ldrb	r0, [r4, #6]
   b9424:	f001 ff50 	bl	bb2c8 <digitalRead>

		if (counter == 255) break;
   b9428:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
		laststate = digitalRead(_pin);
   b942c:	b2c7      	uxtb	r7, r0
		if (counter == 255) break;
   b942e:	d014      	beq.n	b945a <_ZN3DHT4readEv+0xce>

// ignore first 3 transitions
		if ((i >= 4) && (i%2 == 0)) {
   b9430:	2d03      	cmp	r5, #3
   b9432:	d90e      	bls.n	b9452 <_ZN3DHT4readEv+0xc6>
   b9434:	07ea      	lsls	r2, r5, #31
   b9436:	d40c      	bmi.n	b9452 <_ZN3DHT4readEv+0xc6>
// shove each bit into the storage bytes
			data[j/8] <<= 1;
   b9438:	08f2      	lsrs	r2, r6, #3
			if (counter > _count)
				data[j/8] |= 1;
			j++;
   b943a:	3601      	adds	r6, #1
			data[j/8] <<= 1;
   b943c:	5ca3      	ldrb	r3, [r4, r2]
   b943e:	005b      	lsls	r3, r3, #1
   b9440:	b2db      	uxtb	r3, r3
   b9442:	54a3      	strb	r3, [r4, r2]
			if (counter > _count)
   b9444:	7a21      	ldrb	r1, [r4, #8]
   b9446:	4549      	cmp	r1, r9
				data[j/8] |= 1;
   b9448:	bf3c      	itt	cc
   b944a:	f043 0301 	orrcc.w	r3, r3, #1
   b944e:	54a3      	strbcc	r3, [r4, r2]
			j++;
   b9450:	b2f6      	uxtb	r6, r6
	for ( i=0; i< MAXTIMINGS; i++) {
   b9452:	3501      	adds	r5, #1
   b9454:	b2ed      	uxtb	r5, r5
   b9456:	2d55      	cmp	r5, #85	; 0x55
   b9458:	d1d1      	bne.n	b93fe <_ZN3DHT4readEv+0x72>
		}

	}

	interrupts();
   b945a:	f001 fcfd 	bl	bae58 <_Z10interruptsv>
	Serial.print(data[4], HEX); Serial.print(" =? ");
	Serial.println(data[0] + data[1] + data[2] + data[3], HEX);
*/

// check we read 40 bits and that the checksum matches
	if ((j >= 40) && 
   b945e:	2e27      	cmp	r6, #39	; 0x27
   b9460:	d90f      	bls.n	b9482 <_ZN3DHT4readEv+0xf6>
	   (data[4] == ((data[0] + data[1] + data[2] + data[3]) & 0xFF)) ) {
   b9462:	7863      	ldrb	r3, [r4, #1]
   b9464:	7820      	ldrb	r0, [r4, #0]
   b9466:	4418      	add	r0, r3
   b9468:	78a3      	ldrb	r3, [r4, #2]
   b946a:	4418      	add	r0, r3
   b946c:	78e3      	ldrb	r3, [r4, #3]
   b946e:	4418      	add	r0, r3
   b9470:	7923      	ldrb	r3, [r4, #4]
   b9472:	b2c0      	uxtb	r0, r0
	if ((j >= 40) && 
   b9474:	1ac3      	subs	r3, r0, r3
   b9476:	4258      	negs	r0, r3
   b9478:	4158      	adcs	r0, r3
		return true;
	}
 
	return false;

}
   b947a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return true; // return last correct measurement
   b947e:	2001      	movs	r0, #1
   b9480:	e7fb      	b.n	b947a <_ZN3DHT4readEv+0xee>
	return false;
   b9482:	2000      	movs	r0, #0
   b9484:	e7f9      	b.n	b947a <_ZN3DHT4readEv+0xee>
	...

000b9488 <_ZN3DHT15readTemperatureEv>:
float DHT::readTemperature() {
   b9488:	b510      	push	{r4, lr}
   b948a:	4604      	mov	r4, r0
	if (read()) {
   b948c:	f7ff ff7e 	bl	b938c <_ZN3DHT4readEv>
   b9490:	b320      	cbz	r0, b94dc <_ZN3DHT15readTemperatureEv+0x54>
		switch (_type) {
   b9492:	79e3      	ldrb	r3, [r4, #7]
   b9494:	2b0b      	cmp	r3, #11
   b9496:	d01b      	beq.n	b94d0 <_ZN3DHT15readTemperatureEv+0x48>
   b9498:	3b15      	subs	r3, #21
   b949a:	2b01      	cmp	r3, #1
   b949c:	d81e      	bhi.n	b94dc <_ZN3DHT15readTemperatureEv+0x54>
   b949e:	78a3      	ldrb	r3, [r4, #2]
				f += data[3];
   b94a0:	eddf 6a10 	vldr	s13, [pc, #64]	; b94e4 <_ZN3DHT15readTemperatureEv+0x5c>
				f = data[2] & 0x7F;
   b94a4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
   b94a8:	ee07 2a10 	vmov	s14, r2
				f += data[3];
   b94ac:	78e2      	ldrb	r2, [r4, #3]
   b94ae:	ee07 2a90 	vmov	s15, r2
				f = data[2] & 0x7F;
   b94b2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
				f += data[3];
   b94b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
				if (data[2] & 0x80)
   b94ba:	061b      	lsls	r3, r3, #24
				f += data[3];
   b94bc:	eee7 7a26 	vfma.f32	s15, s14, s13
				f /= 10;
   b94c0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
   b94c4:	ee87 0a87 	vdiv.f32	s0, s15, s14
				if (data[2] & 0x80)
   b94c8:	d507      	bpl.n	b94da <_ZN3DHT15readTemperatureEv+0x52>
					f *= -1;
   b94ca:	eeb1 0a40 	vneg.f32	s0, s0
   b94ce:	e004      	b.n	b94da <_ZN3DHT15readTemperatureEv+0x52>
				f = data[2];
   b94d0:	78a3      	ldrb	r3, [r4, #2]
   b94d2:	ee00 3a10 	vmov	s0, r3
   b94d6:	eeb8 0a40 	vcvt.f32.u32	s0, s0
}
   b94da:	bd10      	pop	{r4, pc}
		switch (_type) {
   b94dc:	ed9f 0a02 	vldr	s0, [pc, #8]	; b94e8 <_ZN3DHT15readTemperatureEv+0x60>
   b94e0:	e7fb      	b.n	b94da <_ZN3DHT15readTemperatureEv+0x52>
   b94e2:	bf00      	nop
   b94e4:	43800000 	.word	0x43800000
   b94e8:	7fc00000 	.word	0x7fc00000

000b94ec <_ZN3DHT14getTempCelciusEv>:
	return readTemperature();
   b94ec:	f7ff bfcc 	b.w	b9488 <_ZN3DHT15readTemperatureEv>

000b94f0 <_ZN16Adafruit_SSD1306D1Ev>:
}

/*!
    @brief  Destructor for Adafruit_SSD1306 object.
*/
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   b94f0:	b510      	push	{r4, lr}
   b94f2:	4b04      	ldr	r3, [pc, #16]	; (b9504 <_ZN16Adafruit_SSD1306D1Ev+0x14>)
   b94f4:	6003      	str	r3, [r0, #0]
   b94f6:	4604      	mov	r4, r0
  if(buffer) {
   b94f8:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b94fa:	b108      	cbz	r0, b9500 <_ZN16Adafruit_SSD1306D1Ev+0x10>
    free(buffer);
   b94fc:	f000 ff96 	bl	ba42c <free>
    buffer = NULL;
  }
}
   b9500:	4620      	mov	r0, r4
   b9502:	bd10      	pop	{r4, pc}
   b9504:	000bd2d0 	.word	0x000bd2d0

000b9508 <_ZN16Adafruit_SSD1306D0Ev>:
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   b9508:	b510      	push	{r4, lr}
   b950a:	4604      	mov	r4, r0
}
   b950c:	f7ff fff0 	bl	b94f0 <_ZN16Adafruit_SSD1306D1Ev>
   b9510:	4620      	mov	r0, r4
   b9512:	2150      	movs	r1, #80	; 0x50
   b9514:	f7fb fa97 	bl	b4a46 <_ZdlPvj>
   b9518:	4620      	mov	r0, r4
   b951a:	bd10      	pop	{r4, pc}

000b951c <_ZN16Adafruit_SSD13069drawPixelEsst>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   b951c:	2900      	cmp	r1, #0
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   b951e:	b510      	push	{r4, lr}
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   b9520:	db4b      	blt.n	b95ba <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b9522:	f9b0 400c 	ldrsh.w	r4, [r0, #12]
   b9526:	428c      	cmp	r4, r1
   b9528:	dd47      	ble.n	b95ba <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b952a:	2a00      	cmp	r2, #0
   b952c:	db45      	blt.n	b95ba <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b952e:	f9b0 400e 	ldrsh.w	r4, [r0, #14]
   b9532:	4294      	cmp	r4, r2
   b9534:	dd41      	ble.n	b95ba <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
  /*!
    @brief      Get rotation setting for display
    @returns    0 thru 3 corresponding to 4 cardinal rotations
  */
  /************************************************************************/
  uint8_t getRotation(void) const { return rotation; }
   b9536:	7e84      	ldrb	r4, [r0, #26]
    // Pixel is in-bounds. Rotate coordinates if needed.
    switch(getRotation()) {
   b9538:	2c02      	cmp	r4, #2
   b953a:	d01f      	beq.n	b957c <_ZN16Adafruit_SSD13069drawPixelEsst+0x60>
   b953c:	2c03      	cmp	r4, #3
   b953e:	d026      	beq.n	b958e <_ZN16Adafruit_SSD13069drawPixelEsst+0x72>
   b9540:	2c01      	cmp	r4, #1
   b9542:	d104      	bne.n	b954e <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case 1:
      ssd1306_swap(x, y);
      x = WIDTH - x - 1;
   b9544:	8904      	ldrh	r4, [r0, #8]
   b9546:	43d2      	mvns	r2, r2
   b9548:	4414      	add	r4, r2
      break;
   b954a:	460a      	mov	r2, r1
      x = WIDTH - x - 1;
   b954c:	b221      	sxth	r1, r4
     case 3:
      ssd1306_swap(x, y);
      y = HEIGHT - y - 1;
      break;
    }
    switch(color) {
   b954e:	2b01      	cmp	r3, #1
   b9550:	d023      	beq.n	b959a <_ZN16Adafruit_SSD13069drawPixelEsst+0x7e>
   b9552:	2b02      	cmp	r3, #2
   b9554:	d032      	beq.n	b95bc <_ZN16Adafruit_SSD13069drawPixelEsst+0xa0>
   b9556:	bb83      	cbnz	r3, b95ba <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
     case BLACK:   buffer[x + (y/8)*WIDTH] &= ~(1 << (y&7)); break;
   b9558:	2a00      	cmp	r2, #0
   b955a:	4613      	mov	r3, r2
   b955c:	8904      	ldrh	r4, [r0, #8]
   b955e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b9560:	bfb8      	it	lt
   b9562:	1dd3      	addlt	r3, r2, #7
   b9564:	10db      	asrs	r3, r3, #3
   b9566:	fb13 1104 	smlabb	r1, r3, r4, r1
   b956a:	f002 0207 	and.w	r2, r2, #7
   b956e:	2301      	movs	r3, #1
   b9570:	4093      	lsls	r3, r2
   b9572:	5c42      	ldrb	r2, [r0, r1]
   b9574:	ea22 0203 	bic.w	r2, r2, r3
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
   b9578:	5442      	strb	r2, [r0, r1]
    }
  }
}
   b957a:	e01e      	b.n	b95ba <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
      x = WIDTH  - x - 1;
   b957c:	8904      	ldrh	r4, [r0, #8]
   b957e:	3c01      	subs	r4, #1
   b9580:	1a61      	subs	r1, r4, r1
      y = HEIGHT - y - 1;
   b9582:	8944      	ldrh	r4, [r0, #10]
   b9584:	43d2      	mvns	r2, r2
   b9586:	4422      	add	r2, r4
      x = WIDTH  - x - 1;
   b9588:	b209      	sxth	r1, r1
      y = HEIGHT - y - 1;
   b958a:	b212      	sxth	r2, r2
      break;
   b958c:	e7df      	b.n	b954e <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
      y = HEIGHT - y - 1;
   b958e:	8944      	ldrh	r4, [r0, #10]
   b9590:	3c01      	subs	r4, #1
   b9592:	1a64      	subs	r4, r4, r1
      break;
   b9594:	4611      	mov	r1, r2
      y = HEIGHT - y - 1;
   b9596:	b222      	sxth	r2, r4
      break;
   b9598:	e7d9      	b.n	b954e <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
   b959a:	2a00      	cmp	r2, #0
   b959c:	8904      	ldrh	r4, [r0, #8]
   b959e:	4613      	mov	r3, r2
   b95a0:	bfb8      	it	lt
   b95a2:	1dd3      	addlt	r3, r2, #7
   b95a4:	10db      	asrs	r3, r3, #3
   b95a6:	fb13 1104 	smlabb	r1, r3, r4, r1
   b95aa:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   b95ac:	f002 0007 	and.w	r0, r2, #7
   b95b0:	2201      	movs	r2, #1
   b95b2:	4082      	lsls	r2, r0
   b95b4:	5c58      	ldrb	r0, [r3, r1]
   b95b6:	4302      	orrs	r2, r0
   b95b8:	545a      	strb	r2, [r3, r1]
}
   b95ba:	bd10      	pop	{r4, pc}
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
   b95bc:	2a00      	cmp	r2, #0
   b95be:	4613      	mov	r3, r2
   b95c0:	8904      	ldrh	r4, [r0, #8]
   b95c2:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b95c4:	bfb8      	it	lt
   b95c6:	1dd3      	addlt	r3, r2, #7
   b95c8:	10db      	asrs	r3, r3, #3
   b95ca:	fb13 1104 	smlabb	r1, r3, r4, r1
   b95ce:	f002 0207 	and.w	r2, r2, #7
   b95d2:	2301      	movs	r3, #1
   b95d4:	fa03 f202 	lsl.w	r2, r3, r2
   b95d8:	5c43      	ldrb	r3, [r0, r1]
   b95da:	405a      	eors	r2, r3
   b95dc:	e7cc      	b.n	b9578 <_ZN16Adafruit_SSD13069drawPixelEsst+0x5c>
	...

000b95e0 <_ZN16Adafruit_SSD1306C1Ea>:
Adafruit_SSD1306::Adafruit_SSD1306(int8_t rst_pin) :
   b95e0:	b570      	push	{r4, r5, r6, lr}
  rstPin(rst_pin) {
   b95e2:	2240      	movs	r2, #64	; 0x40
Adafruit_SSD1306::Adafruit_SSD1306(int8_t rst_pin) :
   b95e4:	4604      	mov	r4, r0
   b95e6:	460e      	mov	r6, r1
  rstPin(rst_pin) {
   b95e8:	2180      	movs	r1, #128	; 0x80
   b95ea:	f7fe fe1d 	bl	b8228 <_ZN12Adafruit_GFXC1Ess>
   b95ee:	2500      	movs	r5, #0
   b95f0:	4b0d      	ldr	r3, [pc, #52]	; (b9628 <_ZN16Adafruit_SSD1306C1Ea+0x48>)
   b95f2:	6023      	str	r3, [r4, #0]
   b95f4:	6265      	str	r5, [r4, #36]	; 0x24
  Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT), spi(NULL), wire(&Wire),
   b95f6:	f001 ff21 	bl	bb43c <_Z19__fetch_global_Wirev>
  rstPin(rst_pin) {
   b95fa:	23ff      	movs	r3, #255	; 0xff
   b95fc:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
   b9600:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
  {
   b9604:	4b09      	ldr	r3, [pc, #36]	; (b962c <_ZN16Adafruit_SSD1306C1Ea+0x4c>)
   b9606:	63a3      	str	r3, [r4, #56]	; 0x38
   b9608:	f64f 72ff 	movw	r2, #65535	; 0xffff
   b960c:	2301      	movs	r3, #1
   b960e:	e9c4 050a 	strd	r0, r5, [r4, #40]	; 0x28
   b9612:	86a2      	strh	r2, [r4, #52]	; 0x34
   b9614:	f884 6037 	strb.w	r6, [r4, #55]	; 0x37
   b9618:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   b961c:	6425      	str	r5, [r4, #64]	; 0x40
   b961e:	f8a4 5044 	strh.w	r5, [r4, #68]	; 0x44
}
   b9622:	4620      	mov	r0, r4
   b9624:	bd70      	pop	{r4, r5, r6, pc}
   b9626:	bf00      	nop
   b9628:	000bd2d0 	.word	0x000bd2d0
   b962c:	000bccdc 	.word	0x000bccdc

000b9630 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>:
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   b9630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b9632:	4604      	mov	r4, r0
  if(wire) { // I2C
   b9634:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   b9636:	460d      	mov	r5, r1
  if(wire) { // I2C
   b9638:	b190      	cbz	r0, b9660 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x30>
    wire->beginTransmission(i2caddr);
   b963a:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b963e:	f001 fce1 	bl	bb004 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b9642:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b9644:	6803      	ldr	r3, [r0, #0]
   b9646:	2100      	movs	r1, #0
   b9648:	689b      	ldr	r3, [r3, #8]
   b964a:	4798      	blx	r3
    WIRE_WRITE(c);
   b964c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b964e:	6803      	ldr	r3, [r0, #0]
   b9650:	4629      	mov	r1, r5
   b9652:	689b      	ldr	r3, [r3, #8]
   b9654:	4798      	blx	r3
    wire->endTransmission();
   b9656:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   b9658:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    wire->endTransmission();
   b965c:	f001 bcd9 	b.w	bb012 <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   b9660:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   b9664:	4601      	mov	r1, r0
   b9666:	b298      	uxth	r0, r3
   b9668:	f001 fe15 	bl	bb296 <digitalWrite>
  if(spi) {
   b966c:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b966e:	b120      	cbz	r0, b967a <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4a>
    (void)spi->transfer(d);
   b9670:	4629      	mov	r1, r5
}
   b9672:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    (void)spi->transfer(d);
   b9676:	f000 bffb 	b.w	ba670 <_ZN8SPIClass8transferEh>
   b967a:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b967c:	2780      	movs	r7, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b967e:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b9682:	ea05 0107 	and.w	r1, r5, r7
   b9686:	b280      	uxth	r0, r0
   b9688:	f001 fe05 	bl	bb296 <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b968c:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b9690:	2101      	movs	r1, #1
   b9692:	b280      	uxth	r0, r0
   b9694:	f001 fdff 	bl	bb296 <digitalWrite>
      digitalWrite(clkPin , LOW);
   b9698:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b969c:	2100      	movs	r1, #0
   b969e:	b280      	uxth	r0, r0
   b96a0:	f001 fdf9 	bl	bb296 <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b96a4:	3e01      	subs	r6, #1
   b96a6:	ea4f 0757 	mov.w	r7, r7, lsr #1
   b96aa:	d1e8      	bne.n	b967e <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4e>
}
   b96ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b96ae <_ZN16Adafruit_SSD130613invertDisplayEb>:
            display() function -- buffer contents are not changed, rather a
            different pixel mode of the display hardware is used. When
            enabled, drawing BLACK (value 0) pixels will actually draw white,
            WHITE (value 1) will draw black.
*/
void Adafruit_SSD1306::invertDisplay(boolean i) {
   b96ae:	b538      	push	{r3, r4, r5, lr}
   b96b0:	4604      	mov	r4, r0
  TRANSACTION_START
   b96b2:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::invertDisplay(boolean i) {
   b96b4:	460d      	mov	r5, r1
  TRANSACTION_START
   b96b6:	b180      	cbz	r0, b96da <_ZN16Adafruit_SSD130613invertDisplayEb+0x2c>

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
  inline void setClock(uint32_t speed) {
	  setSpeed(speed);
   b96b8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b96ba:	f001 fc95 	bl	bafe8 <_ZN7TwoWire8setSpeedEm>
  ssd1306_command1(i ? SSD1306_INVERTDISPLAY : SSD1306_NORMALDISPLAY);
   b96be:	2d00      	cmp	r5, #0
   b96c0:	4620      	mov	r0, r4
   b96c2:	bf14      	ite	ne
   b96c4:	21a7      	movne	r1, #167	; 0xa7
   b96c6:	21a6      	moveq	r1, #166	; 0xa6
   b96c8:	f7ff ffb2 	bl	b9630 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  TRANSACTION_END
   b96cc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b96ce:	b188      	cbz	r0, b96f4 <_ZN16Adafruit_SSD130613invertDisplayEb+0x46>
   b96d0:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   b96d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b96d6:	f001 bc87 	b.w	bafe8 <_ZN7TwoWire8setSpeedEm>
  TRANSACTION_START
   b96da:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b96dc:	b118      	cbz	r0, b96e6 <_ZN16Adafruit_SSD130613invertDisplayEb+0x38>
   b96de:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b96e2:	f000 ff57 	bl	ba594 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b96e6:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b96ea:	2100      	movs	r1, #0
   b96ec:	b280      	uxth	r0, r0
   b96ee:	f001 fdd2 	bl	bb296 <digitalWrite>
   b96f2:	e7e4      	b.n	b96be <_ZN16Adafruit_SSD130613invertDisplayEb+0x10>
  TRANSACTION_END
   b96f4:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b96f8:	2101      	movs	r1, #1
   b96fa:	b280      	uxth	r0, r0
   b96fc:	f001 fdcb 	bl	bb296 <digitalWrite>
   b9700:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b9702:	b118      	cbz	r0, b970c <_ZN16Adafruit_SSD130613invertDisplayEb+0x5e>
}
   b9704:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  TRANSACTION_END
   b9708:	f000 bf2a 	b.w	ba560 <_ZN8SPIClass14endTransactionEv>
}
   b970c:	bd38      	pop	{r3, r4, r5, pc}

000b970e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>:
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   b970e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b9712:	4604      	mov	r4, r0
  if(wire) { // I2C
   b9714:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   b9716:	460d      	mov	r5, r1
  if(wire) { // I2C
   b9718:	188f      	adds	r7, r1, r2
   b971a:	b340      	cbz	r0, b976e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x60>
    wire->beginTransmission(i2caddr);
   b971c:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b9720:	f001 fc70 	bl	bb004 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b9724:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b9726:	6803      	ldr	r3, [r0, #0]
   b9728:	2100      	movs	r1, #0
   b972a:	689b      	ldr	r3, [r3, #8]
   b972c:	4798      	blx	r3
    uint8_t bytesOut = 1;
   b972e:	2601      	movs	r6, #1
    while(n--) {
   b9730:	42af      	cmp	r7, r5
        wire->endTransmission();
   b9732:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    while(n--) {
   b9734:	d017      	beq.n	b9766 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x58>
      if(bytesOut >= WIRE_MAX) {
   b9736:	2e1f      	cmp	r6, #31
   b9738:	d90c      	bls.n	b9754 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x46>
        wire->endTransmission();
   b973a:	f001 fc6a 	bl	bb012 <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   b973e:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b9742:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b9744:	f001 fc5e 	bl	bb004 <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b9748:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b974a:	6803      	ldr	r3, [r0, #0]
   b974c:	2100      	movs	r1, #0
   b974e:	689b      	ldr	r3, [r3, #8]
   b9750:	4798      	blx	r3
        bytesOut = 1;
   b9752:	2601      	movs	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   b9754:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b9756:	f815 1b01 	ldrb.w	r1, [r5], #1
   b975a:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   b975c:	3601      	adds	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   b975e:	689b      	ldr	r3, [r3, #8]
   b9760:	4798      	blx	r3
      bytesOut++;
   b9762:	b2f6      	uxtb	r6, r6
    while(n--) {
   b9764:	e7e4      	b.n	b9730 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x22>
}
   b9766:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    wire->endTransmission();
   b976a:	f001 bc52 	b.w	bb012 <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   b976e:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   b9772:	4601      	mov	r1, r0
   b9774:	b298      	uxth	r0, r3
   b9776:	f001 fd8e 	bl	bb296 <digitalWrite>
    while(n--) SPIwrite(pgm_read_byte(c++));
   b977a:	42bd      	cmp	r5, r7
   b977c:	d022      	beq.n	b97c4 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xb6>
  if(spi) {
   b977e:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(n--) SPIwrite(pgm_read_byte(c++));
   b9780:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
   b9784:	b118      	cbz	r0, b978e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x80>
    (void)spi->transfer(d);
   b9786:	4649      	mov	r1, r9
   b9788:	f000 ff72 	bl	ba670 <_ZN8SPIClass8transferEh>
   b978c:	e7f5      	b.n	b977a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
   b978e:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b9790:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b9794:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b9798:	ea09 0108 	and.w	r1, r9, r8
   b979c:	b280      	uxth	r0, r0
   b979e:	f001 fd7a 	bl	bb296 <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b97a2:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b97a6:	2101      	movs	r1, #1
   b97a8:	b280      	uxth	r0, r0
   b97aa:	f001 fd74 	bl	bb296 <digitalWrite>
      digitalWrite(clkPin , LOW);
   b97ae:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b97b2:	2100      	movs	r1, #0
   b97b4:	b280      	uxth	r0, r0
   b97b6:	f001 fd6e 	bl	bb296 <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b97ba:	3e01      	subs	r6, #1
   b97bc:	ea4f 0858 	mov.w	r8, r8, lsr #1
   b97c0:	d1e8      	bne.n	b9794 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x86>
   b97c2:	e7da      	b.n	b977a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
}
   b97c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000b97c8 <_ZN16Adafruit_SSD130612clearDisplayEv>:
  memset(buffer, 0, WIDTH * ((HEIGHT + 7) / 8));
   b97c8:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   b97cc:	1dda      	adds	r2, r3, #7
   b97ce:	bf48      	it	mi
   b97d0:	f103 020e 	addmi.w	r2, r3, #14
   b97d4:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   b97d8:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b97da:	10d2      	asrs	r2, r2, #3
   b97dc:	435a      	muls	r2, r3
   b97de:	2100      	movs	r1, #0
   b97e0:	f001 be6e 	b.w	bb4c0 <memset>

000b97e4 <_ZN16Adafruit_SSD13065beginEhhbb>:
  boolean periphBegin) {
   b97e4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b97e8:	461e      	mov	r6, r3
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b97ea:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  boolean periphBegin) {
   b97ec:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   b97f0:	4604      	mov	r4, r0
   b97f2:	460f      	mov	r7, r1
   b97f4:	4615      	mov	r5, r2
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b97f6:	b1d3      	cbz	r3, b982e <_ZN16Adafruit_SSD13065beginEhhbb+0x4a>
  clearDisplay();
   b97f8:	4620      	mov	r0, r4
   b97fa:	f7ff ffe5 	bl	b97c8 <_ZN16Adafruit_SSD130612clearDisplayEv>
  if(HEIGHT > 32) {
   b97fe:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
   b9802:	2a20      	cmp	r2, #32
   b9804:	dc25      	bgt.n	b9852 <_ZN16Adafruit_SSD13065beginEhhbb+0x6e>
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   b9806:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
   b980a:	2320      	movs	r3, #32
   b980c:	3a20      	subs	r2, #32
   b980e:	3973      	subs	r1, #115	; 0x73
   b9810:	2001      	movs	r0, #1
   b9812:	e9cd 3001 	strd	r3, r0, [sp, #4]
   b9816:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   b981a:	2373      	movs	r3, #115	; 0x73
   b981c:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   b9820:	9300      	str	r3, [sp, #0]
   b9822:	f342 024f 	sbfx	r2, r2, #1, #16
   b9826:	4b85      	ldr	r3, [pc, #532]	; (b9a3c <_ZN16Adafruit_SSD13065beginEhhbb+0x258>)
   b9828:	f341 014f 	sbfx	r1, r1, #1, #16
   b982c:	e01b      	b.n	b9866 <_ZN16Adafruit_SSD13065beginEhhbb+0x82>
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b982e:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   b9832:	1dd8      	adds	r0, r3, #7
   b9834:	bf48      	it	mi
   b9836:	f103 000e 	addmi.w	r0, r3, #14
   b983a:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
   b983e:	10c0      	asrs	r0, r0, #3
   b9840:	4358      	muls	r0, r3
   b9842:	f000 fdeb 	bl	ba41c <malloc>
   b9846:	62e0      	str	r0, [r4, #44]	; 0x2c
   b9848:	2800      	cmp	r0, #0
   b984a:	d1d5      	bne.n	b97f8 <_ZN16Adafruit_SSD13065beginEhhbb+0x14>
}
   b984c:	b004      	add	sp, #16
   b984e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    drawBitmap(0,0, sucreLogo_data, sucreLogo_width, sucreLogo_height, 1);
   b9852:	2340      	movs	r3, #64	; 0x40
   b9854:	f04f 0c01 	mov.w	ip, #1
   b9858:	e9cd 3c01 	strd	r3, ip, [sp, #4]
   b985c:	2380      	movs	r3, #128	; 0x80
   b985e:	9300      	str	r3, [sp, #0]
   b9860:	2200      	movs	r2, #0
   b9862:	4b77      	ldr	r3, [pc, #476]	; (b9a40 <_ZN16Adafruit_SSD13065beginEhhbb+0x25c>)
   b9864:	4611      	mov	r1, r2
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   b9866:	4620      	mov	r0, r4
   b9868:	f7fe fea6 	bl	b85b8 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
  if(wire) { // Using I2C
   b986c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  vccstate = vcs;
   b986e:	f884 7031 	strb.w	r7, [r4, #49]	; 0x31
  if(wire) { // Using I2C
   b9872:	2800      	cmp	r0, #0
   b9874:	d078      	beq.n	b9968 <_ZN16Adafruit_SSD13065beginEhhbb+0x184>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   b9876:	2d00      	cmp	r5, #0
   b9878:	d174      	bne.n	b9964 <_ZN16Adafruit_SSD13065beginEhhbb+0x180>
   b987a:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   b987e:	2b20      	cmp	r3, #32
   b9880:	bf0c      	ite	eq
   b9882:	253c      	moveq	r5, #60	; 0x3c
   b9884:	253d      	movne	r5, #61	; 0x3d
   b9886:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    if(periphBegin) wire->begin();
   b988a:	f1b8 0f00 	cmp.w	r8, #0
   b988e:	d001      	beq.n	b9894 <_ZN16Adafruit_SSD13065beginEhhbb+0xb0>
   b9890:	f001 fbae 	bl	baff0 <_ZN7TwoWire5beginEv>
  if(reset && (rstPin >= 0)) {
   b9894:	b1fe      	cbz	r6, b98d6 <_ZN16Adafruit_SSD13065beginEhhbb+0xf2>
   b9896:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b989a:	2800      	cmp	r0, #0
   b989c:	db1b      	blt.n	b98d6 <_ZN16Adafruit_SSD13065beginEhhbb+0xf2>
    pinMode(     rstPin, OUTPUT);
   b989e:	2101      	movs	r1, #1
   b98a0:	b280      	uxth	r0, r0
   b98a2:	f001 fce7 	bl	bb274 <pinMode>
    digitalWrite(rstPin, HIGH);
   b98a6:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b98aa:	2101      	movs	r1, #1
   b98ac:	b280      	uxth	r0, r0
   b98ae:	f001 fcf2 	bl	bb296 <digitalWrite>
    delay(1);                   // VDD goes high at start, pause for 1 ms
   b98b2:	2001      	movs	r0, #1
   b98b4:	f001 f913 	bl	baade <delay>
    digitalWrite(rstPin, LOW);  // Bring reset low
   b98b8:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b98bc:	2100      	movs	r1, #0
   b98be:	b280      	uxth	r0, r0
   b98c0:	f001 fce9 	bl	bb296 <digitalWrite>
    delay(10);                  // Wait 10 ms
   b98c4:	200a      	movs	r0, #10
   b98c6:	f001 f90a 	bl	baade <delay>
    digitalWrite(rstPin, HIGH); // Bring out of reset
   b98ca:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b98ce:	2101      	movs	r1, #1
   b98d0:	b280      	uxth	r0, r0
   b98d2:	f001 fce0 	bl	bb296 <digitalWrite>
  TRANSACTION_START
   b98d6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b98d8:	2800      	cmp	r0, #0
   b98da:	d074      	beq.n	b99c6 <_ZN16Adafruit_SSD13065beginEhhbb+0x1e2>
   b98dc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b98de:	f001 fb83 	bl	bafe8 <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(init1, sizeof(init1));
   b98e2:	2204      	movs	r2, #4
   b98e4:	4957      	ldr	r1, [pc, #348]	; (b9a44 <_ZN16Adafruit_SSD13065beginEhhbb+0x260>)
   b98e6:	4620      	mov	r0, r4
   b98e8:	f7ff ff11 	bl	b970e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(HEIGHT - 1);
   b98ec:	8961      	ldrh	r1, [r4, #10]
   b98ee:	3901      	subs	r1, #1
   b98f0:	b2c9      	uxtb	r1, r1
   b98f2:	4620      	mov	r0, r4
   b98f4:	f7ff fe9c 	bl	b9630 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init2, sizeof(init2));
   b98f8:	4953      	ldr	r1, [pc, #332]	; (b9a48 <_ZN16Adafruit_SSD13065beginEhhbb+0x264>)
   b98fa:	2204      	movs	r2, #4
   b98fc:	4620      	mov	r0, r4
   b98fe:	f7ff ff06 	bl	b970e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0x14);
   b9902:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b9906:	2b01      	cmp	r3, #1
   b9908:	bf0c      	ite	eq
   b990a:	2110      	moveq	r1, #16
   b990c:	2114      	movne	r1, #20
   b990e:	4620      	mov	r0, r4
   b9910:	f7ff fe8e 	bl	b9630 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init3, sizeof(init3));
   b9914:	2204      	movs	r2, #4
   b9916:	494d      	ldr	r1, [pc, #308]	; (b9a4c <_ZN16Adafruit_SSD13065beginEhhbb+0x268>)
   b9918:	4620      	mov	r0, r4
   b991a:	f7ff fef8 	bl	b970e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  if((WIDTH == 128) && (HEIGHT == 32)) {
   b991e:	68a3      	ldr	r3, [r4, #8]
   b9920:	4a4b      	ldr	r2, [pc, #300]	; (b9a50 <_ZN16Adafruit_SSD13065beginEhhbb+0x26c>)
   b9922:	4293      	cmp	r3, r2
   b9924:	d15c      	bne.n	b99e0 <_ZN16Adafruit_SSD13065beginEhhbb+0x1fc>
    ssd1306_commandList(init4a, sizeof(init4a));
   b9926:	494b      	ldr	r1, [pc, #300]	; (b9a54 <_ZN16Adafruit_SSD13065beginEhhbb+0x270>)
   b9928:	2204      	movs	r2, #4
   b992a:	4620      	mov	r0, r4
   b992c:	f7ff feef 	bl	b970e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(SSD1306_SETPRECHARGE); // 0xd9
   b9930:	21d9      	movs	r1, #217	; 0xd9
   b9932:	4620      	mov	r0, r4
   b9934:	f7ff fe7c 	bl	b9630 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x22 : 0xF1);
   b9938:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b993c:	2b01      	cmp	r3, #1
   b993e:	bf0c      	ite	eq
   b9940:	2122      	moveq	r1, #34	; 0x22
   b9942:	21f1      	movne	r1, #241	; 0xf1
   b9944:	4620      	mov	r0, r4
   b9946:	f7ff fe73 	bl	b9630 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init5, sizeof(init5));
   b994a:	4620      	mov	r0, r4
   b994c:	4942      	ldr	r1, [pc, #264]	; (b9a58 <_ZN16Adafruit_SSD13065beginEhhbb+0x274>)
   b994e:	2206      	movs	r2, #6
   b9950:	f7ff fedd 	bl	b970e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  TRANSACTION_END
   b9954:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b9956:	2800      	cmp	r0, #0
   b9958:	d063      	beq.n	b9a22 <_ZN16Adafruit_SSD13065beginEhhbb+0x23e>
   b995a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   b995c:	f001 fb44 	bl	bafe8 <_ZN7TwoWire8setSpeedEm>
  return true; // Success
   b9960:	2001      	movs	r0, #1
   b9962:	e773      	b.n	b984c <_ZN16Adafruit_SSD13065beginEhhbb+0x68>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   b9964:	b26d      	sxtb	r5, r5
   b9966:	e78e      	b.n	b9886 <_ZN16Adafruit_SSD13065beginEhhbb+0xa2>
    pinMode(dcPin, OUTPUT); // Set data/command pin as output
   b9968:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   b996c:	2101      	movs	r1, #1
   b996e:	b280      	uxth	r0, r0
   b9970:	f001 fc80 	bl	bb274 <pinMode>
    pinMode(csPin, OUTPUT); // Same for chip select
   b9974:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b9978:	2101      	movs	r1, #1
   b997a:	b280      	uxth	r0, r0
   b997c:	f001 fc7a 	bl	bb274 <pinMode>
    SSD1306_DESELECT
   b9980:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b9984:	2101      	movs	r1, #1
   b9986:	b280      	uxth	r0, r0
   b9988:	f001 fc85 	bl	bb296 <digitalWrite>
    if(spi) { // Hardware SPI
   b998c:	6a65      	ldr	r5, [r4, #36]	; 0x24
   b998e:	b13d      	cbz	r5, b99a0 <_ZN16Adafruit_SSD13065beginEhhbb+0x1bc>
      if(periphBegin) spi->begin();
   b9990:	f1b8 0f00 	cmp.w	r8, #0
   b9994:	f43f af7e 	beq.w	b9894 <_ZN16Adafruit_SSD13065beginEhhbb+0xb0>
   b9998:	4628      	mov	r0, r5
   b999a:	f000 fdcd 	bl	ba538 <_ZN8SPIClass5beginEv>
   b999e:	e779      	b.n	b9894 <_ZN16Adafruit_SSD13065beginEhhbb+0xb0>
      pinMode(mosiPin, OUTPUT); // MOSI and SCLK outputs
   b99a0:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b99a4:	2101      	movs	r1, #1
   b99a6:	b280      	uxth	r0, r0
   b99a8:	f001 fc64 	bl	bb274 <pinMode>
      pinMode(clkPin , OUTPUT);
   b99ac:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b99b0:	2101      	movs	r1, #1
   b99b2:	b280      	uxth	r0, r0
   b99b4:	f001 fc5e 	bl	bb274 <pinMode>
      digitalWrite(clkPin, LOW); // Clock low
   b99b8:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b99bc:	4629      	mov	r1, r5
   b99be:	b280      	uxth	r0, r0
   b99c0:	f001 fc69 	bl	bb296 <digitalWrite>
   b99c4:	e766      	b.n	b9894 <_ZN16Adafruit_SSD13065beginEhhbb+0xb0>
  TRANSACTION_START
   b99c6:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b99c8:	b118      	cbz	r0, b99d2 <_ZN16Adafruit_SSD13065beginEhhbb+0x1ee>
   b99ca:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b99ce:	f000 fde1 	bl	ba594 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b99d2:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b99d6:	2100      	movs	r1, #0
   b99d8:	b280      	uxth	r0, r0
   b99da:	f001 fc5c 	bl	bb296 <digitalWrite>
   b99de:	e780      	b.n	b98e2 <_ZN16Adafruit_SSD13065beginEhhbb+0xfe>
  } else if((WIDTH == 128) && (HEIGHT == 64)) {
   b99e0:	4a1e      	ldr	r2, [pc, #120]	; (b9a5c <_ZN16Adafruit_SSD13065beginEhhbb+0x278>)
   b99e2:	4293      	cmp	r3, r2
   b99e4:	d10e      	bne.n	b9a04 <_ZN16Adafruit_SSD13065beginEhhbb+0x220>
    ssd1306_commandList(init4b, sizeof(init4b));
   b99e6:	491e      	ldr	r1, [pc, #120]	; (b9a60 <_ZN16Adafruit_SSD13065beginEhhbb+0x27c>)
   b99e8:	2203      	movs	r2, #3
   b99ea:	4620      	mov	r0, r4
   b99ec:	f7ff fe8f 	bl	b970e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x9F : 0xCF);
   b99f0:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b99f4:	2b01      	cmp	r3, #1
   b99f6:	bf0c      	ite	eq
   b99f8:	219f      	moveq	r1, #159	; 0x9f
   b99fa:	21cf      	movne	r1, #207	; 0xcf
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   b99fc:	4620      	mov	r0, r4
   b99fe:	f7ff fe17 	bl	b9630 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
   b9a02:	e795      	b.n	b9930 <_ZN16Adafruit_SSD13065beginEhhbb+0x14c>
  } else if((WIDTH == 96) && (HEIGHT == 16)) {
   b9a04:	4a17      	ldr	r2, [pc, #92]	; (b9a64 <_ZN16Adafruit_SSD13065beginEhhbb+0x280>)
   b9a06:	4293      	cmp	r3, r2
   b9a08:	d192      	bne.n	b9930 <_ZN16Adafruit_SSD13065beginEhhbb+0x14c>
    ssd1306_commandList(init4c, sizeof(init4c));
   b9a0a:	4917      	ldr	r1, [pc, #92]	; (b9a68 <_ZN16Adafruit_SSD13065beginEhhbb+0x284>)
   b9a0c:	2203      	movs	r2, #3
   b9a0e:	4620      	mov	r0, r4
   b9a10:	f7ff fe7d 	bl	b970e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   b9a14:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b9a18:	2b01      	cmp	r3, #1
   b9a1a:	bf0c      	ite	eq
   b9a1c:	2110      	moveq	r1, #16
   b9a1e:	21af      	movne	r1, #175	; 0xaf
   b9a20:	e7ec      	b.n	b99fc <_ZN16Adafruit_SSD13065beginEhhbb+0x218>
  TRANSACTION_END
   b9a22:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b9a26:	2101      	movs	r1, #1
   b9a28:	b280      	uxth	r0, r0
   b9a2a:	f001 fc34 	bl	bb296 <digitalWrite>
   b9a2e:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b9a30:	2800      	cmp	r0, #0
   b9a32:	d095      	beq.n	b9960 <_ZN16Adafruit_SSD13065beginEhhbb+0x17c>
   b9a34:	f000 fd94 	bl	ba560 <_ZN8SPIClass14endTransactionEv>
   b9a38:	e792      	b.n	b9960 <_ZN16Adafruit_SSD13065beginEhhbb+0x17c>
   b9a3a:	bf00      	nop
   b9a3c:	000bcce8 	.word	0x000bcce8
   b9a40:	000bcec8 	.word	0x000bcec8
   b9a44:	000bd330 	.word	0x000bd330
   b9a48:	000bd334 	.word	0x000bd334
   b9a4c:	000bd338 	.word	0x000bd338
   b9a50:	00200080 	.word	0x00200080
   b9a54:	000bd342 	.word	0x000bd342
   b9a58:	000bd33c 	.word	0x000bd33c
   b9a5c:	00400080 	.word	0x00400080
   b9a60:	000bd346 	.word	0x000bd346
   b9a64:	00100060 	.word	0x00100060
   b9a68:	000bd349 	.word	0x000bd349

000b9a6c <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b9a6c:	b570      	push	{r4, r5, r6, lr}
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   b9a6e:	2a00      	cmp	r2, #0
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b9a70:	f8bd 5010 	ldrh.w	r5, [sp, #16]
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   b9a74:	db3d      	blt.n	b9af2 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b9a76:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   b9a7a:	4294      	cmp	r4, r2
   b9a7c:	dd39      	ble.n	b9af2 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
    if(x < 0) { // Clip left
   b9a7e:	2900      	cmp	r1, #0
      w += x;
   b9a80:	bfbe      	ittt	lt
   b9a82:	185b      	addlt	r3, r3, r1
   b9a84:	b21b      	sxthlt	r3, r3
      x  = 0;
   b9a86:	2100      	movlt	r1, #0
    if((x + w) > WIDTH) { // Clip right
   b9a88:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
   b9a8c:	18ce      	adds	r6, r1, r3
   b9a8e:	42a6      	cmp	r6, r4
      w = (WIDTH - x);
   b9a90:	bfc4      	itt	gt
   b9a92:	1a63      	subgt	r3, r4, r1
   b9a94:	b21b      	sxthgt	r3, r3
    if(w > 0) { // Proceed only if width is positive
   b9a96:	2b00      	cmp	r3, #0
   b9a98:	dd2b      	ble.n	b9af2 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x],
   b9a9a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b9a9c:	10d6      	asrs	r6, r2, #3
   b9a9e:	fb14 1106 	smlabb	r1, r4, r6, r1
   b9aa2:	4401      	add	r1, r0
               mask = 1 << (y & 7);
   b9aa4:	f002 0007 	and.w	r0, r2, #7
   b9aa8:	2201      	movs	r2, #1
   b9aaa:	4082      	lsls	r2, r0
      switch(color) {
   b9aac:	2d01      	cmp	r5, #1
               mask = 1 << (y & 7);
   b9aae:	b2d2      	uxtb	r2, r2
      switch(color) {
   b9ab0:	d016      	beq.n	b9ae0 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x74>
   b9ab2:	2d02      	cmp	r5, #2
   b9ab4:	d00b      	beq.n	b9ace <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x62>
   b9ab6:	b9e5      	cbnz	r5, b9af2 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
       case BLACK: mask = ~mask; while(w--) { *pBuf++ &= mask; }; break;
   b9ab8:	43d2      	mvns	r2, r2
   b9aba:	b2d2      	uxtb	r2, r2
   b9abc:	440b      	add	r3, r1
   b9abe:	4299      	cmp	r1, r3
   b9ac0:	d017      	beq.n	b9af2 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b9ac2:	f811 0b01 	ldrb.w	r0, [r1], #1
   b9ac6:	4010      	ands	r0, r2
   b9ac8:	f801 0c01 	strb.w	r0, [r1, #-1]
   b9acc:	e7f7      	b.n	b9abe <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x52>
   b9ace:	440b      	add	r3, r1
       case INVERSE:             while(w--) { *pBuf++ ^= mask; }; break;
   b9ad0:	4299      	cmp	r1, r3
   b9ad2:	d00e      	beq.n	b9af2 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b9ad4:	f811 0b01 	ldrb.w	r0, [r1], #1
   b9ad8:	4050      	eors	r0, r2
   b9ada:	f801 0c01 	strb.w	r0, [r1, #-1]
   b9ade:	e7f7      	b.n	b9ad0 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x64>
   b9ae0:	440b      	add	r3, r1
       case WHITE:               while(w--) { *pBuf++ |= mask; }; break;
   b9ae2:	4299      	cmp	r1, r3
   b9ae4:	d005      	beq.n	b9af2 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b9ae6:	f811 0b01 	ldrb.w	r0, [r1], #1
   b9aea:	4310      	orrs	r0, r2
   b9aec:	f801 0c01 	strb.w	r0, [r1, #-1]
   b9af0:	e7f7      	b.n	b9ae2 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x76>
}
   b9af2:	bd70      	pop	{r4, r5, r6, pc}

000b9af4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>:
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
   b9af4:	b5f0      	push	{r4, r5, r6, r7, lr}
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   b9af6:	2900      	cmp	r1, #0
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
   b9af8:	f8bd 5014 	ldrh.w	r5, [sp, #20]
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   b9afc:	db76      	blt.n	b9bec <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
   b9afe:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
   b9b02:	42b1      	cmp	r1, r6
   b9b04:	da72      	bge.n	b9bec <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
    if(__y < 0) { // Clip top
   b9b06:	2a00      	cmp	r2, #0
      __h += __y;
   b9b08:	bfbe      	ittt	lt
   b9b0a:	189b      	addlt	r3, r3, r2
   b9b0c:	b21b      	sxthlt	r3, r3
      __y = 0;
   b9b0e:	2200      	movlt	r2, #0
    if((__y + __h) > HEIGHT) { // Clip bottom
   b9b10:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   b9b14:	18d7      	adds	r7, r2, r3
   b9b16:	42a7      	cmp	r7, r4
      __h = (HEIGHT - __y);
   b9b18:	bfc4      	itt	gt
   b9b1a:	1aa3      	subgt	r3, r4, r2
   b9b1c:	b21b      	sxthgt	r3, r3
    if(__h > 0) { // Proceed only if height is now positive
   b9b1e:	2b00      	cmp	r3, #0
   b9b20:	dd64      	ble.n	b9bec <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   b9b22:	f3c2 04c4 	ubfx	r4, r2, #3, #5
   b9b26:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
   b9b28:	fb16 1604 	smlabb	r6, r6, r4, r1
      if(mod) {
   b9b2c:	f012 0207 	ands.w	r2, r2, #7
      uint8_t  y = __y, h = __h;
   b9b30:	b2db      	uxtb	r3, r3
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   b9b32:	eb07 0406 	add.w	r4, r7, r6
      if(mod) {
   b9b36:	d023      	beq.n	b9b80 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x8c>
        mod = 8 - mod;
   b9b38:	f1c2 0208 	rsb	r2, r2, #8
   b9b3c:	b2d2      	uxtb	r2, r2
        uint8_t mask = pgm_read_byte(&premask[mod]);
   b9b3e:	492d      	ldr	r1, [pc, #180]	; (b9bf4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x100>)
        if(h < mod) mask &= (0XFF >> (mod - h));
   b9b40:	4293      	cmp	r3, r2
   b9b42:	bf3c      	itt	cc
   b9b44:	f04f 0cff 	movcc.w	ip, #255	; 0xff
   b9b48:	eba2 0e03 	subcc.w	lr, r2, r3
        uint8_t mask = pgm_read_byte(&premask[mod]);
   b9b4c:	5c89      	ldrb	r1, [r1, r2]
        if(h < mod) mask &= (0XFF >> (mod - h));
   b9b4e:	bf3c      	itt	cc
   b9b50:	fa4c fc0e 	asrcc.w	ip, ip, lr
   b9b54:	ea0c 0101 	andcc.w	r1, ip, r1
        switch(color) {
   b9b58:	2d01      	cmp	r5, #1
   b9b5a:	d007      	beq.n	b9b6c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x78>
   b9b5c:	2d02      	cmp	r5, #2
   b9b5e:	d02e      	beq.n	b9bbe <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xca>
   b9b60:	b94d      	cbnz	r5, b9b76 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x82>
         case BLACK:   *pBuf &= ~mask; break;
   b9b62:	f817 c006 	ldrb.w	ip, [r7, r6]
   b9b66:	ea2c 0101 	bic.w	r1, ip, r1
   b9b6a:	e003      	b.n	b9b74 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x80>
         case WHITE:   *pBuf |=  mask; break;
   b9b6c:	f817 c006 	ldrb.w	ip, [r7, r6]
   b9b70:	ea41 010c 	orr.w	r1, r1, ip
         case INVERSE: *pBuf ^=  mask; break;
   b9b74:	55b9      	strb	r1, [r7, r6]
      if(h >= mod) { // More to go?
   b9b76:	4293      	cmp	r3, r2
   b9b78:	d338      	bcc.n	b9bec <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
        pBuf += WIDTH;
   b9b7a:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
   b9b7e:	440c      	add	r4, r1
        h -= mod;
   b9b80:	1a9a      	subs	r2, r3, r2
   b9b82:	b2d2      	uxtb	r2, r2
        if(h >= 8) {
   b9b84:	2a07      	cmp	r2, #7
   b9b86:	d90e      	bls.n	b9ba6 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xb2>
          if(color == INVERSE) {
   b9b88:	2d02      	cmp	r5, #2
   b9b8a:	d11d      	bne.n	b9bc8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xd4>
   b9b8c:	4613      	mov	r3, r2
              *pBuf ^= 0xFF;  // Invert byte
   b9b8e:	7821      	ldrb	r1, [r4, #0]
   b9b90:	43c9      	mvns	r1, r1
   b9b92:	7021      	strb	r1, [r4, #0]
              h     -= 8;     // Subtract 8 rows from height
   b9b94:	3b08      	subs	r3, #8
              pBuf  += WIDTH; // Advance pointer 8 rows
   b9b96:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
              h     -= 8;     // Subtract 8 rows from height
   b9b9a:	b2db      	uxtb	r3, r3
            } while(h >= 8);
   b9b9c:	2b07      	cmp	r3, #7
              pBuf  += WIDTH; // Advance pointer 8 rows
   b9b9e:	440c      	add	r4, r1
            } while(h >= 8);
   b9ba0:	d8f5      	bhi.n	b9b8e <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x9a>
              h    -= 8;      // Subtract 8 rows from height
   b9ba2:	f002 0207 	and.w	r2, r2, #7
        if(h) { // Do the final partial byte, if necessary
   b9ba6:	b30a      	cbz	r2, b9bec <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   b9ba8:	4b13      	ldr	r3, [pc, #76]	; (b9bf8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x104>)
          switch(color) {
   b9baa:	2d01      	cmp	r5, #1
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   b9bac:	5c9b      	ldrb	r3, [r3, r2]
          switch(color) {
   b9bae:	d01a      	beq.n	b9be6 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf2>
   b9bb0:	2d02      	cmp	r5, #2
   b9bb2:	d01c      	beq.n	b9bee <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xfa>
   b9bb4:	b9d5      	cbnz	r5, b9bec <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
           case BLACK:   *pBuf &= ~mask; break;
   b9bb6:	7822      	ldrb	r2, [r4, #0]
   b9bb8:	ea22 0303 	bic.w	r3, r2, r3
   b9bbc:	e015      	b.n	b9bea <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
         case INVERSE: *pBuf ^=  mask; break;
   b9bbe:	f817 c006 	ldrb.w	ip, [r7, r6]
   b9bc2:	ea81 010c 	eor.w	r1, r1, ip
   b9bc6:	e7d5      	b.n	b9b74 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x80>
            uint8_t val = (color != BLACK) ? 255 : 0;
   b9bc8:	1e29      	subs	r1, r5, #0
   b9bca:	bf18      	it	ne
   b9bcc:	2101      	movne	r1, #1
   b9bce:	4249      	negs	r1, r1
   b9bd0:	b2c9      	uxtb	r1, r1
   b9bd2:	4613      	mov	r3, r2
              *pBuf = val;    // Set byte
   b9bd4:	7021      	strb	r1, [r4, #0]
              h    -= 8;      // Subtract 8 rows from height
   b9bd6:	3b08      	subs	r3, #8
              pBuf += WIDTH;  // Advance pointer 8 rows
   b9bd8:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
              h    -= 8;      // Subtract 8 rows from height
   b9bdc:	b2db      	uxtb	r3, r3
            } while(h >= 8);
   b9bde:	2b07      	cmp	r3, #7
              pBuf += WIDTH;  // Advance pointer 8 rows
   b9be0:	4434      	add	r4, r6
            } while(h >= 8);
   b9be2:	d8f7      	bhi.n	b9bd4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xe0>
   b9be4:	e7dd      	b.n	b9ba2 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xae>
           case WHITE:   *pBuf |=  mask; break;
   b9be6:	7822      	ldrb	r2, [r4, #0]
   b9be8:	4313      	orrs	r3, r2
           case INVERSE: *pBuf ^=  mask; break;
   b9bea:	7023      	strb	r3, [r4, #0]
}
   b9bec:	bdf0      	pop	{r4, r5, r6, r7, pc}
           case INVERSE: *pBuf ^=  mask; break;
   b9bee:	7822      	ldrb	r2, [r4, #0]
   b9bf0:	4053      	eors	r3, r2
   b9bf2:	e7fa      	b.n	b9bea <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
   b9bf4:	000bd320 	.word	0x000bd320
   b9bf8:	000bd328 	.word	0x000bd328

000b9bfc <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b9bfc:	b470      	push	{r4, r5, r6}
   b9bfe:	4614      	mov	r4, r2
  switch(rotation) {
   b9c00:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b9c02:	f8bd 600c 	ldrh.w	r6, [sp, #12]
  switch(rotation) {
   b9c06:	2a02      	cmp	r2, #2
   b9c08:	d00d      	beq.n	b9c26 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x2a>
   b9c0a:	2a03      	cmp	r2, #3
   b9c0c:	d018      	beq.n	b9c40 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x44>
   b9c0e:	2a01      	cmp	r2, #1
   b9c10:	d111      	bne.n	b9c36 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3a>
    x = WIDTH - x - 1;
   b9c12:	8902      	ldrh	r2, [r0, #8]
   b9c14:	43e4      	mvns	r4, r4
   b9c16:	4414      	add	r4, r2
   b9c18:	b224      	sxth	r4, r4
  if(bSwap) drawFastVLineInternal(x, y, w, color);
   b9c1a:	9603      	str	r6, [sp, #12]
   b9c1c:	460a      	mov	r2, r1
   b9c1e:	4621      	mov	r1, r4
}
   b9c20:	bc70      	pop	{r4, r5, r6}
  if(bSwap) drawFastVLineInternal(x, y, w, color);
   b9c22:	f7ff bf67 	b.w	b9af4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y  = HEIGHT - y - 1;
   b9c26:	8942      	ldrh	r2, [r0, #10]
    x -= (w-1);
   b9c28:	8905      	ldrh	r5, [r0, #8]
    y  = HEIGHT - y - 1;
   b9c2a:	43e4      	mvns	r4, r4
    x -= (w-1);
   b9c2c:	4419      	add	r1, r3
    y  = HEIGHT - y - 1;
   b9c2e:	4414      	add	r4, r2
    x -= (w-1);
   b9c30:	1a69      	subs	r1, r5, r1
    y  = HEIGHT - y - 1;
   b9c32:	b224      	sxth	r4, r4
    x -= (w-1);
   b9c34:	b209      	sxth	r1, r1
  else      drawFastHLineInternal(x, y, w, color);
   b9c36:	9603      	str	r6, [sp, #12]
   b9c38:	4622      	mov	r2, r4
}
   b9c3a:	bc70      	pop	{r4, r5, r6}
  else      drawFastHLineInternal(x, y, w, color);
   b9c3c:	f7ff bf16 	b.w	b9a6c <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    y -= (w-1);
   b9c40:	8945      	ldrh	r5, [r0, #10]
   b9c42:	4419      	add	r1, r3
   b9c44:	1a69      	subs	r1, r5, r1
   b9c46:	b209      	sxth	r1, r1
    break;
   b9c48:	e7e7      	b.n	b9c1a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>

000b9c4a <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
  int16_t x, int16_t y, int16_t h, uint16_t color) {
   b9c4a:	b430      	push	{r4, r5}
   b9c4c:	4614      	mov	r4, r2
  switch(rotation) {
   b9c4e:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t h, uint16_t color) {
   b9c50:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  switch(rotation) {
   b9c54:	2a02      	cmp	r2, #2
   b9c56:	d00d      	beq.n	b9c74 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x2a>
   b9c58:	2a03      	cmp	r2, #3
   b9c5a:	d018      	beq.n	b9c8e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x44>
   b9c5c:	2a01      	cmp	r2, #1
   b9c5e:	d111      	bne.n	b9c84 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    x -= (h-1);
   b9c60:	18e2      	adds	r2, r4, r3
   b9c62:	8904      	ldrh	r4, [r0, #8]
   b9c64:	1aa4      	subs	r4, r4, r2
   b9c66:	b224      	sxth	r4, r4
  if(bSwap) drawFastHLineInternal(x, y, h, color);
   b9c68:	9502      	str	r5, [sp, #8]
   b9c6a:	460a      	mov	r2, r1
   b9c6c:	4621      	mov	r1, r4
}
   b9c6e:	bc30      	pop	{r4, r5}
  if(bSwap) drawFastHLineInternal(x, y, h, color);
   b9c70:	f7ff befc 	b.w	b9a6c <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    x = WIDTH  - x - 1;
   b9c74:	8902      	ldrh	r2, [r0, #8]
   b9c76:	43c9      	mvns	r1, r1
   b9c78:	4411      	add	r1, r2
    y -= (h-1);
   b9c7a:	18e2      	adds	r2, r4, r3
   b9c7c:	8944      	ldrh	r4, [r0, #10]
   b9c7e:	1aa4      	subs	r4, r4, r2
    x = WIDTH  - x - 1;
   b9c80:	b209      	sxth	r1, r1
    y -= (h-1);
   b9c82:	b224      	sxth	r4, r4
  else      drawFastVLineInternal(x, y, h, color);
   b9c84:	9502      	str	r5, [sp, #8]
   b9c86:	4622      	mov	r2, r4
}
   b9c88:	bc30      	pop	{r4, r5}
  else      drawFastVLineInternal(x, y, h, color);
   b9c8a:	f7ff bf33 	b.w	b9af4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y = HEIGHT - y - 1;
   b9c8e:	8942      	ldrh	r2, [r0, #10]
   b9c90:	43c9      	mvns	r1, r1
   b9c92:	4411      	add	r1, r2
   b9c94:	b209      	sxth	r1, r1
    break;
   b9c96:	e7e7      	b.n	b9c68 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>

000b9c98 <_ZN16Adafruit_SSD13067displayEv>:
void Adafruit_SSD1306::display(void) {
   b9c98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b9c9c:	4604      	mov	r4, r0
  TRANSACTION_START
   b9c9e:	6a80      	ldr	r0, [r0, #40]	; 0x28
   b9ca0:	2800      	cmp	r0, #0
   b9ca2:	d042      	beq.n	b9d2a <_ZN16Adafruit_SSD13067displayEv+0x92>
   b9ca4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b9ca6:	f001 f99f 	bl	bafe8 <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(dlist1, sizeof(dlist1));
   b9caa:	4947      	ldr	r1, [pc, #284]	; (b9dc8 <_ZN16Adafruit_SSD13067displayEv+0x130>)
   b9cac:	2205      	movs	r2, #5
   b9cae:	4620      	mov	r0, r4
   b9cb0:	f7ff fd2d 	bl	b970e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(WIDTH - 1); // Column end address
   b9cb4:	8921      	ldrh	r1, [r4, #8]
   b9cb6:	3901      	subs	r1, #1
   b9cb8:	4620      	mov	r0, r4
   b9cba:	b2c9      	uxtb	r1, r1
   b9cbc:	f7ff fcb8 	bl	b9630 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   b9cc0:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   b9cc4:	1dde      	adds	r6, r3, #7
   b9cc6:	bf48      	it	mi
   b9cc8:	f103 060e 	addmi.w	r6, r3, #14
  if(wire) { // I2C
   b9ccc:	e9d4 050a 	ldrd	r0, r5, [r4, #40]	; 0x28
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   b9cd0:	8923      	ldrh	r3, [r4, #8]
   b9cd2:	10f6      	asrs	r6, r6, #3
   b9cd4:	fb13 f606 	smulbb	r6, r3, r6
  uint8_t *ptr   = buffer;
   b9cd8:	fa15 f686 	uxtah	r6, r5, r6
  if(wire) { // I2C
   b9cdc:	2800      	cmp	r0, #0
   b9cde:	d03a      	beq.n	b9d56 <_ZN16Adafruit_SSD13067displayEv+0xbe>
    wire->beginTransmission(i2caddr);
   b9ce0:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b9ce4:	f001 f98e 	bl	bb004 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x40);
   b9ce8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b9cea:	6803      	ldr	r3, [r0, #0]
   b9cec:	2140      	movs	r1, #64	; 0x40
   b9cee:	689b      	ldr	r3, [r3, #8]
   b9cf0:	4798      	blx	r3
    uint8_t bytesOut = 1;
   b9cf2:	2701      	movs	r7, #1
    while(count--) {
   b9cf4:	42b5      	cmp	r5, r6
        wire->endTransmission();
   b9cf6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    while(count--) {
   b9cf8:	d024      	beq.n	b9d44 <_ZN16Adafruit_SSD13067displayEv+0xac>
      if(bytesOut >= WIRE_MAX) {
   b9cfa:	2f1f      	cmp	r7, #31
   b9cfc:	d90c      	bls.n	b9d18 <_ZN16Adafruit_SSD13067displayEv+0x80>
        wire->endTransmission();
   b9cfe:	f001 f988 	bl	bb012 <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   b9d02:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b9d06:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b9d08:	f001 f97c 	bl	bb004 <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x40);
   b9d0c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b9d0e:	6803      	ldr	r3, [r0, #0]
   b9d10:	2140      	movs	r1, #64	; 0x40
   b9d12:	689b      	ldr	r3, [r3, #8]
   b9d14:	4798      	blx	r3
        bytesOut = 1;
   b9d16:	2701      	movs	r7, #1
      WIRE_WRITE(*ptr++);
   b9d18:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b9d1a:	f815 1b01 	ldrb.w	r1, [r5], #1
   b9d1e:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   b9d20:	3701      	adds	r7, #1
      WIRE_WRITE(*ptr++);
   b9d22:	689b      	ldr	r3, [r3, #8]
   b9d24:	4798      	blx	r3
      bytesOut++;
   b9d26:	b2ff      	uxtb	r7, r7
    while(count--) {
   b9d28:	e7e4      	b.n	b9cf4 <_ZN16Adafruit_SSD13067displayEv+0x5c>
  TRANSACTION_START
   b9d2a:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b9d2c:	b118      	cbz	r0, b9d36 <_ZN16Adafruit_SSD13067displayEv+0x9e>
   b9d2e:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b9d32:	f000 fc2f 	bl	ba594 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b9d36:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b9d3a:	2100      	movs	r1, #0
   b9d3c:	b280      	uxth	r0, r0
   b9d3e:	f001 faaa 	bl	bb296 <digitalWrite>
   b9d42:	e7b2      	b.n	b9caa <_ZN16Adafruit_SSD13067displayEv+0x12>
    wire->endTransmission();
   b9d44:	f001 f965 	bl	bb012 <_ZN7TwoWire15endTransmissionEv>
  TRANSACTION_END
   b9d48:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b9d4a:	b378      	cbz	r0, b9dac <_ZN16Adafruit_SSD13067displayEv+0x114>
   b9d4c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   b9d4e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b9d52:	f001 b949 	b.w	bafe8 <_ZN7TwoWire8setSpeedEm>
    SSD1306_MODE_DATA
   b9d56:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   b9d5a:	2101      	movs	r1, #1
   b9d5c:	b280      	uxth	r0, r0
   b9d5e:	f001 fa9a 	bl	bb296 <digitalWrite>
    while(count--) SPIwrite(*ptr++);
   b9d62:	42ae      	cmp	r6, r5
   b9d64:	d0f0      	beq.n	b9d48 <_ZN16Adafruit_SSD13067displayEv+0xb0>
  if(spi) {
   b9d66:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(count--) SPIwrite(*ptr++);
   b9d68:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
   b9d6c:	b118      	cbz	r0, b9d76 <_ZN16Adafruit_SSD13067displayEv+0xde>
    (void)spi->transfer(d);
   b9d6e:	4649      	mov	r1, r9
   b9d70:	f000 fc7e 	bl	ba670 <_ZN8SPIClass8transferEh>
   b9d74:	e7f5      	b.n	b9d62 <_ZN16Adafruit_SSD13067displayEv+0xca>
   b9d76:	2708      	movs	r7, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b9d78:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b9d7c:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b9d80:	ea09 0108 	and.w	r1, r9, r8
   b9d84:	b280      	uxth	r0, r0
   b9d86:	f001 fa86 	bl	bb296 <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b9d8a:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b9d8e:	2101      	movs	r1, #1
   b9d90:	b280      	uxth	r0, r0
   b9d92:	f001 fa80 	bl	bb296 <digitalWrite>
      digitalWrite(clkPin , LOW);
   b9d96:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b9d9a:	2100      	movs	r1, #0
   b9d9c:	b280      	uxth	r0, r0
   b9d9e:	f001 fa7a 	bl	bb296 <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b9da2:	3f01      	subs	r7, #1
   b9da4:	ea4f 0858 	mov.w	r8, r8, lsr #1
   b9da8:	d1e8      	bne.n	b9d7c <_ZN16Adafruit_SSD13067displayEv+0xe4>
   b9daa:	e7da      	b.n	b9d62 <_ZN16Adafruit_SSD13067displayEv+0xca>
  TRANSACTION_END
   b9dac:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b9db0:	2101      	movs	r1, #1
   b9db2:	b280      	uxth	r0, r0
   b9db4:	f001 fa6f 	bl	bb296 <digitalWrite>
   b9db8:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b9dba:	b118      	cbz	r0, b9dc4 <_ZN16Adafruit_SSD13067displayEv+0x12c>
}
   b9dbc:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  TRANSACTION_END
   b9dc0:	f000 bbce 	b.w	ba560 <_ZN8SPIClass14endTransactionEv>
}
   b9dc4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b9dc8:	000bd34c 	.word	0x000bd34c

000b9dcc <_ZN12ChainableLEDC1Ehhh>:
// Forward declaration
float hue2rgb(float p, float q, float t);

// --------------------------------------------------------------------------------------

ChainableLED::ChainableLED(byte clk_pin, byte data_pin, byte number_of_leds) :
   b9dcc:	b510      	push	{r4, lr}
   b9dce:	4604      	mov	r4, r0
    _clk_pin(clk_pin), _data_pin(data_pin), _num_leds(number_of_leds)
   b9dd0:	7001      	strb	r1, [r0, #0]
   b9dd2:	7042      	strb	r2, [r0, #1]
   b9dd4:	7083      	strb	r3, [r0, #2]
{
    _led_state = (byte*) calloc(_num_leds*3, sizeof(byte));
   b9dd6:	2101      	movs	r1, #1
   b9dd8:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   b9ddc:	f001 fb5a 	bl	bb494 <calloc>
   b9de0:	6060      	str	r0, [r4, #4]
}
   b9de2:	4620      	mov	r0, r4
   b9de4:	bd10      	pop	{r4, pc}

000b9de6 <_ZN12ChainableLEDD1Ev>:

ChainableLED::~ChainableLED()
   b9de6:	b510      	push	{r4, lr}
   b9de8:	4604      	mov	r4, r0
{
    free(_led_state);
   b9dea:	6840      	ldr	r0, [r0, #4]
   b9dec:	f000 fb1e 	bl	ba42c <free>
}
   b9df0:	4620      	mov	r0, r4
   b9df2:	bd10      	pop	{r4, pc}

000b9df4 <_ZN12ChainableLED3clkEv>:
    for (byte i=0; i<_num_leds; i++)
        setColorRGB(i, 0, 0, 0);
}

void ChainableLED::clk(void)
{
   b9df4:	b510      	push	{r4, lr}
    digitalWrite(_clk_pin, LOW);
   b9df6:	2100      	movs	r1, #0
{
   b9df8:	4604      	mov	r4, r0
    digitalWrite(_clk_pin, LOW);
   b9dfa:	7800      	ldrb	r0, [r0, #0]
   b9dfc:	f001 fa4b 	bl	bb296 <digitalWrite>
   b9e00:	2014      	movs	r0, #20
   b9e02:	f000 f917 	bl	ba034 <HAL_Delay_Microseconds>
    delayMicroseconds(_CLK_PULSE_DELAY);
    digitalWrite(_clk_pin, HIGH);
   b9e06:	7820      	ldrb	r0, [r4, #0]
   b9e08:	2101      	movs	r1, #1
   b9e0a:	f001 fa44 	bl	bb296 <digitalWrite>
    delayMicroseconds(_CLK_PULSE_DELAY);
}
   b9e0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b9e12:	2014      	movs	r0, #20
   b9e14:	f000 b90e 	b.w	ba034 <HAL_Delay_Microseconds>

000b9e18 <_ZN12ChainableLED8sendByteEh>:

void ChainableLED::sendByte(byte b)
{
   b9e18:	b570      	push	{r4, r5, r6, lr}
   b9e1a:	4606      	mov	r6, r0
   b9e1c:	460c      	mov	r4, r1
   b9e1e:	2508      	movs	r5, #8
    // Send one bit at a time, starting with the MSB
    for (byte i=0; i<8; i++)
    {
        // If MSB is 1, write one and clock it, else write 0 and clock
        if ((b & 0x80) != 0)
   b9e20:	0623      	lsls	r3, r4, #24
            digitalWrite(_data_pin, HIGH);
   b9e22:	bf4c      	ite	mi
   b9e24:	2101      	movmi	r1, #1
        else
            digitalWrite(_data_pin, LOW);
   b9e26:	2100      	movpl	r1, #0
            digitalWrite(_data_pin, HIGH);
   b9e28:	7870      	ldrb	r0, [r6, #1]
            digitalWrite(_data_pin, LOW);
   b9e2a:	f001 fa34 	bl	bb296 <digitalWrite>
    for (byte i=0; i<8; i++)
   b9e2e:	3d01      	subs	r5, #1
        clk();
   b9e30:	4630      	mov	r0, r6
   b9e32:	f7ff ffdf 	bl	b9df4 <_ZN12ChainableLED3clkEv>

        // Advance to the next bit to send
        b <<= 1;
   b9e36:	0064      	lsls	r4, r4, #1
    for (byte i=0; i<8; i++)
   b9e38:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
        b <<= 1;
   b9e3c:	b2e4      	uxtb	r4, r4
    for (byte i=0; i<8; i++)
   b9e3e:	d1ef      	bne.n	b9e20 <_ZN12ChainableLED8sendByteEh+0x8>
    }
}
   b9e40:	bd70      	pop	{r4, r5, r6, pc}

000b9e42 <_ZN12ChainableLED9sendColorEhhh>:

void ChainableLED::sendColor(byte red, byte green, byte blue)
{
   b9e42:	b573      	push	{r0, r1, r4, r5, r6, lr}
    // Start by sending a byte with the format "1 1 /B7 /B6 /G7 /G6 /R7 /R6"
    byte prefix = 0b11000000;
    if ((blue & 0x80) == 0)     prefix|= 0b00100000;
   b9e44:	f013 0f80 	tst.w	r3, #128	; 0x80
{
   b9e48:	461e      	mov	r6, r3
   b9e4a:	460c      	mov	r4, r1
   b9e4c:	4615      	mov	r5, r2
    if ((blue & 0x80) == 0)     prefix|= 0b00100000;
   b9e4e:	bf14      	ite	ne
   b9e50:	21c0      	movne	r1, #192	; 0xc0
   b9e52:	21e0      	moveq	r1, #224	; 0xe0
    if ((blue & 0x40) == 0)     prefix|= 0b00010000;
   b9e54:	0673      	lsls	r3, r6, #25
   b9e56:	bf58      	it	pl
   b9e58:	f041 0110 	orrpl.w	r1, r1, #16
    if ((green & 0x80) == 0)    prefix|= 0b00001000;
   b9e5c:	062a      	lsls	r2, r5, #24
   b9e5e:	bf58      	it	pl
   b9e60:	f041 0108 	orrpl.w	r1, r1, #8
    if ((green & 0x40) == 0)    prefix|= 0b00000100;
   b9e64:	066b      	lsls	r3, r5, #25
   b9e66:	bf58      	it	pl
   b9e68:	f041 0104 	orrpl.w	r1, r1, #4
    if ((red & 0x80) == 0)      prefix|= 0b00000010;
   b9e6c:	0622      	lsls	r2, r4, #24
   b9e6e:	bf58      	it	pl
   b9e70:	f041 0102 	orrpl.w	r1, r1, #2
    if ((red & 0x40) == 0)      prefix|= 0b00000001;
   b9e74:	0663      	lsls	r3, r4, #25
   b9e76:	bf58      	it	pl
   b9e78:	f041 0101 	orrpl.w	r1, r1, #1
    sendByte(prefix);
   b9e7c:	9001      	str	r0, [sp, #4]
   b9e7e:	f7ff ffcb 	bl	b9e18 <_ZN12ChainableLED8sendByteEh>

    // Now must send the 3 colors
    sendByte(blue);
   b9e82:	9801      	ldr	r0, [sp, #4]
   b9e84:	4631      	mov	r1, r6
   b9e86:	f7ff ffc7 	bl	b9e18 <_ZN12ChainableLED8sendByteEh>
    sendByte(green);
   b9e8a:	9801      	ldr	r0, [sp, #4]
   b9e8c:	4629      	mov	r1, r5
   b9e8e:	f7ff ffc3 	bl	b9e18 <_ZN12ChainableLED8sendByteEh>
    sendByte(red);
   b9e92:	9801      	ldr	r0, [sp, #4]
   b9e94:	4621      	mov	r1, r4
}
   b9e96:	b002      	add	sp, #8
   b9e98:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    sendByte(red);
   b9e9c:	f7ff bfbc 	b.w	b9e18 <_ZN12ChainableLED8sendByteEh>

000b9ea0 <_ZN12ChainableLED11setColorRGBEhhhh>:

void ChainableLED::setColorRGB(byte led, byte red, byte green, byte blue)
{
   b9ea0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b9ea4:	4604      	mov	r4, r0
   b9ea6:	460f      	mov	r7, r1
    // Send data frame prefix (32x "0")
    sendByte(0x00);
   b9ea8:	2100      	movs	r1, #0
{
   b9eaa:	4690      	mov	r8, r2
   b9eac:	4699      	mov	r9, r3
   b9eae:	f89d a020 	ldrb.w	sl, [sp, #32]
    sendByte(0x00);
   b9eb2:	f7ff ffb1 	bl	b9e18 <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   b9eb6:	2100      	movs	r1, #0
   b9eb8:	4620      	mov	r0, r4
   b9eba:	f7ff ffad 	bl	b9e18 <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   b9ebe:	2100      	movs	r1, #0
   b9ec0:	4620      	mov	r0, r4
   b9ec2:	f7ff ffa9 	bl	b9e18 <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   b9ec6:	2100      	movs	r1, #0
   b9ec8:	4620      	mov	r0, r4
   b9eca:	f7ff ffa5 	bl	b9e18 <_ZN12ChainableLED8sendByteEh>
   b9ece:	2600      	movs	r6, #0

    // Send color data for each one of the leds
    for (byte i=0; i<_num_leds; i++)
   b9ed0:	78a3      	ldrb	r3, [r4, #2]
   b9ed2:	b2f5      	uxtb	r5, r6
   b9ed4:	42ab      	cmp	r3, r5
   b9ed6:	d919      	bls.n	b9f0c <_ZN12ChainableLED11setColorRGBEhhhh+0x6c>
    {
        if (i == led)
        {
            _led_state[i*3 + _CL_RED] = red;
   b9ed8:	eb05 0045 	add.w	r0, r5, r5, lsl #1
        if (i == led)
   b9edc:	42af      	cmp	r7, r5
            _led_state[i*3 + _CL_GREEN] = green;
   b9ede:	f100 0201 	add.w	r2, r0, #1
            _led_state[i*3 + _CL_BLUE] = blue;
   b9ee2:	f100 0302 	add.w	r3, r0, #2
        if (i == led)
   b9ee6:	d108      	bne.n	b9efa <_ZN12ChainableLED11setColorRGBEhhhh+0x5a>
            _led_state[i*3 + _CL_RED] = red;
   b9ee8:	6861      	ldr	r1, [r4, #4]
   b9eea:	f801 8000 	strb.w	r8, [r1, r0]
            _led_state[i*3 + _CL_GREEN] = green;
   b9eee:	6861      	ldr	r1, [r4, #4]
   b9ef0:	f801 9002 	strb.w	r9, [r1, r2]
            _led_state[i*3 + _CL_BLUE] = blue;
   b9ef4:	6861      	ldr	r1, [r4, #4]
   b9ef6:	f801 a003 	strb.w	sl, [r1, r3]
        }

        sendColor(_led_state[i*3 + _CL_RED],
   b9efa:	6861      	ldr	r1, [r4, #4]
   b9efc:	5ccb      	ldrb	r3, [r1, r3]
   b9efe:	5c8a      	ldrb	r2, [r1, r2]
   b9f00:	5c09      	ldrb	r1, [r1, r0]
   b9f02:	4620      	mov	r0, r4
   b9f04:	f7ff ff9d 	bl	b9e42 <_ZN12ChainableLED9sendColorEhhh>
    for (byte i=0; i<_num_leds; i++)
   b9f08:	3601      	adds	r6, #1
   b9f0a:	e7e1      	b.n	b9ed0 <_ZN12ChainableLED11setColorRGBEhhhh+0x30>
                  _led_state[i*3 + _CL_GREEN],
                  _led_state[i*3 + _CL_BLUE]);
    }

    // Terminate data frame (32x "0")
    sendByte(0x00);
   b9f0c:	4620      	mov	r0, r4
   b9f0e:	2100      	movs	r1, #0
   b9f10:	f7ff ff82 	bl	b9e18 <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   b9f14:	4620      	mov	r0, r4
   b9f16:	2100      	movs	r1, #0
   b9f18:	f7ff ff7e 	bl	b9e18 <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   b9f1c:	4620      	mov	r0, r4
   b9f1e:	2100      	movs	r1, #0
   b9f20:	f7ff ff7a 	bl	b9e18 <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   b9f24:	4620      	mov	r0, r4
   b9f26:	2100      	movs	r1, #0
}
   b9f28:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    sendByte(0x00);
   b9f2c:	f7ff bf74 	b.w	b9e18 <_ZN12ChainableLED8sendByteEh>

000b9f30 <_ZN12ChainableLED4initEv>:
{
   b9f30:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b9f32:	4604      	mov	r4, r0
    pinMode(_clk_pin, OUTPUT);
   b9f34:	2101      	movs	r1, #1
   b9f36:	7800      	ldrb	r0, [r0, #0]
   b9f38:	f001 f99c 	bl	bb274 <pinMode>
    pinMode(_data_pin, OUTPUT);
   b9f3c:	7860      	ldrb	r0, [r4, #1]
   b9f3e:	2101      	movs	r1, #1
   b9f40:	f001 f998 	bl	bb274 <pinMode>
   b9f44:	2500      	movs	r5, #0
        setColorRGB(i, 0, 0, 0);
   b9f46:	462e      	mov	r6, r5
    for (byte i=0; i<_num_leds; i++)
   b9f48:	78a3      	ldrb	r3, [r4, #2]
   b9f4a:	b2e9      	uxtb	r1, r5
   b9f4c:	428b      	cmp	r3, r1
   b9f4e:	d907      	bls.n	b9f60 <_ZN12ChainableLED4initEv+0x30>
        setColorRGB(i, 0, 0, 0);
   b9f50:	2300      	movs	r3, #0
   b9f52:	9600      	str	r6, [sp, #0]
   b9f54:	461a      	mov	r2, r3
   b9f56:	4620      	mov	r0, r4
   b9f58:	f7ff ffa2 	bl	b9ea0 <_ZN12ChainableLED11setColorRGBEhhhh>
    for (byte i=0; i<_num_leds; i++)
   b9f5c:	3501      	adds	r5, #1
   b9f5e:	e7f3      	b.n	b9f48 <_ZN12ChainableLED4initEv+0x18>
}
   b9f60:	b002      	add	sp, #8
   b9f62:	bd70      	pop	{r4, r5, r6, pc}

000b9f64 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b9f64:	b508      	push	{r3, lr}
   b9f66:	4b02      	ldr	r3, [pc, #8]	; (b9f70 <netdb_freeaddrinfo+0xc>)
   b9f68:	681b      	ldr	r3, [r3, #0]
   b9f6a:	689b      	ldr	r3, [r3, #8]
   b9f6c:	9301      	str	r3, [sp, #4]
   b9f6e:	bd08      	pop	{r3, pc}
   b9f70:	00030268 	.word	0x00030268

000b9f74 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b9f74:	b508      	push	{r3, lr}
   b9f76:	4b02      	ldr	r3, [pc, #8]	; (b9f80 <netdb_getaddrinfo+0xc>)
   b9f78:	681b      	ldr	r3, [r3, #0]
   b9f7a:	68db      	ldr	r3, [r3, #12]
   b9f7c:	9301      	str	r3, [sp, #4]
   b9f7e:	bd08      	pop	{r3, pc}
   b9f80:	00030268 	.word	0x00030268

000b9f84 <hal_pin_validate_function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, hal_pin_map, hal_pin_info_t*(void))
DYNALIB_FN(1, hal_gpio, hal_pin_validate_function, PinFunction(hal_pin_t, PinFunction))
   b9f84:	b508      	push	{r3, lr}
   b9f86:	4b02      	ldr	r3, [pc, #8]	; (b9f90 <hal_pin_validate_function+0xc>)
   b9f88:	681b      	ldr	r3, [r3, #0]
   b9f8a:	685b      	ldr	r3, [r3, #4]
   b9f8c:	9301      	str	r3, [sp, #4]
   b9f8e:	bd08      	pop	{r3, pc}
   b9f90:	0003022c 	.word	0x0003022c

000b9f94 <hal_gpio_mode>:
DYNALIB_FN(2, hal_gpio, hal_gpio_mode, void(hal_pin_t, PinMode))
   b9f94:	b508      	push	{r3, lr}
   b9f96:	4b02      	ldr	r3, [pc, #8]	; (b9fa0 <hal_gpio_mode+0xc>)
   b9f98:	681b      	ldr	r3, [r3, #0]
   b9f9a:	689b      	ldr	r3, [r3, #8]
   b9f9c:	9301      	str	r3, [sp, #4]
   b9f9e:	bd08      	pop	{r3, pc}
   b9fa0:	0003022c 	.word	0x0003022c

000b9fa4 <hal_gpio_get_mode>:
DYNALIB_FN(3, hal_gpio, hal_gpio_get_mode, PinMode(hal_pin_t))
   b9fa4:	b508      	push	{r3, lr}
   b9fa6:	4b02      	ldr	r3, [pc, #8]	; (b9fb0 <hal_gpio_get_mode+0xc>)
   b9fa8:	681b      	ldr	r3, [r3, #0]
   b9faa:	68db      	ldr	r3, [r3, #12]
   b9fac:	9301      	str	r3, [sp, #4]
   b9fae:	bd08      	pop	{r3, pc}
   b9fb0:	0003022c 	.word	0x0003022c

000b9fb4 <hal_gpio_write>:
DYNALIB_FN(4, hal_gpio, hal_gpio_write, void(hal_pin_t, uint8_t))
   b9fb4:	b508      	push	{r3, lr}
   b9fb6:	4b02      	ldr	r3, [pc, #8]	; (b9fc0 <hal_gpio_write+0xc>)
   b9fb8:	681b      	ldr	r3, [r3, #0]
   b9fba:	691b      	ldr	r3, [r3, #16]
   b9fbc:	9301      	str	r3, [sp, #4]
   b9fbe:	bd08      	pop	{r3, pc}
   b9fc0:	0003022c 	.word	0x0003022c

000b9fc4 <hal_gpio_read>:
DYNALIB_FN(5, hal_gpio, hal_gpio_read, int32_t(hal_pin_t))
   b9fc4:	b508      	push	{r3, lr}
   b9fc6:	4b02      	ldr	r3, [pc, #8]	; (b9fd0 <hal_gpio_read+0xc>)
   b9fc8:	681b      	ldr	r3, [r3, #0]
   b9fca:	695b      	ldr	r3, [r3, #20]
   b9fcc:	9301      	str	r3, [sp, #4]
   b9fce:	bd08      	pop	{r3, pc}
   b9fd0:	0003022c 	.word	0x0003022c

000b9fd4 <hal_interrupt_enable_all>:
DYNALIB_FN(6, hal_gpio, hal_interrupt_attach, int(uint16_t, hal_interrupt_handler_t, void*, InterruptMode, hal_interrupt_extra_configuration_t*))
DYNALIB_FN(7, hal_gpio, hal_interrupt_detach, int(uint16_t))
DYNALIB_FN(8, hal_gpio, hal_interrupt_enable_all, void(void))
   b9fd4:	b508      	push	{r3, lr}
   b9fd6:	4b02      	ldr	r3, [pc, #8]	; (b9fe0 <hal_interrupt_enable_all+0xc>)
   b9fd8:	681b      	ldr	r3, [r3, #0]
   b9fda:	6a1b      	ldr	r3, [r3, #32]
   b9fdc:	9301      	str	r3, [sp, #4]
   b9fde:	bd08      	pop	{r3, pc}
   b9fe0:	0003022c 	.word	0x0003022c

000b9fe4 <hal_interrupt_disable_all>:
DYNALIB_FN(9, hal_gpio, hal_interrupt_disable_all, void(void))
   b9fe4:	b508      	push	{r3, lr}
   b9fe6:	4b02      	ldr	r3, [pc, #8]	; (b9ff0 <hal_interrupt_disable_all+0xc>)
   b9fe8:	681b      	ldr	r3, [r3, #0]
   b9fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b9fec:	9301      	str	r3, [sp, #4]
   b9fee:	bd08      	pop	{r3, pc}
   b9ff0:	0003022c 	.word	0x0003022c

000b9ff4 <hal_adc_read>:

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(hal_pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   b9ff4:	b508      	push	{r3, lr}
   b9ff6:	4b02      	ldr	r3, [pc, #8]	; (ba000 <hal_adc_read+0xc>)
   b9ff8:	681b      	ldr	r3, [r3, #0]
   b9ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b9ffc:	9301      	str	r3, [sp, #4]
   b9ffe:	bd08      	pop	{r3, pc}
   ba000:	0003022c 	.word	0x0003022c

000ba004 <hal_gpio_pulse_in>:

DYNALIB_FN(16, hal_gpio, hal_interrupt_set_system_handler, uint8_t(hal_irq_t, const hal_interrupt_callback_t*, hal_interrupt_callback_t*, void*))
DYNALIB_FN(17, hal_gpio, hal_interrupt_get_system_handler, uint8_t(hal_irq_t, hal_interrupt_callback_t*, void*))
DYNALIB_FN(18, hal_gpio, hal_interrupt_trigger_system, void(hal_irq_t, void*))

DYNALIB_FN(19, hal_gpio, hal_gpio_pulse_in, uint32_t(hal_pin_t, uint16_t))
   ba004:	b508      	push	{r3, lr}
   ba006:	4b02      	ldr	r3, [pc, #8]	; (ba010 <hal_gpio_pulse_in+0xc>)
   ba008:	681b      	ldr	r3, [r3, #0]
   ba00a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   ba00c:	9301      	str	r3, [sp, #4]
   ba00e:	bd08      	pop	{r3, pc}
   ba010:	0003022c 	.word	0x0003022c

000ba014 <hal_pwm_write_with_frequency_ext>:
DYNALIB_FN(26, hal_gpio, HAL_DAC_Set_Resolution, void(hal_pin_t, uint8_t))
DYNALIB_FN(27, hal_gpio, HAL_DAC_Enable_Buffer, void(hal_pin_t pin, uint8_t state))
DYNALIB_FN(28, hal_gpio, hal_pwm_get_resolution, uint8_t(uint16_t))
DYNALIB_FN(29, hal_gpio, hal_pwm_set_resolution, void(uint16_t, uint8_t))
DYNALIB_FN(30, hal_gpio, hal_pwm_write_ext, void(uint16_t, uint32_t))
DYNALIB_FN(31, hal_gpio, hal_pwm_write_with_frequency_ext, void(uint16_t, uint32_t, uint32_t))
   ba014:	b508      	push	{r3, lr}
   ba016:	4b02      	ldr	r3, [pc, #8]	; (ba020 <hal_pwm_write_with_frequency_ext+0xc>)
   ba018:	681b      	ldr	r3, [r3, #0]
   ba01a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   ba01c:	9301      	str	r3, [sp, #4]
   ba01e:	bd08      	pop	{r3, pc}
   ba020:	0003022c 	.word	0x0003022c

000ba024 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   ba024:	b508      	push	{r3, lr}
   ba026:	4b02      	ldr	r3, [pc, #8]	; (ba030 <HAL_RNG_GetRandomNumber+0xc>)
   ba028:	681b      	ldr	r3, [r3, #0]
   ba02a:	685b      	ldr	r3, [r3, #4]
   ba02c:	9301      	str	r3, [sp, #4]
   ba02e:	bd08      	pop	{r3, pc}
   ba030:	00030218 	.word	0x00030218

000ba034 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   ba034:	b508      	push	{r3, lr}
   ba036:	4b02      	ldr	r3, [pc, #8]	; (ba040 <HAL_Delay_Microseconds+0xc>)
   ba038:	681b      	ldr	r3, [r3, #0]
   ba03a:	68db      	ldr	r3, [r3, #12]
   ba03c:	9301      	str	r3, [sp, #4]
   ba03e:	bd08      	pop	{r3, pc}
   ba040:	00030218 	.word	0x00030218

000ba044 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   ba044:	b508      	push	{r3, lr}
   ba046:	4b02      	ldr	r3, [pc, #8]	; (ba050 <HAL_Timer_Get_Milli_Seconds+0xc>)
   ba048:	681b      	ldr	r3, [r3, #0]
   ba04a:	695b      	ldr	r3, [r3, #20]
   ba04c:	9301      	str	r3, [sp, #4]
   ba04e:	bd08      	pop	{r3, pc}
   ba050:	00030218 	.word	0x00030218

000ba054 <HAL_EEPROM_Init>:
DYNALIB_FN(BASE_IDX + 5, hal, hal_rtc_get_unixtime_deprecated, time32_t(void))
DYNALIB_FN(BASE_IDX + 6, hal, hal_rtc_set_unixtime_deprecated, void(time32_t))

DYNALIB_FN(BASE_IDX + 7, hal, hal_rtc_set_alarm, int(const struct timeval*, uint32_t, hal_rtc_alarm_handler, void*, void*))

DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
   ba054:	b508      	push	{r3, lr}
   ba056:	4b02      	ldr	r3, [pc, #8]	; (ba060 <HAL_EEPROM_Init+0xc>)
   ba058:	681b      	ldr	r3, [r3, #0]
   ba05a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   ba05c:	9301      	str	r3, [sp, #4]
   ba05e:	bd08      	pop	{r3, pc}
   ba060:	00030218 	.word	0x00030218

000ba064 <HAL_EEPROM_Read>:
DYNALIB_FN(BASE_IDX + 9, hal, HAL_EEPROM_Read, uint8_t(uint32_t))
   ba064:	b508      	push	{r3, lr}
   ba066:	4b02      	ldr	r3, [pc, #8]	; (ba070 <HAL_EEPROM_Read+0xc>)
   ba068:	681b      	ldr	r3, [r3, #0]
   ba06a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   ba06c:	9301      	str	r3, [sp, #4]
   ba06e:	bd08      	pop	{r3, pc}
   ba070:	00030218 	.word	0x00030218

000ba074 <HAL_EEPROM_Put>:
DYNALIB_FN(BASE_IDX + 12, hal, HAL_disable_irq, int(void))
DYNALIB_FN(BASE_IDX + 13, hal, HAL_enable_irq, void(int))
DYNALIB_FN(BASE_IDX + 14, hal, hal_rtc_cancel_alarm, void(void))

DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
   ba074:	b508      	push	{r3, lr}
   ba076:	4b02      	ldr	r3, [pc, #8]	; (ba080 <HAL_EEPROM_Put+0xc>)
   ba078:	681b      	ldr	r3, [r3, #0]
   ba07a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   ba07c:	9301      	str	r3, [sp, #4]
   ba07e:	bd08      	pop	{r3, pc}
   ba080:	00030218 	.word	0x00030218

000ba084 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   ba084:	b508      	push	{r3, lr}
   ba086:	4b02      	ldr	r3, [pc, #8]	; (ba090 <os_mutex_recursive_create+0xc>)
   ba088:	681b      	ldr	r3, [r3, #0]
   ba08a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   ba08c:	9301      	str	r3, [sp, #4]
   ba08e:	bd08      	pop	{r3, pc}
   ba090:	00030248 	.word	0x00030248

000ba094 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   ba094:	b508      	push	{r3, lr}
   ba096:	4b02      	ldr	r3, [pc, #8]	; (ba0a0 <inet_inet_ntop+0xc>)
   ba098:	681b      	ldr	r3, [r3, #0]
   ba09a:	695b      	ldr	r3, [r3, #20]
   ba09c:	9301      	str	r3, [sp, #4]
   ba09e:	bd08      	pop	{r3, pc}
   ba0a0:	00030264 	.word	0x00030264

000ba0a4 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   ba0a4:	b508      	push	{r3, lr}
   ba0a6:	4b02      	ldr	r3, [pc, #8]	; (ba0b0 <hal_usart_write+0xc>)
   ba0a8:	681b      	ldr	r3, [r3, #0]
   ba0aa:	68db      	ldr	r3, [r3, #12]
   ba0ac:	9301      	str	r3, [sp, #4]
   ba0ae:	bd08      	pop	{r3, pc}
   ba0b0:	0003023c 	.word	0x0003023c

000ba0b4 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   ba0b4:	b508      	push	{r3, lr}
   ba0b6:	4b02      	ldr	r3, [pc, #8]	; (ba0c0 <hal_usart_available+0xc>)
   ba0b8:	681b      	ldr	r3, [r3, #0]
   ba0ba:	691b      	ldr	r3, [r3, #16]
   ba0bc:	9301      	str	r3, [sp, #4]
   ba0be:	bd08      	pop	{r3, pc}
   ba0c0:	0003023c 	.word	0x0003023c

000ba0c4 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   ba0c4:	b508      	push	{r3, lr}
   ba0c6:	4b02      	ldr	r3, [pc, #8]	; (ba0d0 <hal_usart_read+0xc>)
   ba0c8:	681b      	ldr	r3, [r3, #0]
   ba0ca:	695b      	ldr	r3, [r3, #20]
   ba0cc:	9301      	str	r3, [sp, #4]
   ba0ce:	bd08      	pop	{r3, pc}
   ba0d0:	0003023c 	.word	0x0003023c

000ba0d4 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   ba0d4:	b508      	push	{r3, lr}
   ba0d6:	4b02      	ldr	r3, [pc, #8]	; (ba0e0 <hal_usart_peek+0xc>)
   ba0d8:	681b      	ldr	r3, [r3, #0]
   ba0da:	699b      	ldr	r3, [r3, #24]
   ba0dc:	9301      	str	r3, [sp, #4]
   ba0de:	bd08      	pop	{r3, pc}
   ba0e0:	0003023c 	.word	0x0003023c

000ba0e4 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   ba0e4:	b508      	push	{r3, lr}
   ba0e6:	4b02      	ldr	r3, [pc, #8]	; (ba0f0 <hal_usart_flush+0xc>)
   ba0e8:	681b      	ldr	r3, [r3, #0]
   ba0ea:	69db      	ldr	r3, [r3, #28]
   ba0ec:	9301      	str	r3, [sp, #4]
   ba0ee:	bd08      	pop	{r3, pc}
   ba0f0:	0003023c 	.word	0x0003023c

000ba0f4 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   ba0f4:	b508      	push	{r3, lr}
   ba0f6:	4b02      	ldr	r3, [pc, #8]	; (ba100 <hal_usart_is_enabled+0xc>)
   ba0f8:	681b      	ldr	r3, [r3, #0]
   ba0fa:	6a1b      	ldr	r3, [r3, #32]
   ba0fc:	9301      	str	r3, [sp, #4]
   ba0fe:	bd08      	pop	{r3, pc}
   ba100:	0003023c 	.word	0x0003023c

000ba104 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   ba104:	b508      	push	{r3, lr}
   ba106:	4b02      	ldr	r3, [pc, #8]	; (ba110 <hal_usart_available_data_for_write+0xc>)
   ba108:	681b      	ldr	r3, [r3, #0]
   ba10a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   ba10c:	9301      	str	r3, [sp, #4]
   ba10e:	bd08      	pop	{r3, pc}
   ba110:	0003023c 	.word	0x0003023c

000ba114 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   ba114:	b508      	push	{r3, lr}
   ba116:	4b02      	ldr	r3, [pc, #8]	; (ba120 <hal_usart_init_ex+0xc>)
   ba118:	681b      	ldr	r3, [r3, #0]
   ba11a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   ba11c:	9301      	str	r3, [sp, #4]
   ba11e:	bd08      	pop	{r3, pc}
   ba120:	0003023c 	.word	0x0003023c

000ba124 <hal_i2c_set_speed>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
   ba124:	b508      	push	{r3, lr}
   ba126:	4b02      	ldr	r3, [pc, #8]	; (ba130 <hal_i2c_set_speed+0xc>)
   ba128:	681b      	ldr	r3, [r3, #0]
   ba12a:	681b      	ldr	r3, [r3, #0]
   ba12c:	9301      	str	r3, [sp, #4]
   ba12e:	bd08      	pop	{r3, pc}
   ba130:	00030228 	.word	0x00030228

000ba134 <hal_i2c_begin>:
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   ba134:	b508      	push	{r3, lr}
   ba136:	4b02      	ldr	r3, [pc, #8]	; (ba140 <hal_i2c_begin+0xc>)
   ba138:	681b      	ldr	r3, [r3, #0]
   ba13a:	68db      	ldr	r3, [r3, #12]
   ba13c:	9301      	str	r3, [sp, #4]
   ba13e:	bd08      	pop	{r3, pc}
   ba140:	00030228 	.word	0x00030228

000ba144 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   ba144:	b508      	push	{r3, lr}
   ba146:	4b02      	ldr	r3, [pc, #8]	; (ba150 <hal_i2c_begin_transmission+0xc>)
   ba148:	681b      	ldr	r3, [r3, #0]
   ba14a:	699b      	ldr	r3, [r3, #24]
   ba14c:	9301      	str	r3, [sp, #4]
   ba14e:	bd08      	pop	{r3, pc}
   ba150:	00030228 	.word	0x00030228

000ba154 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   ba154:	b508      	push	{r3, lr}
   ba156:	4b02      	ldr	r3, [pc, #8]	; (ba160 <hal_i2c_end_transmission+0xc>)
   ba158:	681b      	ldr	r3, [r3, #0]
   ba15a:	69db      	ldr	r3, [r3, #28]
   ba15c:	9301      	str	r3, [sp, #4]
   ba15e:	bd08      	pop	{r3, pc}
   ba160:	00030228 	.word	0x00030228

000ba164 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   ba164:	b508      	push	{r3, lr}
   ba166:	4b02      	ldr	r3, [pc, #8]	; (ba170 <hal_i2c_write+0xc>)
   ba168:	681b      	ldr	r3, [r3, #0]
   ba16a:	6a1b      	ldr	r3, [r3, #32]
   ba16c:	9301      	str	r3, [sp, #4]
   ba16e:	bd08      	pop	{r3, pc}
   ba170:	00030228 	.word	0x00030228

000ba174 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   ba174:	b508      	push	{r3, lr}
   ba176:	4b02      	ldr	r3, [pc, #8]	; (ba180 <hal_i2c_available+0xc>)
   ba178:	681b      	ldr	r3, [r3, #0]
   ba17a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   ba17c:	9301      	str	r3, [sp, #4]
   ba17e:	bd08      	pop	{r3, pc}
   ba180:	00030228 	.word	0x00030228

000ba184 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   ba184:	b508      	push	{r3, lr}
   ba186:	4b02      	ldr	r3, [pc, #8]	; (ba190 <hal_i2c_read+0xc>)
   ba188:	681b      	ldr	r3, [r3, #0]
   ba18a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   ba18c:	9301      	str	r3, [sp, #4]
   ba18e:	bd08      	pop	{r3, pc}
   ba190:	00030228 	.word	0x00030228

000ba194 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   ba194:	b508      	push	{r3, lr}
   ba196:	4b02      	ldr	r3, [pc, #8]	; (ba1a0 <hal_i2c_peek+0xc>)
   ba198:	681b      	ldr	r3, [r3, #0]
   ba19a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   ba19c:	9301      	str	r3, [sp, #4]
   ba19e:	bd08      	pop	{r3, pc}
   ba1a0:	00030228 	.word	0x00030228

000ba1a4 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   ba1a4:	b508      	push	{r3, lr}
   ba1a6:	4b02      	ldr	r3, [pc, #8]	; (ba1b0 <hal_i2c_flush+0xc>)
   ba1a8:	681b      	ldr	r3, [r3, #0]
   ba1aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   ba1ac:	9301      	str	r3, [sp, #4]
   ba1ae:	bd08      	pop	{r3, pc}
   ba1b0:	00030228 	.word	0x00030228

000ba1b4 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   ba1b4:	b508      	push	{r3, lr}
   ba1b6:	4b02      	ldr	r3, [pc, #8]	; (ba1c0 <hal_i2c_is_enabled+0xc>)
   ba1b8:	681b      	ldr	r3, [r3, #0]
   ba1ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   ba1bc:	9301      	str	r3, [sp, #4]
   ba1be:	bd08      	pop	{r3, pc}
   ba1c0:	00030228 	.word	0x00030228

000ba1c4 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   ba1c4:	b508      	push	{r3, lr}
   ba1c6:	4b02      	ldr	r3, [pc, #8]	; (ba1d0 <hal_i2c_init+0xc>)
   ba1c8:	681b      	ldr	r3, [r3, #0]
   ba1ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   ba1cc:	9301      	str	r3, [sp, #4]
   ba1ce:	bd08      	pop	{r3, pc}
   ba1d0:	00030228 	.word	0x00030228

000ba1d4 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   ba1d4:	b508      	push	{r3, lr}
   ba1d6:	4b02      	ldr	r3, [pc, #8]	; (ba1e0 <hal_spi_begin+0xc>)
   ba1d8:	681b      	ldr	r3, [r3, #0]
   ba1da:	681b      	ldr	r3, [r3, #0]
   ba1dc:	9301      	str	r3, [sp, #4]
   ba1de:	bd08      	pop	{r3, pc}
   ba1e0:	00030230 	.word	0x00030230

000ba1e4 <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   ba1e4:	b508      	push	{r3, lr}
   ba1e6:	4b02      	ldr	r3, [pc, #8]	; (ba1f0 <hal_spi_transfer+0xc>)
   ba1e8:	681b      	ldr	r3, [r3, #0]
   ba1ea:	695b      	ldr	r3, [r3, #20]
   ba1ec:	9301      	str	r3, [sp, #4]
   ba1ee:	bd08      	pop	{r3, pc}
   ba1f0:	00030230 	.word	0x00030230

000ba1f4 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   ba1f4:	b508      	push	{r3, lr}
   ba1f6:	4b02      	ldr	r3, [pc, #8]	; (ba200 <hal_spi_init+0xc>)
   ba1f8:	681b      	ldr	r3, [r3, #0]
   ba1fa:	69db      	ldr	r3, [r3, #28]
   ba1fc:	9301      	str	r3, [sp, #4]
   ba1fe:	bd08      	pop	{r3, pc}
   ba200:	00030230 	.word	0x00030230

000ba204 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   ba204:	b508      	push	{r3, lr}
   ba206:	4b02      	ldr	r3, [pc, #8]	; (ba210 <hal_spi_is_enabled+0xc>)
   ba208:	681b      	ldr	r3, [r3, #0]
   ba20a:	6a1b      	ldr	r3, [r3, #32]
   ba20c:	9301      	str	r3, [sp, #4]
   ba20e:	bd08      	pop	{r3, pc}
   ba210:	00030230 	.word	0x00030230

000ba214 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   ba214:	b508      	push	{r3, lr}
   ba216:	4b02      	ldr	r3, [pc, #8]	; (ba220 <hal_spi_info+0xc>)
   ba218:	681b      	ldr	r3, [r3, #0]
   ba21a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   ba21c:	9301      	str	r3, [sp, #4]
   ba21e:	bd08      	pop	{r3, pc}
   ba220:	00030230 	.word	0x00030230

000ba224 <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   ba224:	b508      	push	{r3, lr}
   ba226:	4b02      	ldr	r3, [pc, #8]	; (ba230 <hal_spi_set_settings+0xc>)
   ba228:	681b      	ldr	r3, [r3, #0]
   ba22a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   ba22c:	9301      	str	r3, [sp, #4]
   ba22e:	bd08      	pop	{r3, pc}
   ba230:	00030230 	.word	0x00030230

000ba234 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   ba234:	b508      	push	{r3, lr}
   ba236:	4b02      	ldr	r3, [pc, #8]	; (ba240 <hal_spi_acquire+0xc>)
   ba238:	681b      	ldr	r3, [r3, #0]
   ba23a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   ba23c:	9301      	str	r3, [sp, #4]
   ba23e:	bd08      	pop	{r3, pc}
   ba240:	00030230 	.word	0x00030230

000ba244 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   ba244:	b508      	push	{r3, lr}
   ba246:	4b02      	ldr	r3, [pc, #8]	; (ba250 <hal_spi_release+0xc>)
   ba248:	681b      	ldr	r3, [r3, #0]
   ba24a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   ba24c:	9301      	str	r3, [sp, #4]
   ba24e:	bd08      	pop	{r3, pc}
   ba250:	00030230 	.word	0x00030230

000ba254 <HAL_Tone_Start>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_peripherals)

DYNALIB_FN(0, hal_peripherals, HAL_Tone_Start, void(uint8_t, uint32_t, uint32_t))
   ba254:	b508      	push	{r3, lr}
   ba256:	4b02      	ldr	r3, [pc, #8]	; (ba260 <HAL_Tone_Start+0xc>)
   ba258:	681b      	ldr	r3, [r3, #0]
   ba25a:	681b      	ldr	r3, [r3, #0]
   ba25c:	9301      	str	r3, [sp, #4]
   ba25e:	bd08      	pop	{r3, pc}
   ba260:	00030224 	.word	0x00030224

000ba264 <HAL_Tone_Stop>:
DYNALIB_FN(1, hal_peripherals, HAL_Tone_Stop, void(uint8_t))
   ba264:	b508      	push	{r3, lr}
   ba266:	4b02      	ldr	r3, [pc, #8]	; (ba270 <HAL_Tone_Stop+0xc>)
   ba268:	681b      	ldr	r3, [r3, #0]
   ba26a:	685b      	ldr	r3, [r3, #4]
   ba26c:	9301      	str	r3, [sp, #4]
   ba26e:	bd08      	pop	{r3, pc}
   ba270:	00030224 	.word	0x00030224

000ba274 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   ba274:	b508      	push	{r3, lr}
   ba276:	4b02      	ldr	r3, [pc, #8]	; (ba280 <HAL_USB_USART_Init+0xc>)
   ba278:	681b      	ldr	r3, [r3, #0]
   ba27a:	681b      	ldr	r3, [r3, #0]
   ba27c:	9301      	str	r3, [sp, #4]
   ba27e:	bd08      	pop	{r3, pc}
   ba280:	0003024c 	.word	0x0003024c

000ba284 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   ba284:	b508      	push	{r3, lr}
   ba286:	4b02      	ldr	r3, [pc, #8]	; (ba290 <HAL_USB_USART_Begin+0xc>)
   ba288:	681b      	ldr	r3, [r3, #0]
   ba28a:	685b      	ldr	r3, [r3, #4]
   ba28c:	9301      	str	r3, [sp, #4]
   ba28e:	bd08      	pop	{r3, pc}
   ba290:	0003024c 	.word	0x0003024c

000ba294 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   ba294:	b508      	push	{r3, lr}
   ba296:	4b02      	ldr	r3, [pc, #8]	; (ba2a0 <HAL_USB_USART_Available_Data+0xc>)
   ba298:	681b      	ldr	r3, [r3, #0]
   ba29a:	691b      	ldr	r3, [r3, #16]
   ba29c:	9301      	str	r3, [sp, #4]
   ba29e:	bd08      	pop	{r3, pc}
   ba2a0:	0003024c 	.word	0x0003024c

000ba2a4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   ba2a4:	b508      	push	{r3, lr}
   ba2a6:	4b02      	ldr	r3, [pc, #8]	; (ba2b0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   ba2a8:	681b      	ldr	r3, [r3, #0]
   ba2aa:	695b      	ldr	r3, [r3, #20]
   ba2ac:	9301      	str	r3, [sp, #4]
   ba2ae:	bd08      	pop	{r3, pc}
   ba2b0:	0003024c 	.word	0x0003024c

000ba2b4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   ba2b4:	b508      	push	{r3, lr}
   ba2b6:	4b02      	ldr	r3, [pc, #8]	; (ba2c0 <HAL_USB_USART_Receive_Data+0xc>)
   ba2b8:	681b      	ldr	r3, [r3, #0]
   ba2ba:	699b      	ldr	r3, [r3, #24]
   ba2bc:	9301      	str	r3, [sp, #4]
   ba2be:	bd08      	pop	{r3, pc}
   ba2c0:	0003024c 	.word	0x0003024c

000ba2c4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   ba2c4:	b508      	push	{r3, lr}
   ba2c6:	4b02      	ldr	r3, [pc, #8]	; (ba2d0 <HAL_USB_USART_Send_Data+0xc>)
   ba2c8:	681b      	ldr	r3, [r3, #0]
   ba2ca:	69db      	ldr	r3, [r3, #28]
   ba2cc:	9301      	str	r3, [sp, #4]
   ba2ce:	bd08      	pop	{r3, pc}
   ba2d0:	0003024c 	.word	0x0003024c

000ba2d4 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   ba2d4:	b508      	push	{r3, lr}
   ba2d6:	4b02      	ldr	r3, [pc, #8]	; (ba2e0 <HAL_USB_USART_Flush_Data+0xc>)
   ba2d8:	681b      	ldr	r3, [r3, #0]
   ba2da:	6a1b      	ldr	r3, [r3, #32]
   ba2dc:	9301      	str	r3, [sp, #4]
   ba2de:	bd08      	pop	{r3, pc}
   ba2e0:	0003024c 	.word	0x0003024c

000ba2e4 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   ba2e4:	b508      	push	{r3, lr}
   ba2e6:	4b02      	ldr	r3, [pc, #8]	; (ba2f0 <panic_+0xc>)
   ba2e8:	681b      	ldr	r3, [r3, #0]
   ba2ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   ba2ec:	9301      	str	r3, [sp, #4]
   ba2ee:	bd08      	pop	{r3, pc}
   ba2f0:	00030260 	.word	0x00030260

000ba2f4 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   ba2f4:	b508      	push	{r3, lr}
   ba2f6:	4b02      	ldr	r3, [pc, #8]	; (ba300 <set_system_mode+0xc>)
   ba2f8:	681b      	ldr	r3, [r3, #0]
   ba2fa:	685b      	ldr	r3, [r3, #4]
   ba2fc:	9301      	str	r3, [sp, #4]
   ba2fe:	bd08      	pop	{r3, pc}
   ba300:	00030220 	.word	0x00030220

000ba304 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   ba304:	b508      	push	{r3, lr}
   ba306:	4b02      	ldr	r3, [pc, #8]	; (ba310 <system_delay_ms+0xc>)
   ba308:	681b      	ldr	r3, [r3, #0]
   ba30a:	695b      	ldr	r3, [r3, #20]
   ba30c:	9301      	str	r3, [sp, #4]
   ba30e:	bd08      	pop	{r3, pc}
   ba310:	00030220 	.word	0x00030220

000ba314 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   ba314:	b508      	push	{r3, lr}
   ba316:	4b03      	ldr	r3, [pc, #12]	; (ba324 <system_ctrl_set_app_request_handler+0x10>)
   ba318:	681b      	ldr	r3, [r3, #0]
   ba31a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   ba31e:	9301      	str	r3, [sp, #4]
   ba320:	bd08      	pop	{r3, pc}
   ba322:	0000      	.short	0x0000
   ba324:	00030220 	.word	0x00030220

000ba328 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   ba328:	b508      	push	{r3, lr}
   ba32a:	4b03      	ldr	r3, [pc, #12]	; (ba338 <system_ctrl_set_result+0x10>)
   ba32c:	681b      	ldr	r3, [r3, #0]
   ba32e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   ba332:	9301      	str	r3, [sp, #4]
   ba334:	bd08      	pop	{r3, pc}
   ba336:	0000      	.short	0x0000
   ba338:	00030220 	.word	0x00030220

000ba33c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   ba33c:	b508      	push	{r3, lr}
   ba33e:	4b02      	ldr	r3, [pc, #8]	; (ba348 <network_connect+0xc>)
   ba340:	681b      	ldr	r3, [r3, #0]
   ba342:	685b      	ldr	r3, [r3, #4]
   ba344:	9301      	str	r3, [sp, #4]
   ba346:	bd08      	pop	{r3, pc}
   ba348:	00030240 	.word	0x00030240

000ba34c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   ba34c:	b508      	push	{r3, lr}
   ba34e:	4b02      	ldr	r3, [pc, #8]	; (ba358 <network_connecting+0xc>)
   ba350:	681b      	ldr	r3, [r3, #0]
   ba352:	689b      	ldr	r3, [r3, #8]
   ba354:	9301      	str	r3, [sp, #4]
   ba356:	bd08      	pop	{r3, pc}
   ba358:	00030240 	.word	0x00030240

000ba35c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   ba35c:	b508      	push	{r3, lr}
   ba35e:	4b02      	ldr	r3, [pc, #8]	; (ba368 <network_disconnect+0xc>)
   ba360:	681b      	ldr	r3, [r3, #0]
   ba362:	68db      	ldr	r3, [r3, #12]
   ba364:	9301      	str	r3, [sp, #4]
   ba366:	bd08      	pop	{r3, pc}
   ba368:	00030240 	.word	0x00030240

000ba36c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   ba36c:	b508      	push	{r3, lr}
   ba36e:	4b02      	ldr	r3, [pc, #8]	; (ba378 <network_ready+0xc>)
   ba370:	681b      	ldr	r3, [r3, #0]
   ba372:	691b      	ldr	r3, [r3, #16]
   ba374:	9301      	str	r3, [sp, #4]
   ba376:	bd08      	pop	{r3, pc}
   ba378:	00030240 	.word	0x00030240

000ba37c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   ba37c:	b508      	push	{r3, lr}
   ba37e:	4b02      	ldr	r3, [pc, #8]	; (ba388 <network_on+0xc>)
   ba380:	681b      	ldr	r3, [r3, #0]
   ba382:	695b      	ldr	r3, [r3, #20]
   ba384:	9301      	str	r3, [sp, #4]
   ba386:	bd08      	pop	{r3, pc}
   ba388:	00030240 	.word	0x00030240

000ba38c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   ba38c:	b508      	push	{r3, lr}
   ba38e:	4b02      	ldr	r3, [pc, #8]	; (ba398 <network_off+0xc>)
   ba390:	681b      	ldr	r3, [r3, #0]
   ba392:	699b      	ldr	r3, [r3, #24]
   ba394:	9301      	str	r3, [sp, #4]
   ba396:	bd08      	pop	{r3, pc}
   ba398:	00030240 	.word	0x00030240

000ba39c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   ba39c:	b508      	push	{r3, lr}
   ba39e:	4b02      	ldr	r3, [pc, #8]	; (ba3a8 <network_listen+0xc>)
   ba3a0:	681b      	ldr	r3, [r3, #0]
   ba3a2:	69db      	ldr	r3, [r3, #28]
   ba3a4:	9301      	str	r3, [sp, #4]
   ba3a6:	bd08      	pop	{r3, pc}
   ba3a8:	00030240 	.word	0x00030240

000ba3ac <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   ba3ac:	b508      	push	{r3, lr}
   ba3ae:	4b02      	ldr	r3, [pc, #8]	; (ba3b8 <network_listening+0xc>)
   ba3b0:	681b      	ldr	r3, [r3, #0]
   ba3b2:	6a1b      	ldr	r3, [r3, #32]
   ba3b4:	9301      	str	r3, [sp, #4]
   ba3b6:	bd08      	pop	{r3, pc}
   ba3b8:	00030240 	.word	0x00030240

000ba3bc <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   ba3bc:	b508      	push	{r3, lr}
   ba3be:	4b02      	ldr	r3, [pc, #8]	; (ba3c8 <network_set_listen_timeout+0xc>)
   ba3c0:	681b      	ldr	r3, [r3, #0]
   ba3c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   ba3c4:	9301      	str	r3, [sp, #4]
   ba3c6:	bd08      	pop	{r3, pc}
   ba3c8:	00030240 	.word	0x00030240

000ba3cc <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   ba3cc:	b508      	push	{r3, lr}
   ba3ce:	4b02      	ldr	r3, [pc, #8]	; (ba3d8 <network_get_listen_timeout+0xc>)
   ba3d0:	681b      	ldr	r3, [r3, #0]
   ba3d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   ba3d4:	9301      	str	r3, [sp, #4]
   ba3d6:	bd08      	pop	{r3, pc}
   ba3d8:	00030240 	.word	0x00030240

000ba3dc <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   ba3dc:	b508      	push	{r3, lr}
   ba3de:	4b02      	ldr	r3, [pc, #8]	; (ba3e8 <network_is_on+0xc>)
   ba3e0:	681b      	ldr	r3, [r3, #0]
   ba3e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   ba3e4:	9301      	str	r3, [sp, #4]
   ba3e6:	bd08      	pop	{r3, pc}
   ba3e8:	00030240 	.word	0x00030240

000ba3ec <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   ba3ec:	b508      	push	{r3, lr}
   ba3ee:	4b02      	ldr	r3, [pc, #8]	; (ba3f8 <network_is_off+0xc>)
   ba3f0:	681b      	ldr	r3, [r3, #0]
   ba3f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   ba3f4:	9301      	str	r3, [sp, #4]
   ba3f6:	bd08      	pop	{r3, pc}
   ba3f8:	00030240 	.word	0x00030240

000ba3fc <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   ba3fc:	b508      	push	{r3, lr}
   ba3fe:	4b02      	ldr	r3, [pc, #8]	; (ba408 <spark_set_random_seed_from_cloud_handler+0xc>)
   ba400:	681b      	ldr	r3, [r3, #0]
   ba402:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   ba404:	9301      	str	r3, [sp, #4]
   ba406:	bd08      	pop	{r3, pc}
   ba408:	00030244 	.word	0x00030244

000ba40c <spark_cloud_disconnect>:
DYNALIB_FN(16, system_cloud, spark_publish_vitals, int(system_tick_t, void*))
DYNALIB_FN(17, system_cloud, spark_cloud_disconnect, int(const spark_cloud_disconnect_options*, void*))
   ba40c:	b508      	push	{r3, lr}
   ba40e:	4b02      	ldr	r3, [pc, #8]	; (ba418 <spark_cloud_disconnect+0xc>)
   ba410:	681b      	ldr	r3, [r3, #0]
   ba412:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   ba414:	9301      	str	r3, [sp, #4]
   ba416:	bd08      	pop	{r3, pc}
   ba418:	00030244 	.word	0x00030244

000ba41c <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   ba41c:	b508      	push	{r3, lr}
   ba41e:	4b02      	ldr	r3, [pc, #8]	; (ba428 <malloc+0xc>)
   ba420:	681b      	ldr	r3, [r3, #0]
   ba422:	681b      	ldr	r3, [r3, #0]
   ba424:	9301      	str	r3, [sp, #4]
   ba426:	bd08      	pop	{r3, pc}
   ba428:	0003021c 	.word	0x0003021c

000ba42c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   ba42c:	b508      	push	{r3, lr}
   ba42e:	4b02      	ldr	r3, [pc, #8]	; (ba438 <free+0xc>)
   ba430:	681b      	ldr	r3, [r3, #0]
   ba432:	685b      	ldr	r3, [r3, #4]
   ba434:	9301      	str	r3, [sp, #4]
   ba436:	bd08      	pop	{r3, pc}
   ba438:	0003021c 	.word	0x0003021c

000ba43c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   ba43c:	b508      	push	{r3, lr}
   ba43e:	4b02      	ldr	r3, [pc, #8]	; (ba448 <realloc+0xc>)
   ba440:	681b      	ldr	r3, [r3, #0]
   ba442:	689b      	ldr	r3, [r3, #8]
   ba444:	9301      	str	r3, [sp, #4]
   ba446:	bd08      	pop	{r3, pc}
   ba448:	0003021c 	.word	0x0003021c

000ba44c <snprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   ba44c:	b508      	push	{r3, lr}
   ba44e:	4b02      	ldr	r3, [pc, #8]	; (ba458 <snprintf+0xc>)
   ba450:	681b      	ldr	r3, [r3, #0]
   ba452:	69db      	ldr	r3, [r3, #28]
   ba454:	9301      	str	r3, [sp, #4]
   ba456:	bd08      	pop	{r3, pc}
   ba458:	0003021c 	.word	0x0003021c

000ba45c <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   ba45c:	b508      	push	{r3, lr}
   ba45e:	4b02      	ldr	r3, [pc, #8]	; (ba468 <vsnprintf+0xc>)
   ba460:	681b      	ldr	r3, [r3, #0]
   ba462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   ba464:	9301      	str	r3, [sp, #4]
   ba466:	bd08      	pop	{r3, pc}
   ba468:	0003021c 	.word	0x0003021c

000ba46c <_malloc_r>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   ba46c:	b508      	push	{r3, lr}
   ba46e:	4b02      	ldr	r3, [pc, #8]	; (ba478 <_malloc_r+0xc>)
   ba470:	681b      	ldr	r3, [r3, #0]
   ba472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   ba474:	9301      	str	r3, [sp, #4]
   ba476:	bd08      	pop	{r3, pc}
   ba478:	0003021c 	.word	0x0003021c

000ba47c <__assert_func>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   ba47c:	b508      	push	{r3, lr}
   ba47e:	4b02      	ldr	r3, [pc, #8]	; (ba488 <__assert_func+0xc>)
   ba480:	681b      	ldr	r3, [r3, #0]
   ba482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   ba484:	9301      	str	r3, [sp, #4]
   ba486:	bd08      	pop	{r3, pc}
   ba488:	0003021c 	.word	0x0003021c

000ba48c <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   ba48c:	b508      	push	{r3, lr}
   ba48e:	4b02      	ldr	r3, [pc, #8]	; (ba498 <newlib_impure_ptr_callback+0xc>)
   ba490:	681b      	ldr	r3, [r3, #0]
   ba492:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   ba494:	9301      	str	r3, [sp, #4]
   ba496:	bd08      	pop	{r3, pc}
   ba498:	0003021c 	.word	0x0003021c

000ba49c <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   ba49c:	2200      	movs	r2, #0
   ba49e:	6840      	ldr	r0, [r0, #4]
   ba4a0:	4611      	mov	r1, r2
   ba4a2:	f7ff bf83 	b.w	ba3ac <network_listening>

000ba4a6 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   ba4a6:	2200      	movs	r2, #0
   ba4a8:	6840      	ldr	r0, [r0, #4]
   ba4aa:	4611      	mov	r1, r2
   ba4ac:	f7ff bf8e 	b.w	ba3cc <network_get_listen_timeout>

000ba4b0 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   ba4b0:	6840      	ldr	r0, [r0, #4]
   ba4b2:	2200      	movs	r2, #0
   ba4b4:	f7ff bf82 	b.w	ba3bc <network_set_listen_timeout>

000ba4b8 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   ba4b8:	6840      	ldr	r0, [r0, #4]
   ba4ba:	2200      	movs	r2, #0
   ba4bc:	f081 0101 	eor.w	r1, r1, #1
   ba4c0:	f7ff bf6c 	b.w	ba39c <network_listen>

000ba4c4 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   ba4c4:	2300      	movs	r3, #0
   ba4c6:	6840      	ldr	r0, [r0, #4]
   ba4c8:	461a      	mov	r2, r3
   ba4ca:	4619      	mov	r1, r3
   ba4cc:	f7ff bf5e 	b.w	ba38c <network_off>

000ba4d0 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   ba4d0:	2300      	movs	r3, #0
   ba4d2:	6840      	ldr	r0, [r0, #4]
   ba4d4:	461a      	mov	r2, r3
   ba4d6:	4619      	mov	r1, r3
   ba4d8:	f7ff bf50 	b.w	ba37c <network_on>

000ba4dc <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   ba4dc:	2200      	movs	r2, #0
   ba4de:	6840      	ldr	r0, [r0, #4]
   ba4e0:	4611      	mov	r1, r2
   ba4e2:	f7ff bf43 	b.w	ba36c <network_ready>

000ba4e6 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   ba4e6:	2200      	movs	r2, #0
   ba4e8:	6840      	ldr	r0, [r0, #4]
   ba4ea:	4611      	mov	r1, r2
   ba4ec:	f7ff bf2e 	b.w	ba34c <network_connecting>

000ba4f0 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   ba4f0:	6840      	ldr	r0, [r0, #4]
   ba4f2:	2200      	movs	r2, #0
   ba4f4:	2102      	movs	r1, #2
   ba4f6:	f7ff bf31 	b.w	ba35c <network_disconnect>

000ba4fa <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   ba4fa:	2300      	movs	r3, #0
   ba4fc:	6840      	ldr	r0, [r0, #4]
   ba4fe:	461a      	mov	r2, r3
   ba500:	f7ff bf1c 	b.w	ba33c <network_connect>

000ba504 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   ba504:	4b02      	ldr	r3, [pc, #8]	; (ba510 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   ba506:	2203      	movs	r2, #3
   ba508:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   ba50a:	4a02      	ldr	r2, [pc, #8]	; (ba514 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   ba50c:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   ba50e:	4770      	bx	lr
   ba510:	2003e6bc 	.word	0x2003e6bc
   ba514:	000bd35c 	.word	0x000bd35c

000ba518 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   ba518:	2100      	movs	r1, #0
   ba51a:	f7ff be93 	b.w	ba244 <hal_spi_release>

000ba51e <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   ba51e:	2100      	movs	r1, #0
   ba520:	f7ff be88 	b.w	ba234 <hal_spi_acquire>

000ba524 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   ba524:	b510      	push	{r4, lr}
   ba526:	4604      	mov	r4, r0
   ba528:	4608      	mov	r0, r1
{
    _spi = spi;
   ba52a:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   ba52c:	f7ff fe62 	bl	ba1f4 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   ba530:	2300      	movs	r3, #0
   ba532:	6063      	str	r3, [r4, #4]
}
   ba534:	4620      	mov	r0, r4
   ba536:	bd10      	pop	{r4, pc}

000ba538 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   ba538:	b513      	push	{r0, r1, r4, lr}
   ba53a:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   ba53c:	7800      	ldrb	r0, [r0, #0]
   ba53e:	f7ff ffee 	bl	ba51e <_ZN8SPIClass4lockEv.isra.0>
   ba542:	b958      	cbnz	r0, ba55c <_ZN8SPIClass5beginEv+0x24>
   ba544:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   ba546:	9001      	str	r0, [sp, #4]
   ba548:	f64f 71ff 	movw	r1, #65535	; 0xffff
   ba54c:	f7ff fe42 	bl	ba1d4 <hal_spi_begin>
        unlock();
   ba550:	9801      	ldr	r0, [sp, #4]
    }
}
   ba552:	b002      	add	sp, #8
   ba554:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   ba558:	f7ff bfde 	b.w	ba518 <_ZN8SPIClass6unlockEv.isra.0>
   ba55c:	b002      	add	sp, #8
   ba55e:	bd10      	pop	{r4, pc}

000ba560 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   ba560:	7800      	ldrb	r0, [r0, #0]
   ba562:	f7ff bfd9 	b.w	ba518 <_ZN8SPIClass6unlockEv.isra.0>
	...

000ba568 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   ba568:	0840      	lsrs	r0, r0, #1
{
   ba56a:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   ba56c:	6018      	str	r0, [r3, #0]
   ba56e:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   ba570:	6818      	ldr	r0, [r3, #0]
   ba572:	4288      	cmp	r0, r1
   ba574:	b2e5      	uxtb	r5, r4
   ba576:	d906      	bls.n	ba586 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   ba578:	3401      	adds	r4, #1
   ba57a:	2c08      	cmp	r4, #8
   ba57c:	d002      	beq.n	ba584 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   ba57e:	0840      	lsrs	r0, r0, #1
   ba580:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   ba582:	e7f5      	b.n	ba570 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   ba584:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   ba586:	4b02      	ldr	r3, [pc, #8]	; (ba590 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   ba588:	5d5b      	ldrb	r3, [r3, r5]
   ba58a:	7013      	strb	r3, [r2, #0]
}
   ba58c:	bd30      	pop	{r4, r5, pc}
   ba58e:	bf00      	nop
   ba590:	000bd390 	.word	0x000bd390

000ba594 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   ba594:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   ba598:	4606      	mov	r6, r0
   ba59a:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   ba59c:	7800      	ldrb	r0, [r0, #0]
{
   ba59e:	460c      	mov	r4, r1
    CHECK(lock());
   ba5a0:	f7ff ffbd 	bl	ba51e <_ZN8SPIClass4lockEv.isra.0>
   ba5a4:	2800      	cmp	r0, #0
   ba5a6:	db1b      	blt.n	ba5e0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   ba5a8:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   ba5aa:	2214      	movs	r2, #20
   ba5ac:	2100      	movs	r1, #0
   ba5ae:	a809      	add	r0, sp, #36	; 0x24
   ba5b0:	f000 ff86 	bl	bb4c0 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   ba5b4:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   ba5b6:	2200      	movs	r2, #0
   ba5b8:	a909      	add	r1, sp, #36	; 0x24
   ba5ba:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   ba5bc:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   ba5c0:	f7ff fe28 	bl	ba214 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   ba5c4:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   ba5c8:	b113      	cbz	r3, ba5d0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   ba5ca:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   ba5ce:	b155      	cbz	r5, ba5e6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   ba5d0:	2700      	movs	r7, #0
   ba5d2:	46b9      	mov	r9, r7
   ba5d4:	46b8      	mov	r8, r7
   ba5d6:	2501      	movs	r5, #1
    if (default_ && other.default_)
   ba5d8:	7923      	ldrb	r3, [r4, #4]
   ba5da:	b15d      	cbz	r5, ba5f4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   ba5dc:	b1c3      	cbz	r3, ba610 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   ba5de:	2000      	movs	r0, #0
}
   ba5e0:	b00f      	add	sp, #60	; 0x3c
   ba5e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   ba5e6:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   ba5ea:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   ba5ee:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   ba5f2:	e7f1      	b.n	ba5d8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   ba5f4:	2b00      	cmp	r3, #0
   ba5f6:	d135      	bne.n	ba664 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   ba5f8:	68a3      	ldr	r3, [r4, #8]
   ba5fa:	4543      	cmp	r3, r8
   ba5fc:	d108      	bne.n	ba610 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   ba5fe:	f88d 9020 	strb.w	r9, [sp, #32]
   ba602:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   ba606:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   ba60a:	89a3      	ldrh	r3, [r4, #12]
   ba60c:	429a      	cmp	r2, r3
   ba60e:	d0e6      	beq.n	ba5de <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   ba610:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   ba612:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   ba614:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   ba618:	980a      	ldr	r0, [sp, #40]	; 0x28
   ba61a:	ab04      	add	r3, sp, #16
   ba61c:	f10d 020f 	add.w	r2, sp, #15
   ba620:	f7ff ffa2 	bl	ba568 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   ba624:	7921      	ldrb	r1, [r4, #4]
   ba626:	b985      	cbnz	r5, ba64a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   ba628:	b989      	cbnz	r1, ba64e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   ba62a:	68a3      	ldr	r3, [r4, #8]
   ba62c:	4543      	cmp	r3, r8
   ba62e:	d30e      	bcc.n	ba64e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   ba630:	f88d 9020 	strb.w	r9, [sp, #32]
   ba634:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   ba638:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   ba63c:	89a3      	ldrh	r3, [r4, #12]
   ba63e:	429a      	cmp	r2, r3
   ba640:	d105      	bne.n	ba64e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   ba642:	9b04      	ldr	r3, [sp, #16]
   ba644:	4543      	cmp	r3, r8
   ba646:	d102      	bne.n	ba64e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   ba648:	e7c9      	b.n	ba5de <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   ba64a:	2900      	cmp	r1, #0
   ba64c:	d1f9      	bne.n	ba642 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   ba64e:	2300      	movs	r3, #0
   ba650:	9301      	str	r3, [sp, #4]
   ba652:	7b63      	ldrb	r3, [r4, #13]
   ba654:	9300      	str	r3, [sp, #0]
   ba656:	f89d 200f 	ldrb.w	r2, [sp, #15]
   ba65a:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   ba65c:	7830      	ldrb	r0, [r6, #0]
   ba65e:	f7ff fde1 	bl	ba224 <hal_spi_set_settings>
   ba662:	e7bc      	b.n	ba5de <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   ba664:	e9cd 5500 	strd	r5, r5, [sp]
   ba668:	462b      	mov	r3, r5
   ba66a:	462a      	mov	r2, r5
   ba66c:	2101      	movs	r1, #1
   ba66e:	e7f5      	b.n	ba65c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000ba670 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   ba670:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   ba672:	7800      	ldrb	r0, [r0, #0]
   ba674:	f7ff fdb6 	bl	ba1e4 <hal_spi_transfer>
}
   ba678:	b2c0      	uxtb	r0, r0
   ba67a:	bd08      	pop	{r3, pc}

000ba67c <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   ba67c:	4b05      	ldr	r3, [pc, #20]	; (ba694 <_GLOBAL__sub_I_System+0x18>)
   ba67e:	2202      	movs	r2, #2
   ba680:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   ba682:	4b05      	ldr	r3, [pc, #20]	; (ba698 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   ba684:	4a05      	ldr	r2, [pc, #20]	; (ba69c <_GLOBAL__sub_I_System+0x20>)
   ba686:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   ba688:	2000      	movs	r0, #0
   ba68a:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   ba68e:	f7ff be31 	b.w	ba2f4 <set_system_mode>
   ba692:	bf00      	nop
   ba694:	2003e6d0 	.word	0x2003e6d0
   ba698:	2003e6c4 	.word	0x2003e6c4
   ba69c:	ffff0000 	.word	0xffff0000

000ba6a0 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   ba6a0:	b510      	push	{r4, lr}
   ba6a2:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   ba6a4:	f7fa f98a 	bl	b49bc <strlen>
   ba6a8:	3801      	subs	r0, #1
   ba6aa:	1823      	adds	r3, r4, r0
   ba6ac:	4620      	mov	r0, r4
	while(i<j){
   ba6ae:	4283      	cmp	r3, r0
   ba6b0:	d906      	bls.n	ba6c0 <_Z11str_reversePc+0x20>
		c = *i;
   ba6b2:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   ba6b4:	7819      	ldrb	r1, [r3, #0]
   ba6b6:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   ba6ba:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   ba6be:	e7f6      	b.n	ba6ae <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   ba6c0:	bd10      	pop	{r4, pc}

000ba6c2 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   ba6c2:	b570      	push	{r4, r5, r6, lr}
   ba6c4:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   ba6c6:	1e91      	subs	r1, r2, #2
   ba6c8:	2922      	cmp	r1, #34	; 0x22
   ba6ca:	d81d      	bhi.n	ba708 <ultoa+0x46>
		return NULL;
	}
	char* ptr=buffer;
   ba6cc:	4625      	mov	r5, r4

	div_t result;
	while(a){
   ba6ce:	b930      	cbnz	r0, ba6de <ultoa+0x1c>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   ba6d0:	4423      	add	r3, r4
            *ptr++ = '0';
   ba6d2:	2230      	movs	r2, #48	; 0x30
        while (ptr < buffer+pad)
   ba6d4:	429d      	cmp	r5, r3
   ba6d6:	d210      	bcs.n	ba6fa <ultoa+0x38>
            *ptr++ = '0';
   ba6d8:	f805 2b01 	strb.w	r2, [r5], #1
        while (ptr < buffer+pad)
   ba6dc:	e7fa      	b.n	ba6d4 <ultoa+0x12>
            result.quot = a/radix;
   ba6de:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   ba6e2:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   ba6e6:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
   ba6e8:	2809      	cmp	r0, #9
                *ptr += '0';
   ba6ea:	bf94      	ite	ls
   ba6ec:	3130      	addls	r1, #48	; 0x30
                *ptr += 'a'-10;
   ba6ee:	3157      	addhi	r1, #87	; 0x57
   ba6f0:	b2c9      	uxtb	r1, r1
   ba6f2:	f805 1b01 	strb.w	r1, [r5], #1
            a = result.quot;
   ba6f6:	4630      	mov	r0, r6
	while(a){
   ba6f8:	e7e9      	b.n	ba6ce <ultoa+0xc>

	*ptr = '\0';
   ba6fa:	2300      	movs	r3, #0
	str_reverse(buffer);
   ba6fc:	4620      	mov	r0, r4
	*ptr = '\0';
   ba6fe:	702b      	strb	r3, [r5, #0]
	str_reverse(buffer);
   ba700:	f7ff ffce 	bl	ba6a0 <_Z11str_reversePc>
	return buffer;
   ba704:	4620      	mov	r0, r4
}
   ba706:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   ba708:	2000      	movs	r0, #0
   ba70a:	e7fc      	b.n	ba706 <ultoa+0x44>

000ba70c <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   ba70c:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   ba70e:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   ba710:	460c      	mov	r4, r1
   ba712:	4615      	mov	r5, r2
	if(a<0){
   ba714:	da0e      	bge.n	ba734 <itoa+0x28>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   ba716:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
		*buffer = '-';
   ba71a:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   ba71e:	bf14      	ite	ne
   ba720:	4258      	negne	r0, r3
   ba722:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   ba724:	2301      	movs	r3, #1
		*buffer = '-';
   ba726:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
   ba728:	462a      	mov	r2, r5
   ba72a:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
   ba72c:	f7ff ffc9 	bl	ba6c2 <ultoa>
	}
	return buffer;
}
   ba730:	4620      	mov	r0, r4
   ba732:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
   ba734:	2301      	movs	r3, #1
   ba736:	e7f9      	b.n	ba72c <itoa+0x20>

000ba738 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   ba738:	b510      	push	{r4, lr}
   ba73a:	4604      	mov	r4, r0
{
	free(buffer);
   ba73c:	6800      	ldr	r0, [r0, #0]
   ba73e:	f7ff fe75 	bl	ba42c <free>
}
   ba742:	4620      	mov	r0, r4
   ba744:	bd10      	pop	{r4, pc}

000ba746 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   ba746:	b510      	push	{r4, lr}
   ba748:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   ba74a:	6800      	ldr	r0, [r0, #0]
   ba74c:	b108      	cbz	r0, ba752 <_ZN6String10invalidateEv+0xc>
   ba74e:	f7ff fe6d 	bl	ba42c <free>
	buffer = NULL;
   ba752:	2300      	movs	r3, #0
	capacity = len = 0;
   ba754:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   ba758:	6023      	str	r3, [r4, #0]
}
   ba75a:	bd10      	pop	{r4, pc}

000ba75c <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   ba75c:	b538      	push	{r3, r4, r5, lr}
   ba75e:	4604      	mov	r4, r0
   ba760:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   ba762:	6800      	ldr	r0, [r0, #0]
   ba764:	3101      	adds	r1, #1
   ba766:	f7ff fe69 	bl	ba43c <realloc>
	if (newbuffer) {
   ba76a:	b110      	cbz	r0, ba772 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   ba76c:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   ba770:	2001      	movs	r0, #1
	}
	return 0;
}
   ba772:	bd38      	pop	{r3, r4, r5, pc}

000ba774 <_ZN6String7reserveEj>:
{
   ba774:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   ba776:	6803      	ldr	r3, [r0, #0]
{
   ba778:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   ba77a:	b123      	cbz	r3, ba786 <_ZN6String7reserveEj+0x12>
   ba77c:	6843      	ldr	r3, [r0, #4]
   ba77e:	428b      	cmp	r3, r1
   ba780:	d301      	bcc.n	ba786 <_ZN6String7reserveEj+0x12>
   ba782:	2001      	movs	r0, #1
}
   ba784:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   ba786:	4620      	mov	r0, r4
   ba788:	f7ff ffe8 	bl	ba75c <_ZN6String12changeBufferEj>
   ba78c:	2800      	cmp	r0, #0
   ba78e:	d0f9      	beq.n	ba784 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   ba790:	68a3      	ldr	r3, [r4, #8]
   ba792:	2b00      	cmp	r3, #0
   ba794:	d1f5      	bne.n	ba782 <_ZN6String7reserveEj+0xe>
   ba796:	6822      	ldr	r2, [r4, #0]
   ba798:	7013      	strb	r3, [r2, #0]
   ba79a:	e7f2      	b.n	ba782 <_ZN6String7reserveEj+0xe>

000ba79c <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   ba79c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   ba79e:	460d      	mov	r5, r1
	if (!reserve(length)) {
   ba7a0:	4611      	mov	r1, r2
   ba7a2:	9201      	str	r2, [sp, #4]
{
   ba7a4:	4604      	mov	r4, r0
	if (!reserve(length)) {
   ba7a6:	f7ff ffe5 	bl	ba774 <_ZN6String7reserveEj>
   ba7aa:	9a01      	ldr	r2, [sp, #4]
   ba7ac:	b928      	cbnz	r0, ba7ba <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   ba7ae:	4620      	mov	r0, r4
   ba7b0:	f7ff ffc9 	bl	ba746 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   ba7b4:	4620      	mov	r0, r4
   ba7b6:	b003      	add	sp, #12
   ba7b8:	bd30      	pop	{r4, r5, pc}
	len = length;
   ba7ba:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   ba7bc:	4629      	mov	r1, r5
   ba7be:	6820      	ldr	r0, [r4, #0]
   ba7c0:	f000 fe70 	bl	bb4a4 <memcpy>
	buffer[len] = 0;
   ba7c4:	6822      	ldr	r2, [r4, #0]
   ba7c6:	68a3      	ldr	r3, [r4, #8]
   ba7c8:	2100      	movs	r1, #0
   ba7ca:	54d1      	strb	r1, [r2, r3]
	return *this;
   ba7cc:	e7f2      	b.n	ba7b4 <_ZN6String4copyEPKcj+0x18>

000ba7ce <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   ba7ce:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   ba7d0:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   ba7d2:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   ba7d6:	4604      	mov	r4, r0
	len = 0;
   ba7d8:	6083      	str	r3, [r0, #8]
	flags = 0;
   ba7da:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   ba7dc:	b141      	cbz	r1, ba7f0 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   ba7de:	4608      	mov	r0, r1
   ba7e0:	9101      	str	r1, [sp, #4]
   ba7e2:	f7fa f8eb 	bl	b49bc <strlen>
   ba7e6:	9901      	ldr	r1, [sp, #4]
   ba7e8:	4602      	mov	r2, r0
   ba7ea:	4620      	mov	r0, r4
   ba7ec:	f7ff ffd6 	bl	ba79c <_ZN6String4copyEPKcj>
}
   ba7f0:	4620      	mov	r0, r4
   ba7f2:	b002      	add	sp, #8
   ba7f4:	bd10      	pop	{r4, pc}

000ba7f6 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   ba7f6:	4288      	cmp	r0, r1
{
   ba7f8:	b510      	push	{r4, lr}
   ba7fa:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   ba7fc:	d005      	beq.n	ba80a <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   ba7fe:	680b      	ldr	r3, [r1, #0]
   ba800:	b12b      	cbz	r3, ba80e <_ZN6StringaSERKS_+0x18>
   ba802:	688a      	ldr	r2, [r1, #8]
   ba804:	4619      	mov	r1, r3
   ba806:	f7ff ffc9 	bl	ba79c <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   ba80a:	4620      	mov	r0, r4
   ba80c:	bd10      	pop	{r4, pc}
	else invalidate();
   ba80e:	f7ff ff9a 	bl	ba746 <_ZN6String10invalidateEv>
   ba812:	e7fa      	b.n	ba80a <_ZN6StringaSERKS_+0x14>

000ba814 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   ba814:	b510      	push	{r4, lr}
	buffer = NULL;
   ba816:	2300      	movs	r3, #0
String::String(const String &value)
   ba818:	4604      	mov	r4, r0
	capacity = 0;
   ba81a:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   ba81e:	6083      	str	r3, [r0, #8]
	flags = 0;
   ba820:	7303      	strb	r3, [r0, #12]
	*this = value;
   ba822:	f7ff ffe8 	bl	ba7f6 <_ZN6StringaSERKS_>
}
   ba826:	4620      	mov	r0, r4
   ba828:	bd10      	pop	{r4, pc}

000ba82a <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   ba82a:	b513      	push	{r0, r1, r4, lr}
   ba82c:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   ba82e:	b159      	cbz	r1, ba848 <_ZN6StringaSEPKc+0x1e>
   ba830:	4608      	mov	r0, r1
   ba832:	9101      	str	r1, [sp, #4]
   ba834:	f7fa f8c2 	bl	b49bc <strlen>
   ba838:	9901      	ldr	r1, [sp, #4]
   ba83a:	4602      	mov	r2, r0
   ba83c:	4620      	mov	r0, r4
   ba83e:	f7ff ffad 	bl	ba79c <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   ba842:	4620      	mov	r0, r4
   ba844:	b002      	add	sp, #8
   ba846:	bd10      	pop	{r4, pc}
	else invalidate();
   ba848:	f7ff ff7d 	bl	ba746 <_ZN6String10invalidateEv>
   ba84c:	e7f9      	b.n	ba842 <_ZN6StringaSEPKc+0x18>

000ba84e <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
   ba84e:	b510      	push	{r4, lr}
   ba850:	4604      	mov	r4, r0
   ba852:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   ba854:	2300      	movs	r3, #0
	capacity = 0;
   ba856:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   ba85a:	60a3      	str	r3, [r4, #8]
	flags = 0;
   ba85c:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
   ba85e:	4608      	mov	r0, r1
	itoa(value, buf, base);
   ba860:	a901      	add	r1, sp, #4
   ba862:	f7ff ff53 	bl	ba70c <itoa>
	*this = buf;
   ba866:	a901      	add	r1, sp, #4
   ba868:	4620      	mov	r0, r4
   ba86a:	f7ff ffde 	bl	ba82a <_ZN6StringaSEPKc>
}
   ba86e:	4620      	mov	r0, r4
   ba870:	b00a      	add	sp, #40	; 0x28
   ba872:	bd10      	pop	{r4, pc}

000ba874 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   ba874:	b570      	push	{r4, r5, r6, lr}
   ba876:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   ba878:	460e      	mov	r6, r1
   ba87a:	b909      	cbnz	r1, ba880 <_ZN6String6concatEPKcj+0xc>
   ba87c:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   ba87e:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   ba880:	b16a      	cbz	r2, ba89e <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   ba882:	6884      	ldr	r4, [r0, #8]
   ba884:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   ba886:	4621      	mov	r1, r4
   ba888:	f7ff ff74 	bl	ba774 <_ZN6String7reserveEj>
   ba88c:	2800      	cmp	r0, #0
   ba88e:	d0f5      	beq.n	ba87c <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   ba890:	6828      	ldr	r0, [r5, #0]
   ba892:	68ab      	ldr	r3, [r5, #8]
   ba894:	4631      	mov	r1, r6
   ba896:	4418      	add	r0, r3
   ba898:	f000 fe58 	bl	bb54c <strcpy>
	len = newlen;
   ba89c:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   ba89e:	2001      	movs	r0, #1
   ba8a0:	e7ed      	b.n	ba87e <_ZN6String6concatEPKcj+0xa>

000ba8a2 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   ba8a2:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   ba8a4:	688a      	ldr	r2, [r1, #8]
   ba8a6:	6809      	ldr	r1, [r1, #0]
{
   ba8a8:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   ba8aa:	f7ff ffe3 	bl	ba874 <_ZN6String6concatEPKcj>
   ba8ae:	b910      	cbnz	r0, ba8b6 <_ZplRK15StringSumHelperRK6String+0x14>
   ba8b0:	4620      	mov	r0, r4
   ba8b2:	f7ff ff48 	bl	ba746 <_ZN6String10invalidateEv>
	return a;
}
   ba8b6:	4620      	mov	r0, r4
   ba8b8:	bd10      	pop	{r4, pc}

000ba8ba <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   ba8ba:	b513      	push	{r0, r1, r4, lr}
   ba8bc:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   ba8be:	b929      	cbnz	r1, ba8cc <_ZplRK15StringSumHelperPKc+0x12>
   ba8c0:	4620      	mov	r0, r4
   ba8c2:	f7ff ff40 	bl	ba746 <_ZN6String10invalidateEv>
	return a;
}
   ba8c6:	4620      	mov	r0, r4
   ba8c8:	b002      	add	sp, #8
   ba8ca:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   ba8cc:	4608      	mov	r0, r1
   ba8ce:	9101      	str	r1, [sp, #4]
   ba8d0:	f7fa f874 	bl	b49bc <strlen>
   ba8d4:	9901      	ldr	r1, [sp, #4]
   ba8d6:	4602      	mov	r2, r0
   ba8d8:	4620      	mov	r0, r4
   ba8da:	f7ff ffcb 	bl	ba874 <_ZN6String6concatEPKcj>
   ba8de:	2800      	cmp	r0, #0
   ba8e0:	d0ee      	beq.n	ba8c0 <_ZplRK15StringSumHelperPKc+0x6>
   ba8e2:	e7f0      	b.n	ba8c6 <_ZplRK15StringSumHelperPKc+0xc>

000ba8e4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   ba8e4:	4802      	ldr	r0, [pc, #8]	; (ba8f0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   ba8e6:	2300      	movs	r3, #0
   ba8e8:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   ba8ea:	f7ff bbcb 	b.w	ba084 <os_mutex_recursive_create>
   ba8ee:	bf00      	nop
   ba8f0:	2003e6d4 	.word	0x2003e6d4

000ba8f4 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   ba8f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   ba8f6:	4606      	mov	r6, r0
   ba8f8:	460d      	mov	r5, r1
  size_t n = 0;
   ba8fa:	188f      	adds	r7, r1, r2
   ba8fc:	2400      	movs	r4, #0
  while (size--) {
   ba8fe:	42bd      	cmp	r5, r7
   ba900:	d00c      	beq.n	ba91c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   ba902:	6833      	ldr	r3, [r6, #0]
   ba904:	f815 1b01 	ldrb.w	r1, [r5], #1
   ba908:	689b      	ldr	r3, [r3, #8]
   ba90a:	4630      	mov	r0, r6
   ba90c:	4798      	blx	r3
     if (chunk>=0)
   ba90e:	1e03      	subs	r3, r0, #0
   ba910:	db01      	blt.n	ba916 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   ba912:	441c      	add	r4, r3
  while (size--) {
   ba914:	e7f3      	b.n	ba8fe <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   ba916:	2c00      	cmp	r4, #0
   ba918:	bf08      	it	eq
   ba91a:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   ba91c:	4620      	mov	r0, r4
   ba91e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000ba920 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   ba920:	b513      	push	{r0, r1, r4, lr}
   ba922:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   ba924:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   ba926:	b159      	cbz	r1, ba940 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   ba928:	9101      	str	r1, [sp, #4]
   ba92a:	f7fa f847 	bl	b49bc <strlen>
   ba92e:	6823      	ldr	r3, [r4, #0]
   ba930:	9901      	ldr	r1, [sp, #4]
   ba932:	68db      	ldr	r3, [r3, #12]
   ba934:	4602      	mov	r2, r0
   ba936:	4620      	mov	r0, r4
    }
   ba938:	b002      	add	sp, #8
   ba93a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   ba93e:	4718      	bx	r3
    }
   ba940:	b002      	add	sp, #8
   ba942:	bd10      	pop	{r4, pc}

000ba944 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   ba944:	b508      	push	{r3, lr}
  return write(str);
   ba946:	f7ff ffeb 	bl	ba920 <_ZN5Print5writeEPKc>
}
   ba94a:	bd08      	pop	{r3, pc}

000ba94c <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   ba94c:	6803      	ldr	r3, [r0, #0]
   ba94e:	689b      	ldr	r3, [r3, #8]
   ba950:	4718      	bx	r3

000ba952 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   ba952:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   ba954:	210d      	movs	r1, #13
{
   ba956:	4605      	mov	r5, r0
  size_t n = print('\r');
   ba958:	f7ff fff8 	bl	ba94c <_ZN5Print5printEc>
  n += print('\n');
   ba95c:	210a      	movs	r1, #10
  size_t n = print('\r');
   ba95e:	4604      	mov	r4, r0
  n += print('\n');
   ba960:	4628      	mov	r0, r5
   ba962:	f7ff fff3 	bl	ba94c <_ZN5Print5printEc>
  return n;
}
   ba966:	4420      	add	r0, r4
   ba968:	bd38      	pop	{r3, r4, r5, pc}

000ba96a <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   ba96a:	b538      	push	{r3, r4, r5, lr}
   ba96c:	4605      	mov	r5, r0
  return write(str);
   ba96e:	f7ff ffd7 	bl	ba920 <_ZN5Print5writeEPKc>
   ba972:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   ba974:	4628      	mov	r0, r5
   ba976:	f7ff ffec 	bl	ba952 <_ZN5Print7printlnEv>
  return n;
}
   ba97a:	4420      	add	r0, r4
   ba97c:	bd38      	pop	{r3, r4, r5, pc}

000ba97e <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   ba97e:	b530      	push	{r4, r5, lr}
   ba980:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   ba982:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   ba984:	2a01      	cmp	r2, #1
  *str = '\0';
   ba986:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   ba98a:	bf98      	it	ls
   ba98c:	220a      	movls	r2, #10
   ba98e:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   ba990:	460d      	mov	r5, r1
   ba992:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   ba996:	fb01 5312 	mls	r3, r1, r2, r5
   ba99a:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   ba99e:	2b09      	cmp	r3, #9
   ba9a0:	bf94      	ite	ls
   ba9a2:	3330      	addls	r3, #48	; 0x30
   ba9a4:	3337      	addhi	r3, #55	; 0x37
   ba9a6:	b2db      	uxtb	r3, r3
  } while(n);
   ba9a8:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   ba9aa:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   ba9ae:	d9ef      	bls.n	ba990 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   ba9b0:	4621      	mov	r1, r4
   ba9b2:	f7ff ffb5 	bl	ba920 <_ZN5Print5writeEPKc>
}
   ba9b6:	b00b      	add	sp, #44	; 0x2c
   ba9b8:	bd30      	pop	{r4, r5, pc}

000ba9ba <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   ba9ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   ba9be:	b086      	sub	sp, #24
   ba9c0:	af00      	add	r7, sp, #0
   ba9c2:	4605      	mov	r5, r0
   ba9c4:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   ba9c6:	1d38      	adds	r0, r7, #4
   ba9c8:	2114      	movs	r1, #20
{
   ba9ca:	4614      	mov	r4, r2
    va_copy(args2, args);
   ba9cc:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   ba9ce:	f7ff fd45 	bl	ba45c <vsnprintf>

    if (n<bufsize)
   ba9d2:	2813      	cmp	r0, #19
   ba9d4:	d80e      	bhi.n	ba9f4 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   ba9d6:	1d39      	adds	r1, r7, #4
   ba9d8:	4628      	mov	r0, r5
   ba9da:	f7ff ffa1 	bl	ba920 <_ZN5Print5writeEPKc>
   ba9de:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   ba9e0:	b11e      	cbz	r6, ba9ea <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   ba9e2:	4628      	mov	r0, r5
   ba9e4:	f7ff ffb5 	bl	ba952 <_ZN5Print7printlnEv>
   ba9e8:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   ba9ea:	4620      	mov	r0, r4
   ba9ec:	3718      	adds	r7, #24
   ba9ee:	46bd      	mov	sp, r7
   ba9f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   ba9f4:	f100 0308 	add.w	r3, r0, #8
   ba9f8:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   ba9fc:	46e8      	mov	r8, sp
        char bigger[n+1];
   ba9fe:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   baa02:	4622      	mov	r2, r4
   baa04:	1c41      	adds	r1, r0, #1
   baa06:	683b      	ldr	r3, [r7, #0]
   baa08:	4668      	mov	r0, sp
   baa0a:	f7ff fd27 	bl	ba45c <vsnprintf>
  return write(str);
   baa0e:	4669      	mov	r1, sp
   baa10:	4628      	mov	r0, r5
   baa12:	f7ff ff85 	bl	ba920 <_ZN5Print5writeEPKc>
   baa16:	4604      	mov	r4, r0
   baa18:	46c5      	mov	sp, r8
   baa1a:	e7e1      	b.n	ba9e0 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000baa1c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   baa1c:	4b01      	ldr	r3, [pc, #4]	; (baa24 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   baa1e:	4a02      	ldr	r2, [pc, #8]	; (baa28 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   baa20:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   baa22:	4770      	bx	lr
   baa24:	2003e6d8 	.word	0x2003e6d8
   baa28:	000bd398 	.word	0x000bd398

000baa2c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   baa2c:	4b02      	ldr	r3, [pc, #8]	; (baa38 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   baa2e:	681a      	ldr	r2, [r3, #0]
   baa30:	4b02      	ldr	r3, [pc, #8]	; (baa3c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   baa32:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   baa34:	4770      	bx	lr
   baa36:	bf00      	nop
   baa38:	2003c6c4 	.word	0x2003c6c4
   baa3c:	2003e6dc 	.word	0x2003e6dc

000baa40 <_Z3mapiiiii>:
    hal_adc_set_sample_time(ADC_SampleTime);
}

int map(int value, int fromStart, int fromEnd, int toStart, int toEnd)
{
    if (fromEnd == fromStart) {
   baa40:	428a      	cmp	r2, r1
{
   baa42:	b510      	push	{r4, lr}
    if (fromEnd == fromStart) {
   baa44:	d007      	beq.n	baa56 <_Z3mapiiiii+0x16>
        return value;
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
   baa46:	1a44      	subs	r4, r0, r1
   baa48:	9802      	ldr	r0, [sp, #8]
   baa4a:	1ac0      	subs	r0, r0, r3
   baa4c:	4344      	muls	r4, r0
   baa4e:	1a50      	subs	r0, r2, r1
   baa50:	fb94 f0f0 	sdiv	r0, r4, r0
   baa54:	4418      	add	r0, r3
}
   baa56:	bd10      	pop	{r4, pc}

000baa58 <_Z3mapddddd>:

double map(double value, double fromStart, double fromEnd, double toStart, double toEnd)
{
   baa58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   baa5c:	ec55 4b11 	vmov	r4, r5, d1
   baa60:	ec57 6b12 	vmov	r6, r7, d2
   baa64:	b085      	sub	sp, #20
    if (fromEnd == fromStart) {
   baa66:	ee11 2a10 	vmov	r2, s2
   baa6a:	ee12 0a10 	vmov	r0, s4
   baa6e:	462b      	mov	r3, r5
   baa70:	4639      	mov	r1, r7
{
   baa72:	ed8d 0b02 	vstr	d0, [sp, #8]
   baa76:	ed8d 4b00 	vstr	d4, [sp]
   baa7a:	ec5b ab13 	vmov	sl, fp, d3
    if (fromEnd == fromStart) {
   baa7e:	f7f9 fef3 	bl	b4868 <__aeabi_dcmpeq>
   baa82:	ed9d 0b02 	vldr	d0, [sp, #8]
   baa86:	bb38      	cbnz	r0, baad8 <_Z3mapddddd+0x80>
        return value;
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
   baa88:	ec51 0b10 	vmov	r0, r1, d0
   baa8c:	4622      	mov	r2, r4
   baa8e:	462b      	mov	r3, r5
   baa90:	f7f9 faca 	bl	b4028 <__aeabi_dsub>
   baa94:	4652      	mov	r2, sl
   baa96:	4680      	mov	r8, r0
   baa98:	4689      	mov	r9, r1
   baa9a:	465b      	mov	r3, fp
   baa9c:	e9dd 0100 	ldrd	r0, r1, [sp]
   baaa0:	f7f9 fac2 	bl	b4028 <__aeabi_dsub>
   baaa4:	4602      	mov	r2, r0
   baaa6:	460b      	mov	r3, r1
   baaa8:	4640      	mov	r0, r8
   baaaa:	4649      	mov	r1, r9
   baaac:	f7f9 fc74 	bl	b4398 <__aeabi_dmul>
   baab0:	4622      	mov	r2, r4
   baab2:	4680      	mov	r8, r0
   baab4:	4689      	mov	r9, r1
   baab6:	462b      	mov	r3, r5
   baab8:	4630      	mov	r0, r6
   baaba:	4639      	mov	r1, r7
   baabc:	f7f9 fab4 	bl	b4028 <__aeabi_dsub>
   baac0:	4602      	mov	r2, r0
   baac2:	460b      	mov	r3, r1
   baac4:	4640      	mov	r0, r8
   baac6:	4649      	mov	r1, r9
   baac8:	f7f9 fd90 	bl	b45ec <__aeabi_ddiv>
   baacc:	4652      	mov	r2, sl
   baace:	465b      	mov	r3, fp
   baad0:	f7f9 faac 	bl	b402c <__adddf3>
   baad4:	ec41 0b10 	vmov	d0, r0, r1
}
   baad8:	b005      	add	sp, #20
   baada:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000baade <delay>:

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   baade:	2100      	movs	r1, #0
   baae0:	f7ff bc10 	b.w	ba304 <system_delay_ms>

000baae4 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   baae4:	4b01      	ldr	r3, [pc, #4]	; (baaec <_GLOBAL__sub_I_RGB+0x8>)
   baae6:	2200      	movs	r2, #0
   baae8:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   baaea:	4770      	bx	lr
   baaec:	2003e6e0 	.word	0x2003e6e0

000baaf0 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   baaf0:	4b01      	ldr	r3, [pc, #4]	; (baaf8 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   baaf2:	6018      	str	r0, [r3, #0]
    }, nullptr);
   baaf4:	4770      	bx	lr
   baaf6:	bf00      	nop
   baaf8:	2003c6c8 	.word	0x2003c6c8

000baafc <serialEventRun>:
{
   baafc:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   baafe:	4b0b      	ldr	r3, [pc, #44]	; (bab2c <serialEventRun+0x30>)
   bab00:	b143      	cbz	r3, bab14 <serialEventRun+0x18>
   bab02:	f000 f981 	bl	bae08 <_Z16_fetch_usbserialv>
   bab06:	6803      	ldr	r3, [r0, #0]
   bab08:	691b      	ldr	r3, [r3, #16]
   bab0a:	4798      	blx	r3
   bab0c:	2800      	cmp	r0, #0
   bab0e:	dd01      	ble.n	bab14 <serialEventRun+0x18>
        serialEvent();
   bab10:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   bab14:	4b06      	ldr	r3, [pc, #24]	; (bab30 <serialEventRun+0x34>)
   bab16:	b143      	cbz	r3, bab2a <serialEventRun+0x2e>
   bab18:	f000 fc3a 	bl	bb390 <_Z22__fetch_global_Serial1v>
   bab1c:	6803      	ldr	r3, [r0, #0]
   bab1e:	691b      	ldr	r3, [r3, #16]
   bab20:	4798      	blx	r3
   bab22:	2800      	cmp	r0, #0
   bab24:	dd01      	ble.n	bab2a <serialEventRun+0x2e>
        serialEvent1();
   bab26:	f3af 8000 	nop.w
}
   bab2a:	bd08      	pop	{r3, pc}
	...

000bab34 <_post_loop>:
{
   bab34:	b508      	push	{r3, lr}
	serialEventRun();
   bab36:	f7ff ffe1 	bl	baafc <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   bab3a:	f7ff fa83 	bl	ba044 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   bab3e:	4b01      	ldr	r3, [pc, #4]	; (bab44 <_post_loop+0x10>)
   bab40:	6018      	str	r0, [r3, #0]
}
   bab42:	bd08      	pop	{r3, pc}
   bab44:	2003e738 	.word	0x2003e738

000bab48 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   bab48:	4805      	ldr	r0, [pc, #20]	; (bab60 <_Z33system_initialize_user_backup_ramv+0x18>)
   bab4a:	4a06      	ldr	r2, [pc, #24]	; (bab64 <_Z33system_initialize_user_backup_ramv+0x1c>)
   bab4c:	4906      	ldr	r1, [pc, #24]	; (bab68 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   bab4e:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   bab50:	1a12      	subs	r2, r2, r0
   bab52:	f000 fca7 	bl	bb4a4 <memcpy>
    __backup_sram_signature = signature;
   bab56:	4b05      	ldr	r3, [pc, #20]	; (bab6c <_Z33system_initialize_user_backup_ramv+0x24>)
   bab58:	4a05      	ldr	r2, [pc, #20]	; (bab70 <_Z33system_initialize_user_backup_ramv+0x28>)
   bab5a:	601a      	str	r2, [r3, #0]
}
   bab5c:	bd08      	pop	{r3, pc}
   bab5e:	bf00      	nop
   bab60:	2003f400 	.word	0x2003f400
   bab64:	2003f404 	.word	0x2003f404
   bab68:	000bd6e4 	.word	0x000bd6e4
   bab6c:	2003f400 	.word	0x2003f400
   bab70:	9a271c1e 	.word	0x9a271c1e

000bab74 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   bab74:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   bab76:	2300      	movs	r3, #0
   bab78:	9300      	str	r3, [sp, #0]
   bab7a:	461a      	mov	r2, r3
   bab7c:	f06f 0177 	mvn.w	r1, #119	; 0x77
   bab80:	f7ff fbd2 	bl	ba328 <system_ctrl_set_result>
}
   bab84:	b003      	add	sp, #12
   bab86:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000bab8c <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   bab8c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   bab8e:	8843      	ldrh	r3, [r0, #2]
   bab90:	2b0a      	cmp	r3, #10
   bab92:	d008      	beq.n	baba6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   bab94:	2b50      	cmp	r3, #80	; 0x50
   bab96:	d10b      	bne.n	babb0 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   bab98:	4b09      	ldr	r3, [pc, #36]	; (babc0 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   bab9a:	681b      	ldr	r3, [r3, #0]
   bab9c:	b14b      	cbz	r3, babb2 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   bab9e:	b003      	add	sp, #12
   baba0:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   baba4:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   baba6:	f7ff ffe5 	bl	bab74 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   babaa:	b003      	add	sp, #12
   babac:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   babb0:	2300      	movs	r3, #0
   babb2:	9300      	str	r3, [sp, #0]
   babb4:	461a      	mov	r2, r3
   babb6:	f06f 0177 	mvn.w	r1, #119	; 0x77
   babba:	f7ff fbb5 	bl	ba328 <system_ctrl_set_result>
}
   babbe:	e7f4      	b.n	babaa <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   babc0:	2003e6f4 	.word	0x2003e6f4

000babc4 <module_user_init_hook>:
{
   babc4:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   babc6:	4812      	ldr	r0, [pc, #72]	; (bac10 <module_user_init_hook+0x4c>)
   babc8:	2100      	movs	r1, #0
   babca:	f7ff fc5f 	bl	ba48c <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   babce:	4b11      	ldr	r3, [pc, #68]	; (bac14 <module_user_init_hook+0x50>)
   babd0:	681a      	ldr	r2, [r3, #0]
   babd2:	4b11      	ldr	r3, [pc, #68]	; (bac18 <module_user_init_hook+0x54>)
   babd4:	429a      	cmp	r2, r3
   babd6:	4b11      	ldr	r3, [pc, #68]	; (bac1c <module_user_init_hook+0x58>)
   babd8:	bf0c      	ite	eq
   babda:	2201      	moveq	r2, #1
   babdc:	2200      	movne	r2, #0
   babde:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   babe0:	d001      	beq.n	babe6 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   babe2:	f7ff ffb1 	bl	bab48 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   babe6:	f7ff fa1d 	bl	ba024 <HAL_RNG_GetRandomNumber>
   babea:	4604      	mov	r4, r0
    srand(seed);
   babec:	f000 fc80 	bl	bb4f0 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   babf0:	4b0b      	ldr	r3, [pc, #44]	; (bac20 <module_user_init_hook+0x5c>)
   babf2:	b113      	cbz	r3, babfa <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   babf4:	4620      	mov	r0, r4
   babf6:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   babfa:	2100      	movs	r1, #0
   babfc:	4808      	ldr	r0, [pc, #32]	; (bac20 <module_user_init_hook+0x5c>)
   babfe:	f7ff fbfd 	bl	ba3fc <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   bac02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   bac06:	4807      	ldr	r0, [pc, #28]	; (bac24 <module_user_init_hook+0x60>)
   bac08:	2100      	movs	r1, #0
   bac0a:	f7ff bb83 	b.w	ba314 <system_ctrl_set_app_request_handler>
   bac0e:	bf00      	nop
   bac10:	000baaf1 	.word	0x000baaf1
   bac14:	2003f400 	.word	0x2003f400
   bac18:	9a271c1e 	.word	0x9a271c1e
   bac1c:	2003e6f0 	.word	0x2003e6f0
   bac20:	00000000 	.word	0x00000000
   bac24:	000bab8d 	.word	0x000bab8d

000bac28 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>:

int CloudClass::publishVitals(system_tick_t period_s_) {
    return spark_publish_vitals(period_s_, nullptr);
}

void CloudClass::disconnect(const CloudDisconnectOptions& options) {
   bac28:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    opts.size = sizeof(opts);
   bac2a:	230c      	movs	r3, #12
   bac2c:	f8ad 3004 	strh.w	r3, [sp, #4]
    opts.flags = flags_;
   bac30:	6803      	ldr	r3, [r0, #0]
   bac32:	f88d 3006 	strb.w	r3, [sp, #6]
    opts.graceful = graceful_;
   bac36:	7a03      	ldrb	r3, [r0, #8]
   bac38:	f88d 3007 	strb.w	r3, [sp, #7]
    opts.timeout = timeout_;
   bac3c:	6843      	ldr	r3, [r0, #4]
   bac3e:	9302      	str	r3, [sp, #8]
    spark_cloud_disconnect_options opts = {};
   bac40:	2100      	movs	r1, #0
    opts.clear_session = clearSession_;
   bac42:	7a43      	ldrb	r3, [r0, #9]
    spark_cloud_disconnect_options opts = {};
   bac44:	f8ad 100d 	strh.w	r1, [sp, #13]
    const auto opts = options.toSystemOptions();
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   bac48:	a801      	add	r0, sp, #4
    spark_cloud_disconnect_options opts = {};
   bac4a:	f88d 100f 	strb.w	r1, [sp, #15]
    opts.clear_session = clearSession_;
   bac4e:	f88d 300c 	strb.w	r3, [sp, #12]
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   bac52:	f7ff fbdb 	bl	ba40c <spark_cloud_disconnect>
}
   bac56:	b005      	add	sp, #20
   bac58:	f85d fb04 	ldr.w	pc, [sp], #4

000bac5c <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   bac5c:	4770      	bx	lr

000bac5e <_ZN9IPAddressD0Ev>:
   bac5e:	b510      	push	{r4, lr}
   bac60:	2118      	movs	r1, #24
   bac62:	4604      	mov	r4, r0
   bac64:	f7f9 feef 	bl	b4a46 <_ZdlPvj>
   bac68:	4620      	mov	r0, r4
   bac6a:	bd10      	pop	{r4, pc}

000bac6c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   bac6c:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   bac6e:	7d03      	ldrb	r3, [r0, #20]
   bac70:	2b06      	cmp	r3, #6
{
   bac72:	b08d      	sub	sp, #52	; 0x34
   bac74:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   bac76:	f100 0704 	add.w	r7, r0, #4
   bac7a:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   bac7e:	d012      	beq.n	baca6 <_ZNK9IPAddress7printToER5Print+0x3a>
   bac80:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   bac84:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   bac88:	220a      	movs	r2, #10
   bac8a:	4630      	mov	r0, r6
   bac8c:	f7ff fe77 	bl	ba97e <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   bac90:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   bac92:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   bac94:	d019      	beq.n	bacca <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   bac96:	2c00      	cmp	r4, #0
   bac98:	d0f4      	beq.n	bac84 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   bac9a:	212e      	movs	r1, #46	; 0x2e
   bac9c:	4630      	mov	r0, r6
   bac9e:	f7ff fe55 	bl	ba94c <_ZN5Print5printEc>
   baca2:	4404      	add	r4, r0
   baca4:	e7ee      	b.n	bac84 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   baca6:	232f      	movs	r3, #47	; 0x2f
   baca8:	466a      	mov	r2, sp
   bacaa:	4639      	mov	r1, r7
   bacac:	200a      	movs	r0, #10
		buf[0] = 0;
   bacae:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   bacb2:	f7ff f9ef 	bl	ba094 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   bacb6:	4668      	mov	r0, sp
   bacb8:	f7f9 fe80 	bl	b49bc <strlen>
   bacbc:	6833      	ldr	r3, [r6, #0]
   bacbe:	4602      	mov	r2, r0
   bacc0:	68db      	ldr	r3, [r3, #12]
   bacc2:	4669      	mov	r1, sp
   bacc4:	4630      	mov	r0, r6
   bacc6:	4798      	blx	r3
   bacc8:	4604      	mov	r4, r0
    }
    return n;
}
   bacca:	4620      	mov	r0, r4
   baccc:	b00d      	add	sp, #52	; 0x34
   bacce:	bdf0      	pop	{r4, r5, r6, r7, pc}

000bacd0 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   bacd0:	b510      	push	{r4, lr}
   bacd2:	4b05      	ldr	r3, [pc, #20]	; (bace8 <_ZN9IPAddressC1Ev+0x18>)
   bacd4:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   bacd6:	2211      	movs	r2, #17
   bacd8:	f840 3b04 	str.w	r3, [r0], #4
   bacdc:	2100      	movs	r1, #0
   bacde:	f000 fbef 	bl	bb4c0 <memset>
}
   bace2:	4620      	mov	r0, r4
   bace4:	bd10      	pop	{r4, pc}
   bace6:	bf00      	nop
   bace8:	000bd3c0 	.word	0x000bd3c0

000bacec <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   bacec:	4603      	mov	r3, r0
   bacee:	4a07      	ldr	r2, [pc, #28]	; (bad0c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   bacf0:	b510      	push	{r4, lr}
   bacf2:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   bacf6:	f101 0210 	add.w	r2, r1, #16
   bacfa:	f851 4b04 	ldr.w	r4, [r1], #4
   bacfe:	f843 4b04 	str.w	r4, [r3], #4
   bad02:	4291      	cmp	r1, r2
   bad04:	d1f9      	bne.n	bacfa <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   bad06:	780a      	ldrb	r2, [r1, #0]
   bad08:	701a      	strb	r2, [r3, #0]
}
   bad0a:	bd10      	pop	{r4, pc}
   bad0c:	000bd3c0 	.word	0x000bd3c0

000bad10 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   bad10:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   bad12:	f89d 4008 	ldrb.w	r4, [sp, #8]
   bad16:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   bad1a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   bad1e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   bad22:	2304      	movs	r3, #4
   bad24:	6041      	str	r1, [r0, #4]
   bad26:	7503      	strb	r3, [r0, #20]
}
   bad28:	bd10      	pop	{r4, pc}
	...

000bad2c <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   bad2c:	b507      	push	{r0, r1, r2, lr}
   bad2e:	4b06      	ldr	r3, [pc, #24]	; (bad48 <_ZN9IPAddressC1EPKh+0x1c>)
   bad30:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   bad32:	78cb      	ldrb	r3, [r1, #3]
   bad34:	9300      	str	r3, [sp, #0]
   bad36:	788b      	ldrb	r3, [r1, #2]
   bad38:	784a      	ldrb	r2, [r1, #1]
   bad3a:	7809      	ldrb	r1, [r1, #0]
   bad3c:	f7ff ffe8 	bl	bad10 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   bad40:	b003      	add	sp, #12
   bad42:	f85d fb04 	ldr.w	pc, [sp], #4
   bad46:	bf00      	nop
   bad48:	000bd3c0 	.word	0x000bd3c0

000bad4c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   bad4c:	7441      	strb	r1, [r0, #17]
}
   bad4e:	4770      	bx	lr

000bad50 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   bad50:	4770      	bx	lr

000bad52 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   bad52:	4770      	bx	lr

000bad54 <_ZN9USBSerial4readEv>:
{
   bad54:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   bad56:	2100      	movs	r1, #0
   bad58:	7c00      	ldrb	r0, [r0, #16]
   bad5a:	f7ff faab 	bl	ba2b4 <HAL_USB_USART_Receive_Data>
}
   bad5e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bad62:	bd08      	pop	{r3, pc}

000bad64 <_ZN9USBSerial4peekEv>:
{
   bad64:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   bad66:	2101      	movs	r1, #1
   bad68:	7c00      	ldrb	r0, [r0, #16]
   bad6a:	f7ff faa3 	bl	ba2b4 <HAL_USB_USART_Receive_Data>
}
   bad6e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bad72:	bd08      	pop	{r3, pc}

000bad74 <_ZN9USBSerial17availableForWriteEv>:
{
   bad74:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   bad76:	7c00      	ldrb	r0, [r0, #16]
   bad78:	f7ff fa94 	bl	ba2a4 <HAL_USB_USART_Available_Data_For_Write>
}
   bad7c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bad80:	bd08      	pop	{r3, pc}

000bad82 <_ZN9USBSerial9availableEv>:
{
   bad82:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   bad84:	7c00      	ldrb	r0, [r0, #16]
   bad86:	f7ff fa85 	bl	ba294 <HAL_USB_USART_Available_Data>
}
   bad8a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bad8e:	bd08      	pop	{r3, pc}

000bad90 <_ZN9USBSerial5writeEh>:
{
   bad90:	b513      	push	{r0, r1, r4, lr}
   bad92:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   bad94:	7c00      	ldrb	r0, [r0, #16]
{
   bad96:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   bad98:	f7ff fa84 	bl	ba2a4 <HAL_USB_USART_Available_Data_For_Write>
   bad9c:	2800      	cmp	r0, #0
   bad9e:	9901      	ldr	r1, [sp, #4]
   bada0:	dc01      	bgt.n	bada6 <_ZN9USBSerial5writeEh+0x16>
   bada2:	7c60      	ldrb	r0, [r4, #17]
   bada4:	b120      	cbz	r0, badb0 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   bada6:	7c20      	ldrb	r0, [r4, #16]
   bada8:	f7ff fa8c 	bl	ba2c4 <HAL_USB_USART_Send_Data>
   badac:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   badb0:	b002      	add	sp, #8
   badb2:	bd10      	pop	{r4, pc}

000badb4 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   badb4:	7c00      	ldrb	r0, [r0, #16]
   badb6:	f7ff ba8d 	b.w	ba2d4 <HAL_USB_USART_Flush_Data>

000badba <_ZN9USBSerialD0Ev>:
   badba:	b510      	push	{r4, lr}
   badbc:	2114      	movs	r1, #20
   badbe:	4604      	mov	r4, r0
   badc0:	f7f9 fe41 	bl	b4a46 <_ZdlPvj>
   badc4:	4620      	mov	r0, r4
   badc6:	bd10      	pop	{r4, pc}

000badc8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   badc8:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   badca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   badce:	4604      	mov	r4, r0
   badd0:	4608      	mov	r0, r1
   badd2:	2100      	movs	r1, #0
   badd4:	e9c4 1301 	strd	r1, r3, [r4, #4]
   badd8:	4b04      	ldr	r3, [pc, #16]	; (badec <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   badda:	6023      	str	r3, [r4, #0]
  _blocking = true;
   baddc:	2301      	movs	r3, #1
  _serial = serial;
   badde:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   bade0:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   bade2:	4611      	mov	r1, r2
   bade4:	f7ff fa46 	bl	ba274 <HAL_USB_USART_Init>
}
   bade8:	4620      	mov	r0, r4
   badea:	bd10      	pop	{r4, pc}
   badec:	000bd3d4 	.word	0x000bd3d4

000badf0 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   badf0:	7c00      	ldrb	r0, [r0, #16]
   badf2:	2200      	movs	r2, #0
   badf4:	f7ff ba46 	b.w	ba284 <HAL_USB_USART_Begin>

000badf8 <_Z19acquireSerialBufferv>:
{
   badf8:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   badfa:	2214      	movs	r2, #20
{
   badfc:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   badfe:	2100      	movs	r1, #0
   bae00:	f000 fb5e 	bl	bb4c0 <memset>
}
   bae04:	4620      	mov	r0, r4
   bae06:	bd10      	pop	{r4, pc}

000bae08 <_Z16_fetch_usbserialv>:
{
   bae08:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   bae0a:	4c0f      	ldr	r4, [pc, #60]	; (bae48 <_Z16_fetch_usbserialv+0x40>)
{
   bae0c:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   bae0e:	a803      	add	r0, sp, #12
   bae10:	f7ff fff2 	bl	badf8 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   bae14:	7821      	ldrb	r1, [r4, #0]
   bae16:	f3bf 8f5b 	dmb	ish
   bae1a:	f011 0101 	ands.w	r1, r1, #1
   bae1e:	d10f      	bne.n	bae40 <_Z16_fetch_usbserialv+0x38>
   bae20:	4620      	mov	r0, r4
   bae22:	9101      	str	r1, [sp, #4]
   bae24:	f7f9 fe1e 	bl	b4a64 <__cxa_guard_acquire>
   bae28:	9901      	ldr	r1, [sp, #4]
   bae2a:	b148      	cbz	r0, bae40 <_Z16_fetch_usbserialv+0x38>
   bae2c:	aa03      	add	r2, sp, #12
   bae2e:	4807      	ldr	r0, [pc, #28]	; (bae4c <_Z16_fetch_usbserialv+0x44>)
   bae30:	f7ff ffca 	bl	badc8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   bae34:	4620      	mov	r0, r4
   bae36:	f7f9 fe1a 	bl	b4a6e <__cxa_guard_release>
   bae3a:	4805      	ldr	r0, [pc, #20]	; (bae50 <_Z16_fetch_usbserialv+0x48>)
   bae3c:	f000 fb24 	bl	bb488 <atexit>
	return _usbserial;
}
   bae40:	4802      	ldr	r0, [pc, #8]	; (bae4c <_Z16_fetch_usbserialv+0x44>)
   bae42:	b008      	add	sp, #32
   bae44:	bd10      	pop	{r4, pc}
   bae46:	bf00      	nop
   bae48:	2003e6f8 	.word	0x2003e6f8
   bae4c:	2003e6fc 	.word	0x2003e6fc
   bae50:	000bad51 	.word	0x000bad51

000bae54 <_Z12noInterruptsv>:
 * Return         : None.
 *******************************************************************************/
void noInterrupts(void)
{
  //Only disable the interrupts that are exposed to the user
  hal_interrupt_disable_all();
   bae54:	f7ff b8c6 	b.w	b9fe4 <hal_interrupt_disable_all>

000bae58 <_Z10interruptsv>:
 * Return         : None.
 *******************************************************************************/
void interrupts(void)
{
  //Only enable the interrupts that are exposed to the user
  hal_interrupt_enable_all();
   bae58:	f7ff b8bc 	b.w	b9fd4 <hal_interrupt_enable_all>

000bae5c <tone>:

#include "spark_wiring_tone.h"
#include "tone_hal.h"

void tone(uint8_t pin, unsigned int frequency, unsigned long duration)
{
   bae5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (pinAvailable(pin) && hal_pin_validate_function(pin, PF_TIMER)==PF_TIMER) {
   bae5e:	b287      	uxth	r7, r0
{
   bae60:	4604      	mov	r4, r0
    if (pinAvailable(pin) && hal_pin_validate_function(pin, PF_TIMER)==PF_TIMER) {
   bae62:	4638      	mov	r0, r7
{
   bae64:	460d      	mov	r5, r1
   bae66:	4616      	mov	r6, r2
    if (pinAvailable(pin) && hal_pin_validate_function(pin, PF_TIMER)==PF_TIMER) {
   bae68:	f000 f9c6 	bl	bb1f8 <pinAvailable>
   bae6c:	b160      	cbz	r0, bae88 <tone+0x2c>
   bae6e:	2102      	movs	r1, #2
   bae70:	4638      	mov	r0, r7
   bae72:	f7ff f887 	bl	b9f84 <hal_pin_validate_function>
   bae76:	2802      	cmp	r0, #2
   bae78:	d106      	bne.n	bae88 <tone+0x2c>
        HAL_Tone_Start(pin, frequency, duration);
   bae7a:	4632      	mov	r2, r6
   bae7c:	4629      	mov	r1, r5
   bae7e:	4620      	mov	r0, r4
    }
}
   bae80:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        HAL_Tone_Start(pin, frequency, duration);
   bae84:	f7ff b9e6 	b.w	ba254 <HAL_Tone_Start>
}
   bae88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bae8a <noTone>:

void noTone(uint8_t pin)
{
   bae8a:	b538      	push	{r3, r4, r5, lr}
    if (pinAvailable(pin) && hal_pin_validate_function(pin, PF_TIMER)==PF_TIMER) {
   bae8c:	b285      	uxth	r5, r0
{
   bae8e:	4604      	mov	r4, r0
    if (pinAvailable(pin) && hal_pin_validate_function(pin, PF_TIMER)==PF_TIMER) {
   bae90:	4628      	mov	r0, r5
   bae92:	f000 f9b1 	bl	bb1f8 <pinAvailable>
   bae96:	b150      	cbz	r0, baeae <noTone+0x24>
   bae98:	2102      	movs	r1, #2
   bae9a:	4628      	mov	r0, r5
   bae9c:	f7ff f872 	bl	b9f84 <hal_pin_validate_function>
   baea0:	2802      	cmp	r0, #2
   baea2:	d104      	bne.n	baeae <noTone+0x24>
        HAL_Tone_Stop(pin);
   baea4:	4620      	mov	r0, r4
    }
}
   baea6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        HAL_Tone_Stop(pin);
   baeaa:	f7ff b9db 	b.w	ba264 <HAL_Tone_Stop>
}
   baeae:	bd38      	pop	{r3, r4, r5, pc}

000baeb0 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   baeb0:	4770      	bx	lr

000baeb2 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   baeb2:	7441      	strb	r1, [r0, #17]
}
   baeb4:	4770      	bx	lr

000baeb6 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   baeb6:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   baeb8:	7c00      	ldrb	r0, [r0, #16]
   baeba:	f7ff f923 	bl	ba104 <hal_usart_available_data_for_write>
}
   baebe:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   baec2:	bd08      	pop	{r3, pc}

000baec4 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   baec4:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   baec6:	7c00      	ldrb	r0, [r0, #16]
   baec8:	f7ff f8f4 	bl	ba0b4 <hal_usart_available>
}
   baecc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   baed0:	bd08      	pop	{r3, pc}

000baed2 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   baed2:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   baed4:	7c00      	ldrb	r0, [r0, #16]
   baed6:	f7ff f8fd 	bl	ba0d4 <hal_usart_peek>
}
   baeda:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   baede:	bd08      	pop	{r3, pc}

000baee0 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   baee0:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   baee2:	7c00      	ldrb	r0, [r0, #16]
   baee4:	f7ff f8ee 	bl	ba0c4 <hal_usart_read>
}
   baee8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   baeec:	bd08      	pop	{r3, pc}

000baeee <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   baeee:	7c00      	ldrb	r0, [r0, #16]
   baef0:	f7ff b8f8 	b.w	ba0e4 <hal_usart_flush>

000baef4 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   baef4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   baef6:	7c45      	ldrb	r5, [r0, #17]
{
   baef8:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   baefa:	b12d      	cbz	r5, baf08 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   baefc:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   baefe:	b003      	add	sp, #12
   baf00:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   baf04:	f7ff b8ce 	b.w	ba0a4 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   baf08:	7c00      	ldrb	r0, [r0, #16]
   baf0a:	9101      	str	r1, [sp, #4]
   baf0c:	f7ff f8fa 	bl	ba104 <hal_usart_available_data_for_write>
   baf10:	2800      	cmp	r0, #0
   baf12:	9901      	ldr	r1, [sp, #4]
   baf14:	dcf2      	bgt.n	baefc <_ZN11USARTSerial5writeEh+0x8>
}
   baf16:	4628      	mov	r0, r5
   baf18:	b003      	add	sp, #12
   baf1a:	bd30      	pop	{r4, r5, pc}

000baf1c <_ZN11USARTSerialD0Ev>:
   baf1c:	b510      	push	{r4, lr}
   baf1e:	2114      	movs	r1, #20
   baf20:	4604      	mov	r4, r0
   baf22:	f7f9 fd90 	bl	b4a46 <_ZdlPvj>
   baf26:	4620      	mov	r0, r4
   baf28:	bd10      	pop	{r4, pc}
	...

000baf2c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   baf2c:	b510      	push	{r4, lr}
   baf2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   baf32:	4604      	mov	r4, r0
   baf34:	4608      	mov	r0, r1
   baf36:	4611      	mov	r1, r2
   baf38:	2200      	movs	r2, #0
   baf3a:	e9c4 2301 	strd	r2, r3, [r4, #4]
   baf3e:	4b04      	ldr	r3, [pc, #16]	; (baf50 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   baf40:	6023      	str	r3, [r4, #0]
  _blocking = true;
   baf42:	2301      	movs	r3, #1
  _serial = serial;
   baf44:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   baf46:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   baf48:	f7ff f8e4 	bl	ba114 <hal_usart_init_ex>
}
   baf4c:	4620      	mov	r0, r4
   baf4e:	bd10      	pop	{r4, pc}
   baf50:	000bd404 	.word	0x000bd404

000baf54 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   baf54:	4770      	bx	lr

000baf56 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   baf56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   baf58:	4606      	mov	r6, r0
   baf5a:	4615      	mov	r5, r2
   baf5c:	460c      	mov	r4, r1
   baf5e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   baf60:	42bc      	cmp	r4, r7
   baf62:	d006      	beq.n	baf72 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   baf64:	6833      	ldr	r3, [r6, #0]
   baf66:	f814 1b01 	ldrb.w	r1, [r4], #1
   baf6a:	689b      	ldr	r3, [r3, #8]
   baf6c:	4630      	mov	r0, r6
   baf6e:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   baf70:	e7f6      	b.n	baf60 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   baf72:	4628      	mov	r0, r5
   baf74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000baf76 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   baf76:	7c00      	ldrb	r0, [r0, #16]
   baf78:	2200      	movs	r2, #0
   baf7a:	f7ff b8f3 	b.w	ba164 <hal_i2c_write>

000baf7e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   baf7e:	7c00      	ldrb	r0, [r0, #16]
   baf80:	2100      	movs	r1, #0
   baf82:	f7ff b8f7 	b.w	ba174 <hal_i2c_available>

000baf86 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   baf86:	7c00      	ldrb	r0, [r0, #16]
   baf88:	2100      	movs	r1, #0
   baf8a:	f7ff b8fb 	b.w	ba184 <hal_i2c_read>

000baf8e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   baf8e:	7c00      	ldrb	r0, [r0, #16]
   baf90:	2100      	movs	r1, #0
   baf92:	f7ff b8ff 	b.w	ba194 <hal_i2c_peek>

000baf96 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   baf96:	7c00      	ldrb	r0, [r0, #16]
   baf98:	2100      	movs	r1, #0
   baf9a:	f7ff b903 	b.w	ba1a4 <hal_i2c_flush>

000baf9e <_ZN7TwoWireD0Ev>:
   baf9e:	b510      	push	{r4, lr}
   bafa0:	2114      	movs	r1, #20
   bafa2:	4604      	mov	r4, r0
   bafa4:	f7f9 fd4f 	bl	b4a46 <_ZdlPvj>
   bafa8:	4620      	mov	r0, r4
   bafaa:	bd10      	pop	{r4, pc}

000bafac <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   bafac:	b538      	push	{r3, r4, r5, lr}
   bafae:	4604      	mov	r4, r0
   bafb0:	4615      	mov	r5, r2
   bafb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   bafb6:	2200      	movs	r2, #0
   bafb8:	e9c4 2301 	strd	r2, r3, [r4, #4]
   bafbc:	4b09      	ldr	r3, [pc, #36]	; (bafe4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   bafbe:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   bafc0:	4608      	mov	r0, r1
   bafc2:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   bafc4:	4629      	mov	r1, r5
   bafc6:	f7ff f8fd 	bl	ba1c4 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   bafca:	30bf      	adds	r0, #191	; 0xbf
   bafcc:	d108      	bne.n	bafe0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   bafce:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   bafd0:	07db      	lsls	r3, r3, #31
   bafd2:	d505      	bpl.n	bafe0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   bafd4:	6868      	ldr	r0, [r5, #4]
   bafd6:	f7ff fa29 	bl	ba42c <free>
    free(conf.tx_buffer);
   bafda:	68e8      	ldr	r0, [r5, #12]
   bafdc:	f7ff fa26 	bl	ba42c <free>
}
   bafe0:	4620      	mov	r0, r4
   bafe2:	bd38      	pop	{r3, r4, r5, pc}
   bafe4:	000bd434 	.word	0x000bd434

000bafe8 <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
   bafe8:	7c00      	ldrb	r0, [r0, #16]
   bafea:	2200      	movs	r2, #0
   bafec:	f7ff b89a 	b.w	ba124 <hal_i2c_set_speed>

000baff0 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   baff0:	2300      	movs	r3, #0
   baff2:	7c00      	ldrb	r0, [r0, #16]
   baff4:	461a      	mov	r2, r3
   baff6:	4619      	mov	r1, r3
   baff8:	f7ff b89c 	b.w	ba134 <hal_i2c_begin>

000baffc <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   baffc:	7c00      	ldrb	r0, [r0, #16]
   baffe:	2200      	movs	r2, #0
   bb000:	f7ff b8a0 	b.w	ba144 <hal_i2c_begin_transmission>

000bb004 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   bb004:	b2c9      	uxtb	r1, r1
   bb006:	f7ff bff9 	b.w	baffc <_ZN7TwoWire17beginTransmissionEh>

000bb00a <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   bb00a:	7c00      	ldrb	r0, [r0, #16]
   bb00c:	2200      	movs	r2, #0
   bb00e:	f7ff b8a1 	b.w	ba154 <hal_i2c_end_transmission>

000bb012 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   bb012:	2101      	movs	r1, #1
   bb014:	f7ff bff9 	b.w	bb00a <_ZN7TwoWire15endTransmissionEh>

000bb018 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   bb018:	2200      	movs	r2, #0
   bb01a:	6840      	ldr	r0, [r0, #4]
   bb01c:	4611      	mov	r1, r2
   bb01e:	f7ff b9a5 	b.w	ba36c <network_ready>

000bb022 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   bb022:	2200      	movs	r2, #0
   bb024:	6840      	ldr	r0, [r0, #4]
   bb026:	4611      	mov	r1, r2
   bb028:	f7ff b9c0 	b.w	ba3ac <network_listening>

000bb02c <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   bb02c:	2200      	movs	r2, #0
   bb02e:	6840      	ldr	r0, [r0, #4]
   bb030:	4611      	mov	r1, r2
   bb032:	f7ff b9cb 	b.w	ba3cc <network_get_listen_timeout>

000bb036 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   bb036:	6840      	ldr	r0, [r0, #4]
   bb038:	2200      	movs	r2, #0
   bb03a:	f7ff b9bf 	b.w	ba3bc <network_set_listen_timeout>

000bb03e <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   bb03e:	6840      	ldr	r0, [r0, #4]
   bb040:	2200      	movs	r2, #0
   bb042:	f081 0101 	eor.w	r1, r1, #1
   bb046:	f7ff b9a9 	b.w	ba39c <network_listen>

000bb04a <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   bb04a:	2300      	movs	r3, #0
   bb04c:	6840      	ldr	r0, [r0, #4]
   bb04e:	461a      	mov	r2, r3
   bb050:	4619      	mov	r1, r3
   bb052:	f7ff b99b 	b.w	ba38c <network_off>

000bb056 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   bb056:	2300      	movs	r3, #0
   bb058:	6840      	ldr	r0, [r0, #4]
   bb05a:	461a      	mov	r2, r3
   bb05c:	4619      	mov	r1, r3
   bb05e:	f7ff b98d 	b.w	ba37c <network_on>

000bb062 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   bb062:	2200      	movs	r2, #0
   bb064:	6840      	ldr	r0, [r0, #4]
   bb066:	4611      	mov	r1, r2
   bb068:	f7ff b970 	b.w	ba34c <network_connecting>

000bb06c <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   bb06c:	6840      	ldr	r0, [r0, #4]
   bb06e:	2200      	movs	r2, #0
   bb070:	2102      	movs	r1, #2
   bb072:	f7ff b973 	b.w	ba35c <network_disconnect>

000bb076 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   bb076:	2300      	movs	r3, #0
   bb078:	6840      	ldr	r0, [r0, #4]
   bb07a:	461a      	mov	r2, r3
   bb07c:	f7ff b95e 	b.w	ba33c <network_connect>

000bb080 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   bb080:	4b02      	ldr	r3, [pc, #8]	; (bb08c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   bb082:	2204      	movs	r2, #4
   bb084:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   bb086:	4a02      	ldr	r2, [pc, #8]	; (bb090 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   bb088:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   bb08a:	4770      	bx	lr
   bb08c:	2003e710 	.word	0x2003e710
   bb090:	000bd45c 	.word	0x000bd45c

000bb094 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   bb094:	2300      	movs	r3, #0
   bb096:	6840      	ldr	r0, [r0, #4]
   bb098:	461a      	mov	r2, r3
   bb09a:	f7ff b94f 	b.w	ba33c <network_connect>

000bb09e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   bb09e:	6840      	ldr	r0, [r0, #4]
   bb0a0:	2200      	movs	r2, #0
   bb0a2:	2102      	movs	r1, #2
   bb0a4:	f7ff b95a 	b.w	ba35c <network_disconnect>

000bb0a8 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   bb0a8:	2200      	movs	r2, #0
   bb0aa:	6840      	ldr	r0, [r0, #4]
   bb0ac:	4611      	mov	r1, r2
   bb0ae:	f7ff b94d 	b.w	ba34c <network_connecting>

000bb0b2 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   bb0b2:	2200      	movs	r2, #0
   bb0b4:	6840      	ldr	r0, [r0, #4]
   bb0b6:	4611      	mov	r1, r2
   bb0b8:	f7ff b958 	b.w	ba36c <network_ready>

000bb0bc <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   bb0bc:	2300      	movs	r3, #0
   bb0be:	6840      	ldr	r0, [r0, #4]
   bb0c0:	461a      	mov	r2, r3
   bb0c2:	4619      	mov	r1, r3
   bb0c4:	f7ff b95a 	b.w	ba37c <network_on>

000bb0c8 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   bb0c8:	2300      	movs	r3, #0
   bb0ca:	6840      	ldr	r0, [r0, #4]
   bb0cc:	461a      	mov	r2, r3
   bb0ce:	4619      	mov	r1, r3
   bb0d0:	f7ff b95c 	b.w	ba38c <network_off>

000bb0d4 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   bb0d4:	6840      	ldr	r0, [r0, #4]
   bb0d6:	2100      	movs	r1, #0
   bb0d8:	f7ff b980 	b.w	ba3dc <network_is_on>

000bb0dc <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   bb0dc:	6840      	ldr	r0, [r0, #4]
   bb0de:	2100      	movs	r1, #0
   bb0e0:	f7ff b984 	b.w	ba3ec <network_is_off>

000bb0e4 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   bb0e4:	6840      	ldr	r0, [r0, #4]
   bb0e6:	2200      	movs	r2, #0
   bb0e8:	f081 0101 	eor.w	r1, r1, #1
   bb0ec:	f7ff b956 	b.w	ba39c <network_listen>

000bb0f0 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   bb0f0:	6840      	ldr	r0, [r0, #4]
   bb0f2:	2200      	movs	r2, #0
   bb0f4:	f7ff b962 	b.w	ba3bc <network_set_listen_timeout>

000bb0f8 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   bb0f8:	2200      	movs	r2, #0
   bb0fa:	6840      	ldr	r0, [r0, #4]
   bb0fc:	4611      	mov	r1, r2
   bb0fe:	f7ff b965 	b.w	ba3cc <network_get_listen_timeout>

000bb102 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   bb102:	2200      	movs	r2, #0
   bb104:	6840      	ldr	r0, [r0, #4]
   bb106:	4611      	mov	r1, r2
   bb108:	f7ff b950 	b.w	ba3ac <network_listening>

000bb10c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   bb10c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bb110:	b095      	sub	sp, #84	; 0x54
   bb112:	4614      	mov	r4, r2
   bb114:	460d      	mov	r5, r1
   bb116:	4607      	mov	r7, r0
    IPAddress addr;
   bb118:	f7ff fdda 	bl	bacd0 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   bb11c:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   bb11e:	221c      	movs	r2, #28
   bb120:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   bb122:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   bb124:	f000 f9cc 	bl	bb4c0 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   bb128:	2340      	movs	r3, #64	; 0x40
   bb12a:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   bb12c:	4620      	mov	r0, r4
   bb12e:	466b      	mov	r3, sp
   bb130:	aa0c      	add	r2, sp, #48	; 0x30
   bb132:	2100      	movs	r1, #0
   bb134:	f7fe ff1e 	bl	b9f74 <netdb_getaddrinfo>
    if (!r) {
   bb138:	4604      	mov	r4, r0
   bb13a:	2800      	cmp	r0, #0
   bb13c:	d14b      	bne.n	bb1d6 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   bb13e:	4602      	mov	r2, r0
   bb140:	2101      	movs	r1, #1
   bb142:	6868      	ldr	r0, [r5, #4]
   bb144:	f7ff f912 	bl	ba36c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   bb148:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   bb14a:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   bb14c:	4622      	mov	r2, r4
   bb14e:	6868      	ldr	r0, [r5, #4]
   bb150:	f7ff f90c 	bl	ba36c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   bb154:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   bb156:	4681      	mov	r9, r0
        bool ok = false;
   bb158:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   bb15a:	2e00      	cmp	r6, #0
   bb15c:	d03b      	beq.n	bb1d6 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   bb15e:	2900      	cmp	r1, #0
   bb160:	d139      	bne.n	bb1d6 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   bb162:	6873      	ldr	r3, [r6, #4]
   bb164:	2b02      	cmp	r3, #2
   bb166:	d003      	beq.n	bb170 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   bb168:	2b0a      	cmp	r3, #10
   bb16a:	d011      	beq.n	bb190 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   bb16c:	69f6      	ldr	r6, [r6, #28]
   bb16e:	e7f4      	b.n	bb15a <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   bb170:	f1b8 0f00 	cmp.w	r8, #0
   bb174:	d0fa      	beq.n	bb16c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   bb176:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   bb178:	a806      	add	r0, sp, #24
   bb17a:	3104      	adds	r1, #4
class IPAddress : public Printable {
   bb17c:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   bb17e:	f7ff fdd5 	bl	bad2c <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   bb182:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bb184:	1d3c      	adds	r4, r7, #4
   bb186:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bb188:	682b      	ldr	r3, [r5, #0]
   bb18a:	7023      	strb	r3, [r4, #0]
                    ok = true;
   bb18c:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   bb18e:	e7ed      	b.n	bb16c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   bb190:	f1b9 0f00 	cmp.w	r9, #0
   bb194:	d0ea      	beq.n	bb16c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   bb196:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   bb198:	2210      	movs	r2, #16
   bb19a:	a801      	add	r0, sp, #4
   bb19c:	f000 f990 	bl	bb4c0 <memset>
                    a.v = 6;
   bb1a0:	2306      	movs	r3, #6
   bb1a2:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   bb1a6:	ad01      	add	r5, sp, #4
   bb1a8:	f104 0308 	add.w	r3, r4, #8
   bb1ac:	3418      	adds	r4, #24
   bb1ae:	6818      	ldr	r0, [r3, #0]
   bb1b0:	6859      	ldr	r1, [r3, #4]
   bb1b2:	462a      	mov	r2, r5
   bb1b4:	c203      	stmia	r2!, {r0, r1}
   bb1b6:	3308      	adds	r3, #8
   bb1b8:	42a3      	cmp	r3, r4
   bb1ba:	4615      	mov	r5, r2
   bb1bc:	d1f7      	bne.n	bb1ae <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   bb1be:	a901      	add	r1, sp, #4
   bb1c0:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   bb1c2:	ad07      	add	r5, sp, #28
   bb1c4:	f7ff fd92 	bl	bacec <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   bb1c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bb1ca:	1d3c      	adds	r4, r7, #4
   bb1cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bb1ce:	682b      	ldr	r3, [r5, #0]
   bb1d0:	7023      	strb	r3, [r4, #0]
                    ok = true;
   bb1d2:	4649      	mov	r1, r9
   bb1d4:	e7ca      	b.n	bb16c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   bb1d6:	9800      	ldr	r0, [sp, #0]
   bb1d8:	f7fe fec4 	bl	b9f64 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   bb1dc:	4638      	mov	r0, r7
   bb1de:	b015      	add	sp, #84	; 0x54
   bb1e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000bb1e4 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   bb1e4:	4b02      	ldr	r3, [pc, #8]	; (bb1f0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   bb1e6:	4a03      	ldr	r2, [pc, #12]	; (bb1f4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   bb1e8:	601a      	str	r2, [r3, #0]
   bb1ea:	2200      	movs	r2, #0
   bb1ec:	605a      	str	r2, [r3, #4]
    network_free_configuration(c, count, nullptr);
    return res;
}
#endif // HAL_USE_SOCKET_HAL_POSIX

} // spark
   bb1ee:	4770      	bx	lr
   bb1f0:	2003e718 	.word	0x2003e718
   bb1f4:	000bd498 	.word	0x000bd498

000bb1f8 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   bb1f8:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   bb1fa:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   bb1fc:	d902      	bls.n	bb204 <pinAvailable+0xc>
    return false;
   bb1fe:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   bb200:	b002      	add	sp, #8
   bb202:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   bb204:	f1a0 030b 	sub.w	r3, r0, #11
   bb208:	2b02      	cmp	r3, #2
   bb20a:	d81a      	bhi.n	bb242 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   bb20c:	4c17      	ldr	r4, [pc, #92]	; (bb26c <pinAvailable+0x74>)
   bb20e:	7821      	ldrb	r1, [r4, #0]
   bb210:	f3bf 8f5b 	dmb	ish
   bb214:	f011 0101 	ands.w	r1, r1, #1
   bb218:	d10b      	bne.n	bb232 <pinAvailable+0x3a>
   bb21a:	4620      	mov	r0, r4
   bb21c:	9101      	str	r1, [sp, #4]
   bb21e:	f7f9 fc21 	bl	b4a64 <__cxa_guard_acquire>
   bb222:	9901      	ldr	r1, [sp, #4]
   bb224:	b128      	cbz	r0, bb232 <pinAvailable+0x3a>
   bb226:	4812      	ldr	r0, [pc, #72]	; (bb270 <pinAvailable+0x78>)
   bb228:	f7ff f97c 	bl	ba524 <_ZN8SPIClassC1E19hal_spi_interface_t>
   bb22c:	4620      	mov	r0, r4
   bb22e:	f7f9 fc1e 	bl	b4a6e <__cxa_guard_release>
   bb232:	4b0f      	ldr	r3, [pc, #60]	; (bb270 <pinAvailable+0x78>)
   bb234:	7818      	ldrb	r0, [r3, #0]
   bb236:	f7fe ffe5 	bl	ba204 <hal_spi_is_enabled>
   bb23a:	2800      	cmp	r0, #0
   bb23c:	d1df      	bne.n	bb1fe <pinAvailable+0x6>
  return true; // 'pin' is available
   bb23e:	2001      	movs	r0, #1
   bb240:	e7de      	b.n	bb200 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   bb242:	2801      	cmp	r0, #1
   bb244:	d809      	bhi.n	bb25a <pinAvailable+0x62>
   bb246:	f000 f8f9 	bl	bb43c <_Z19__fetch_global_Wirev>
   bb24a:	2100      	movs	r1, #0
   bb24c:	7c00      	ldrb	r0, [r0, #16]
   bb24e:	f7fe ffb1 	bl	ba1b4 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   bb252:	f080 0001 	eor.w	r0, r0, #1
   bb256:	b2c0      	uxtb	r0, r0
   bb258:	e7d2      	b.n	bb200 <pinAvailable+0x8>
   bb25a:	3809      	subs	r0, #9
   bb25c:	2801      	cmp	r0, #1
   bb25e:	d8ee      	bhi.n	bb23e <pinAvailable+0x46>
   bb260:	f000 f896 	bl	bb390 <_Z22__fetch_global_Serial1v>
   bb264:	7c00      	ldrb	r0, [r0, #16]
   bb266:	f7fe ff45 	bl	ba0f4 <hal_usart_is_enabled>
   bb26a:	e7f2      	b.n	bb252 <pinAvailable+0x5a>
   bb26c:	2003c730 	.word	0x2003c730
   bb270:	2003c734 	.word	0x2003c734

000bb274 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   bb274:	2823      	cmp	r0, #35	; 0x23
{
   bb276:	b538      	push	{r3, r4, r5, lr}
   bb278:	4604      	mov	r4, r0
   bb27a:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   bb27c:	d80a      	bhi.n	bb294 <pinMode+0x20>
   bb27e:	29ff      	cmp	r1, #255	; 0xff
   bb280:	d008      	beq.n	bb294 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   bb282:	f7ff ffb9 	bl	bb1f8 <pinAvailable>
   bb286:	b128      	cbz	r0, bb294 <pinMode+0x20>
  hal_gpio_mode(pin, setMode);
   bb288:	4629      	mov	r1, r5
   bb28a:	4620      	mov	r0, r4
}
   bb28c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_mode(pin, setMode);
   bb290:	f7fe be80 	b.w	b9f94 <hal_gpio_mode>
}
   bb294:	bd38      	pop	{r3, r4, r5, pc}

000bb296 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(hal_pin_t pin, uint8_t value)
{
   bb296:	b538      	push	{r3, r4, r5, lr}
   bb298:	4604      	mov	r4, r0
   bb29a:	460d      	mov	r5, r1
    PinMode mode = hal_gpio_get_mode(pin);
   bb29c:	f7fe fe82 	bl	b9fa4 <hal_gpio_get_mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   bb2a0:	28ff      	cmp	r0, #255	; 0xff
   bb2a2:	d010      	beq.n	bb2c6 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   bb2a4:	2806      	cmp	r0, #6
   bb2a6:	d804      	bhi.n	bb2b2 <digitalWrite+0x1c>
   bb2a8:	234d      	movs	r3, #77	; 0x4d
   bb2aa:	fa23 f000 	lsr.w	r0, r3, r0
   bb2ae:	07c3      	lsls	r3, r0, #31
   bb2b0:	d409      	bmi.n	bb2c6 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   bb2b2:	4620      	mov	r0, r4
   bb2b4:	f7ff ffa0 	bl	bb1f8 <pinAvailable>
   bb2b8:	b128      	cbz	r0, bb2c6 <digitalWrite+0x30>
    return;
  }

  hal_gpio_write(pin, value);
   bb2ba:	4629      	mov	r1, r5
   bb2bc:	4620      	mov	r0, r4
}
   bb2be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_write(pin, value);
   bb2c2:	f7fe be77 	b.w	b9fb4 <hal_gpio_write>
}
   bb2c6:	bd38      	pop	{r3, r4, r5, pc}

000bb2c8 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(hal_pin_t pin)
{
   bb2c8:	b510      	push	{r4, lr}
   bb2ca:	4604      	mov	r4, r0
    PinMode mode = hal_gpio_get_mode(pin);
   bb2cc:	f7fe fe6a 	bl	b9fa4 <hal_gpio_get_mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   bb2d0:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   bb2d2:	b2db      	uxtb	r3, r3
   bb2d4:	2b01      	cmp	r3, #1
   bb2d6:	d908      	bls.n	bb2ea <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   bb2d8:	4620      	mov	r0, r4
   bb2da:	f7ff ff8d 	bl	bb1f8 <pinAvailable>
   bb2de:	b120      	cbz	r0, bb2ea <digitalRead+0x22>
      return LOW;
    }

    return hal_gpio_read(pin);
   bb2e0:	4620      	mov	r0, r4
}
   bb2e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return hal_gpio_read(pin);
   bb2e6:	f7fe be6d 	b.w	b9fc4 <hal_gpio_read>
}
   bb2ea:	2000      	movs	r0, #0
   bb2ec:	bd10      	pop	{r4, pc}

000bb2ee <analogRead>:
int32_t analogRead(hal_pin_t pin)
{
#if !HAL_PLATFORM_RTL872X
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   bb2ee:	280d      	cmp	r0, #13
{
   bb2f0:	b510      	push	{r4, lr}
   bb2f2:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   bb2f4:	bf9c      	itt	ls
   bb2f6:	340e      	addls	r4, #14
   bb2f8:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
#endif

  // Safety check
  if( !pinAvailable(pin) ) {
   bb2fa:	4620      	mov	r0, r4
   bb2fc:	f7ff ff7c 	bl	bb1f8 <pinAvailable>
   bb300:	b150      	cbz	r0, bb318 <analogRead+0x2a>
    return LOW;
  }

  if(hal_pin_validate_function(pin, PF_ADC)!=PF_ADC)
   bb302:	2103      	movs	r1, #3
   bb304:	4620      	mov	r0, r4
   bb306:	f7fe fe3d 	bl	b9f84 <hal_pin_validate_function>
   bb30a:	2803      	cmp	r0, #3
   bb30c:	d104      	bne.n	bb318 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   bb30e:	4620      	mov	r0, r4
}
   bb310:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   bb314:	f7fe be6e 	b.w	b9ff4 <hal_adc_read>
}
   bb318:	2000      	movs	r0, #0
   bb31a:	bd10      	pop	{r4, pc}

000bb31c <_Z11analogWritetmm>:
/*
 * @brief Should take an integer 0-255 and create a PWM signal with a duty cycle from 0-100%
 * and frequency from 1 to 65535 Hz.
 */
void analogWrite(hal_pin_t pin, uint32_t value, uint32_t pwm_frequency)
{
   bb31c:	b570      	push	{r4, r5, r6, lr}
   bb31e:	4604      	mov	r4, r0
   bb320:	460d      	mov	r5, r1
   bb322:	4616      	mov	r6, r2
    // Safety check
    if (!pinAvailable(pin))
   bb324:	f7ff ff68 	bl	bb1f8 <pinAvailable>
   bb328:	b198      	cbz	r0, bb352 <_Z11analogWritetmm+0x36>
    {
        return;
    }

    if (hal_pin_validate_function(pin, PF_TIMER) == PF_TIMER)
   bb32a:	2102      	movs	r1, #2
   bb32c:	4620      	mov	r0, r4
   bb32e:	f7fe fe29 	bl	b9f84 <hal_pin_validate_function>
   bb332:	2802      	cmp	r0, #2
   bb334:	d10d      	bne.n	bb352 <_Z11analogWritetmm+0x36>
    {
        PinMode mode = hal_gpio_get_mode(pin);
   bb336:	4620      	mov	r0, r4
   bb338:	f7fe fe34 	bl	b9fa4 <hal_gpio_get_mode>

        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
   bb33c:	2801      	cmp	r0, #1
   bb33e:	d001      	beq.n	bb344 <_Z11analogWritetmm+0x28>
   bb340:	2804      	cmp	r0, #4
   bb342:	d106      	bne.n	bb352 <_Z11analogWritetmm+0x36>
        {
            return;
        }

        hal_pwm_write_with_frequency_ext(pin, value, pwm_frequency);
   bb344:	4632      	mov	r2, r6
   bb346:	4629      	mov	r1, r5
   bb348:	4620      	mov	r0, r4
    }
}
   bb34a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        hal_pwm_write_with_frequency_ext(pin, value, pwm_frequency);
   bb34e:	f7fe be61 	b.w	ba014 <hal_pwm_write_with_frequency_ext>
}
   bb352:	bd70      	pop	{r4, r5, r6, pc}

000bb354 <pulseIn>:
 */
uint32_t pulseIn(hal_pin_t pin, uint16_t value) {

    // NO SAFETY CHECKS!!! WILD WILD WEST!!!

    return hal_gpio_pulse_in(pin, value);
   bb354:	f7fe be56 	b.w	ba004 <hal_gpio_pulse_in>

000bb358 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   bb358:	4770      	bx	lr
	...

000bb35c <_Z20acquireSerial1Bufferv>:
{
   bb35c:	b538      	push	{r3, r4, r5, lr}
   bb35e:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   bb360:	2514      	movs	r5, #20
   bb362:	462a      	mov	r2, r5
   bb364:	2100      	movs	r1, #0
   bb366:	f000 f8ab 	bl	bb4c0 <memset>
   bb36a:	8025      	strh	r5, [r4, #0]
   bb36c:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bb36e:	4907      	ldr	r1, [pc, #28]	; (bb38c <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   bb370:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bb372:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   bb374:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bb376:	f000 f885 	bl	bb484 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bb37a:	4904      	ldr	r1, [pc, #16]	; (bb38c <_Z20acquireSerial1Bufferv+0x30>)
    };
   bb37c:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bb37e:	4628      	mov	r0, r5
   bb380:	f000 f880 	bl	bb484 <_ZnajRKSt9nothrow_t>
    };
   bb384:	60e0      	str	r0, [r4, #12]
}
   bb386:	4620      	mov	r0, r4
   bb388:	bd38      	pop	{r3, r4, r5, pc}
   bb38a:	bf00      	nop
   bb38c:	000bd4cc 	.word	0x000bd4cc

000bb390 <_Z22__fetch_global_Serial1v>:
{
   bb390:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   bb392:	4d0e      	ldr	r5, [pc, #56]	; (bb3cc <_Z22__fetch_global_Serial1v+0x3c>)
   bb394:	7829      	ldrb	r1, [r5, #0]
   bb396:	f3bf 8f5b 	dmb	ish
   bb39a:	f011 0401 	ands.w	r4, r1, #1
{
   bb39e:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   bb3a0:	d111      	bne.n	bb3c6 <_Z22__fetch_global_Serial1v+0x36>
   bb3a2:	4628      	mov	r0, r5
   bb3a4:	f7f9 fb5e 	bl	b4a64 <__cxa_guard_acquire>
   bb3a8:	b168      	cbz	r0, bb3c6 <_Z22__fetch_global_Serial1v+0x36>
   bb3aa:	a801      	add	r0, sp, #4
   bb3ac:	f7ff ffd6 	bl	bb35c <_Z20acquireSerial1Bufferv>
   bb3b0:	aa01      	add	r2, sp, #4
   bb3b2:	4621      	mov	r1, r4
   bb3b4:	4806      	ldr	r0, [pc, #24]	; (bb3d0 <_Z22__fetch_global_Serial1v+0x40>)
   bb3b6:	f7ff fdb9 	bl	baf2c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   bb3ba:	4628      	mov	r0, r5
   bb3bc:	f7f9 fb57 	bl	b4a6e <__cxa_guard_release>
   bb3c0:	4804      	ldr	r0, [pc, #16]	; (bb3d4 <_Z22__fetch_global_Serial1v+0x44>)
   bb3c2:	f000 f861 	bl	bb488 <atexit>
    return serial1;
}
   bb3c6:	4802      	ldr	r0, [pc, #8]	; (bb3d0 <_Z22__fetch_global_Serial1v+0x40>)
   bb3c8:	b007      	add	sp, #28
   bb3ca:	bd30      	pop	{r4, r5, pc}
   bb3cc:	2003e720 	.word	0x2003e720
   bb3d0:	2003e724 	.word	0x2003e724
   bb3d4:	000bb359 	.word	0x000bb359

000bb3d8 <_Z21__fetch_global_EEPROMv>:

// we don't use this global instance since there's no actual instance data
// Having this keeps the unoptimized build happy

EEPROMClass& __fetch_global_EEPROM()
{
   bb3d8:	b510      	push	{r4, lr}
	static EEPROMClass eeprom;
   bb3da:	4c08      	ldr	r4, [pc, #32]	; (bb3fc <_Z21__fetch_global_EEPROMv+0x24>)
   bb3dc:	7823      	ldrb	r3, [r4, #0]
   bb3de:	f3bf 8f5b 	dmb	ish
   bb3e2:	07db      	lsls	r3, r3, #31
   bb3e4:	d408      	bmi.n	bb3f8 <_Z21__fetch_global_EEPROMv+0x20>
   bb3e6:	4620      	mov	r0, r4
   bb3e8:	f7f9 fb3c 	bl	b4a64 <__cxa_guard_acquire>
   bb3ec:	b120      	cbz	r0, bb3f8 <_Z21__fetch_global_EEPROMv+0x20>

struct EEPROMClass{

	EEPROMClass()
    {
    		HAL_EEPROM_Init();
   bb3ee:	f7fe fe31 	bl	ba054 <HAL_EEPROM_Init>
   bb3f2:	4620      	mov	r0, r4
   bb3f4:	f7f9 fb3b 	bl	b4a6e <__cxa_guard_release>
	return eeprom;
}
   bb3f8:	4801      	ldr	r0, [pc, #4]	; (bb400 <_Z21__fetch_global_EEPROMv+0x28>)
   bb3fa:	bd10      	pop	{r4, pc}
   bb3fc:	2003e73c 	.word	0x2003e73c
   bb400:	2003e740 	.word	0x2003e740

000bb404 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   bb404:	4770      	bx	lr
	...

000bb408 <_Z17acquireWireBufferv>:
{
   bb408:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   bb40a:	4b0a      	ldr	r3, [pc, #40]	; (bb434 <_Z17acquireWireBufferv+0x2c>)
   bb40c:	6003      	str	r3, [r0, #0]
   bb40e:	2301      	movs	r3, #1
{
   bb410:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   bb412:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   bb414:	4908      	ldr	r1, [pc, #32]	; (bb438 <_Z17acquireWireBufferv+0x30>)
   bb416:	2020      	movs	r0, #32
   bb418:	f000 f834 	bl	bb484 <_ZnajRKSt9nothrow_t>
	};
   bb41c:	2520      	movs	r5, #32
   bb41e:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   bb420:	4905      	ldr	r1, [pc, #20]	; (bb438 <_Z17acquireWireBufferv+0x30>)
	};
   bb422:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   bb424:	4628      	mov	r0, r5
   bb426:	f000 f82d 	bl	bb484 <_ZnajRKSt9nothrow_t>
	};
   bb42a:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   bb42e:	4620      	mov	r0, r4
   bb430:	bd38      	pop	{r3, r4, r5, pc}
   bb432:	bf00      	nop
   bb434:	00010018 	.word	0x00010018
   bb438:	000bd4cc 	.word	0x000bd4cc

000bb43c <_Z19__fetch_global_Wirev>:
{
   bb43c:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   bb43e:	4d0e      	ldr	r5, [pc, #56]	; (bb478 <_Z19__fetch_global_Wirev+0x3c>)
   bb440:	7829      	ldrb	r1, [r5, #0]
   bb442:	f3bf 8f5b 	dmb	ish
   bb446:	f011 0401 	ands.w	r4, r1, #1
{
   bb44a:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   bb44c:	d111      	bne.n	bb472 <_Z19__fetch_global_Wirev+0x36>
   bb44e:	4628      	mov	r0, r5
   bb450:	f7f9 fb08 	bl	b4a64 <__cxa_guard_acquire>
   bb454:	b168      	cbz	r0, bb472 <_Z19__fetch_global_Wirev+0x36>
   bb456:	4668      	mov	r0, sp
   bb458:	f7ff ffd6 	bl	bb408 <_Z17acquireWireBufferv>
   bb45c:	466a      	mov	r2, sp
   bb45e:	4621      	mov	r1, r4
   bb460:	4806      	ldr	r0, [pc, #24]	; (bb47c <_Z19__fetch_global_Wirev+0x40>)
   bb462:	f7ff fda3 	bl	bafac <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   bb466:	4628      	mov	r0, r5
   bb468:	f7f9 fb01 	bl	b4a6e <__cxa_guard_release>
   bb46c:	4804      	ldr	r0, [pc, #16]	; (bb480 <_Z19__fetch_global_Wirev+0x44>)
   bb46e:	f000 f80b 	bl	bb488 <atexit>
	return wire;
}
   bb472:	4802      	ldr	r0, [pc, #8]	; (bb47c <_Z19__fetch_global_Wirev+0x40>)
   bb474:	b007      	add	sp, #28
   bb476:	bd30      	pop	{r4, r5, pc}
   bb478:	2003e744 	.word	0x2003e744
   bb47c:	2003e748 	.word	0x2003e748
   bb480:	000bb405 	.word	0x000bb405

000bb484 <_ZnajRKSt9nothrow_t>:
   bb484:	f7f9 badd 	b.w	b4a42 <_Znaj>

000bb488 <atexit>:
   bb488:	2300      	movs	r3, #0
   bb48a:	4601      	mov	r1, r0
   bb48c:	461a      	mov	r2, r3
   bb48e:	4618      	mov	r0, r3
   bb490:	f000 b8c0 	b.w	bb614 <__register_exitproc>

000bb494 <calloc>:
   bb494:	4b02      	ldr	r3, [pc, #8]	; (bb4a0 <calloc+0xc>)
   bb496:	460a      	mov	r2, r1
   bb498:	4601      	mov	r1, r0
   bb49a:	6818      	ldr	r0, [r3, #0]
   bb49c:	f000 b818 	b.w	bb4d0 <_calloc_r>
   bb4a0:	2003c6c8 	.word	0x2003c6c8

000bb4a4 <memcpy>:
   bb4a4:	440a      	add	r2, r1
   bb4a6:	4291      	cmp	r1, r2
   bb4a8:	f100 33ff 	add.w	r3, r0, #4294967295
   bb4ac:	d100      	bne.n	bb4b0 <memcpy+0xc>
   bb4ae:	4770      	bx	lr
   bb4b0:	b510      	push	{r4, lr}
   bb4b2:	f811 4b01 	ldrb.w	r4, [r1], #1
   bb4b6:	f803 4f01 	strb.w	r4, [r3, #1]!
   bb4ba:	4291      	cmp	r1, r2
   bb4bc:	d1f9      	bne.n	bb4b2 <memcpy+0xe>
   bb4be:	bd10      	pop	{r4, pc}

000bb4c0 <memset>:
   bb4c0:	4402      	add	r2, r0
   bb4c2:	4603      	mov	r3, r0
   bb4c4:	4293      	cmp	r3, r2
   bb4c6:	d100      	bne.n	bb4ca <memset+0xa>
   bb4c8:	4770      	bx	lr
   bb4ca:	f803 1b01 	strb.w	r1, [r3], #1
   bb4ce:	e7f9      	b.n	bb4c4 <memset+0x4>

000bb4d0 <_calloc_r>:
   bb4d0:	b513      	push	{r0, r1, r4, lr}
   bb4d2:	434a      	muls	r2, r1
   bb4d4:	4611      	mov	r1, r2
   bb4d6:	9201      	str	r2, [sp, #4]
   bb4d8:	f7fe ffc8 	bl	ba46c <_malloc_r>
   bb4dc:	4604      	mov	r4, r0
   bb4de:	b118      	cbz	r0, bb4e8 <_calloc_r+0x18>
   bb4e0:	9a01      	ldr	r2, [sp, #4]
   bb4e2:	2100      	movs	r1, #0
   bb4e4:	f7ff ffec 	bl	bb4c0 <memset>
   bb4e8:	4620      	mov	r0, r4
   bb4ea:	b002      	add	sp, #8
   bb4ec:	bd10      	pop	{r4, pc}
	...

000bb4f0 <srand>:
   bb4f0:	b538      	push	{r3, r4, r5, lr}
   bb4f2:	4b10      	ldr	r3, [pc, #64]	; (bb534 <srand+0x44>)
   bb4f4:	681d      	ldr	r5, [r3, #0]
   bb4f6:	6bab      	ldr	r3, [r5, #56]	; 0x38
   bb4f8:	4604      	mov	r4, r0
   bb4fa:	b9b3      	cbnz	r3, bb52a <srand+0x3a>
   bb4fc:	2018      	movs	r0, #24
   bb4fe:	f7fe ff8d 	bl	ba41c <malloc>
   bb502:	4602      	mov	r2, r0
   bb504:	63a8      	str	r0, [r5, #56]	; 0x38
   bb506:	b920      	cbnz	r0, bb512 <srand+0x22>
   bb508:	4b0b      	ldr	r3, [pc, #44]	; (bb538 <srand+0x48>)
   bb50a:	480c      	ldr	r0, [pc, #48]	; (bb53c <srand+0x4c>)
   bb50c:	2142      	movs	r1, #66	; 0x42
   bb50e:	f7fe ffb5 	bl	ba47c <__assert_func>
   bb512:	490b      	ldr	r1, [pc, #44]	; (bb540 <srand+0x50>)
   bb514:	4b0b      	ldr	r3, [pc, #44]	; (bb544 <srand+0x54>)
   bb516:	e9c0 1300 	strd	r1, r3, [r0]
   bb51a:	4b0b      	ldr	r3, [pc, #44]	; (bb548 <srand+0x58>)
   bb51c:	6083      	str	r3, [r0, #8]
   bb51e:	230b      	movs	r3, #11
   bb520:	8183      	strh	r3, [r0, #12]
   bb522:	2100      	movs	r1, #0
   bb524:	2001      	movs	r0, #1
   bb526:	e9c2 0104 	strd	r0, r1, [r2, #16]
   bb52a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   bb52c:	2200      	movs	r2, #0
   bb52e:	611c      	str	r4, [r3, #16]
   bb530:	615a      	str	r2, [r3, #20]
   bb532:	bd38      	pop	{r3, r4, r5, pc}
   bb534:	2003c6c8 	.word	0x2003c6c8
   bb538:	000bd4cd 	.word	0x000bd4cd
   bb53c:	000bd4e4 	.word	0x000bd4e4
   bb540:	abcd330e 	.word	0xabcd330e
   bb544:	e66d1234 	.word	0xe66d1234
   bb548:	0005deec 	.word	0x0005deec

000bb54c <strcpy>:
   bb54c:	4603      	mov	r3, r0
   bb54e:	f811 2b01 	ldrb.w	r2, [r1], #1
   bb552:	f803 2b01 	strb.w	r2, [r3], #1
   bb556:	2a00      	cmp	r2, #0
   bb558:	d1f9      	bne.n	bb54e <strcpy+0x2>
   bb55a:	4770      	bx	lr

000bb55c <strtok>:
   bb55c:	4b16      	ldr	r3, [pc, #88]	; (bb5b8 <strtok+0x5c>)
   bb55e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   bb560:	681e      	ldr	r6, [r3, #0]
   bb562:	6db4      	ldr	r4, [r6, #88]	; 0x58
   bb564:	4605      	mov	r5, r0
   bb566:	b9fc      	cbnz	r4, bb5a8 <strtok+0x4c>
   bb568:	2050      	movs	r0, #80	; 0x50
   bb56a:	9101      	str	r1, [sp, #4]
   bb56c:	f7fe ff56 	bl	ba41c <malloc>
   bb570:	9901      	ldr	r1, [sp, #4]
   bb572:	65b0      	str	r0, [r6, #88]	; 0x58
   bb574:	4602      	mov	r2, r0
   bb576:	b920      	cbnz	r0, bb582 <strtok+0x26>
   bb578:	4b10      	ldr	r3, [pc, #64]	; (bb5bc <strtok+0x60>)
   bb57a:	4811      	ldr	r0, [pc, #68]	; (bb5c0 <strtok+0x64>)
   bb57c:	2157      	movs	r1, #87	; 0x57
   bb57e:	f7fe ff7d 	bl	ba47c <__assert_func>
   bb582:	e9c0 4400 	strd	r4, r4, [r0]
   bb586:	e9c0 4402 	strd	r4, r4, [r0, #8]
   bb58a:	e9c0 4404 	strd	r4, r4, [r0, #16]
   bb58e:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
   bb592:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
   bb596:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
   bb59a:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
   bb59e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
   bb5a2:	6184      	str	r4, [r0, #24]
   bb5a4:	7704      	strb	r4, [r0, #28]
   bb5a6:	6244      	str	r4, [r0, #36]	; 0x24
   bb5a8:	6db2      	ldr	r2, [r6, #88]	; 0x58
   bb5aa:	2301      	movs	r3, #1
   bb5ac:	4628      	mov	r0, r5
   bb5ae:	b002      	add	sp, #8
   bb5b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   bb5b4:	f000 b806 	b.w	bb5c4 <__strtok_r>
   bb5b8:	2003c6c8 	.word	0x2003c6c8
   bb5bc:	000bd4cd 	.word	0x000bd4cd
   bb5c0:	000bd561 	.word	0x000bd561

000bb5c4 <__strtok_r>:
   bb5c4:	b5f0      	push	{r4, r5, r6, r7, lr}
   bb5c6:	b908      	cbnz	r0, bb5cc <__strtok_r+0x8>
   bb5c8:	6810      	ldr	r0, [r2, #0]
   bb5ca:	b188      	cbz	r0, bb5f0 <__strtok_r+0x2c>
   bb5cc:	4604      	mov	r4, r0
   bb5ce:	4620      	mov	r0, r4
   bb5d0:	f814 5b01 	ldrb.w	r5, [r4], #1
   bb5d4:	460f      	mov	r7, r1
   bb5d6:	f817 6b01 	ldrb.w	r6, [r7], #1
   bb5da:	b91e      	cbnz	r6, bb5e4 <__strtok_r+0x20>
   bb5dc:	b965      	cbnz	r5, bb5f8 <__strtok_r+0x34>
   bb5de:	6015      	str	r5, [r2, #0]
   bb5e0:	4628      	mov	r0, r5
   bb5e2:	e005      	b.n	bb5f0 <__strtok_r+0x2c>
   bb5e4:	42b5      	cmp	r5, r6
   bb5e6:	d1f6      	bne.n	bb5d6 <__strtok_r+0x12>
   bb5e8:	2b00      	cmp	r3, #0
   bb5ea:	d1f0      	bne.n	bb5ce <__strtok_r+0xa>
   bb5ec:	6014      	str	r4, [r2, #0]
   bb5ee:	7003      	strb	r3, [r0, #0]
   bb5f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   bb5f2:	461c      	mov	r4, r3
   bb5f4:	e00c      	b.n	bb610 <__strtok_r+0x4c>
   bb5f6:	b915      	cbnz	r5, bb5fe <__strtok_r+0x3a>
   bb5f8:	f814 3b01 	ldrb.w	r3, [r4], #1
   bb5fc:	460e      	mov	r6, r1
   bb5fe:	f816 5b01 	ldrb.w	r5, [r6], #1
   bb602:	42ab      	cmp	r3, r5
   bb604:	d1f7      	bne.n	bb5f6 <__strtok_r+0x32>
   bb606:	2b00      	cmp	r3, #0
   bb608:	d0f3      	beq.n	bb5f2 <__strtok_r+0x2e>
   bb60a:	2300      	movs	r3, #0
   bb60c:	f804 3c01 	strb.w	r3, [r4, #-1]
   bb610:	6014      	str	r4, [r2, #0]
   bb612:	e7ed      	b.n	bb5f0 <__strtok_r+0x2c>

000bb614 <__register_exitproc>:
   bb614:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bb618:	f8df 80b8 	ldr.w	r8, [pc, #184]	; bb6d4 <__register_exitproc+0xc0>
   bb61c:	4606      	mov	r6, r0
   bb61e:	f8d8 0000 	ldr.w	r0, [r8]
   bb622:	461f      	mov	r7, r3
   bb624:	460d      	mov	r5, r1
   bb626:	4691      	mov	r9, r2
   bb628:	f000 f856 	bl	bb6d8 <__retarget_lock_acquire_recursive>
   bb62c:	4b25      	ldr	r3, [pc, #148]	; (bb6c4 <__register_exitproc+0xb0>)
   bb62e:	681c      	ldr	r4, [r3, #0]
   bb630:	b934      	cbnz	r4, bb640 <__register_exitproc+0x2c>
   bb632:	4c25      	ldr	r4, [pc, #148]	; (bb6c8 <__register_exitproc+0xb4>)
   bb634:	601c      	str	r4, [r3, #0]
   bb636:	4b25      	ldr	r3, [pc, #148]	; (bb6cc <__register_exitproc+0xb8>)
   bb638:	b113      	cbz	r3, bb640 <__register_exitproc+0x2c>
   bb63a:	681b      	ldr	r3, [r3, #0]
   bb63c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   bb640:	6863      	ldr	r3, [r4, #4]
   bb642:	2b1f      	cmp	r3, #31
   bb644:	dd07      	ble.n	bb656 <__register_exitproc+0x42>
   bb646:	f8d8 0000 	ldr.w	r0, [r8]
   bb64a:	f000 f847 	bl	bb6dc <__retarget_lock_release_recursive>
   bb64e:	f04f 30ff 	mov.w	r0, #4294967295
   bb652:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bb656:	b34e      	cbz	r6, bb6ac <__register_exitproc+0x98>
   bb658:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   bb65c:	b988      	cbnz	r0, bb682 <__register_exitproc+0x6e>
   bb65e:	4b1c      	ldr	r3, [pc, #112]	; (bb6d0 <__register_exitproc+0xbc>)
   bb660:	b923      	cbnz	r3, bb66c <__register_exitproc+0x58>
   bb662:	f8d8 0000 	ldr.w	r0, [r8]
   bb666:	f000 f838 	bl	bb6da <__retarget_lock_release>
   bb66a:	e7f0      	b.n	bb64e <__register_exitproc+0x3a>
   bb66c:	f44f 7084 	mov.w	r0, #264	; 0x108
   bb670:	f7fe fed4 	bl	ba41c <malloc>
   bb674:	2800      	cmp	r0, #0
   bb676:	d0f4      	beq.n	bb662 <__register_exitproc+0x4e>
   bb678:	2300      	movs	r3, #0
   bb67a:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   bb67e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   bb682:	6863      	ldr	r3, [r4, #4]
   bb684:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   bb688:	2201      	movs	r2, #1
   bb68a:	409a      	lsls	r2, r3
   bb68c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   bb690:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   bb694:	4313      	orrs	r3, r2
   bb696:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   bb69a:	2e02      	cmp	r6, #2
   bb69c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   bb6a0:	bf02      	ittt	eq
   bb6a2:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   bb6a6:	4313      	orreq	r3, r2
   bb6a8:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   bb6ac:	6863      	ldr	r3, [r4, #4]
   bb6ae:	f8d8 0000 	ldr.w	r0, [r8]
   bb6b2:	1c5a      	adds	r2, r3, #1
   bb6b4:	3302      	adds	r3, #2
   bb6b6:	6062      	str	r2, [r4, #4]
   bb6b8:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   bb6bc:	f000 f80e 	bl	bb6dc <__retarget_lock_release_recursive>
   bb6c0:	2000      	movs	r0, #0
   bb6c2:	e7c6      	b.n	bb652 <__register_exitproc+0x3e>
   bb6c4:	2003e7e8 	.word	0x2003e7e8
   bb6c8:	2003e75c 	.word	0x2003e75c
   bb6cc:	00000000 	.word	0x00000000
   bb6d0:	000ba41d 	.word	0x000ba41d
   bb6d4:	2003c72c 	.word	0x2003c72c

000bb6d8 <__retarget_lock_acquire_recursive>:
   bb6d8:	4770      	bx	lr

000bb6da <__retarget_lock_release>:
   bb6da:	4770      	bx	lr

000bb6dc <__retarget_lock_release_recursive>:
   bb6dc:	4770      	bx	lr

000bb6de <link_code_end>:
	...

000bb6e0 <dynalib_user>:
   bb6e0:	49cd 000b 4a09 000b 4a31 000b 4a35 000b     .I...J..1J..5J..
   bb6f0:	0000 0000 6143 6c6c 6f20 206e 7570 6572     ....Call on pure
   bb700:	7620 7269 7574 6c61 5400 6d65 3a70 2520      virtual.Temp: %
   bb710:	0066 6e49 6176 696c 5364 6e65 6f73 4572     f.InvalidSensorE
   bb720:	7272 726f 5600 6c61 726f 6e20 206f 6176     rror.Valor no va
   bb730:	696c 6f64 4c00 6465 7245 6f72 4f72 7470     lido.LedErrorOpt
   bb740:	6f69 006e 6f4e 6174 6920 766e a1c3 696c     ion.Nota inv..li
   bb750:	6164 5400 7069 206f 6e69 c376 6ca1 6469     da.Tipo inv..lid
   bb760:	006f 4552 4d00 0049 4146 5300 4c4f 4c00     o.RE.MI.FA.SOL.L
   bb770:	0041 4953 5f00 0043 4e5f 5f00 0042 6e49     A.SI._C._N._B.In
   bb780:	6176 696c 2064 6573 736e 726f 2021 3e2d     valid sensor! ->
   bb790:	5320 6e65 6f73 2072 6572 6570 6974 6f64      Sensor repetido
   bb7a0:	6520 206e 6c65 6220 6f6c 7571 0065 494d      en el bloque.MI
   bb7b0:	4146 4552 525f 6165 2864 2029 6166 6c69     FARE_Read() fail
   bb7c0:	6465 203a 5000 4443 415f 7475 6568 746e     ed: .PCD_Authent
   bb7d0:	6369 7461 2865 2029 6166 6c69 6465 203a     icate() failed: 
   bb7e0:	5400 6761 6e49 6f66 203a 7325 4300 6e6f     .TagInfo: %s.Con
   bb7f0:	6365 6174 2072 6c61 7020 6575 7472 206f     ectar al puerto 
   bb800:	3041 000a 6f43 656e 7463 7261 6120 206c     A0..Conectar al 
   bb810:	7570 7265 6f74 4120 0a32 4300 6e6f 6365     puerto A2..Conec
   bb820:	6174 2072 6c61 7020 6575 7472 206f 3441     tar al puerto A4
   bb830:	000a 6f43 656e 7463 7261 6120 206c 7570     ..Conectar al pu
   bb840:	7265 6f74 4420 0a32 4300 6e6f 6365 6174     erto D2..Conecta
   bb850:	2072 6c61 7020 6575 7472 206f 3444 000a     r al puerto D4..
   bb860:	6f43 656e 7463 7261 6120 206c 7570 7265     Conectar al puer
   bb870:	6f74 4420 0a36 4500 7272 726f 203a 6f4e     to D6..Error: No
   bb880:	6820 7961 6d20 7361 7020 6575 7472 736f      hay mas puertos
   bb890:	6420 7369 6f70 696e 6c62 7365 0a20 4500      disponibles ..E
   bb8a0:	5045 4f52 204d 6d65 7470 0079 002d 2330     EPROM empty.-.0#
   bb8b0:	2339 0031 2330 3031 3123 3000 3123 2331     9#1.0#10#1.0#11#
   bb8c0:	0031 2330 2331 2331 0030 2330 2331 2331     1.0#1#1#0.0#1#1#
   bb8d0:	0031 2330 2330 2331 0030 2330 2330 2331     1.0#0#1#0.0#0#1#
   bb8e0:	0031 2330 2330 2331 0032 2330 2330 2331     1.0#0#1#2.0#0#1#
   bb8f0:	0033 2330 2330 2331 0034 2330 2330 2331     3.0#0#1#4.0#0#1#
   bb900:	0035 2331 2330 2331 2337 0030 2331 2330     5.1#0#1#7#0.1#0#
   bb910:	2331 2337 0031 2331 2330 2330 2332 0030     1#7#1.1#0#0#2#0.
   bb920:	2331 2330 2330 2332 0031 2331 2330 2330     1#0#0#2#1.1#0#0#
   bb930:	2333 0030 2331 2330 2330 2333 0031 2331     3#0.1#0#0#3#1.1#
   bb940:	2330 2331 2334 0030 2331 2330 2331 2334     0#1#4#0.1#0#1#4#
   bb950:	0031 2331 2330 2331 2335 0030 2331 2330     1.1#0#1#5#0.1#0#
   bb960:	2331 2335 0031 2331 2330 2331 2336 0030     1#5#1.1#0#1#6#0.
   bb970:	2331 2330 2331 2336 0031 2331 2330 2331     1#0#1#6#1.1#0#1#
   bb980:	2336 0032 2331 2331 2331 2331 0030 2331     6#2.1#1#1#1#0.1#
   bb990:	2331 2331 2331 0031 2331 2331 2331 2330     1#1#1#1.1#1#1#0#
   bb9a0:	0030 2331 2331 2331 2330 0031 2331 2331     0.1#1#1#0#1.1#1#
   bb9b0:	2331 2330 0032 2331 2331 2331 2330 0033     1#0#2.1#1#1#0#3.
   bb9c0:	2331 2331 2331 2330 0034 2331 2331 2331     1#1#1#0#4.1#1#1#
   bb9d0:	2330 0035 2331 2331 2331 2330 0036 2331     0#5.1#1#1#0#6.1#
   bb9e0:	2331 2331 2330 0037 2331 2333 0030 2331     1#1#0#7.1#3#0.1#
   bb9f0:	2333 0031 2332 2330 2330 0030 2332 2330     3#1.2#0#0#0.2#0#
   bba00:	2330 0031 2332 2330 2330 0032 2332 2330     0#1.2#0#0#2.2#0#
   bba10:	2331 0030 2332 2330 2331 0031 2332 2330     1#0.2#0#1#1.2#0#
   bba20:	2331 0032 2332 2330 2332 0030 2332 2330     1#2.2#0#2#0.2#0#
   bba30:	2332 0031 2332 2330 2332 0032 2332 2330     2#1.2#0#2#2.2#0#
   bba40:	2333 0030 2332 2330 2333 0031 2332 2330     3#0.2#0#3#1.2#0#
   bba50:	2333 0032 2332 2330 2334 0030 2332 2330     3#2.2#0#4#0.2#0#
   bba60:	2334 0031 2332 2330 2334 0032 2332 2330     4#1.2#0#4#2.2#0#
   bba70:	2335 0030 2332 2330 2335 0031 2332 2330     5#0.2#0#5#1.2#0#
   bba80:	2335 0032 2332 2330 2336 0030 2332 2330     5#2.2#0#6#0.2#0#
   bba90:	2336 0031 2332 2330 2336 0032 2332 2330     6#1.2#0#6#2.2#0#
   bbaa0:	2337 0030 2332 2330 2337 0031 2332 2330     7#0.2#0#7#1.2#0#
   bbab0:	2337 0032 2332 2331 0030 2332 2332 0030     7#2.2#1#0.2#2#0.
   bbac0:	2332 2332 0031 2332 2332 0032 2332 2332     2#2#1.2#2#2.2#2#
   bbad0:	0033 2332 2332 0034 2332 2332 0035 2332     3.2#2#4.2#2#5.2#
   bbae0:	2332 0036 2332 2332 0037 2332 2332 0038     2#6.2#2#7.2#2#8.
   bbaf0:	2336 2330 0030 2336 2330 0031 2336 2330     6#0#0.6#0#1.6#0#
   bbb00:	0032 2336 2331 0030 2336 2332 0030 2336     2.6#1#0.6#2#0.6#
   bbb10:	2332 0031 2336 2332 0032 2333 2330 2330     2#1.6#2#2.3#0#0#
   bbb20:	3231 3023 3300 3023 3123 3623 3023 3100     12#0.3#0#1#6#0.1
   bbb30:	3023 3123 3923 3323 3100 3023 3023 3123     #0#1#9#3.1#0#0#1
   bbb40:	2332 0031 2331 2331 2330 3331 3123 4d00     2#1.1#1#0#13#1.M
   bbb50:	444f 204f 4142 4953 4f43 4d00 444f 204f     ODO BASICO.MODO 
   bbb60:	5641 4e41 415a 4f44 4d00 444f 204f 554d     AVANZADO.MODO MU
   bbb70:	4953 4143 4d00 444f 204f 5845 4c50 524f     SICA.MODO EXPLOR
   bbb80:	0041 6942 6d74 7061 6e20 746f 6120 6176     A.Bitmap not ava
   bbb90:	6c69 6261 656c 002e 2020 2020 4320 4e4f     ilable..     CON
   bbba0:	4345 4154 2052 3a41 5900 2041 4f43 454e     ECTAR A:.YA CONE
   bbbb0:	5443 4441 004f 6154 6a72 7465 2061 6e69     CTADO.Tarjeta in
   bbbc0:	6176 696c 6164 7020 7261 2061 7365 6574     valida para este
   bbbd0:	6d20 646f 006f 6f42 7272 6461 206f 6e69      modo.Borrado in
   bbbe0:	6176 696c 6f64 7020 7261 2061 7365 6574     valido para este
   bbbf0:	6d20 646f 006f 724f 6564 206e 6564 7420      modo.Orden de t
   bbc00:	7261 656a 6174 2073 6e69 6176 696c 6f64     arjetas invalido
   bbc10:	5000 6575 7472 206f 6f6e 6420 7369 6f70     .Puerto no dispo
   bbc20:	696e 6c62 0065 6c50 7961 6e20 206f 6964     nible.Play no di
   bbc30:	7073 6e6f 6269 656c 5300 6e65 6f73 2072     sponible.Sensor 
   bbc40:	6f6e 6420 7369 6f70 696e 6c62 2065 6528     no disponible (e
   bbc50:	206e 7375 296f 4100 7463 6175 6f64 2072     n uso).Actuador 
   bbc60:	6f6e 6420 7369 6f70 696e 6c62 2065 6528     no disponible (e
   bbc70:	206e 7375 296f 4200 726f 6172 6f64 6420     n uso).Borrado d
   bbc80:	2065 6c62 716f 6575 7220 6165 696c 617a     e bloque realiza
   bbc90:	6f64 4e00 6461 2061 7571 2065 6f62 7272     do.Nada que borr
   bbca0:	7261 4200 726f 6172 6f64 6420 2065 6f6c     ar.Borrado de lo
   bbcb0:	706f 7220 6165 696c 617a 6f64 4e00 6461     op realizado.Nad
   bbcc0:	2061 7571 2065 6f62 7272 7261 002e 6425     a que borrar..%d
   bbcd0:	2d20 2520 0064 6946 616e 696c 617a 6520      - %d.Finaliza e
   bbce0:	206c 7562 6c63 2065 6e61 6574 2073 6564     l bucle antes de
   bbcf0:	7220 7065 6f72 7564 6963 0072 6f4d 6f64      reproducir.Modo
   bbd00:	4220 5341 4349 204f 6564 6574 7463 6461      BASICO detectad
   bbd10:	006f 6e49 6369 6169 646e 206f 6f6d 6f64     o.Iniciando modo
   bbd20:	4220 5341 4349 2e4f 2e2e 4d00 646f 206f      BASICO....Modo 
   bbd30:	5641 4e41 415a 4f44 6420 7465 6365 6174     AVANZADO detecta
   bbd40:	6f64 4900 696e 6963 6e61 6f64 6d20 646f     do.Iniciando mod
   bbd50:	206f 5641 4e41 415a 4f44 2e2e 002e 6f4d     o AVANZADO....Mo
   bbd60:	6f64 4d20 5355 4349 2041 6564 6574 7463     do MUSICA detect
   bbd70:	6461 006f 6e49 6369 6169 646e 206f 6f6d     ado.Iniciando mo
   bbd80:	6f64 4d20 5355 4349 2e41 2e2e 4d00 646f     do MUSICA....Mod
   bbd90:	206f 5845 4c50 524f 2041 6564 6574 7463     o EXPLORA detect
   bbda0:	6461 006f 6e49 6369 6169 646e 206f 6f6d     ado.Iniciando mo
   bbdb0:	6f64 4520 5058 4f4c 4152 2e2e 002e 755a     do EXPLORA....Zu
   bbdc0:	626d 6461 726f 003a 6154 2067 6544 6574     mbador:.Tag Dete
   bbdd0:	7463 6461 2061 2d2d 203e 4200 726f 6172     ctada --> .Borra
   bbde0:	6f64 6320 6d6f 6c70 7465 206f 6572 6c61     do completo real
   bbdf0:	7a69 6461 006f 6f42 7272 6461 206f 6f6e     izado.Borrado no
   bbe00:	7020 7265 696d 6974 6f64 7020 7261 2061      permitido para 
   bbe10:	7365 6574 6d20 646f 006f 6553 736e 726f     este modo.Sensor
   bbe20:	6420 7465 6365 6174 6f64 4100 7463 6175      detectado.Actua
   bbe30:	6f64 2072 6564 6574 7463 6461 006f 6a45     dor detectado.Ej
   bbe40:	6365 7475 6e61 6f64 7420 6761 2d20 3e2d     ecutando tag -->
   bbe50:	0020 7550 7265 6f74 6e20 206f 6964 7073      .Puerto no disp
   bbe60:	6e6f 6269 656c 6565 0065 6553 6520 7073     onibleeee.Se esp
   bbe70:	7265 6261 2061 4649 7420 6761 4400 7365     eraba IF tag.Des
   bbe80:	7570 7365 6420 2065 6e75 7320 6e65 6f73     pues de un senso
   bbe90:	2072 6573 6520 7073 7265 2061 6e75 2061     r se espera una 
   bbea0:	6f63 636e 6f69 3a6e 4120 444e 7520 4f20     concion: AND u O
   bbeb0:	0052 6553 736e 726f 6920 766e 6c61 6469     R.Sensor invalid
   bbec0:	006f 6553 6520 7073 7265 6261 2061 4854     o.Se esperaba TH
   bbed0:	4e45 7420 6761 4900 766e 6c61 6469 4120     EN tag.Invalid A
   bbee0:	7463 6175 6f64 0072 6553 6520 7073 7265     ctuador.Se esper
   bbef0:	6261 2061 4c45 4553 7420 6761 4900 2046     aba ELSE tag.IF 
   bbf00:	6564 6574 7463 6461 006f 4649 4e00 6d75     detectado.IF.Num
   bbf10:	7265 206f 6564 6220 6f6c 7571 7365 3e20     ero de bloques >
   bbf20:	3220 7c20 207c 6553 6e20 6365 7365 7469      2 || Se necesit
   bbf30:	2061 6c61 6d20 6e65 736f 7520 206e 6361     a al menos un ac
   bbf40:	7574 6461 726f 7020 7261 2061 6574 6d72     tuador para term
   bbf50:	6e69 7261 6520 206c 6c62 716f 6575 4100     inar el bloque.A
   bbf60:	444e 4f2f 2052 6564 6574 7463 6461 006f     ND/OR detectado.
   bbf70:	4e41 0044 6e55 2061 6f63 636e 6369 6f69     AND.Una concicio
   bbf80:	206e 6f73 6f6c 7020 6575 6564 6920 2072     n solo puede ir 
   bbf90:	6573 7567 6469 2061 6564 7520 206e 6573     seguida de un se
   bbfa0:	736e 726f 002e 4854 4e45 6420 7465 6365     nsor..THEN detec
   bbfb0:	6174 6f64 5400 4548 004e 754e 656d 6f72     tado.THEN.Numero
   bbfc0:	6420 2065 6573 736e 726f 7365 6920 666e      de sensores inf
   bbfd0:	6375 6569 746e 7365 4500 534c 2045 6564     ucientes.ELSE de
   bbfe0:	6574 7463 6461 006f 4c45 4553 4900 746e     tectado.ELSE.Int
   bbff0:	6f72 7564 6563 7520 206e 6341 7574 6461     roduce un Actuad
   bc000:	726f 7020 7261 2061 616c 6520 6176 756c     or para la evalu
   bc010:	6361 c369 6eb3 6120 5420 5552 0045 6946     aci..n a TRUE.Fi
   bc020:	206e 6154 0067 2023 6c42 716f 6575 7c20     n Tag.# Bloque |
   bc030:	2320 5320 6e65 6f73 6572 2073 207c 2023      # Sensores | # 
   bc040:	6f43 646e 6369 6f69 656e 2073 207c 2023     Condiciones | # 
   bc050:	6341 7574 6461 726f 7365 2000 2020 2520     Actuadores.    %
   bc060:	2064 7c09 2009 6425 0920 097c 2520 2064     d .|. %d .|. %d 
   bc070:	7c09 2009 6425 0920 097c 2520 0064 6154     .|. %d .|. %d.Ta
   bc080:	6a72 7465 2061 6e69 c376 6ca1 6469 2061     rjeta inv..lida 
   bc090:	6170 6172 6520 7473 2065 6f6d 6f64 4200     para este modo.B
   bc0a0:	4f4c 5551 2045 3a31 5420 5552 0045 4c42     LOQUE 1: TRUE.BL
   bc0b0:	514f 4555 3120 203a 4146 534c 0045 2020     OQUE 1: FALSE.  
   bc0c0:	6361 6261 2061 6c62 716f 6575 3120 4200     acaba bloque 1.B
   bc0d0:	4f4c 5551 2045 3a32 5420 5552 0045 4c42     LOQUE 2: TRUE.BL
   bc0e0:	514f 4555 3220 203a 4146 534c 0045 4c42     OQUE 2: FALSE.BL
   bc0f0:	514f 4555 3220 203a 2020 6f6e 6620 6e69     OQUE 2:   no fin
   bc100:	6c61 7a69 6461 006f 6a45 6365 7475 6e61     alizado.Ejecutan
   bc110:	6f64 2e2e 002e 6f42 7272 6461 2061 6c75     do....Borrada ul
   bc120:	6974 616d 6c20 6365 7574 6172 4c00 6f6f     tima lectura.Loo
   bc130:	2070 202d 5000 7261 2061 6f63 656d 7a6e     p - .Para comenz
   bc140:	7261 7520 206e 6f6c 706f 6820 7961 7120     ar un loop hay q
   bc150:	6575 6620 6e69 6c61 7a69 7261 6520 206c     ue finalizar el 
   bc160:	6e61 6574 6972 726f 002e 4e45 2044 6f4c     anterior..END Lo
   bc170:	706f 7200 7065 2d20 0020 6f4c 706f 7320     op.rep - .Loop s
   bc180:	6e69 6320 6d6f 6e65 617a 2072 206f 6973     in comenzar o si
   bc190:	206e 6f63 746e 6e65 6469 006f 2020 2020     n contenido.    
   bc1a0:	2020 2020 4c20 7a75 003a 2020 7552 6469          Luz:.  Ruid
   bc1b0:	206f 6428 6365 6269 6c65 6f69 2973 003a     o (decibelios):.
   bc1c0:	2020 4120 676e 6c75 206f 6728 6172 6f64        Angulo (grado
   bc1d0:	2973 003a 2020 6554 706d 7265 7461 7275     s):.  Temperatur
   bc1e0:	2061 6728 6172 6f64 2973 003a 2020 4420     a (grados):.   D
   bc1f0:	7369 6174 636e 6169 2820 6d63 3a29 2000     istancia (cm):. 
   bc200:	2020 2020 5420 7275 6962 6564 3a7a                Turbidez:.

000bc20f <CSWTCH.413>:
   bc20f:	ff13 ff11                                    .....

000bc214 <CSWTCH.425>:
   bc214:	00fa 01f4 03e8                              ......

000bc21a <_ZL14sucreLogo_data>:
   bc21a:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bc22a:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bc23a:	ffff ffff ffff fff8 ffff ffff ffff ffff     ................
   bc24a:	ffff ffff ffff 7fc0 ffff ffff ffff ffff     ................
   bc25a:	ffff ffff feff 7f00 ffff ffff ffff ffff     ................
   bc26a:	ffff ffff feff 7f00 ffff ffff ffff ffff     ................
   bc27a:	ffff ffff feff 3f00 ffff ffff ffff ffff     .......?........
   bc28a:	ffff ffff feff 3f00 ffff ffff ffff ffff     .......?........
   bc29a:	ffff ffff 3ffc 3f00 ffff ffff ffff ffff     .....?.?........
   bc2aa:	ffff ffff 0ffc 1f00 ffff ffff ffff ffff     ................
   bc2ba:	ffff ffff 07fc 1f00 ffff ffff ffff ffff     ................
   bc2ca:	ffff ffff 07f8 3f00 ffff ffff ffff ffff     .......?........
   bc2da:	ffff ffff 07f8 ff83 ffff ffff ffff ffff     ................
   bc2ea:	ffff ffff 0ff0 ffcf ffff ffff ffff ffff     ................
   bc2fa:	ffff ffff 0ff8 ffff ffff ffff ffff ffff     ................
   bc30a:	ffff ffff 0ffe ffff ffff ffff ffff ffff     ................
   bc31a:	ffff ffff 9fff ffff ffff ffff ffff ffff     ................
   bc32a:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bc33a:	ffff ffff fcff ff1f ffff ffff ffff ffff     ................
   bc34a:	ffff 7fc0 fcff ff0d 3fe0 03ef c0ff ff7f     .........?......
   bc35a:	feff 3f00 f8f3 ff09 0780 01e4 00ff ff1f     ...?............
   bc36a:	fcff 1f3f f8f3 ff09 c31f f8e0 3ffc ff87     ..?..........?..
   bc37a:	f8ff ffff f8f3 fe09 f13f fce1 fff8 ffe3     ........?.......
   bc38a:	f1ff ffff f8f3 fc19 f87f ffe3 fff1 ffe3     ................
   bc39a:	e3ff ffff fff3 f819 fcff ffe7 ffe3 ffc7     ................
   bc3aa:	e7ff ffff fff3 f1f9 feff ffe7 ffe7 ff8f     ................
   bc3ba:	c7ff ffff e7f3 f3f9 ffff ffe7 ffe7 ff1f     ................
   bc3ca:	cfff ffff c3f3 f3f9 ffff ffe7 fec7 ff3f     ..............?.
   bc3da:	cfff ffff 81f3 f3f9 ffff ffe7 fccf ff7f     ................
   bc3ea:	c0ff 0000 00f3 e3f9 ffff ffe7 f8cf ffff     ................
   bc3fa:	c0ff 0000 0072 e379 ffff ffe7 f1cf ffff     ....r.y.........
   bc40a:	feff 0000 0072 e379 ffff ffe7 e3cf ffff     ....r.y.........
   bc41a:	ffff fcff 00f3 f3f9 ffff ffe7 c7c7 ffff     ................
   bc42a:	ffff fcff 81f3 f3f9 ffff ffe7 8fc7 ffff     ................
   bc43a:	ffff f8ff c3f3 f1f9 ffff ffe7 1fe7 ffff     ................
   bc44a:	ffff f9ff e7f1 f9f1 fcff ffe7 3fe2 fffb     .............?..
   bc45a:	ffff f1ff fff8 f8f1 fcff ffe7 7ff0 fff3     ................
   bc46a:	ffff e3ff fffc fce1 f87f ffe7 fff8 ffe3     ................
   bc47a:	feff c77f 3ffc fe81 e13f ffe7 7ffc ffc7     .....?..?.......
   bc48a:	feff 0f1e 0efe ff09 8307 ffe7 0efe ff0f     ................
   bc49a:	ffff 1f00 80ff ff39 0fc0 ffe7 00ff ff1f     ......9.........
   bc4aa:	ffff ffe0 e0ff ffff 7ff0 ffff e0ff ffff     ................
   bc4ba:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bc4ca:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bc4da:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bc4ea:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bc4fa:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bc50a:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bc51a:	ffff ffff ffff ffff cfff ffff ffff ffff     ................
   bc52a:	ffff ffff ffff ffff 9fff ffff ffff ffff     ................
   bc53a:	ffff ffff ffff ffff 3fff feff 7cf6 ffff     .........?...|..
   bc54a:	ffff ffff ffff ffff 7cff feff fce7 ffe7     .........|......
   bc55a:	ffff ffff ffff ffff 78ff fe7c fccf ffc7     .........x|.....
   bc56a:	ffff ffff ffff ffff 39ff fe31 e1df ff9f     .........91.....
   bc57a:	ffff ffff ffff ffff 03fe fe93 413e ff8f     ............>A..
   bc58a:	ffff ffff ffff ffff 33ff feb7 9c1e ffe3     .........3......
   bc59a:	ffff ffff ffff ffff 73ff fe37 1dc6 ffbb     .........s7.....
   bc5aa:	ffff ffff ffff ffff 38ff fe27 9df2 ff39     .........8'...9.
   bc5ba:	ffff ffff ffff ffff 3cff fe67 417a ff93     .........<g.zA..
   bc5ca:	ffff ffff ffff ffff 3fff ffe7 61fe ff87     .........?...a..
   bc5da:	ffff ffff ffff ffff ffff ffff fdff ffff     ................
   bc5ea:	ffff ffff ffff ffff ffff ffff fdff ffff     ................
   bc5fa:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bc60a:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bc61a:	6564 6166 6c75 2074 4d00 4253 4c00 4253     default .MSB.LSB
   bc62a:	3c00 5053 5349 7465 6974 676e 2073 6564     .<SPISettings de
   bc63a:	6166 6c75 3e74 3c00 5053 5349 7465 6974     fault>.<SPISetti
   bc64a:	676e 2073 7325 7525 2520 2073 4f4d 4544     ngs %s%u %s MODE
   bc65a:	7525 003e                                   %u>.

000bc65e <_ZL4font>:
   bc65e:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
   bc66e:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
   bc67e:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
   bc68e:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
   bc69e:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
   bc6ae:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
   bc6be:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
   bc6ce:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
   bc6de:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
   bc6ee:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
   bc6fe:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
   bc70e:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
   bc71e:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
   bc72e:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
   bc73e:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
   bc74e:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
   bc75e:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
   bc76e:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
   bc77e:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
   bc78e:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
   bc79e:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
   bc7ae:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
   bc7be:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
   bc7ce:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
   bc7de:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
   bc7ee:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
   bc7fe:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
   bc80e:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
   bc81e:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
   bc82e:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
   bc83e:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
   bc84e:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
   bc85e:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
   bc86e:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
   bc87e:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
   bc88e:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
   bc89e:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
   bc8ae:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
   bc8be:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
   bc8ce:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
   bc8de:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
   bc8ee:	5555 4179 5422 7854 2142 5455 4078 5420     UUyA"TTxB!UTx@ T
   bc8fe:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
   bc90e:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
   bc91e:	0042 4501 407c 127d 1211 f07d 2528 f028     B..E|@}...}.(%(.
   bc92e:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
   bc93e:	4949 3249 443a 4444 323a 484a 3048 413a     III2:DDD:2JHH0:A
   bc94e:	2141 3a7a 4042 7820 9d00 a0a0 3d7d 4242     A!z:B@ x....}=BB
   bc95e:	3d42 403d 4040 3c3d ff24 2424 7e48 4349     B==@@@=<$.$$H~IC
   bc96e:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
   bc97e:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
   bc98e:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
   bc99e:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
   bc9ae:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
   bc9be:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
   bc9ce:	0055 0055 aa55 aa55 aa55 55ff 55ff 00ff     U.U.U.U.U..U.U..
   bc9de:	0000 00ff 1010 ff10 1400 1414 00ff 1010     ................
   bc9ee:	00ff 10ff f010 f010 1414 fc14 1400 f714     ................
   bc9fe:	ff00 0000 00ff 14ff f414 fc04 1414 1017     ................
   bca0e:	101f 1f10 1f10 1414 1f14 1000 1010 00f0     ................
   bca1e:	0000 1f00 1010 1010 101f 1010 f010 0010     ................
   bca2e:	0000 10ff 1010 1010 1010 1010 10ff 0000     ................
   bca3e:	ff00 0014 ff00 ff00 0000 101f 0017 fc00     ................
   bca4e:	f404 1414 1017 1417 f414 f404 0000 00ff     ................
   bca5e:	14f7 1414 1414 1414 00f7 14f7 1414 1417     ................
   bca6e:	1010 101f 141f 1414 14f4 1010 10f0 00f0     ................
   bca7e:	1f00 1f10 0000 1f00 0014 0000 14fc 0000     ................
   bca8e:	10f0 10f0 ff10 ff10 1414 ff14 1014 1010     ................
   bca9e:	001f 0000 f000 ff10 ffff ffff f0f0 f0f0     ................
   bcaae:	fff0 ffff 0000 0000 ff00 0fff 0f0f 0f0f     ................
   bcabe:	4438 3844 fc44 4a4a 344a 027e 0602 0206     8DD8D.JJJ4~.....
   bcace:	027e 027e 5563 4149 3863 4444 043c 7e40     ~.~.cUIAc8DD<.@~
   bcade:	1e20 0620 7e02 0202 a599 a5e7 1c99 492a      . ..~........*I
   bcaee:	1c2a 724c 7201 304c 4d4a 304d 4830 4878     *.Lr.rL0JMM00HxH
   bcafe:	bc30 5a62 3d46 493e 4949 7e00 0101 7e01     0.bZF=>III.~...~
   bcb0e:	2a2a 2a2a 442a 5f44 4444 5140 444a 4040     *****DD_DD@QJD@@
   bcb1e:	4a44 4051 0000 01ff e003 ff80 0000 0808     DJQ@............
   bcb2e:	6b6b 3608 3612 3624 0f06 0f09 0006 1800     kk.6.6$6........
   bcb3e:	0018 0000 1010 3000 ff40 0101 1f00 0101     .......0@.......
   bcb4e:	001e 1d19 1217 3c00 3c3c 003c 0000 0000     .......<<<<.....
	...

000bcb60 <_ZTV12Adafruit_GFX>:
	...
   bcb70:	893d 000b a8f5 000b 4a4d 000b 7fdf 000b     =.......MJ......
   bcb80:	7fe1 000b 8013 000b 7fef 000b 8001 000b     ................
   bcb90:	7f21 000b 7fdf 000b 820b 000b 8209 000b     !...............
   bcba0:	802b 000b 8069 000b 80a3 000b 80e9 000b     +...i...........
   bcbb0:	8105 000b 8189 000b 6e55 6e6b 776f 206e     ........Unknown 
   bcbc0:	7265 6f72 0072 7553 6363 7365 2e73 4500     error.Success..E
   bcbd0:	7272 726f 6920 206e 6f63 6d6d 6e75 6369     rror in communic
   bcbe0:	7461 6f69 2e6e 4300 6c6f 696c 7373 6f69     ation..Collissio
   bcbf0:	206e 6564 6574 7463 6465 002e 6954 656d     n detected..Time
   bcc00:	756f 2074 6e69 6320 6d6f 756d 696e 6163     out in communica
   bcc10:	6974 6e6f 002e 2041 7562 6666 7265 6920     tion..A buffer i
   bcc20:	2073 6f6e 2074 6962 2067 6e65 756f 6867     s not big enough
   bcc30:	002e 6e49 6574 6e72 6c61 6520 7272 726f     ..Internal error
   bcc40:	6920 206e 6874 2065 6f63 6564 202e 6853      in the code. Sh
   bcc50:	756f 646c 6e20 746f 6820 7061 6570 2e6e     ould not happen.
   bcc60:	4900 766e 6c61 6469 6120 6772 6d75 6e65     .Invalid argumen
   bcc70:	2e74 5400 6568 4320 4352 415f 6420 656f     t..The CRC_A doe
   bcc80:	2073 6f6e 2074 616d 6374 2e68 4100 4d20     s not match..A M
   bcc90:	4649 5241 2045 4950 4343 7220 7365 6f70     IFARE PICC respo
   bcca0:	646e 6465 7720 7469 2068 414e 2e4b 0000     nded with NAK...

000bccb0 <CSWTCH.84>:
   bccb0:	cbc6 000b cbcf 000b cbe7 000b cbfc 000b     ................
   bccc0:	cc16 000b cc32 000b cc61 000b cc73 000b     ....2...a...s...
   bccd0:	cc8d 000b                                   ....

000bccd4 <_ZTVN8particle11SPISettingsE>:
	...
   bccdc:	7ecd 000b 7ebd 000b 7ebf 000b               .~...~...~..

000bcce8 <_ZL12splash2_data>:
   bcce8:	0000 0060 0000 0000 0000 0000 0000 0000     ..`.............
   bccf8:	e000 0000 0000 0000 0000 0000 0000 0100     ................
   bcd08:	00e0 0000 0000 0000 0000 0000 0000 f001     ................
	...
   bcd24:	0300 00f0 0000 0000 0000 0000 0000 0000     ................
   bcd34:	f007 0000 0000 0000 0000 0000 0000 0700     ................
   bcd44:	00f8 0000 0000 0000 0000 0000 0000 f80f     ................
   bcd54:	0000 0300 00c0 007e 0100 00e0 0f7f 00f8     ......~.........
   bcd64:	0000 c003 fe00 0000 e001 ff00 f8ef 0000     ................
   bcd74:	0300 00c0 00fe 0100 00e0 ffff 00f8 0000     ................
   bcd84:	c003 f000 0000 0f00 7f00 7ffe 00c0 0300     ................
   bcd94:	00c0 00f0 0000 000f fe3f f87f f13f cffb     ........?...?...
   bcda4:	fefc bcf3 ef3d 1fe0 7ffe 7fff fffb fedf     ....=...........
   bcdb4:	fffe 3dbc e0ef c61f ffff fb7f dfff fefe     ...=............
   bcdc4:	bcff ef3d 0fe0 c7e3 78fe c37b 1ede fff0     ..=......x{.....
   bcdd4:	3dbc 00ef ff07 fc87 7b78 dec3 f01e 3cf8     .=......x{.....<
   bcde4:	ef3d 0100 ffff 00f0 c37b 1ec0 f0f0 3d3c     =.......{.....<=
   bcdf4:	00ef f301 e07f fb3f cfc3 f0fe 3cf0 ef3d     ......?......<=.
   bce04:	0300 3fe3 7f80 c3fb fedf f0f0 3d3c 00ef     ...?........<=..
   bce14:	e707 003c 7b78 dec3 f01e 3cf0 ef3d 0700     ..<.x{.....<=...
   bce24:	beff 7800 c37b 1ede f0f0 3d3c 00ef ff07     ...x{.....<=....
   bce34:	00fe 7b78 dec3 f01e 3cf0 ef3d 0f00 feff     ..x{.....<=.....
   bce44:	7f00 fffb fedf f0f0 fd3f e0ef ff0f 00ff     ........?.......
   bce54:	fb7f dfff f0fe 3ff0 effd 0fe0 fff9 3e00     .......?.......>
   bce64:	f979 9ecf f0f0 3d1f e0e7 f11f 00ff 0000     y......=........
	...
   bce7c:	1f00 ff80 7f00 ffff ffff ffff ffff e0ff     ................
   bce8c:	001c 007f ff7f ffff b4fe 886d 188d 00e0     ..........m.....
   bce9c:	1f00 7f00 ffff feff ad95 b57d e077 0000     ..........}.w...
   bceac:	000f ff7f ffff a5fe 9dad 198d 00e0 0600     ................
   bcebc:	7f00 ffff feff adb5 b5ed e07e               ..........~.

000bcec8 <_ZL14sucreLogo_data>:
   bcec8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bced8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bcee8:	ffff ffff ffff fff8 ffff ffff ffff ffff     ................
   bcef8:	ffff ffff ffff 7fc0 ffff ffff ffff ffff     ................
   bcf08:	ffff ffff feff 7f00 ffff ffff ffff ffff     ................
   bcf18:	ffff ffff feff 7f00 ffff ffff ffff ffff     ................
   bcf28:	ffff ffff feff 3f00 ffff ffff ffff ffff     .......?........
   bcf38:	ffff ffff feff 3f00 ffff ffff ffff ffff     .......?........
   bcf48:	ffff ffff 3ffc 3f00 ffff ffff ffff ffff     .....?.?........
   bcf58:	ffff ffff 0ffc 1f00 ffff ffff ffff ffff     ................
   bcf68:	ffff ffff 07fc 1f00 ffff ffff ffff ffff     ................
   bcf78:	ffff ffff 07f8 3f00 ffff ffff ffff ffff     .......?........
   bcf88:	ffff ffff 07f8 ff83 ffff ffff ffff ffff     ................
   bcf98:	ffff ffff 0ff0 ffcf ffff ffff ffff ffff     ................
   bcfa8:	ffff ffff 0ff8 ffff ffff ffff ffff ffff     ................
   bcfb8:	ffff ffff 0ffe ffff ffff ffff ffff ffff     ................
   bcfc8:	ffff ffff 9fff ffff ffff ffff ffff ffff     ................
   bcfd8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bcfe8:	ffff ffff fcff ff1f ffff ffff ffff ffff     ................
   bcff8:	ffff 7fc0 fcff ff0d 3fe0 03ef c0ff ff7f     .........?......
   bd008:	feff 3f00 f8f3 ff09 0780 01e4 00ff ff1f     ...?............
   bd018:	fcff 1f3f f8f3 ff09 c31f f8e0 3ffc ff87     ..?..........?..
   bd028:	f8ff ffff f8f3 fe09 f13f fce1 fff8 ffe3     ........?.......
   bd038:	f1ff ffff f8f3 fc19 f87f ffe3 fff1 ffe3     ................
   bd048:	e3ff ffff fff3 f819 fcff ffe7 ffe3 ffc7     ................
   bd058:	e7ff ffff fff3 f1f9 feff ffe7 ffe7 ff8f     ................
   bd068:	c7ff ffff e7f3 f3f9 ffff ffe7 ffe7 ff1f     ................
   bd078:	cfff ffff c3f3 f3f9 ffff ffe7 fec7 ff3f     ..............?.
   bd088:	cfff ffff 81f3 f3f9 ffff ffe7 fccf ff7f     ................
   bd098:	c0ff 0000 00f3 e3f9 ffff ffe7 f8cf ffff     ................
   bd0a8:	c0ff 0000 0072 e379 ffff ffe7 f1cf ffff     ....r.y.........
   bd0b8:	feff 0000 0072 e379 ffff ffe7 e3cf ffff     ....r.y.........
   bd0c8:	ffff fcff 00f3 f3f9 ffff ffe7 c7c7 ffff     ................
   bd0d8:	ffff fcff 81f3 f3f9 ffff ffe7 8fc7 ffff     ................
   bd0e8:	ffff f8ff c3f3 f1f9 ffff ffe7 1fe7 ffff     ................
   bd0f8:	ffff f9ff e7f1 f9f1 fcff ffe7 3fe2 fffb     .............?..
   bd108:	ffff f1ff fff8 f8f1 fcff ffe7 7ff0 fff3     ................
   bd118:	ffff e3ff fffc fce1 f87f ffe7 fff8 ffe3     ................
   bd128:	feff c77f 3ffc fe81 e13f ffe7 7ffc ffc7     .....?..?.......
   bd138:	feff 0f1e 0efe ff09 8307 ffe7 0efe ff0f     ................
   bd148:	ffff 1f00 80ff ff39 0fc0 ffe7 00ff ff1f     ......9.........
   bd158:	ffff ffe0 e0ff ffff 7ff0 ffff e0ff ffff     ................
   bd168:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bd178:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bd188:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bd198:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bd1a8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bd1b8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bd1c8:	ffff ffff ffff ffff cfff ffff ffff ffff     ................
   bd1d8:	ffff ffff ffff ffff 9fff ffff ffff ffff     ................
   bd1e8:	ffff ffff ffff ffff 3fff feff 7cf6 ffff     .........?...|..
   bd1f8:	ffff ffff ffff ffff 7cff feff fce7 ffe7     .........|......
   bd208:	ffff ffff ffff ffff 78ff fe7c fccf ffc7     .........x|.....
   bd218:	ffff ffff ffff ffff 39ff fe31 e1df ff9f     .........91.....
   bd228:	ffff ffff ffff ffff 03fe fe93 413e ff8f     ............>A..
   bd238:	ffff ffff ffff ffff 33ff feb7 9c1e ffe3     .........3......
   bd248:	ffff ffff ffff ffff 73ff fe37 1dc6 ffbb     .........s7.....
   bd258:	ffff ffff ffff ffff 38ff fe27 9df2 ff39     .........8'...9.
   bd268:	ffff ffff ffff ffff 3cff fe67 417a ff93     .........<g.zA..
   bd278:	ffff ffff ffff ffff 3fff ffe7 61fe ff87     .........?...a..
   bd288:	ffff ffff ffff ffff ffff ffff fdff ffff     ................
   bd298:	ffff ffff ffff ffff ffff ffff fdff ffff     ................
   bd2a8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bd2b8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................

000bd2c8 <_ZTV16Adafruit_SSD1306>:
	...
   bd2d0:	94f1 000b 9509 000b 893d 000b a8f5 000b     ........=.......
   bd2e0:	951d 000b 7fdf 000b 7fe1 000b 8013 000b     ................
   bd2f0:	7fef 000b 8001 000b 7f21 000b 7fdf 000b     ........!.......
   bd300:	820b 000b 96af 000b 9c4b 000b 9bfd 000b     ........K.......
   bd310:	80a3 000b 80e9 000b 8105 000b 8189 000b     ................

000bd320 <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE7premask>:
   bd320:	8000 e0c0 f8f0 fefc                         ........

000bd328 <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE8postmask>:
   bd328:	0100 0703 1f0f 7f3f                         ......?.

000bd330 <_ZZN16Adafruit_SSD13065beginEhhbbE5init1>:
   bd330:	d5ae a880                                   ....

000bd334 <_ZZN16Adafruit_SSD13065beginEhhbbE5init2>:
   bd334:	00d3 8d40                                   ..@.

000bd338 <_ZZN16Adafruit_SSD13065beginEhhbbE5init3>:
   bd338:	0020 c8a1                                    ...

000bd33c <_ZZN16Adafruit_SSD13065beginEhhbbE5init5>:
   bd33c:	40db a6a4 af2e                              .@....

000bd342 <_ZZN16Adafruit_SSD13065beginEhhbbE6init4a>:
   bd342:	02da 8f81                                   ....

000bd346 <_ZZN16Adafruit_SSD13065beginEhhbbE6init4b>:
   bd346:	12da                                         ...

000bd349 <_ZZN16Adafruit_SSD13065beginEhhbbE6init4c>:
   bd349:	02da                                         ...

000bd34c <_ZZN16Adafruit_SSD13067displayEvE6dlist1>:
   bd34c:	0022 21ff 0000 0000                         "..!....

000bd354 <_ZTVN5spark13EthernetClassE>:
	...
   bd35c:	a4fb 000b a4f1 000b a4e7 000b a4dd 000b     ................
   bd36c:	a4d1 000b a4c5 000b b0d5 000b b0dd 000b     ................
   bd37c:	a4b9 000b a4b1 000b a4a7 000b a49d 000b     ................
   bd38c:	b10d 000b                                   ....

000bd390 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   bd390:	0800 1810 2820 3830 7061 0070 5925 252d     .... (08app.%Y-%
   bd3a0:	2d6d 6425 2554 3a48 4d25 253a 2553 007a     m-%dT%H:%M:%S%z.
   bd3b0:	7361 7463 6d69 0065                         asctime.

000bd3b8 <_ZTV9IPAddress>:
	...
   bd3c0:	ac6d 000b ac5d 000b ac5f 000b               m...]..._...

000bd3cc <_ZTV9USBSerial>:
	...
   bd3d4:	ad53 000b adbb 000b ad91 000b a8f5 000b     S...............
   bd3e4:	ad83 000b ad55 000b ad65 000b adb5 000b     ....U...e.......
   bd3f4:	ad75 000b ad4d 000b                         u...M...

000bd3fc <_ZTV11USARTSerial>:
	...
   bd404:	aeb1 000b af1d 000b aef5 000b a8f5 000b     ................
   bd414:	aec5 000b aee1 000b aed3 000b aeef 000b     ................
   bd424:	aeb3 000b aeb7 000b                         ........

000bd42c <_ZTV7TwoWire>:
	...
   bd434:	af55 000b af9f 000b af77 000b af57 000b     U.......w...W...
   bd444:	af7f 000b af87 000b af8f 000b af97 000b     ................

000bd454 <_ZTVN5spark9WiFiClassE>:
	...
   bd45c:	b077 000b b06d 000b b063 000b b019 000b     w...m...c.......
   bd46c:	b057 000b b04b 000b b0d5 000b b0dd 000b     W...K...........
   bd47c:	b03f 000b b037 000b b02d 000b b023 000b     ?...7...-...#...
   bd48c:	b10d 000b                                   ....

000bd490 <_ZTVN5spark12NetworkClassE>:
	...
   bd498:	b095 000b b09f 000b b0a9 000b b0b3 000b     ................
   bd4a8:	b0bd 000b b0c9 000b b0d5 000b b0dd 000b     ................
   bd4b8:	b0e5 000b b0f1 000b b0f9 000b b103 000b     ................
   bd4c8:	b10d 000b                                   ....

000bd4cc <_ZSt7nothrow>:
   bd4cc:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
   bd4dc:	6363 6565 6564 0064 6d2f 746e 772f 726f     cceeded./mnt/wor
   bd4ec:	736b 6170 6563 772f 726f 736b 6170 6563     kspace/workspace
   bd4fc:	472f 4343 312d 2d30 6970 6570 696c 656e     /GCC-10-pipeline
   bd50c:	6a2f 6e65 696b 736e 472d 4343 312d 2d30     /jenkins-GCC-10-
   bd51c:	6970 6570 696c 656e 342d 5f38 3032 3032     pipeline-48_2020
   bd52c:	3131 3432 315f 3036 3136 3038 3436 2f31     1124_1606180641/
   bd53c:	7273 2f63 656e 6c77 6269 6e2f 7765 696c     src/newlib/newli
   bd54c:	2f62 696c 6362 732f 6474 696c 2f62 6172     b/libc/stdlib/ra
   bd55c:	646e 632e 2f00 6e6d 2f74 6f77 6b72 7073     nd.c./mnt/worksp
   bd56c:	6361 2f65 6f77 6b72 7073 6361 2f65 4347     ace/workspace/GC
   bd57c:	2d43 3031 702d 7069 6c65 6e69 2f65 656a     C-10-pipeline/je
   bd58c:	6b6e 6e69 2d73 4347 2d43 3031 702d 7069     nkins-GCC-10-pip
   bd59c:	6c65 6e69 2d65 3834 325f 3230 3130 3231     eline-48_2020112
   bd5ac:	5f34 3631 3630 3831 3630 3134 732f 6372     4_1606180641/src
   bd5bc:	6e2f 7765 696c 2f62 656e 6c77 6269 6c2f     /newlib/newlib/l
   bd5cc:	6269 2f63 7473 6972 676e 732f 7274 6f74     ibc/string/strto
   bd5dc:	2e6b 0063                                   k.c.

000bd5e0 <link_const_data_end>:
   bd5e0:	000b6071 	.word	0x000b6071
   bd5e4:	000ba505 	.word	0x000ba505
   bd5e8:	000ba67d 	.word	0x000ba67d
   bd5ec:	000ba8e5 	.word	0x000ba8e5
   bd5f0:	000baa1d 	.word	0x000baa1d
   bd5f4:	000baa2d 	.word	0x000baa2d
   bd5f8:	000baae5 	.word	0x000baae5
   bd5fc:	000bb081 	.word	0x000bb081
   bd600:	000bb1e5 	.word	0x000bb1e5
