
c:/Users/SVO/GITSUCRE/Sucre4Kids/target/5.3.0/argon/Sucre4Kids.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000095c4  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000bd5e4  000bd5e4  0000d5e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .data         000000bc  2003c674  000bd608  0001c674  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000020c0  2003c730  2003c730  0003c730  2**2
                  ALLOC
  6 .backup       00000004  2003f400  000bd6c4  0001f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_product 00000006  000bd6c8  000bd6c8  0002d6c8  2**0
                  ALLOC
  8 .module_info_suffix 00000024  000bd6ce  000bd6ce  0002d6ce  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .module_info_crc 00000004  000bd6f2  000bd6f2  0002d6f2  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .debug_info   001774bd  00000000  00000000  0002d6f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0001978e  00000000  00000000  001a4bb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    00054431  00000000  00000000  001be341  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000038f8  00000000  00000000  00212772  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 0000ca18  00000000  00000000  0021606a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00045c10  00000000  00000000  00222a82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0005d5bb  00000000  00000000  00268692  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00146888  00000000  00000000  002c5c4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  0000ae70  00000000  00000000  0040c4d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <__aeabi_drsub>:
   b4020:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b4024:	e002      	b.n	b402c <__adddf3>
   b4026:	bf00      	nop

000b4028 <__aeabi_dsub>:
   b4028:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b402c <__adddf3>:
   b402c:	b530      	push	{r4, r5, lr}
   b402e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b4032:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b4036:	ea94 0f05 	teq	r4, r5
   b403a:	bf08      	it	eq
   b403c:	ea90 0f02 	teqeq	r0, r2
   b4040:	bf1f      	itttt	ne
   b4042:	ea54 0c00 	orrsne.w	ip, r4, r0
   b4046:	ea55 0c02 	orrsne.w	ip, r5, r2
   b404a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b404e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b4052:	f000 80e2 	beq.w	b421a <__adddf3+0x1ee>
   b4056:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b405a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b405e:	bfb8      	it	lt
   b4060:	426d      	neglt	r5, r5
   b4062:	dd0c      	ble.n	b407e <__adddf3+0x52>
   b4064:	442c      	add	r4, r5
   b4066:	ea80 0202 	eor.w	r2, r0, r2
   b406a:	ea81 0303 	eor.w	r3, r1, r3
   b406e:	ea82 0000 	eor.w	r0, r2, r0
   b4072:	ea83 0101 	eor.w	r1, r3, r1
   b4076:	ea80 0202 	eor.w	r2, r0, r2
   b407a:	ea81 0303 	eor.w	r3, r1, r3
   b407e:	2d36      	cmp	r5, #54	; 0x36
   b4080:	bf88      	it	hi
   b4082:	bd30      	pophi	{r4, r5, pc}
   b4084:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b4088:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b408c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b4090:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b4094:	d002      	beq.n	b409c <__adddf3+0x70>
   b4096:	4240      	negs	r0, r0
   b4098:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b409c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b40a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b40a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b40a8:	d002      	beq.n	b40b0 <__adddf3+0x84>
   b40aa:	4252      	negs	r2, r2
   b40ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b40b0:	ea94 0f05 	teq	r4, r5
   b40b4:	f000 80a7 	beq.w	b4206 <__adddf3+0x1da>
   b40b8:	f1a4 0401 	sub.w	r4, r4, #1
   b40bc:	f1d5 0e20 	rsbs	lr, r5, #32
   b40c0:	db0d      	blt.n	b40de <__adddf3+0xb2>
   b40c2:	fa02 fc0e 	lsl.w	ip, r2, lr
   b40c6:	fa22 f205 	lsr.w	r2, r2, r5
   b40ca:	1880      	adds	r0, r0, r2
   b40cc:	f141 0100 	adc.w	r1, r1, #0
   b40d0:	fa03 f20e 	lsl.w	r2, r3, lr
   b40d4:	1880      	adds	r0, r0, r2
   b40d6:	fa43 f305 	asr.w	r3, r3, r5
   b40da:	4159      	adcs	r1, r3
   b40dc:	e00e      	b.n	b40fc <__adddf3+0xd0>
   b40de:	f1a5 0520 	sub.w	r5, r5, #32
   b40e2:	f10e 0e20 	add.w	lr, lr, #32
   b40e6:	2a01      	cmp	r2, #1
   b40e8:	fa03 fc0e 	lsl.w	ip, r3, lr
   b40ec:	bf28      	it	cs
   b40ee:	f04c 0c02 	orrcs.w	ip, ip, #2
   b40f2:	fa43 f305 	asr.w	r3, r3, r5
   b40f6:	18c0      	adds	r0, r0, r3
   b40f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b40fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b4100:	d507      	bpl.n	b4112 <__adddf3+0xe6>
   b4102:	f04f 0e00 	mov.w	lr, #0
   b4106:	f1dc 0c00 	rsbs	ip, ip, #0
   b410a:	eb7e 0000 	sbcs.w	r0, lr, r0
   b410e:	eb6e 0101 	sbc.w	r1, lr, r1
   b4112:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b4116:	d31b      	bcc.n	b4150 <__adddf3+0x124>
   b4118:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b411c:	d30c      	bcc.n	b4138 <__adddf3+0x10c>
   b411e:	0849      	lsrs	r1, r1, #1
   b4120:	ea5f 0030 	movs.w	r0, r0, rrx
   b4124:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b4128:	f104 0401 	add.w	r4, r4, #1
   b412c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b4130:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b4134:	f080 809a 	bcs.w	b426c <__adddf3+0x240>
   b4138:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b413c:	bf08      	it	eq
   b413e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b4142:	f150 0000 	adcs.w	r0, r0, #0
   b4146:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b414a:	ea41 0105 	orr.w	r1, r1, r5
   b414e:	bd30      	pop	{r4, r5, pc}
   b4150:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b4154:	4140      	adcs	r0, r0
   b4156:	eb41 0101 	adc.w	r1, r1, r1
   b415a:	3c01      	subs	r4, #1
   b415c:	bf28      	it	cs
   b415e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b4162:	d2e9      	bcs.n	b4138 <__adddf3+0x10c>
   b4164:	f091 0f00 	teq	r1, #0
   b4168:	bf04      	itt	eq
   b416a:	4601      	moveq	r1, r0
   b416c:	2000      	moveq	r0, #0
   b416e:	fab1 f381 	clz	r3, r1
   b4172:	bf08      	it	eq
   b4174:	3320      	addeq	r3, #32
   b4176:	f1a3 030b 	sub.w	r3, r3, #11
   b417a:	f1b3 0220 	subs.w	r2, r3, #32
   b417e:	da0c      	bge.n	b419a <__adddf3+0x16e>
   b4180:	320c      	adds	r2, #12
   b4182:	dd08      	ble.n	b4196 <__adddf3+0x16a>
   b4184:	f102 0c14 	add.w	ip, r2, #20
   b4188:	f1c2 020c 	rsb	r2, r2, #12
   b418c:	fa01 f00c 	lsl.w	r0, r1, ip
   b4190:	fa21 f102 	lsr.w	r1, r1, r2
   b4194:	e00c      	b.n	b41b0 <__adddf3+0x184>
   b4196:	f102 0214 	add.w	r2, r2, #20
   b419a:	bfd8      	it	le
   b419c:	f1c2 0c20 	rsble	ip, r2, #32
   b41a0:	fa01 f102 	lsl.w	r1, r1, r2
   b41a4:	fa20 fc0c 	lsr.w	ip, r0, ip
   b41a8:	bfdc      	itt	le
   b41aa:	ea41 010c 	orrle.w	r1, r1, ip
   b41ae:	4090      	lslle	r0, r2
   b41b0:	1ae4      	subs	r4, r4, r3
   b41b2:	bfa2      	ittt	ge
   b41b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b41b8:	4329      	orrge	r1, r5
   b41ba:	bd30      	popge	{r4, r5, pc}
   b41bc:	ea6f 0404 	mvn.w	r4, r4
   b41c0:	3c1f      	subs	r4, #31
   b41c2:	da1c      	bge.n	b41fe <__adddf3+0x1d2>
   b41c4:	340c      	adds	r4, #12
   b41c6:	dc0e      	bgt.n	b41e6 <__adddf3+0x1ba>
   b41c8:	f104 0414 	add.w	r4, r4, #20
   b41cc:	f1c4 0220 	rsb	r2, r4, #32
   b41d0:	fa20 f004 	lsr.w	r0, r0, r4
   b41d4:	fa01 f302 	lsl.w	r3, r1, r2
   b41d8:	ea40 0003 	orr.w	r0, r0, r3
   b41dc:	fa21 f304 	lsr.w	r3, r1, r4
   b41e0:	ea45 0103 	orr.w	r1, r5, r3
   b41e4:	bd30      	pop	{r4, r5, pc}
   b41e6:	f1c4 040c 	rsb	r4, r4, #12
   b41ea:	f1c4 0220 	rsb	r2, r4, #32
   b41ee:	fa20 f002 	lsr.w	r0, r0, r2
   b41f2:	fa01 f304 	lsl.w	r3, r1, r4
   b41f6:	ea40 0003 	orr.w	r0, r0, r3
   b41fa:	4629      	mov	r1, r5
   b41fc:	bd30      	pop	{r4, r5, pc}
   b41fe:	fa21 f004 	lsr.w	r0, r1, r4
   b4202:	4629      	mov	r1, r5
   b4204:	bd30      	pop	{r4, r5, pc}
   b4206:	f094 0f00 	teq	r4, #0
   b420a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b420e:	bf06      	itte	eq
   b4210:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b4214:	3401      	addeq	r4, #1
   b4216:	3d01      	subne	r5, #1
   b4218:	e74e      	b.n	b40b8 <__adddf3+0x8c>
   b421a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b421e:	bf18      	it	ne
   b4220:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b4224:	d029      	beq.n	b427a <__adddf3+0x24e>
   b4226:	ea94 0f05 	teq	r4, r5
   b422a:	bf08      	it	eq
   b422c:	ea90 0f02 	teqeq	r0, r2
   b4230:	d005      	beq.n	b423e <__adddf3+0x212>
   b4232:	ea54 0c00 	orrs.w	ip, r4, r0
   b4236:	bf04      	itt	eq
   b4238:	4619      	moveq	r1, r3
   b423a:	4610      	moveq	r0, r2
   b423c:	bd30      	pop	{r4, r5, pc}
   b423e:	ea91 0f03 	teq	r1, r3
   b4242:	bf1e      	ittt	ne
   b4244:	2100      	movne	r1, #0
   b4246:	2000      	movne	r0, #0
   b4248:	bd30      	popne	{r4, r5, pc}
   b424a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b424e:	d105      	bne.n	b425c <__adddf3+0x230>
   b4250:	0040      	lsls	r0, r0, #1
   b4252:	4149      	adcs	r1, r1
   b4254:	bf28      	it	cs
   b4256:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b425a:	bd30      	pop	{r4, r5, pc}
   b425c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b4260:	bf3c      	itt	cc
   b4262:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b4266:	bd30      	popcc	{r4, r5, pc}
   b4268:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b426c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b4270:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b4274:	f04f 0000 	mov.w	r0, #0
   b4278:	bd30      	pop	{r4, r5, pc}
   b427a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b427e:	bf1a      	itte	ne
   b4280:	4619      	movne	r1, r3
   b4282:	4610      	movne	r0, r2
   b4284:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b4288:	bf1c      	itt	ne
   b428a:	460b      	movne	r3, r1
   b428c:	4602      	movne	r2, r0
   b428e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b4292:	bf06      	itte	eq
   b4294:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b4298:	ea91 0f03 	teqeq	r1, r3
   b429c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b42a0:	bd30      	pop	{r4, r5, pc}
   b42a2:	bf00      	nop

000b42a4 <__aeabi_ui2d>:
   b42a4:	f090 0f00 	teq	r0, #0
   b42a8:	bf04      	itt	eq
   b42aa:	2100      	moveq	r1, #0
   b42ac:	4770      	bxeq	lr
   b42ae:	b530      	push	{r4, r5, lr}
   b42b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b42b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b42b8:	f04f 0500 	mov.w	r5, #0
   b42bc:	f04f 0100 	mov.w	r1, #0
   b42c0:	e750      	b.n	b4164 <__adddf3+0x138>
   b42c2:	bf00      	nop

000b42c4 <__aeabi_i2d>:
   b42c4:	f090 0f00 	teq	r0, #0
   b42c8:	bf04      	itt	eq
   b42ca:	2100      	moveq	r1, #0
   b42cc:	4770      	bxeq	lr
   b42ce:	b530      	push	{r4, r5, lr}
   b42d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b42d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b42d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b42dc:	bf48      	it	mi
   b42de:	4240      	negmi	r0, r0
   b42e0:	f04f 0100 	mov.w	r1, #0
   b42e4:	e73e      	b.n	b4164 <__adddf3+0x138>
   b42e6:	bf00      	nop

000b42e8 <__aeabi_f2d>:
   b42e8:	0042      	lsls	r2, r0, #1
   b42ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b42ee:	ea4f 0131 	mov.w	r1, r1, rrx
   b42f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b42f6:	bf1f      	itttt	ne
   b42f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b42fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b4300:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b4304:	4770      	bxne	lr
   b4306:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b430a:	bf08      	it	eq
   b430c:	4770      	bxeq	lr
   b430e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b4312:	bf04      	itt	eq
   b4314:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b4318:	4770      	bxeq	lr
   b431a:	b530      	push	{r4, r5, lr}
   b431c:	f44f 7460 	mov.w	r4, #896	; 0x380
   b4320:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b4324:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b4328:	e71c      	b.n	b4164 <__adddf3+0x138>
   b432a:	bf00      	nop

000b432c <__aeabi_ul2d>:
   b432c:	ea50 0201 	orrs.w	r2, r0, r1
   b4330:	bf08      	it	eq
   b4332:	4770      	bxeq	lr
   b4334:	b530      	push	{r4, r5, lr}
   b4336:	f04f 0500 	mov.w	r5, #0
   b433a:	e00a      	b.n	b4352 <__aeabi_l2d+0x16>

000b433c <__aeabi_l2d>:
   b433c:	ea50 0201 	orrs.w	r2, r0, r1
   b4340:	bf08      	it	eq
   b4342:	4770      	bxeq	lr
   b4344:	b530      	push	{r4, r5, lr}
   b4346:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b434a:	d502      	bpl.n	b4352 <__aeabi_l2d+0x16>
   b434c:	4240      	negs	r0, r0
   b434e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b4352:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b4356:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b435a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b435e:	f43f aed8 	beq.w	b4112 <__adddf3+0xe6>
   b4362:	f04f 0203 	mov.w	r2, #3
   b4366:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b436a:	bf18      	it	ne
   b436c:	3203      	addne	r2, #3
   b436e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b4372:	bf18      	it	ne
   b4374:	3203      	addne	r2, #3
   b4376:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b437a:	f1c2 0320 	rsb	r3, r2, #32
   b437e:	fa00 fc03 	lsl.w	ip, r0, r3
   b4382:	fa20 f002 	lsr.w	r0, r0, r2
   b4386:	fa01 fe03 	lsl.w	lr, r1, r3
   b438a:	ea40 000e 	orr.w	r0, r0, lr
   b438e:	fa21 f102 	lsr.w	r1, r1, r2
   b4392:	4414      	add	r4, r2
   b4394:	e6bd      	b.n	b4112 <__adddf3+0xe6>
   b4396:	bf00      	nop

000b4398 <__aeabi_dmul>:
   b4398:	b570      	push	{r4, r5, r6, lr}
   b439a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b439e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b43a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b43a6:	bf1d      	ittte	ne
   b43a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b43ac:	ea94 0f0c 	teqne	r4, ip
   b43b0:	ea95 0f0c 	teqne	r5, ip
   b43b4:	f000 f8de 	bleq	b4574 <__aeabi_dmul+0x1dc>
   b43b8:	442c      	add	r4, r5
   b43ba:	ea81 0603 	eor.w	r6, r1, r3
   b43be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b43c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b43c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b43ca:	bf18      	it	ne
   b43cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b43d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b43d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b43d8:	d038      	beq.n	b444c <__aeabi_dmul+0xb4>
   b43da:	fba0 ce02 	umull	ip, lr, r0, r2
   b43de:	f04f 0500 	mov.w	r5, #0
   b43e2:	fbe1 e502 	umlal	lr, r5, r1, r2
   b43e6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b43ea:	fbe0 e503 	umlal	lr, r5, r0, r3
   b43ee:	f04f 0600 	mov.w	r6, #0
   b43f2:	fbe1 5603 	umlal	r5, r6, r1, r3
   b43f6:	f09c 0f00 	teq	ip, #0
   b43fa:	bf18      	it	ne
   b43fc:	f04e 0e01 	orrne.w	lr, lr, #1
   b4400:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b4404:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b4408:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b440c:	d204      	bcs.n	b4418 <__aeabi_dmul+0x80>
   b440e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b4412:	416d      	adcs	r5, r5
   b4414:	eb46 0606 	adc.w	r6, r6, r6
   b4418:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b441c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b4420:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b4424:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b4428:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b442c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b4430:	bf88      	it	hi
   b4432:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b4436:	d81e      	bhi.n	b4476 <__aeabi_dmul+0xde>
   b4438:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b443c:	bf08      	it	eq
   b443e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b4442:	f150 0000 	adcs.w	r0, r0, #0
   b4446:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b444a:	bd70      	pop	{r4, r5, r6, pc}
   b444c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b4450:	ea46 0101 	orr.w	r1, r6, r1
   b4454:	ea40 0002 	orr.w	r0, r0, r2
   b4458:	ea81 0103 	eor.w	r1, r1, r3
   b445c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b4460:	bfc2      	ittt	gt
   b4462:	ebd4 050c 	rsbsgt	r5, r4, ip
   b4466:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b446a:	bd70      	popgt	{r4, r5, r6, pc}
   b446c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b4470:	f04f 0e00 	mov.w	lr, #0
   b4474:	3c01      	subs	r4, #1
   b4476:	f300 80ab 	bgt.w	b45d0 <__aeabi_dmul+0x238>
   b447a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b447e:	bfde      	ittt	le
   b4480:	2000      	movle	r0, #0
   b4482:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b4486:	bd70      	pople	{r4, r5, r6, pc}
   b4488:	f1c4 0400 	rsb	r4, r4, #0
   b448c:	3c20      	subs	r4, #32
   b448e:	da35      	bge.n	b44fc <__aeabi_dmul+0x164>
   b4490:	340c      	adds	r4, #12
   b4492:	dc1b      	bgt.n	b44cc <__aeabi_dmul+0x134>
   b4494:	f104 0414 	add.w	r4, r4, #20
   b4498:	f1c4 0520 	rsb	r5, r4, #32
   b449c:	fa00 f305 	lsl.w	r3, r0, r5
   b44a0:	fa20 f004 	lsr.w	r0, r0, r4
   b44a4:	fa01 f205 	lsl.w	r2, r1, r5
   b44a8:	ea40 0002 	orr.w	r0, r0, r2
   b44ac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b44b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b44b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b44b8:	fa21 f604 	lsr.w	r6, r1, r4
   b44bc:	eb42 0106 	adc.w	r1, r2, r6
   b44c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b44c4:	bf08      	it	eq
   b44c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b44ca:	bd70      	pop	{r4, r5, r6, pc}
   b44cc:	f1c4 040c 	rsb	r4, r4, #12
   b44d0:	f1c4 0520 	rsb	r5, r4, #32
   b44d4:	fa00 f304 	lsl.w	r3, r0, r4
   b44d8:	fa20 f005 	lsr.w	r0, r0, r5
   b44dc:	fa01 f204 	lsl.w	r2, r1, r4
   b44e0:	ea40 0002 	orr.w	r0, r0, r2
   b44e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b44e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b44ec:	f141 0100 	adc.w	r1, r1, #0
   b44f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b44f4:	bf08      	it	eq
   b44f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b44fa:	bd70      	pop	{r4, r5, r6, pc}
   b44fc:	f1c4 0520 	rsb	r5, r4, #32
   b4500:	fa00 f205 	lsl.w	r2, r0, r5
   b4504:	ea4e 0e02 	orr.w	lr, lr, r2
   b4508:	fa20 f304 	lsr.w	r3, r0, r4
   b450c:	fa01 f205 	lsl.w	r2, r1, r5
   b4510:	ea43 0302 	orr.w	r3, r3, r2
   b4514:	fa21 f004 	lsr.w	r0, r1, r4
   b4518:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b451c:	fa21 f204 	lsr.w	r2, r1, r4
   b4520:	ea20 0002 	bic.w	r0, r0, r2
   b4524:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b4528:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b452c:	bf08      	it	eq
   b452e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b4532:	bd70      	pop	{r4, r5, r6, pc}
   b4534:	f094 0f00 	teq	r4, #0
   b4538:	d10f      	bne.n	b455a <__aeabi_dmul+0x1c2>
   b453a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b453e:	0040      	lsls	r0, r0, #1
   b4540:	eb41 0101 	adc.w	r1, r1, r1
   b4544:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b4548:	bf08      	it	eq
   b454a:	3c01      	subeq	r4, #1
   b454c:	d0f7      	beq.n	b453e <__aeabi_dmul+0x1a6>
   b454e:	ea41 0106 	orr.w	r1, r1, r6
   b4552:	f095 0f00 	teq	r5, #0
   b4556:	bf18      	it	ne
   b4558:	4770      	bxne	lr
   b455a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b455e:	0052      	lsls	r2, r2, #1
   b4560:	eb43 0303 	adc.w	r3, r3, r3
   b4564:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b4568:	bf08      	it	eq
   b456a:	3d01      	subeq	r5, #1
   b456c:	d0f7      	beq.n	b455e <__aeabi_dmul+0x1c6>
   b456e:	ea43 0306 	orr.w	r3, r3, r6
   b4572:	4770      	bx	lr
   b4574:	ea94 0f0c 	teq	r4, ip
   b4578:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b457c:	bf18      	it	ne
   b457e:	ea95 0f0c 	teqne	r5, ip
   b4582:	d00c      	beq.n	b459e <__aeabi_dmul+0x206>
   b4584:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b4588:	bf18      	it	ne
   b458a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b458e:	d1d1      	bne.n	b4534 <__aeabi_dmul+0x19c>
   b4590:	ea81 0103 	eor.w	r1, r1, r3
   b4594:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b4598:	f04f 0000 	mov.w	r0, #0
   b459c:	bd70      	pop	{r4, r5, r6, pc}
   b459e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b45a2:	bf06      	itte	eq
   b45a4:	4610      	moveq	r0, r2
   b45a6:	4619      	moveq	r1, r3
   b45a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b45ac:	d019      	beq.n	b45e2 <__aeabi_dmul+0x24a>
   b45ae:	ea94 0f0c 	teq	r4, ip
   b45b2:	d102      	bne.n	b45ba <__aeabi_dmul+0x222>
   b45b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b45b8:	d113      	bne.n	b45e2 <__aeabi_dmul+0x24a>
   b45ba:	ea95 0f0c 	teq	r5, ip
   b45be:	d105      	bne.n	b45cc <__aeabi_dmul+0x234>
   b45c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b45c4:	bf1c      	itt	ne
   b45c6:	4610      	movne	r0, r2
   b45c8:	4619      	movne	r1, r3
   b45ca:	d10a      	bne.n	b45e2 <__aeabi_dmul+0x24a>
   b45cc:	ea81 0103 	eor.w	r1, r1, r3
   b45d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b45d4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b45d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b45dc:	f04f 0000 	mov.w	r0, #0
   b45e0:	bd70      	pop	{r4, r5, r6, pc}
   b45e2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b45e6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b45ea:	bd70      	pop	{r4, r5, r6, pc}

000b45ec <__aeabi_ddiv>:
   b45ec:	b570      	push	{r4, r5, r6, lr}
   b45ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b45f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b45f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b45fa:	bf1d      	ittte	ne
   b45fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b4600:	ea94 0f0c 	teqne	r4, ip
   b4604:	ea95 0f0c 	teqne	r5, ip
   b4608:	f000 f8a7 	bleq	b475a <__aeabi_ddiv+0x16e>
   b460c:	eba4 0405 	sub.w	r4, r4, r5
   b4610:	ea81 0e03 	eor.w	lr, r1, r3
   b4614:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b4618:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b461c:	f000 8088 	beq.w	b4730 <__aeabi_ddiv+0x144>
   b4620:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b4624:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b4628:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b462c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b4630:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b4634:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b4638:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b463c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b4640:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b4644:	429d      	cmp	r5, r3
   b4646:	bf08      	it	eq
   b4648:	4296      	cmpeq	r6, r2
   b464a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b464e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b4652:	d202      	bcs.n	b465a <__aeabi_ddiv+0x6e>
   b4654:	085b      	lsrs	r3, r3, #1
   b4656:	ea4f 0232 	mov.w	r2, r2, rrx
   b465a:	1ab6      	subs	r6, r6, r2
   b465c:	eb65 0503 	sbc.w	r5, r5, r3
   b4660:	085b      	lsrs	r3, r3, #1
   b4662:	ea4f 0232 	mov.w	r2, r2, rrx
   b4666:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b466a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b466e:	ebb6 0e02 	subs.w	lr, r6, r2
   b4672:	eb75 0e03 	sbcs.w	lr, r5, r3
   b4676:	bf22      	ittt	cs
   b4678:	1ab6      	subcs	r6, r6, r2
   b467a:	4675      	movcs	r5, lr
   b467c:	ea40 000c 	orrcs.w	r0, r0, ip
   b4680:	085b      	lsrs	r3, r3, #1
   b4682:	ea4f 0232 	mov.w	r2, r2, rrx
   b4686:	ebb6 0e02 	subs.w	lr, r6, r2
   b468a:	eb75 0e03 	sbcs.w	lr, r5, r3
   b468e:	bf22      	ittt	cs
   b4690:	1ab6      	subcs	r6, r6, r2
   b4692:	4675      	movcs	r5, lr
   b4694:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b4698:	085b      	lsrs	r3, r3, #1
   b469a:	ea4f 0232 	mov.w	r2, r2, rrx
   b469e:	ebb6 0e02 	subs.w	lr, r6, r2
   b46a2:	eb75 0e03 	sbcs.w	lr, r5, r3
   b46a6:	bf22      	ittt	cs
   b46a8:	1ab6      	subcs	r6, r6, r2
   b46aa:	4675      	movcs	r5, lr
   b46ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b46b0:	085b      	lsrs	r3, r3, #1
   b46b2:	ea4f 0232 	mov.w	r2, r2, rrx
   b46b6:	ebb6 0e02 	subs.w	lr, r6, r2
   b46ba:	eb75 0e03 	sbcs.w	lr, r5, r3
   b46be:	bf22      	ittt	cs
   b46c0:	1ab6      	subcs	r6, r6, r2
   b46c2:	4675      	movcs	r5, lr
   b46c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b46c8:	ea55 0e06 	orrs.w	lr, r5, r6
   b46cc:	d018      	beq.n	b4700 <__aeabi_ddiv+0x114>
   b46ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b46d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b46d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b46da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b46de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b46e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b46e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b46ea:	d1c0      	bne.n	b466e <__aeabi_ddiv+0x82>
   b46ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b46f0:	d10b      	bne.n	b470a <__aeabi_ddiv+0x11e>
   b46f2:	ea41 0100 	orr.w	r1, r1, r0
   b46f6:	f04f 0000 	mov.w	r0, #0
   b46fa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b46fe:	e7b6      	b.n	b466e <__aeabi_ddiv+0x82>
   b4700:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b4704:	bf04      	itt	eq
   b4706:	4301      	orreq	r1, r0
   b4708:	2000      	moveq	r0, #0
   b470a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b470e:	bf88      	it	hi
   b4710:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b4714:	f63f aeaf 	bhi.w	b4476 <__aeabi_dmul+0xde>
   b4718:	ebb5 0c03 	subs.w	ip, r5, r3
   b471c:	bf04      	itt	eq
   b471e:	ebb6 0c02 	subseq.w	ip, r6, r2
   b4722:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b4726:	f150 0000 	adcs.w	r0, r0, #0
   b472a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b472e:	bd70      	pop	{r4, r5, r6, pc}
   b4730:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b4734:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b4738:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b473c:	bfc2      	ittt	gt
   b473e:	ebd4 050c 	rsbsgt	r5, r4, ip
   b4742:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b4746:	bd70      	popgt	{r4, r5, r6, pc}
   b4748:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b474c:	f04f 0e00 	mov.w	lr, #0
   b4750:	3c01      	subs	r4, #1
   b4752:	e690      	b.n	b4476 <__aeabi_dmul+0xde>
   b4754:	ea45 0e06 	orr.w	lr, r5, r6
   b4758:	e68d      	b.n	b4476 <__aeabi_dmul+0xde>
   b475a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b475e:	ea94 0f0c 	teq	r4, ip
   b4762:	bf08      	it	eq
   b4764:	ea95 0f0c 	teqeq	r5, ip
   b4768:	f43f af3b 	beq.w	b45e2 <__aeabi_dmul+0x24a>
   b476c:	ea94 0f0c 	teq	r4, ip
   b4770:	d10a      	bne.n	b4788 <__aeabi_ddiv+0x19c>
   b4772:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b4776:	f47f af34 	bne.w	b45e2 <__aeabi_dmul+0x24a>
   b477a:	ea95 0f0c 	teq	r5, ip
   b477e:	f47f af25 	bne.w	b45cc <__aeabi_dmul+0x234>
   b4782:	4610      	mov	r0, r2
   b4784:	4619      	mov	r1, r3
   b4786:	e72c      	b.n	b45e2 <__aeabi_dmul+0x24a>
   b4788:	ea95 0f0c 	teq	r5, ip
   b478c:	d106      	bne.n	b479c <__aeabi_ddiv+0x1b0>
   b478e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b4792:	f43f aefd 	beq.w	b4590 <__aeabi_dmul+0x1f8>
   b4796:	4610      	mov	r0, r2
   b4798:	4619      	mov	r1, r3
   b479a:	e722      	b.n	b45e2 <__aeabi_dmul+0x24a>
   b479c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b47a0:	bf18      	it	ne
   b47a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b47a6:	f47f aec5 	bne.w	b4534 <__aeabi_dmul+0x19c>
   b47aa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b47ae:	f47f af0d 	bne.w	b45cc <__aeabi_dmul+0x234>
   b47b2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b47b6:	f47f aeeb 	bne.w	b4590 <__aeabi_dmul+0x1f8>
   b47ba:	e712      	b.n	b45e2 <__aeabi_dmul+0x24a>

000b47bc <__gedf2>:
   b47bc:	f04f 3cff 	mov.w	ip, #4294967295
   b47c0:	e006      	b.n	b47d0 <__cmpdf2+0x4>
   b47c2:	bf00      	nop

000b47c4 <__ledf2>:
   b47c4:	f04f 0c01 	mov.w	ip, #1
   b47c8:	e002      	b.n	b47d0 <__cmpdf2+0x4>
   b47ca:	bf00      	nop

000b47cc <__cmpdf2>:
   b47cc:	f04f 0c01 	mov.w	ip, #1
   b47d0:	f84d cd04 	str.w	ip, [sp, #-4]!
   b47d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b47d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b47dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b47e0:	bf18      	it	ne
   b47e2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   b47e6:	d01b      	beq.n	b4820 <__cmpdf2+0x54>
   b47e8:	b001      	add	sp, #4
   b47ea:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   b47ee:	bf0c      	ite	eq
   b47f0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   b47f4:	ea91 0f03 	teqne	r1, r3
   b47f8:	bf02      	ittt	eq
   b47fa:	ea90 0f02 	teqeq	r0, r2
   b47fe:	2000      	moveq	r0, #0
   b4800:	4770      	bxeq	lr
   b4802:	f110 0f00 	cmn.w	r0, #0
   b4806:	ea91 0f03 	teq	r1, r3
   b480a:	bf58      	it	pl
   b480c:	4299      	cmppl	r1, r3
   b480e:	bf08      	it	eq
   b4810:	4290      	cmpeq	r0, r2
   b4812:	bf2c      	ite	cs
   b4814:	17d8      	asrcs	r0, r3, #31
   b4816:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   b481a:	f040 0001 	orr.w	r0, r0, #1
   b481e:	4770      	bx	lr
   b4820:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b4824:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b4828:	d102      	bne.n	b4830 <__cmpdf2+0x64>
   b482a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b482e:	d107      	bne.n	b4840 <__cmpdf2+0x74>
   b4830:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b4834:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b4838:	d1d6      	bne.n	b47e8 <__cmpdf2+0x1c>
   b483a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b483e:	d0d3      	beq.n	b47e8 <__cmpdf2+0x1c>
   b4840:	f85d 0b04 	ldr.w	r0, [sp], #4
   b4844:	4770      	bx	lr
   b4846:	bf00      	nop

000b4848 <__aeabi_cdrcmple>:
   b4848:	4684      	mov	ip, r0
   b484a:	4610      	mov	r0, r2
   b484c:	4662      	mov	r2, ip
   b484e:	468c      	mov	ip, r1
   b4850:	4619      	mov	r1, r3
   b4852:	4663      	mov	r3, ip
   b4854:	e000      	b.n	b4858 <__aeabi_cdcmpeq>
   b4856:	bf00      	nop

000b4858 <__aeabi_cdcmpeq>:
   b4858:	b501      	push	{r0, lr}
   b485a:	f7ff ffb7 	bl	b47cc <__cmpdf2>
   b485e:	2800      	cmp	r0, #0
   b4860:	bf48      	it	mi
   b4862:	f110 0f00 	cmnmi.w	r0, #0
   b4866:	bd01      	pop	{r0, pc}

000b4868 <__aeabi_dcmpeq>:
   b4868:	f84d ed08 	str.w	lr, [sp, #-8]!
   b486c:	f7ff fff4 	bl	b4858 <__aeabi_cdcmpeq>
   b4870:	bf0c      	ite	eq
   b4872:	2001      	moveq	r0, #1
   b4874:	2000      	movne	r0, #0
   b4876:	f85d fb08 	ldr.w	pc, [sp], #8
   b487a:	bf00      	nop

000b487c <__aeabi_dcmplt>:
   b487c:	f84d ed08 	str.w	lr, [sp, #-8]!
   b4880:	f7ff ffea 	bl	b4858 <__aeabi_cdcmpeq>
   b4884:	bf34      	ite	cc
   b4886:	2001      	movcc	r0, #1
   b4888:	2000      	movcs	r0, #0
   b488a:	f85d fb08 	ldr.w	pc, [sp], #8
   b488e:	bf00      	nop

000b4890 <__aeabi_dcmple>:
   b4890:	f84d ed08 	str.w	lr, [sp, #-8]!
   b4894:	f7ff ffe0 	bl	b4858 <__aeabi_cdcmpeq>
   b4898:	bf94      	ite	ls
   b489a:	2001      	movls	r0, #1
   b489c:	2000      	movhi	r0, #0
   b489e:	f85d fb08 	ldr.w	pc, [sp], #8
   b48a2:	bf00      	nop

000b48a4 <__aeabi_dcmpge>:
   b48a4:	f84d ed08 	str.w	lr, [sp, #-8]!
   b48a8:	f7ff ffce 	bl	b4848 <__aeabi_cdrcmple>
   b48ac:	bf94      	ite	ls
   b48ae:	2001      	movls	r0, #1
   b48b0:	2000      	movhi	r0, #0
   b48b2:	f85d fb08 	ldr.w	pc, [sp], #8
   b48b6:	bf00      	nop

000b48b8 <__aeabi_dcmpgt>:
   b48b8:	f84d ed08 	str.w	lr, [sp, #-8]!
   b48bc:	f7ff ffc4 	bl	b4848 <__aeabi_cdrcmple>
   b48c0:	bf34      	ite	cc
   b48c2:	2001      	movcc	r0, #1
   b48c4:	2000      	movcs	r0, #0
   b48c6:	f85d fb08 	ldr.w	pc, [sp], #8
   b48ca:	bf00      	nop

000b48cc <__aeabi_d2iz>:
   b48cc:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b48d0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b48d4:	d215      	bcs.n	b4902 <__aeabi_d2iz+0x36>
   b48d6:	d511      	bpl.n	b48fc <__aeabi_d2iz+0x30>
   b48d8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b48dc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b48e0:	d912      	bls.n	b4908 <__aeabi_d2iz+0x3c>
   b48e2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b48e6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b48ea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b48ee:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b48f2:	fa23 f002 	lsr.w	r0, r3, r2
   b48f6:	bf18      	it	ne
   b48f8:	4240      	negne	r0, r0
   b48fa:	4770      	bx	lr
   b48fc:	f04f 0000 	mov.w	r0, #0
   b4900:	4770      	bx	lr
   b4902:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b4906:	d105      	bne.n	b4914 <__aeabi_d2iz+0x48>
   b4908:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   b490c:	bf08      	it	eq
   b490e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   b4912:	4770      	bx	lr
   b4914:	f04f 0000 	mov.w	r0, #0
   b4918:	4770      	bx	lr
   b491a:	bf00      	nop

000b491c <__aeabi_d2f>:
   b491c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b4920:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   b4924:	bf24      	itt	cs
   b4926:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   b492a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   b492e:	d90d      	bls.n	b494c <__aeabi_d2f+0x30>
   b4930:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   b4934:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   b4938:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   b493c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   b4940:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   b4944:	bf08      	it	eq
   b4946:	f020 0001 	biceq.w	r0, r0, #1
   b494a:	4770      	bx	lr
   b494c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   b4950:	d121      	bne.n	b4996 <__aeabi_d2f+0x7a>
   b4952:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   b4956:	bfbc      	itt	lt
   b4958:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   b495c:	4770      	bxlt	lr
   b495e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b4962:	ea4f 5252 	mov.w	r2, r2, lsr #21
   b4966:	f1c2 0218 	rsb	r2, r2, #24
   b496a:	f1c2 0c20 	rsb	ip, r2, #32
   b496e:	fa10 f30c 	lsls.w	r3, r0, ip
   b4972:	fa20 f002 	lsr.w	r0, r0, r2
   b4976:	bf18      	it	ne
   b4978:	f040 0001 	orrne.w	r0, r0, #1
   b497c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b4980:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   b4984:	fa03 fc0c 	lsl.w	ip, r3, ip
   b4988:	ea40 000c 	orr.w	r0, r0, ip
   b498c:	fa23 f302 	lsr.w	r3, r3, r2
   b4990:	ea4f 0343 	mov.w	r3, r3, lsl #1
   b4994:	e7cc      	b.n	b4930 <__aeabi_d2f+0x14>
   b4996:	ea7f 5362 	mvns.w	r3, r2, asr #21
   b499a:	d107      	bne.n	b49ac <__aeabi_d2f+0x90>
   b499c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   b49a0:	bf1e      	ittt	ne
   b49a2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   b49a6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   b49aa:	4770      	bxne	lr
   b49ac:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   b49b0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   b49b4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   b49b8:	4770      	bx	lr
   b49ba:	bf00      	nop

000b49bc <strlen>:
   b49bc:	4603      	mov	r3, r0
   b49be:	f813 2b01 	ldrb.w	r2, [r3], #1
   b49c2:	2a00      	cmp	r2, #0
   b49c4:	d1fb      	bne.n	b49be <strlen+0x2>
   b49c6:	1a18      	subs	r0, r3, r0
   b49c8:	3801      	subs	r0, #1
   b49ca:	4770      	bx	lr

000b49cc <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b49cc:	4809      	ldr	r0, [pc, #36]	; (b49f4 <module_user_pre_init+0x28>)
   b49ce:	490a      	ldr	r1, [pc, #40]	; (b49f8 <module_user_pre_init+0x2c>)
   b49d0:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b49d2:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b49d4:	d005      	beq.n	b49e2 <module_user_pre_init+0x16>
   b49d6:	4a09      	ldr	r2, [pc, #36]	; (b49fc <module_user_pre_init+0x30>)
   b49d8:	4282      	cmp	r2, r0
   b49da:	d002      	beq.n	b49e2 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b49dc:	1a12      	subs	r2, r2, r0
   b49de:	f006 fd53 	bl	bb488 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b49e2:	4807      	ldr	r0, [pc, #28]	; (b4a00 <module_user_pre_init+0x34>)
   b49e4:	4a07      	ldr	r2, [pc, #28]	; (b4a04 <module_user_pre_init+0x38>)
   b49e6:	2100      	movs	r1, #0
   b49e8:	1a12      	subs	r2, r2, r0
   b49ea:	f006 fd5b 	bl	bb4a4 <memset>
    return &link_global_data_start;
}
   b49ee:	4801      	ldr	r0, [pc, #4]	; (b49f4 <module_user_pre_init+0x28>)
   b49f0:	bd08      	pop	{r3, pc}
   b49f2:	bf00      	nop
   b49f4:	2003c674 	.word	0x2003c674
   b49f8:	000bd608 	.word	0x000bd608
   b49fc:	2003c730 	.word	0x2003c730
   b4a00:	2003c730 	.word	0x2003c730
   b4a04:	2003e7f0 	.word	0x2003e7f0

000b4a08 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4a08:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4a0a:	4e07      	ldr	r6, [pc, #28]	; (b4a28 <module_user_init+0x20>)
   b4a0c:	4c07      	ldr	r4, [pc, #28]	; (b4a2c <module_user_init+0x24>)
    module_user_init_hook();
   b4a0e:	f006 f8cb 	bl	baba8 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4a12:	1ba4      	subs	r4, r4, r6
   b4a14:	08a4      	lsrs	r4, r4, #2
   b4a16:	2500      	movs	r5, #0
   b4a18:	42ac      	cmp	r4, r5
   b4a1a:	d100      	bne.n	b4a1e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4a1c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4a1e:	f856 3b04 	ldr.w	r3, [r6], #4
   b4a22:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4a24:	3501      	adds	r5, #1
   b4a26:	e7f7      	b.n	b4a18 <module_user_init+0x10>
   b4a28:	000bd5c0 	.word	0x000bd5c0
   b4a2c:	000bd5e4 	.word	0x000bd5e4

000b4a30 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4a30:	f001 ba8a 	b.w	b5f48 <setup>

000b4a34 <module_user_loop>:
}

void module_user_loop() {
   b4a34:	b508      	push	{r3, lr}
    loop();
   b4a36:	f002 f95d 	bl	b6cf4 <loop>
    _post_loop();
}
   b4a3a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4a3e:	f006 b86b 	b.w	bab18 <_post_loop>

000b4a42 <_Znaj>:
   b4a42:	f005 bcdd 	b.w	ba400 <malloc>

000b4a46 <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b4a46:	f005 bce3 	b.w	ba410 <free>
	...

000b4a4c <__cxa_pure_virtual>:
int __wrap_printf(const char* fmt, ...) {
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b4a4c:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b4a4e:	4a03      	ldr	r2, [pc, #12]	; (b4a5c <__cxa_pure_virtual+0x10>)
   b4a50:	4903      	ldr	r1, [pc, #12]	; (b4a60 <__cxa_pure_virtual+0x14>)
   b4a52:	200c      	movs	r0, #12
   b4a54:	f005 fc38 	bl	ba2c8 <panic_>
  while (1);
   b4a58:	e7fe      	b.n	b4a58 <__cxa_pure_virtual+0xc>
   b4a5a:	bf00      	nop
   b4a5c:	000ba019 	.word	0x000ba019
   b4a60:	000bb6d8 	.word	0x000bb6d8

000b4a64 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b4a64:	7800      	ldrb	r0, [r0, #0]
   b4a66:	fab0 f080 	clz	r0, r0
   b4a6a:	0940      	lsrs	r0, r0, #5
   b4a6c:	4770      	bx	lr

000b4a6e <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b4a6e:	2301      	movs	r3, #1
   b4a70:	7003      	strb	r3, [r0, #0]
   b4a72:	4770      	bx	lr

000b4a74 <_Z10borradoALLi.part.0>:
{
   switch (modo)
   {
   case 0: {
      Bloque bloque;
      bloques[0] = bloque;
   b4a74:	4a06      	ldr	r2, [pc, #24]	; (b4a90 <_Z10borradoALLi.part.0+0x1c>)
   b4a76:	2300      	movs	r3, #0
   b4a78:	6013      	str	r3, [r2, #0]
   b4a7a:	f8c2 3144 	str.w	r3, [r2, #324]	; 0x144
      bloque2[0] = bloque;
   b4a7e:	4a05      	ldr	r2, [pc, #20]	; (b4a94 <_Z10borradoALLi.part.0+0x20>)
   b4a80:	6013      	str	r3, [r2, #0]
   b4a82:	f8c2 3144 	str.w	r3, [r2, #324]	; 0x144
      numSensoresBloque = 0;
   b4a86:	4a04      	ldr	r2, [pc, #16]	; (b4a98 <_Z10borradoALLi.part.0+0x24>)
   b4a88:	6013      	str	r3, [r2, #0]
      numActuadoresBloque = 0;
   b4a8a:	4a04      	ldr	r2, [pc, #16]	; (b4a9c <_Z10borradoALLi.part.0+0x28>)
   b4a8c:	6013      	str	r3, [r2, #0]
      tam_bucle = 0;
   }
   default:
      break;
   }
}
   b4a8e:	4770      	bx	lr
   b4a90:	2003cd28 	.word	0x2003cd28
   b4a94:	2003c750 	.word	0x2003c750
   b4a98:	2003da2c 	.word	0x2003da2c
   b4a9c:	2003da24 	.word	0x2003da24

000b4aa0 <_ZN5Print7printlnIiLi0EEEjT_i.isra.0>:

    size_t println(const char[]);
    size_t println(char);
    template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value), int> = 0>
    size_t println(T b, int base = DEC) {
   b4aa0:	b570      	push	{r4, r5, r6, lr}
   b4aa2:	4605      	mov	r5, r0
   b4aa4:	460c      	mov	r4, r1

template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value), int>>
size_t Print::print(T n, int base)
{
    if (base == 0) {
   b4aa6:	4616      	mov	r6, r2
   b4aa8:	b942      	cbnz	r2, b4abc <_ZN5Print7printlnIiLi0EEEjT_i.isra.0+0x1c>
        return write(n);
   b4aaa:	6803      	ldr	r3, [r0, #0]
   b4aac:	b2c9      	uxtb	r1, r1
   b4aae:	689b      	ldr	r3, [r3, #8]
   b4ab0:	4798      	blx	r3
        n += println();
   b4ab2:	4628      	mov	r0, r5
    }
   b4ab4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        n += println();
   b4ab8:	f005 bf3d 	b.w	ba936 <_ZN5Print7printlnEv>
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
   b4abc:	2900      	cmp	r1, #0
   b4abe:	da0a      	bge.n	b4ad6 <_ZN5Print7printlnIiLi0EEEjT_i.isra.0+0x36>
   b4ac0:	2a0a      	cmp	r2, #10
   b4ac2:	d108      	bne.n	b4ad6 <_ZN5Print7printlnIiLi0EEEjT_i.isra.0+0x36>
            t = print('-');
   b4ac4:	212d      	movs	r1, #45	; 0x2d
   b4ac6:	f005 ff33 	bl	ba930 <_ZN5Print5printEc>
            val = -n;
   b4aca:	4261      	negs	r1, r4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b4acc:	b2f2      	uxtb	r2, r6
   b4ace:	4628      	mov	r0, r5
   b4ad0:	f005 ff47 	bl	ba962 <_ZN5Print11printNumberEmh>
   b4ad4:	e7ed      	b.n	b4ab2 <_ZN5Print7printlnIiLi0EEEjT_i.isra.0+0x12>
            val = n;
   b4ad6:	4621      	mov	r1, r4
   b4ad8:	e7f8      	b.n	b4acc <_ZN5Print7printlnIiLi0EEEjT_i.isra.0+0x2c>

000b4ada <_ZN5Print6printfEPKcz>:
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4ada:	b40e      	push	{r1, r2, r3}
   b4adc:	b503      	push	{r0, r1, lr}
   b4ade:	ab03      	add	r3, sp, #12
        auto r = this->vprintf(false, format, args);
   b4ae0:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4ae2:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b4ae6:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b4ae8:	f005 ff59 	bl	ba99e <_ZN5Print7vprintfEbPKcSt9__va_list>
    }
   b4aec:	b002      	add	sp, #8
   b4aee:	f85d eb04 	ldr.w	lr, [sp], #4
   b4af2:	b003      	add	sp, #12
   b4af4:	4770      	bx	lr

000b4af6 <_ZN5Print8printlnfEPKcz>:
    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4af6:	b40e      	push	{r1, r2, r3}
   b4af8:	b503      	push	{r0, r1, lr}
   b4afa:	ab03      	add	r3, sp, #12
        auto r = this->vprintf(true, format, args);
   b4afc:	2101      	movs	r1, #1
    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4afe:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b4b02:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(true, format, args);
   b4b04:	f005 ff4b 	bl	ba99e <_ZN5Print7vprintfEbPKcSt9__va_list>
    }
   b4b08:	b002      	add	sp, #8
   b4b0a:	f85d eb04 	ldr.w	lr, [sp], #4
   b4b0e:	b003      	add	sp, #12
   b4b10:	4770      	bx	lr

000b4b12 <_Z11noDistanciai>:
//---------------------------------------------------------------------------------------------------
//------------------------------------- M O D O   1 -------------------------------------------------
//---------------------------------------------------------------------------------------------------

bool noDistancia(int puerto)
{
   b4b12:	b507      	push	{r0, r1, r2, lr}
   b4b14:	4601      	mov	r1, r0
    Ultrasonic ultrasonic(puerto);
   b4b16:	a801      	add	r0, sp, #4
   b4b18:	f004 fbf0 	bl	b92fc <_ZN10UltrasonicC1Ei>
    long range = ultrasonic.MeasureInCentimeters();
   b4b1c:	a801      	add	r0, sp, #4
   b4b1e:	f004 fbef 	bl	b9300 <_ZN10Ultrasonic20MeasureInCentimetersEv>
    // Serial.printlnf("Distancia: %d", range);
    if (range >= 0 && range < 10)
        return true;
    else
        return false;
}
   b4b22:	2809      	cmp	r0, #9
   b4b24:	bf8c      	ite	hi
   b4b26:	2000      	movhi	r0, #0
   b4b28:	2001      	movls	r0, #1
   b4b2a:	b003      	add	sp, #12
   b4b2c:	f85d fb04 	ldr.w	pc, [sp], #4

000b4b30 <_Z11siDistanciai>:

bool siDistancia(int puerto)
{
   b4b30:	b507      	push	{r0, r1, r2, lr}
   b4b32:	4601      	mov	r1, r0
    Ultrasonic ultrasonic(puerto);
   b4b34:	a801      	add	r0, sp, #4
   b4b36:	f004 fbe1 	bl	b92fc <_ZN10UltrasonicC1Ei>
    long range = ultrasonic.MeasureInCentimeters();
   b4b3a:	a801      	add	r0, sp, #4
   b4b3c:	f004 fbe0 	bl	b9300 <_ZN10Ultrasonic20MeasureInCentimetersEv>
    // Serial.printlnf("Distancia: %d", range);
    if (range > 10)
        return true;
    else
        return false;
}
   b4b40:	280a      	cmp	r0, #10
   b4b42:	bfd4      	ite	le
   b4b44:	2000      	movle	r0, #0
   b4b46:	2001      	movgt	r0, #1
   b4b48:	b003      	add	sp, #12
   b4b4a:	f85d fb04 	ldr.w	pc, [sp], #4

000b4b4e <_Z5siLuzi>:

bool siLuz(int puerto)
{
    int threshold = 1000;
    
    switch (puerto)
   b4b4e:	2802      	cmp	r0, #2
{
   b4b50:	b508      	push	{r3, lr}
    switch (puerto)
   b4b52:	d00b      	beq.n	b4b6c <_Z5siLuzi+0x1e>
   b4b54:	2804      	cmp	r0, #4
   b4b56:	d00b      	beq.n	b4b70 <_Z5siLuzi+0x22>
   b4b58:	b960      	cbnz	r0, b4b74 <_Z5siLuzi+0x26>
    {
    case 0:
        if (analogRead(A0) >= threshold)
   b4b5a:	2013      	movs	r0, #19
        if (analogRead(A2) >= threshold)
            return true;
        return false;

    case 4:
        if (analogRead(A4) >= threshold)
   b4b5c:	f006 fbb9 	bl	bb2d2 <analogRead>
   b4b60:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   b4b64:	bfb4      	ite	lt
   b4b66:	2000      	movlt	r0, #0
   b4b68:	2001      	movge	r0, #1
        return false;

    default:
        return false;
    }
}
   b4b6a:	bd08      	pop	{r3, pc}
        if (analogRead(A2) >= threshold)
   b4b6c:	2011      	movs	r0, #17
   b4b6e:	e7f5      	b.n	b4b5c <_Z5siLuzi+0xe>
        if (analogRead(A4) >= threshold)
   b4b70:	200f      	movs	r0, #15
   b4b72:	e7f3      	b.n	b4b5c <_Z5siLuzi+0xe>
    switch (puerto)
   b4b74:	2000      	movs	r0, #0
   b4b76:	e7f8      	b.n	b4b6a <_Z5siLuzi+0x1c>

000b4b78 <_Z5noLuzi>:

bool noLuz(int puerto)
{
    int threshold = 1000;
    switch (puerto)
   b4b78:	2802      	cmp	r0, #2
{
   b4b7a:	b508      	push	{r3, lr}
    switch (puerto)
   b4b7c:	d00b      	beq.n	b4b96 <_Z5noLuzi+0x1e>
   b4b7e:	2804      	cmp	r0, #4
   b4b80:	d00b      	beq.n	b4b9a <_Z5noLuzi+0x22>
   b4b82:	b960      	cbnz	r0, b4b9e <_Z5noLuzi+0x26>
    {
    case 0:
        if (analogRead(A0) <= threshold)
   b4b84:	2013      	movs	r0, #19
        if (analogRead(A2) <= threshold)
            return true;
        return false;

    case 4:
        if (analogRead(A4) <= threshold)
   b4b86:	f006 fba4 	bl	bb2d2 <analogRead>
   b4b8a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   b4b8e:	bfcc      	ite	gt
   b4b90:	2000      	movgt	r0, #0
   b4b92:	2001      	movle	r0, #1
        return false;

    default:
        return false;
    }
}
   b4b94:	bd08      	pop	{r3, pc}
        if (analogRead(A2) <= threshold)
   b4b96:	2011      	movs	r0, #17
   b4b98:	e7f5      	b.n	b4b86 <_Z5noLuzi+0xe>
        if (analogRead(A4) <= threshold)
   b4b9a:	200f      	movs	r0, #15
   b4b9c:	e7f3      	b.n	b4b86 <_Z5noLuzi+0xe>
    switch (puerto)
   b4b9e:	2000      	movs	r0, #0
   b4ba0:	e7f8      	b.n	b4b94 <_Z5noLuzi+0x1c>
	...

000b4ba4 <_Z7siRuidoi>:

bool siRuido(int puerto)
{
    int p;
    switch (puerto)
   b4ba4:	2802      	cmp	r0, #2
{
   b4ba6:	b510      	push	{r4, lr}
    switch (puerto)
   b4ba8:	d019      	beq.n	b4bde <_Z7siRuidoi+0x3a>
   b4baa:	2804      	cmp	r0, #4
   b4bac:	d019      	beq.n	b4be2 <_Z7siRuidoi+0x3e>
   b4bae:	b9d0      	cbnz	r0, b4be6 <_Z7siRuidoi+0x42>
    {
    case 0:
        p = A0;
   b4bb0:	2013      	movs	r0, #19

    default:
        return false;
    }

    int sonido = analogRead(p);
   b4bb2:	f006 fb8e 	bl	bb2d2 <analogRead>
   b4bb6:	4604      	mov	r4, r0
    Serial.println(sonido);
   b4bb8:	f006 f918 	bl	badec <_Z16_fetch_usbserialv>
   b4bbc:	220a      	movs	r2, #10
   b4bbe:	4621      	mov	r1, r4
   b4bc0:	f7ff ff6e 	bl	b4aa0 <_ZN5Print7printlnIiLi0EEEjT_i.isra.0>
    if (sonido >= 1600)
   b4bc4:	f5b4 6fc8 	cmp.w	r4, #1600	; 0x640
   b4bc8:	4a08      	ldr	r2, [pc, #32]	; (b4bec <_Z7siRuidoi+0x48>)
        ruid = 12;
   b4bca:	bfa4      	itt	ge
   b4bcc:	230c      	movge	r3, #12
   b4bce:	6013      	strge	r3, [r2, #0]
    if (ruid > 0){
   b4bd0:	6813      	ldr	r3, [r2, #0]
   b4bd2:	2b00      	cmp	r3, #0
   b4bd4:	dd07      	ble.n	b4be6 <_Z7siRuidoi+0x42>
        ruid--;
   b4bd6:	3b01      	subs	r3, #1
   b4bd8:	6013      	str	r3, [r2, #0]
        return true;}
   b4bda:	2001      	movs	r0, #1
    return false;
}
   b4bdc:	bd10      	pop	{r4, pc}
    switch (puerto)
   b4bde:	2011      	movs	r0, #17
   b4be0:	e7e7      	b.n	b4bb2 <_Z7siRuidoi+0xe>
        p = A4;
   b4be2:	200f      	movs	r0, #15
   b4be4:	e7e5      	b.n	b4bb2 <_Z7siRuidoi+0xe>
    return false;
   b4be6:	2000      	movs	r0, #0
   b4be8:	e7f8      	b.n	b4bdc <_Z7siRuidoi+0x38>
   b4bea:	bf00      	nop
   b4bec:	2003da4c 	.word	0x2003da4c

000b4bf0 <_Z7noRuidoi>:

bool noRuido(int puerto)
{
   b4bf0:	b508      	push	{r3, lr}
    if (analogRead(puerto) <= 700)
   b4bf2:	b280      	uxth	r0, r0
   b4bf4:	f006 fb6d 	bl	bb2d2 <analogRead>
        return true;
    return false;
}
   b4bf8:	f5b0 7f2f 	cmp.w	r0, #700	; 0x2bc
   b4bfc:	bfcc      	ite	gt
   b4bfe:	2000      	movgt	r0, #0
   b4c00:	2001      	movle	r0, #1
   b4c02:	bd08      	pop	{r3, pc}

000b4c04 <_Z7siBotoni>:

bool siBoton(int puerto)
{
   b4c04:	b507      	push	{r0, r1, r2, lr}
    pinMode(puerto, INPUT);
   b4c06:	b280      	uxth	r0, r0
   b4c08:	2100      	movs	r1, #0
   b4c0a:	9001      	str	r0, [sp, #4]
   b4c0c:	f006 fb24 	bl	bb258 <pinMode>
    if (digitalRead(puerto) == HIGH)
   b4c10:	9801      	ldr	r0, [sp, #4]
   b4c12:	f006 fb4b 	bl	bb2ac <digitalRead>
        return true;
    return false;
}
   b4c16:	1e43      	subs	r3, r0, #1
   b4c18:	4258      	negs	r0, r3
   b4c1a:	4158      	adcs	r0, r3
   b4c1c:	b003      	add	sp, #12
   b4c1e:	f85d fb04 	ldr.w	pc, [sp], #4

000b4c22 <_Z7noBotoni>:

bool noBoton(int puerto)
{
   b4c22:	b507      	push	{r0, r1, r2, lr}
    pinMode(puerto, INPUT);
   b4c24:	b280      	uxth	r0, r0
   b4c26:	2100      	movs	r1, #0
   b4c28:	9001      	str	r0, [sp, #4]
   b4c2a:	f006 fb15 	bl	bb258 <pinMode>
    if (digitalRead(puerto) == LOW)
   b4c2e:	9801      	ldr	r0, [sp, #4]
   b4c30:	f006 fb3c 	bl	bb2ac <digitalRead>
        return true;
    return false;
}
   b4c34:	fab0 f080 	clz	r0, r0
   b4c38:	0940      	lsrs	r0, r0, #5
   b4c3a:	b003      	add	sp, #12
   b4c3c:	f85d fb04 	ldr.w	pc, [sp], #4

000b4c40 <_Z10siRotativoi>:

bool siRotativo(int puerto)
{
    float voltage;
    int sensor_value;
    switch (puerto)
   b4c40:	2802      	cmp	r0, #2
{
   b4c42:	b507      	push	{r0, r1, r2, lr}
    switch (puerto)
   b4c44:	d030      	beq.n	b4ca8 <_Z10siRotativoi+0x68>
   b4c46:	2804      	cmp	r0, #4
   b4c48:	d030      	beq.n	b4cac <_Z10siRotativoi+0x6c>
   b4c4a:	b918      	cbnz	r0, b4c54 <_Z10siRotativoi+0x14>
    {
    case 0:
        sensor_value = analogRead(A0);
   b4c4c:	2013      	movs	r0, #19
        break;
    case 2:
        sensor_value = analogRead(A2);
        break;
    case 4:
        sensor_value = analogRead(A4);
   b4c4e:	f006 fb40 	bl	bb2d2 <analogRead>
   b4c52:	9001      	str	r0, [sp, #4]
        break;
    }

    voltage = (float)sensor_value * 3.3 / 1023;
   b4c54:	eddd 7a01 	vldr	s15, [sp, #4]
   b4c58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b4c5c:	ee17 0a90 	vmov	r0, s15
   b4c60:	f7ff fb42 	bl	b42e8 <__aeabi_f2d>
   b4c64:	a314      	add	r3, pc, #80	; (adr r3, b4cb8 <_Z10siRotativoi+0x78>)
   b4c66:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4c6a:	f7ff fb95 	bl	b4398 <__aeabi_dmul>
   b4c6e:	a314      	add	r3, pc, #80	; (adr r3, b4cc0 <_Z10siRotativoi+0x80>)
   b4c70:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4c74:	f7ff fcba 	bl	b45ec <__aeabi_ddiv>
   b4c78:	f7ff fe50 	bl	b491c <__aeabi_d2f>
    float degrees = (voltage * 300) / 5;
   b4c7c:	eddf 7a0c 	vldr	s15, [pc, #48]	; b4cb0 <_Z10siRotativoi+0x70>
   b4c80:	ee07 0a10 	vmov	s14, r0
   b4c84:	ee67 7a27 	vmul.f32	s15, s14, s15
   b4c88:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
   b4c8c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
    if (degrees <= 360)
   b4c90:	eddf 7a08 	vldr	s15, [pc, #32]	; b4cb4 <_Z10siRotativoi+0x74>
   b4c94:	eeb4 7ae7 	vcmpe.f32	s14, s15
   b4c98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        return true;
    return false;
}
   b4c9c:	bf94      	ite	ls
   b4c9e:	2001      	movls	r0, #1
   b4ca0:	2000      	movhi	r0, #0
   b4ca2:	b003      	add	sp, #12
   b4ca4:	f85d fb04 	ldr.w	pc, [sp], #4
        sensor_value = analogRead(A2);
   b4ca8:	2011      	movs	r0, #17
   b4caa:	e7d0      	b.n	b4c4e <_Z10siRotativoi+0xe>
        sensor_value = analogRead(A4);
   b4cac:	200f      	movs	r0, #15
   b4cae:	e7ce      	b.n	b4c4e <_Z10siRotativoi+0xe>
   b4cb0:	43960000 	.word	0x43960000
   b4cb4:	43b40000 	.word	0x43b40000
   b4cb8:	66666666 	.word	0x66666666
   b4cbc:	400a6666 	.word	0x400a6666
   b4cc0:	00000000 	.word	0x00000000
   b4cc4:	408ff800 	.word	0x408ff800

000b4cc8 <_Z10noRotativoi>:

bool noRotativo(int puerto)
{
    float voltage;
    int sensor_value;
    switch (puerto)
   b4cc8:	2802      	cmp	r0, #2
{
   b4cca:	b507      	push	{r0, r1, r2, lr}
    switch (puerto)
   b4ccc:	d030      	beq.n	b4d30 <_Z10noRotativoi+0x68>
   b4cce:	2804      	cmp	r0, #4
   b4cd0:	d030      	beq.n	b4d34 <_Z10noRotativoi+0x6c>
   b4cd2:	b918      	cbnz	r0, b4cdc <_Z10noRotativoi+0x14>
    {
    case 0:
        sensor_value = analogRead(A0);
   b4cd4:	2013      	movs	r0, #19
        break;
    case 2:
        sensor_value = analogRead(A2);
        break;
    case 4:
        sensor_value = analogRead(A4);
   b4cd6:	f006 fafc 	bl	bb2d2 <analogRead>
   b4cda:	9001      	str	r0, [sp, #4]
        break;
    }

    voltage = (float)sensor_value * 3.3 / 1023;
   b4cdc:	eddd 7a01 	vldr	s15, [sp, #4]
   b4ce0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b4ce4:	ee17 0a90 	vmov	r0, s15
   b4ce8:	f7ff fafe 	bl	b42e8 <__aeabi_f2d>
   b4cec:	a314      	add	r3, pc, #80	; (adr r3, b4d40 <_Z10noRotativoi+0x78>)
   b4cee:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4cf2:	f7ff fb51 	bl	b4398 <__aeabi_dmul>
   b4cf6:	a314      	add	r3, pc, #80	; (adr r3, b4d48 <_Z10noRotativoi+0x80>)
   b4cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4cfc:	f7ff fc76 	bl	b45ec <__aeabi_ddiv>
   b4d00:	f7ff fe0c 	bl	b491c <__aeabi_d2f>
    float degrees = (voltage * 300) / 5;
   b4d04:	eddf 7a0c 	vldr	s15, [pc, #48]	; b4d38 <_Z10noRotativoi+0x70>
   b4d08:	ee07 0a10 	vmov	s14, r0
   b4d0c:	ee67 7a27 	vmul.f32	s15, s14, s15
   b4d10:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
   b4d14:	ee87 7aa6 	vdiv.f32	s14, s15, s13

    if (degrees >= 360)
   b4d18:	eddf 7a08 	vldr	s15, [pc, #32]	; b4d3c <_Z10noRotativoi+0x74>
   b4d1c:	eeb4 7ae7 	vcmpe.f32	s14, s15
   b4d20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        return true;
    return false;
}
   b4d24:	bfac      	ite	ge
   b4d26:	2001      	movge	r0, #1
   b4d28:	2000      	movlt	r0, #0
   b4d2a:	b003      	add	sp, #12
   b4d2c:	f85d fb04 	ldr.w	pc, [sp], #4
        sensor_value = analogRead(A2);
   b4d30:	2011      	movs	r0, #17
   b4d32:	e7d0      	b.n	b4cd6 <_Z10noRotativoi+0xe>
        sensor_value = analogRead(A4);
   b4d34:	200f      	movs	r0, #15
   b4d36:	e7ce      	b.n	b4cd6 <_Z10noRotativoi+0xe>
   b4d38:	43960000 	.word	0x43960000
   b4d3c:	43b40000 	.word	0x43b40000
   b4d40:	66666666 	.word	0x66666666
   b4d44:	400a6666 	.word	0x400a6666
   b4d48:	00000000 	.word	0x00000000
   b4d4c:	408ff800 	.word	0x408ff800

000b4d50 <_Z10BotonDualAi>:

bool BotonDualA(int puerto)
{
   b4d50:	b538      	push	{r3, r4, r5, lr}
    pinMode(puerto, INPUT);
   b4d52:	b284      	uxth	r4, r0
    pinMode(puerto+1, INPUT);
   b4d54:	1c65      	adds	r5, r4, #1
    pinMode(puerto, INPUT);
   b4d56:	2100      	movs	r1, #0
   b4d58:	4620      	mov	r0, r4
    pinMode(puerto+1, INPUT);
   b4d5a:	b2ad      	uxth	r5, r5
    pinMode(puerto, INPUT);
   b4d5c:	f006 fa7c 	bl	bb258 <pinMode>
    pinMode(puerto+1, INPUT);
   b4d60:	4628      	mov	r0, r5
   b4d62:	2100      	movs	r1, #0
   b4d64:	f006 fa78 	bl	bb258 <pinMode>
    if (digitalRead(puerto) == LOW && digitalRead(puerto+1) == HIGH)
   b4d68:	4620      	mov	r0, r4
   b4d6a:	f006 fa9f 	bl	bb2ac <digitalRead>
   b4d6e:	b930      	cbnz	r0, b4d7e <_Z10BotonDualAi+0x2e>
   b4d70:	4628      	mov	r0, r5
   b4d72:	f006 fa9b 	bl	bb2ac <digitalRead>
   b4d76:	1e43      	subs	r3, r0, #1
   b4d78:	4258      	negs	r0, r3
   b4d7a:	4158      	adcs	r0, r3
        return true;
    return false;
}
   b4d7c:	bd38      	pop	{r3, r4, r5, pc}
    return false;
   b4d7e:	2000      	movs	r0, #0
   b4d80:	e7fc      	b.n	b4d7c <_Z10BotonDualAi+0x2c>

000b4d82 <_Z10BotonDualBi>:

bool BotonDualB(int puerto)
{
   b4d82:	b538      	push	{r3, r4, r5, lr}
    pinMode(puerto+1, INPUT);
   b4d84:	b284      	uxth	r4, r0
   b4d86:	1c65      	adds	r5, r4, #1
   b4d88:	b2ad      	uxth	r5, r5
   b4d8a:	2100      	movs	r1, #0
   b4d8c:	4628      	mov	r0, r5
   b4d8e:	f006 fa63 	bl	bb258 <pinMode>
    pinMode(puerto, INPUT);
   b4d92:	4620      	mov	r0, r4
   b4d94:	2100      	movs	r1, #0
   b4d96:	f006 fa5f 	bl	bb258 <pinMode>
    if (digitalRead(puerto+1) == LOW && digitalRead(puerto) == HIGH)
   b4d9a:	4628      	mov	r0, r5
   b4d9c:	f006 fa86 	bl	bb2ac <digitalRead>
   b4da0:	b930      	cbnz	r0, b4db0 <_Z10BotonDualBi+0x2e>
   b4da2:	4620      	mov	r0, r4
   b4da4:	f006 fa82 	bl	bb2ac <digitalRead>
   b4da8:	1e43      	subs	r3, r0, #1
   b4daa:	4258      	negs	r0, r3
   b4dac:	4158      	adcs	r0, r3
        return true;
    return false;
}
   b4dae:	bd38      	pop	{r3, r4, r5, pc}
    return false;
   b4db0:	2000      	movs	r0, #0
   b4db2:	e7fc      	b.n	b4dae <_Z10BotonDualBi+0x2c>

000b4db4 <_Z10BotonDual2i>:

bool BotonDual2(int puerto)
{
   b4db4:	b538      	push	{r3, r4, r5, lr}
    pinMode(puerto, INPUT);
   b4db6:	b284      	uxth	r4, r0
    pinMode(puerto+1, INPUT);
   b4db8:	1c65      	adds	r5, r4, #1
    pinMode(puerto, INPUT);
   b4dba:	2100      	movs	r1, #0
   b4dbc:	4620      	mov	r0, r4
    pinMode(puerto+1, INPUT);
   b4dbe:	b2ad      	uxth	r5, r5
    pinMode(puerto, INPUT);
   b4dc0:	f006 fa4a 	bl	bb258 <pinMode>
    pinMode(puerto+1, INPUT);
   b4dc4:	4628      	mov	r0, r5
   b4dc6:	2100      	movs	r1, #0
   b4dc8:	f006 fa46 	bl	bb258 <pinMode>
    if (digitalRead(puerto) == LOW && digitalRead(puerto+1) == LOW)
   b4dcc:	4620      	mov	r0, r4
   b4dce:	f006 fa6d 	bl	bb2ac <digitalRead>
   b4dd2:	b930      	cbnz	r0, b4de2 <_Z10BotonDual2i+0x2e>
   b4dd4:	4628      	mov	r0, r5
   b4dd6:	f006 fa69 	bl	bb2ac <digitalRead>
   b4dda:	fab0 f080 	clz	r0, r0
   b4dde:	0940      	lsrs	r0, r0, #5
        return true;
    return false;
}
   b4de0:	bd38      	pop	{r3, r4, r5, pc}
    return false;
   b4de2:	2000      	movs	r0, #0
   b4de4:	e7fc      	b.n	b4de0 <_Z10BotonDual2i+0x2c>

000b4de6 <_Z11noBotonDuali>:

bool noBotonDual(int puerto)
{
   b4de6:	b538      	push	{r3, r4, r5, lr}
    pinMode(puerto, INPUT);
   b4de8:	b284      	uxth	r4, r0
    pinMode(puerto+1, INPUT);
   b4dea:	1c65      	adds	r5, r4, #1
    pinMode(puerto, INPUT);
   b4dec:	2100      	movs	r1, #0
   b4dee:	4620      	mov	r0, r4
    pinMode(puerto+1, INPUT);
   b4df0:	b2ad      	uxth	r5, r5
    pinMode(puerto, INPUT);
   b4df2:	f006 fa31 	bl	bb258 <pinMode>
    pinMode(puerto+1, INPUT);
   b4df6:	2100      	movs	r1, #0
   b4df8:	4628      	mov	r0, r5
   b4dfa:	f006 fa2d 	bl	bb258 <pinMode>
    if (digitalRead(puerto) == HIGH && digitalRead(puerto+1) == HIGH)
   b4dfe:	4620      	mov	r0, r4
   b4e00:	f006 fa54 	bl	bb2ac <digitalRead>
   b4e04:	2801      	cmp	r0, #1
   b4e06:	d106      	bne.n	b4e16 <_Z11noBotonDuali+0x30>
   b4e08:	4628      	mov	r0, r5
   b4e0a:	f006 fa4f 	bl	bb2ac <digitalRead>
   b4e0e:	1e43      	subs	r3, r0, #1
   b4e10:	4258      	negs	r0, r3
   b4e12:	4158      	adcs	r0, r3
        return true;
    return false;
}
   b4e14:	bd38      	pop	{r3, r4, r5, pc}
    return false;
   b4e16:	2000      	movs	r0, #0
   b4e18:	e7fc      	b.n	b4e14 <_Z11noBotonDuali+0x2e>

000b4e1a <_Z4Cafei>:


bool Cafe(int puerto)
{
    int sensor_value;
    switch (puerto)
   b4e1a:	2802      	cmp	r0, #2
{
   b4e1c:	b510      	push	{r4, lr}
    switch (puerto)
   b4e1e:	d012      	beq.n	b4e46 <_Z4Cafei+0x2c>
   b4e20:	2804      	cmp	r0, #4
   b4e22:	d012      	beq.n	b4e4a <_Z4Cafei+0x30>
   b4e24:	b918      	cbnz	r0, b4e2e <_Z4Cafei+0x14>
    {
    case 0:
        sensor_value = analogRead(A0);
   b4e26:	2013      	movs	r0, #19
        break;
    case 2:
        sensor_value = analogRead(A2);
        break;
    case 4:
        sensor_value = analogRead(A4);
   b4e28:	f006 fa53 	bl	bb2d2 <analogRead>
   b4e2c:	4604      	mov	r4, r0
        break;
    }
    Serial.println(sensor_value);
   b4e2e:	f005 ffdd 	bl	badec <_Z16_fetch_usbserialv>
   b4e32:	220a      	movs	r2, #10
   b4e34:	4621      	mov	r1, r4
   b4e36:	f7ff fe33 	bl	b4aa0 <_ZN5Print7printlnIiLi0EEEjT_i.isra.0>
    if (sensor_value < 2000)
        return true;
    return false;
}
   b4e3a:	f5b4 6ffa 	cmp.w	r4, #2000	; 0x7d0
   b4e3e:	bfac      	ite	ge
   b4e40:	2000      	movge	r0, #0
   b4e42:	2001      	movlt	r0, #1
   b4e44:	bd10      	pop	{r4, pc}
        sensor_value = analogRead(A2);
   b4e46:	2011      	movs	r0, #17
   b4e48:	e7ee      	b.n	b4e28 <_Z4Cafei+0xe>
        sensor_value = analogRead(A4);
   b4e4a:	200f      	movs	r0, #15
   b4e4c:	e7ec      	b.n	b4e28 <_Z4Cafei+0xe>

000b4e4e <_Z9AguaClarai>:

bool AguaClara(int puerto)
{
    int sensor_value;
    switch (puerto)
   b4e4e:	2802      	cmp	r0, #2
{
   b4e50:	b508      	push	{r3, lr}
    switch (puerto)
   b4e52:	d00d      	beq.n	b4e70 <_Z9AguaClarai+0x22>
   b4e54:	2804      	cmp	r0, #4
   b4e56:	d00d      	beq.n	b4e74 <_Z9AguaClarai+0x26>
   b4e58:	b918      	cbnz	r0, b4e62 <_Z9AguaClarai+0x14>
    {
    case 0:
        sensor_value = analogRead(A0);
   b4e5a:	2013      	movs	r0, #19
        break;
    case 2:
        sensor_value = analogRead(A2);
        break;
    case 4:
        sensor_value = analogRead(A4);
   b4e5c:	f006 fa39 	bl	bb2d2 <analogRead>
   b4e60:	4603      	mov	r3, r0
        break;
    }
    if (sensor_value > 2500)
        return true;
    return false;
}
   b4e62:	f640 10c4 	movw	r0, #2500	; 0x9c4
   b4e66:	4283      	cmp	r3, r0
   b4e68:	bfd4      	ite	le
   b4e6a:	2000      	movle	r0, #0
   b4e6c:	2001      	movgt	r0, #1
   b4e6e:	bd08      	pop	{r3, pc}
        sensor_value = analogRead(A2);
   b4e70:	2011      	movs	r0, #17
   b4e72:	e7f3      	b.n	b4e5c <_Z9AguaClarai+0xe>
        sensor_value = analogRead(A4);
   b4e74:	200f      	movs	r0, #15
   b4e76:	e7f1      	b.n	b4e5c <_Z9AguaClarai+0xe>

000b4e78 <_Z8tempFrioi>:

bool tempFrio(int puerto)
{
   b4e78:	b530      	push	{r4, r5, lr}
   b4e7a:	ed2d 8b02 	vpush	{d8}
   b4e7e:	b087      	sub	sp, #28
    DHT dht(puerto, DHT11);
   b4e80:	b2c1      	uxtb	r1, r0
   b4e82:	2306      	movs	r3, #6
   b4e84:	220b      	movs	r2, #11
   b4e86:	a801      	add	r0, sp, #4
   b4e88:	f004 fa5e 	bl	b9348 <_ZN3DHTC1Ehhh>
    dht.begin();
   b4e8c:	a801      	add	r0, sp, #4
   b4e8e:	f004 fa62 	bl	b9356 <_ZN3DHT5beginEv>
    float t = dht.getTempCelcius();
   b4e92:	a801      	add	r0, sp, #4
   b4e94:	f004 fb1c 	bl	b94d0 <_ZN3DHT14getTempCelciusEv>

    // The fast read may cause an invalid value like 0.0000 or NuLL. Repeat until valid value.
    while (isnan(t) | t == 0.0)
   b4e98:	eeb5 0a40 	vcmp.f32	s0, #0.0
   b4e9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr bool
  isnan(float __x)
  { return __builtin_isnan(__x); }
   b4ea0:	eeb4 0a40 	vcmp.f32	s0, s0
   b4ea4:	bf0c      	ite	eq
   b4ea6:	2401      	moveq	r4, #1
   b4ea8:	2400      	movne	r4, #0
   b4eaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4eae:	bf68      	it	vs
   b4eb0:	f044 0401 	orrvs.w	r4, r4, #1
    float t = dht.getTempCelcius();
   b4eb4:	eeb0 8a40 	vmov.f32	s16, s0
    while (isnan(t) | t == 0.0)
   b4eb8:	2c00      	cmp	r4, #0
   b4eba:	d1ea      	bne.n	b4e92 <_Z8tempFrioi+0x1a>
    {
        t = dht.getTempCelcius();
    }

    Serial.printlnf("Temp: %f", t);
   b4ebc:	f005 ff96 	bl	badec <_Z16_fetch_usbserialv>
   b4ec0:	4605      	mov	r5, r0
   b4ec2:	ee18 0a10 	vmov	r0, s16
   b4ec6:	f7ff fa0f 	bl	b42e8 <__aeabi_f2d>
   b4eca:	4602      	mov	r2, r0
   b4ecc:	460b      	mov	r3, r1
   b4ece:	4628      	mov	r0, r5
   b4ed0:	490a      	ldr	r1, [pc, #40]	; (b4efc <_Z8tempFrioi+0x84>)
   b4ed2:	f7ff fe10 	bl	b4af6 <_ZN5Print8printlnfEPKcz>
    if (t > 0.0 && t < 8)
   b4ed6:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
   b4eda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4ede:	dd08      	ble.n	b4ef2 <_Z8tempFrioi+0x7a>
   b4ee0:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
   b4ee4:	eeb4 8ae7 	vcmpe.f32	s16, s15
   b4ee8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4eec:	bf4c      	ite	mi
   b4eee:	2401      	movmi	r4, #1
   b4ef0:	2400      	movpl	r4, #0
        return true;
    else
        return false;
}
   b4ef2:	4620      	mov	r0, r4
   b4ef4:	b007      	add	sp, #28
   b4ef6:	ecbd 8b02 	vpop	{d8}
   b4efa:	bd30      	pop	{r4, r5, pc}
   b4efc:	000bb6ed 	.word	0x000bb6ed

000b4f00 <_Z12tempTempladoi>:

bool tempTemplado(int puerto)
{
   b4f00:	b510      	push	{r4, lr}
   b4f02:	ed2d 8b02 	vpush	{d8}
   b4f06:	b086      	sub	sp, #24
    DHT dht(puerto, DHT11);
   b4f08:	b2c1      	uxtb	r1, r0
   b4f0a:	2306      	movs	r3, #6
   b4f0c:	220b      	movs	r2, #11
   b4f0e:	a801      	add	r0, sp, #4
   b4f10:	f004 fa1a 	bl	b9348 <_ZN3DHTC1Ehhh>
    dht.begin();
   b4f14:	a801      	add	r0, sp, #4
   b4f16:	f004 fa1e 	bl	b9356 <_ZN3DHT5beginEv>
    float t = dht.getTempCelcius();
   b4f1a:	a801      	add	r0, sp, #4
   b4f1c:	f004 fad8 	bl	b94d0 <_ZN3DHT14getTempCelciusEv>

    // The fast read may cause an invalid value like 0.0000 or NuLL. Repeat until valid value.
    while (isnan(t) || (t == 0.0))
   b4f20:	eeb4 0a40 	vcmp.f32	s0, s0
   b4f24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    float t = dht.getTempCelcius();
   b4f28:	eeb0 8a40 	vmov.f32	s16, s0
    while (isnan(t) || (t == 0.0))
   b4f2c:	d6f5      	bvs.n	b4f1a <_Z12tempTempladoi+0x1a>
   b4f2e:	eeb5 0a40 	vcmp.f32	s0, #0.0
   b4f32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4f36:	d0f0      	beq.n	b4f1a <_Z12tempTempladoi+0x1a>
    {
        t = dht.getTempCelcius();
    }

    Serial.printlnf("Temp: %f", t);
   b4f38:	f005 ff58 	bl	badec <_Z16_fetch_usbserialv>
   b4f3c:	4604      	mov	r4, r0
   b4f3e:	ee18 0a10 	vmov	r0, s16
   b4f42:	f7ff f9d1 	bl	b42e8 <__aeabi_f2d>
   b4f46:	4602      	mov	r2, r0
   b4f48:	460b      	mov	r3, r1
   b4f4a:	4620      	mov	r0, r4
   b4f4c:	490c      	ldr	r1, [pc, #48]	; (b4f80 <_Z12tempTempladoi+0x80>)
   b4f4e:	f7ff fdd2 	bl	b4af6 <_ZN5Print8printlnfEPKcz>
    if (t > 7 && t < 26)
   b4f52:	eef1 7a0c 	vmov.f32	s15, #28	; 0x40e00000  7.0
   b4f56:	eeb4 8ae7 	vcmpe.f32	s16, s15
   b4f5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4f5e:	dc04      	bgt.n	b4f6a <_Z12tempTempladoi+0x6a>
        return true;
    else
        return false;
   b4f60:	2000      	movs	r0, #0
}
   b4f62:	b006      	add	sp, #24
   b4f64:	ecbd 8b02 	vpop	{d8}
   b4f68:	bd10      	pop	{r4, pc}
    if (t > 7 && t < 26)
   b4f6a:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
   b4f6e:	eeb4 8ae7 	vcmpe.f32	s16, s15
   b4f72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4f76:	bf4c      	ite	mi
   b4f78:	2001      	movmi	r0, #1
   b4f7a:	2000      	movpl	r0, #0
   b4f7c:	e7f1      	b.n	b4f62 <_Z12tempTempladoi+0x62>
   b4f7e:	bf00      	nop
   b4f80:	000bb6ed 	.word	0x000bb6ed

000b4f84 <_Z9tempCalori>:

bool tempCalor(int puerto)
{
   b4f84:	b530      	push	{r4, r5, lr}
   b4f86:	ed2d 8b02 	vpush	{d8}
   b4f8a:	b087      	sub	sp, #28
    DHT dht(puerto, DHT11);
   b4f8c:	b2c1      	uxtb	r1, r0
   b4f8e:	2306      	movs	r3, #6
   b4f90:	220b      	movs	r2, #11
   b4f92:	a801      	add	r0, sp, #4
   b4f94:	f004 f9d8 	bl	b9348 <_ZN3DHTC1Ehhh>
    dht.begin();
   b4f98:	a801      	add	r0, sp, #4
   b4f9a:	f004 f9dc 	bl	b9356 <_ZN3DHT5beginEv>
    float t = dht.getTempCelcius();
   b4f9e:	a801      	add	r0, sp, #4
   b4fa0:	f004 fa96 	bl	b94d0 <_ZN3DHT14getTempCelciusEv>

    // The fast read may cause an invalid value like 0.0000 or NuLL. Repeat until valid value.
    while (isnan(t) | t == 0.0)
   b4fa4:	eeb5 0a40 	vcmp.f32	s0, #0.0
   b4fa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4fac:	eeb4 0a40 	vcmp.f32	s0, s0
   b4fb0:	bf0c      	ite	eq
   b4fb2:	2401      	moveq	r4, #1
   b4fb4:	2400      	movne	r4, #0
   b4fb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4fba:	bf68      	it	vs
   b4fbc:	f044 0401 	orrvs.w	r4, r4, #1
    float t = dht.getTempCelcius();
   b4fc0:	eeb0 8a40 	vmov.f32	s16, s0
    while (isnan(t) | t == 0.0)
   b4fc4:	2c00      	cmp	r4, #0
   b4fc6:	d1ea      	bne.n	b4f9e <_Z9tempCalori+0x1a>
    {
        t = dht.getTempCelcius();
    }

    Serial.printlnf("Temp: %f", t);
   b4fc8:	f005 ff10 	bl	badec <_Z16_fetch_usbserialv>
   b4fcc:	4605      	mov	r5, r0
   b4fce:	ee18 0a10 	vmov	r0, s16
   b4fd2:	f7ff f989 	bl	b42e8 <__aeabi_f2d>
   b4fd6:	4602      	mov	r2, r0
   b4fd8:	460b      	mov	r3, r1
   b4fda:	4628      	mov	r0, r5
   b4fdc:	490b      	ldr	r1, [pc, #44]	; (b500c <_Z9tempCalori+0x88>)
   b4fde:	f7ff fd8a 	bl	b4af6 <_ZN5Print8printlnfEPKcz>
    if (t > 25 && t < 50)
   b4fe2:	eef3 7a09 	vmov.f32	s15, #57	; 0x41c80000  25.0
   b4fe6:	eeb4 8ae7 	vcmpe.f32	s16, s15
   b4fea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4fee:	dd08      	ble.n	b5002 <_Z9tempCalori+0x7e>
   b4ff0:	eddf 7a07 	vldr	s15, [pc, #28]	; b5010 <_Z9tempCalori+0x8c>
   b4ff4:	eeb4 8ae7 	vcmpe.f32	s16, s15
   b4ff8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4ffc:	bf4c      	ite	mi
   b4ffe:	2401      	movmi	r4, #1
   b5000:	2400      	movpl	r4, #0
        return true;
    else
        return false;
}
   b5002:	4620      	mov	r0, r4
   b5004:	b007      	add	sp, #28
   b5006:	ecbd 8b02 	vpop	{d8}
   b500a:	bd30      	pop	{r4, r5, pc}
   b500c:	000bb6ed 	.word	0x000bb6ed
   b5010:	42480000 	.word	0x42480000

000b5014 <_Z12DistanciaExpi>:
//---------------------------------------------------------------------------------------------------
//------------------------------------- M O D O   3 -------------------------------------------------
//---------------------------------------------------------------------------------------------------

int DistanciaExp(int puerto)
{
   b5014:	b507      	push	{r0, r1, r2, lr}
   b5016:	4601      	mov	r1, r0
    Ultrasonic ultrasonic(puerto);
   b5018:	a801      	add	r0, sp, #4
   b501a:	f004 f96f 	bl	b92fc <_ZN10UltrasonicC1Ei>
    int range = ultrasonic.MeasureInCentimeters();
   b501e:	a801      	add	r0, sp, #4
   b5020:	f004 f96e 	bl	b9300 <_ZN10Ultrasonic20MeasureInCentimetersEv>
    // Serial.printlnf("Distancia: %d", range);
    return range;
}
   b5024:	b003      	add	sp, #12
   b5026:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b502c <_Z9AnguloExpv>:

int AnguloExp()
{
   b502c:	b510      	push	{r4, lr}
   b502e:	ed2d 8b04 	vpush	{d8-d9}
   float voltage;
    int sensor_value;
    for (int i = 0; i < 50; i++){
        sensor_value = analogRead(rotoryAngle_PIN);
        voltage += (float)sensor_value * 5 / 1023;
   b5032:	ed9f 9a1b 	vldr	s18, [pc, #108]	; b50a0 <_Z9AnguloExpv+0x74>
{
   b5036:	2432      	movs	r4, #50	; 0x32
        voltage += (float)sensor_value * 5 / 1023;
   b5038:	eeb1 8a04 	vmov.f32	s16, #20	; 0x40a00000  5.0
        sensor_value = analogRead(rotoryAngle_PIN);
   b503c:	2013      	movs	r0, #19
   b503e:	f006 f948 	bl	bb2d2 <analogRead>
        voltage += (float)sensor_value * 5 / 1023;
   b5042:	ee07 0a90 	vmov	s15, r0
   b5046:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    for (int i = 0; i < 50; i++){
   b504a:	3c01      	subs	r4, #1
        voltage += (float)sensor_value * 5 / 1023;
   b504c:	ee67 7a88 	vmul.f32	s15, s15, s16
   b5050:	ee87 7a89 	vdiv.f32	s14, s15, s18
   b5054:	ee78 8a87 	vadd.f32	s17, s17, s14
    for (int i = 0; i < 50; i++){
   b5058:	d1f0      	bne.n	b503c <_Z9AnguloExpv+0x10>
    }
    voltage = voltage/50;
   b505a:	ed9f 7a12 	vldr	s14, [pc, #72]	; b50a4 <_Z9AnguloExpv+0x78>
   float degrees = (voltage * 300) / 5;
   degrees = degrees * 270 / 1200;
   b505e:	ed9f 6a12 	vldr	s12, [pc, #72]	; b50a8 <_Z9AnguloExpv+0x7c>
    voltage = voltage/50;
   b5062:	eec8 7a87 	vdiv.f32	s15, s17, s14
   float degrees = (voltage * 300) / 5;
   b5066:	ed9f 7a11 	vldr	s14, [pc, #68]	; b50ac <_Z9AnguloExpv+0x80>
   b506a:	ee67 7a87 	vmul.f32	s15, s15, s14
   b506e:	ee87 7a88 	vdiv.f32	s14, s15, s16
   degrees = 270 - degrees;
   if (degrees < 0)
    degrees = 0;

   return (int) degrees;
}
   b5072:	ecbd 8b04 	vpop	{d8-d9}
   degrees = degrees * 270 / 1200;
   b5076:	eddf 7a0e 	vldr	s15, [pc, #56]	; b50b0 <_Z9AnguloExpv+0x84>
   b507a:	ee27 7a27 	vmul.f32	s14, s14, s15
   b507e:	eec7 6a06 	vdiv.f32	s13, s14, s12
   degrees = 270 - degrees;
   b5082:	ee77 7ae6 	vsub.f32	s15, s15, s13
   if (degrees < 0)
   b5086:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   b508a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    degrees = 0;
   b508e:	bf48      	it	mi
   b5090:	eddf 7a08 	vldrmi	s15, [pc, #32]	; b50b4 <_Z9AnguloExpv+0x88>
}
   b5094:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   b5098:	ee17 0a90 	vmov	r0, s15
   b509c:	bd10      	pop	{r4, pc}
   b509e:	bf00      	nop
   b50a0:	447fc000 	.word	0x447fc000
   b50a4:	42480000 	.word	0x42480000
   b50a8:	44960000 	.word	0x44960000
   b50ac:	43960000 	.word	0x43960000
   b50b0:	43870000 	.word	0x43870000
   b50b4:	00000000 	.word	0x00000000

000b50b8 <_Z6LuzExpv>:

int LuzExp()
{
   b50b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b50ba:	2432      	movs	r4, #50	; 0x32
    int value = 0;
   b50bc:	2500      	movs	r5, #0
    for (int i = 0; i < 50; i++){
        value += analogRead(sensorLuz_PIN);
   b50be:	2013      	movs	r0, #19
   b50c0:	f006 f907 	bl	bb2d2 <analogRead>
    for (int i = 0; i < 50; i++){
   b50c4:	3c01      	subs	r4, #1
        value += analogRead(sensorLuz_PIN);
   b50c6:	4405      	add	r5, r0
    for (int i = 0; i < 50; i++){
   b50c8:	d1f9      	bne.n	b50be <_Z6LuzExpv+0x6>
    }
    value = value/50;
    value = map(value, 0, 4095, 0, 100);
   b50ca:	2364      	movs	r3, #100	; 0x64
   b50cc:	9300      	str	r3, [sp, #0]
   b50ce:	f640 72ff 	movw	r2, #4095	; 0xfff
   b50d2:	4623      	mov	r3, r4
   b50d4:	4621      	mov	r1, r4
   b50d6:	2032      	movs	r0, #50	; 0x32
   b50d8:	fb95 f0f0 	sdiv	r0, r5, r0
   b50dc:	f005 fca2 	bl	baa24 <_Z3mapiiiii>
    return value;
   
}
   b50e0:	b003      	add	sp, #12
   b50e2:	bd30      	pop	{r4, r5, pc}
   b50e4:	0000      	movs	r0, r0
	...

000b50e8 <_Z15SensorSonidoExpv>:

int SensorSonidoExp()
{
   b50e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b50ec:	f004 ff9c 	bl	ba028 <HAL_Timer_Get_Milli_Seconds>
    unsigned int sample;
    unsigned long startMillis= millis();                   // Start of sample window
    double peakToPeak = 0;                                 // peak-to-peak level
    
    unsigned int signalMax = 0;                            //minimum value
    unsigned int signalMin = 1024;                         //maximum value
   b50f0:	f44f 6580 	mov.w	r5, #1024	; 0x400
   b50f4:	4607      	mov	r7, r0
    unsigned int signalMax = 0;                            //minimum value
   b50f6:	2600      	movs	r6, #0
   b50f8:	f004 ff96 	bl	ba028 <HAL_Timer_Get_Milli_Seconds>
    
                                                            // collect data for 50 mS
    while (millis() - startMillis < sampleWindow)
   b50fc:	1bc0      	subs	r0, r0, r7
   b50fe:	2831      	cmp	r0, #49	; 0x31
   b5100:	d818      	bhi.n	b5134 <_Z15SensorSonidoExpv+0x4c>
    {
        sample = analogRead(sensorSonido_PIN);              //get reading from microphone
   b5102:	2013      	movs	r0, #19
   b5104:	f006 f8e5 	bl	bb2d2 <analogRead>
   b5108:	4604      	mov	r4, r0
        Serial.println(sample);
   b510a:	f005 fe6f 	bl	badec <_Z16_fetch_usbserialv>
        return printNumber(val, base) + t;
   b510e:	220a      	movs	r2, #10
   b5110:	4680      	mov	r8, r0
   b5112:	4621      	mov	r1, r4
   b5114:	f005 fc25 	bl	ba962 <_ZN5Print11printNumberEmh>
        n += println();
   b5118:	4640      	mov	r0, r8
   b511a:	f005 fc0c 	bl	ba936 <_ZN5Print7printlnEv>
        if (sample < 1024)                                  // toss out spurious readings
   b511e:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
   b5122:	d2e9      	bcs.n	b50f8 <_Z15SensorSonidoExpv+0x10>
        {
            if (sample > signalMax)
   b5124:	42a6      	cmp	r6, r4
   b5126:	d303      	bcc.n	b5130 <_Z15SensorSonidoExpv+0x48>
            {
                signalMax = sample;                           // save just the max levels
            }
            else if (sample < signalMin)
   b5128:	42a5      	cmp	r5, r4
   b512a:	bf28      	it	cs
   b512c:	4625      	movcs	r5, r4
   b512e:	e7e3      	b.n	b50f8 <_Z15SensorSonidoExpv+0x10>
   b5130:	4626      	mov	r6, r4
   b5132:	e7e1      	b.n	b50f8 <_Z15SensorSonidoExpv+0x10>
                signalMin = sample;                           // save just the min levels
            }
        }
    }
        
    peakToPeak = signalMax - signalMin;                    // max - min = peak-peak amplitude
   b5134:	1b70      	subs	r0, r6, r5
   b5136:	f7ff f8b5 	bl	b42a4 <__aeabi_ui2d>
    int db = map(peakToPeak,20.0,900.0,49.5,90.0); 
   b513a:	ed9f 4b09 	vldr	d4, [pc, #36]	; b5160 <_Z15SensorSonidoExpv+0x78>
   b513e:	ed9f 3b0a 	vldr	d3, [pc, #40]	; b5168 <_Z15SensorSonidoExpv+0x80>
   b5142:	ed9f 2b0b 	vldr	d2, [pc, #44]	; b5170 <_Z15SensorSonidoExpv+0x88>
   b5146:	ed9f 1b0c 	vldr	d1, [pc, #48]	; b5178 <_Z15SensorSonidoExpv+0x90>
   b514a:	ec41 0b10 	vmov	d0, r0, r1
   b514e:	f005 fc75 	bl	baa3c <_Z3mapddddd>
   b5152:	ec51 0b10 	vmov	r0, r1, d0
   b5156:	f7ff fbb9 	bl	b48cc <__aeabi_d2iz>
    return db;
    }
   b515a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b515e:	bf00      	nop
   b5160:	00000000 	.word	0x00000000
   b5164:	40568000 	.word	0x40568000
   b5168:	00000000 	.word	0x00000000
   b516c:	4048c000 	.word	0x4048c000
   b5170:	00000000 	.word	0x00000000
   b5174:	408c2000 	.word	0x408c2000
   b5178:	00000000 	.word	0x00000000
   b517c:	40340000 	.word	0x40340000

000b5180 <_Z13SensorTempExpi>:

int SensorTempExp(int puerto)
{
   b5180:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    DHT dht(puerto, DHT11);
   b5182:	b2c1      	uxtb	r1, r0
   b5184:	2306      	movs	r3, #6
   b5186:	220b      	movs	r2, #11
   b5188:	a801      	add	r0, sp, #4
   b518a:	f004 f8dd 	bl	b9348 <_ZN3DHTC1Ehhh>
    dht.begin();
   b518e:	a801      	add	r0, sp, #4
   b5190:	f004 f8e1 	bl	b9356 <_ZN3DHT5beginEv>
    float t = dht.getTempCelcius();
   b5194:	a801      	add	r0, sp, #4
   b5196:	f004 f99b 	bl	b94d0 <_ZN3DHT14getTempCelciusEv>

    // The fast read may cause an invalid value like 0.0000 or NuLL. Repeat until valid value.
    while (isnan(t) | t == 0.0)
   b519a:	eeb5 0a40 	vcmp.f32	s0, #0.0
   b519e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b51a2:	d0f7      	beq.n	b5194 <_Z13SensorTempExpi+0x14>
   b51a4:	eeb4 0a40 	vcmp.f32	s0, s0
   b51a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b51ac:	d6f2      	bvs.n	b5194 <_Z13SensorTempExpi+0x14>
    }

    //t = ajusta_temp(t); 
    
    return t;
}
   b51ae:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   b51b2:	ee17 0a90 	vmov	r0, s15
   b51b6:	b007      	add	sp, #28
   b51b8:	f85d fb04 	ldr.w	pc, [sp], #4

000b51bc <_Z9TurbiaExpi>:

int TurbiaExp(int puerto)
{
    int sensor_value;
    switch (puerto)
   b51bc:	2802      	cmp	r0, #2
   b51be:	d005      	beq.n	b51cc <_Z9TurbiaExpi+0x10>
   b51c0:	2804      	cmp	r0, #4
   b51c2:	d005      	beq.n	b51d0 <_Z9TurbiaExpi+0x14>
   b51c4:	b930      	cbnz	r0, b51d4 <_Z9TurbiaExpi+0x18>
    {
    case 0: 
        sensor_value = analogRead(A0);
   b51c6:	2013      	movs	r0, #19
        break;
    case 2:
        sensor_value = analogRead(A2);
        break;
    case 4:
        sensor_value = analogRead(A4);
   b51c8:	f006 b883 	b.w	bb2d2 <analogRead>
        sensor_value = analogRead(A2);
   b51cc:	2011      	movs	r0, #17
   b51ce:	e7fb      	b.n	b51c8 <_Z9TurbiaExpi+0xc>
        sensor_value = analogRead(A4);
   b51d0:	200f      	movs	r0, #15
   b51d2:	e7f9      	b.n	b51c8 <_Z9TurbiaExpi+0xc>
        break;
    }
    return sensor_value;
}
   b51d4:	2000      	movs	r0, #0
   b51d6:	4770      	bx	lr

000b51d8 <_Z10leerSensoriii>:


bool leerSensor(int id, int condicion, int puerto)
{
   b51d8:	b508      	push	{r3, lr}
   b51da:	4603      	mov	r3, r0
   b51dc:	3b01      	subs	r3, #1
   b51de:	4610      	mov	r0, r2
   b51e0:	2b0b      	cmp	r3, #11
   b51e2:	d85f      	bhi.n	b52a4 <_Z10leerSensoriii+0xcc>
   b51e4:	e8df f003 	tbb	[pc, r3]
   b51e8:	1d140b06 	.word	0x1d140b06
   b51ec:	40062b22 	.word	0x40062b22
   b51f0:	5b575346 	.word	0x5b575346
    switch (id)
    {
    case 1:
        return (condicion == 0 ? noDistancia(puerto) : siDistancia(puerto));
   b51f4:	bba1      	cbnz	r1, b5260 <_Z10leerSensoriii+0x88>

    default:
        Serial.println("InvalidSensorError");
        return false;
    }
}
   b51f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0 ? noDistancia(puerto) : siDistancia(puerto));
   b51fa:	f7ff bc8a 	b.w	b4b12 <_Z11noDistanciai>
        return (condicion == 0 ? noLuz(puerto) : siLuz(puerto));
   b51fe:	b919      	cbnz	r1, b5208 <_Z10leerSensoriii+0x30>
}
   b5200:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0 ? noLuz(puerto) : siLuz(puerto));
   b5204:	f7ff bcb8 	b.w	b4b78 <_Z5noLuzi>
}
   b5208:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0 ? noLuz(puerto) : siLuz(puerto));
   b520c:	f7ff bc9f 	b.w	b4b4e <_Z5siLuzi>
        return (condicion == 0 ? noRuido(puerto) : siRuido(puerto));
   b5210:	b919      	cbnz	r1, b521a <_Z10leerSensoriii+0x42>
}
   b5212:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0 ? noRuido(puerto) : siRuido(puerto));
   b5216:	f7ff bceb 	b.w	b4bf0 <_Z7noRuidoi>
}
   b521a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0 ? noRuido(puerto) : siRuido(puerto));
   b521e:	f7ff bcc1 	b.w	b4ba4 <_Z7siRuidoi>
        return (condicion == 0 ? noBoton(puerto) : siBoton(puerto));
   b5222:	bb19      	cbnz	r1, b526c <_Z10leerSensoriii+0x94>
}
   b5224:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0 ? noBoton(puerto) : siBoton(puerto));
   b5228:	f7ff bcfb 	b.w	b4c22 <_Z7noBotoni>
        return (condicion == 0 ? noRotativo(puerto) : siRotativo(puerto));
   b522c:	b919      	cbnz	r1, b5236 <_Z10leerSensoriii+0x5e>
}
   b522e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0 ? noRotativo(puerto) : siRotativo(puerto));
   b5232:	f7ff bd49 	b.w	b4cc8 <_Z10noRotativoi>
}
   b5236:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0 ? noRotativo(puerto) : siRotativo(puerto));
   b523a:	f7ff bd01 	b.w	b4c40 <_Z10siRotativoi>
        switch (condicion)
   b523e:	2901      	cmp	r1, #1
   b5240:	d006      	beq.n	b5250 <_Z10leerSensoriii+0x78>
   b5242:	2902      	cmp	r1, #2
   b5244:	d008      	beq.n	b5258 <_Z10leerSensoriii+0x80>
   b5246:	b959      	cbnz	r1, b5260 <_Z10leerSensoriii+0x88>
}
   b5248:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            return tempFrio(puerto);
   b524c:	f7ff be14 	b.w	b4e78 <_Z8tempFrioi>
}
   b5250:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            return tempTemplado(puerto);
   b5254:	f7ff be54 	b.w	b4f00 <_Z12tempTempladoi>
}
   b5258:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            return tempCalor(puerto);
   b525c:	f7ff be92 	b.w	b4f84 <_Z9tempCalori>
}
   b5260:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0 ? noDistancia(puerto) : siDistancia(puerto));
   b5264:	f7ff bc64 	b.w	b4b30 <_Z11siDistanciai>
        return (condicion == 0 ? noAgua(puerto) : siAgua(puerto));
   b5268:	2900      	cmp	r1, #0
   b526a:	d1db      	bne.n	b5224 <_Z10leerSensoriii+0x4c>
}
   b526c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0 ? noBoton(puerto) : siBoton(puerto));
   b5270:	f7ff bcc8 	b.w	b4c04 <_Z7siBotoni>
        switch (condicion)
   b5274:	2901      	cmp	r1, #1
   b5276:	d006      	beq.n	b5286 <_Z10leerSensoriii+0xae>
   b5278:	2903      	cmp	r1, #3
   b527a:	d00c      	beq.n	b5296 <_Z10leerSensoriii+0xbe>
   b527c:	b939      	cbnz	r1, b528e <_Z10leerSensoriii+0xb6>
}
   b527e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            return noBotonDual(puerto);
   b5282:	f7ff bdb0 	b.w	b4de6 <_Z11noBotonDuali>
}
   b5286:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            return BotonDualA(puerto);
   b528a:	f7ff bd61 	b.w	b4d50 <_Z10BotonDualAi>
}
   b528e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            return BotonDualB(puerto);
   b5292:	f7ff bd76 	b.w	b4d82 <_Z10BotonDualBi>
}
   b5296:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            return BotonDual2(puerto);
   b529a:	f7ff bd8b 	b.w	b4db4 <_Z10BotonDual2i>
        switch (condicion)
   b529e:	b141      	cbz	r1, b52b2 <_Z10leerSensoriii+0xda>
   b52a0:	2901      	cmp	r1, #1
   b52a2:	d00a      	beq.n	b52ba <_Z10leerSensoriii+0xe2>
        Serial.println("InvalidSensorError");
   b52a4:	f005 fda2 	bl	badec <_Z16_fetch_usbserialv>
   b52a8:	4906      	ldr	r1, [pc, #24]	; (b52c4 <_Z10leerSensoriii+0xec>)
   b52aa:	f005 fb50 	bl	ba94e <_ZN5Print7printlnEPKc>
}
   b52ae:	2000      	movs	r0, #0
   b52b0:	bd08      	pop	{r3, pc}
   b52b2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            return Cafe(puerto);
   b52b6:	f7ff bdb0 	b.w	b4e1a <_Z4Cafei>
}
   b52ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            return AguaClara(puerto);           
   b52be:	f7ff bdc6 	b.w	b4e4e <_Z9AguaClarai>
   b52c2:	bf00      	nop
   b52c4:	000bb6f6 	.word	0x000bb6f6

000b52c8 <_Z13leerSensorExpii>:

int leerSensorExp(int id, int puerto){
   b52c8:	b508      	push	{r3, lr}
   b52ca:	4603      	mov	r3, r0
   b52cc:	3b02      	subs	r3, #2
   b52ce:	4608      	mov	r0, r1
   b52d0:	2b0a      	cmp	r3, #10
   b52d2:	d81f      	bhi.n	b5314 <_Z13leerSensorExpii+0x4c>
   b52d4:	e8df f003 	tbb	[pc, r3]
   b52d8:	0e1e0a06 	.word	0x0e1e0a06
   b52dc:	1e1e1612 	.word	0x1e1e1612
   b52e0:	1e1e      	.short	0x1e1e
   b52e2:	1a          	.byte	0x1a
   b52e3:	00          	.byte	0x00
    
    default:
        Serial.println("InvalidSensorError");
        return -1;
    }
}
   b52e4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return LuzExp();
   b52e8:	f7ff bee6 	b.w	b50b8 <_Z6LuzExpv>
}
   b52ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return SensorSonidoExp();
   b52f0:	f7ff befa 	b.w	b50e8 <_Z15SensorSonidoExpv>
}
   b52f4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return AnguloExp();
   b52f8:	f7ff be98 	b.w	b502c <_Z9AnguloExpv>
}
   b52fc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return SensorTempExp(puerto);
   b5300:	f7ff bf3e 	b.w	b5180 <_Z13SensorTempExpi>
}
   b5304:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return DistanciaExp(puerto);
   b5308:	f7ff be84 	b.w	b5014 <_Z12DistanciaExpi>
}
   b530c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return TurbiaExp(puerto);
   b5310:	f7ff bf54 	b.w	b51bc <_Z9TurbiaExpi>
        Serial.println("InvalidSensorError");
   b5314:	f005 fd6a 	bl	badec <_Z16_fetch_usbserialv>
   b5318:	4902      	ldr	r1, [pc, #8]	; (b5324 <_Z13leerSensorExpii+0x5c>)
   b531a:	f005 fb18 	bl	ba94e <_ZN5Print7printlnEPKc>
}
   b531e:	f04f 30ff 	mov.w	r0, #4294967295
   b5322:	bd08      	pop	{r3, pc}
   b5324:	000bb6f6 	.word	0x000bb6f6

000b5328 <_Z9ledApagarv>:
bool init = false;

int counter = 0;

void ledApagar()
{
   b5328:	b507      	push	{r0, r1, r2, lr}
   ledObject.setColorRGB(0, 0, 0, 0);
   b532a:	2300      	movs	r3, #0
   b532c:	4804      	ldr	r0, [pc, #16]	; (b5340 <_Z9ledApagarv+0x18>)
   b532e:	9300      	str	r3, [sp, #0]
   b5330:	461a      	mov	r2, r3
   b5332:	4619      	mov	r1, r3
   b5334:	f004 fda6 	bl	b9e84 <_ZN12ChainableLED11setColorRGBEhhhh>
}
   b5338:	b003      	add	sp, #12
   b533a:	f85d fb04 	ldr.w	pc, [sp], #4
   b533e:	bf00      	nop
   b5340:	2003d6ec 	.word	0x2003d6ec

000b5344 <_Z7ledRojov>:
void ledRojo()
{
   b5344:	b507      	push	{r0, r1, r2, lr}
    // Serial.println("LedRojo");
    ledObject.setColorRGB(0, 255, 0, 0);
   b5346:	2300      	movs	r3, #0
   b5348:	4804      	ldr	r0, [pc, #16]	; (b535c <_Z7ledRojov+0x18>)
   b534a:	9300      	str	r3, [sp, #0]
   b534c:	22ff      	movs	r2, #255	; 0xff
   b534e:	4619      	mov	r1, r3
   b5350:	f004 fd98 	bl	b9e84 <_ZN12ChainableLED11setColorRGBEhhhh>
}
   b5354:	b003      	add	sp, #12
   b5356:	f85d fb04 	ldr.w	pc, [sp], #4
   b535a:	bf00      	nop
   b535c:	2003d6ec 	.word	0x2003d6ec

000b5360 <_Z8ledVerdev>:
void ledVerde()
{
   b5360:	b507      	push	{r0, r1, r2, lr}
    ledObject.setColorRGB(0, 0, 255, 10);
   b5362:	230a      	movs	r3, #10
   b5364:	2200      	movs	r2, #0
   b5366:	9300      	str	r3, [sp, #0]
   b5368:	4803      	ldr	r0, [pc, #12]	; (b5378 <_Z8ledVerdev+0x18>)
   b536a:	23ff      	movs	r3, #255	; 0xff
   b536c:	4611      	mov	r1, r2
   b536e:	f004 fd89 	bl	b9e84 <_ZN12ChainableLED11setColorRGBEhhhh>
}
   b5372:	b003      	add	sp, #12
   b5374:	f85d fb04 	ldr.w	pc, [sp], #4
   b5378:	2003d6ec 	.word	0x2003d6ec

000b537c <_Z7ledAzulv>:
void ledAzul()
{
   b537c:	b507      	push	{r0, r1, r2, lr}
    ledObject.setColorRGB(0, 0, 0, 255);
   b537e:	23ff      	movs	r3, #255	; 0xff
   b5380:	9300      	str	r3, [sp, #0]
   b5382:	2300      	movs	r3, #0
   b5384:	4803      	ldr	r0, [pc, #12]	; (b5394 <_Z7ledAzulv+0x18>)
   b5386:	461a      	mov	r2, r3
   b5388:	4619      	mov	r1, r3
   b538a:	f004 fd7b 	bl	b9e84 <_ZN12ChainableLED11setColorRGBEhhhh>
}
   b538e:	b003      	add	sp, #12
   b5390:	f85d fb04 	ldr.w	pc, [sp], #4
   b5394:	2003d6ec 	.word	0x2003d6ec

000b5398 <_Z11ledAmarillov>:
void ledAmarillo()
{
   b5398:	b507      	push	{r0, r1, r2, lr}
    ledObject.setColorRGB(0, 255, 233, 0);
   b539a:	2100      	movs	r1, #0
   b539c:	4804      	ldr	r0, [pc, #16]	; (b53b0 <_Z11ledAmarillov+0x18>)
   b539e:	9100      	str	r1, [sp, #0]
   b53a0:	23e9      	movs	r3, #233	; 0xe9
   b53a2:	22ff      	movs	r2, #255	; 0xff
   b53a4:	f004 fd6e 	bl	b9e84 <_ZN12ChainableLED11setColorRGBEhhhh>
}
   b53a8:	b003      	add	sp, #12
   b53aa:	f85d fb04 	ldr.w	pc, [sp], #4
   b53ae:	bf00      	nop
   b53b0:	2003d6ec 	.word	0x2003d6ec

000b53b4 <_Z9ledMoradov>:
void ledMorado()
{
   b53b4:	b507      	push	{r0, r1, r2, lr}
    ledObject.setColorRGB(0, 108, 70, 117);
   b53b6:	2375      	movs	r3, #117	; 0x75
   b53b8:	9300      	str	r3, [sp, #0]
   b53ba:	4804      	ldr	r0, [pc, #16]	; (b53cc <_Z9ledMoradov+0x18>)
   b53bc:	2346      	movs	r3, #70	; 0x46
   b53be:	226c      	movs	r2, #108	; 0x6c
   b53c0:	2100      	movs	r1, #0
   b53c2:	f004 fd5f 	bl	b9e84 <_ZN12ChainableLED11setColorRGBEhhhh>
}
   b53c6:	b003      	add	sp, #12
   b53c8:	f85d fb04 	ldr.w	pc, [sp], #4
   b53cc:	2003d6ec 	.word	0x2003d6ec

000b53d0 <_Z10ledNaranjav>:
void ledNaranja()
{
   b53d0:	b507      	push	{r0, r1, r2, lr}
    ledObject.setColorRGB(0, 255, 128, 0);
   b53d2:	2100      	movs	r1, #0
   b53d4:	4804      	ldr	r0, [pc, #16]	; (b53e8 <_Z10ledNaranjav+0x18>)
   b53d6:	9100      	str	r1, [sp, #0]
   b53d8:	2380      	movs	r3, #128	; 0x80
   b53da:	22ff      	movs	r2, #255	; 0xff
   b53dc:	f004 fd52 	bl	b9e84 <_ZN12ChainableLED11setColorRGBEhhhh>
}
   b53e0:	b003      	add	sp, #12
   b53e2:	f85d fb04 	ldr.w	pc, [sp], #4
   b53e6:	bf00      	nop
   b53e8:	2003d6ec 	.word	0x2003d6ec

000b53ec <_Z9ledBlancov>:
void ledBlanco()
{
   b53ec:	b507      	push	{r0, r1, r2, lr}
    ledObject.setColorRGB(0, 255, 255, 255);
   b53ee:	23ff      	movs	r3, #255	; 0xff
   b53f0:	4804      	ldr	r0, [pc, #16]	; (b5404 <_Z9ledBlancov+0x18>)
   b53f2:	9300      	str	r3, [sp, #0]
   b53f4:	461a      	mov	r2, r3
   b53f6:	2100      	movs	r1, #0
   b53f8:	f004 fd44 	bl	b9e84 <_ZN12ChainableLED11setColorRGBEhhhh>
}
   b53fc:	b003      	add	sp, #12
   b53fe:	f85d fb04 	ldr.w	pc, [sp], #4
   b5402:	bf00      	nop
   b5404:	2003d6ec 	.word	0x2003d6ec

000b5408 <_Z11ledArcoirisv>:
void ledArcoiris()
{
   b5408:	b510      	push	{r4, lr}
   switch (counter)
   b540a:	4c11      	ldr	r4, [pc, #68]	; (b5450 <_Z11ledArcoirisv+0x48>)
   b540c:	6823      	ldr	r3, [r4, #0]
   b540e:	2b05      	cmp	r3, #5
   b5410:	d809      	bhi.n	b5426 <_Z11ledArcoirisv+0x1e>
   b5412:	e8df f003 	tbb	[pc, r3]
   b5416:	0d03      	.short	0x0d03
   b5418:	19161310 	.word	0x19161310
   {
   case 0:
      ledRojo();
   b541c:	f7ff ff92 	bl	b5344 <_Z7ledRojov>
      counter++;
      break;

   case 4:
      ledMorado();
      counter++;
   b5420:	6823      	ldr	r3, [r4, #0]
   b5422:	3301      	adds	r3, #1
      break;

   case 5:
      ledAzul();
      counter = 0;
   b5424:	6023      	str	r3, [r4, #0]
    for (double i = 0; i < 1; i += 0.01)
    {
        ledObject.setColorHSB(0, i, 0.75, 0.75);
    }*/

}
   b5426:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   delay(150);
   b542a:	2096      	movs	r0, #150	; 0x96
   b542c:	f005 bb49 	b.w	baac2 <delay>
      ledNaranja();
   b5430:	f7ff ffce 	bl	b53d0 <_Z10ledNaranjav>
      counter++;
   b5434:	e7f4      	b.n	b5420 <_Z11ledArcoirisv+0x18>
      ledAmarillo();
   b5436:	f7ff ffaf 	bl	b5398 <_Z11ledAmarillov>
      counter++;
   b543a:	e7f1      	b.n	b5420 <_Z11ledArcoirisv+0x18>
      ledVerde();
   b543c:	f7ff ff90 	bl	b5360 <_Z8ledVerdev>
      counter++;
   b5440:	e7ee      	b.n	b5420 <_Z11ledArcoirisv+0x18>
      ledMorado();
   b5442:	f7ff ffb7 	bl	b53b4 <_Z9ledMoradov>
   b5446:	e7eb      	b.n	b5420 <_Z11ledArcoirisv+0x18>
      ledAzul();
   b5448:	f7ff ff98 	bl	b537c <_Z7ledAzulv>
      counter = 0;
   b544c:	2300      	movs	r3, #0
   b544e:	e7e9      	b.n	b5424 <_Z11ledArcoirisv+0x1c>
   b5450:	2003d344 	.word	0x2003d344

000b5454 <_Z9pitidoON0v>:
//--------------------------------- M O D O   0 ---------------------------------
//-------------------------------------------------------------------------------

void 
pitidoON0()
{
   b5454:	b508      	push	{r3, lr}
   //Serial.println("Zumbador ON");
   digitalWrite(Zumbador_PIN, 1);
   b5456:	2101      	movs	r1, #1
   b5458:	2006      	movs	r0, #6
   b545a:	f005 ff0e 	bl	bb27a <digitalWrite>
   digitalWrite(Zumbador_PIN, HIGH);
   b545e:	2101      	movs	r1, #1
   b5460:	2006      	movs	r0, #6
   b5462:	f005 ff0a 	bl	bb27a <digitalWrite>
   digitalWrite(D7, HIGH);
   b5466:	2101      	movs	r1, #1
   b5468:	2007      	movs	r0, #7
   b546a:	f005 ff06 	bl	bb27a <digitalWrite>
   digitalWrite(D7, 1);
}
   b546e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   digitalWrite(D7, 1);
   b5472:	2101      	movs	r1, #1
   b5474:	2007      	movs	r0, #7
   b5476:	f005 bf00 	b.w	bb27a <digitalWrite>

000b547a <_Z10pitidoOFF0v>:

void pitidoOFF0()
{
   b547a:	b508      	push	{r3, lr}
   //Serial.println("Zumbador OFF");
   digitalWrite(Zumbador_PIN, 0);
   b547c:	2100      	movs	r1, #0
   b547e:	2006      	movs	r0, #6
   b5480:	f005 fefb 	bl	bb27a <digitalWrite>
   digitalWrite(Zumbador_PIN, LOW);
   b5484:	2100      	movs	r1, #0
   b5486:	2006      	movs	r0, #6
   b5488:	f005 fef7 	bl	bb27a <digitalWrite>
   digitalWrite(D7, LOW);
   b548c:	2100      	movs	r1, #0
   b548e:	2007      	movs	r0, #7
   b5490:	f005 fef3 	bl	bb27a <digitalWrite>
   digitalWrite(D7, 0);
}
   b5494:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   digitalWrite(D7, 0);
   b5498:	2100      	movs	r1, #0
   b549a:	2007      	movs	r0, #7
   b549c:	f005 beed 	b.w	bb27a <digitalWrite>

000b54a0 <_Z12pitidoBlink0v>:

void pitidoBlink0()
{
   b54a0:	b508      	push	{r3, lr}
   pitidoON0();
   b54a2:	f7ff ffd7 	bl	b5454 <_Z9pitidoON0v>
   delay(100);
   b54a6:	2064      	movs	r0, #100	; 0x64
   b54a8:	f005 fb0b 	bl	baac2 <delay>
   pitidoOFF0();
   b54ac:	f7ff ffe5 	bl	b547a <_Z10pitidoOFF0v>
   delay(100);
}
   b54b0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   delay(100);
   b54b4:	2064      	movs	r0, #100	; 0x64
   b54b6:	f005 bb04 	b.w	baac2 <delay>

000b54ba <_Z14ledAzulNaranjab>:

void ledAzulNaranja(boolean estado)
{
   if (estado)
   b54ba:	b108      	cbz	r0, b54c0 <_Z14ledAzulNaranjab+0x6>
   {
      ledAzul();
   b54bc:	f7ff bf5e 	b.w	b537c <_Z7ledAzulv>
   }
   else
   {
      ledNaranja();
   b54c0:	f7ff bf86 	b.w	b53d0 <_Z10ledNaranjav>

000b54c4 <_Z17ledMoradoAmarillob>:
   }
}
void ledMoradoAmarillo(boolean estado)
{
   if (estado)
   b54c4:	b108      	cbz	r0, b54ca <_Z17ledMoradoAmarillob+0x6>
   {
      ledAmarillo();
   b54c6:	f7ff bf67 	b.w	b5398 <_Z11ledAmarillov>
   }
   else
   {
      ledMorado();
   b54ca:	f7ff bf73 	b.w	b53b4 <_Z9ledMoradov>

000b54ce <_Z12ledVerdeRojob>:
   }
}
void ledVerdeRojo(boolean estado)
{
   if (estado)
   b54ce:	b108      	cbz	r0, b54d4 <_Z12ledVerdeRojob+0x6>
   {
      ledVerde();
   b54d0:	f7ff bf46 	b.w	b5360 <_Z8ledVerdev>
   }
   else
   {
      ledRojo();
   b54d4:	f7ff bf36 	b.w	b5344 <_Z7ledRojov>

000b54d8 <_Z9ledBlink0b>:
   }
}
void ledBlink0(boolean estado)
{
   b54d8:	b508      	push	{r3, lr}
   if (estado)
   b54da:	b160      	cbz	r0, b54f6 <_Z9ledBlink0b+0x1e>
   {
      ledBlanco();
   b54dc:	f7ff ff86 	bl	b53ec <_Z9ledBlancov>
      delay(400);
   b54e0:	f44f 70c8 	mov.w	r0, #400	; 0x190
   b54e4:	f005 faed 	bl	baac2 <delay>
      ledApagar();
   b54e8:	f7ff ff1e 	bl	b5328 <_Z9ledApagarv>
   }
   else
   {
      ledApagar();
   }
}
   b54ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      delay(200);
   b54f0:	20c8      	movs	r0, #200	; 0xc8
   b54f2:	f005 bae6 	b.w	baac2 <delay>
}
   b54f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      ledApagar();
   b54fa:	f7ff bf15 	b.w	b5328 <_Z9ledApagarv>

000b54fe <_Z8ledOnOffb>:

void ledOnOff(boolean estado)
{
   if (estado)
   b54fe:	b108      	cbz	r0, b5504 <_Z8ledOnOffb+0x6>
   {
      ledBlanco();
   b5500:	f7ff bf74 	b.w	b53ec <_Z9ledBlancov>
   }
   else
   {
      ledApagar();
   b5504:	f7ff bf10 	b.w	b5328 <_Z9ledApagarv>

000b5508 <_Z12ledArcoiris0b>:
   }
}

void ledArcoiris0(boolean estado)
{
   if (estado)
   b5508:	b108      	cbz	r0, b550e <_Z12ledArcoiris0b+0x6>
   {
      ledArcoiris();
   b550a:	f7ff bf7d 	b.w	b5408 <_Z11ledArcoirisv>
   }
   else
   {
      ledApagar();
   b550e:	f7ff bf0b 	b.w	b5328 <_Z9ledApagarv>

000b5512 <_Z13blinkAndSleepb>:
   }
}

void blinkAndSleep(boolean estado)
{
   if (estado)
   b5512:	b108      	cbz	r0, b5518 <_Z13blinkAndSleepb+0x6>
   {
      pitidoBlink0();
   b5514:	f7ff bfc4 	b.w	b54a0 <_Z12pitidoBlink0v>
   }
   else
   {
      pitidoOFF0();
   b5518:	f7ff bfaf 	b.w	b547a <_Z10pitidoOFF0v>

000b551c <_Z8zumbadorb>:
   }
}
void zumbador(boolean estado)
{
   if (estado)
   b551c:	b108      	cbz	r0, b5522 <_Z8zumbadorb+0x6>
   {
      pitidoON0();
   b551e:	f7ff bf99 	b.w	b5454 <_Z9pitidoON0v>
   }
   else
   {
      pitidoOFF0();
   b5522:	f7ff bfaa 	b.w	b547a <_Z10pitidoOFF0v>
	...

000b5528 <_Z15activarActuadoriib>:
   }
}

void activarActuador(int id, int opcion, boolean valor)
{
   switch (id)
   b5528:	2801      	cmp	r0, #1
{
   b552a:	b538      	push	{r3, r4, r5, lr}
   b552c:	460d      	mov	r5, r1
   b552e:	4614      	mov	r4, r2
   switch (id)
   b5530:	d027      	beq.n	b5582 <_Z15activarActuadoriib+0x5a>
   b5532:	280d      	cmp	r0, #13
   b5534:	d03b      	beq.n	b55ae <_Z15activarActuadoriib+0x86>
   b5536:	bb48      	cbnz	r0, b558c <_Z15activarActuadoriib+0x64>
   {
      pitidoOFF0();
   // Actuador led
   case 0:

      switch (opcion) {
   b5538:	2905      	cmp	r1, #5
   b553a:	d827      	bhi.n	b558c <_Z15activarActuadoriib+0x64>
   b553c:	e8df f001 	tbb	[pc, r1]
   b5540:	120d0803 	.word	0x120d0803
   b5544:	1c17      	.short	0x1c17
      
   default:
      Serial.println("Valor no valido");
      break;
   }
}
   b5546:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            ledVerdeRojo(valor);
   b554a:	4610      	mov	r0, r2
   b554c:	f7ff bfbf 	b.w	b54ce <_Z12ledVerdeRojob>
}
   b5550:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            ledMoradoAmarillo(valor);
   b5554:	4610      	mov	r0, r2
   b5556:	f7ff bfb5 	b.w	b54c4 <_Z17ledMoradoAmarillob>
}
   b555a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            ledAzulNaranja(valor);
   b555e:	4610      	mov	r0, r2
   b5560:	f7ff bfab 	b.w	b54ba <_Z14ledAzulNaranjab>
}
   b5564:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            ledBlink0(valor);
   b5568:	4610      	mov	r0, r2
   b556a:	f7ff bfb5 	b.w	b54d8 <_Z9ledBlink0b>
}
   b556e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            ledArcoiris0(valor);
   b5572:	4610      	mov	r0, r2
   b5574:	f7ff bfc8 	b.w	b5508 <_Z12ledArcoiris0b>
}
   b5578:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            ledOnOff(valor);
   b557c:	4610      	mov	r0, r2
   b557e:	f7ff bfbe 	b.w	b54fe <_Z8ledOnOffb>
      ledApagar();
   b5582:	f7ff fed1 	bl	b5328 <_Z9ledApagarv>
      switch (opcion) {
   b5586:	b145      	cbz	r5, b559a <_Z15activarActuadoriib+0x72>
   b5588:	2d01      	cmp	r5, #1
   b558a:	d00b      	beq.n	b55a4 <_Z15activarActuadoriib+0x7c>
            Serial.println("Valor no valido");
   b558c:	f005 fc2e 	bl	badec <_Z16_fetch_usbserialv>
}
   b5590:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            Serial.println("Valor no valido");
   b5594:	490f      	ldr	r1, [pc, #60]	; (b55d4 <_Z15activarActuadoriib+0xac>)
   b5596:	f005 b9da 	b.w	ba94e <_ZN5Print7printlnEPKc>
            zumbador(valor);
   b559a:	4620      	mov	r0, r4
}
   b559c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            zumbador(valor);
   b55a0:	f7ff bfbc 	b.w	b551c <_Z8zumbadorb>
            blinkAndSleep(valor);
   b55a4:	4620      	mov	r0, r4
}
   b55a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            blinkAndSleep(valor);
   b55aa:	f7ff bfb2 	b.w	b5512 <_Z13blinkAndSleepb>
      pitidoOFF0();
   b55ae:	f7ff ff64 	bl	b547a <_Z10pitidoOFF0v>
      ledApagar();
   b55b2:	f7ff feb9 	bl	b5328 <_Z9ledApagarv>
      pinMode(A2, OUTPUT);
   b55b6:	2101      	movs	r1, #1
   b55b8:	2011      	movs	r0, #17
   b55ba:	f005 fe4d 	bl	bb258 <pinMode>
      if (valor) {
   b55be:	b134      	cbz	r4, b55ce <_Z15activarActuadoriib+0xa6>
         analogWrite(A2, 50, 40);
   b55c0:	2228      	movs	r2, #40	; 0x28
   b55c2:	2132      	movs	r1, #50	; 0x32
}
   b55c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
         analogWrite(A2, 0, 0);
   b55c8:	2011      	movs	r0, #17
   b55ca:	f005 be99 	b.w	bb300 <_Z11analogWritetmm>
   b55ce:	4622      	mov	r2, r4
   b55d0:	4621      	mov	r1, r4
   b55d2:	e7f7      	b.n	b55c4 <_Z15activarActuadoriib+0x9c>
   b55d4:	000bb709 	.word	0x000bb709

000b55d8 <_Z8ledBlinkv>:
//-------------------------------------------------------------------------------
//--------------------------------- M O D O   1 ---------------------------------
//-------------------------------------------------------------------------------

void ledBlink()
{
   b55d8:	b508      	push	{r3, lr}
    ledBlanco();
   b55da:	f7ff ff07 	bl	b53ec <_Z9ledBlancov>
    delay(400);
   b55de:	f44f 70c8 	mov.w	r0, #400	; 0x190
   b55e2:	f005 fa6e 	bl	baac2 <delay>
    ledApagar();
   b55e6:	f7ff fe9f 	bl	b5328 <_Z9ledApagarv>
    delay(200);
}
   b55ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    delay(200);
   b55ee:	20c8      	movs	r0, #200	; 0xc8
   b55f0:	f005 ba67 	b.w	baac2 <delay>

000b55f4 <_Z9pitidoON1i>:

// Acciones del zumbador MODO 1
void pitidoON1(int puerto)
{
   b55f4:	b513      	push	{r0, r1, r4, lr}
    digitalWrite(puerto, 1);
   b55f6:	b284      	uxth	r4, r0
   b55f8:	4620      	mov	r0, r4
   b55fa:	2101      	movs	r1, #1
   b55fc:	f005 fe3d 	bl	bb27a <digitalWrite>
    digitalWrite(puerto, HIGH);
   b5600:	4620      	mov	r0, r4
   b5602:	2101      	movs	r1, #1
   b5604:	f005 fe39 	bl	bb27a <digitalWrite>
    digitalWrite(puerto + 1, HIGH);
   b5608:	1c60      	adds	r0, r4, #1
   b560a:	b280      	uxth	r0, r0
   b560c:	2101      	movs	r1, #1
   b560e:	9001      	str	r0, [sp, #4]
   b5610:	f005 fe33 	bl	bb27a <digitalWrite>
    digitalWrite(puerto + 1, 1);
   b5614:	9801      	ldr	r0, [sp, #4]
   b5616:	2101      	movs	r1, #1
}
   b5618:	b002      	add	sp, #8
   b561a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    digitalWrite(puerto + 1, 1);
   b561e:	f005 be2c 	b.w	bb27a <digitalWrite>

000b5622 <_Z10pitidoOFF1i>:

void pitidoOFF1(int puerto)
{
   b5622:	b513      	push	{r0, r1, r4, lr}
    digitalWrite(puerto, 0);
   b5624:	b284      	uxth	r4, r0
   b5626:	4620      	mov	r0, r4
   b5628:	2100      	movs	r1, #0
   b562a:	f005 fe26 	bl	bb27a <digitalWrite>
    digitalWrite(puerto, LOW);
   b562e:	4620      	mov	r0, r4
   b5630:	2100      	movs	r1, #0
   b5632:	f005 fe22 	bl	bb27a <digitalWrite>
    digitalWrite(puerto + 1, LOW);
   b5636:	1c60      	adds	r0, r4, #1
   b5638:	b280      	uxth	r0, r0
   b563a:	2100      	movs	r1, #0
   b563c:	9001      	str	r0, [sp, #4]
   b563e:	f005 fe1c 	bl	bb27a <digitalWrite>
    digitalWrite(puerto + 1, 0);
   b5642:	9801      	ldr	r0, [sp, #4]
   b5644:	2100      	movs	r1, #0
}
   b5646:	b002      	add	sp, #8
   b5648:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    digitalWrite(puerto + 1, 0);
   b564c:	f005 be15 	b.w	bb27a <digitalWrite>

000b5650 <_Z12pitidoBlink1i>:

void pitidoBlink1(int puerto)
{
   b5650:	b510      	push	{r4, lr}
   b5652:	4604      	mov	r4, r0
    pitidoON1(puerto);
   b5654:	f7ff ffce 	bl	b55f4 <_Z9pitidoON1i>
    delay(100);
   b5658:	2064      	movs	r0, #100	; 0x64
   b565a:	f005 fa32 	bl	baac2 <delay>
    pitidoOFF1(puerto);
   b565e:	4620      	mov	r0, r4
   b5660:	f7ff ffdf 	bl	b5622 <_Z10pitidoOFF1i>
    delay(100);
}
   b5664:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delay(100);
   b5668:	2064      	movs	r0, #100	; 0x64
   b566a:	f005 ba2a 	b.w	baac2 <delay>
	...

000b5670 <_Z10activarLEDii>:

// Recive el actuador que es, el tipo de actuador, el puerto al que esta conectado, el valor de los sensores para actuar en consecuencia y los puertos de dichos sensores.
void activarLED(int opcion, int puerto)
{
   b5670:	b508      	push	{r3, lr}
   b5672:	2807      	cmp	r0, #7
   b5674:	d825      	bhi.n	b56c2 <_Z10activarLEDii+0x52>
   b5676:	e8df f000 	tbb	[pc, r0]
   b567a:	0804      	.short	0x0804
   b567c:	1814100c 	.word	0x1814100c
   b5680:	201c      	.short	0x201c

    default:
        Serial.println("LedErrorOption");
        break;
    }
}
   b5682:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        ledVerde();
   b5686:	f7ff be6b 	b.w	b5360 <_Z8ledVerdev>
}
   b568a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        ledRojo();
   b568e:	f7ff be59 	b.w	b5344 <_Z7ledRojov>
}
   b5692:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        ledAmarillo();
   b5696:	f7ff be7f 	b.w	b5398 <_Z11ledAmarillov>
}
   b569a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        ledMorado();
   b569e:	f7ff be89 	b.w	b53b4 <_Z9ledMoradov>
}
   b56a2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        ledAzul();
   b56a6:	f7ff be69 	b.w	b537c <_Z7ledAzulv>
}
   b56aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        ledNaranja();
   b56ae:	f7ff be8f 	b.w	b53d0 <_Z10ledNaranjav>
}
   b56b2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        ledBlink();
   b56b6:	f7ff bf8f 	b.w	b55d8 <_Z8ledBlinkv>
}
   b56ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        ledArcoiris();
   b56be:	f7ff bea3 	b.w	b5408 <_Z11ledArcoirisv>
        Serial.println("LedErrorOption");
   b56c2:	f005 fb93 	bl	badec <_Z16_fetch_usbserialv>
}
   b56c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        Serial.println("LedErrorOption");
   b56ca:	4901      	ldr	r1, [pc, #4]	; (b56d0 <_Z10activarLEDii+0x60>)
   b56cc:	f005 b93f 	b.w	ba94e <_ZN5Print7printlnEPKc>
   b56d0:	000bb719 	.word	0x000bb719

000b56d4 <_Z15activarZumbadorii>:

void activarZumbador(int opcion, int puerto)
{
   b56d4:	b538      	push	{r3, r4, r5, lr}
   b56d6:	460c      	mov	r4, r1
   b56d8:	4605      	mov	r5, r0
    pinMode(puerto, OUTPUT);
   b56da:	2101      	movs	r1, #1
   b56dc:	b2a0      	uxth	r0, r4
   b56de:	f005 fdbb 	bl	bb258 <pinMode>

    switch (opcion)
   b56e2:	b145      	cbz	r5, b56f6 <_Z15activarZumbadorii+0x22>
   b56e4:	2d01      	cmp	r5, #1
   b56e6:	d00b      	beq.n	b5700 <_Z15activarZumbadorii+0x2c>
        break;
    case 1:
        pitidoBlink1(puerto);
        break;
    default:
        Serial.println("Valor no valido");
   b56e8:	f005 fb80 	bl	badec <_Z16_fetch_usbserialv>
        break;
    }
}
   b56ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        Serial.println("Valor no valido");
   b56f0:	4906      	ldr	r1, [pc, #24]	; (b570c <_Z15activarZumbadorii+0x38>)
   b56f2:	f005 b92c 	b.w	ba94e <_ZN5Print7printlnEPKc>
        pitidoON1(puerto);
   b56f6:	4620      	mov	r0, r4
}
   b56f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        pitidoON1(puerto);
   b56fc:	f7ff bf7a 	b.w	b55f4 <_Z9pitidoON1i>
        pitidoBlink1(puerto);
   b5700:	4620      	mov	r0, r4
}
   b5702:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        pitidoBlink1(puerto);
   b5706:	f7ff bfa3 	b.w	b5650 <_Z12pitidoBlink1i>
   b570a:	bf00      	nop
   b570c:	000bb709 	.word	0x000bb709

000b5710 <_Z17activarVentiladorii>:

void activarVentilador(int opcion, int puerto)
{
   b5710:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b5712:	460c      	mov	r4, r1
   b5714:	4605      	mov	r5, r0
   pitidoOFF0();
   b5716:	f7ff feb0 	bl	b547a <_Z10pitidoOFF0v>
   ledApagar();
   b571a:	f7ff fe05 	bl	b5328 <_Z9ledApagarv>

   int p;
   switch (puerto)
   b571e:	2c04      	cmp	r4, #4
   b5720:	bf9a      	itte	ls
   b5722:	4b0d      	ldrls	r3, [pc, #52]	; (b5758 <_Z17activarVentiladorii+0x48>)
   b5724:	571b      	ldrsbls	r3, [r3, r4]
   ledApagar();
   b5726:	f04f 33ff 	movhi.w	r3, #4294967295
    default:
        p = -1;
        break;
    }

   pinMode(p, OUTPUT);
   b572a:	b298      	uxth	r0, r3
   b572c:	2101      	movs	r1, #1
   b572e:	9001      	str	r0, [sp, #4]
   b5730:	f005 fd92 	bl	bb258 <pinMode>
    switch (opcion)
   b5734:	2d01      	cmp	r5, #1
   b5736:	d807      	bhi.n	b5748 <_Z17activarVentiladorii+0x38>
    {
    case 0:
      analogWrite(p, 50, 50);
      break;
    case 1:
      analogWrite(p, 50, 50);
   b5738:	2232      	movs	r2, #50	; 0x32
   b573a:	9801      	ldr	r0, [sp, #4]
   b573c:	4611      	mov	r1, r2
      Serial.println("Valor no valido");
      break;
    }


}
   b573e:	b003      	add	sp, #12
   b5740:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      analogWrite(p, 50, 50);
   b5744:	f005 bddc 	b.w	bb300 <_Z11analogWritetmm>
      Serial.println("Valor no valido");
   b5748:	f005 fb50 	bl	badec <_Z16_fetch_usbserialv>
   b574c:	4903      	ldr	r1, [pc, #12]	; (b575c <_Z17activarVentiladorii+0x4c>)
}
   b574e:	b003      	add	sp, #12
   b5750:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      Serial.println("Valor no valido");
   b5754:	f005 b8fb 	b.w	ba94e <_ZN5Print7printlnEPKc>
   b5758:	000bc1ef 	.word	0x000bc1ef
   b575c:	000bb709 	.word	0x000bb709

000b5760 <_Z10ventApagari>:

void ventApagar(int puerto)
{
      int p;
      switch (puerto)
   b5760:	2804      	cmp	r0, #4
{
   b5762:	b507      	push	{r0, r1, r2, lr}
   b5764:	bf9a      	itte	ls
   b5766:	4b08      	ldrls	r3, [pc, #32]	; (b5788 <_Z10ventApagari+0x28>)
   b5768:	5618      	ldrsbls	r0, [r3, r0]
   b576a:	f04f 30ff 	movhi.w	r0, #4294967295

      default:
         p = -1;
         break;
      }
      pinMode(p, OUTPUT);
   b576e:	b280      	uxth	r0, r0
   b5770:	2101      	movs	r1, #1
   b5772:	9001      	str	r0, [sp, #4]
   b5774:	f005 fd70 	bl	bb258 <pinMode>
      analogWrite(p, 0, 0);
   b5778:	2200      	movs	r2, #0
   b577a:	9801      	ldr	r0, [sp, #4]
   b577c:	4611      	mov	r1, r2
}
   b577e:	b003      	add	sp, #12
   b5780:	f85d eb04 	ldr.w	lr, [sp], #4
      analogWrite(p, 0, 0);
   b5784:	f005 bdbc 	b.w	bb300 <_Z11analogWritetmm>
   b5788:	000bc1ef 	.word	0x000bc1ef

000b578c <_Z14apagarActuadorii>:

void apagarActuador(int id, int puerto)
{
   b578c:	b538      	push	{r3, r4, r5, lr}
   b578e:	460c      	mov	r4, r1
    id == 0 ? ledApagar() : digitalWrite(puerto, 0);
   b5790:	4605      	mov	r5, r0
   b5792:	b918      	cbnz	r0, b579c <_Z14apagarActuadorii+0x10>
    if (id == 13){
      ventApagar(puerto);
    }

}
   b5794:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    id == 0 ? ledApagar() : digitalWrite(puerto, 0);
   b5798:	f7ff bdc6 	b.w	b5328 <_Z9ledApagarv>
   b579c:	2100      	movs	r1, #0
   b579e:	b2a0      	uxth	r0, r4
   b57a0:	f005 fd6b 	bl	bb27a <digitalWrite>
    if (id == 13){
   b57a4:	2d0d      	cmp	r5, #13
   b57a6:	d104      	bne.n	b57b2 <_Z14apagarActuadorii+0x26>
      ventApagar(puerto);
   b57a8:	4620      	mov	r0, r4
}
   b57aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ventApagar(puerto);
   b57ae:	f7ff bfd7 	b.w	b5760 <_Z10ventApagari>
}
   b57b2:	bd38      	pop	{r3, r4, r5, pc}

000b57b4 <_Z15actuadorHandleriii>:

void actuadorHandler(int id, int opcion, int puerto)
{
   b57b4:	4603      	mov	r3, r0
    if (id < 2)
   b57b6:	2b01      	cmp	r3, #1
{
   b57b8:	4608      	mov	r0, r1
   b57ba:	4611      	mov	r1, r2
    if (id < 2)
   b57bc:	dc04      	bgt.n	b57c8 <_Z15actuadorHandleriii+0x14>
        id == 0 ? activarLED(opcion, puerto) : activarZumbador(opcion, puerto);
   b57be:	b90b      	cbnz	r3, b57c4 <_Z15actuadorHandleriii+0x10>
   b57c0:	f7ff bf56 	b.w	b5670 <_Z10activarLEDii>
   b57c4:	f7ff bf86 	b.w	b56d4 <_Z15activarZumbadorii>
   if (id == 13)
   b57c8:	2b0d      	cmp	r3, #13
   b57ca:	d101      	bne.n	b57d0 <_Z15actuadorHandleriii+0x1c>
      activarVentilador(opcion, puerto);
   b57cc:	f7ff bfa0 	b.w	b5710 <_Z17activarVentiladorii>
}
   b57d0:	4770      	bx	lr
	...

000b57d4 <_Z10borradoALLi>:
   switch (modo)
   b57d4:	2801      	cmp	r0, #1
   b57d6:	d004      	beq.n	b57e2 <_Z10borradoALLi+0xe>
   b57d8:	2802      	cmp	r0, #2
   b57da:	d013      	beq.n	b5804 <_Z10borradoALLi+0x30>
   b57dc:	b988      	cbnz	r0, b5802 <_Z10borradoALLi+0x2e>
   b57de:	f7ff b949 	b.w	b4a74 <_Z10borradoALLi.part.0>
      IF_pasado = false;
   b57e2:	4a0c      	ldr	r2, [pc, #48]	; (b5814 <_Z10borradoALLi+0x40>)
   b57e4:	2300      	movs	r3, #0
   b57e6:	7013      	strb	r3, [r2, #0]
      THEN_pasado = false;
   b57e8:	4a0b      	ldr	r2, [pc, #44]	; (b5818 <_Z10borradoALLi+0x44>)
   b57ea:	7013      	strb	r3, [r2, #0]
      ELSE_pasado = false;
   b57ec:	4a0b      	ldr	r2, [pc, #44]	; (b581c <_Z10borradoALLi+0x48>)
   b57ee:	7013      	strb	r3, [r2, #0]
      numBloque = -1;
   b57f0:	4a0b      	ldr	r2, [pc, #44]	; (b5820 <_Z10borradoALLi+0x4c>)
   b57f2:	f04f 31ff 	mov.w	r1, #4294967295
   b57f6:	6011      	str	r1, [r2, #0]
      puertoDigital = 3;
   b57f8:	4a0a      	ldr	r2, [pc, #40]	; (b5824 <_Z10borradoALLi+0x50>)
   b57fa:	2103      	movs	r1, #3
   b57fc:	6011      	str	r1, [r2, #0]
      puertoAnalogico = 0;
   b57fe:	4a0a      	ldr	r2, [pc, #40]	; (b5828 <_Z10borradoALLi+0x54>)
      tam_bucle = 0;
   b5800:	6013      	str	r3, [r2, #0]
}
   b5802:	4770      	bx	lr
      posicion = 0;
   b5804:	4a09      	ldr	r2, [pc, #36]	; (b582c <_Z10borradoALLi+0x58>)
   b5806:	2300      	movs	r3, #0
   b5808:	6013      	str	r3, [r2, #0]
      bucle = false;
   b580a:	4a09      	ldr	r2, [pc, #36]	; (b5830 <_Z10borradoALLi+0x5c>)
   b580c:	7013      	strb	r3, [r2, #0]
      tam_bucle = 0;
   b580e:	4a09      	ldr	r2, [pc, #36]	; (b5834 <_Z10borradoALLi+0x60>)
   b5810:	e7f6      	b.n	b5800 <_Z10borradoALLi+0x2c>
   b5812:	bf00      	nop
   b5814:	2003c73d 	.word	0x2003c73d
   b5818:	2003c74c 	.word	0x2003c74c
   b581c:	2003c73c 	.word	0x2003c73c
   b5820:	2003c69c 	.word	0x2003c69c
   b5824:	2003c6a0 	.word	0x2003c6a0
   b5828:	2003da3c 	.word	0x2003da3c
   b582c:	2003da34 	.word	0x2003da34
   b5830:	2003d300 	.word	0x2003d300
   b5834:	2003dc38 	.word	0x2003dc38

000b5838 <_Z10borradoPOPv>:
      break;
   }
}

void borradoPOP(){
   posicion--;
   b5838:	4a0e      	ldr	r2, [pc, #56]	; (b5874 <_Z10borradoPOPv+0x3c>)
   b583a:	6813      	ldr	r3, [r2, #0]
   b583c:	3b01      	subs	r3, #1
   b583e:	6013      	str	r3, [r2, #0]

   if (notas[posicion] == -2) { // Ultima es N iter
   b5840:	4a0d      	ldr	r2, [pc, #52]	; (b5878 <_Z10borradoPOPv+0x40>)
   b5842:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
   b5846:	1c8a      	adds	r2, r1, #2
   b5848:	4a0c      	ldr	r2, [pc, #48]	; (b587c <_Z10borradoPOPv+0x44>)
   b584a:	d107      	bne.n	b585c <_Z10borradoPOPv+0x24>
      bucle = true;
   b584c:	2101      	movs	r1, #1
   b584e:	7011      	strb	r1, [r2, #0]
      tam_bucle = duraciones[posicion];
   b5850:	4a0b      	ldr	r2, [pc, #44]	; (b5880 <_Z10borradoPOPv+0x48>)
   b5852:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   b5856:	4b0b      	ldr	r3, [pc, #44]	; (b5884 <_Z10borradoPOPv+0x4c>)
   b5858:	601a      	str	r2, [r3, #0]
   b585a:	4770      	bx	lr

   } else if (notas[posicion] == -1) { // Ultima es LOOP
   b585c:	3101      	adds	r1, #1
   b585e:	d102      	bne.n	b5866 <_Z10borradoPOPv+0x2e>
      bucle = false;
   b5860:	2300      	movs	r3, #0
   b5862:	7013      	strb	r3, [r2, #0]
   b5864:	4770      	bx	lr

   } else {
      if (bucle) {
   b5866:	7813      	ldrb	r3, [r2, #0]
   b5868:	b11b      	cbz	r3, b5872 <_Z10borradoPOPv+0x3a>
         tam_bucle--;
   b586a:	4a06      	ldr	r2, [pc, #24]	; (b5884 <_Z10borradoPOPv+0x4c>)
   b586c:	6813      	ldr	r3, [r2, #0]
   b586e:	3b01      	subs	r3, #1
   b5870:	6013      	str	r3, [r2, #0]
      }
   }
}
   b5872:	4770      	bx	lr
   b5874:	2003da34 	.word	0x2003da34
   b5878:	2003d704 	.word	0x2003d704
   b587c:	2003d300 	.word	0x2003d300
   b5880:	2003d3bc 	.word	0x2003d3bc
   b5884:	2003dc38 	.word	0x2003dc38

000b5888 <_Z15decodificarNOTAi>:

//--------------------------------  REPRODUCCION  -------------------------------------

int decodificarNOTA(int nota) {
   b5888:	b508      	push	{r3, lr}
   b588a:	2807      	cmp	r0, #7
   b588c:	d816      	bhi.n	b58bc <_Z15decodificarNOTAi+0x34>
   b588e:	e8df f000 	tbb	[pc, r0]
   b5892:	0704      	.short	0x0704
   b5894:	0f0d0b09 	.word	0x0f0d0b09
   b5898:	1311      	.short	0x1311
   switch (nota)
   {
   case 0:
      return DO;
   b589a:	4b0c      	ldr	r3, [pc, #48]	; (b58cc <_Z15decodificarNOTAi+0x44>)

   case 6:
      return SI;

   case 7:
      return DO_;
   b589c:	6818      	ldr	r0, [r3, #0]

   default:
      Serial.println("Nota inválida");
      return -1;
   }
}
   b589e:	bd08      	pop	{r3, pc}
      return RE;
   b58a0:	4b0b      	ldr	r3, [pc, #44]	; (b58d0 <_Z15decodificarNOTAi+0x48>)
   b58a2:	e7fb      	b.n	b589c <_Z15decodificarNOTAi+0x14>
      return MI;
   b58a4:	4b0b      	ldr	r3, [pc, #44]	; (b58d4 <_Z15decodificarNOTAi+0x4c>)
   b58a6:	e7f9      	b.n	b589c <_Z15decodificarNOTAi+0x14>
      return FA;
   b58a8:	4b0b      	ldr	r3, [pc, #44]	; (b58d8 <_Z15decodificarNOTAi+0x50>)
   b58aa:	e7f7      	b.n	b589c <_Z15decodificarNOTAi+0x14>
      return SOL;
   b58ac:	4b0b      	ldr	r3, [pc, #44]	; (b58dc <_Z15decodificarNOTAi+0x54>)
   b58ae:	e7f5      	b.n	b589c <_Z15decodificarNOTAi+0x14>
      return LA;
   b58b0:	4b0b      	ldr	r3, [pc, #44]	; (b58e0 <_Z15decodificarNOTAi+0x58>)
   b58b2:	e7f3      	b.n	b589c <_Z15decodificarNOTAi+0x14>
      return SI;
   b58b4:	4b0b      	ldr	r3, [pc, #44]	; (b58e4 <_Z15decodificarNOTAi+0x5c>)
   b58b6:	e7f1      	b.n	b589c <_Z15decodificarNOTAi+0x14>
      return DO_;
   b58b8:	4b0b      	ldr	r3, [pc, #44]	; (b58e8 <_Z15decodificarNOTAi+0x60>)
   b58ba:	e7ef      	b.n	b589c <_Z15decodificarNOTAi+0x14>
      Serial.println("Nota inválida");
   b58bc:	f005 fa96 	bl	badec <_Z16_fetch_usbserialv>
   b58c0:	490a      	ldr	r1, [pc, #40]	; (b58ec <_Z15decodificarNOTAi+0x64>)
   b58c2:	f005 f844 	bl	ba94e <_ZN5Print7printlnEPKc>
      return -1;
   b58c6:	f04f 30ff 	mov.w	r0, #4294967295
   b58ca:	e7e8      	b.n	b589e <_Z15decodificarNOTAi+0x16>
   b58cc:	2003c674 	.word	0x2003c674
   b58d0:	2003c688 	.word	0x2003c688
   b58d4:	2003c684 	.word	0x2003c684
   b58d8:	2003c67c 	.word	0x2003c67c
   b58dc:	2003c690 	.word	0x2003c690
   b58e0:	2003c680 	.word	0x2003c680
   b58e4:	2003c68c 	.word	0x2003c68c
   b58e8:	2003c678 	.word	0x2003c678
   b58ec:	000bb728 	.word	0x000bb728

000b58f0 <_Z15decodificarTIPOi>:

int decodificarTIPO(int tipo) {
   switch (tipo)
   b58f0:	2802      	cmp	r0, #2
int decodificarTIPO(int tipo) {
   b58f2:	b508      	push	{r3, lr}
   b58f4:	d803      	bhi.n	b58fe <_Z15decodificarTIPOi+0xe>
   b58f6:	4b06      	ldr	r3, [pc, #24]	; (b5910 <_Z15decodificarTIPOi+0x20>)
   b58f8:	f933 0010 	ldrsh.w	r0, [r3, r0, lsl #1]

   default:
      Serial.println("Tipo inválido");
      return -1;
   }
}
   b58fc:	bd08      	pop	{r3, pc}
      Serial.println("Tipo inválido");
   b58fe:	f005 fa75 	bl	badec <_Z16_fetch_usbserialv>
   b5902:	4904      	ldr	r1, [pc, #16]	; (b5914 <_Z15decodificarTIPOi+0x24>)
   b5904:	f005 f823 	bl	ba94e <_ZN5Print7printlnEPKc>
   b5908:	f04f 30ff 	mov.w	r0, #4294967295
   b590c:	e7f6      	b.n	b58fc <_Z15decodificarTIPOi+0xc>
   b590e:	bf00      	nop
   b5910:	000bc1f4 	.word	0x000bc1f4
   b5914:	000bb737 	.word	0x000bb737

000b5918 <_Z19decodificarNOTA_msgi>:

String decodificarNOTA_msg(int nota) {
   b5918:	b510      	push	{r4, lr}
   b591a:	4604      	mov	r4, r0
   b591c:	2907      	cmp	r1, #7
   b591e:	d819      	bhi.n	b5954 <_Z19decodificarNOTA_msgi+0x3c>
   b5920:	e8df f001 	tbb	[pc, r1]
   b5924:	0e0c0a04 	.word	0x0e0c0a04
   b5928:	16141210 	.word	0x16141210
   switch (nota)
   {
   case 0:
      return "DO";
   b592c:	490a      	ldr	r1, [pc, #40]	; (b5958 <_Z19decodificarNOTA_msgi+0x40>)

   case 7:
      return "do";

   default:
      return "Nota inválida";
   b592e:	4620      	mov	r0, r4
   b5930:	f004 ff3f 	bl	ba7b2 <_ZN6StringC1EPK19__FlashStringHelper>
   }
}
   b5934:	4620      	mov	r0, r4
   b5936:	bd10      	pop	{r4, pc}
      return "RE";
   b5938:	4908      	ldr	r1, [pc, #32]	; (b595c <_Z19decodificarNOTA_msgi+0x44>)
   b593a:	e7f8      	b.n	b592e <_Z19decodificarNOTA_msgi+0x16>
      return "MI";
   b593c:	4908      	ldr	r1, [pc, #32]	; (b5960 <_Z19decodificarNOTA_msgi+0x48>)
   b593e:	e7f6      	b.n	b592e <_Z19decodificarNOTA_msgi+0x16>
      return "FA";
   b5940:	4908      	ldr	r1, [pc, #32]	; (b5964 <_Z19decodificarNOTA_msgi+0x4c>)
   b5942:	e7f4      	b.n	b592e <_Z19decodificarNOTA_msgi+0x16>
      return "SOL";
   b5944:	4908      	ldr	r1, [pc, #32]	; (b5968 <_Z19decodificarNOTA_msgi+0x50>)
   b5946:	e7f2      	b.n	b592e <_Z19decodificarNOTA_msgi+0x16>
      return "LA";
   b5948:	4908      	ldr	r1, [pc, #32]	; (b596c <_Z19decodificarNOTA_msgi+0x54>)
   b594a:	e7f0      	b.n	b592e <_Z19decodificarNOTA_msgi+0x16>
      return "SI";
   b594c:	4908      	ldr	r1, [pc, #32]	; (b5970 <_Z19decodificarNOTA_msgi+0x58>)
   b594e:	e7ee      	b.n	b592e <_Z19decodificarNOTA_msgi+0x16>
      return "do";
   b5950:	4908      	ldr	r1, [pc, #32]	; (b5974 <_Z19decodificarNOTA_msgi+0x5c>)
   b5952:	e7ec      	b.n	b592e <_Z19decodificarNOTA_msgi+0x16>
      return "Nota inválida";
   b5954:	4908      	ldr	r1, [pc, #32]	; (b5978 <_Z19decodificarNOTA_msgi+0x60>)
   b5956:	e7ea      	b.n	b592e <_Z19decodificarNOTA_msgi+0x16>
   b5958:	000bbb9b 	.word	0x000bbb9b
   b595c:	000bb746 	.word	0x000bb746
   b5960:	000bb749 	.word	0x000bb749
   b5964:	000bb74c 	.word	0x000bb74c
   b5968:	000bb74f 	.word	0x000bb74f
   b596c:	000bb753 	.word	0x000bb753
   b5970:	000bb756 	.word	0x000bb756
   b5974:	000bbd59 	.word	0x000bbd59
   b5978:	000bb728 	.word	0x000bb728

000b597c <_Z19decodificarTIPO_msgi>:

String decodificarTIPO_msg(int tipo) {
   switch (tipo)
   b597c:	2901      	cmp	r1, #1
String decodificarTIPO_msg(int tipo) {
   b597e:	b510      	push	{r4, lr}
   b5980:	4604      	mov	r4, r0
   switch (tipo)
   b5982:	d007      	beq.n	b5994 <_Z19decodificarTIPO_msgi+0x18>
   b5984:	2902      	cmp	r1, #2
   b5986:	d007      	beq.n	b5998 <_Z19decodificarTIPO_msgi+0x1c>
   b5988:	b941      	cbnz	r1, b599c <_Z19decodificarTIPO_msgi+0x20>
   {
   case 0:
      return "_C";
   b598a:	4905      	ldr	r1, [pc, #20]	; (b59a0 <_Z19decodificarTIPO_msgi+0x24>)

   case 2:
      return "_B";

   default:
      return "Tipo inválido";
   b598c:	f004 ff11 	bl	ba7b2 <_ZN6StringC1EPK19__FlashStringHelper>
   }
}
   b5990:	4620      	mov	r0, r4
   b5992:	bd10      	pop	{r4, pc}
      return "_N";
   b5994:	4903      	ldr	r1, [pc, #12]	; (b59a4 <_Z19decodificarTIPO_msgi+0x28>)
   b5996:	e7f9      	b.n	b598c <_Z19decodificarTIPO_msgi+0x10>
      return "_B";
   b5998:	4903      	ldr	r1, [pc, #12]	; (b59a8 <_Z19decodificarTIPO_msgi+0x2c>)
   b599a:	e7f7      	b.n	b598c <_Z19decodificarTIPO_msgi+0x10>
      return "Tipo inválido";
   b599c:	4903      	ldr	r1, [pc, #12]	; (b59ac <_Z19decodificarTIPO_msgi+0x30>)
   b599e:	e7f5      	b.n	b598c <_Z19decodificarTIPO_msgi+0x10>
   b59a0:	000bb759 	.word	0x000bb759
   b59a4:	000bb75c 	.word	0x000bb75c
   b59a8:	000bb75f 	.word	0x000bb75f
   b59ac:	000bb737 	.word	0x000bb737

000b59b0 <_Z14reproducirNOTAii>:

void reproducirNOTA(int nota, int tipo) {
   b59b0:	b513      	push	{r0, r1, r4, lr}
   b59b2:	460c      	mov	r4, r1
   int frecuencia = decodificarNOTA(nota);
   b59b4:	f7ff ff68 	bl	b5888 <_Z15decodificarNOTAi>
   b59b8:	9001      	str	r0, [sp, #4]
   int duracion = decodificarTIPO(tipo);
   b59ba:	4620      	mov	r0, r4
   b59bc:	f7ff ff98 	bl	b58f0 <_Z15decodificarTIPOi>

   tone(Zumbador_PIN, frecuencia);
   b59c0:	9901      	ldr	r1, [sp, #4]
   b59c2:	2200      	movs	r2, #0
   int duracion = decodificarTIPO(tipo);
   b59c4:	4604      	mov	r4, r0
   tone(Zumbador_PIN, frecuencia);
   b59c6:	2006      	movs	r0, #6
   b59c8:	f005 fa3a 	bl	bae40 <tone>
   delay(duracion);
   b59cc:	4620      	mov	r0, r4
   b59ce:	f005 f878 	bl	baac2 <delay>
   noTone(Zumbador_PIN);
   b59d2:	2006      	movs	r0, #6
   b59d4:	f005 fa4b 	bl	bae6e <noTone>
   delay(30);
   b59d8:	201e      	movs	r0, #30
}
   b59da:	b002      	add	sp, #8
   b59dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   delay(30);
   b59e0:	f005 b86f 	b.w	baac2 <delay>

000b59e4 <_Z13isValidSensori>:
   return type == 0;
}

// TRUE Si el disposivo no ha sido utilizado en el bloque ACTUAL.
bool isValidSensor(int deviceID)
{
   b59e4:	b510      	push	{r4, lr}
  for (int i = 0; i < bloques[numBloque].numSensores; i++)
   b59e6:	4b0d      	ldr	r3, [pc, #52]	; (b5a1c <_Z13isValidSensori+0x38>)
   b59e8:	681a      	ldr	r2, [r3, #0]
   b59ea:	4b0d      	ldr	r3, [pc, #52]	; (b5a20 <_Z13isValidSensori+0x3c>)
   b59ec:	f44f 713b 	mov.w	r1, #748	; 0x2ec
   b59f0:	434a      	muls	r2, r1
   b59f2:	5899      	ldr	r1, [r3, r2]
   b59f4:	4413      	add	r3, r2
   b59f6:	2200      	movs	r2, #0
   b59f8:	4291      	cmp	r1, r2
   b59fa:	dd0d      	ble.n	b5a18 <_Z13isValidSensori+0x34>
  {
    if (bloques[numBloque].sensores[i].id == deviceID)
   b59fc:	685c      	ldr	r4, [r3, #4]
   b59fe:	4284      	cmp	r4, r0
   b5a00:	f103 0310 	add.w	r3, r3, #16
   b5a04:	d106      	bne.n	b5a14 <_Z13isValidSensori+0x30>
    {
      Serial.println("Invalid sensor! -> Sensor repetido en el bloque");
   b5a06:	f005 f9f1 	bl	badec <_Z16_fetch_usbserialv>
   b5a0a:	4906      	ldr	r1, [pc, #24]	; (b5a24 <_Z13isValidSensori+0x40>)
   b5a0c:	f004 ff9f 	bl	ba94e <_ZN5Print7printlnEPKc>
   b5a10:	2000      	movs	r0, #0
      return false;
    }
  };

  return true;
}
   b5a12:	bd10      	pop	{r4, pc}
  for (int i = 0; i < bloques[numBloque].numSensores; i++)
   b5a14:	3201      	adds	r2, #1
   b5a16:	e7ef      	b.n	b59f8 <_Z13isValidSensori+0x14>
  return true;
   b5a18:	2001      	movs	r0, #1
   b5a1a:	e7fa      	b.n	b5a12 <_Z13isValidSensori+0x2e>
   b5a1c:	2003c69c 	.word	0x2003c69c
   b5a20:	2003cd28 	.word	0x2003cd28
   b5a24:	000bb762 	.word	0x000bb762

000b5a28 <_Z11isNewSensori>:

// -1 si el sensor es nuevo, o el puerto donde esta siendo usado.
int isNewSensor(int deviceID)
{
   b5a28:	b5f0      	push	{r4, r5, r6, r7, lr}
  for (int i = 0; i <= numBloque; i++)
   b5a2a:	4b11      	ldr	r3, [pc, #68]	; (b5a70 <_Z11isNewSensori+0x48>)
   b5a2c:	4a11      	ldr	r2, [pc, #68]	; (b5a74 <_Z11isNewSensori+0x4c>)
   b5a2e:	681e      	ldr	r6, [r3, #0]
   b5a30:	4694      	mov	ip, r2
   b5a32:	2300      	movs	r3, #0
   b5a34:	429e      	cmp	r6, r3
   b5a36:	db17      	blt.n	b5a68 <_Z11isNewSensori+0x40>
  {
    for (int j = 0; j < bloques[i].numSensores; j++)
   b5a38:	6817      	ldr	r7, [r2, #0]
   b5a3a:	4615      	mov	r5, r2
   b5a3c:	2100      	movs	r1, #0
   b5a3e:	428f      	cmp	r7, r1
   b5a40:	dd0e      	ble.n	b5a60 <_Z11isNewSensori+0x38>
    {
      if (bloques[i].sensores[j].id == deviceID)
   b5a42:	686c      	ldr	r4, [r5, #4]
   b5a44:	4284      	cmp	r4, r0
   b5a46:	f105 0510 	add.w	r5, r5, #16
   b5a4a:	d107      	bne.n	b5a5c <_Z11isNewSensori+0x34>
        return bloques[i].sensores[j].puerto;
   b5a4c:	f44f 723b 	mov.w	r2, #748	; 0x2ec
   b5a50:	4353      	muls	r3, r2
   b5a52:	eb03 1301 	add.w	r3, r3, r1, lsl #4
   b5a56:	4463      	add	r3, ip
   b5a58:	6918      	ldr	r0, [r3, #16]
    }
  }
  return -1;
}
   b5a5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    for (int j = 0; j < bloques[i].numSensores; j++)
   b5a5c:	3101      	adds	r1, #1
   b5a5e:	e7ee      	b.n	b5a3e <_Z11isNewSensori+0x16>
  for (int i = 0; i <= numBloque; i++)
   b5a60:	3301      	adds	r3, #1
   b5a62:	f502 723b 	add.w	r2, r2, #748	; 0x2ec
   b5a66:	e7e5      	b.n	b5a34 <_Z11isNewSensori+0xc>
  return -1;
   b5a68:	f04f 30ff 	mov.w	r0, #4294967295
   b5a6c:	e7f5      	b.n	b5a5a <_Z11isNewSensori+0x32>
   b5a6e:	bf00      	nop
   b5a70:	2003c69c 	.word	0x2003c69c
   b5a74:	2003cd28 	.word	0x2003cd28

000b5a78 <_Z13isNewActuadori>:
}


// -1 si no ha sido usado en ningun bloque, o el puerto donde se encuantra conectado.
int isNewActuador(int deviceID)
{
   b5a78:	b5f0      	push	{r4, r5, r6, r7, lr}

  for (int j = 0; j <= numBloque; j++)
   b5a7a:	4b1d      	ldr	r3, [pc, #116]	; (b5af0 <_Z13isNewActuadori+0x78>)
   b5a7c:	4a1d      	ldr	r2, [pc, #116]	; (b5af4 <_Z13isNewActuadori+0x7c>)
   b5a7e:	681e      	ldr	r6, [r3, #0]
   b5a80:	4694      	mov	ip, r2
   b5a82:	2300      	movs	r3, #0
   b5a84:	429e      	cmp	r6, r3
   b5a86:	db15      	blt.n	b5ab4 <_Z13isNewActuadori+0x3c>
  {
    for (int i = 0; i < bloques[j].numActuadores; i++)
   b5a88:	f8d2 7144 	ldr.w	r7, [r2, #324]	; 0x144
   b5a8c:	4615      	mov	r5, r2
   b5a8e:	2100      	movs	r1, #0
   b5a90:	428f      	cmp	r7, r1
   b5a92:	dd24      	ble.n	b5ade <_Z13isNewActuadori+0x66>
    {
      if (bloques[j].actuadores[i].id == deviceID)
   b5a94:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
   b5a98:	4284      	cmp	r4, r0
   b5a9a:	f105 0514 	add.w	r5, r5, #20
   b5a9e:	d11c      	bne.n	b5ada <_Z13isNewActuadori+0x62>
      {
        return bloques[j].actuadores[i].puerto;
   b5aa0:	f44f 723b 	mov.w	r2, #748	; 0x2ec
   b5aa4:	4353      	muls	r3, r2
   b5aa6:	2214      	movs	r2, #20
   b5aa8:	fb02 3301 	mla	r3, r2, r1, r3
   b5aac:	4463      	add	r3, ip
   b5aae:	f8d3 0154 	ldr.w	r0, [r3, #340]	; 0x154
        return bloque2[0].actuadores[i].puerto;
      }
    }
  
  return -1;
}
   b5ab2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   for (int i = 0; i < bloque2[0].numActuadores; i++)
   b5ab4:	4b10      	ldr	r3, [pc, #64]	; (b5af8 <_Z13isNewActuadori+0x80>)
   b5ab6:	f8d3 4144 	ldr.w	r4, [r3, #324]	; 0x144
   b5aba:	2200      	movs	r2, #0
   b5abc:	4619      	mov	r1, r3
   b5abe:	4294      	cmp	r4, r2
   b5ac0:	dd13      	ble.n	b5aea <_Z13isNewActuadori+0x72>
      if (bloque2[0].actuadores[i].id == deviceID)
   b5ac2:	f8d3 5148 	ldr.w	r5, [r3, #328]	; 0x148
   b5ac6:	42a8      	cmp	r0, r5
   b5ac8:	f103 0314 	add.w	r3, r3, #20
   b5acc:	d10b      	bne.n	b5ae6 <_Z13isNewActuadori+0x6e>
        return bloque2[0].actuadores[i].puerto;
   b5ace:	2314      	movs	r3, #20
   b5ad0:	fb03 1202 	mla	r2, r3, r2, r1
   b5ad4:	f8d2 0154 	ldr.w	r0, [r2, #340]	; 0x154
   b5ad8:	e7eb      	b.n	b5ab2 <_Z13isNewActuadori+0x3a>
    for (int i = 0; i < bloques[j].numActuadores; i++)
   b5ada:	3101      	adds	r1, #1
   b5adc:	e7d8      	b.n	b5a90 <_Z13isNewActuadori+0x18>
  for (int j = 0; j <= numBloque; j++)
   b5ade:	3301      	adds	r3, #1
   b5ae0:	f502 723b 	add.w	r2, r2, #748	; 0x2ec
   b5ae4:	e7ce      	b.n	b5a84 <_Z13isNewActuadori+0xc>
   for (int i = 0; i < bloque2[0].numActuadores; i++)
   b5ae6:	3201      	adds	r2, #1
   b5ae8:	e7e9      	b.n	b5abe <_Z13isNewActuadori+0x46>
  return -1;
   b5aea:	f04f 30ff 	mov.w	r0, #4294967295
   b5aee:	e7e0      	b.n	b5ab2 <_Z13isNewActuadori+0x3a>
   b5af0:	2003c69c 	.word	0x2003c69c
   b5af4:	2003cd28 	.word	0x2003cd28
   b5af8:	2003c750 	.word	0x2003c750

000b5afc <_Z14isActuadorDualii>:

// True si el actuador es usado tanto para THEN como ELSE; Necesario para no apagarlo y encenderlo constantemente.
bool isActuadorDual(int deviceID, int bloque)
{
   b5afc:	b530      	push	{r4, r5, lr}
  int contador = 0;
  for (int i = 0; i < bloques[bloque].numActuadores; i++)
   b5afe:	4b0c      	ldr	r3, [pc, #48]	; (b5b30 <_Z14isActuadorDualii+0x34>)
   b5b00:	f44f 723b 	mov.w	r2, #748	; 0x2ec
   b5b04:	fb02 3101 	mla	r1, r2, r1, r3
   b5b08:	2200      	movs	r2, #0
   b5b0a:	f8d1 4144 	ldr.w	r4, [r1, #324]	; 0x144
  int contador = 0;
   b5b0e:	4613      	mov	r3, r2
  for (int i = 0; i < bloques[bloque].numActuadores; i++)
   b5b10:	4294      	cmp	r4, r2
   b5b12:	dd08      	ble.n	b5b26 <_Z14isActuadorDualii+0x2a>
  {
    if (bloques[bloque].actuadores[i].id == deviceID)
   b5b14:	f8d1 5148 	ldr.w	r5, [r1, #328]	; 0x148
   b5b18:	4285      	cmp	r5, r0
   b5b1a:	d101      	bne.n	b5b20 <_Z14isActuadorDualii+0x24>
      contador++;

    if (contador > 1)
   b5b1c:	b92b      	cbnz	r3, b5b2a <_Z14isActuadorDualii+0x2e>
   b5b1e:	2301      	movs	r3, #1
  for (int i = 0; i < bloques[bloque].numActuadores; i++)
   b5b20:	3201      	adds	r2, #1
   b5b22:	3114      	adds	r1, #20
   b5b24:	e7f4      	b.n	b5b10 <_Z14isActuadorDualii+0x14>
      return true;
  }

  return false;
   b5b26:	2000      	movs	r0, #0
}
   b5b28:	bd30      	pop	{r4, r5, pc}
      return true;
   b5b2a:	4618      	mov	r0, r3
   b5b2c:	e7fc      	b.n	b5b28 <_Z14isActuadorDualii+0x2c>
   b5b2e:	bf00      	nop
   b5b30:	2003cd28 	.word	0x2003cd28

000b5b34 <_Z12makeEvaluate6BLOQUE>:

// Evaluate recorre el vector de sensores, leyendo su valor y concatenandolo con el valor del siguiente
// en funcion de la condición que los une (AND u OR). Comenienzando por el primer sensor.
bool makeEvaluate(Bloque bloque)
{
   b5b34:	b084      	sub	sp, #16
   b5b36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5b38:	ac06      	add	r4, sp, #24
   b5b3a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   bool valorEvaluado = leerSensor(bloque.sensores[0].id, bloque.sensores[0].condicion, bloque.sensores[0].puerto);
   b5b3e:	e9dd 0107 	ldrd	r0, r1, [sp, #28]
   b5b42:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   b5b44:	f7ff fb48 	bl	b51d8 <_Z10leerSensoriii>
   b5b48:	ad06      	add	r5, sp, #24
   b5b4a:	4604      	mov	r4, r0

   for (int i = 1; i < bloque.numSensores; i++)
   b5b4c:	afbc      	add	r7, sp, #752	; 0x2f0
   b5b4e:	2601      	movs	r6, #1
   b5b50:	9b06      	ldr	r3, [sp, #24]
   b5b52:	42b3      	cmp	r3, r6
   b5b54:	dd12      	ble.n	b5b7c <_Z12makeEvaluate6BLOQUE+0x48>
   {
      Sensor sigSensor = bloque.sensores[i];
      bool nextValor = leerSensor(sigSensor.id, sigSensor.condicion, sigSensor.puerto);
   b5b56:	e9d5 0105 	ldrd	r0, r1, [r5, #20]
   b5b5a:	6a2a      	ldr	r2, [r5, #32]
   b5b5c:	f7ff fb3c 	bl	b51d8 <_Z10leerSensoriii>

      if (bloque.condiciones.condicionesBloque[i - 1])
   b5b60:	f817 3b01 	ldrb.w	r3, [r7], #1
   b5b64:	b133      	cbz	r3, b5b74 <_Z12makeEvaluate6BLOQUE+0x40>
         valorEvaluado = (valorEvaluado && nextValor);
   b5b66:	2c00      	cmp	r4, #0
   b5b68:	bf08      	it	eq
   b5b6a:	2000      	moveq	r0, #0
   for (int i = 1; i < bloque.numSensores; i++)
   b5b6c:	3601      	adds	r6, #1
   b5b6e:	3510      	adds	r5, #16
   b5b70:	4604      	mov	r4, r0
   b5b72:	e7ed      	b.n	b5b50 <_Z12makeEvaluate6BLOQUE+0x1c>
         valorEvaluado = (valorEvaluado && nextValor);
   b5b74:	2c00      	cmp	r4, #0
   b5b76:	bf18      	it	ne
   b5b78:	4620      	movne	r0, r4
   b5b7a:	e7f7      	b.n	b5b6c <_Z12makeEvaluate6BLOQUE+0x38>
      else
         valorEvaluado = (valorEvaluado || nextValor);
   }

   return valorEvaluado;
}
   b5b7c:	4620      	mov	r0, r4
   b5b7e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   b5b82:	b004      	add	sp, #16
   b5b84:	4770      	bx	lr

000b5b86 <_Z4atoiPc>:
      Serial.print(buffer[i], HEX);
   }
}

int atoi(char *str)
{
   b5b86:	b530      	push	{r4, r5, lr}
   int num = 0;
   int i = 0;
   bool isNegetive = false;
   if (str[i] == '-')
   b5b88:	7803      	ldrb	r3, [r0, #0]
   b5b8a:	2b2d      	cmp	r3, #45	; 0x2d
   {
      isNegetive = true;
   b5b8c:	bf0c      	ite	eq
   b5b8e:	2201      	moveq	r2, #1
   bool isNegetive = false;
   b5b90:	2200      	movne	r2, #0
   int i = 0;
   b5b92:	4613      	mov	r3, r2
   b5b94:	4403      	add	r3, r0
      i++;
   }

   while (str[i] && (str[i] >= '0' && str[i] <= '9'))
   {
      num = num * 10 + (str[i] - '0');
   b5b96:	240a      	movs	r4, #10
      i++;
   b5b98:	2000      	movs	r0, #0
   while (str[i] && (str[i] >= '0' && str[i] <= '9'))
   b5b9a:	f813 1b01 	ldrb.w	r1, [r3], #1
   b5b9e:	3930      	subs	r1, #48	; 0x30
   b5ba0:	b2cd      	uxtb	r5, r1
   b5ba2:	2d09      	cmp	r5, #9
   b5ba4:	d802      	bhi.n	b5bac <_Z4atoiPc+0x26>
      num = num * 10 + (str[i] - '0');
   b5ba6:	fb04 1000 	mla	r0, r4, r0, r1
   while (str[i] && (str[i] >= '0' && str[i] <= '9'))
   b5baa:	e7f6      	b.n	b5b9a <_Z4atoiPc+0x14>
      i++;
   }

   if (isNegetive)
   b5bac:	b102      	cbz	r2, b5bb0 <_Z4atoiPc+0x2a>
      num = -1 * num;
   b5bae:	4240      	negs	r0, r0
   return num;
}
   b5bb0:	bd30      	pop	{r4, r5, pc}

000b5bb2 <_Z5splitPcS_Pi>:

void split(char cadena[], char delim[], int solution[])
{
   b5bb2:	b538      	push	{r3, r4, r5, lr}
   b5bb4:	4614      	mov	r4, r2
   b5bb6:	460d      	mov	r5, r1
   char *ptr = strtok(cadena, delim);
   b5bb8:	f005 fcc2 	bl	bb540 <strtok>
   int j = 0;
   b5bbc:	3c04      	subs	r4, #4
   while (ptr != NULL)
   b5bbe:	b140      	cbz	r0, b5bd2 <_Z5splitPcS_Pi+0x20>
   {
      solution[j] = atoi(ptr);
   b5bc0:	f7ff ffe1 	bl	b5b86 <_Z4atoiPc>
      j++;
      ptr = strtok(NULL, delim);
   b5bc4:	4629      	mov	r1, r5
      solution[j] = atoi(ptr);
   b5bc6:	f844 0f04 	str.w	r0, [r4, #4]!
      ptr = strtok(NULL, delim);
   b5bca:	2000      	movs	r0, #0
   b5bcc:	f005 fcb8 	bl	bb540 <strtok>
   while (ptr != NULL)
   b5bd0:	e7f5      	b.n	b5bbe <_Z5splitPcS_Pi+0xc>
   }
}
   b5bd2:	bd38      	pop	{r3, r4, r5, pc}

000b5bd4 <_Z17readDataFromBlockhPhh>:
      tarjeta++;
   }
}

bool readDataFromBlock(byte blockAddr, byte buffer[], byte size)
{
   b5bd4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b5bd6:	f88d 2007 	strb.w	r2, [sp, #7]
   // Serial.print(F("Leer datos del sector ")); Serial.print(blockAddr);
   status = (MFRC522::StatusCode)mfrc522.MIFARE_Read(blockAddr, buffer, &size);
   b5bda:	f10d 0307 	add.w	r3, sp, #7
   b5bde:	460a      	mov	r2, r1
   b5be0:	4601      	mov	r1, r0
   b5be2:	480d      	ldr	r0, [pc, #52]	; (b5c18 <_Z17readDataFromBlockhPhh+0x44>)
   b5be4:	4d0d      	ldr	r5, [pc, #52]	; (b5c1c <_Z17readDataFromBlockhPhh+0x48>)
   b5be6:	f003 f9e5 	bl	b8fb4 <_ZN7MFRC52211MIFARE_ReadEhPhS0_>
   if (status != MFRC522::STATUS_OK)
   b5bea:	2801      	cmp	r0, #1
   status = (MFRC522::StatusCode)mfrc522.MIFARE_Read(blockAddr, buffer, &size);
   b5bec:	7028      	strb	r0, [r5, #0]
   if (status != MFRC522::STATUS_OK)
   b5bee:	d010      	beq.n	b5c12 <_Z17readDataFromBlockhPhh+0x3e>
   {
      Serial.print(F("MIFARE_Read() failed: "));
   b5bf0:	f005 f8fc 	bl	badec <_Z16_fetch_usbserialv>
   b5bf4:	490a      	ldr	r1, [pc, #40]	; (b5c20 <_Z17readDataFromBlockhPhh+0x4c>)
   b5bf6:	f004 fe97 	bl	ba928 <_ZN5Print5printEPKc>
      Serial.println(mfrc522.GetStatusCodeName(status));
   b5bfa:	f005 f8f7 	bl	badec <_Z16_fetch_usbserialv>
   b5bfe:	7829      	ldrb	r1, [r5, #0]
   b5c00:	4604      	mov	r4, r0
   b5c02:	4805      	ldr	r0, [pc, #20]	; (b5c18 <_Z17readDataFromBlockhPhh+0x44>)
   b5c04:	f002 ff2a 	bl	b8a5c <_ZN7MFRC52217GetStatusCodeNameEh>
   b5c08:	4601      	mov	r1, r0
   b5c0a:	4620      	mov	r0, r4
   b5c0c:	f004 fe9f 	bl	ba94e <_ZN5Print7printlnEPKc>
   b5c10:	2000      	movs	r0, #0
      return false;
   }
   return true;
}
   b5c12:	b003      	add	sp, #12
   b5c14:	bd30      	pop	{r4, r5, pc}
   b5c16:	bf00      	nop
   b5c18:	2003d6f4 	.word	0x2003d6f4
   b5c1c:	2003dc34 	.word	0x2003dc34
   b5c20:	000bb792 	.word	0x000bb792

000b5c24 <_Z8getTagIDPi>:

void getTagID(int infoTag[])
{
   b5c24:	b5f0      	push	{r4, r5, r6, r7, lr}
   b5c26:	b08d      	sub	sp, #52	; 0x34

   status = (MFRC522::StatusCode)mfrc522.PCD_Authenticate(MFRC522::PICC_CMD_MF_AUTH_KEY_A, trailerBlock, &key, &(mfrc522.uid));
   b5c28:	4d1e      	ldr	r5, [pc, #120]	; (b5ca4 <_Z8getTagIDPi+0x80>)
   b5c2a:	4a1f      	ldr	r2, [pc, #124]	; (b5ca8 <_Z8getTagIDPi+0x84>)
   b5c2c:	9500      	str	r5, [sp, #0]
   b5c2e:	4b1f      	ldr	r3, [pc, #124]	; (b5cac <_Z8getTagIDPi+0x88>)
   b5c30:	7812      	ldrb	r2, [r2, #0]
   b5c32:	4f1f      	ldr	r7, [pc, #124]	; (b5cb0 <_Z8getTagIDPi+0x8c>)
{
   b5c34:	4606      	mov	r6, r0
   status = (MFRC522::StatusCode)mfrc522.PCD_Authenticate(MFRC522::PICC_CMD_MF_AUTH_KEY_A, trailerBlock, &key, &(mfrc522.uid));
   b5c36:	2160      	movs	r1, #96	; 0x60
   b5c38:	4628      	mov	r0, r5
   b5c3a:	f003 f9dc 	bl	b8ff6 <_ZN7MFRC52216PCD_AuthenticateEhhPNS_10MIFARE_KeyEPNS_3UidE>
   if (status != MFRC522::STATUS_OK)
   b5c3e:	2801      	cmp	r0, #1
   status = (MFRC522::StatusCode)mfrc522.PCD_Authenticate(MFRC522::PICC_CMD_MF_AUTH_KEY_A, trailerBlock, &key, &(mfrc522.uid));
   b5c40:	7038      	strb	r0, [r7, #0]
   if (status != MFRC522::STATUS_OK)
   b5c42:	d00f      	beq.n	b5c64 <_Z8getTagIDPi+0x40>
   {
      Serial.print(F("PCD_Authenticate() failed: "));
   b5c44:	f005 f8d2 	bl	badec <_Z16_fetch_usbserialv>
   b5c48:	491a      	ldr	r1, [pc, #104]	; (b5cb4 <_Z8getTagIDPi+0x90>)
   b5c4a:	f004 fe6d 	bl	ba928 <_ZN5Print5printEPKc>
         Serial.println(mfrc522.GetStatusCodeName(status));
   b5c4e:	f005 f8cd 	bl	badec <_Z16_fetch_usbserialv>
   b5c52:	7839      	ldrb	r1, [r7, #0]
   b5c54:	4604      	mov	r4, r0
   b5c56:	4628      	mov	r0, r5
   b5c58:	f002 ff00 	bl	b8a5c <_ZN7MFRC52217GetStatusCodeNameEh>
   b5c5c:	4601      	mov	r1, r0
   b5c5e:	4620      	mov	r0, r4
   b5c60:	f004 fe75 	bl	ba94e <_ZN5Print7printlnEPKc>
      //writeDataToBLock(blockAddr);

      // Read data from the block's Tag.
      byte buffer[18];
      byte size = sizeof(buffer);
      if (!readDataFromBlock(blockAddr, buffer, size))
   b5c64:	4b14      	ldr	r3, [pc, #80]	; (b5cb8 <_Z8getTagIDPi+0x94>)
   b5c66:	2212      	movs	r2, #18
   b5c68:	7818      	ldrb	r0, [r3, #0]
   b5c6a:	a907      	add	r1, sp, #28
   b5c6c:	f7ff ffb2 	bl	b5bd4 <_Z17readDataFromBlockhPhh>
   b5c70:	b1b0      	cbz	r0, b5ca0 <_Z8getTagIDPi+0x7c>
      // Convert from hex to String:
      char tagInfo[16];
      int i = 0;
      for (byte j = 0; j < sizeof(buffer); j++)
      {
         tagInfo[i] = (char)buffer[j];
   b5c72:	ac07      	add	r4, sp, #28
   b5c74:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b5c76:	ad03      	add	r5, sp, #12
   b5c78:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b5c7a:	6823      	ldr	r3, [r4, #0]
   b5c7c:	802b      	strh	r3, [r5, #0]
         i++;
         // Serial.write(buffer[j]);
         // tagInfo += Serial.write(buffer[j]);
      }
      Serial.printlnf("TagInfo: %s", tagInfo);
   b5c7e:	f005 f8b5 	bl	badec <_Z16_fetch_usbserialv>
   b5c82:	490e      	ldr	r1, [pc, #56]	; (b5cbc <_Z8getTagIDPi+0x98>)
   b5c84:	aa03      	add	r2, sp, #12
   b5c86:	f7fe ff36 	bl	b4af6 <_ZN5Print8printlnfEPKcz>
   split(tagInfo, delim, infoTag);
   b5c8a:	490d      	ldr	r1, [pc, #52]	; (b5cc0 <_Z8getTagIDPi+0x9c>)
   b5c8c:	4632      	mov	r2, r6
   b5c8e:	a803      	add	r0, sp, #12
   b5c90:	f7ff ff8f 	bl	b5bb2 <_Z5splitPcS_Pi>

   // Evitamos seguir leyendo la misma tag.
   mfrc522.PICC_HaltA();
   b5c94:	4803      	ldr	r0, [pc, #12]	; (b5ca4 <_Z8getTagIDPi+0x80>)
   b5c96:	f003 f968 	bl	b8f6a <_ZN7MFRC52210PICC_HaltAEv>
   // Stop encryption on PCD
   mfrc522.PCD_StopCrypto1();
   b5c9a:	4802      	ldr	r0, [pc, #8]	; (b5ca4 <_Z8getTagIDPi+0x80>)
   b5c9c:	f002 ffc5 	bl	b8c2a <_ZN7MFRC52215PCD_StopCrypto1Ev>
}
   b5ca0:	b00d      	add	sp, #52	; 0x34
   b5ca2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b5ca4:	2003d6f4 	.word	0x2003d6f4
   b5ca8:	2003c6c0 	.word	0x2003c6c0
   b5cac:	2003d6e5 	.word	0x2003d6e5
   b5cb0:	2003dc34 	.word	0x2003dc34
   b5cb4:	000bb7a9 	.word	0x000bb7a9
   b5cb8:	2003c694 	.word	0x2003c694
   b5cbc:	000bb7c5 	.word	0x000bb7c5
   b5cc0:	2003c695 	.word	0x2003c695

000b5cc4 <_Z11serieBeforei>:

void serieBefore(int bloque){
   b5cc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b5cc8:	4604      	mov	r4, r0
   int esp;
         Serial.println("WWW");
   b5cca:	f005 f88f 	bl	badec <_Z16_fetch_usbserialv>
   b5cce:	491c      	ldr	r1, [pc, #112]	; (b5d40 <_Z11serieBeforei+0x7c>)

      actuadorHandler(actuador.id, actuador.condicion, actuador.puerto);
      
      while (esp > 0){   
           esp--;
           if (mfrc522.PICC_IsNewCardPresent()){
   b5cd0:	f8df a074 	ldr.w	sl, [pc, #116]	; b5d48 <_Z11serieBeforei+0x84>
         Serial.println("WWW");
   b5cd4:	f004 fe3b 	bl	ba94e <_ZN5Print7printlnEPKc>
   for (int j = 0; j < bloque2[bloque].numActuadores; j++)
   b5cd8:	4b1a      	ldr	r3, [pc, #104]	; (b5d44 <_Z11serieBeforei+0x80>)
   b5cda:	f44f 703b 	mov.w	r0, #748	; 0x2ec
   b5cde:	fb00 3404 	mla	r4, r0, r4, r3
   b5ce2:	2500      	movs	r5, #0
   b5ce4:	46a1      	mov	r9, r4
   b5ce6:	f8d9 3144 	ldr.w	r3, [r9, #324]	; 0x144
   b5cea:	42ab      	cmp	r3, r5
   b5cec:	dd1c      	ble.n	b5d28 <_Z11serieBeforei+0x64>
   Actuador actuador = bloque2[bloque].actuadores[j];
   b5cee:	f8d4 6148 	ldr.w	r6, [r4, #328]	; 0x148
   b5cf2:	f8d4 7154 	ldr.w	r7, [r4, #340]	; 0x154
      actuadorHandler(actuador.id, actuador.condicion, actuador.puerto);
   b5cf6:	f8d4 114c 	ldr.w	r1, [r4, #332]	; 0x14c
   b5cfa:	463a      	mov	r2, r7
   b5cfc:	4630      	mov	r0, r6
   b5cfe:	f7ff fd59 	bl	b57b4 <_Z15actuadorHandleriii>
   b5d02:	f04f 081e 	mov.w	r8, #30
           if (mfrc522.PICC_IsNewCardPresent()){
   b5d06:	4650      	mov	r0, sl
   b5d08:	f003 f91e 	bl	b8f48 <_ZN7MFRC52221PICC_IsNewCardPresentEv>
   b5d0c:	b170      	cbz	r0, b5d2c <_Z11serieBeforei+0x68>
            apagarActuador(actuador.id, actuador.puerto);
   b5d0e:	4639      	mov	r1, r7
   b5d10:	4630      	mov	r0, r6
   b5d12:	f7ff fd3b 	bl	b578c <_Z14apagarActuadorii>
            mfrc522.PICC_ReadCardSerial();
   b5d16:	480c      	ldr	r0, [pc, #48]	; (b5d48 <_Z11serieBeforei+0x84>)
   b5d18:	f003 fae7 	bl	b92ea <_ZN7MFRC52219PICC_ReadCardSerialEv>
            getTagID(tagInfo);
   b5d1c:	480b      	ldr	r0, [pc, #44]	; (b5d4c <_Z11serieBeforei+0x88>)
   b5d1e:	f7ff ff81 	bl	b5c24 <_Z8getTagIDPi>
            play = false;
   b5d22:	4b0b      	ldr	r3, [pc, #44]	; (b5d50 <_Z11serieBeforei+0x8c>)
   b5d24:	2200      	movs	r2, #0
   b5d26:	701a      	strb	r2, [r3, #0]
         return;}
      }
      apagarActuador(actuador.id, actuador.puerto);
   }
}
   b5d28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      while (esp > 0){   
   b5d2c:	f1b8 0801 	subs.w	r8, r8, #1
   b5d30:	d1e9      	bne.n	b5d06 <_Z11serieBeforei+0x42>
      apagarActuador(actuador.id, actuador.puerto);
   b5d32:	4639      	mov	r1, r7
   b5d34:	4630      	mov	r0, r6
   b5d36:	f7ff fd29 	bl	b578c <_Z14apagarActuadorii>
   for (int j = 0; j < bloque2[bloque].numActuadores; j++)
   b5d3a:	3501      	adds	r5, #1
   b5d3c:	3414      	adds	r4, #20
   b5d3e:	e7d2      	b.n	b5ce6 <_Z11serieBeforei+0x22>
   b5d40:	000bb7d1 	.word	0x000bb7d1
   b5d44:	2003c750 	.word	0x2003c750
   b5d48:	2003d6f4 	.word	0x2003d6f4
   b5d4c:	2003c6a4 	.word	0x2003c6a4
   b5d50:	2003da30 	.word	0x2003da30

000b5d54 <_Z18ejecutarEvaluacionbi>:

void ejecutarEvaluacion(bool evaluacion, int bloque) {
   b5d54:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5d58:	4c22      	ldr	r4, [pc, #136]	; (b5de4 <_Z18ejecutarEvaluacionbi+0x90>)
    {
      esp = 30;
      actuadorHandler(actuador.id, actuador.condicion, actuador.puerto);
      while (esp > 0){
         esp--;
         if (mfrc522.PICC_IsNewCardPresent()){
   b5d5a:	f8df b08c 	ldr.w	fp, [pc, #140]	; b5de8 <_Z18ejecutarEvaluacionbi+0x94>
   b5d5e:	f44f 733b 	mov.w	r3, #748	; 0x2ec
   b5d62:	fb03 4401 	mla	r4, r3, r1, r4
void ejecutarEvaluacion(bool evaluacion, int bloque) {
   b5d66:	4681      	mov	r9, r0
   b5d68:	460e      	mov	r6, r1
  for (int j = 0; j < bloques[bloque].numActuadores; j++)
   b5d6a:	f04f 0800 	mov.w	r8, #0
   b5d6e:	46a2      	mov	sl, r4
   b5d70:	f8da 3144 	ldr.w	r3, [sl, #324]	; 0x144
   b5d74:	4543      	cmp	r3, r8
   b5d76:	dd21      	ble.n	b5dbc <_Z18ejecutarEvaluacionbi+0x68>
    if (evaluacion == actuador.evaluate)
   b5d78:	f894 3158 	ldrb.w	r3, [r4, #344]	; 0x158
    Actuador actuador = bloques[bloque].actuadores[j];
   b5d7c:	f8d4 5148 	ldr.w	r5, [r4, #328]	; 0x148
   b5d80:	f8d4 7154 	ldr.w	r7, [r4, #340]	; 0x154
    if (evaluacion == actuador.evaluate)
   b5d84:	454b      	cmp	r3, r9
   b5d86:	d123      	bne.n	b5dd0 <_Z18ejecutarEvaluacionbi+0x7c>
      actuadorHandler(actuador.id, actuador.condicion, actuador.puerto);
   b5d88:	f8d4 114c 	ldr.w	r1, [r4, #332]	; 0x14c
   b5d8c:	463a      	mov	r2, r7
   b5d8e:	4628      	mov	r0, r5
   b5d90:	f7ff fd10 	bl	b57b4 <_Z15actuadorHandleriii>
   b5d94:	231e      	movs	r3, #30
         if (mfrc522.PICC_IsNewCardPresent()){
   b5d96:	4658      	mov	r0, fp
   b5d98:	9301      	str	r3, [sp, #4]
   b5d9a:	f003 f8d5 	bl	b8f48 <_ZN7MFRC52221PICC_IsNewCardPresentEv>
   b5d9e:	9b01      	ldr	r3, [sp, #4]
   b5da0:	b178      	cbz	r0, b5dc2 <_Z18ejecutarEvaluacionbi+0x6e>
            apagarActuador(actuador.id, actuador.puerto);
   b5da2:	4639      	mov	r1, r7
   b5da4:	4628      	mov	r0, r5
   b5da6:	f7ff fcf1 	bl	b578c <_Z14apagarActuadorii>
            mfrc522.PICC_ReadCardSerial();
   b5daa:	480f      	ldr	r0, [pc, #60]	; (b5de8 <_Z18ejecutarEvaluacionbi+0x94>)
   b5dac:	f003 fa9d 	bl	b92ea <_ZN7MFRC52219PICC_ReadCardSerialEv>
            getTagID(tagInfo);
   b5db0:	480e      	ldr	r0, [pc, #56]	; (b5dec <_Z18ejecutarEvaluacionbi+0x98>)
   b5db2:	f7ff ff37 	bl	b5c24 <_Z8getTagIDPi>
            play = false;
   b5db6:	4b0e      	ldr	r3, [pc, #56]	; (b5df0 <_Z18ejecutarEvaluacionbi+0x9c>)
   b5db8:	2200      	movs	r2, #0
   b5dba:	701a      	strb	r2, [r3, #0]
      }
    }
    
  }

}
   b5dbc:	b003      	add	sp, #12
   b5dbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      while (esp > 0){
   b5dc2:	3b01      	subs	r3, #1
   b5dc4:	d1e7      	bne.n	b5d96 <_Z18ejecutarEvaluacionbi+0x42>
        apagarActuador(actuador.id, actuador.puerto);
   b5dc6:	4639      	mov	r1, r7
   b5dc8:	4628      	mov	r0, r5
   b5dca:	f7ff fcdf 	bl	b578c <_Z14apagarActuadorii>
   b5dce:	e005      	b.n	b5ddc <_Z18ejecutarEvaluacionbi+0x88>
      if (!isActuadorDual(actuador.id, bloque))
   b5dd0:	4631      	mov	r1, r6
   b5dd2:	4628      	mov	r0, r5
   b5dd4:	f7ff fe92 	bl	b5afc <_Z14isActuadorDualii>
   b5dd8:	2800      	cmp	r0, #0
   b5dda:	d0f4      	beq.n	b5dc6 <_Z18ejecutarEvaluacionbi+0x72>
  for (int j = 0; j < bloques[bloque].numActuadores; j++)
   b5ddc:	f108 0801 	add.w	r8, r8, #1
   b5de0:	3414      	adds	r4, #20
   b5de2:	e7c5      	b.n	b5d70 <_Z18ejecutarEvaluacionbi+0x1c>
   b5de4:	2003cd28 	.word	0x2003cd28
   b5de8:	2003d6f4 	.word	0x2003d6f4
   b5dec:	2003c6a4 	.word	0x2003c6a4
   b5df0:	2003da30 	.word	0x2003da30

000b5df4 <_Z13asignarPuertoi>:


int asignarPuerto(int type)
{
   b5df4:	b510      	push	{r4, lr}
   int option;
   
   if (esAnalogico(type))
   b5df6:	b940      	cbnz	r0, b5e0a <_Z13asignarPuertoi+0x16>
   {
      option = puertoAnalogico;
   b5df8:	4b32      	ldr	r3, [pc, #200]	; (b5ec4 <_Z13asignarPuertoi+0xd0>)
   }
   else
      option = puertoDigital;
   b5dfa:	681c      	ldr	r4, [r3, #0]

   switch (option)
   b5dfc:	2c05      	cmp	r4, #5
   b5dfe:	d858      	bhi.n	b5eb2 <_Z13asignarPuertoi+0xbe>
   b5e00:	e8df f004 	tbb	[pc, r4]
   b5e04:	32221305 	.word	0x32221305
   b5e08:	483d      	.short	0x483d
      option = puertoDigital;
   b5e0a:	4b2f      	ldr	r3, [pc, #188]	; (b5ec8 <_Z13asignarPuertoi+0xd4>)
   b5e0c:	e7f5      	b.n	b5dfa <_Z13asignarPuertoi+0x6>
   {
   case 0:
      Serial.print("Conectar al puerto A0\n");
   b5e0e:	f004 ffed 	bl	badec <_Z16_fetch_usbserialv>
   b5e12:	492e      	ldr	r1, [pc, #184]	; (b5ecc <_Z13asignarPuertoi+0xd8>)
   b5e14:	f004 fd88 	bl	ba928 <_ZN5Print5printEPKc>
      puertoAnalogico++;
   b5e18:	4a2a      	ldr	r2, [pc, #168]	; (b5ec4 <_Z13asignarPuertoi+0xd0>)
   b5e1a:	6813      	ldr	r3, [r2, #0]
   b5e1c:	3301      	adds	r3, #1
   b5e1e:	6013      	str	r3, [r2, #0]
      puertoAnalogico_bloque++;
   b5e20:	4a2b      	ldr	r2, [pc, #172]	; (b5ed0 <_Z13asignarPuertoi+0xdc>)
      return 2;

   case 4:
      Serial.print("Conectar al puerto D4\n");
      puertoDigital++;
      puertoDigital_bloque++;
   b5e22:	6813      	ldr	r3, [r2, #0]
   b5e24:	3301      	adds	r3, #1
   b5e26:	6013      	str	r3, [r2, #0]
      return 4;
   b5e28:	e01c      	b.n	b5e64 <_Z13asignarPuertoi+0x70>
      Serial.print("Conectar al puerto A2\n");
   b5e2a:	f004 ffdf 	bl	badec <_Z16_fetch_usbserialv>
   b5e2e:	4929      	ldr	r1, [pc, #164]	; (b5ed4 <_Z13asignarPuertoi+0xe0>)
   b5e30:	f004 fd7a 	bl	ba928 <_ZN5Print5printEPKc>
      puertoAnalogico++;
   b5e34:	4a23      	ldr	r2, [pc, #140]	; (b5ec4 <_Z13asignarPuertoi+0xd0>)
   b5e36:	6813      	ldr	r3, [r2, #0]
   b5e38:	3301      	adds	r3, #1
   b5e3a:	6013      	str	r3, [r2, #0]
      puertoAnalogico_bloque++;
   b5e3c:	4a24      	ldr	r2, [pc, #144]	; (b5ed0 <_Z13asignarPuertoi+0xdc>)
      puertoDigital_bloque++;
   b5e3e:	6813      	ldr	r3, [r2, #0]
   b5e40:	3301      	adds	r3, #1
   b5e42:	6013      	str	r3, [r2, #0]
      return 2;
   b5e44:	2402      	movs	r4, #2
   b5e46:	e00d      	b.n	b5e64 <_Z13asignarPuertoi+0x70>
      Serial.print("Conectar al puerto A4\n");
   b5e48:	f004 ffd0 	bl	badec <_Z16_fetch_usbserialv>
   b5e4c:	4922      	ldr	r1, [pc, #136]	; (b5ed8 <_Z13asignarPuertoi+0xe4>)
   b5e4e:	f004 fd6b 	bl	ba928 <_ZN5Print5printEPKc>
      puertoAnalogico = -1;
   b5e52:	4b1c      	ldr	r3, [pc, #112]	; (b5ec4 <_Z13asignarPuertoi+0xd0>)
   b5e54:	f04f 32ff 	mov.w	r2, #4294967295
   b5e58:	601a      	str	r2, [r3, #0]
      puertoAnalogico_bloque++;
   b5e5a:	4a1d      	ldr	r2, [pc, #116]	; (b5ed0 <_Z13asignarPuertoi+0xdc>)
   b5e5c:	6813      	ldr	r3, [r2, #0]
   b5e5e:	3301      	adds	r3, #1
   b5e60:	6013      	str	r3, [r2, #0]
      return 4;
   b5e62:	2404      	movs	r4, #4
   default:
      Serial.print("Error: No hay mas puertos disponibles \n");
      return -1;
   }

}
   b5e64:	4620      	mov	r0, r4
   b5e66:	bd10      	pop	{r4, pc}
      Serial.print("Conectar al puerto D2\n");
   b5e68:	f004 ffc0 	bl	badec <_Z16_fetch_usbserialv>
   b5e6c:	491b      	ldr	r1, [pc, #108]	; (b5edc <_Z13asignarPuertoi+0xe8>)
   b5e6e:	f004 fd5b 	bl	ba928 <_ZN5Print5printEPKc>
      puertoDigital++;
   b5e72:	4a15      	ldr	r2, [pc, #84]	; (b5ec8 <_Z13asignarPuertoi+0xd4>)
   b5e74:	6813      	ldr	r3, [r2, #0]
   b5e76:	3301      	adds	r3, #1
   b5e78:	6013      	str	r3, [r2, #0]
      puertoDigital_bloque++;
   b5e7a:	4a19      	ldr	r2, [pc, #100]	; (b5ee0 <_Z13asignarPuertoi+0xec>)
   b5e7c:	e7df      	b.n	b5e3e <_Z13asignarPuertoi+0x4a>
      Serial.print("Conectar al puerto D4\n");
   b5e7e:	f004 ffb5 	bl	badec <_Z16_fetch_usbserialv>
   b5e82:	4918      	ldr	r1, [pc, #96]	; (b5ee4 <_Z13asignarPuertoi+0xf0>)
   b5e84:	f004 fd50 	bl	ba928 <_ZN5Print5printEPKc>
      puertoDigital++;
   b5e88:	4a0f      	ldr	r2, [pc, #60]	; (b5ec8 <_Z13asignarPuertoi+0xd4>)
   b5e8a:	6813      	ldr	r3, [r2, #0]
   b5e8c:	3301      	adds	r3, #1
   b5e8e:	6013      	str	r3, [r2, #0]
      puertoDigital_bloque++;
   b5e90:	4a13      	ldr	r2, [pc, #76]	; (b5ee0 <_Z13asignarPuertoi+0xec>)
   b5e92:	e7c6      	b.n	b5e22 <_Z13asignarPuertoi+0x2e>
      Serial.print("Conectar al puerto D6\n");
   b5e94:	f004 ffaa 	bl	badec <_Z16_fetch_usbserialv>
   b5e98:	4913      	ldr	r1, [pc, #76]	; (b5ee8 <_Z13asignarPuertoi+0xf4>)
   b5e9a:	f004 fd45 	bl	ba928 <_ZN5Print5printEPKc>
      puertoDigital = -1;
   b5e9e:	4b0a      	ldr	r3, [pc, #40]	; (b5ec8 <_Z13asignarPuertoi+0xd4>)
   b5ea0:	f04f 32ff 	mov.w	r2, #4294967295
   b5ea4:	601a      	str	r2, [r3, #0]
      puertoDigital_bloque++;
   b5ea6:	4a0e      	ldr	r2, [pc, #56]	; (b5ee0 <_Z13asignarPuertoi+0xec>)
   b5ea8:	6813      	ldr	r3, [r2, #0]
   b5eaa:	3301      	adds	r3, #1
   b5eac:	6013      	str	r3, [r2, #0]
      return 6;
   b5eae:	2406      	movs	r4, #6
   b5eb0:	e7d8      	b.n	b5e64 <_Z13asignarPuertoi+0x70>
      Serial.print("Error: No hay mas puertos disponibles \n");
   b5eb2:	f004 ff9b 	bl	badec <_Z16_fetch_usbserialv>
   b5eb6:	490d      	ldr	r1, [pc, #52]	; (b5eec <_Z13asignarPuertoi+0xf8>)
   b5eb8:	f004 fd36 	bl	ba928 <_ZN5Print5printEPKc>
      return -1;
   b5ebc:	f04f 34ff 	mov.w	r4, #4294967295
   b5ec0:	e7d0      	b.n	b5e64 <_Z13asignarPuertoi+0x70>
   b5ec2:	bf00      	nop
   b5ec4:	2003da3c 	.word	0x2003da3c
   b5ec8:	2003c6a0 	.word	0x2003c6a0
   b5ecc:	000bb7d5 	.word	0x000bb7d5
   b5ed0:	2003da40 	.word	0x2003da40
   b5ed4:	000bb7ec 	.word	0x000bb7ec
   b5ed8:	000bb803 	.word	0x000bb803
   b5edc:	000bb81a 	.word	0x000bb81a
   b5ee0:	2003da44 	.word	0x2003da44
   b5ee4:	000bb831 	.word	0x000bb831
   b5ee8:	000bb848 	.word	0x000bb848
   b5eec:	000bb85f 	.word	0x000bb85f

000b5ef0 <_Z11ajusta_tempi>:

// Eliminar 'outliers' de la temperatura
   int ajusta_temp(int val)
   {
   b5ef0:	b510      	push	{r4, lr}
      if (temp_rep == 0){
   b5ef2:	4a09      	ldr	r2, [pc, #36]	; (b5f18 <_Z11ajusta_tempi+0x28>)
   b5ef4:	4909      	ldr	r1, [pc, #36]	; (b5f1c <_Z11ajusta_tempi+0x2c>)
   b5ef6:	6813      	ldr	r3, [r2, #0]
   b5ef8:	b923      	cbnz	r3, b5f04 <_Z11ajusta_tempi+0x14>
         temp_prev = val;
   b5efa:	6008      	str	r0, [r1, #0]
         temp_rep++;}
   b5efc:	2301      	movs	r3, #1
      else if (temp_prev == val && temp_rep < 6)
         temp_rep++;
      else
         temp_rep--;
   b5efe:	6013      	str	r3, [r2, #0]
         val = temp_prev;
      return val;
   }
   b5f00:	6808      	ldr	r0, [r1, #0]
   b5f02:	bd10      	pop	{r4, pc}
      else if (temp_prev == val && temp_rep < 6)
   b5f04:	680c      	ldr	r4, [r1, #0]
   b5f06:	4284      	cmp	r4, r0
   b5f08:	d103      	bne.n	b5f12 <_Z11ajusta_tempi+0x22>
   b5f0a:	2b05      	cmp	r3, #5
   b5f0c:	dc01      	bgt.n	b5f12 <_Z11ajusta_tempi+0x22>
         temp_rep++;
   b5f0e:	3301      	adds	r3, #1
   b5f10:	e7f5      	b.n	b5efe <_Z11ajusta_tempi+0xe>
         temp_rep--;
   b5f12:	3b01      	subs	r3, #1
   b5f14:	e7f3      	b.n	b5efe <_Z11ajusta_tempi+0xe>
   b5f16:	bf00      	nop
   b5f18:	2003e6ac 	.word	0x2003e6ac
   b5f1c:	2003c6bc 	.word	0x2003c6bc

000b5f20 <_Z18borra_POP_Avanzadov>:


   void borra_POP_Avanzado (){
      if (!IF_pasado){
   b5f20:	4b06      	ldr	r3, [pc, #24]	; (b5f3c <_Z18borra_POP_Avanzadov+0x1c>)
   b5f22:	781b      	ldrb	r3, [r3, #0]
   b5f24:	b94b      	cbnz	r3, b5f3a <_Z18borra_POP_Avanzadov+0x1a>
            numActuadoresBloque--;
   b5f26:	4a06      	ldr	r2, [pc, #24]	; (b5f40 <_Z18borra_POP_Avanzadov+0x20>)
   b5f28:	6813      	ldr	r3, [r2, #0]
   b5f2a:	3b01      	subs	r3, #1
   b5f2c:	6013      	str	r3, [r2, #0]
            bloque2[0].numActuadores--;
   b5f2e:	4a05      	ldr	r2, [pc, #20]	; (b5f44 <_Z18borra_POP_Avanzadov+0x24>)
   b5f30:	f8d2 3144 	ldr.w	r3, [r2, #324]	; 0x144
   b5f34:	3b01      	subs	r3, #1
   b5f36:	f8c2 3144 	str.w	r3, [r2, #324]	; 0x144
      }
   }
   b5f3a:	4770      	bx	lr
   b5f3c:	2003c73d 	.word	0x2003c73d
   b5f40:	2003da24 	.word	0x2003da24
   b5f44:	2003c750 	.word	0x2003c750

000b5f48 <setup>:
// Unconnected mode ON, evita conexion wifi.

SYSTEM_MODE(SEMI_AUTOMATIC);

void setup()
{
   b5f48:	b570      	push	{r4, r5, r6, lr}
   b5f4a:	b08a      	sub	sp, #40	; 0x28
inline CloudDisconnectOptions::CloudDisconnectOptions(unsigned flags, system_tick_t timeout, bool graceful,
        bool clearSession) :
        flags_(flags),
        timeout_(timeout),
        graceful_(graceful),
        clearSession_(clearSession) {
   b5f4c:	2400      	movs	r4, #0
  // Unconnected mode ON
  Particle.disconnect();
   b5f4e:	a807      	add	r0, sp, #28
   b5f50:	e9cd 4407 	strd	r4, r4, [sp, #28]
        bool clearSession) :
   b5f54:	f8ad 4024 	strh.w	r4, [sp, #36]	; 0x24
   b5f58:	f004 fe58 	bl	bac0c <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   b5f5c:	4843      	ldr	r0, [pc, #268]	; (b606c <setup+0x124>)
   b5f5e:	4623      	mov	r3, r4
   b5f60:	4622      	mov	r2, r4
   b5f62:	4621      	mov	r1, r4
   b5f64:	6840      	ldr	r0, [r0, #4]

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b5f66:	4c42      	ldr	r4, [pc, #264]	; (b6070 <setup+0x128>)
   b5f68:	f004 fa02 	bl	ba370 <network_off>
  WiFi.off();

  // Particle setup
  Serial.begin(9600);
   b5f6c:	f004 ff3e 	bl	badec <_Z16_fetch_usbserialv>
   b5f70:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b5f74:	f004 ff2e 	bl	badd4 <_ZN9USBSerial5beginEl>
   b5f78:	7821      	ldrb	r1, [r4, #0]
   b5f7a:	f3bf 8f5b 	dmb	ish
   b5f7e:	f011 0101 	ands.w	r1, r1, #1
   b5f82:	d10b      	bne.n	b5f9c <setup+0x54>
   b5f84:	4620      	mov	r0, r4
   b5f86:	9105      	str	r1, [sp, #20]
   b5f88:	f7fe fd6c 	bl	b4a64 <__cxa_guard_acquire>
   b5f8c:	9905      	ldr	r1, [sp, #20]
   b5f8e:	b128      	cbz	r0, b5f9c <setup+0x54>
   b5f90:	4838      	ldr	r0, [pc, #224]	; (b6074 <setup+0x12c>)
   b5f92:	f004 fab9 	bl	ba508 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b5f96:	4620      	mov	r0, r4
   b5f98:	f7fe fd69 	bl	b4a6e <__cxa_guard_release>

    hal_spi_interface_t interface() {
         return instance().interface();
    }
    void begin() {
        instance().begin();
   b5f9c:	4835      	ldr	r0, [pc, #212]	; (b6074 <setup+0x12c>)
  for (byte i = 0; i < 6; i++)
  {
    key.keyByte[i] = 0xFF;
  }

  MODE = EEPROM.read(0);
   b5f9e:	4c36      	ldr	r4, [pc, #216]	; (b6078 <setup+0x130>)
  display.begin(SSD1306_SWITCHCAPVCC, 0x3C);
   b5fa0:	2501      	movs	r5, #1
   b5fa2:	f004 fabb 	bl	ba51c <_ZN8SPIClass5beginEv>
   b5fa6:	462b      	mov	r3, r5
   b5fa8:	223c      	movs	r2, #60	; 0x3c
   b5faa:	2102      	movs	r1, #2
   b5fac:	4833      	ldr	r0, [pc, #204]	; (b607c <setup+0x134>)
   b5fae:	9500      	str	r5, [sp, #0]
   b5fb0:	f003 fc0a 	bl	b97c8 <_ZN16Adafruit_SSD13065beginEhhbb>
  display.clearDisplay();
   b5fb4:	4831      	ldr	r0, [pc, #196]	; (b607c <setup+0x134>)
   b5fb6:	f003 fbf9 	bl	b97ac <_ZN16Adafruit_SSD130612clearDisplayEv>
  display.display();
   b5fba:	4830      	ldr	r0, [pc, #192]	; (b607c <setup+0x134>)
   b5fbc:	f003 fe5e 	bl	b9c7c <_ZN16Adafruit_SSD13067displayEv>
  mfrc522.PCD_Init();
   b5fc0:	482f      	ldr	r0, [pc, #188]	; (b6080 <setup+0x138>)
   b5fc2:	f002 fe96 	bl	b8cf2 <_ZN7MFRC5228PCD_InitEv>
    key.keyByte[i] = 0xFF;
   b5fc6:	4a2f      	ldr	r2, [pc, #188]	; (b6084 <setup+0x13c>)
   b5fc8:	21ff      	movs	r1, #255	; 0xff
   b5fca:	7011      	strb	r1, [r2, #0]
   b5fcc:	7051      	strb	r1, [r2, #1]
   b5fce:	7091      	strb	r1, [r2, #2]
   b5fd0:	70d1      	strb	r1, [r2, #3]
   b5fd2:	7111      	strb	r1, [r2, #4]
   b5fd4:	7151      	strb	r1, [r2, #5]
  MODE = EEPROM.read(0);
   b5fd6:	f005 f9f1 	bl	bb3bc <_Z21__fetch_global_EEPROMv>

    EERef( const int index )
        : index( index )                 {}

    //Access/read members.
    uint8_t operator*() const            { return HAL_EEPROM_Read(index); }
   b5fda:	2000      	movs	r0, #0
   b5fdc:	f004 f834 	bl	ba048 <HAL_EEPROM_Read>

  // EEPROM empty
  if ( MODE == 0xFF ) {
   b5fe0:	28ff      	cmp	r0, #255	; 0xff
  MODE = EEPROM.read(0);
   b5fe2:	7020      	strb	r0, [r4, #0]
  if ( MODE == 0xFF ) {
   b5fe4:	d10d      	bne.n	b6002 <setup+0xba>
    
    Serial.println("EEPROM empty");
   b5fe6:	f004 ff01 	bl	badec <_Z16_fetch_usbserialv>
    MODE = 0;
   b5fea:	2600      	movs	r6, #0
    Serial.println("EEPROM empty");
   b5fec:	4926      	ldr	r1, [pc, #152]	; (b6088 <setup+0x140>)
   b5fee:	f004 fcae 	bl	ba94e <_ZN5Print7printlnEPKc>
    MODE = 0;
   b5ff2:	7026      	strb	r6, [r4, #0]
    EEPROM.put(0, MODE);
   b5ff4:	f005 f9e2 	bl	bb3bc <_Z21__fetch_global_EEPROMv>
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   b5ff8:	462a      	mov	r2, r5
   b5ffa:	4621      	mov	r1, r4
   b5ffc:	4630      	mov	r0, r6
   b5ffe:	f004 f82b 	bl	ba058 <HAL_EEPROM_Put>

  }

  if ( MODE == 0 ) {
   b6002:	7824      	ldrb	r4, [r4, #0]
   b6004:	bb54      	cbnz	r4, b605c <setup+0x114>

    // MODO BÁSICO iniciado
    pinMode(Zumbador_PIN, OUTPUT);
   b6006:	2101      	movs	r1, #1
   b6008:	2006      	movs	r0, #6
   b600a:	f005 f925 	bl	bb258 <pinMode>
    ledObject.init();
   b600e:	481f      	ldr	r0, [pc, #124]	; (b608c <setup+0x144>)
   b6010:	f003 ff80 	bl	b9f14 <_ZN12ChainableLED4initEv>
    init = true;
   b6014:	4b1e      	ldr	r3, [pc, #120]	; (b6090 <setup+0x148>)
   b6016:	2201      	movs	r2, #1
   b6018:	701a      	strb	r2, [r3, #0]

    Bloque bloque;
    numBloque++;
   b601a:	4a1e      	ldr	r2, [pc, #120]	; (b6094 <setup+0x14c>)
   b601c:	6813      	ldr	r3, [r2, #0]
   b601e:	3301      	adds	r3, #1
   b6020:	6013      	str	r3, [r2, #0]
    bloques[numBloque] = bloque;
   b6022:	f44f 713b 	mov.w	r1, #748	; 0x2ec
   b6026:	4a1c      	ldr	r2, [pc, #112]	; (b6098 <setup+0x150>)
   b6028:	434b      	muls	r3, r1
   b602a:	18d1      	adds	r1, r2, r3
   b602c:	50d4      	str	r4, [r2, r3]
   b602e:	f8c1 4144 	str.w	r4, [r1, #324]	; 0x144
    // MODO MUSICA iniciado
    pinMode(Zumbador_PIN, OUTPUT);
    //showBitmap(0,2,"");
  }

  display.drawBitmap(0,0, sucreLogo_data, sucreLogo_width, sucreLogo_height, 1);
   b6032:	2340      	movs	r3, #64	; 0x40
   b6034:	2201      	movs	r2, #1
   b6036:	e9cd 3201 	strd	r3, r2, [sp, #4]
   b603a:	2200      	movs	r2, #0
   b603c:	2380      	movs	r3, #128	; 0x80
   b603e:	4611      	mov	r1, r2
   b6040:	9300      	str	r3, [sp, #0]
   b6042:	480e      	ldr	r0, [pc, #56]	; (b607c <setup+0x134>)
   b6044:	4b15      	ldr	r3, [pc, #84]	; (b609c <setup+0x154>)
   b6046:	f002 faa9 	bl	b859c <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
  display.display();
   b604a:	480c      	ldr	r0, [pc, #48]	; (b607c <setup+0x134>)
   b604c:	f003 fe16 	bl	b9c7c <_ZN16Adafruit_SSD13067displayEv>
   b6050:	f003 ffea 	bl	ba028 <HAL_Timer_Get_Milli_Seconds>
  startTime = millis();
   b6054:	4b12      	ldr	r3, [pc, #72]	; (b60a0 <setup+0x158>)
   b6056:	6018      	str	r0, [r3, #0]
  
}
   b6058:	b00a      	add	sp, #40	; 0x28
   b605a:	bd70      	pop	{r4, r5, r6, pc}
  } else if ( MODE == 1 ) {
   b605c:	2c01      	cmp	r4, #1
   b605e:	d0e8      	beq.n	b6032 <setup+0xea>
    pinMode(Zumbador_PIN, OUTPUT);
   b6060:	2101      	movs	r1, #1
   b6062:	2006      	movs	r0, #6
   b6064:	f005 f8f8 	bl	bb258 <pinMode>
   b6068:	e7e3      	b.n	b6032 <setup+0xea>
   b606a:	bf00      	nop
   b606c:	2003e710 	.word	0x2003e710
   b6070:	2003c730 	.word	0x2003c730
   b6074:	2003c734 	.word	0x2003c734
   b6078:	2003c73e 	.word	0x2003c73e
   b607c:	2003d34c 	.word	0x2003d34c
   b6080:	2003d6f4 	.word	0x2003d6f4
   b6084:	2003d6e5 	.word	0x2003d6e5
   b6088:	000bb887 	.word	0x000bb887
   b608c:	2003d6ec 	.word	0x2003d6ec
   b6090:	2003d6e4 	.word	0x2003d6e4
   b6094:	2003c69c 	.word	0x2003c69c
   b6098:	2003cd28 	.word	0x2003cd28
   b609c:	000bc1fa 	.word	0x000bc1fa
   b60a0:	2003dc30 	.word	0x2003dc30

000b60a4 <_GLOBAL__sub_I_ruid>:
ChainableLED ledObject = ChainableLED(led_PIN1, led_PIN2, NUM_LEDS);
   b60a4:	2305      	movs	r3, #5
              play=false;
        }

  }
   b60a6:	b570      	push	{r4, r5, r6, lr}
   b60a8:	461a      	mov	r2, r3
   b60aa:	2104      	movs	r1, #4
   b60ac:	48aa      	ldr	r0, [pc, #680]	; (b6358 <_GLOBAL__sub_I_ruid+0x2b4>)
String tarjetas[80] = {"3#0#0#12#0","3#0#1#6#0", "1#0#1#9#3", "1#0#0#12#1", "1#1#0#13#1"};
   b60ae:	4dab      	ldr	r5, [pc, #684]	; (b635c <_GLOBAL__sub_I_ruid+0x2b8>)
   b60b0:	4eab      	ldr	r6, [pc, #684]	; (b6360 <_GLOBAL__sub_I_ruid+0x2bc>)
   b60b2:	f003 fe7d 	bl	b9db0 <_ZN12ChainableLEDC1Ehhh>
    int bloque;
    int puerto;
    bool evaluate;
} Actuador;

typedef struct BLOQUE
   b60b6:	4bab      	ldr	r3, [pc, #684]	; (b6364 <_GLOBAL__sub_I_ruid+0x2c0>)
Adafruit_SSD1306 display(-1);
   b60b8:	48ab      	ldr	r0, [pc, #684]	; (b6368 <_GLOBAL__sub_I_ruid+0x2c4>)
   b60ba:	2400      	movs	r4, #0
   b60bc:	601c      	str	r4, [r3, #0]
   b60be:	f8c3 4144 	str.w	r4, [r3, #324]	; 0x144
   b60c2:	f8c3 42ec 	str.w	r4, [r3, #748]	; 0x2ec
   b60c6:	f8c3 4430 	str.w	r4, [r3, #1072]	; 0x430
   b60ca:	4ba8      	ldr	r3, [pc, #672]	; (b636c <_GLOBAL__sub_I_ruid+0x2c8>)
   b60cc:	f04f 31ff 	mov.w	r1, #4294967295
   b60d0:	601c      	str	r4, [r3, #0]
   b60d2:	f8c3 4144 	str.w	r4, [r3, #324]	; 0x144
   b60d6:	f8c3 42ec 	str.w	r4, [r3, #748]	; 0x2ec
   b60da:	f8c3 4430 	str.w	r4, [r3, #1072]	; 0x430
   b60de:	f003 fa71 	bl	b95c4 <_ZN16Adafruit_SSD1306C1Ea>
String dispositivos[2] = {"-", "-"};
   b60e2:	49a3      	ldr	r1, [pc, #652]	; (b6370 <_GLOBAL__sub_I_ruid+0x2cc>)
   b60e4:	48a3      	ldr	r0, [pc, #652]	; (b6374 <_GLOBAL__sub_I_ruid+0x2d0>)
   b60e6:	f004 fb64 	bl	ba7b2 <_ZN6StringC1EPK19__FlashStringHelper>
   b60ea:	49a1      	ldr	r1, [pc, #644]	; (b6370 <_GLOBAL__sub_I_ruid+0x2cc>)
   b60ec:	48a2      	ldr	r0, [pc, #648]	; (b6378 <_GLOBAL__sub_I_ruid+0x2d4>)
   b60ee:	f004 fb60 	bl	ba7b2 <_ZN6StringC1EPK19__FlashStringHelper>
String tarjetas_modoBasico[16] = { "0#2#0","0#3#0","0#4#1","0#9#1","0#10#1","0#11#1","0#1#1#0","0#1#1#1","0#0#1#0","0#0#1#1","0#0#1#2","0#0#1#3","0#0#1#4","0#0#1#5"};
   b60f2:	49a2      	ldr	r1, [pc, #648]	; (b637c <_GLOBAL__sub_I_ruid+0x2d8>)
   b60f4:	48a2      	ldr	r0, [pc, #648]	; (b6380 <_GLOBAL__sub_I_ruid+0x2dc>)
   b60f6:	f004 fb5c 	bl	ba7b2 <_ZN6StringC1EPK19__FlashStringHelper>
   b60fa:	49a2      	ldr	r1, [pc, #648]	; (b6384 <_GLOBAL__sub_I_ruid+0x2e0>)
   b60fc:	48a2      	ldr	r0, [pc, #648]	; (b6388 <_GLOBAL__sub_I_ruid+0x2e4>)
   b60fe:	f004 fb58 	bl	ba7b2 <_ZN6StringC1EPK19__FlashStringHelper>
   b6102:	49a2      	ldr	r1, [pc, #648]	; (b638c <_GLOBAL__sub_I_ruid+0x2e8>)
   b6104:	48a2      	ldr	r0, [pc, #648]	; (b6390 <_GLOBAL__sub_I_ruid+0x2ec>)
   b6106:	f004 fb54 	bl	ba7b2 <_ZN6StringC1EPK19__FlashStringHelper>
   b610a:	49a2      	ldr	r1, [pc, #648]	; (b6394 <_GLOBAL__sub_I_ruid+0x2f0>)
   b610c:	48a2      	ldr	r0, [pc, #648]	; (b6398 <_GLOBAL__sub_I_ruid+0x2f4>)
   b610e:	f004 fb50 	bl	ba7b2 <_ZN6StringC1EPK19__FlashStringHelper>
   b6112:	49a2      	ldr	r1, [pc, #648]	; (b639c <_GLOBAL__sub_I_ruid+0x2f8>)
   b6114:	48a2      	ldr	r0, [pc, #648]	; (b63a0 <_GLOBAL__sub_I_ruid+0x2fc>)
   b6116:	f004 fb4c 	bl	ba7b2 <_ZN6StringC1EPK19__FlashStringHelper>
   b611a:	49a2      	ldr	r1, [pc, #648]	; (b63a4 <_GLOBAL__sub_I_ruid+0x300>)
   b611c:	48a2      	ldr	r0, [pc, #648]	; (b63a8 <_GLOBAL__sub_I_ruid+0x304>)
   b611e:	f004 fb48 	bl	ba7b2 <_ZN6StringC1EPK19__FlashStringHelper>
   b6122:	49a2      	ldr	r1, [pc, #648]	; (b63ac <_GLOBAL__sub_I_ruid+0x308>)
   b6124:	48a2      	ldr	r0, [pc, #648]	; (b63b0 <_GLOBAL__sub_I_ruid+0x30c>)
   b6126:	f004 fb44 	bl	ba7b2 <_ZN6StringC1EPK19__FlashStringHelper>
   b612a:	49a2      	ldr	r1, [pc, #648]	; (b63b4 <_GLOBAL__sub_I_ruid+0x310>)
   b612c:	48a2      	ldr	r0, [pc, #648]	; (b63b8 <_GLOBAL__sub_I_ruid+0x314>)
   b612e:	f004 fb40 	bl	ba7b2 <_ZN6StringC1EPK19__FlashStringHelper>
   b6132:	49a2      	ldr	r1, [pc, #648]	; (b63bc <_GLOBAL__sub_I_ruid+0x318>)
   b6134:	48a2      	ldr	r0, [pc, #648]	; (b63c0 <_GLOBAL__sub_I_ruid+0x31c>)
   b6136:	f004 fb3c 	bl	ba7b2 <_ZN6StringC1EPK19__FlashStringHelper>
   b613a:	49a2      	ldr	r1, [pc, #648]	; (b63c4 <_GLOBAL__sub_I_ruid+0x320>)
   b613c:	48a2      	ldr	r0, [pc, #648]	; (b63c8 <_GLOBAL__sub_I_ruid+0x324>)
   b613e:	f004 fb38 	bl	ba7b2 <_ZN6StringC1EPK19__FlashStringHelper>
   b6142:	49a2      	ldr	r1, [pc, #648]	; (b63cc <_GLOBAL__sub_I_ruid+0x328>)
   b6144:	48a2      	ldr	r0, [pc, #648]	; (b63d0 <_GLOBAL__sub_I_ruid+0x32c>)
   b6146:	f004 fb34 	bl	ba7b2 <_ZN6StringC1EPK19__FlashStringHelper>
   b614a:	49a2      	ldr	r1, [pc, #648]	; (b63d4 <_GLOBAL__sub_I_ruid+0x330>)
   b614c:	48a2      	ldr	r0, [pc, #648]	; (b63d8 <_GLOBAL__sub_I_ruid+0x334>)
   b614e:	f004 fb30 	bl	ba7b2 <_ZN6StringC1EPK19__FlashStringHelper>
   b6152:	49a2      	ldr	r1, [pc, #648]	; (b63dc <_GLOBAL__sub_I_ruid+0x338>)
   b6154:	48a2      	ldr	r0, [pc, #648]	; (b63e0 <_GLOBAL__sub_I_ruid+0x33c>)
   b6156:	f004 fb2c 	bl	ba7b2 <_ZN6StringC1EPK19__FlashStringHelper>
   b615a:	49a2      	ldr	r1, [pc, #648]	; (b63e4 <_GLOBAL__sub_I_ruid+0x340>)
   b615c:	48a2      	ldr	r0, [pc, #648]	; (b63e8 <_GLOBAL__sub_I_ruid+0x344>)
   b615e:	f004 fb28 	bl	ba7b2 <_ZN6StringC1EPK19__FlashStringHelper>
   b6162:	497f      	ldr	r1, [pc, #508]	; (b6360 <_GLOBAL__sub_I_ruid+0x2bc>)
   b6164:	48a1      	ldr	r0, [pc, #644]	; (b63ec <_GLOBAL__sub_I_ruid+0x348>)
   b6166:	f004 fb24 	bl	ba7b2 <_ZN6StringC1EPK19__FlashStringHelper>
   b616a:	497d      	ldr	r1, [pc, #500]	; (b6360 <_GLOBAL__sub_I_ruid+0x2bc>)
   b616c:	48a0      	ldr	r0, [pc, #640]	; (b63f0 <_GLOBAL__sub_I_ruid+0x34c>)
   b616e:	f004 fb20 	bl	ba7b2 <_ZN6StringC1EPK19__FlashStringHelper>
                        "1#2","1#3#0","1#3#1","1#4","1#5" };
   b6172:	49a0      	ldr	r1, [pc, #640]	; (b63f4 <_GLOBAL__sub_I_ruid+0x350>)
   b6174:	48a0      	ldr	r0, [pc, #640]	; (b63f8 <_GLOBAL__sub_I_ruid+0x354>)
   b6176:	f004 fb1c 	bl	ba7b2 <_ZN6StringC1EPK19__FlashStringHelper>
   b617a:	49a0      	ldr	r1, [pc, #640]	; (b63fc <_GLOBAL__sub_I_ruid+0x358>)
   b617c:	48a0      	ldr	r0, [pc, #640]	; (b6400 <_GLOBAL__sub_I_ruid+0x35c>)
   b617e:	f004 fb18 	bl	ba7b2 <_ZN6StringC1EPK19__FlashStringHelper>
   b6182:	49a0      	ldr	r1, [pc, #640]	; (b6404 <_GLOBAL__sub_I_ruid+0x360>)
   b6184:	48a0      	ldr	r0, [pc, #640]	; (b6408 <_GLOBAL__sub_I_ruid+0x364>)
   b6186:	f004 fb14 	bl	ba7b2 <_ZN6StringC1EPK19__FlashStringHelper>
   b618a:	49a0      	ldr	r1, [pc, #640]	; (b640c <_GLOBAL__sub_I_ruid+0x368>)
   b618c:	48a0      	ldr	r0, [pc, #640]	; (b6410 <_GLOBAL__sub_I_ruid+0x36c>)
   b618e:	f004 fb10 	bl	ba7b2 <_ZN6StringC1EPK19__FlashStringHelper>
   b6192:	49a0      	ldr	r1, [pc, #640]	; (b6414 <_GLOBAL__sub_I_ruid+0x370>)
   b6194:	48a0      	ldr	r0, [pc, #640]	; (b6418 <_GLOBAL__sub_I_ruid+0x374>)
   b6196:	f004 fb0c 	bl	ba7b2 <_ZN6StringC1EPK19__FlashStringHelper>
   b619a:	49a0      	ldr	r1, [pc, #640]	; (b641c <_GLOBAL__sub_I_ruid+0x378>)
   b619c:	48a0      	ldr	r0, [pc, #640]	; (b6420 <_GLOBAL__sub_I_ruid+0x37c>)
   b619e:	f004 fb08 	bl	ba7b2 <_ZN6StringC1EPK19__FlashStringHelper>
   b61a2:	49a0      	ldr	r1, [pc, #640]	; (b6424 <_GLOBAL__sub_I_ruid+0x380>)
   b61a4:	48a0      	ldr	r0, [pc, #640]	; (b6428 <_GLOBAL__sub_I_ruid+0x384>)
   b61a6:	f004 fb04 	bl	ba7b2 <_ZN6StringC1EPK19__FlashStringHelper>
   b61aa:	49a0      	ldr	r1, [pc, #640]	; (b642c <_GLOBAL__sub_I_ruid+0x388>)
   b61ac:	48a0      	ldr	r0, [pc, #640]	; (b6430 <_GLOBAL__sub_I_ruid+0x38c>)
   b61ae:	f004 fb00 	bl	ba7b2 <_ZN6StringC1EPK19__FlashStringHelper>
   b61b2:	49a0      	ldr	r1, [pc, #640]	; (b6434 <_GLOBAL__sub_I_ruid+0x390>)
   b61b4:	48a0      	ldr	r0, [pc, #640]	; (b6438 <_GLOBAL__sub_I_ruid+0x394>)
   b61b6:	f004 fafc 	bl	ba7b2 <_ZN6StringC1EPK19__FlashStringHelper>
   b61ba:	49a0      	ldr	r1, [pc, #640]	; (b643c <_GLOBAL__sub_I_ruid+0x398>)
   b61bc:	48a0      	ldr	r0, [pc, #640]	; (b6440 <_GLOBAL__sub_I_ruid+0x39c>)
   b61be:	f004 faf8 	bl	ba7b2 <_ZN6StringC1EPK19__FlashStringHelper>
   b61c2:	49a0      	ldr	r1, [pc, #640]	; (b6444 <_GLOBAL__sub_I_ruid+0x3a0>)
   b61c4:	48a0      	ldr	r0, [pc, #640]	; (b6448 <_GLOBAL__sub_I_ruid+0x3a4>)
   b61c6:	f004 faf4 	bl	ba7b2 <_ZN6StringC1EPK19__FlashStringHelper>
   b61ca:	49a0      	ldr	r1, [pc, #640]	; (b644c <_GLOBAL__sub_I_ruid+0x3a8>)
   b61cc:	48a0      	ldr	r0, [pc, #640]	; (b6450 <_GLOBAL__sub_I_ruid+0x3ac>)
   b61ce:	f004 faf0 	bl	ba7b2 <_ZN6StringC1EPK19__FlashStringHelper>
   b61d2:	49a0      	ldr	r1, [pc, #640]	; (b6454 <_GLOBAL__sub_I_ruid+0x3b0>)
   b61d4:	48a0      	ldr	r0, [pc, #640]	; (b6458 <_GLOBAL__sub_I_ruid+0x3b4>)
   b61d6:	f004 faec 	bl	ba7b2 <_ZN6StringC1EPK19__FlashStringHelper>
   b61da:	49a0      	ldr	r1, [pc, #640]	; (b645c <_GLOBAL__sub_I_ruid+0x3b8>)
   b61dc:	48a0      	ldr	r0, [pc, #640]	; (b6460 <_GLOBAL__sub_I_ruid+0x3bc>)
   b61de:	f004 fae8 	bl	ba7b2 <_ZN6StringC1EPK19__FlashStringHelper>
   b61e2:	49a0      	ldr	r1, [pc, #640]	; (b6464 <_GLOBAL__sub_I_ruid+0x3c0>)
   b61e4:	48a0      	ldr	r0, [pc, #640]	; (b6468 <_GLOBAL__sub_I_ruid+0x3c4>)
   b61e6:	f004 fae4 	bl	ba7b2 <_ZN6StringC1EPK19__FlashStringHelper>
   b61ea:	49a0      	ldr	r1, [pc, #640]	; (b646c <_GLOBAL__sub_I_ruid+0x3c8>)
   b61ec:	48a0      	ldr	r0, [pc, #640]	; (b6470 <_GLOBAL__sub_I_ruid+0x3cc>)
   b61ee:	f004 fae0 	bl	ba7b2 <_ZN6StringC1EPK19__FlashStringHelper>
   b61f2:	49a0      	ldr	r1, [pc, #640]	; (b6474 <_GLOBAL__sub_I_ruid+0x3d0>)
   b61f4:	48a0      	ldr	r0, [pc, #640]	; (b6478 <_GLOBAL__sub_I_ruid+0x3d4>)
   b61f6:	f004 fadc 	bl	ba7b2 <_ZN6StringC1EPK19__FlashStringHelper>
   b61fa:	49a0      	ldr	r1, [pc, #640]	; (b647c <_GLOBAL__sub_I_ruid+0x3d8>)
   b61fc:	48a0      	ldr	r0, [pc, #640]	; (b6480 <_GLOBAL__sub_I_ruid+0x3dc>)
   b61fe:	f004 fad8 	bl	ba7b2 <_ZN6StringC1EPK19__FlashStringHelper>
   b6202:	49a0      	ldr	r1, [pc, #640]	; (b6484 <_GLOBAL__sub_I_ruid+0x3e0>)
   b6204:	48a0      	ldr	r0, [pc, #640]	; (b6488 <_GLOBAL__sub_I_ruid+0x3e4>)
   b6206:	f004 fad4 	bl	ba7b2 <_ZN6StringC1EPK19__FlashStringHelper>
   b620a:	49a0      	ldr	r1, [pc, #640]	; (b648c <_GLOBAL__sub_I_ruid+0x3e8>)
   b620c:	48a0      	ldr	r0, [pc, #640]	; (b6490 <_GLOBAL__sub_I_ruid+0x3ec>)
   b620e:	f004 fad0 	bl	ba7b2 <_ZN6StringC1EPK19__FlashStringHelper>
   b6212:	49a0      	ldr	r1, [pc, #640]	; (b6494 <_GLOBAL__sub_I_ruid+0x3f0>)
   b6214:	48a0      	ldr	r0, [pc, #640]	; (b6498 <_GLOBAL__sub_I_ruid+0x3f4>)
   b6216:	f004 facc 	bl	ba7b2 <_ZN6StringC1EPK19__FlashStringHelper>
   b621a:	49a0      	ldr	r1, [pc, #640]	; (b649c <_GLOBAL__sub_I_ruid+0x3f8>)
   b621c:	48a0      	ldr	r0, [pc, #640]	; (b64a0 <_GLOBAL__sub_I_ruid+0x3fc>)
   b621e:	f004 fac8 	bl	ba7b2 <_ZN6StringC1EPK19__FlashStringHelper>
   b6222:	49a0      	ldr	r1, [pc, #640]	; (b64a4 <_GLOBAL__sub_I_ruid+0x400>)
   b6224:	48a0      	ldr	r0, [pc, #640]	; (b64a8 <_GLOBAL__sub_I_ruid+0x404>)
   b6226:	f004 fac4 	bl	ba7b2 <_ZN6StringC1EPK19__FlashStringHelper>
   b622a:	49a0      	ldr	r1, [pc, #640]	; (b64ac <_GLOBAL__sub_I_ruid+0x408>)
   b622c:	48a0      	ldr	r0, [pc, #640]	; (b64b0 <_GLOBAL__sub_I_ruid+0x40c>)
   b622e:	f004 fac0 	bl	ba7b2 <_ZN6StringC1EPK19__FlashStringHelper>
   b6232:	49a0      	ldr	r1, [pc, #640]	; (b64b4 <_GLOBAL__sub_I_ruid+0x410>)
   b6234:	48a0      	ldr	r0, [pc, #640]	; (b64b8 <_GLOBAL__sub_I_ruid+0x414>)
   b6236:	f004 fabc 	bl	ba7b2 <_ZN6StringC1EPK19__FlashStringHelper>
   b623a:	49a0      	ldr	r1, [pc, #640]	; (b64bc <_GLOBAL__sub_I_ruid+0x418>)
   b623c:	48a0      	ldr	r0, [pc, #640]	; (b64c0 <_GLOBAL__sub_I_ruid+0x41c>)
   b623e:	f004 fab8 	bl	ba7b2 <_ZN6StringC1EPK19__FlashStringHelper>
   b6242:	49a0      	ldr	r1, [pc, #640]	; (b64c4 <_GLOBAL__sub_I_ruid+0x420>)
   b6244:	48a0      	ldr	r0, [pc, #640]	; (b64c8 <_GLOBAL__sub_I_ruid+0x424>)
   b6246:	f004 fab4 	bl	ba7b2 <_ZN6StringC1EPK19__FlashStringHelper>
   b624a:	49a0      	ldr	r1, [pc, #640]	; (b64cc <_GLOBAL__sub_I_ruid+0x428>)
   b624c:	48a0      	ldr	r0, [pc, #640]	; (b64d0 <_GLOBAL__sub_I_ruid+0x42c>)
   b624e:	f004 fab0 	bl	ba7b2 <_ZN6StringC1EPK19__FlashStringHelper>
                        "2#1#0","2#2#0","2#2#1","2#2#2","2#2#3","2#2#4","2#2#5","2#2#6","2#2#7","2#2#8"};
   b6252:	49a0      	ldr	r1, [pc, #640]	; (b64d4 <_GLOBAL__sub_I_ruid+0x430>)
   b6254:	48a0      	ldr	r0, [pc, #640]	; (b64d8 <_GLOBAL__sub_I_ruid+0x434>)
   b6256:	f004 faac 	bl	ba7b2 <_ZN6StringC1EPK19__FlashStringHelper>
   b625a:	49a0      	ldr	r1, [pc, #640]	; (b64dc <_GLOBAL__sub_I_ruid+0x438>)
   b625c:	48a0      	ldr	r0, [pc, #640]	; (b64e0 <_GLOBAL__sub_I_ruid+0x43c>)
   b625e:	f004 faa8 	bl	ba7b2 <_ZN6StringC1EPK19__FlashStringHelper>
   b6262:	49a0      	ldr	r1, [pc, #640]	; (b64e4 <_GLOBAL__sub_I_ruid+0x440>)
   b6264:	48a0      	ldr	r0, [pc, #640]	; (b64e8 <_GLOBAL__sub_I_ruid+0x444>)
   b6266:	f004 faa4 	bl	ba7b2 <_ZN6StringC1EPK19__FlashStringHelper>
   b626a:	49a0      	ldr	r1, [pc, #640]	; (b64ec <_GLOBAL__sub_I_ruid+0x448>)
   b626c:	48a0      	ldr	r0, [pc, #640]	; (b64f0 <_GLOBAL__sub_I_ruid+0x44c>)
   b626e:	f004 faa0 	bl	ba7b2 <_ZN6StringC1EPK19__FlashStringHelper>
   b6272:	49a0      	ldr	r1, [pc, #640]	; (b64f4 <_GLOBAL__sub_I_ruid+0x450>)
   b6274:	48a0      	ldr	r0, [pc, #640]	; (b64f8 <_GLOBAL__sub_I_ruid+0x454>)
   b6276:	f004 fa9c 	bl	ba7b2 <_ZN6StringC1EPK19__FlashStringHelper>
   b627a:	49a0      	ldr	r1, [pc, #640]	; (b64fc <_GLOBAL__sub_I_ruid+0x458>)
   b627c:	48a0      	ldr	r0, [pc, #640]	; (b6500 <_GLOBAL__sub_I_ruid+0x45c>)
   b627e:	f004 fa98 	bl	ba7b2 <_ZN6StringC1EPK19__FlashStringHelper>
   b6282:	49a0      	ldr	r1, [pc, #640]	; (b6504 <_GLOBAL__sub_I_ruid+0x460>)
   b6284:	48a0      	ldr	r0, [pc, #640]	; (b6508 <_GLOBAL__sub_I_ruid+0x464>)
   b6286:	f004 fa94 	bl	ba7b2 <_ZN6StringC1EPK19__FlashStringHelper>
   b628a:	49a0      	ldr	r1, [pc, #640]	; (b650c <_GLOBAL__sub_I_ruid+0x468>)
   b628c:	48a0      	ldr	r0, [pc, #640]	; (b6510 <_GLOBAL__sub_I_ruid+0x46c>)
   b628e:	f004 fa90 	bl	ba7b2 <_ZN6StringC1EPK19__FlashStringHelper>
   b6292:	49a0      	ldr	r1, [pc, #640]	; (b6514 <_GLOBAL__sub_I_ruid+0x470>)
   b6294:	48a0      	ldr	r0, [pc, #640]	; (b6518 <_GLOBAL__sub_I_ruid+0x474>)
   b6296:	f004 fa8c 	bl	ba7b2 <_ZN6StringC1EPK19__FlashStringHelper>
   b629a:	49a0      	ldr	r1, [pc, #640]	; (b651c <_GLOBAL__sub_I_ruid+0x478>)
   b629c:	48a0      	ldr	r0, [pc, #640]	; (b6520 <_GLOBAL__sub_I_ruid+0x47c>)
   b629e:	f004 fa88 	bl	ba7b2 <_ZN6StringC1EPK19__FlashStringHelper>
   b62a2:	49a0      	ldr	r1, [pc, #640]	; (b6524 <_GLOBAL__sub_I_ruid+0x480>)
   b62a4:	48a0      	ldr	r0, [pc, #640]	; (b6528 <_GLOBAL__sub_I_ruid+0x484>)
   b62a6:	f004 fa84 	bl	ba7b2 <_ZN6StringC1EPK19__FlashStringHelper>
   b62aa:	49a0      	ldr	r1, [pc, #640]	; (b652c <_GLOBAL__sub_I_ruid+0x488>)
   b62ac:	48a0      	ldr	r0, [pc, #640]	; (b6530 <_GLOBAL__sub_I_ruid+0x48c>)
   b62ae:	f004 fa80 	bl	ba7b2 <_ZN6StringC1EPK19__FlashStringHelper>
   b62b2:	49a0      	ldr	r1, [pc, #640]	; (b6534 <_GLOBAL__sub_I_ruid+0x490>)
   b62b4:	48a0      	ldr	r0, [pc, #640]	; (b6538 <_GLOBAL__sub_I_ruid+0x494>)
   b62b6:	f004 fa7c 	bl	ba7b2 <_ZN6StringC1EPK19__FlashStringHelper>
   b62ba:	49a0      	ldr	r1, [pc, #640]	; (b653c <_GLOBAL__sub_I_ruid+0x498>)
   b62bc:	48a0      	ldr	r0, [pc, #640]	; (b6540 <_GLOBAL__sub_I_ruid+0x49c>)
   b62be:	f004 fa78 	bl	ba7b2 <_ZN6StringC1EPK19__FlashStringHelper>
   b62c2:	49a0      	ldr	r1, [pc, #640]	; (b6544 <_GLOBAL__sub_I_ruid+0x4a0>)
   b62c4:	48a0      	ldr	r0, [pc, #640]	; (b6548 <_GLOBAL__sub_I_ruid+0x4a4>)
   b62c6:	f004 fa74 	bl	ba7b2 <_ZN6StringC1EPK19__FlashStringHelper>
   b62ca:	49a0      	ldr	r1, [pc, #640]	; (b654c <_GLOBAL__sub_I_ruid+0x4a8>)
   b62cc:	48a0      	ldr	r0, [pc, #640]	; (b6550 <_GLOBAL__sub_I_ruid+0x4ac>)
   b62ce:	f004 fa70 	bl	ba7b2 <_ZN6StringC1EPK19__FlashStringHelper>
   b62d2:	49a0      	ldr	r1, [pc, #640]	; (b6554 <_GLOBAL__sub_I_ruid+0x4b0>)
   b62d4:	48a0      	ldr	r0, [pc, #640]	; (b6558 <_GLOBAL__sub_I_ruid+0x4b4>)
   b62d6:	f004 fa6c 	bl	ba7b2 <_ZN6StringC1EPK19__FlashStringHelper>
   b62da:	49a0      	ldr	r1, [pc, #640]	; (b655c <_GLOBAL__sub_I_ruid+0x4b8>)
   b62dc:	48a0      	ldr	r0, [pc, #640]	; (b6560 <_GLOBAL__sub_I_ruid+0x4bc>)
   b62de:	f004 fa68 	bl	ba7b2 <_ZN6StringC1EPK19__FlashStringHelper>
   b62e2:	49a0      	ldr	r1, [pc, #640]	; (b6564 <_GLOBAL__sub_I_ruid+0x4c0>)
   b62e4:	48a0      	ldr	r0, [pc, #640]	; (b6568 <_GLOBAL__sub_I_ruid+0x4c4>)
   b62e6:	f004 fa64 	bl	ba7b2 <_ZN6StringC1EPK19__FlashStringHelper>
   b62ea:	49a0      	ldr	r1, [pc, #640]	; (b656c <_GLOBAL__sub_I_ruid+0x4c8>)
   b62ec:	48a0      	ldr	r0, [pc, #640]	; (b6570 <_GLOBAL__sub_I_ruid+0x4cc>)
   b62ee:	f004 fa60 	bl	ba7b2 <_ZN6StringC1EPK19__FlashStringHelper>
   b62f2:	49a0      	ldr	r1, [pc, #640]	; (b6574 <_GLOBAL__sub_I_ruid+0x4d0>)
   b62f4:	48a0      	ldr	r0, [pc, #640]	; (b6578 <_GLOBAL__sub_I_ruid+0x4d4>)
   b62f6:	f004 fa5c 	bl	ba7b2 <_ZN6StringC1EPK19__FlashStringHelper>
   b62fa:	49a0      	ldr	r1, [pc, #640]	; (b657c <_GLOBAL__sub_I_ruid+0x4d8>)
   b62fc:	48a0      	ldr	r0, [pc, #640]	; (b6580 <_GLOBAL__sub_I_ruid+0x4dc>)
   b62fe:	f004 fa58 	bl	ba7b2 <_ZN6StringC1EPK19__FlashStringHelper>
   b6302:	49a0      	ldr	r1, [pc, #640]	; (b6584 <_GLOBAL__sub_I_ruid+0x4e0>)
   b6304:	48a0      	ldr	r0, [pc, #640]	; (b6588 <_GLOBAL__sub_I_ruid+0x4e4>)
   b6306:	f004 fa54 	bl	ba7b2 <_ZN6StringC1EPK19__FlashStringHelper>
   b630a:	49a0      	ldr	r1, [pc, #640]	; (b658c <_GLOBAL__sub_I_ruid+0x4e8>)
   b630c:	48a0      	ldr	r0, [pc, #640]	; (b6590 <_GLOBAL__sub_I_ruid+0x4ec>)
   b630e:	f004 fa50 	bl	ba7b2 <_ZN6StringC1EPK19__FlashStringHelper>
   b6312:	49a0      	ldr	r1, [pc, #640]	; (b6594 <_GLOBAL__sub_I_ruid+0x4f0>)
   b6314:	48a0      	ldr	r0, [pc, #640]	; (b6598 <_GLOBAL__sub_I_ruid+0x4f4>)
   b6316:	f004 fa4c 	bl	ba7b2 <_ZN6StringC1EPK19__FlashStringHelper>
   b631a:	49a0      	ldr	r1, [pc, #640]	; (b659c <_GLOBAL__sub_I_ruid+0x4f8>)
   b631c:	48a0      	ldr	r0, [pc, #640]	; (b65a0 <_GLOBAL__sub_I_ruid+0x4fc>)
   b631e:	f004 fa48 	bl	ba7b2 <_ZN6StringC1EPK19__FlashStringHelper>
   b6322:	49a0      	ldr	r1, [pc, #640]	; (b65a4 <_GLOBAL__sub_I_ruid+0x500>)
   b6324:	48a0      	ldr	r0, [pc, #640]	; (b65a8 <_GLOBAL__sub_I_ruid+0x504>)
   b6326:	f004 fa44 	bl	ba7b2 <_ZN6StringC1EPK19__FlashStringHelper>
   b632a:	49a0      	ldr	r1, [pc, #640]	; (b65ac <_GLOBAL__sub_I_ruid+0x508>)
   b632c:	48a0      	ldr	r0, [pc, #640]	; (b65b0 <_GLOBAL__sub_I_ruid+0x50c>)
   b632e:	f004 fa40 	bl	ba7b2 <_ZN6StringC1EPK19__FlashStringHelper>
   b6332:	49a0      	ldr	r1, [pc, #640]	; (b65b4 <_GLOBAL__sub_I_ruid+0x510>)
   b6334:	48a0      	ldr	r0, [pc, #640]	; (b65b8 <_GLOBAL__sub_I_ruid+0x514>)
   b6336:	f004 fa3c 	bl	ba7b2 <_ZN6StringC1EPK19__FlashStringHelper>
   b633a:	49a0      	ldr	r1, [pc, #640]	; (b65bc <_GLOBAL__sub_I_ruid+0x518>)
   b633c:	48a0      	ldr	r0, [pc, #640]	; (b65c0 <_GLOBAL__sub_I_ruid+0x51c>)
   b633e:	f004 fa38 	bl	ba7b2 <_ZN6StringC1EPK19__FlashStringHelper>
   b6342:	49a0      	ldr	r1, [pc, #640]	; (b65c4 <_GLOBAL__sub_I_ruid+0x520>)
   b6344:	48a0      	ldr	r0, [pc, #640]	; (b65c8 <_GLOBAL__sub_I_ruid+0x524>)
   b6346:	f004 fa34 	bl	ba7b2 <_ZN6StringC1EPK19__FlashStringHelper>
   b634a:	49a0      	ldr	r1, [pc, #640]	; (b65cc <_GLOBAL__sub_I_ruid+0x528>)
   b634c:	48a0      	ldr	r0, [pc, #640]	; (b65d0 <_GLOBAL__sub_I_ruid+0x52c>)
   b634e:	f004 fa30 	bl	ba7b2 <_ZN6StringC1EPK19__FlashStringHelper>
   b6352:	49a0      	ldr	r1, [pc, #640]	; (b65d4 <_GLOBAL__sub_I_ruid+0x530>)
   b6354:	e140      	b.n	b65d8 <_GLOBAL__sub_I_ruid+0x534>
   b6356:	bf00      	nop
   b6358:	2003d6ec 	.word	0x2003d6ec
   b635c:	2003dc8c 	.word	0x2003dc8c
   b6360:	000bb886 	.word	0x000bb886
   b6364:	2003cd28 	.word	0x2003cd28
   b6368:	2003d34c 	.word	0x2003d34c
   b636c:	2003c750 	.word	0x2003c750
   b6370:	000bb894 	.word	0x000bb894
   b6374:	2003d39c 	.word	0x2003d39c
   b6378:	2003d3ac 	.word	0x2003d3ac
   b637c:	000bb902 	.word	0x000bb902
   b6380:	2003e37c 	.word	0x2003e37c
   b6384:	000bb916 	.word	0x000bb916
   b6388:	2003e38c 	.word	0x2003e38c
   b638c:	000bba46 	.word	0x000bba46
   b6390:	2003e39c 	.word	0x2003e39c
   b6394:	000bb896 	.word	0x000bb896
   b6398:	2003e3ac 	.word	0x2003e3ac
   b639c:	000bb89c 	.word	0x000bb89c
   b63a0:	2003e3bc 	.word	0x2003e3bc
   b63a4:	000bb8a3 	.word	0x000bb8a3
   b63a8:	2003e3cc 	.word	0x2003e3cc
   b63ac:	000bb8aa 	.word	0x000bb8aa
   b63b0:	2003e3dc 	.word	0x2003e3dc
   b63b4:	000bb8b2 	.word	0x000bb8b2
   b63b8:	2003e3ec 	.word	0x2003e3ec
   b63bc:	000bb8ba 	.word	0x000bb8ba
   b63c0:	2003e3fc 	.word	0x2003e3fc
   b63c4:	000bb8c2 	.word	0x000bb8c2
   b63c8:	2003e40c 	.word	0x2003e40c
   b63cc:	000bb8ca 	.word	0x000bb8ca
   b63d0:	2003e41c 	.word	0x2003e41c
   b63d4:	000bb8d2 	.word	0x000bb8d2
   b63d8:	2003e42c 	.word	0x2003e42c
   b63dc:	000bb8da 	.word	0x000bb8da
   b63e0:	2003e43c 	.word	0x2003e43c
   b63e4:	000bb8e2 	.word	0x000bb8e2
   b63e8:	2003e44c 	.word	0x2003e44c
   b63ec:	2003e45c 	.word	0x2003e45c
   b63f0:	2003e46c 	.word	0x2003e46c
   b63f4:	000bb8ea 	.word	0x000bb8ea
   b63f8:	2003e1bc 	.word	0x2003e1bc
   b63fc:	000bb8f4 	.word	0x000bb8f4
   b6400:	2003e1cc 	.word	0x2003e1cc
   b6404:	000bb8fe 	.word	0x000bb8fe
   b6408:	2003e1dc 	.word	0x2003e1dc
   b640c:	000bb908 	.word	0x000bb908
   b6410:	2003e1ec 	.word	0x2003e1ec
   b6414:	000bb912 	.word	0x000bb912
   b6418:	2003e1fc 	.word	0x2003e1fc
   b641c:	000bb91c 	.word	0x000bb91c
   b6420:	2003e20c 	.word	0x2003e20c
   b6424:	000bb926 	.word	0x000bb926
   b6428:	2003e21c 	.word	0x2003e21c
   b642c:	000bb930 	.word	0x000bb930
   b6430:	2003e22c 	.word	0x2003e22c
   b6434:	000bb93a 	.word	0x000bb93a
   b6438:	2003e23c 	.word	0x2003e23c
   b643c:	000bb944 	.word	0x000bb944
   b6440:	2003e24c 	.word	0x2003e24c
   b6444:	000bb94e 	.word	0x000bb94e
   b6448:	2003e25c 	.word	0x2003e25c
   b644c:	000bb958 	.word	0x000bb958
   b6450:	2003e26c 	.word	0x2003e26c
   b6454:	000bb962 	.word	0x000bb962
   b6458:	2003e27c 	.word	0x2003e27c
   b645c:	000bb96c 	.word	0x000bb96c
   b6460:	2003e28c 	.word	0x2003e28c
   b6464:	000bb976 	.word	0x000bb976
   b6468:	2003e29c 	.word	0x2003e29c
   b646c:	000bb980 	.word	0x000bb980
   b6470:	2003e2ac 	.word	0x2003e2ac
   b6474:	000bb98a 	.word	0x000bb98a
   b6478:	2003e2bc 	.word	0x2003e2bc
   b647c:	000bb994 	.word	0x000bb994
   b6480:	2003e2cc 	.word	0x2003e2cc
   b6484:	000bb99e 	.word	0x000bb99e
   b6488:	2003e2dc 	.word	0x2003e2dc
   b648c:	000bb9a8 	.word	0x000bb9a8
   b6490:	2003e2ec 	.word	0x2003e2ec
   b6494:	000bb9b2 	.word	0x000bb9b2
   b6498:	2003e2fc 	.word	0x2003e2fc
   b649c:	000bb9bc 	.word	0x000bb9bc
   b64a0:	2003e30c 	.word	0x2003e30c
   b64a4:	000bb9c6 	.word	0x000bb9c6
   b64a8:	2003e31c 	.word	0x2003e31c
   b64ac:	000bb8ce 	.word	0x000bb8ce
   b64b0:	2003e32c 	.word	0x2003e32c
   b64b4:	000bb9d0 	.word	0x000bb9d0
   b64b8:	2003e33c 	.word	0x2003e33c
   b64bc:	000bb9d6 	.word	0x000bb9d6
   b64c0:	2003e34c 	.word	0x2003e34c
   b64c4:	000bb8de 	.word	0x000bb8de
   b64c8:	2003e35c 	.word	0x2003e35c
   b64cc:	000bb8e6 	.word	0x000bb8e6
   b64d0:	2003e36c 	.word	0x2003e36c
   b64d4:	000bb9dc 	.word	0x000bb9dc
   b64d8:	2003e47c 	.word	0x2003e47c
   b64dc:	000bb9e4 	.word	0x000bb9e4
   b64e0:	2003e48c 	.word	0x2003e48c
   b64e4:	000bb9ec 	.word	0x000bb9ec
   b64e8:	2003e49c 	.word	0x2003e49c
   b64ec:	000bb9f4 	.word	0x000bb9f4
   b64f0:	2003e4ac 	.word	0x2003e4ac
   b64f4:	000bb9fc 	.word	0x000bb9fc
   b64f8:	2003e4bc 	.word	0x2003e4bc
   b64fc:	000bba04 	.word	0x000bba04
   b6500:	2003e4cc 	.word	0x2003e4cc
   b6504:	000bba0c 	.word	0x000bba0c
   b6508:	2003e4dc 	.word	0x2003e4dc
   b650c:	000bba14 	.word	0x000bba14
   b6510:	2003e4ec 	.word	0x2003e4ec
   b6514:	000bba1c 	.word	0x000bba1c
   b6518:	2003e4fc 	.word	0x2003e4fc
   b651c:	000bba24 	.word	0x000bba24
   b6520:	2003e50c 	.word	0x2003e50c
   b6524:	000bba2c 	.word	0x000bba2c
   b6528:	2003e51c 	.word	0x2003e51c
   b652c:	000bba34 	.word	0x000bba34
   b6530:	2003e52c 	.word	0x2003e52c
   b6534:	000bba3c 	.word	0x000bba3c
   b6538:	2003e53c 	.word	0x2003e53c
   b653c:	000bba44 	.word	0x000bba44
   b6540:	2003e54c 	.word	0x2003e54c
   b6544:	000bba4c 	.word	0x000bba4c
   b6548:	2003e55c 	.word	0x2003e55c
   b654c:	000bba54 	.word	0x000bba54
   b6550:	2003e56c 	.word	0x2003e56c
   b6554:	000bba5c 	.word	0x000bba5c
   b6558:	2003e57c 	.word	0x2003e57c
   b655c:	000bba64 	.word	0x000bba64
   b6560:	2003e58c 	.word	0x2003e58c
   b6564:	000bba6c 	.word	0x000bba6c
   b6568:	2003e59c 	.word	0x2003e59c
   b656c:	000bba74 	.word	0x000bba74
   b6570:	2003e5ac 	.word	0x2003e5ac
   b6574:	000bba7c 	.word	0x000bba7c
   b6578:	2003e5bc 	.word	0x2003e5bc
   b657c:	000bba84 	.word	0x000bba84
   b6580:	2003e5cc 	.word	0x2003e5cc
   b6584:	000bba8c 	.word	0x000bba8c
   b6588:	2003e5dc 	.word	0x2003e5dc
   b658c:	000bba94 	.word	0x000bba94
   b6590:	2003e5ec 	.word	0x2003e5ec
   b6594:	000bba9c 	.word	0x000bba9c
   b6598:	2003e5fc 	.word	0x2003e5fc
   b659c:	000bbaa2 	.word	0x000bbaa2
   b65a0:	2003e60c 	.word	0x2003e60c
   b65a4:	000bbaa8 	.word	0x000bbaa8
   b65a8:	2003e61c 	.word	0x2003e61c
   b65ac:	000bbaae 	.word	0x000bbaae
   b65b0:	2003e62c 	.word	0x2003e62c
   b65b4:	000bbab4 	.word	0x000bbab4
   b65b8:	2003e63c 	.word	0x2003e63c
   b65bc:	000bbaba 	.word	0x000bbaba
   b65c0:	2003e64c 	.word	0x2003e64c
   b65c4:	000bbac0 	.word	0x000bbac0
   b65c8:	2003e65c 	.word	0x2003e65c
   b65cc:	000bbac6 	.word	0x000bbac6
   b65d0:	2003e66c 	.word	0x2003e66c
   b65d4:	000bbacc 	.word	0x000bbacc
   b65d8:	4831      	ldr	r0, [pc, #196]	; (b66a0 <_GLOBAL__sub_I_ruid+0x5fc>)
   b65da:	f004 f8ea 	bl	ba7b2 <_ZN6StringC1EPK19__FlashStringHelper>
   b65de:	4931      	ldr	r1, [pc, #196]	; (b66a4 <_GLOBAL__sub_I_ruid+0x600>)
   b65e0:	4831      	ldr	r0, [pc, #196]	; (b66a8 <_GLOBAL__sub_I_ruid+0x604>)
   b65e2:	f004 f8e6 	bl	ba7b2 <_ZN6StringC1EPK19__FlashStringHelper>
   b65e6:	4931      	ldr	r1, [pc, #196]	; (b66ac <_GLOBAL__sub_I_ruid+0x608>)
   b65e8:	4831      	ldr	r0, [pc, #196]	; (b66b0 <_GLOBAL__sub_I_ruid+0x60c>)
   b65ea:	f004 f8e2 	bl	ba7b2 <_ZN6StringC1EPK19__FlashStringHelper>
String tarjetas_comunes[8] = {"6#0#0","6#0#1","6#0#2","6#1#0","6#2#0","6#2#1","6#2#2"};
   b65ee:	4931      	ldr	r1, [pc, #196]	; (b66b4 <_GLOBAL__sub_I_ruid+0x610>)
   b65f0:	4831      	ldr	r0, [pc, #196]	; (b66b8 <_GLOBAL__sub_I_ruid+0x614>)
   b65f2:	f004 f8de 	bl	ba7b2 <_ZN6StringC1EPK19__FlashStringHelper>
   b65f6:	4931      	ldr	r1, [pc, #196]	; (b66bc <_GLOBAL__sub_I_ruid+0x618>)
   b65f8:	4831      	ldr	r0, [pc, #196]	; (b66c0 <_GLOBAL__sub_I_ruid+0x61c>)
   b65fa:	f004 f8da 	bl	ba7b2 <_ZN6StringC1EPK19__FlashStringHelper>
   b65fe:	4931      	ldr	r1, [pc, #196]	; (b66c4 <_GLOBAL__sub_I_ruid+0x620>)
   b6600:	4831      	ldr	r0, [pc, #196]	; (b66c8 <_GLOBAL__sub_I_ruid+0x624>)
   b6602:	f004 f8d6 	bl	ba7b2 <_ZN6StringC1EPK19__FlashStringHelper>
   b6606:	4931      	ldr	r1, [pc, #196]	; (b66cc <_GLOBAL__sub_I_ruid+0x628>)
   b6608:	4831      	ldr	r0, [pc, #196]	; (b66d0 <_GLOBAL__sub_I_ruid+0x62c>)
   b660a:	f004 f8d2 	bl	ba7b2 <_ZN6StringC1EPK19__FlashStringHelper>
   b660e:	4931      	ldr	r1, [pc, #196]	; (b66d4 <_GLOBAL__sub_I_ruid+0x630>)
   b6610:	4831      	ldr	r0, [pc, #196]	; (b66d8 <_GLOBAL__sub_I_ruid+0x634>)
   b6612:	f004 f8ce 	bl	ba7b2 <_ZN6StringC1EPK19__FlashStringHelper>
   b6616:	4931      	ldr	r1, [pc, #196]	; (b66dc <_GLOBAL__sub_I_ruid+0x638>)
   b6618:	4831      	ldr	r0, [pc, #196]	; (b66e0 <_GLOBAL__sub_I_ruid+0x63c>)
   b661a:	f004 f8ca 	bl	ba7b2 <_ZN6StringC1EPK19__FlashStringHelper>
   b661e:	4931      	ldr	r1, [pc, #196]	; (b66e4 <_GLOBAL__sub_I_ruid+0x640>)
   b6620:	4831      	ldr	r0, [pc, #196]	; (b66e8 <_GLOBAL__sub_I_ruid+0x644>)
   b6622:	f004 f8c6 	bl	ba7b2 <_ZN6StringC1EPK19__FlashStringHelper>
   b6626:	4921      	ldr	r1, [pc, #132]	; (b66ac <_GLOBAL__sub_I_ruid+0x608>)
   b6628:	4830      	ldr	r0, [pc, #192]	; (b66ec <_GLOBAL__sub_I_ruid+0x648>)
   b662a:	f004 f8c2 	bl	ba7b2 <_ZN6StringC1EPK19__FlashStringHelper>
String tarjetas[80] = {"3#0#0#12#0","3#0#1#6#0", "1#0#1#9#3", "1#0#0#12#1", "1#1#0#13#1"};
   b662e:	4930      	ldr	r1, [pc, #192]	; (b66f0 <_GLOBAL__sub_I_ruid+0x64c>)
   b6630:	4830      	ldr	r0, [pc, #192]	; (b66f4 <_GLOBAL__sub_I_ruid+0x650>)
   b6632:	f004 f8be 	bl	ba7b2 <_ZN6StringC1EPK19__FlashStringHelper>
   b6636:	4930      	ldr	r1, [pc, #192]	; (b66f8 <_GLOBAL__sub_I_ruid+0x654>)
   b6638:	4830      	ldr	r0, [pc, #192]	; (b66fc <_GLOBAL__sub_I_ruid+0x658>)
   b663a:	f004 f8ba 	bl	ba7b2 <_ZN6StringC1EPK19__FlashStringHelper>
   b663e:	4930      	ldr	r1, [pc, #192]	; (b6700 <_GLOBAL__sub_I_ruid+0x65c>)
   b6640:	4830      	ldr	r0, [pc, #192]	; (b6704 <_GLOBAL__sub_I_ruid+0x660>)
   b6642:	f004 f8b6 	bl	ba7b2 <_ZN6StringC1EPK19__FlashStringHelper>
   b6646:	4930      	ldr	r1, [pc, #192]	; (b6708 <_GLOBAL__sub_I_ruid+0x664>)
   b6648:	4830      	ldr	r0, [pc, #192]	; (b670c <_GLOBAL__sub_I_ruid+0x668>)
   b664a:	f004 f8b2 	bl	ba7b2 <_ZN6StringC1EPK19__FlashStringHelper>
   b664e:	4930      	ldr	r1, [pc, #192]	; (b6710 <_GLOBAL__sub_I_ruid+0x66c>)
   b6650:	4830      	ldr	r0, [pc, #192]	; (b6714 <_GLOBAL__sub_I_ruid+0x670>)
   b6652:	f004 f8ae 	bl	ba7b2 <_ZN6StringC1EPK19__FlashStringHelper>
   b6656:	1928      	adds	r0, r5, r4
   b6658:	4631      	mov	r1, r6
   b665a:	3410      	adds	r4, #16
   b665c:	f004 f8a9 	bl	ba7b2 <_ZN6StringC1EPK19__FlashStringHelper>
   b6660:	f5b4 6f96 	cmp.w	r4, #1200	; 0x4b0
   b6664:	d1f7      	bne.n	b6656 <_GLOBAL__sub_I_ruid+0x5b2>
MFRC522 mfrc522(SS_PIN, RST_PIN);
   b6666:	482c      	ldr	r0, [pc, #176]	; (b6718 <_GLOBAL__sub_I_ruid+0x674>)
String secuencia[30];
   b6668:	4d2c      	ldr	r5, [pc, #176]	; (b671c <_GLOBAL__sub_I_ruid+0x678>)
   b666a:	4e10      	ldr	r6, [pc, #64]	; (b66ac <_GLOBAL__sub_I_ruid+0x608>)
MFRC522 mfrc522(SS_PIN, RST_PIN);
   b666c:	2208      	movs	r2, #8
   b666e:	2110      	movs	r1, #16
   b6670:	f002 f9dd 	bl	b8a2e <_ZN7MFRC522C1Ehh>
   b6674:	2400      	movs	r4, #0
String secuencia[30];
   b6676:	1928      	adds	r0, r5, r4
   b6678:	4631      	mov	r1, r6
   b667a:	3410      	adds	r4, #16
   b667c:	f004 f899 	bl	ba7b2 <_ZN6StringC1EPK19__FlashStringHelper>
   b6680:	f5b4 7ff0 	cmp.w	r4, #480	; 0x1e0
   b6684:	d1f7      	bne.n	b6676 <_GLOBAL__sub_I_ruid+0x5d2>

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b6686:	4b26      	ldr	r3, [pc, #152]	; (b6720 <_GLOBAL__sub_I_ruid+0x67c>)
   b6688:	2200      	movs	r2, #0
   b668a:	e9c3 2200 	strd	r2, r2, [r3]
    SleepResult() {}
   b668e:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
   b6692:	609a      	str	r2, [r3, #8]
   b6694:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b6698:	2002      	movs	r0, #2
   b669a:	f003 be1d 	b.w	ba2d8 <set_system_mode>
   b669e:	bf00      	nop
   b66a0:	2003e67c 	.word	0x2003e67c
   b66a4:	000bbad2 	.word	0x000bbad2
   b66a8:	2003e68c 	.word	0x2003e68c
   b66ac:	000bb886 	.word	0x000bb886
   b66b0:	2003e69c 	.word	0x2003e69c
   b66b4:	000bbad8 	.word	0x000bbad8
   b66b8:	2003e13c 	.word	0x2003e13c
   b66bc:	000bbade 	.word	0x000bbade
   b66c0:	2003e14c 	.word	0x2003e14c
   b66c4:	000bbae4 	.word	0x000bbae4
   b66c8:	2003e15c 	.word	0x2003e15c
   b66cc:	000bbaea 	.word	0x000bbaea
   b66d0:	2003e16c 	.word	0x2003e16c
   b66d4:	000bbaf0 	.word	0x000bbaf0
   b66d8:	2003e17c 	.word	0x2003e17c
   b66dc:	000bbaf6 	.word	0x000bbaf6
   b66e0:	2003e18c 	.word	0x2003e18c
   b66e4:	000bbafc 	.word	0x000bbafc
   b66e8:	2003e19c 	.word	0x2003e19c
   b66ec:	2003e1ac 	.word	0x2003e1ac
   b66f0:	000bbb02 	.word	0x000bbb02
   b66f4:	2003dc3c 	.word	0x2003dc3c
   b66f8:	000bbb0d 	.word	0x000bbb0d
   b66fc:	2003dc4c 	.word	0x2003dc4c
   b6700:	000bbb17 	.word	0x000bbb17
   b6704:	2003dc5c 	.word	0x2003dc5c
   b6708:	000bbb21 	.word	0x000bbb21
   b670c:	2003dc6c 	.word	0x2003dc6c
   b6710:	000bbb2c 	.word	0x000bbb2c
   b6714:	2003dc7c 	.word	0x2003dc7c
   b6718:	2003d6f4 	.word	0x2003d6f4
   b671c:	2003da50 	.word	0x2003da50
   b6720:	2003c740 	.word	0x2003c740

000b6724 <_Z10showBitmapii6String>:
void showBitmap(int id1, int id2, String msg) {
   b6724:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   display.clearDisplay();
   b6728:	4f99      	ldr	r7, [pc, #612]	; (b6990 <_Z10showBitmapii6String+0x26c>)
void showBitmap(int id1, int id2, String msg) {
   b672a:	b088      	sub	sp, #32
   b672c:	4606      	mov	r6, r0
   display.clearDisplay();
   b672e:	4638      	mov	r0, r7
void showBitmap(int id1, int id2, String msg) {
   b6730:	460d      	mov	r5, r1
   b6732:	4614      	mov	r4, r2
   display.clearDisplay();
   b6734:	f003 f83a 	bl	b97ac <_ZN16Adafruit_SSD130612clearDisplayEv>
    @brief  Set text cursor location
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
   b6738:	2300      	movs	r3, #0
   b673a:	613b      	str	r3, [r7, #16]
   bitmap = true;
   b673c:	4b95      	ldr	r3, [pc, #596]	; (b6994 <_Z10showBitmapii6String+0x270>)
   b673e:	2201      	movs	r2, #1
   b6740:	701a      	strb	r2, [r3, #0]
   b6742:	f003 fc71 	bl	ba028 <HAL_Timer_Get_Milli_Seconds>
   startTime = millis();
   b6746:	4b94      	ldr	r3, [pc, #592]	; (b6998 <_Z10showBitmapii6String+0x274>)
   b6748:	6018      	str	r0, [r3, #0]
   switch (id1)
   b674a:	2e03      	cmp	r6, #3
   b674c:	d816      	bhi.n	b677c <_Z10showBitmapii6String+0x58>
   b674e:	e8df f016 	tbh	[pc, r6, lsl #1]
   b6752:	0004      	.short	0x0004
   b6754:	00f0002d 	.word	0x00f0002d
   b6758:	0116      	.short	0x0116
      switch (id2)
   b675a:	2d03      	cmp	r5, #3
   b675c:	d80e      	bhi.n	b677c <_Z10showBitmapii6String+0x58>
   b675e:	e8df f005 	tbb	[pc, r5]
   b6762:	0702      	.short	0x0702
   b6764:	0b09      	.short	0x0b09
         snprintf(buf, sizeof(buf), "MODO BASICO");
   b6766:	498d      	ldr	r1, [pc, #564]	; (b699c <_Z10showBitmapii6String+0x278>)
         snprintf(buf, sizeof(buf), "Tarjeta invalida para este modo");
   b6768:	488d      	ldr	r0, [pc, #564]	; (b69a0 <_Z10showBitmapii6String+0x27c>)
   b676a:	f004 fee1 	bl	bb530 <strcpy>
         break;
   b676e:	e00e      	b.n	b678e <_Z10showBitmapii6String+0x6a>
         snprintf(buf, sizeof(buf), "MODO AVANZADO");
   b6770:	498c      	ldr	r1, [pc, #560]	; (b69a4 <_Z10showBitmapii6String+0x280>)
   b6772:	e7f9      	b.n	b6768 <_Z10showBitmapii6String+0x44>
         snprintf(buf, sizeof(buf), "MODO MUSICA");
   b6774:	498c      	ldr	r1, [pc, #560]	; (b69a8 <_Z10showBitmapii6String+0x284>)
   b6776:	e7f7      	b.n	b6768 <_Z10showBitmapii6String+0x44>
         snprintf(buf, sizeof(buf), "MODO EXPLORA");
   b6778:	498c      	ldr	r1, [pc, #560]	; (b69ac <_Z10showBitmapii6String+0x288>)
   b677a:	e7f5      	b.n	b6768 <_Z10showBitmapii6String+0x44>
         snprintf(buf, sizeof(buf), "Bitmap not available.");
   b677c:	498c      	ldr	r1, [pc, #560]	; (b69b0 <_Z10showBitmapii6String+0x28c>)
   b677e:	4888      	ldr	r0, [pc, #544]	; (b69a0 <_Z10showBitmapii6String+0x27c>)
   b6780:	f004 fed6 	bl	bb530 <strcpy>
         Serial.println("Bitmap not available.");
   b6784:	f004 fb32 	bl	badec <_Z16_fetch_usbserialv>
   b6788:	4989      	ldr	r1, [pc, #548]	; (b69b0 <_Z10showBitmapii6String+0x28c>)
   b678a:	f004 f8e0 	bl	ba94e <_ZN5Print7printlnEPKc>
   Serial.println(buf);
   b678e:	f004 fb2d 	bl	badec <_Z16_fetch_usbserialv>
   b6792:	4983      	ldr	r1, [pc, #524]	; (b69a0 <_Z10showBitmapii6String+0x27c>)
   b6794:	f004 f8db 	bl	ba94e <_ZN5Print7printlnEPKc>
   display.print(buf);
   b6798:	4981      	ldr	r1, [pc, #516]	; (b69a0 <_Z10showBitmapii6String+0x27c>)
   b679a:	487d      	ldr	r0, [pc, #500]	; (b6990 <_Z10showBitmapii6String+0x26c>)
   b679c:	f004 f8c4 	bl	ba928 <_ZN5Print5printEPKc>
   display.display();
   b67a0:	487b      	ldr	r0, [pc, #492]	; (b6990 <_Z10showBitmapii6String+0x26c>)
}
   b67a2:	b008      	add	sp, #32
   b67a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   display.display();
   b67a8:	f003 ba68 	b.w	b9c7c <_ZN16Adafruit_SSD13067displayEv>
      switch (id2)
   b67ac:	2d06      	cmp	r5, #6
   b67ae:	d8e5      	bhi.n	b677c <_Z10showBitmapii6String+0x58>
   b67b0:	e8df f005 	tbb	[pc, r5]
   b67b4:	6c513704 	.word	0x6c513704
   b67b8:	b090      	.short	0xb090
   b67ba:	bd          	.byte	0xbd
   b67bb:	00          	.byte	0x00
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
   b67bc:	4621      	mov	r1, r4
   b67be:	a804      	add	r0, sp, #16
   b67c0:	f004 f81a 	bl	ba7f8 <_ZN6StringC1ERKS_>
         snprintf(buf, sizeof(buf), msg+"     CONECTAR A:");
   b67c4:	497b      	ldr	r1, [pc, #492]	; (b69b4 <_Z10showBitmapii6String+0x290>)
   b67c6:	a804      	add	r0, sp, #16
   b67c8:	f004 f869 	bl	ba89e <_ZplRK15StringSumHelperPKc>
   b67cc:	2140      	movs	r1, #64	; 0x40
   b67ce:	6802      	ldr	r2, [r0, #0]
   b67d0:	4873      	ldr	r0, [pc, #460]	; (b69a0 <_Z10showBitmapii6String+0x27c>)
   b67d2:	f003 fe2d 	bl	ba430 <snprintf>
class StringSumHelper : public String
   b67d6:	a804      	add	r0, sp, #16
   b67d8:	f003 ffa0 	bl	ba71c <_ZN6StringD1Ev>
         display.fillTriangle(40, 40, 50, 20, 50, 60,WHITE);
   b67dc:	2414      	movs	r4, #20
   b67de:	2501      	movs	r5, #1
   b67e0:	2632      	movs	r6, #50	; 0x32
   b67e2:	2228      	movs	r2, #40	; 0x28
   b67e4:	f04f 083c 	mov.w	r8, #60	; 0x3c
   b67e8:	4611      	mov	r1, r2
   b67ea:	4869      	ldr	r0, [pc, #420]	; (b6990 <_Z10showBitmapii6String+0x26c>)
   b67ec:	4633      	mov	r3, r6
         display.fillRect(50,20,20,40,WHITE);
   b67ee:	2728      	movs	r7, #40	; 0x28
         display.fillTriangle(40, 40, 50, 20, 50, 60,WHITE);
   b67f0:	e9cd 8502 	strd	r8, r5, [sp, #8]
   b67f4:	e9cd 4600 	strd	r4, r6, [sp]
   b67f8:	f001 fde6 	bl	b83c8 <_ZN12Adafruit_GFX12fillTriangleEsssssst>
         display.fillRect(50,20,20,40,WHITE);
   b67fc:	4623      	mov	r3, r4
   b67fe:	4622      	mov	r2, r4
   b6800:	4631      	mov	r1, r6
   b6802:	4863      	ldr	r0, [pc, #396]	; (b6990 <_Z10showBitmapii6String+0x26c>)
   b6804:	9501      	str	r5, [sp, #4]
   b6806:	9700      	str	r7, [sp, #0]
   b6808:	f001 fc3d 	bl	b8086 <_ZN12Adafruit_GFX8fillRectEsssst>
         display.fillTriangle(70, 20, 80, 40, 70, 60,WHITE);
   b680c:	2146      	movs	r1, #70	; 0x46
   b680e:	e9cd 8502 	strd	r8, r5, [sp, #8]
   b6812:	e9cd 7100 	strd	r7, r1, [sp]
   b6816:	2350      	movs	r3, #80	; 0x50
   b6818:	4622      	mov	r2, r4
         display.fillTriangle(60, 20, 30, 100, 90, 100,WHITE);
   b681a:	485d      	ldr	r0, [pc, #372]	; (b6990 <_Z10showBitmapii6String+0x26c>)
   b681c:	f001 fdd4 	bl	b83c8 <_ZN12Adafruit_GFX12fillTriangleEsssssst>
         break;
   b6820:	e7b5      	b.n	b678e <_Z10showBitmapii6String+0x6a>
	StringSumHelper(const String &s) : String(s) {}
   b6822:	4621      	mov	r1, r4
   b6824:	a804      	add	r0, sp, #16
   b6826:	f003 ffe7 	bl	ba7f8 <_ZN6StringC1ERKS_>
         snprintf(buf, sizeof(buf), msg+"     CONECTAR A:");
   b682a:	4962      	ldr	r1, [pc, #392]	; (b69b4 <_Z10showBitmapii6String+0x290>)
   b682c:	a804      	add	r0, sp, #16
   b682e:	f004 f836 	bl	ba89e <_ZplRK15StringSumHelperPKc>
   b6832:	2140      	movs	r1, #64	; 0x40
   b6834:	6802      	ldr	r2, [r0, #0]
   b6836:	485a      	ldr	r0, [pc, #360]	; (b69a0 <_Z10showBitmapii6String+0x27c>)
   b6838:	f003 fdfa 	bl	ba430 <snprintf>
class StringSumHelper : public String
   b683c:	a804      	add	r0, sp, #16
   b683e:	f003 ff6d 	bl	ba71c <_ZN6StringD1Ev>
         display.fillRect(40,20,40,40,WHITE);
   b6842:	2328      	movs	r3, #40	; 0x28
   b6844:	2001      	movs	r0, #1
   b6846:	e9cd 3000 	strd	r3, r0, [sp]
   b684a:	2214      	movs	r2, #20
   b684c:	4619      	mov	r1, r3
         display.fillRect(10,50,90,40,BLACK);
   b684e:	4850      	ldr	r0, [pc, #320]	; (b6990 <_Z10showBitmapii6String+0x26c>)
   b6850:	f001 fc19 	bl	b8086 <_ZN12Adafruit_GFX8fillRectEsssst>
         break;
   b6854:	e79b      	b.n	b678e <_Z10showBitmapii6String+0x6a>
	StringSumHelper(const String &s) : String(s) {}
   b6856:	4621      	mov	r1, r4
   b6858:	a804      	add	r0, sp, #16
   b685a:	f003 ffcd 	bl	ba7f8 <_ZN6StringC1ERKS_>
         snprintf(buf, sizeof(buf), msg+"     CONECTAR A:");
   b685e:	4955      	ldr	r1, [pc, #340]	; (b69b4 <_Z10showBitmapii6String+0x290>)
   b6860:	a804      	add	r0, sp, #16
   b6862:	f004 f81c 	bl	ba89e <_ZplRK15StringSumHelperPKc>
   b6866:	2140      	movs	r1, #64	; 0x40
   b6868:	6802      	ldr	r2, [r0, #0]
   b686a:	484d      	ldr	r0, [pc, #308]	; (b69a0 <_Z10showBitmapii6String+0x27c>)
   b686c:	f003 fde0 	bl	ba430 <snprintf>
class StringSumHelper : public String
   b6870:	a804      	add	r0, sp, #16
   b6872:	f003 ff53 	bl	ba71c <_ZN6StringD1Ev>
         display.fillTriangle(60, 20, 30, 100, 90, 100,WHITE);
   b6876:	2364      	movs	r3, #100	; 0x64
   b6878:	225a      	movs	r2, #90	; 0x5a
   b687a:	2101      	movs	r1, #1
   b687c:	e9cd 3200 	strd	r3, r2, [sp]
   b6880:	e9cd 3102 	strd	r3, r1, [sp, #8]
   b6884:	2214      	movs	r2, #20
   b6886:	231e      	movs	r3, #30
   b6888:	213c      	movs	r1, #60	; 0x3c
   b688a:	e7c6      	b.n	b681a <_Z10showBitmapii6String+0xf6>
	StringSumHelper(const String &s) : String(s) {}
   b688c:	4621      	mov	r1, r4
   b688e:	a804      	add	r0, sp, #16
   b6890:	f003 ffb2 	bl	ba7f8 <_ZN6StringC1ERKS_>
         snprintf(buf, sizeof(buf), msg+"     CONECTAR A:");
   b6894:	4947      	ldr	r1, [pc, #284]	; (b69b4 <_Z10showBitmapii6String+0x290>)
   b6896:	a804      	add	r0, sp, #16
   b6898:	f004 f801 	bl	ba89e <_ZplRK15StringSumHelperPKc>
   b689c:	2140      	movs	r1, #64	; 0x40
   b689e:	6802      	ldr	r2, [r0, #0]
   b68a0:	483f      	ldr	r0, [pc, #252]	; (b69a0 <_Z10showBitmapii6String+0x27c>)
   b68a2:	f003 fdc5 	bl	ba430 <snprintf>
         display.fillTriangle(60, 20, 52, 40, 67, 40,WHITE);
   b68a6:	2428      	movs	r4, #40	; 0x28
   b68a8:	2601      	movs	r6, #1
   b68aa:	2543      	movs	r5, #67	; 0x43
class StringSumHelper : public String
   b68ac:	a804      	add	r0, sp, #16
   b68ae:	f003 ff35 	bl	ba71c <_ZN6StringD1Ev>
   b68b2:	2334      	movs	r3, #52	; 0x34
   b68b4:	2214      	movs	r2, #20
   b68b6:	e9cd 4602 	strd	r4, r6, [sp, #8]
   b68ba:	e9cd 4500 	strd	r4, r5, [sp]
   b68be:	4834      	ldr	r0, [pc, #208]	; (b6990 <_Z10showBitmapii6String+0x26c>)
   b68c0:	213c      	movs	r1, #60	; 0x3c
   b68c2:	f001 fd81 	bl	b83c8 <_ZN12Adafruit_GFX12fillTriangleEsssssst>
         display.fillTriangle(60, 60, 52, 40, 67, 40,WHITE);
   b68c6:	e9cd 4602 	strd	r4, r6, [sp, #8]
   b68ca:	e9cd 4500 	strd	r4, r5, [sp]
   b68ce:	2334      	movs	r3, #52	; 0x34
   b68d0:	223c      	movs	r2, #60	; 0x3c
   b68d2:	e7d9      	b.n	b6888 <_Z10showBitmapii6String+0x164>
	StringSumHelper(const String &s) : String(s) {}
   b68d4:	4621      	mov	r1, r4
   b68d6:	a804      	add	r0, sp, #16
   b68d8:	f003 ff8e 	bl	ba7f8 <_ZN6StringC1ERKS_>
         snprintf(buf, sizeof(buf), msg+"     CONECTAR A:");
   b68dc:	4935      	ldr	r1, [pc, #212]	; (b69b4 <_Z10showBitmapii6String+0x290>)
   b68de:	a804      	add	r0, sp, #16
   b68e0:	f003 ffdd 	bl	ba89e <_ZplRK15StringSumHelperPKc>
   b68e4:	2140      	movs	r1, #64	; 0x40
   b68e6:	6802      	ldr	r2, [r0, #0]
   b68e8:	482d      	ldr	r0, [pc, #180]	; (b69a0 <_Z10showBitmapii6String+0x27c>)
   b68ea:	f003 fda1 	bl	ba430 <snprintf>
class StringSumHelper : public String
   b68ee:	a804      	add	r0, sp, #16
   b68f0:	f003 ff14 	bl	ba71c <_ZN6StringD1Ev>
         display.fillCircle(60,50,15,WHITE);
   b68f4:	2301      	movs	r3, #1
   b68f6:	9300      	str	r3, [sp, #0]
   b68f8:	2232      	movs	r2, #50	; 0x32
   b68fa:	230f      	movs	r3, #15
   b68fc:	213c      	movs	r1, #60	; 0x3c
   b68fe:	4824      	ldr	r0, [pc, #144]	; (b6990 <_Z10showBitmapii6String+0x26c>)
   b6900:	f001 fd37 	bl	b8372 <_ZN12Adafruit_GFX10fillCircleEssst>
         display.fillRect(10,50,90,40,BLACK);
   b6904:	2328      	movs	r3, #40	; 0x28
   b6906:	2200      	movs	r2, #0
   b6908:	e9cd 3200 	strd	r3, r2, [sp]
   b690c:	210a      	movs	r1, #10
   b690e:	235a      	movs	r3, #90	; 0x5a
   b6910:	2232      	movs	r2, #50	; 0x32
   b6912:	e79c      	b.n	b684e <_Z10showBitmapii6String+0x12a>
         snprintf(buf, sizeof(buf), "     CONECTAR A:");
   b6914:	4927      	ldr	r1, [pc, #156]	; (b69b4 <_Z10showBitmapii6String+0x290>)
   b6916:	4822      	ldr	r0, [pc, #136]	; (b69a0 <_Z10showBitmapii6String+0x27c>)
   b6918:	f004 fe0a 	bl	bb530 <strcpy>
         display.fillCircle(60,40,15,WHITE);
   b691c:	2301      	movs	r3, #1
   b691e:	9300      	str	r3, [sp, #0]
   b6920:	481b      	ldr	r0, [pc, #108]	; (b6990 <_Z10showBitmapii6String+0x26c>)
   b6922:	230f      	movs	r3, #15
   b6924:	2228      	movs	r2, #40	; 0x28
   b6926:	213c      	movs	r1, #60	; 0x3c
   b6928:	f001 fd23 	bl	b8372 <_ZN12Adafruit_GFX10fillCircleEssst>
         break;
   b692c:	e72f      	b.n	b678e <_Z10showBitmapii6String+0x6a>
         snprintf(buf, sizeof(buf), "YA CONECTADO");
   b692e:	4922      	ldr	r1, [pc, #136]	; (b69b8 <_Z10showBitmapii6String+0x294>)
   b6930:	e71a      	b.n	b6768 <_Z10showBitmapii6String+0x44>
      switch (id2)
   b6932:	2d06      	cmp	r5, #6
   b6934:	f63f af22 	bhi.w	b677c <_Z10showBitmapii6String+0x58>
   b6938:	e8df f005 	tbb	[pc, r5]
   b693c:	0a080604 	.word	0x0a080604
   b6940:	1d0c      	.short	0x1d0c
   b6942:	1f          	.byte	0x1f
   b6943:	00          	.byte	0x00
         snprintf(buf, sizeof(buf), "Tarjeta invalida para este modo");
   b6944:	491d      	ldr	r1, [pc, #116]	; (b69bc <_Z10showBitmapii6String+0x298>)
   b6946:	e70f      	b.n	b6768 <_Z10showBitmapii6String+0x44>
         snprintf(buf, sizeof(buf), "Borrado invalido para este modo");
   b6948:	491d      	ldr	r1, [pc, #116]	; (b69c0 <_Z10showBitmapii6String+0x29c>)
   b694a:	e70d      	b.n	b6768 <_Z10showBitmapii6String+0x44>
         snprintf(buf, sizeof(buf), "Orden de tarjetas invalido");
   b694c:	491d      	ldr	r1, [pc, #116]	; (b69c4 <_Z10showBitmapii6String+0x2a0>)
   b694e:	e70b      	b.n	b6768 <_Z10showBitmapii6String+0x44>
         snprintf(buf, sizeof(buf), "Puerto no disponible");
   b6950:	491d      	ldr	r1, [pc, #116]	; (b69c8 <_Z10showBitmapii6String+0x2a4>)
   b6952:	e709      	b.n	b6768 <_Z10showBitmapii6String+0x44>
	StringSumHelper(const char *p) : String(p) {}
   b6954:	491d      	ldr	r1, [pc, #116]	; (b69cc <_Z10showBitmapii6String+0x2a8>)
   b6956:	a804      	add	r0, sp, #16
   b6958:	f003 ff2b 	bl	ba7b2 <_ZN6StringC1EPK19__FlashStringHelper>
         snprintf(buf, sizeof(buf), "Play no disponible"+msg);
   b695c:	4621      	mov	r1, r4
   b695e:	a804      	add	r0, sp, #16
   b6960:	f003 ff91 	bl	ba886 <_ZplRK15StringSumHelperRK6String>
   b6964:	2140      	movs	r1, #64	; 0x40
   b6966:	6802      	ldr	r2, [r0, #0]
   b6968:	480d      	ldr	r0, [pc, #52]	; (b69a0 <_Z10showBitmapii6String+0x27c>)
   b696a:	f003 fd61 	bl	ba430 <snprintf>
class StringSumHelper : public String
   b696e:	a804      	add	r0, sp, #16
   b6970:	f003 fed4 	bl	ba71c <_ZN6StringD1Ev>
         break;
   b6974:	e70b      	b.n	b678e <_Z10showBitmapii6String+0x6a>
         snprintf(buf, sizeof(buf), "Sensor no disponible (en uso)");
   b6976:	4916      	ldr	r1, [pc, #88]	; (b69d0 <_Z10showBitmapii6String+0x2ac>)
   b6978:	e6f6      	b.n	b6768 <_Z10showBitmapii6String+0x44>
         snprintf(buf, sizeof(buf), "Actuador no disponible (en uso)");
   b697a:	4916      	ldr	r1, [pc, #88]	; (b69d4 <_Z10showBitmapii6String+0x2b0>)
   b697c:	e6f4      	b.n	b6768 <_Z10showBitmapii6String+0x44>
      switch (id2)
   b697e:	2d00      	cmp	r5, #0
   b6980:	f47f aefc 	bne.w	b677c <_Z10showBitmapii6String+0x58>
         snprintf(buf, sizeof(buf), msg);
   b6984:	6822      	ldr	r2, [r4, #0]
   b6986:	4806      	ldr	r0, [pc, #24]	; (b69a0 <_Z10showBitmapii6String+0x27c>)
   b6988:	2140      	movs	r1, #64	; 0x40
   b698a:	f003 fd51 	bl	ba430 <snprintf>
         break;
   b698e:	e6fe      	b.n	b678e <_Z10showBitmapii6String+0x6a>
   b6990:	2003d34c 	.word	0x2003d34c
   b6994:	2003c74d 	.word	0x2003c74d
   b6998:	2003dc30 	.word	0x2003dc30
   b699c:	000bbb37 	.word	0x000bbb37
   b69a0:	2003d301 	.word	0x2003d301
   b69a4:	000bbb43 	.word	0x000bbb43
   b69a8:	000bbb51 	.word	0x000bbb51
   b69ac:	000bbb5d 	.word	0x000bbb5d
   b69b0:	000bbb6a 	.word	0x000bbb6a
   b69b4:	000bbb80 	.word	0x000bbb80
   b69b8:	000bbb91 	.word	0x000bbb91
   b69bc:	000bbb9e 	.word	0x000bbb9e
   b69c0:	000bbbbe 	.word	0x000bbbbe
   b69c4:	000bbbde 	.word	0x000bbbde
   b69c8:	000bbbf9 	.word	0x000bbbf9
   b69cc:	000bbc0e 	.word	0x000bbc0e
   b69d0:	000bbc21 	.word	0x000bbc21
   b69d4:	000bbc3f 	.word	0x000bbc3f

000b69d8 <_Z8showPortii>:
void showPort(int id, int puerto ) {
   b69d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   if (tagInfo[2]==0) { // A0, A2, A4
   b69da:	4b24      	ldr	r3, [pc, #144]	; (b6a6c <_Z8showPortii+0x94>)
   b69dc:	689b      	ldr	r3, [r3, #8]
   b69de:	bb4b      	cbnz	r3, b6a34 <_Z8showPortii+0x5c>
      switch (puerto)
   b69e0:	2902      	cmp	r1, #2
   b69e2:	d011      	beq.n	b6a08 <_Z8showPortii+0x30>
   b69e4:	2904      	cmp	r1, #4
   b69e6:	d016      	beq.n	b6a16 <_Z8showPortii+0x3e>
   b69e8:	b9e1      	cbnz	r1, b6a24 <_Z8showPortii+0x4c>
         showBitmap(1,3,"");
   b69ea:	4921      	ldr	r1, [pc, #132]	; (b6a70 <_Z8showPortii+0x98>)
   b69ec:	4668      	mov	r0, sp
   b69ee:	f003 fee0 	bl	ba7b2 <_ZN6StringC1EPK19__FlashStringHelper>
   b69f2:	466a      	mov	r2, sp
   b69f4:	2103      	movs	r1, #3
         showBitmap(1,2,"");
   b69f6:	2001      	movs	r0, #1
         showBitmap(2,3,""); //PUERTO NO DISPO.
   b69f8:	f7ff fe94 	bl	b6724 <_Z10showBitmapii6String>
   b69fc:	4668      	mov	r0, sp
   b69fe:	f003 fe8d 	bl	ba71c <_ZN6StringD1Ev>
}
   b6a02:	b005      	add	sp, #20
   b6a04:	f85d fb04 	ldr.w	pc, [sp], #4
         showBitmap(1,4,"");
   b6a08:	4919      	ldr	r1, [pc, #100]	; (b6a70 <_Z8showPortii+0x98>)
   b6a0a:	4668      	mov	r0, sp
   b6a0c:	f003 fed1 	bl	ba7b2 <_ZN6StringC1EPK19__FlashStringHelper>
   b6a10:	466a      	mov	r2, sp
   b6a12:	2104      	movs	r1, #4
   b6a14:	e7ef      	b.n	b69f6 <_Z8showPortii+0x1e>
         showBitmap(1,5,"");
   b6a16:	4916      	ldr	r1, [pc, #88]	; (b6a70 <_Z8showPortii+0x98>)
   b6a18:	4668      	mov	r0, sp
   b6a1a:	f003 feca 	bl	ba7b2 <_ZN6StringC1EPK19__FlashStringHelper>
   b6a1e:	466a      	mov	r2, sp
   b6a20:	2105      	movs	r1, #5
   b6a22:	e7e8      	b.n	b69f6 <_Z8showPortii+0x1e>
         showBitmap(2,3,""); //PUERTO NO DISPO.
   b6a24:	4912      	ldr	r1, [pc, #72]	; (b6a70 <_Z8showPortii+0x98>)
   b6a26:	4668      	mov	r0, sp
         showBitmap(2,3,""); //PUERTO NO DISPO.
   b6a28:	f003 fec3 	bl	ba7b2 <_ZN6StringC1EPK19__FlashStringHelper>
   b6a2c:	466a      	mov	r2, sp
   b6a2e:	2103      	movs	r1, #3
   b6a30:	2002      	movs	r0, #2
   b6a32:	e7e1      	b.n	b69f8 <_Z8showPortii+0x20>
      switch (puerto)
   b6a34:	2904      	cmp	r1, #4
   b6a36:	d00a      	beq.n	b6a4e <_Z8showPortii+0x76>
   b6a38:	2906      	cmp	r1, #6
   b6a3a:	d00f      	beq.n	b6a5c <_Z8showPortii+0x84>
   b6a3c:	2902      	cmp	r1, #2
         showBitmap(2,3,""); //PUERTO NO DISPO.
   b6a3e:	4668      	mov	r0, sp
   b6a40:	490b      	ldr	r1, [pc, #44]	; (b6a70 <_Z8showPortii+0x98>)
      switch (puerto)
   b6a42:	d1f1      	bne.n	b6a28 <_Z8showPortii+0x50>
         showBitmap(1,0,"");
   b6a44:	f003 feb5 	bl	ba7b2 <_ZN6StringC1EPK19__FlashStringHelper>
   b6a48:	466a      	mov	r2, sp
   b6a4a:	2100      	movs	r1, #0
   b6a4c:	e7d3      	b.n	b69f6 <_Z8showPortii+0x1e>
         showBitmap(1,1,"");
   b6a4e:	4908      	ldr	r1, [pc, #32]	; (b6a70 <_Z8showPortii+0x98>)
   b6a50:	4668      	mov	r0, sp
   b6a52:	f003 feae 	bl	ba7b2 <_ZN6StringC1EPK19__FlashStringHelper>
   b6a56:	466a      	mov	r2, sp
   b6a58:	2101      	movs	r1, #1
   b6a5a:	e7cc      	b.n	b69f6 <_Z8showPortii+0x1e>
         showBitmap(1,2,"");
   b6a5c:	4904      	ldr	r1, [pc, #16]	; (b6a70 <_Z8showPortii+0x98>)
   b6a5e:	4668      	mov	r0, sp
   b6a60:	f003 fea7 	bl	ba7b2 <_ZN6StringC1EPK19__FlashStringHelper>
   b6a64:	466a      	mov	r2, sp
   b6a66:	2102      	movs	r1, #2
   b6a68:	e7c5      	b.n	b69f6 <_Z8showPortii+0x1e>
   b6a6a:	bf00      	nop
   b6a6c:	2003c6a4 	.word	0x2003c6a4
   b6a70:	000bb886 	.word	0x000bb886

000b6a74 <_Z13borradoBLOQUEi>:
   switch (modo)
   b6a74:	2801      	cmp	r0, #1
{
   b6a76:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   switch (modo)
   b6a78:	d003      	beq.n	b6a82 <_Z13borradoBLOQUEi+0xe>
   b6a7a:	2802      	cmp	r0, #2
   b6a7c:	d03c      	beq.n	b6af8 <_Z13borradoBLOQUEi+0x84>
}
   b6a7e:	b004      	add	sp, #16
   b6a80:	bd70      	pop	{r4, r5, r6, pc}
      if (numBloque==0) {
   b6a82:	4b37      	ldr	r3, [pc, #220]	; (b6b60 <_Z13borradoBLOQUEi+0xec>)
   b6a84:	681c      	ldr	r4, [r3, #0]
   b6a86:	b974      	cbnz	r4, b6aa6 <_Z13borradoBLOQUEi+0x32>
         borradoALL(1);
   b6a88:	f7fe fea4 	bl	b57d4 <_Z10borradoALLi>
         showBitmap(3,0,"Borrado de bloque realizado");
   b6a8c:	4935      	ldr	r1, [pc, #212]	; (b6b64 <_Z13borradoBLOQUEi+0xf0>)
   b6a8e:	4668      	mov	r0, sp
   b6a90:	f003 fe8f 	bl	ba7b2 <_ZN6StringC1EPK19__FlashStringHelper>
   b6a94:	466a      	mov	r2, sp
   b6a96:	2100      	movs	r1, #0
   b6a98:	2003      	movs	r0, #3
   b6a9a:	f7ff fe43 	bl	b6724 <_Z10showBitmapii6String>
   b6a9e:	4668      	mov	r0, sp
   b6aa0:	f003 fe3c 	bl	ba71c <_ZN6StringD1Ev>
   b6aa4:	e7eb      	b.n	b6a7e <_Z13borradoBLOQUEi+0xa>
      } else if (numBloque==1) {
   b6aa6:	2c01      	cmp	r4, #1
   b6aa8:	d11e      	bne.n	b6ae8 <_Z13borradoBLOQUEi+0x74>
         IF_pasado = false;
   b6aaa:	2200      	movs	r2, #0
         numBloque = 0;
   b6aac:	601a      	str	r2, [r3, #0]
         IF_pasado = false;
   b6aae:	492e      	ldr	r1, [pc, #184]	; (b6b68 <_Z13borradoBLOQUEi+0xf4>)
         THEN_pasado = true;           //Para permitir la ejecucion del primer bloque
   b6ab0:	4b2e      	ldr	r3, [pc, #184]	; (b6b6c <_Z13borradoBLOQUEi+0xf8>)
         IF_pasado = false;
   b6ab2:	700a      	strb	r2, [r1, #0]
         THEN_pasado = true;           //Para permitir la ejecucion del primer bloque
   b6ab4:	701c      	strb	r4, [r3, #0]
         if (puertoAnalogico == -1){   
   b6ab6:	4a2e      	ldr	r2, [pc, #184]	; (b6b70 <_Z13borradoBLOQUEi+0xfc>)
         numActuadoresBloque = 1;      //Para permitir iniciar el segundo bloque
   b6ab8:	4b2e      	ldr	r3, [pc, #184]	; (b6b74 <_Z13borradoBLOQUEi+0x100>)
         puertoAnalogico -= puertoAnalogico_bloque;
   b6aba:	482f      	ldr	r0, [pc, #188]	; (b6b78 <_Z13borradoBLOQUEi+0x104>)
         numActuadoresBloque = 1;      //Para permitir iniciar el segundo bloque
   b6abc:	601c      	str	r4, [r3, #0]
         if (puertoAnalogico == -1){   
   b6abe:	6813      	ldr	r3, [r2, #0]
         puertoAnalogico -= puertoAnalogico_bloque;
   b6ac0:	6800      	ldr	r0, [r0, #0]
         if (puertoAnalogico == -1){   
   b6ac2:	3301      	adds	r3, #1
            puertoAnalogico=3;
   b6ac4:	bf04      	itt	eq
   b6ac6:	2303      	moveq	r3, #3
   b6ac8:	6013      	streq	r3, [r2, #0]
         if (puertoDigital == -1){
   b6aca:	4b2c      	ldr	r3, [pc, #176]	; (b6b7c <_Z13borradoBLOQUEi+0x108>)
   b6acc:	6819      	ldr	r1, [r3, #0]
   b6ace:	3101      	adds	r1, #1
            puertoDigital=6;
   b6ad0:	bf04      	itt	eq
   b6ad2:	2106      	moveq	r1, #6
   b6ad4:	6019      	streq	r1, [r3, #0]
         puertoAnalogico -= puertoAnalogico_bloque;
   b6ad6:	6811      	ldr	r1, [r2, #0]
   b6ad8:	1a09      	subs	r1, r1, r0
   b6ada:	6011      	str	r1, [r2, #0]
         puertoDigital -= puertoDigital_bloque;
   b6adc:	4928      	ldr	r1, [pc, #160]	; (b6b80 <_Z13borradoBLOQUEi+0x10c>)
   b6ade:	681a      	ldr	r2, [r3, #0]
   b6ae0:	6809      	ldr	r1, [r1, #0]
   b6ae2:	1a52      	subs	r2, r2, r1
   b6ae4:	601a      	str	r2, [r3, #0]
   b6ae6:	e7d1      	b.n	b6a8c <_Z13borradoBLOQUEi+0x18>
         Serial.println("Nada que borrar");
   b6ae8:	f004 f980 	bl	badec <_Z16_fetch_usbserialv>
   b6aec:	4925      	ldr	r1, [pc, #148]	; (b6b84 <_Z13borradoBLOQUEi+0x110>)
}
   b6aee:	b004      	add	sp, #16
   b6af0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
         Serial.println("Nada que borrar");
   b6af4:	f003 bf2b 	b.w	ba94e <_ZN5Print7printlnEPKc>
      if (bucle) {
   b6af8:	4e23      	ldr	r6, [pc, #140]	; (b6b88 <_Z13borradoBLOQUEi+0x114>)
         posicion = posicion - (tam_bucle+1);
   b6afa:	4a24      	ldr	r2, [pc, #144]	; (b6b8c <_Z13borradoBLOQUEi+0x118>)
      if (bucle) {
   b6afc:	7834      	ldrb	r4, [r6, #0]
         posicion = posicion - (tam_bucle+1);
   b6afe:	6813      	ldr	r3, [r2, #0]
   b6b00:	4d23      	ldr	r5, [pc, #140]	; (b6b90 <_Z13borradoBLOQUEi+0x11c>)
      if (bucle) {
   b6b02:	b19c      	cbz	r4, b6b2c <_Z13borradoBLOQUEi+0xb8>
         posicion = posicion - (tam_bucle+1);
   b6b04:	6829      	ldr	r1, [r5, #0]
   b6b06:	3101      	adds	r1, #1
   b6b08:	1a5b      	subs	r3, r3, r1
         showBitmap(3,0,"Borrado de loop realizado");
   b6b0a:	4668      	mov	r0, sp
   b6b0c:	4921      	ldr	r1, [pc, #132]	; (b6b94 <_Z13borradoBLOQUEi+0x120>)
         posicion = posicion - (tam_bucle+1);
   b6b0e:	6013      	str	r3, [r2, #0]
         showBitmap(3,0,"Borrado de loop realizado");
   b6b10:	f003 fe4f 	bl	ba7b2 <_ZN6StringC1EPK19__FlashStringHelper>
   b6b14:	466a      	mov	r2, sp
   b6b16:	2100      	movs	r1, #0
         showBitmap(3,0,"Nada que borrar.");
   b6b18:	2003      	movs	r0, #3
   b6b1a:	f7ff fe03 	bl	b6724 <_Z10showBitmapii6String>
   b6b1e:	4668      	mov	r0, sp
   b6b20:	f003 fdfc 	bl	ba71c <_ZN6StringD1Ev>
      bucle = false;
   b6b24:	2300      	movs	r3, #0
   b6b26:	7033      	strb	r3, [r6, #0]
      tam_bucle = 0;
   b6b28:	602b      	str	r3, [r5, #0]
}
   b6b2a:	e7a8      	b.n	b6a7e <_Z13borradoBLOQUEi+0xa>
      } else if ( notas[posicion-1] == -2 ) {
   b6b2c:	481a      	ldr	r0, [pc, #104]	; (b6b98 <_Z13borradoBLOQUEi+0x124>)
   b6b2e:	1e59      	subs	r1, r3, #1
   b6b30:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
   b6b34:	3002      	adds	r0, #2
   b6b36:	d10c      	bne.n	b6b52 <_Z13borradoBLOQUEi+0xde>
         posicion = posicion - (duraciones[posicion-1]+2);
   b6b38:	4818      	ldr	r0, [pc, #96]	; (b6b9c <_Z13borradoBLOQUEi+0x128>)
   b6b3a:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
   b6b3e:	3102      	adds	r1, #2
   b6b40:	1a5b      	subs	r3, r3, r1
         showBitmap(3,0,"Borrado de loop realizado");
   b6b42:	4914      	ldr	r1, [pc, #80]	; (b6b94 <_Z13borradoBLOQUEi+0x120>)
         posicion = posicion - (duraciones[posicion-1]+2);
   b6b44:	6013      	str	r3, [r2, #0]
         showBitmap(3,0,"Nada que borrar.");
   b6b46:	4668      	mov	r0, sp
   b6b48:	f003 fe33 	bl	ba7b2 <_ZN6StringC1EPK19__FlashStringHelper>
   b6b4c:	466a      	mov	r2, sp
   b6b4e:	4621      	mov	r1, r4
   b6b50:	e7e2      	b.n	b6b18 <_Z13borradoBLOQUEi+0xa4>
         Serial.println("Nada que borrar.");
   b6b52:	f004 f94b 	bl	badec <_Z16_fetch_usbserialv>
   b6b56:	4912      	ldr	r1, [pc, #72]	; (b6ba0 <_Z13borradoBLOQUEi+0x12c>)
   b6b58:	f003 fef9 	bl	ba94e <_ZN5Print7printlnEPKc>
         showBitmap(3,0,"Nada que borrar.");
   b6b5c:	4910      	ldr	r1, [pc, #64]	; (b6ba0 <_Z13borradoBLOQUEi+0x12c>)
   b6b5e:	e7f2      	b.n	b6b46 <_Z13borradoBLOQUEi+0xd2>
   b6b60:	2003c69c 	.word	0x2003c69c
   b6b64:	000bbc5f 	.word	0x000bbc5f
   b6b68:	2003c73d 	.word	0x2003c73d
   b6b6c:	2003c74c 	.word	0x2003c74c
   b6b70:	2003da3c 	.word	0x2003da3c
   b6b74:	2003da24 	.word	0x2003da24
   b6b78:	2003da40 	.word	0x2003da40
   b6b7c:	2003c6a0 	.word	0x2003c6a0
   b6b80:	2003da44 	.word	0x2003da44
   b6b84:	000bbc7b 	.word	0x000bbc7b
   b6b88:	2003d300 	.word	0x2003d300
   b6b8c:	2003da34 	.word	0x2003da34
   b6b90:	2003dc38 	.word	0x2003dc38
   b6b94:	000bbc8b 	.word	0x000bbc8b
   b6b98:	2003d704 	.word	0x2003d704
   b6b9c:	2003d3bc 	.word	0x2003d3bc
   b6ba0:	000bbca5 	.word	0x000bbca5

000b6ba4 <_Z10reproducirv>:
void reproducir() {
   b6ba4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   if (!bucle) {
   b6ba8:	4b1e      	ldr	r3, [pc, #120]	; (b6c24 <_Z10reproducirv+0x80>)
   b6baa:	781c      	ldrb	r4, [r3, #0]
   b6bac:	bb34      	cbnz	r4, b6bfc <_Z10reproducirv+0x58>
      while ( i < posicion) {
   b6bae:	f8df a08c 	ldr.w	sl, [pc, #140]	; b6c3c <_Z10reproducirv+0x98>
         Serial.printlnf("%d - %d", notas[i], duraciones[i]);
   b6bb2:	4e1d      	ldr	r6, [pc, #116]	; (b6c28 <_Z10reproducirv+0x84>)
   b6bb4:	4f1d      	ldr	r7, [pc, #116]	; (b6c2c <_Z10reproducirv+0x88>)
      while ( i < posicion) {
   b6bb6:	f8da 3000 	ldr.w	r3, [sl]
   b6bba:	42a3      	cmp	r3, r4
   b6bbc:	dd2f      	ble.n	b6c1e <_Z10reproducirv+0x7a>
         Serial.printlnf("%d - %d", notas[i], duraciones[i]);
   b6bbe:	f004 f915 	bl	badec <_Z16_fetch_usbserialv>
   b6bc2:	f857 2024 	ldr.w	r2, [r7, r4, lsl #2]
   b6bc6:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
   b6bca:	4919      	ldr	r1, [pc, #100]	; (b6c30 <_Z10reproducirv+0x8c>)
   b6bcc:	f7fd ff93 	bl	b4af6 <_ZN5Print8printlnfEPKcz>
         if ( notas[i] == -1 ) {
   b6bd0:	f857 0024 	ldr.w	r0, [r7, r4, lsl #2]
   b6bd4:	1c42      	adds	r2, r0, #1
   b6bd6:	d105      	bne.n	b6be4 <_Z10reproducirv+0x40>
            n = duraciones[i];
   b6bd8:	f856 8024 	ldr.w	r8, [r6, r4, lsl #2]
            inicio=i;
   b6bdc:	46a1      	mov	r9, r4
            iteracion = 0;            
   b6bde:	2500      	movs	r5, #0
         i++;
   b6be0:	3401      	adds	r4, #1
      while ( i < posicion) {
   b6be2:	e7e8      	b.n	b6bb6 <_Z10reproducirv+0x12>
         } else if ( notas[i] == -2 ) {
   b6be4:	1c83      	adds	r3, r0, #2
   b6be6:	d104      	bne.n	b6bf2 <_Z10reproducirv+0x4e>
            iteracion++;
   b6be8:	3501      	adds	r5, #1
               i = inicio;
   b6bea:	45a8      	cmp	r8, r5
   b6bec:	bfc8      	it	gt
   b6bee:	464c      	movgt	r4, r9
   b6bf0:	e7f6      	b.n	b6be0 <_Z10reproducirv+0x3c>
            reproducirNOTA(notas[i],duraciones[i]);
   b6bf2:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
   b6bf6:	f7fe fedb 	bl	b59b0 <_Z14reproducirNOTAii>
   b6bfa:	e7f1      	b.n	b6be0 <_Z10reproducirv+0x3c>
      Serial.println("Finaliza el bucle antes de reproducir");
   b6bfc:	f004 f8f6 	bl	badec <_Z16_fetch_usbserialv>
   b6c00:	490c      	ldr	r1, [pc, #48]	; (b6c34 <_Z10reproducirv+0x90>)
   b6c02:	f003 fea4 	bl	ba94e <_ZN5Print7printlnEPKc>
      showBitmap(2,4,"");
   b6c06:	490c      	ldr	r1, [pc, #48]	; (b6c38 <_Z10reproducirv+0x94>)
   b6c08:	4668      	mov	r0, sp
   b6c0a:	f003 fdd2 	bl	ba7b2 <_ZN6StringC1EPK19__FlashStringHelper>
   b6c0e:	2002      	movs	r0, #2
   b6c10:	466a      	mov	r2, sp
   b6c12:	2104      	movs	r1, #4
   b6c14:	f7ff fd86 	bl	b6724 <_Z10showBitmapii6String>
   b6c18:	4668      	mov	r0, sp
   b6c1a:	f003 fd7f 	bl	ba71c <_ZN6StringD1Ev>
}
   b6c1e:	b004      	add	sp, #16
   b6c20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b6c24:	2003d300 	.word	0x2003d300
   b6c28:	2003d3bc 	.word	0x2003d3bc
   b6c2c:	2003d704 	.word	0x2003d704
   b6c30:	000bbcb6 	.word	0x000bbcb6
   b6c34:	000bbcbe 	.word	0x000bbcbe
   b6c38:	000bb886 	.word	0x000bb886
   b6c3c:	2003da34 	.word	0x2003da34

000b6c40 <_Z10cambioModoi>:
{
   b6c40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   if (modo == 0 ) {
   b6c42:	4604      	mov	r4, r0
   b6c44:	b9e0      	cbnz	r0, b6c80 <_Z10cambioModoi+0x40>
      Serial.println("Modo BASICO detectado");
   b6c46:	f004 f8d1 	bl	badec <_Z16_fetch_usbserialv>
   b6c4a:	4921      	ldr	r1, [pc, #132]	; (b6cd0 <_Z10cambioModoi+0x90>)
   b6c4c:	f003 fe7f 	bl	ba94e <_ZN5Print7printlnEPKc>
      MODE = 0;
   b6c50:	4b20      	ldr	r3, [pc, #128]	; (b6cd4 <_Z10cambioModoi+0x94>)
      showBitmap(3,0,"Iniciando modo BASICO...");
   b6c52:	4921      	ldr	r1, [pc, #132]	; (b6cd8 <_Z10cambioModoi+0x98>)
      MODE = 0;
   b6c54:	701c      	strb	r4, [r3, #0]
      showBitmap(3,0,"Iniciando modo MUSICA...");
   b6c56:	4668      	mov	r0, sp
   b6c58:	f003 fdab 	bl	ba7b2 <_ZN6StringC1EPK19__FlashStringHelper>
   b6c5c:	466a      	mov	r2, sp
   b6c5e:	2100      	movs	r1, #0
   b6c60:	2003      	movs	r0, #3
      showBitmap(3,0,"Iniciando modo EXPLORA...");
   b6c62:	f7ff fd5f 	bl	b6724 <_Z10showBitmapii6String>
   b6c66:	4668      	mov	r0, sp
   b6c68:	f003 fd58 	bl	ba71c <_ZN6StringD1Ev>
   EEPROM.put(0, MODE);
   b6c6c:	f004 fba6 	bl	bb3bc <_Z21__fetch_global_EEPROMv>
   b6c70:	4918      	ldr	r1, [pc, #96]	; (b6cd4 <_Z10cambioModoi+0x94>)
   b6c72:	2201      	movs	r2, #1
   b6c74:	2000      	movs	r0, #0
}
   b6c76:	b004      	add	sp, #16
   b6c78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b6c7c:	f003 b9ec 	b.w	ba058 <HAL_EEPROM_Put>
   } else if (modo == 1) {
   b6c80:	2801      	cmp	r0, #1
   b6c82:	d108      	bne.n	b6c96 <_Z10cambioModoi+0x56>
      Serial.println("Modo AVANZADO detectado");
   b6c84:	f004 f8b2 	bl	badec <_Z16_fetch_usbserialv>
   b6c88:	4914      	ldr	r1, [pc, #80]	; (b6cdc <_Z10cambioModoi+0x9c>)
   b6c8a:	f003 fe60 	bl	ba94e <_ZN5Print7printlnEPKc>
      MODE = 1;
   b6c8e:	4b11      	ldr	r3, [pc, #68]	; (b6cd4 <_Z10cambioModoi+0x94>)
      showBitmap(3,0,"Iniciando modo AVANZADO...");
   b6c90:	4913      	ldr	r1, [pc, #76]	; (b6ce0 <_Z10cambioModoi+0xa0>)
      MODE = 1;
   b6c92:	701c      	strb	r4, [r3, #0]
      showBitmap(3,0,"Iniciando modo AVANZADO...");
   b6c94:	e7df      	b.n	b6c56 <_Z10cambioModoi+0x16>
   } else if (modo == 2) {
   b6c96:	2802      	cmp	r0, #2
   b6c98:	d108      	bne.n	b6cac <_Z10cambioModoi+0x6c>
      Serial.println("Modo MUSICA detectado");
   b6c9a:	f004 f8a7 	bl	badec <_Z16_fetch_usbserialv>
   b6c9e:	4911      	ldr	r1, [pc, #68]	; (b6ce4 <_Z10cambioModoi+0xa4>)
   b6ca0:	f003 fe55 	bl	ba94e <_ZN5Print7printlnEPKc>
      MODE = 2;
   b6ca4:	4b0b      	ldr	r3, [pc, #44]	; (b6cd4 <_Z10cambioModoi+0x94>)
      showBitmap(3,0,"Iniciando modo MUSICA...");
   b6ca6:	4910      	ldr	r1, [pc, #64]	; (b6ce8 <_Z10cambioModoi+0xa8>)
      MODE = 2;
   b6ca8:	701c      	strb	r4, [r3, #0]
      showBitmap(3,0,"Iniciando modo MUSICA...");
   b6caa:	e7d4      	b.n	b6c56 <_Z10cambioModoi+0x16>
   } else if (modo == 3) {
   b6cac:	2803      	cmp	r0, #3
   b6cae:	d1dd      	bne.n	b6c6c <_Z10cambioModoi+0x2c>
      Serial.println("Modo EXPLORA detectado");
   b6cb0:	f004 f89c 	bl	badec <_Z16_fetch_usbserialv>
   b6cb4:	490d      	ldr	r1, [pc, #52]	; (b6cec <_Z10cambioModoi+0xac>)
   b6cb6:	f003 fe4a 	bl	ba94e <_ZN5Print7printlnEPKc>
      MODE = 3;
   b6cba:	4b06      	ldr	r3, [pc, #24]	; (b6cd4 <_Z10cambioModoi+0x94>)
      showBitmap(3,0,"Iniciando modo EXPLORA...");
   b6cbc:	490c      	ldr	r1, [pc, #48]	; (b6cf0 <_Z10cambioModoi+0xb0>)
      MODE = 3;
   b6cbe:	701c      	strb	r4, [r3, #0]
      showBitmap(3,0,"Iniciando modo EXPLORA...");
   b6cc0:	4668      	mov	r0, sp
   b6cc2:	f003 fd76 	bl	ba7b2 <_ZN6StringC1EPK19__FlashStringHelper>
   b6cc6:	466a      	mov	r2, sp
   b6cc8:	2100      	movs	r1, #0
   b6cca:	4620      	mov	r0, r4
   b6ccc:	e7c9      	b.n	b6c62 <_Z10cambioModoi+0x22>
   b6cce:	bf00      	nop
   b6cd0:	000bbce4 	.word	0x000bbce4
   b6cd4:	2003c73e 	.word	0x2003c73e
   b6cd8:	000bbcfa 	.word	0x000bbcfa
   b6cdc:	000bbd13 	.word	0x000bbd13
   b6ce0:	000bbd2b 	.word	0x000bbd2b
   b6ce4:	000bbd46 	.word	0x000bbd46
   b6ce8:	000bbd5c 	.word	0x000bbd5c
   b6cec:	000bbd75 	.word	0x000bbd75
   b6cf0:	000bbd8c 	.word	0x000bbd8c

000b6cf4 <loop>:
{
   b6cf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (iniciando) {
   b6cf8:	f8df 82dc 	ldr.w	r8, [pc, #732]	; b6fd8 <loop+0x2e4>
   b6cfc:	f898 3000 	ldrb.w	r3, [r8]
{
   b6d00:	f5ad 7d45 	sub.w	sp, sp, #788	; 0x314
  if (iniciando) {
   b6d04:	2b00      	cmp	r3, #0
   b6d06:	d034      	beq.n	b6d72 <loop+0x7e>
   b6d08:	f003 f98e 	bl	ba028 <HAL_Timer_Get_Milli_Seconds>
    currentTime = millis();
   b6d0c:	4f9b      	ldr	r7, [pc, #620]	; (b6f7c <loop+0x288>)
    while(currentTime-startTime<limit){
   b6d0e:	f8df 9294 	ldr.w	r9, [pc, #660]	; b6fa4 <loop+0x2b0>
   b6d12:	f8df a294 	ldr.w	sl, [pc, #660]	; b6fa8 <loop+0x2b4>
    currentTime = millis();
   b6d16:	6038      	str	r0, [r7, #0]
    while(currentTime-startTime<limit){
   b6d18:	f8d9 2000 	ldr.w	r2, [r9]
   b6d1c:	683b      	ldr	r3, [r7, #0]
   b6d1e:	1a9b      	subs	r3, r3, r2
   b6d20:	f8da 2000 	ldr.w	r2, [sl]
   b6d24:	4293      	cmp	r3, r2
   b6d26:	d203      	bcs.n	b6d30 <loop+0x3c>
   b6d28:	f003 f97e 	bl	ba028 <HAL_Timer_Get_Milli_Seconds>
      currentTime = millis();
   b6d2c:	6038      	str	r0, [r7, #0]
    while(currentTime-startTime<limit){
   b6d2e:	e7f3      	b.n	b6d18 <loop+0x24>
    display.clearDisplay();
   b6d30:	4e93      	ldr	r6, [pc, #588]	; (b6f80 <loop+0x28c>)
   b6d32:	4630      	mov	r0, r6
   b6d34:	f002 fd3a 	bl	b97ac <_ZN16Adafruit_SSD130612clearDisplayEv>
    display.setTextSize(1.5);
   b6d38:	2101      	movs	r1, #1
   b6d3a:	4630      	mov	r0, r6
   b6d3c:	f001 fe71 	bl	b8a22 <_ZN12Adafruit_GFX11setTextSizeEh>
    @param   c   16-bit 5-6-5 Color to draw text with
    @note    For 'transparent' background, background and foreground
             are set to same color rather than using a separate flag.
  */
  /**********************************************************************/
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   b6d40:	2500      	movs	r5, #0
   b6d42:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   b6d46:	e9c6 5304 	strd	r5, r3, [r6, #16]
    if( MODE == 0 )
   b6d4a:	4b8e      	ldr	r3, [pc, #568]	; (b6f84 <loop+0x290>)
      showBitmap(0,0,"");
   b6d4c:	498e      	ldr	r1, [pc, #568]	; (b6f88 <loop+0x294>)
    if( MODE == 0 )
   b6d4e:	781c      	ldrb	r4, [r3, #0]
      showBitmap(0,0,"");
   b6d50:	a8c0      	add	r0, sp, #768	; 0x300
    if( MODE == 0 )
   b6d52:	2c00      	cmp	r4, #0
   b6d54:	d15d      	bne.n	b6e12 <loop+0x11e>
      showBitmap(0,0,"");
   b6d56:	f003 fd2c 	bl	ba7b2 <_ZN6StringC1EPK19__FlashStringHelper>
   b6d5a:	aac0      	add	r2, sp, #768	; 0x300
   b6d5c:	4621      	mov	r1, r4
   b6d5e:	4620      	mov	r0, r4
      showBitmap(1,2,"Zumbador:");
   b6d60:	f7ff fce0 	bl	b6724 <_Z10showBitmapii6String>
   b6d64:	a8c0      	add	r0, sp, #768	; 0x300
   b6d66:	f003 fcd9 	bl	ba71c <_ZN6StringD1Ev>
    iniciando = false;
   b6d6a:	2300      	movs	r3, #0
   b6d6c:	f888 3000 	strb.w	r3, [r8]
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
   b6d70:	6133      	str	r3, [r6, #16]
  if (mfrc522.PICC_IsNewCardPresent())
   b6d72:	4886      	ldr	r0, [pc, #536]	; (b6f8c <loop+0x298>)
   b6d74:	4d86      	ldr	r5, [pc, #536]	; (b6f90 <loop+0x29c>)
   b6d76:	f002 f8e7 	bl	b8f48 <_ZN7MFRC52221PICC_IsNewCardPresentEv>
   b6d7a:	b190      	cbz	r0, b6da2 <loop+0xae>
    Serial.print("Tag Detectada --> ");
   b6d7c:	f004 f836 	bl	badec <_Z16_fetch_usbserialv>
   b6d80:	4984      	ldr	r1, [pc, #528]	; (b6f94 <loop+0x2a0>)
   b6d82:	f003 fdd1 	bl	ba928 <_ZN5Print5printEPKc>
    if (!mfrc522.PICC_ReadCardSerial())
   b6d86:	4881      	ldr	r0, [pc, #516]	; (b6f8c <loop+0x298>)
   b6d88:	f002 faaf 	bl	b92ea <_ZN7MFRC52219PICC_ReadCardSerialEv>
    getTagID(tagInfo);
   b6d8c:	4882      	ldr	r0, [pc, #520]	; (b6f98 <loop+0x2a4>)
   b6d8e:	f7fe ff49 	bl	b5c24 <_Z8getTagIDPi>
    play = false;
   b6d92:	2300      	movs	r3, #0
   b6d94:	702b      	strb	r3, [r5, #0]
    if ( MODE == 0 ) {
   b6d96:	4b7b      	ldr	r3, [pc, #492]	; (b6f84 <loop+0x290>)
   b6d98:	781b      	ldrb	r3, [r3, #0]
   b6d9a:	2b00      	cmp	r3, #0
   b6d9c:	d163      	bne.n	b6e66 <loop+0x172>
      pitidoOFF0();
   b6d9e:	f7fe fb6c 	bl	b547a <_Z10pitidoOFF0v>
  if (!play && init) {
   b6da2:	782b      	ldrb	r3, [r5, #0]
   b6da4:	b923      	cbnz	r3, b6db0 <loop+0xbc>
   b6da6:	4b7d      	ldr	r3, [pc, #500]	; (b6f9c <loop+0x2a8>)
   b6da8:	781b      	ldrb	r3, [r3, #0]
   b6daa:	b10b      	cbz	r3, b6db0 <loop+0xbc>
    ledApagar();
   b6dac:	f7fe fabc 	bl	b5328 <_Z9ledApagarv>
  if (bitmap) {
   b6db0:	4e7b      	ldr	r6, [pc, #492]	; (b6fa0 <loop+0x2ac>)
   b6db2:	7833      	ldrb	r3, [r6, #0]
   b6db4:	2b00      	cmp	r3, #0
   b6db6:	d067      	beq.n	b6e88 <loop+0x194>
   b6db8:	f003 f936 	bl	ba028 <HAL_Timer_Get_Milli_Seconds>
    currentTime = millis();
   b6dbc:	4b6f      	ldr	r3, [pc, #444]	; (b6f7c <loop+0x288>)
   b6dbe:	6018      	str	r0, [r3, #0]
    if ( currentTime-startTime >= limit ) {
   b6dc0:	4b78      	ldr	r3, [pc, #480]	; (b6fa4 <loop+0x2b0>)
   b6dc2:	681b      	ldr	r3, [r3, #0]
   b6dc4:	1ac0      	subs	r0, r0, r3
   b6dc6:	4b78      	ldr	r3, [pc, #480]	; (b6fa8 <loop+0x2b4>)
   b6dc8:	681b      	ldr	r3, [r3, #0]
   b6dca:	4298      	cmp	r0, r3
   b6dcc:	d35c      	bcc.n	b6e88 <loop+0x194>
   b6dce:	486c      	ldr	r0, [pc, #432]	; (b6f80 <loop+0x28c>)
      for (int i = 0; i < posicion; i++)
   b6dd0:	4f76      	ldr	r7, [pc, #472]	; (b6fac <loop+0x2b8>)
          snprintf(buf, sizeof(buf), "...");
   b6dd2:	f8df 8208 	ldr.w	r8, [pc, #520]	; b6fdc <loop+0x2e8>
      bitmap=false;
   b6dd6:	2400      	movs	r4, #0
   b6dd8:	6104      	str	r4, [r0, #16]
   b6dda:	7034      	strb	r4, [r6, #0]
      display.clearDisplay();
   b6ddc:	f002 fce6 	bl	b97ac <_ZN16Adafruit_SSD130612clearDisplayEv>
      display.display();
   b6de0:	4867      	ldr	r0, [pc, #412]	; (b6f80 <loop+0x28c>)
          snprintf(buf, sizeof(buf), "...");
   b6de2:	4e73      	ldr	r6, [pc, #460]	; (b6fb0 <loop+0x2bc>)
      display.display();
   b6de4:	f002 ff4a 	bl	b9c7c <_ZN16Adafruit_SSD13067displayEv>
      for (int i = 0; i < posicion; i++)
   b6de8:	683b      	ldr	r3, [r7, #0]
   b6dea:	42a3      	cmp	r3, r4
   b6dec:	dd4c      	ble.n	b6e88 <loop+0x194>
        if (i<23) {
   b6dee:	2c16      	cmp	r4, #22
   b6df0:	dc43      	bgt.n	b6e7a <loop+0x186>
          snprintf(buf, sizeof(buf), secuencia[i]);
   b6df2:	4b70      	ldr	r3, [pc, #448]	; (b6fb4 <loop+0x2c0>)
	const char * c_str() const { return buffer; }
   b6df4:	0122      	lsls	r2, r4, #4
   b6df6:	2140      	movs	r1, #64	; 0x40
   b6df8:	58d2      	ldr	r2, [r2, r3]
   b6dfa:	4630      	mov	r0, r6
   b6dfc:	f003 fb18 	bl	ba430 <snprintf>
        display.print(buf);
   b6e00:	4631      	mov	r1, r6
   b6e02:	485f      	ldr	r0, [pc, #380]	; (b6f80 <loop+0x28c>)
   b6e04:	f003 fd90 	bl	ba928 <_ZN5Print5printEPKc>
        display.display();
   b6e08:	485d      	ldr	r0, [pc, #372]	; (b6f80 <loop+0x28c>)
   b6e0a:	f002 ff37 	bl	b9c7c <_ZN16Adafruit_SSD13067displayEv>
      for (int i = 0; i < posicion; i++)
   b6e0e:	3401      	adds	r4, #1
   b6e10:	e7ea      	b.n	b6de8 <loop+0xf4>
    } else if (MODE == 1)
   b6e12:	2c01      	cmp	r4, #1
   b6e14:	d105      	bne.n	b6e22 <loop+0x12e>
      showBitmap(0,3,"");
   b6e16:	f003 fccc 	bl	ba7b2 <_ZN6StringC1EPK19__FlashStringHelper>
   b6e1a:	aac0      	add	r2, sp, #768	; 0x300
   b6e1c:	4621      	mov	r1, r4
   b6e1e:	4628      	mov	r0, r5
   b6e20:	e79e      	b.n	b6d60 <loop+0x6c>
    } else if (MODE == 3)
   b6e22:	2c03      	cmp	r4, #3
   b6e24:	d0f7      	beq.n	b6e16 <loop+0x122>
      showBitmap(0,2,"");
   b6e26:	f003 fcc4 	bl	ba7b2 <_ZN6StringC1EPK19__FlashStringHelper>
   b6e2a:	aac0      	add	r2, sp, #768	; 0x300
   b6e2c:	2102      	movs	r1, #2
   b6e2e:	4628      	mov	r0, r5
   b6e30:	f7ff fc78 	bl	b6724 <_Z10showBitmapii6String>
   b6e34:	a8c0      	add	r0, sp, #768	; 0x300
   b6e36:	f003 fc71 	bl	ba71c <_ZN6StringD1Ev>
      bitmap=false;
   b6e3a:	4b59      	ldr	r3, [pc, #356]	; (b6fa0 <loop+0x2ac>)
   b6e3c:	701d      	strb	r5, [r3, #0]
      while(currentTime-startTime<limit){
   b6e3e:	f8d9 2000 	ldr.w	r2, [r9]
   b6e42:	683b      	ldr	r3, [r7, #0]
   b6e44:	1a9b      	subs	r3, r3, r2
   b6e46:	f8da 2000 	ldr.w	r2, [sl]
   b6e4a:	4293      	cmp	r3, r2
   b6e4c:	d203      	bcs.n	b6e56 <loop+0x162>
   b6e4e:	f003 f8eb 	bl	ba028 <HAL_Timer_Get_Milli_Seconds>
        currentTime = millis();
   b6e52:	6038      	str	r0, [r7, #0]
      while(currentTime-startTime<limit){
   b6e54:	e7f3      	b.n	b6e3e <loop+0x14a>
      showBitmap(1,2,"Zumbador:");
   b6e56:	4958      	ldr	r1, [pc, #352]	; (b6fb8 <loop+0x2c4>)
   b6e58:	a8c0      	add	r0, sp, #768	; 0x300
   b6e5a:	f003 fcaa 	bl	ba7b2 <_ZN6StringC1EPK19__FlashStringHelper>
   b6e5e:	aac0      	add	r2, sp, #768	; 0x300
   b6e60:	2102      	movs	r1, #2
   b6e62:	2001      	movs	r0, #1
   b6e64:	e77c      	b.n	b6d60 <loop+0x6c>
      pitidoOFF1(2);
   b6e66:	2002      	movs	r0, #2
   b6e68:	f7fe fbdb 	bl	b5622 <_Z10pitidoOFF1i>
      pitidoOFF1(4);
   b6e6c:	2004      	movs	r0, #4
   b6e6e:	f7fe fbd8 	bl	b5622 <_Z10pitidoOFF1i>
      pitidoOFF1(6);
   b6e72:	2006      	movs	r0, #6
   b6e74:	f7fe fbd5 	bl	b5622 <_Z10pitidoOFF1i>
   b6e78:	e793      	b.n	b6da2 <loop+0xae>
        } else if (i==23){
   b6e7a:	2c17      	cmp	r4, #23
   b6e7c:	d1c0      	bne.n	b6e00 <loop+0x10c>
          snprintf(buf, sizeof(buf), "...");
   b6e7e:	4641      	mov	r1, r8
   b6e80:	4630      	mov	r0, r6
   b6e82:	f004 fb55 	bl	bb530 <strcpy>
   b6e86:	e7bb      	b.n	b6e00 <loop+0x10c>
  if ( MODE == 0 ) 
   b6e88:	4b3e      	ldr	r3, [pc, #248]	; (b6f84 <loop+0x290>)
    switch (tagInfo[0])
   b6e8a:	4c43      	ldr	r4, [pc, #268]	; (b6f98 <loop+0x2a4>)
  if ( MODE == 0 ) 
   b6e8c:	781f      	ldrb	r7, [r3, #0]
    switch (tagInfo[0])
   b6e8e:	6826      	ldr	r6, [r4, #0]
  if ( MODE == 0 ) 
   b6e90:	2f00      	cmp	r7, #0
   b6e92:	f040 8139 	bne.w	b7108 <loop+0x414>
    switch (tagInfo[0])
   b6e96:	f8df 8148 	ldr.w	r8, [pc, #328]	; b6fe0 <loop+0x2ec>
   b6e9a:	2e00      	cmp	r6, #0
   b6e9c:	f000 80a2 	beq.w	b6fe4 <loop+0x2f0>
   b6ea0:	2e06      	cmp	r6, #6
   b6ea2:	f040 8110 	bne.w	b70c6 <loop+0x3d2>
      pitidoBlink0();
   b6ea6:	f7fe fafb 	bl	b54a0 <_Z12pitidoBlink0v>
        switch (tagInfo[1])
   b6eaa:	6866      	ldr	r6, [r4, #4]
   b6eac:	2e01      	cmp	r6, #1
   b6eae:	d03f      	beq.n	b6f30 <loop+0x23c>
   b6eb0:	2e02      	cmp	r6, #2
   b6eb2:	d03f      	beq.n	b6f34 <loop+0x240>
   b6eb4:	b92e      	cbnz	r6, b6ec2 <loop+0x1ce>
            cambioModo(tagInfo[2]);
   b6eb6:	68a0      	ldr	r0, [r4, #8]
   b6eb8:	f7ff fec2 	bl	b6c40 <_Z10cambioModoi>
            resetFunc();
   b6ebc:	4b3f      	ldr	r3, [pc, #252]	; (b6fbc <loop+0x2c8>)
   b6ebe:	681b      	ldr	r3, [r3, #0]
   b6ec0:	4798      	blx	r3
    if (tagInfo[0]!=-1) { 
   b6ec2:	6823      	ldr	r3, [r4, #0]
   b6ec4:	3301      	adds	r3, #1
      tagInfo[0]=-1;
   b6ec6:	bf1c      	itt	ne
   b6ec8:	f04f 33ff 	movne.w	r3, #4294967295
   b6ecc:	6023      	strne	r3, [r4, #0]
    if (numActuadoresBloque > 0 && play == true)
   b6ece:	f8d8 4000 	ldr.w	r4, [r8]
   b6ed2:	2c00      	cmp	r4, #0
   b6ed4:	f340 8104 	ble.w	b70e0 <loop+0x3ec>
   b6ed8:	782b      	ldrb	r3, [r5, #0]
   b6eda:	2b00      	cmp	r3, #0
   b6edc:	f000 8110 	beq.w	b7100 <loop+0x40c>
      valor = leerSensor(bloques[0].sensores[0].id, 1, bloques[0].sensores[0].puerto);
   b6ee0:	4c37      	ldr	r4, [pc, #220]	; (b6fc0 <loop+0x2cc>)
   b6ee2:	4d38      	ldr	r5, [pc, #224]	; (b6fc4 <loop+0x2d0>)
   b6ee4:	6922      	ldr	r2, [r4, #16]
   b6ee6:	6860      	ldr	r0, [r4, #4]
   b6ee8:	2101      	movs	r1, #1
   b6eea:	f7fe f975 	bl	b51d8 <_Z10leerSensoriii>
      activarActuador(bloques[0].actuadores[0].id, estado, valor);
   b6eee:	4b36      	ldr	r3, [pc, #216]	; (b6fc8 <loop+0x2d4>)
      valor = leerSensor(bloques[0].sensores[0].id, 1, bloques[0].sensores[0].puerto);
   b6ef0:	7028      	strb	r0, [r5, #0]
      activarActuador(bloques[0].actuadores[0].id, estado, valor);
   b6ef2:	6819      	ldr	r1, [r3, #0]
      valor = leerSensor(bloques[0].sensores[0].id, 1, bloques[0].sensores[0].puerto);
   b6ef4:	4602      	mov	r2, r0
      activarActuador(bloques[0].actuadores[0].id, estado, valor);
   b6ef6:	f8d4 0148 	ldr.w	r0, [r4, #328]	; 0x148
   b6efa:	f7fe fb15 	bl	b5528 <_Z15activarActuadoriib>
      valor ? snprintf(buf, sizeof(buf), "TRUE") : snprintf(buf, sizeof(buf), "FALSE");
   b6efe:	782b      	ldrb	r3, [r5, #0]
   b6f00:	2b00      	cmp	r3, #0
   b6f02:	f000 80eb 	beq.w	b70dc <loop+0x3e8>
   b6f06:	4931      	ldr	r1, [pc, #196]	; (b6fcc <loop+0x2d8>)
      display.clearDisplay();
   b6f08:	4c1d      	ldr	r4, [pc, #116]	; (b6f80 <loop+0x28c>)
      valor ? snprintf(buf, sizeof(buf), "TRUE") : snprintf(buf, sizeof(buf), "FALSE");
   b6f0a:	4829      	ldr	r0, [pc, #164]	; (b6fb0 <loop+0x2bc>)
   b6f0c:	f004 fb10 	bl	bb530 <strcpy>
      display.clearDisplay();
   b6f10:	4620      	mov	r0, r4
   b6f12:	f002 fc4b 	bl	b97ac <_ZN16Adafruit_SSD130612clearDisplayEv>
   b6f16:	2300      	movs	r3, #0
      display.print(buf);
   b6f18:	4925      	ldr	r1, [pc, #148]	; (b6fb0 <loop+0x2bc>)
   b6f1a:	6123      	str	r3, [r4, #16]
   b6f1c:	4620      	mov	r0, r4
   b6f1e:	f003 fd03 	bl	ba928 <_ZN5Print5printEPKc>
      display.display();
   b6f22:	4620      	mov	r0, r4
   b6f24:	f50d 7d45 	add.w	sp, sp, #788	; 0x314
   b6f28:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        }  else if (numSensoresBloque==0 && play == true) {
   b6f2c:	f002 bea6 	b.w	b9c7c <_ZN16Adafruit_SSD13067displayEv>
            play = true;
   b6f30:	702e      	strb	r6, [r5, #0]
            break;
   b6f32:	e7c6      	b.n	b6ec2 <loop+0x1ce>
            if ( tagInfo[2] == 1 ) {
   b6f34:	68a3      	ldr	r3, [r4, #8]
   b6f36:	2b01      	cmp	r3, #1
   b6f38:	d10e      	bne.n	b6f58 <loop+0x264>
              showBitmap(3,0,"Borrado completo realizado");
   b6f3a:	4925      	ldr	r1, [pc, #148]	; (b6fd0 <loop+0x2dc>)
   b6f3c:	a8c0      	add	r0, sp, #768	; 0x300
   b6f3e:	f7fd fd99 	bl	b4a74 <_Z10borradoALLi.part.0>
   b6f42:	f003 fc36 	bl	ba7b2 <_ZN6StringC1EPK19__FlashStringHelper>
   b6f46:	aac0      	add	r2, sp, #768	; 0x300
   b6f48:	4639      	mov	r1, r7
   b6f4a:	2003      	movs	r0, #3
          showBitmap(2,0,"");
   b6f4c:	f7ff fbea 	bl	b6724 <_Z10showBitmapii6String>
   b6f50:	a8c0      	add	r0, sp, #768	; 0x300
   b6f52:	f003 fbe3 	bl	ba71c <_ZN6StringD1Ev>
   b6f56:	e7b4      	b.n	b6ec2 <loop+0x1ce>
              showBitmap(2,1,"");
   b6f58:	490b      	ldr	r1, [pc, #44]	; (b6f88 <loop+0x294>)
   b6f5a:	a8c0      	add	r0, sp, #768	; 0x300
   b6f5c:	f003 fc29 	bl	ba7b2 <_ZN6StringC1EPK19__FlashStringHelper>
   b6f60:	aac0      	add	r2, sp, #768	; 0x300
   b6f62:	2101      	movs	r1, #1
   b6f64:	4630      	mov	r0, r6
   b6f66:	f7ff fbdd 	bl	b6724 <_Z10showBitmapii6String>
   b6f6a:	a8c0      	add	r0, sp, #768	; 0x300
   b6f6c:	f003 fbd6 	bl	ba71c <_ZN6StringD1Ev>
              Serial.println("Borrado no permitido para este modo");
   b6f70:	f003 ff3c 	bl	badec <_Z16_fetch_usbserialv>
   b6f74:	4917      	ldr	r1, [pc, #92]	; (b6fd4 <loop+0x2e0>)
   b6f76:	f003 fcea 	bl	ba94e <_ZN5Print7printlnEPKc>
   b6f7a:	e7a2      	b.n	b6ec2 <loop+0x1ce>
   b6f7c:	2003d348 	.word	0x2003d348
   b6f80:	2003d34c 	.word	0x2003d34c
   b6f84:	2003c73e 	.word	0x2003c73e
   b6f88:	000bb886 	.word	0x000bb886
   b6f8c:	2003d6f4 	.word	0x2003d6f4
   b6f90:	2003da30 	.word	0x2003da30
   b6f94:	000bbdb0 	.word	0x000bbdb0
   b6f98:	2003c6a4 	.word	0x2003c6a4
   b6f9c:	2003d6e4 	.word	0x2003d6e4
   b6fa0:	2003c74d 	.word	0x2003c74d
   b6fa4:	2003dc30 	.word	0x2003dc30
   b6fa8:	2003c698 	.word	0x2003c698
   b6fac:	2003da34 	.word	0x2003da34
   b6fb0:	2003d301 	.word	0x2003d301
   b6fb4:	2003da50 	.word	0x2003da50
   b6fb8:	000bbda6 	.word	0x000bbda6
   b6fbc:	2003da48 	.word	0x2003da48
   b6fc0:	2003cd28 	.word	0x2003cd28
   b6fc4:	2003e6b8 	.word	0x2003e6b8
   b6fc8:	2003d6dc 	.word	0x2003d6dc
   b6fcc:	000bc089 	.word	0x000bc089
   b6fd0:	000bbdc3 	.word	0x000bbdc3
   b6fd4:	000bbdde 	.word	0x000bbdde
   b6fd8:	2003c697 	.word	0x2003c697
   b6fdc:	000bbd71 	.word	0x000bbd71
   b6fe0:	2003da24 	.word	0x2003da24
        id = tagInfo[3];
   b6fe4:	4f9a      	ldr	r7, [pc, #616]	; (b7250 <loop+0x55c>)
   b6fe6:	68e3      	ldr	r3, [r4, #12]
        tipo = tagInfo[2];
   b6fe8:	4e9a      	ldr	r6, [pc, #616]	; (b7254 <loop+0x560>)
        if (tagInfo[1] == 0) {
   b6fea:	f8d4 a004 	ldr.w	sl, [r4, #4]
        id = tagInfo[3];
   b6fee:	603b      	str	r3, [r7, #0]
        tipo = tagInfo[2];
   b6ff0:	68a3      	ldr	r3, [r4, #8]
   b6ff2:	f8df 92a8 	ldr.w	r9, [pc, #680]	; b729c <loop+0x5a8>
   b6ff6:	6033      	str	r3, [r6, #0]
        if (tagInfo[1] == 0) {
   b6ff8:	f1ba 0f00 	cmp.w	sl, #0
   b6ffc:	d123      	bne.n	b7046 <loop+0x352>
          Serial.println("Sensor detectado");
   b6ffe:	f003 fef5 	bl	badec <_Z16_fetch_usbserialv>
   b7002:	4995      	ldr	r1, [pc, #596]	; (b7258 <loop+0x564>)
   b7004:	f003 fca3 	bl	ba94e <_ZN5Print7printlnEPKc>
          bloques[0].sensores[0] = sensor;
   b7008:	4a94      	ldr	r2, [pc, #592]	; (b725c <loop+0x568>)
          tipo == 0 ? sensor.puerto = 0 : sensor.puerto = 2;
   b700a:	6833      	ldr	r3, [r6, #0]
          sensor.id = id;
   b700c:	6839      	ldr	r1, [r7, #0]
          bloques[0].sensores[0] = sensor;
   b700e:	6051      	str	r1, [r2, #4]
          bloques[0].numSensores++;
   b7010:	6811      	ldr	r1, [r2, #0]
          tipo == 0 ? sensor.puerto = 0 : sensor.puerto = 2;
   b7012:	2b00      	cmp	r3, #0
          bloques[0].numSensores++;
   b7014:	f101 0101 	add.w	r1, r1, #1
          tipo == 0 ? sensor.puerto = 0 : sensor.puerto = 2;
   b7018:	bf18      	it	ne
   b701a:	2302      	movne	r3, #2
          bloques[0].numSensores++;
   b701c:	6011      	str	r1, [r2, #0]
          bloques[0].sensores[0] = sensor;
   b701e:	6113      	str	r3, [r2, #16]
          numSensoresBloque++;
   b7020:	f8d9 2000 	ldr.w	r2, [r9]
            showBitmap(1,3,""); //A0
   b7024:	498e      	ldr	r1, [pc, #568]	; (b7260 <loop+0x56c>)
          numSensoresBloque++;
   b7026:	3201      	adds	r2, #1
   b7028:	f8c9 2000 	str.w	r2, [r9]
            showBitmap(1,3,""); //A0
   b702c:	a8c0      	add	r0, sp, #768	; 0x300
          if (sensor.puerto == 0) {
   b702e:	2b00      	cmp	r3, #0
   b7030:	d13b      	bne.n	b70aa <loop+0x3b6>
            showBitmap(1,3,""); //A0
   b7032:	f003 fbbe 	bl	ba7b2 <_ZN6StringC1EPK19__FlashStringHelper>
   b7036:	aac0      	add	r2, sp, #768	; 0x300
   b7038:	2103      	movs	r1, #3
            showBitmap(1,0,""); //D2
   b703a:	2001      	movs	r0, #1
   b703c:	f7ff fb72 	bl	b6724 <_Z10showBitmapii6String>
   b7040:	a8c0      	add	r0, sp, #768	; 0x300
   b7042:	f003 fb6b 	bl	ba71c <_ZN6StringD1Ev>
        if ( numSensoresBloque > 0) {
   b7046:	f8d9 3000 	ldr.w	r3, [r9]
   b704a:	2b00      	cmp	r3, #0
   b704c:	dd38      	ble.n	b70c0 <loop+0x3cc>
          if (tagInfo[1] == 1) {
   b704e:	f8d4 9004 	ldr.w	r9, [r4, #4]
   b7052:	f1b9 0f01 	cmp.w	r9, #1
   b7056:	f47f af34 	bne.w	b6ec2 <loop+0x1ce>
            Serial.println("Actuador detectado");
   b705a:	f003 fec7 	bl	badec <_Z16_fetch_usbserialv>
   b705e:	4981      	ldr	r1, [pc, #516]	; (b7264 <loop+0x570>)
   b7060:	f003 fc75 	bl	ba94e <_ZN5Print7printlnEPKc>
            estado = tagInfo[4];
   b7064:	4b80      	ldr	r3, [pc, #512]	; (b7268 <loop+0x574>)
   b7066:	6922      	ldr	r2, [r4, #16]
   b7068:	601a      	str	r2, [r3, #0]
            tipo == 0 ? actuador.puerto = 2 : actuador.puerto = 4;
   b706a:	6833      	ldr	r3, [r6, #0]
            actuador.id = id;
   b706c:	683a      	ldr	r2, [r7, #0]
            tipo == 0 ? actuador.puerto = 2 : actuador.puerto = 4;
   b706e:	2b00      	cmp	r3, #0
            bloques[0].actuadores[0] = actuador;
   b7070:	4b7a      	ldr	r3, [pc, #488]	; (b725c <loop+0x568>)
   b7072:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
            bloques[0].numActuadores++;
   b7076:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
            tipo == 0 ? actuador.puerto = 2 : actuador.puerto = 4;
   b707a:	bf0c      	ite	eq
   b707c:	2102      	moveq	r1, #2
   b707e:	2104      	movne	r1, #4
            bloques[0].numActuadores++;
   b7080:	3201      	adds	r2, #1
            bloques[0].actuadores[0] = actuador;
   b7082:	f8c3 1154 	str.w	r1, [r3, #340]	; 0x154
            bloques[0].numActuadores++;
   b7086:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
            numActuadoresBloque++;
   b708a:	f8d8 3000 	ldr.w	r3, [r8]
            if (actuador.puerto == 2) {
   b708e:	2902      	cmp	r1, #2
            numActuadoresBloque++;
   b7090:	f103 0301 	add.w	r3, r3, #1
              showBitmap(1,4,""); //A2
   b7094:	4972      	ldr	r1, [pc, #456]	; (b7260 <loop+0x56c>)
            numActuadoresBloque++;
   b7096:	f8c8 3000 	str.w	r3, [r8]
              showBitmap(1,4,""); //A2
   b709a:	a8c0      	add	r0, sp, #768	; 0x300
            if (actuador.puerto == 2) {
   b709c:	d10a      	bne.n	b70b4 <loop+0x3c0>
              showBitmap(1,4,""); //A2
   b709e:	f003 fb88 	bl	ba7b2 <_ZN6StringC1EPK19__FlashStringHelper>
   b70a2:	aac0      	add	r2, sp, #768	; 0x300
   b70a4:	2104      	movs	r1, #4
   b70a6:	4648      	mov	r0, r9
   b70a8:	e750      	b.n	b6f4c <loop+0x258>
            showBitmap(1,0,""); //D2
   b70aa:	f003 fb82 	bl	ba7b2 <_ZN6StringC1EPK19__FlashStringHelper>
   b70ae:	aac0      	add	r2, sp, #768	; 0x300
   b70b0:	4651      	mov	r1, sl
   b70b2:	e7c2      	b.n	b703a <loop+0x346>
              showBitmap(1,1,""); //D4
   b70b4:	f003 fb7d 	bl	ba7b2 <_ZN6StringC1EPK19__FlashStringHelper>
   b70b8:	aac0      	add	r2, sp, #768	; 0x300
   b70ba:	4649      	mov	r1, r9
   b70bc:	4648      	mov	r0, r9
   b70be:	e745      	b.n	b6f4c <loop+0x258>
            ledApagar();
   b70c0:	f7fe f932 	bl	b5328 <_Z9ledApagarv>
   b70c4:	e6fd      	b.n	b6ec2 <loop+0x1ce>
        if ( tagInfo[0] != -1 ) {
   b70c6:	3601      	adds	r6, #1
   b70c8:	f43f aefb 	beq.w	b6ec2 <loop+0x1ce>
          showBitmap(2,0,"");
   b70cc:	4964      	ldr	r1, [pc, #400]	; (b7260 <loop+0x56c>)
   b70ce:	a8c0      	add	r0, sp, #768	; 0x300
   b70d0:	f003 fb6f 	bl	ba7b2 <_ZN6StringC1EPK19__FlashStringHelper>
   b70d4:	aac0      	add	r2, sp, #768	; 0x300
   b70d6:	4639      	mov	r1, r7
   b70d8:	2002      	movs	r0, #2
   b70da:	e737      	b.n	b6f4c <loop+0x258>
      valor ? snprintf(buf, sizeof(buf), "TRUE") : snprintf(buf, sizeof(buf), "FALSE");
   b70dc:	4963      	ldr	r1, [pc, #396]	; (b726c <loop+0x578>)
   b70de:	e713      	b.n	b6f08 <loop+0x214>
    } else if (numActuadoresBloque==0 && play == true) {
   b70e0:	d10e      	bne.n	b7100 <loop+0x40c>
   b70e2:	782b      	ldrb	r3, [r5, #0]
   b70e4:	b163      	cbz	r3, b7100 <loop+0x40c>
      showBitmap(2,4,"");
   b70e6:	495e      	ldr	r1, [pc, #376]	; (b7260 <loop+0x56c>)
   b70e8:	a8c0      	add	r0, sp, #768	; 0x300
   b70ea:	f003 fb62 	bl	ba7b2 <_ZN6StringC1EPK19__FlashStringHelper>
   b70ee:	aac0      	add	r2, sp, #768	; 0x300
   b70f0:	2104      	movs	r1, #4
   b70f2:	2002      	movs	r0, #2
   b70f4:	f7ff fb16 	bl	b6724 <_Z10showBitmapii6String>
   b70f8:	a8c0      	add	r0, sp, #768	; 0x300
   b70fa:	f003 fb0f 	bl	ba71c <_ZN6StringD1Ev>
      play=false;
   b70fe:	702c      	strb	r4, [r5, #0]
   b7100:	f50d 7d45 	add.w	sp, sp, #788	; 0x314
   b7104:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  } else if ( MODE == 1 ) {
   b7108:	2f01      	cmp	r7, #1
   b710a:	f040 840f 	bne.w	b792c <loop+0xc38>
    switch (tagInfo[0])
   b710e:	2e01      	cmp	r6, #1
   b7110:	f000 8081 	beq.w	b7216 <loop+0x522>
   b7114:	2e06      	cmp	r6, #6
   b7116:	f040 8364 	bne.w	b77e2 <loop+0xaee>
        switch (tagInfo[1])
   b711a:	6866      	ldr	r6, [r4, #4]
   b711c:	2e01      	cmp	r6, #1
   b711e:	d046      	beq.n	b71ae <loop+0x4ba>
   b7120:	2e02      	cmp	r6, #2
   b7122:	d046      	beq.n	b71b2 <loop+0x4be>
   b7124:	b92e      	cbnz	r6, b7132 <loop+0x43e>
            cambioModo(tagInfo[2]);
   b7126:	68a0      	ldr	r0, [r4, #8]
   b7128:	f7ff fd8a 	bl	b6c40 <_Z10cambioModoi>
            resetFunc();
   b712c:	4b50      	ldr	r3, [pc, #320]	; (b7270 <loop+0x57c>)
   b712e:	681b      	ldr	r3, [r3, #0]
   b7130:	4798      	blx	r3

   b7132:	f04f 33ff 	mov.w	r3, #4294967295
   b7136:	6023      	str	r3, [r4, #0]
      if (!IF_pasado){
   b7138:	782b      	ldrb	r3, [r5, #0]
   b713a:	2b00      	cmp	r3, #0
   b713c:	d0e0      	beq.n	b7100 <loop+0x40c>
          ledObject = ChainableLED(puerto, puerto+1, 5);
   b713e:	4f4d      	ldr	r7, [pc, #308]	; (b7274 <loop+0x580>)
   b7140:	783b      	ldrb	r3, [r7, #0]
   b7142:	b99b      	cbnz	r3, b716c <loop+0x478>
          ledObject.init();
   b7144:	4b4c      	ldr	r3, [pc, #304]	; (b7278 <loop+0x584>)
   b7146:	4e4d      	ldr	r6, [pc, #308]	; (b727c <loop+0x588>)
   b7148:	7819      	ldrb	r1, [r3, #0]
   b714a:	acc0      	add	r4, sp, #768	; 0x300
   b714c:	1c4a      	adds	r2, r1, #1
   b714e:	2305      	movs	r3, #5
   b7150:	b2d2      	uxtb	r2, r2
   b7152:	4620      	mov	r0, r4
   b7154:	f002 fe2c 	bl	b9db0 <_ZN12ChainableLEDC1Ehhh>
   b7158:	e894 0003 	ldmia.w	r4, {r0, r1}
   b715c:	e886 0003 	stmia.w	r6, {r0, r1}
   b7160:	4620      	mov	r0, r4
   b7162:	f002 fe32 	bl	b9dca <_ZN12ChainableLEDD1Ev>
      }
   b7166:	4630      	mov	r0, r6
   b7168:	f002 fed4 	bl	b9f14 <_ZN12ChainableLED4initEv>

   b716c:	2000      	movs	r0, #0
   b716e:	f7fe fda9 	bl	b5cc4 <_Z11serieBeforei>
        // Bloque 1
   b7172:	783b      	ldrb	r3, [r7, #0]
   b7174:	2b00      	cmp	r3, #0
   b7176:	f000 8387 	beq.w	b7888 <loop+0xb94>
          valor = makeEvaluate(bloques[0]);
   b717a:	4e41      	ldr	r6, [pc, #260]	; (b7280 <loop+0x58c>)
   b717c:	6833      	ldr	r3, [r6, #0]
   b717e:	2b00      	cmp	r3, #0
   b7180:	f040 833e 	bne.w	b7800 <loop+0xb0c>
   b7184:	4b35      	ldr	r3, [pc, #212]	; (b725c <loop+0x568>)
   b7186:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
   b718a:	2b00      	cmp	r3, #0
   b718c:	f300 833b 	bgt.w	b7806 <loop+0xb12>
          play = false;
   b7190:	493c      	ldr	r1, [pc, #240]	; (b7284 <loop+0x590>)
   b7192:	a8c0      	add	r0, sp, #768	; 0x300
   b7194:	f003 fb0d 	bl	ba7b2 <_ZN6StringC1EPK19__FlashStringHelper>
   b7198:	aac0      	add	r2, sp, #768	; 0x300
   b719a:	2104      	movs	r1, #4
   b719c:	2002      	movs	r0, #2
   b719e:	f7ff fac1 	bl	b6724 <_Z10showBitmapii6String>
   b71a2:	a8c0      	add	r0, sp, #768	; 0x300
   b71a4:	f003 faba 	bl	ba71c <_ZN6StringD1Ev>
        }
   b71a8:	2300      	movs	r3, #0
   b71aa:	702b      	strb	r3, [r5, #0]
   b71ac:	e349      	b.n	b7842 <loop+0xb4e>
            play = true;
   b71ae:	702e      	strb	r6, [r5, #0]
            break;
   b71b0:	e7bf      	b.n	b7132 <loop+0x43e>
            if ( tagInfo[2] == 1 ) {
   b71b2:	f8d4 8008 	ldr.w	r8, [r4, #8]
   b71b6:	f1b8 0f01 	cmp.w	r8, #1
   b71ba:	d111      	bne.n	b71e0 <loop+0x4ec>
              borradoALL(1);
   b71bc:	4640      	mov	r0, r8
   b71be:	f7fd fc59 	bl	b4a74 <_Z10borradoALLi.part.0>
   b71c2:	f7fe fb07 	bl	b57d4 <_Z10borradoALLi>
              showBitmap(3,0,"Borrado completo realizado");
   b71c6:	4930      	ldr	r1, [pc, #192]	; (b7288 <loop+0x594>)
   b71c8:	a8c0      	add	r0, sp, #768	; 0x300
   b71ca:	f003 faf2 	bl	ba7b2 <_ZN6StringC1EPK19__FlashStringHelper>
   b71ce:	aac0      	add	r2, sp, #768	; 0x300
   b71d0:	2100      	movs	r1, #0
   b71d2:	2003      	movs	r0, #3
        }
   b71d4:	f7ff faa6 	bl	b6724 <_Z10showBitmapii6String>
   b71d8:	a8c0      	add	r0, sp, #768	; 0x300
   b71da:	f003 fa9f 	bl	ba71c <_ZN6StringD1Ev>
   b71de:	e7a8      	b.n	b7132 <loop+0x43e>
            } else if (tagInfo[2] == 2) {
   b71e0:	f1b8 0f02 	cmp.w	r8, #2
   b71e4:	d103      	bne.n	b71ee <loop+0x4fa>
              borradoBLOQUE(1);
   b71e6:	4638      	mov	r0, r7
   b71e8:	f7ff fc44 	bl	b6a74 <_Z13borradoBLOQUEi>
   b71ec:	e7a1      	b.n	b7132 <loop+0x43e>
            } else if(tagInfo[2] == 0) {
   b71ee:	f1b8 0f00 	cmp.w	r8, #0
   b71f2:	d103      	bne.n	b71fc <loop+0x508>
              borra_POP_Avanzado();
   b71f4:	f7fe fe94 	bl	b5f20 <_Z18borra_POP_Avanzadov>
            }
   b71f8:	4924      	ldr	r1, [pc, #144]	; (b728c <loop+0x598>)
   b71fa:	e7e5      	b.n	b71c8 <loop+0x4d4>
              showBitmap(2,1,"");
   b71fc:	f003 fdf6 	bl	badec <_Z16_fetch_usbserialv>
   b7200:	4923      	ldr	r1, [pc, #140]	; (b7290 <loop+0x59c>)
   b7202:	f003 fba4 	bl	ba94e <_ZN5Print7printlnEPKc>
            }
   b7206:	4916      	ldr	r1, [pc, #88]	; (b7260 <loop+0x56c>)
   b7208:	a8c0      	add	r0, sp, #768	; 0x300
   b720a:	f003 fad2 	bl	ba7b2 <_ZN6StringC1EPK19__FlashStringHelper>
   b720e:	aac0      	add	r2, sp, #768	; 0x300
   b7210:	4639      	mov	r1, r7
        }
   b7212:	2002      	movs	r0, #2
   b7214:	e7de      	b.n	b71d4 <loop+0x4e0>
        Serial.print("Ejecutando tag --> ");
   b7216:	f8df 8038 	ldr.w	r8, [pc, #56]	; b7250 <loop+0x55c>
   b721a:	68e3      	ldr	r3, [r4, #12]
   b721c:	f8c8 3000 	str.w	r3, [r8]

   b7220:	f003 fde4 	bl	badec <_Z16_fetch_usbserialv>
   b7224:	491b      	ldr	r1, [pc, #108]	; (b7294 <loop+0x5a0>)
   b7226:	4e0d      	ldr	r6, [pc, #52]	; (b725c <loop+0x568>)
   b7228:	f8df 9070 	ldr.w	r9, [pc, #112]	; b729c <loop+0x5a8>
   b722c:	4f1a      	ldr	r7, [pc, #104]	; (b7298 <loop+0x5a4>)
   b722e:	f8df a070 	ldr.w	sl, [pc, #112]	; b72a0 <loop+0x5ac>
   b7232:	f8df b04c 	ldr.w	fp, [pc, #76]	; b7280 <loop+0x58c>
   b7236:	f003 fb77 	bl	ba928 <_ZN5Print5printEPKc>
        {
   b723a:	6863      	ldr	r3, [r4, #4]
   b723c:	2b05      	cmp	r3, #5
   b723e:	d871      	bhi.n	b7324 <loop+0x630>
   b7240:	e8df f013 	tbh	[pc, r3, lsl #1]
   b7244:	00d30030 	.word	0x00d30030
   b7248:	0267022d 	.word	0x0267022d
   b724c:	02b9029e 	.word	0x02b9029e
   b7250:	2003d6e0 	.word	0x2003d6e0
   b7254:	2003e6b0 	.word	0x2003e6b0
   b7258:	000bbe02 	.word	0x000bbe02
   b725c:	2003cd28 	.word	0x2003cd28
   b7260:	000bb886 	.word	0x000bb886
   b7264:	000bbe13 	.word	0x000bbe13
   b7268:	2003d6dc 	.word	0x2003d6dc
   b726c:	000bc098 	.word	0x000bc098
   b7270:	2003da48 	.word	0x2003da48
   b7274:	2003c73d 	.word	0x2003c73d
   b7278:	2003da38 	.word	0x2003da38
   b727c:	2003d6ec 	.word	0x2003d6ec
   b7280:	2003c69c 	.word	0x2003c69c
   b7284:	000bc09e 	.word	0x000bc09e
   b7288:	000bbdc3 	.word	0x000bbdc3
   b728c:	000bbe26 	.word	0x000bbe26
   b7290:	000bbdde 	.word	0x000bbdde
   b7294:	000bbe44 	.word	0x000bbe44
   b7298:	2003da24 	.word	0x2003da24
   b729c:	2003da2c 	.word	0x2003da2c
   b72a0:	2003da28 	.word	0x2003da28

   b72a4:	4fb5      	ldr	r7, [pc, #724]	; (b757c <loop+0x888>)

   b72a6:	f003 fda1 	bl	badec <_Z16_fetch_usbserialv>
   b72aa:	49b5      	ldr	r1, [pc, #724]	; (b7580 <loop+0x88c>)
   b72ac:	f003 fb4f 	bl	ba94e <_ZN5Print7printlnEPKc>

   b72b0:	783b      	ldrb	r3, [r7, #0]
   b72b2:	2b00      	cmp	r3, #0
   b72b4:	d05d      	beq.n	b7372 <loop+0x67e>
   b72b6:	f8d9 2000 	ldr.w	r2, [r9]
   b72ba:	f8da 3000 	ldr.w	r3, [sl]
   b72be:	429a      	cmp	r2, r3
   b72c0:	d174      	bne.n	b73ac <loop+0x6b8>
   b72c2:	f8d8 0000 	ldr.w	r0, [r8]
   b72c6:	f7fe fb8d 	bl	b59e4 <_Z13isValidSensori>
   b72ca:	2800      	cmp	r0, #0
   b72cc:	d04f      	beq.n	b736e <loop+0x67a>
              
   b72ce:	f8d8 0000 	ldr.w	r0, [r8]
   b72d2:	4fac      	ldr	r7, [pc, #688]	; (b7584 <loop+0x890>)
   b72d4:	f7fe fba8 	bl	b5a28 <_Z11isNewSensori>
   b72d8:	6038      	str	r0, [r7, #0]
                puerto = asignarPuerto(tagInfo[2]);
   b72da:	3001      	adds	r0, #1
   b72dc:	d14d      	bne.n	b737a <loop+0x686>
                showPort(tagInfo[2], puerto);
   b72de:	68a0      	ldr	r0, [r4, #8]
   b72e0:	f7fe fd88 	bl	b5df4 <_Z13asignarPuertoi>
   b72e4:	4601      	mov	r1, r0
   b72e6:	6038      	str	r0, [r7, #0]

   b72e8:	68a0      	ldr	r0, [r4, #8]
   b72ea:	f7ff fb75 	bl	b69d8 <_Z8showPortii>

   b72ee:	6839      	ldr	r1, [r7, #0]
   b72f0:	1c48      	adds	r0, r1, #1
   b72f2:	d04f      	beq.n	b7394 <loop+0x6a0>
                newSensor.puerto = puerto;
   b72f4:	f8db 0000 	ldr.w	r0, [fp]
                bloques[numBloque].numSensores++;
   b72f8:	f8d9 c000 	ldr.w	ip, [r9]
   b72fc:	f8d8 7000 	ldr.w	r7, [r8]
   b7300:	f44f 723b 	mov.w	r2, #748	; 0x2ec
   b7304:	4342      	muls	r2, r0
   b7306:	eb02 130c 	add.w	r3, r2, ip, lsl #4
   b730a:	4433      	add	r3, r6
   b730c:	605f      	str	r7, [r3, #4]
   b730e:	6927      	ldr	r7, [r4, #16]
   b7310:	6119      	str	r1, [r3, #16]
   b7312:	e9c3 7002 	strd	r7, r0, [r3, #8]
                numSensoresBloque++;
   b7316:	58b3      	ldr	r3, [r6, r2]
   b7318:	3301      	adds	r3, #1

   b731a:	f10c 0701 	add.w	r7, ip, #1
                numSensoresBloque++;
   b731e:	50b3      	str	r3, [r6, r2]

   b7320:	f8c9 7000 	str.w	r7, [r9]
        Serial.println("# Bloque | # Sensores | # Condiciones | # Actuadores");
   b7324:	f003 fd62 	bl	badec <_Z16_fetch_usbserialv>
   b7328:	4997      	ldr	r1, [pc, #604]	; (b7588 <loop+0x894>)
   b732a:	f003 fb10 	bl	ba94e <_ZN5Print7printlnEPKc>
        Serial.printlnf("    %d \t|\t %d \t|\t %d \t|\t %d \t|\t %d", numBloque, numSensoresBloque, numCondicionalesBloque, numActuadoresBloque, bloques[numBloque].numActuadores);
   b732e:	f003 fd5d 	bl	badec <_Z16_fetch_usbserialv>
   b7332:	4996      	ldr	r1, [pc, #600]	; (b758c <loop+0x898>)
   b7334:	f003 fb0b 	bl	ba94e <_ZN5Print7printlnEPKc>
        Serial.println();
   b7338:	f003 fd58 	bl	badec <_Z16_fetch_usbserialv>
   b733c:	4b94      	ldr	r3, [pc, #592]	; (b7590 <loop+0x89c>)
   b733e:	4995      	ldr	r1, [pc, #596]	; (b7594 <loop+0x8a0>)
   b7340:	681a      	ldr	r2, [r3, #0]
   b7342:	f44f 733b 	mov.w	r3, #748	; 0x2ec
   b7346:	fb03 6602 	mla	r6, r3, r2, r6
   b734a:	f8d6 3144 	ldr.w	r3, [r6, #324]	; 0x144
   b734e:	9302      	str	r3, [sp, #8]
   b7350:	4b91      	ldr	r3, [pc, #580]	; (b7598 <loop+0x8a4>)
   b7352:	681b      	ldr	r3, [r3, #0]
   b7354:	9301      	str	r3, [sp, #4]
   b7356:	4b91      	ldr	r3, [pc, #580]	; (b759c <loop+0x8a8>)
   b7358:	681b      	ldr	r3, [r3, #0]
   b735a:	9300      	str	r3, [sp, #0]
   b735c:	4b90      	ldr	r3, [pc, #576]	; (b75a0 <loop+0x8ac>)
   b735e:	681b      	ldr	r3, [r3, #0]
   b7360:	f7fd fbc9 	bl	b4af6 <_ZN5Print8printlnfEPKcz>

   b7364:	f003 fd42 	bl	badec <_Z16_fetch_usbserialv>
   b7368:	f003 fae5 	bl	ba936 <_ZN5Print7printlnEv>
      }
   b736c:	e6e1      	b.n	b7132 <loop+0x43e>

   b736e:	783b      	ldrb	r3, [r7, #0]
   b7370:	b9b3      	cbnz	r3, b73a0 <loop+0x6ac>
                showBitmap(2,2,"");
   b7372:	f003 fd3b 	bl	badec <_Z16_fetch_usbserialv>
   b7376:	498b      	ldr	r1, [pc, #556]	; (b75a4 <loop+0x8b0>)
   b7378:	e01b      	b.n	b73b2 <loop+0x6be>
              }
   b737a:	498b      	ldr	r1, [pc, #556]	; (b75a8 <loop+0x8b4>)
   b737c:	a8c0      	add	r0, sp, #768	; 0x300
   b737e:	f003 fa18 	bl	ba7b2 <_ZN6StringC1EPK19__FlashStringHelper>
   b7382:	aac0      	add	r2, sp, #768	; 0x300
   b7384:	2106      	movs	r1, #6
   b7386:	2001      	movs	r0, #1
   b7388:	f7ff f9cc 	bl	b6724 <_Z10showBitmapii6String>
   b738c:	a8c0      	add	r0, sp, #768	; 0x300
   b738e:	f003 f9c5 	bl	ba71c <_ZN6StringD1Ev>
   b7392:	e7ac      	b.n	b72ee <loop+0x5fa>
              }
   b7394:	f003 fd2a 	bl	badec <_Z16_fetch_usbserialv>
   b7398:	4984      	ldr	r1, [pc, #528]	; (b75ac <loop+0x8b8>)
              }
   b739a:	f003 fad8 	bl	ba94e <_ZN5Print7printlnEPKc>
   b739e:	e7c1      	b.n	b7324 <loop+0x630>

   b73a0:	f8d9 2000 	ldr.w	r2, [r9]
   b73a4:	f8da 3000 	ldr.w	r3, [sl]
   b73a8:	429a      	cmp	r2, r3
   b73aa:	d00c      	beq.n	b73c6 <loop+0x6d2>
                showBitmap(2,2,"");
   b73ac:	f003 fd1e 	bl	badec <_Z16_fetch_usbserialv>
   b73b0:	497f      	ldr	r1, [pc, #508]	; (b75b0 <loop+0x8bc>)
                showBitmap(2,2,"");
   b73b2:	f003 facc 	bl	ba94e <_ZN5Print7printlnEPKc>

   b73b6:	497c      	ldr	r1, [pc, #496]	; (b75a8 <loop+0x8b4>)
   b73b8:	a8c0      	add	r0, sp, #768	; 0x300
   b73ba:	f003 f9fa 	bl	ba7b2 <_ZN6StringC1EPK19__FlashStringHelper>
   b73be:	2102      	movs	r1, #2
   b73c0:	aac0      	add	r2, sp, #768	; 0x300
   b73c2:	4608      	mov	r0, r1
   b73c4:	e00b      	b.n	b73de <loop+0x6ea>
                showBitmap(2,5,"");
   b73c6:	f003 fd11 	bl	badec <_Z16_fetch_usbserialv>
   b73ca:	497a      	ldr	r1, [pc, #488]	; (b75b4 <loop+0x8c0>)
   b73cc:	f003 fabf 	bl	ba94e <_ZN5Print7printlnEPKc>
                // Sensor no disponible
   b73d0:	4975      	ldr	r1, [pc, #468]	; (b75a8 <loop+0x8b4>)
   b73d2:	a8c0      	add	r0, sp, #768	; 0x300
   b73d4:	f003 f9ed 	bl	ba7b2 <_ZN6StringC1EPK19__FlashStringHelper>
   b73d8:	aac0      	add	r2, sp, #768	; 0x300
   b73da:	2105      	movs	r1, #5
   b73dc:	2002      	movs	r0, #2

   b73de:	f7ff f9a1 	bl	b6724 <_Z10showBitmapii6String>
   b73e2:	a8c0      	add	r0, sp, #768	; 0x300
   b73e4:	f003 f99a 	bl	ba71c <_ZN6StringD1Ev>
   b73e8:	e79c      	b.n	b7324 <loop+0x630>
            estado = tagInfo[4];
   b73ea:	f003 fcff 	bl	badec <_Z16_fetch_usbserialv>
              if (!IF_pasado) {
   b73ee:	f8df a1d4 	ldr.w	sl, [pc, #468]	; b75c4 <loop+0x8d0>
            estado = tagInfo[4];
   b73f2:	4971      	ldr	r1, [pc, #452]	; (b75b8 <loop+0x8c4>)
   b73f4:	f003 faab 	bl	ba94e <_ZN5Print7printlnEPKc>
              if (!IF_pasado) {
   b73f8:	6923      	ldr	r3, [r4, #16]
   b73fa:	f8ca 3000 	str.w	r3, [sl]

   b73fe:	4b5f      	ldr	r3, [pc, #380]	; (b757c <loop+0x888>)
   b7400:	781b      	ldrb	r3, [r3, #0]
   b7402:	bbd3      	cbnz	r3, b747a <loop+0x786>

   b7404:	f8d8 0000 	ldr.w	r0, [r8]
   b7408:	f8df 9178 	ldr.w	r9, [pc, #376]	; b7584 <loop+0x890>
   b740c:	f7fe fb34 	bl	b5a78 <_Z13isNewActuadori>
   b7410:	f8c9 0000 	str.w	r0, [r9]
                puerto = asignarPuerto(tagInfo[2]);
   b7414:	3001      	adds	r0, #1
   b7416:	f040 8092 	bne.w	b753e <loop+0x84a>
                showPort(tagInfo[2], puerto);
   b741a:	68a0      	ldr	r0, [r4, #8]
   b741c:	f7fe fcea 	bl	b5df4 <_Z13asignarPuertoi>
   b7420:	4601      	mov	r1, r0
   b7422:	f8c9 0000 	str.w	r0, [r9]
              
   b7426:	68a0      	ldr	r0, [r4, #8]
   b7428:	f7ff fad6 	bl	b69d8 <_Z8showPortii>

   b742c:	f8d9 0000 	ldr.w	r0, [r9]
   b7430:	1c42      	adds	r2, r0, #1
   b7432:	d022      	beq.n	b747a <loop+0x786>
                numActuadoresBloque++;
   b7434:	f8d7 c000 	ldr.w	ip, [r7]
   b7438:	f8df 9194 	ldr.w	r9, [pc, #404]	; b75d0 <loop+0x8dc>
                newActuador.puerto = puerto;
   b743c:	f8db 1000 	ldr.w	r1, [fp]
                numActuadoresBloque++;
   b7440:	f8d8 2000 	ldr.w	r2, [r8]
                newActuador.bloque = numBloque;
   b7444:	f8da e000 	ldr.w	lr, [sl]
                numActuadoresBloque++;
   b7448:	2314      	movs	r3, #20
   b744a:	fb03 930c 	mla	r3, r3, ip, r9
   b744e:	e9c3 1054 	strd	r1, r0, [r3, #336]	; 0x150
   b7452:	2101      	movs	r1, #1
   b7454:	f883 1158 	strb.w	r1, [r3, #344]	; 0x158
   b7458:	e9c3 2e52 	strd	r2, lr, [r3, #328]	; 0x148
                Serial.println(bloque2[0].numActuadores);
   b745c:	f8d9 3144 	ldr.w	r3, [r9, #324]	; 0x144
   b7460:	440b      	add	r3, r1
                bloque2[0].numActuadores++;
   b7462:	eb0c 0201 	add.w	r2, ip, r1
                Serial.println(bloque2[0].numActuadores);
   b7466:	f8c9 3144 	str.w	r3, [r9, #324]	; 0x144
                bloque2[0].numActuadores++;
   b746a:	603a      	str	r2, [r7, #0]
              }
   b746c:	f003 fcbe 	bl	badec <_Z16_fetch_usbserialv>
   b7470:	f8d9 1144 	ldr.w	r1, [r9, #324]	; 0x144
   b7474:	220a      	movs	r2, #10
   b7476:	f7fd fb13 	bl	b4aa0 <_ZN5Print7printlnIiLi0EEEjT_i.isra.0>

   b747a:	4b50      	ldr	r3, [pc, #320]	; (b75bc <loop+0x8c8>)
   b747c:	781b      	ldrb	r3, [r3, #0]
   b747e:	2b00      	cmp	r3, #0
   b7480:	f000 8104 	beq.w	b768c <loop+0x998>
   b7484:	4b4e      	ldr	r3, [pc, #312]	; (b75c0 <loop+0x8cc>)

   b7486:	f8d8 0000 	ldr.w	r0, [r8]

   b748a:	f893 b000 	ldrb.w	fp, [r3]
   b748e:	f8df 90f4 	ldr.w	r9, [pc, #244]	; b7584 <loop+0x890>
   b7492:	f8df a0fc 	ldr.w	sl, [pc, #252]	; b7590 <loop+0x89c>

   b7496:	f7fe faef 	bl	b5a78 <_Z13isNewActuadori>
   b749a:	f8c9 0000 	str.w	r0, [r9]

   b749e:	f1bb 0f00 	cmp.w	fp, #0
   b74a2:	f040 8099 	bne.w	b75d8 <loop+0x8e4>
                puerto = asignarPuerto(tagInfo[2]);
   b74a6:	3001      	adds	r0, #1
   b74a8:	d156      	bne.n	b7558 <loop+0x864>
                showPort(tagInfo[2], puerto);
   b74aa:	68a0      	ldr	r0, [r4, #8]
   b74ac:	f7fe fca2 	bl	b5df4 <_Z13asignarPuertoi>
   b74b0:	4601      	mov	r1, r0
   b74b2:	f8c9 0000 	str.w	r0, [r9]

   b74b6:	68a0      	ldr	r0, [r4, #8]
   b74b8:	f7ff fa8e 	bl	b69d8 <_Z8showPortii>

   b74bc:	f8d9 1000 	ldr.w	r1, [r9]
   b74c0:	1c4b      	adds	r3, r1, #1
   b74c2:	d056      	beq.n	b7572 <loop+0x87e>
                newActuador.bloque = numBloque;
   b74c4:	4b3f      	ldr	r3, [pc, #252]	; (b75c4 <loop+0x8d0>)
                newActuador.puerto = puerto;
   b74c6:	f8da e000 	ldr.w	lr, [sl]
                numActuadoresBloque++;
   b74ca:	6838      	ldr	r0, [r7, #0]
                newActuador.condicion = estado;
   b74cc:	f8d8 c000 	ldr.w	ip, [r8]
                newActuador.bloque = numBloque;
   b74d0:	f8d3 8000 	ldr.w	r8, [r3]
                numActuadoresBloque++;
   b74d4:	f44f 733b 	mov.w	r3, #748	; 0x2ec
   b74d8:	fb03 f20e 	mul.w	r2, r3, lr
   b74dc:	2314      	movs	r3, #20
   b74de:	fb03 2300 	mla	r3, r3, r0, r2
   b74e2:	4433      	add	r3, r6
   b74e4:	e9c3 c852 	strd	ip, r8, [r3, #328]	; 0x148
   b74e8:	f04f 0801 	mov.w	r8, #1
   b74ec:	e9c3 e154 	strd	lr, r1, [r3, #336]	; 0x150
   b74f0:	f883 8158 	strb.w	r8, [r3, #344]	; 0x158

   b74f4:	18b3      	adds	r3, r6, r2
                bloques[numBloque].numActuadores++;
   b74f6:	4440      	add	r0, r8

   b74f8:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
                bloques[numBloque].numActuadores++;
   b74fc:	6038      	str	r0, [r7, #0]

   b74fe:	4442      	add	r2, r8
   b7500:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
                {
   b7504:	f1bc 0f00 	cmp.w	ip, #0
   b7508:	f47f af0c 	bne.w	b7324 <loop+0x630>
                  ledObject.init();
   b750c:	b2c9      	uxtb	r1, r1
   b750e:	eb01 0208 	add.w	r2, r1, r8
   b7512:	afc0      	add	r7, sp, #768	; 0x300
   b7514:	2305      	movs	r3, #5
   b7516:	b2d2      	uxtb	r2, r2
   b7518:	4638      	mov	r0, r7
   b751a:	f002 fc49 	bl	b9db0 <_ZN12ChainableLEDC1Ehhh>
   b751e:	e897 0003 	ldmia.w	r7, {r0, r1}
   b7522:	f8df 90b0 	ldr.w	r9, [pc, #176]	; b75d4 <loop+0x8e0>
   b7526:	e889 0003 	stmia.w	r9, {r0, r1}
   b752a:	4638      	mov	r0, r7
   b752c:	f002 fc4d 	bl	b9dca <_ZN12ChainableLEDD1Ev>
                  init = true;
   b7530:	4648      	mov	r0, r9
   b7532:	f002 fcef 	bl	b9f14 <_ZN12ChainableLED4initEv>
                }
   b7536:	4b24      	ldr	r3, [pc, #144]	; (b75c8 <loop+0x8d4>)
   b7538:	f883 8000 	strb.w	r8, [r3]
   b753c:	e6f2      	b.n	b7324 <loop+0x630>
              }
   b753e:	491a      	ldr	r1, [pc, #104]	; (b75a8 <loop+0x8b4>)
   b7540:	a8c0      	add	r0, sp, #768	; 0x300
   b7542:	f003 f936 	bl	ba7b2 <_ZN6StringC1EPK19__FlashStringHelper>
   b7546:	aac0      	add	r2, sp, #768	; 0x300
   b7548:	2106      	movs	r1, #6
   b754a:	2001      	movs	r0, #1
   b754c:	f7ff f8ea 	bl	b6724 <_Z10showBitmapii6String>
   b7550:	a8c0      	add	r0, sp, #768	; 0x300
   b7552:	f003 f8e3 	bl	ba71c <_ZN6StringD1Ev>
   b7556:	e769      	b.n	b742c <loop+0x738>
              }
   b7558:	4913      	ldr	r1, [pc, #76]	; (b75a8 <loop+0x8b4>)
   b755a:	a8c0      	add	r0, sp, #768	; 0x300
   b755c:	f003 f929 	bl	ba7b2 <_ZN6StringC1EPK19__FlashStringHelper>
   b7560:	aac0      	add	r2, sp, #768	; 0x300
   b7562:	2106      	movs	r1, #6
   b7564:	2001      	movs	r0, #1
   b7566:	f7ff f8dd 	bl	b6724 <_Z10showBitmapii6String>
   b756a:	a8c0      	add	r0, sp, #768	; 0x300
   b756c:	f003 f8d6 	bl	ba71c <_ZN6StringD1Ev>
   b7570:	e7a4      	b.n	b74bc <loop+0x7c8>
              }
   b7572:	f003 fc3b 	bl	badec <_Z16_fetch_usbserialv>
   b7576:	4915      	ldr	r1, [pc, #84]	; (b75cc <loop+0x8d8>)
   b7578:	e70f      	b.n	b739a <loop+0x6a6>
   b757a:	bf00      	nop
   b757c:	2003c73d 	.word	0x2003c73d
   b7580:	000bbe02 	.word	0x000bbe02
   b7584:	2003da38 	.word	0x2003da38
   b7588:	000bbffe 	.word	0x000bbffe
   b758c:	000bc006 	.word	0x000bc006
   b7590:	2003c69c 	.word	0x2003c69c
   b7594:	000bc03b 	.word	0x000bc03b
   b7598:	2003da24 	.word	0x2003da24
   b759c:	2003da28 	.word	0x2003da28
   b75a0:	2003da2c 	.word	0x2003da2c
   b75a4:	000bbe70 	.word	0x000bbe70
   b75a8:	000bb886 	.word	0x000bb886
   b75ac:	000bbe58 	.word	0x000bbe58
   b75b0:	000bbe83 	.word	0x000bbe83
   b75b4:	000bbeb8 	.word	0x000bbeb8
   b75b8:	000bbe13 	.word	0x000bbe13
   b75bc:	2003c74c 	.word	0x2003c74c
   b75c0:	2003c73c 	.word	0x2003c73c
   b75c4:	2003d6dc 	.word	0x2003d6dc
   b75c8:	2003d6e4 	.word	0x2003d6e4
   b75cc:	000bbbf9 	.word	0x000bbbf9
   b75d0:	2003c750 	.word	0x2003c750
   b75d4:	2003d6ec 	.word	0x2003d6ec
                puerto = asignarPuerto(tagInfo[2]);
   b75d8:	3001      	adds	r0, #1
   b75da:	d14a      	bne.n	b7672 <loop+0x97e>
                showPort(tagInfo[2], puerto);
   b75dc:	68a0      	ldr	r0, [r4, #8]
   b75de:	f7fe fc09 	bl	b5df4 <_Z13asignarPuertoi>
   b75e2:	4601      	mov	r1, r0
   b75e4:	f8c9 0000 	str.w	r0, [r9]
              
   b75e8:	68a0      	ldr	r0, [r4, #8]
   b75ea:	f7ff f9f5 	bl	b69d8 <_Z8showPortii>

   b75ee:	f8d9 1000 	ldr.w	r1, [r9]
   b75f2:	1c48      	adds	r0, r1, #1
   b75f4:	d0bd      	beq.n	b7572 <loop+0x87e>
                newActuador.bloque = numBloque;
   b75f6:	4bac      	ldr	r3, [pc, #688]	; (b78a8 <loop+0xbb4>)
                newActuador.puerto = puerto;
   b75f8:	f8da e000 	ldr.w	lr, [sl]
                bloques[numBloque].numActuadores++;
   b75fc:	f8d7 c000 	ldr.w	ip, [r7]
                newActuador.condicion = estado;
   b7600:	f8d8 0000 	ldr.w	r0, [r8]
                newActuador.bloque = numBloque;
   b7604:	f8d3 8000 	ldr.w	r8, [r3]
                bloques[numBloque].numActuadores++;
   b7608:	f44f 733b 	mov.w	r3, #748	; 0x2ec
   b760c:	fb03 f20e 	mul.w	r2, r3, lr
   b7610:	2314      	movs	r3, #20
   b7612:	fb03 230c 	mla	r3, r3, ip, r2
   b7616:	4433      	add	r3, r6
   b7618:	f503 79a4 	add.w	r9, r3, #328	; 0x148
   b761c:	e9c3 0852 	strd	r0, r8, [r3, #328]	; 0x148
   b7620:	e9c3 e154 	strd	lr, r1, [r3, #336]	; 0x150
   b7624:	2300      	movs	r3, #0
   b7626:	f889 3010 	strb.w	r3, [r9, #16]
                numActuadoresBloque++;
   b762a:	18b3      	adds	r3, r6, r2
   b762c:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
   b7630:	3201      	adds	r2, #1
   b7632:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

   b7636:	f10c 0301 	add.w	r3, ip, #1
   b763a:	603b      	str	r3, [r7, #0]
                {
   b763c:	2800      	cmp	r0, #0
   b763e:	f47f ae71 	bne.w	b7324 <loop+0x630>
                  ledObject.init();
   b7642:	b2c9      	uxtb	r1, r1
   b7644:	1c4a      	adds	r2, r1, #1
   b7646:	afc0      	add	r7, sp, #768	; 0x300
   b7648:	2305      	movs	r3, #5
   b764a:	b2d2      	uxtb	r2, r2
   b764c:	4638      	mov	r0, r7
   b764e:	f002 fbaf 	bl	b9db0 <_ZN12ChainableLEDC1Ehhh>
   b7652:	e897 0003 	ldmia.w	r7, {r0, r1}
   b7656:	f8df 82d0 	ldr.w	r8, [pc, #720]	; b7928 <loop+0xc34>
   b765a:	e888 0003 	stmia.w	r8, {r0, r1}
   b765e:	4638      	mov	r0, r7
   b7660:	f002 fbb3 	bl	b9dca <_ZN12ChainableLEDD1Ev>
                  init = true;
   b7664:	4640      	mov	r0, r8
   b7666:	f002 fc55 	bl	b9f14 <_ZN12ChainableLED4initEv>
                }
   b766a:	4b90      	ldr	r3, [pc, #576]	; (b78ac <loop+0xbb8>)
   b766c:	2201      	movs	r2, #1
   b766e:	701a      	strb	r2, [r3, #0]
   b7670:	e658      	b.n	b7324 <loop+0x630>
              }
   b7672:	498f      	ldr	r1, [pc, #572]	; (b78b0 <loop+0xbbc>)
   b7674:	a8c0      	add	r0, sp, #768	; 0x300
   b7676:	f003 f89c 	bl	ba7b2 <_ZN6StringC1EPK19__FlashStringHelper>
   b767a:	aac0      	add	r2, sp, #768	; 0x300
   b767c:	2106      	movs	r1, #6
   b767e:	2001      	movs	r0, #1
   b7680:	f7ff f850 	bl	b6724 <_Z10showBitmapii6String>
   b7684:	a8c0      	add	r0, sp, #768	; 0x300
   b7686:	f003 f849 	bl	ba71c <_ZN6StringD1Ev>
   b768a:	e7b0      	b.n	b75ee <loop+0x8fa>
                //Serial.println("Se esperaba IF tag");
   b768c:	4b89      	ldr	r3, [pc, #548]	; (b78b4 <loop+0xbc0>)
   b768e:	781b      	ldrb	r3, [r3, #0]
   b7690:	2b00      	cmp	r3, #0
   b7692:	f43f ae47 	beq.w	b7324 <loop+0x630>
                showBitmap(2,2,"");
   b7696:	f003 fba9 	bl	badec <_Z16_fetch_usbserialv>
   b769a:	4987      	ldr	r1, [pc, #540]	; (b78b8 <loop+0xbc4>)
   b769c:	e689      	b.n	b73b2 <loop+0x6be>

   b769e:	f003 fba5 	bl	badec <_Z16_fetch_usbserialv>
   b76a2:	4986      	ldr	r1, [pc, #536]	; (b78bc <loop+0xbc8>)
   b76a4:	f003 f953 	bl	ba94e <_ZN5Print7printlnEPKc>

   b76a8:	f8db 3000 	ldr.w	r3, [fp]
   b76ac:	1c5a      	adds	r2, r3, #1
   b76ae:	d003      	beq.n	b76b8 <loop+0x9c4>
   b76b0:	bb5b      	cbnz	r3, b770a <loop+0xa16>
   b76b2:	683a      	ldr	r2, [r7, #0]
   b76b4:	2a00      	cmp	r2, #0
   b76b6:	dd28      	ble.n	b770a <loop+0xa16>
              THEN_pasado = false;
   b76b8:	4a7e      	ldr	r2, [pc, #504]	; (b78b4 <loop+0xbc0>)
   b76ba:	2101      	movs	r1, #1
   b76bc:	7011      	strb	r1, [r2, #0]
              ELSE_pasado = false;
   b76be:	4a80      	ldr	r2, [pc, #512]	; (b78c0 <loop+0xbcc>)
            
   b76c0:	4980      	ldr	r1, [pc, #512]	; (b78c4 <loop+0xbd0>)
              ELSE_pasado = false;
   b76c2:	f04f 0800 	mov.w	r8, #0
   b76c6:	f882 8000 	strb.w	r8, [r2]

   b76ca:	4a7f      	ldr	r2, [pc, #508]	; (b78c8 <loop+0xbd4>)
              numSensoresBloque = 0;
   b76cc:	f8ca 8000 	str.w	r8, [sl]

   b76d0:	f882 8000 	strb.w	r8, [r2]
              puertoDigital_bloque = 0;
   b76d4:	4a7d      	ldr	r2, [pc, #500]	; (b78cc <loop+0xbd8>)
              numActuadoresBloque = 0;
   b76d6:	f8c9 8000 	str.w	r8, [r9]
              puertoDigital_bloque = 0;
   b76da:	f8c2 8000 	str.w	r8, [r2]

   b76de:	4a7c      	ldr	r2, [pc, #496]	; (b78d0 <loop+0xbdc>)

   b76e0:	f8c7 8000 	str.w	r8, [r7]
              IF_pasado = true;
   b76e4:	3301      	adds	r3, #1

   b76e6:	f8c2 8000 	str.w	r8, [r2]

   b76ea:	f44f 723b 	mov.w	r2, #748	; 0x2ec
              IF_pasado = true;
   b76ee:	f8cb 3000 	str.w	r3, [fp]

   b76f2:	4353      	muls	r3, r2
   b76f4:	18f2      	adds	r2, r6, r3
   b76f6:	f846 8003 	str.w	r8, [r6, r3]
   b76fa:	f8c2 8144 	str.w	r8, [r2, #324]	; 0x144
            
   b76fe:	a8c0      	add	r0, sp, #768	; 0x300
   b7700:	f003 f857 	bl	ba7b2 <_ZN6StringC1EPK19__FlashStringHelper>
   b7704:	aac0      	add	r2, sp, #768	; 0x300
   b7706:	2100      	movs	r1, #0
   b7708:	e032      	b.n	b7770 <loop+0xa7c>
              showBitmap(2,2,"");
   b770a:	f003 fb6f 	bl	badec <_Z16_fetch_usbserialv>
   b770e:	4971      	ldr	r1, [pc, #452]	; (b78d4 <loop+0xbe0>)
   b7710:	e64f      	b.n	b73b2 <loop+0x6be>

   b7712:	f003 fb6b 	bl	badec <_Z16_fetch_usbserialv>
   b7716:	4970      	ldr	r1, [pc, #448]	; (b78d8 <loop+0xbe4>)
   b7718:	f003 f919 	bl	ba94e <_ZN5Print7printlnEPKc>

   b771c:	4b65      	ldr	r3, [pc, #404]	; (b78b4 <loop+0xbc0>)
   b771e:	781b      	ldrb	r3, [r3, #0]
   b7720:	2b00      	cmp	r3, #0
   b7722:	f43f ae26 	beq.w	b7372 <loop+0x67e>
   b7726:	f8da 3000 	ldr.w	r3, [sl]
   b772a:	f8d9 2000 	ldr.w	r2, [r9]
   b772e:	4293      	cmp	r3, r2
   b7730:	da20      	bge.n	b7774 <loop+0xa80>
   b7732:	683f      	ldr	r7, [r7, #0]
   b7734:	bb07      	cbnz	r7, b7778 <loop+0xa84>
              numCondicionalesBloque++;
   b7736:	f8db 2000 	ldr.w	r2, [fp]
   b773a:	f8d4 8008 	ldr.w	r8, [r4, #8]
   b773e:	f44f 713b 	mov.w	r1, #748	; 0x2ec
   b7742:	fb01 6202 	mla	r2, r1, r2, r6
   b7746:	441a      	add	r2, r3
   b7748:	f1b8 0f00 	cmp.w	r8, #0
   b774c:	bf14      	ite	ne
   b774e:	2101      	movne	r1, #1
   b7750:	2100      	moveq	r1, #0

   b7752:	f103 0301 	add.w	r3, r3, #1
              numCondicionalesBloque++;
   b7756:	f882 12d8 	strb.w	r1, [r2, #728]	; 0x2d8

   b775a:	f8ca 3000 	str.w	r3, [sl]

   b775e:	d101      	bne.n	b7764 <loop+0xa70>
   b7760:	495e      	ldr	r1, [pc, #376]	; (b78dc <loop+0xbe8>)
   b7762:	e7cc      	b.n	b76fe <loop+0xa0a>
   b7764:	495e      	ldr	r1, [pc, #376]	; (b78e0 <loop+0xbec>)
   b7766:	a8c0      	add	r0, sp, #768	; 0x300
   b7768:	f003 f823 	bl	ba7b2 <_ZN6StringC1EPK19__FlashStringHelper>
   b776c:	aac0      	add	r2, sp, #768	; 0x300
   b776e:	4639      	mov	r1, r7
   b7770:	2003      	movs	r0, #3
   b7772:	e634      	b.n	b73de <loop+0x6ea>

   b7774:	f73f add6 	bgt.w	b7324 <loop+0x630>
                showBitmap(2,2,"");
   b7778:	f003 fb38 	bl	badec <_Z16_fetch_usbserialv>
   b777c:	4959      	ldr	r1, [pc, #356]	; (b78e4 <loop+0xbf0>)
   b777e:	e618      	b.n	b73b2 <loop+0x6be>

   b7780:	f003 fb34 	bl	badec <_Z16_fetch_usbserialv>
   b7784:	4958      	ldr	r1, [pc, #352]	; (b78e8 <loop+0xbf4>)
   b7786:	f003 f8e2 	bl	ba94e <_ZN5Print7printlnEPKc>

   b778a:	4b4a      	ldr	r3, [pc, #296]	; (b78b4 <loop+0xbc0>)
   b778c:	781b      	ldrb	r3, [r3, #0]
   b778e:	2b00      	cmp	r3, #0
   b7790:	f43f adef 	beq.w	b7372 <loop+0x67e>
   b7794:	f8d9 3000 	ldr.w	r3, [r9]
   b7798:	2b00      	cmp	r3, #0
   b779a:	dd08      	ble.n	b77ae <loop+0xaba>
   b779c:	f8da 2000 	ldr.w	r2, [sl]
   b77a0:	4293      	cmp	r3, r2
   b77a2:	dd04      	ble.n	b77ae <loop+0xaba>
              showBitmap(3,0,"THEN");
   b77a4:	4b46      	ldr	r3, [pc, #280]	; (b78c0 <loop+0xbcc>)
            
   b77a6:	4951      	ldr	r1, [pc, #324]	; (b78ec <loop+0xbf8>)
              showBitmap(3,0,"THEN");
   b77a8:	2201      	movs	r2, #1
   b77aa:	701a      	strb	r2, [r3, #0]
            
   b77ac:	e7a7      	b.n	b76fe <loop+0xa0a>
                showBitmap(2,2,"");
   b77ae:	f003 fb1d 	bl	badec <_Z16_fetch_usbserialv>
   b77b2:	494f      	ldr	r1, [pc, #316]	; (b78f0 <loop+0xbfc>)
   b77b4:	e5fd      	b.n	b73b2 <loop+0x6be>

   b77b6:	f003 fb19 	bl	badec <_Z16_fetch_usbserialv>
   b77ba:	494e      	ldr	r1, [pc, #312]	; (b78f4 <loop+0xc00>)
   b77bc:	f003 f8c7 	bl	ba94e <_ZN5Print7printlnEPKc>

   b77c0:	4b3c      	ldr	r3, [pc, #240]	; (b78b4 <loop+0xbc0>)
   b77c2:	781b      	ldrb	r3, [r3, #0]
   b77c4:	2b00      	cmp	r3, #0
   b77c6:	f43f add4 	beq.w	b7372 <loop+0x67e>
   b77ca:	683b      	ldr	r3, [r7, #0]
   b77cc:	2b00      	cmp	r3, #0
   b77ce:	dd04      	ble.n	b77da <loop+0xae6>
              showBitmap(3,0,"ELSE");
   b77d0:	4b3d      	ldr	r3, [pc, #244]	; (b78c8 <loop+0xbd4>)
            
   b77d2:	4949      	ldr	r1, [pc, #292]	; (b78f8 <loop+0xc04>)
              showBitmap(3,0,"ELSE");
   b77d4:	2201      	movs	r2, #1
   b77d6:	701a      	strb	r2, [r3, #0]
            
   b77d8:	e791      	b.n	b76fe <loop+0xa0a>
                showBitmap(2,2,"");
   b77da:	f003 fb07 	bl	badec <_Z16_fetch_usbserialv>
   b77de:	4947      	ldr	r1, [pc, #284]	; (b78fc <loop+0xc08>)
   b77e0:	e5e7      	b.n	b73b2 <loop+0x6be>
          Serial.println("Tarjeta inválida para este modo");
   b77e2:	3601      	adds	r6, #1
   b77e4:	f43f aca5 	beq.w	b7132 <loop+0x43e>
          showBitmap(2,0,"");
   b77e8:	f003 fb00 	bl	badec <_Z16_fetch_usbserialv>
   b77ec:	4944      	ldr	r1, [pc, #272]	; (b7900 <loop+0xc0c>)
   b77ee:	f003 f8ae 	bl	ba94e <_ZN5Print7printlnEPKc>
        }
   b77f2:	492f      	ldr	r1, [pc, #188]	; (b78b0 <loop+0xbbc>)
   b77f4:	a8c0      	add	r0, sp, #768	; 0x300
   b77f6:	f002 ffdc 	bl	ba7b2 <_ZN6StringC1EPK19__FlashStringHelper>
   b77fa:	aac0      	add	r2, sp, #768	; 0x300
   b77fc:	2100      	movs	r1, #0
   b77fe:	e508      	b.n	b7212 <loop+0x51e>
          valor = makeEvaluate(bloques[0]);
   b7800:	2b01      	cmp	r3, #1
   b7802:	f47f acc5 	bne.w	b7190 <loop+0x49c>
          if (play){
   b7806:	4c3f      	ldr	r4, [pc, #252]	; (b7904 <loop+0xc10>)
   b7808:	f44f 7237 	mov.w	r2, #732	; 0x2dc
   b780c:	f104 0110 	add.w	r1, r4, #16
   b7810:	4668      	mov	r0, sp
   b7812:	f003 fe39 	bl	bb488 <memcpy>
   b7816:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   b781a:	f7fe f98b 	bl	b5b34 <_Z12makeEvaluate6BLOQUE>
   b781e:	4c3a      	ldr	r4, [pc, #232]	; (b7908 <loop+0xc14>)
          ejecutarEvaluacion(valor, 0);}
   b7820:	782b      	ldrb	r3, [r5, #0]
          if (play){
   b7822:	7020      	strb	r0, [r4, #0]
          ejecutarEvaluacion(valor, 0);}
   b7824:	b113      	cbz	r3, b782c <loop+0xb38>

   b7826:	2100      	movs	r1, #0
   b7828:	f7fe fa94 	bl	b5d54 <_Z18ejecutarEvaluacionbi>
          display.println(buf);
   b782c:	7823      	ldrb	r3, [r4, #0]
   b782e:	2b00      	cmp	r3, #0
   b7830:	d034      	beq.n	b789c <loop+0xba8>
   b7832:	4936      	ldr	r1, [pc, #216]	; (b790c <loop+0xc18>)
   b7834:	4836      	ldr	r0, [pc, #216]	; (b7910 <loop+0xc1c>)
   b7836:	f003 fe7b 	bl	bb530 <strcpy>

   b783a:	4935      	ldr	r1, [pc, #212]	; (b7910 <loop+0xc1c>)
   b783c:	4835      	ldr	r0, [pc, #212]	; (b7914 <loop+0xc20>)
   b783e:	f003 f886 	bl	ba94e <_ZN5Print7printlnEPKc>
          valor = makeEvaluate(bloques[1]);
   b7842:	6835      	ldr	r5, [r6, #0]
   b7844:	2d01      	cmp	r5, #1
   b7846:	d11f      	bne.n	b7888 <loop+0xb94>
   b7848:	4c2e      	ldr	r4, [pc, #184]	; (b7904 <loop+0xc10>)
   b784a:	f8d4 3430 	ldr.w	r3, [r4, #1072]	; 0x430
   b784e:	2b00      	cmp	r3, #0
   b7850:	dd28      	ble.n	b78a4 <loop+0xbb0>
          ejecutarEvaluacion(valor, 1);
   b7852:	f504 713f 	add.w	r1, r4, #764	; 0x2fc
   b7856:	f44f 7237 	mov.w	r2, #732	; 0x2dc
   b785a:	4668      	mov	r0, sp
   b785c:	f003 fe14 	bl	bb488 <memcpy>
   b7860:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
   b7864:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b7866:	f7fe f965 	bl	b5b34 <_Z12makeEvaluate6BLOQUE>
   b786a:	4c27      	ldr	r4, [pc, #156]	; (b7908 <loop+0xc14>)

   b786c:	4629      	mov	r1, r5
          ejecutarEvaluacion(valor, 1);
   b786e:	7020      	strb	r0, [r4, #0]

   b7870:	f7fe fa70 	bl	b5d54 <_Z18ejecutarEvaluacionbi>
          display.print(buf);
   b7874:	7823      	ldrb	r3, [r4, #0]
   b7876:	b19b      	cbz	r3, b78a0 <loop+0xbac>
   b7878:	4927      	ldr	r1, [pc, #156]	; (b7918 <loop+0xc24>)
          display.print(buf);
   b787a:	4825      	ldr	r0, [pc, #148]	; (b7910 <loop+0xc1c>)
   b787c:	f003 fe58 	bl	bb530 <strcpy>
        }
   b7880:	4923      	ldr	r1, [pc, #140]	; (b7910 <loop+0xc1c>)
   b7882:	4824      	ldr	r0, [pc, #144]	; (b7914 <loop+0xc20>)
   b7884:	f003 f850 	bl	ba928 <_ZN5Print5printEPKc>
      display.clearDisplay();
   b7888:	4c22      	ldr	r4, [pc, #136]	; (b7914 <loop+0xc20>)
   b788a:	4620      	mov	r0, r4
   b788c:	f002 f9f6 	bl	b9c7c <_ZN16Adafruit_SSD13067displayEv>
      display.setCursor(0,0);
   b7890:	4620      	mov	r0, r4
   b7892:	f001 ff8b 	bl	b97ac <_ZN16Adafruit_SSD130612clearDisplayEv>
   b7896:	2300      	movs	r3, #0
   b7898:	6123      	str	r3, [r4, #16]
   b789a:	e431      	b.n	b7100 <loop+0x40c>
          display.println(buf);
   b789c:	491f      	ldr	r1, [pc, #124]	; (b791c <loop+0xc28>)
   b789e:	e7c9      	b.n	b7834 <loop+0xb40>
          display.print(buf);
   b78a0:	491f      	ldr	r1, [pc, #124]	; (b7920 <loop+0xc2c>)
   b78a2:	e7ea      	b.n	b787a <loop+0xb86>
          display.print(buf);
   b78a4:	491f      	ldr	r1, [pc, #124]	; (b7924 <loop+0xc30>)
   b78a6:	e7e8      	b.n	b787a <loop+0xb86>
   b78a8:	2003d6dc 	.word	0x2003d6dc
   b78ac:	2003d6e4 	.word	0x2003d6e4
   b78b0:	000bb886 	.word	0x000bb886
   b78b4:	2003c73d 	.word	0x2003c73d
   b78b8:	000bbec8 	.word	0x000bbec8
   b78bc:	000bbedd 	.word	0x000bbedd
   b78c0:	2003c74c 	.word	0x2003c74c
   b78c4:	000bbeea 	.word	0x000bbeea
   b78c8:	2003c73c 	.word	0x2003c73c
   b78cc:	2003da40 	.word	0x2003da40
   b78d0:	2003da44 	.word	0x2003da44
   b78d4:	000bbeed 	.word	0x000bbeed
   b78d8:	000bbf3f 	.word	0x000bbf3f
   b78dc:	000bbeb5 	.word	0x000bbeb5
   b78e0:	000bbf50 	.word	0x000bbf50
   b78e4:	000bbf54 	.word	0x000bbf54
   b78e8:	000bbf86 	.word	0x000bbf86
   b78ec:	000bbf95 	.word	0x000bbf95
   b78f0:	000bbf9a 	.word	0x000bbf9a
   b78f4:	000bbfb9 	.word	0x000bbfb9
   b78f8:	000bbfc8 	.word	0x000bbfc8
   b78fc:	000bbfcd 	.word	0x000bbfcd
   b7900:	000bc05e 	.word	0x000bc05e
   b7904:	2003cd28 	.word	0x2003cd28
   b7908:	2003e6b8 	.word	0x2003e6b8
   b790c:	000bc07f 	.word	0x000bc07f
   b7910:	2003d301 	.word	0x2003d301
   b7914:	2003d34c 	.word	0x2003d34c
   b7918:	000bc0af 	.word	0x000bc0af
   b791c:	000bc08e 	.word	0x000bc08e
   b7920:	000bc0be 	.word	0x000bc0be
   b7924:	000bc0ce 	.word	0x000bc0ce
   b7928:	2003d6ec 	.word	0x2003d6ec

   b792c:	2f02      	cmp	r7, #2
   b792e:	f040 8199 	bne.w	b7c64 <loop+0xf70>
    {
   b7932:	2e02      	cmp	r6, #2
   b7934:	d038      	beq.n	b79a8 <loop+0xcb4>
   b7936:	2e06      	cmp	r6, #6
   b7938:	f040 8158 	bne.w	b7bec <loop+0xef8>
      {
   b793c:	6860      	ldr	r0, [r4, #4]
   b793e:	2801      	cmp	r0, #1
   b7940:	d015      	beq.n	b796e <loop+0xc7a>
   b7942:	2802      	cmp	r0, #2
   b7944:	d021      	beq.n	b798a <loop+0xc96>
   b7946:	b928      	cbnz	r0, b7954 <loop+0xc60>
          resetFunc();
   b7948:	68a0      	ldr	r0, [r4, #8]
   b794a:	f7ff f979 	bl	b6c40 <_Z10cambioModoi>
          break;
   b794e:	4baf      	ldr	r3, [pc, #700]	; (b7c0c <loop+0xf18>)
   b7950:	681b      	ldr	r3, [r3, #0]
   b7952:	4798      	blx	r3
    
   b7954:	f04f 33ff 	mov.w	r3, #4294967295
   b7958:	6023      	str	r3, [r4, #0]
      reproducir();
   b795a:	782b      	ldrb	r3, [r5, #0]
   b795c:	2b00      	cmp	r3, #0
   b795e:	f43f abcf 	beq.w	b7100 <loop+0x40c>
      play = false;
   b7962:	f7ff f91f 	bl	b6ba4 <_Z10reproducirv>
    }
   b7966:	2300      	movs	r3, #0
   b7968:	702b      	strb	r3, [r5, #0]
   b796a:	f7ff bbc9 	b.w	b7100 <loop+0x40c>
          break;
   b796e:	49a8      	ldr	r1, [pc, #672]	; (b7c10 <loop+0xf1c>)
          showBitmap(3,0,"Ejecutando...");   
   b7970:	7028      	strb	r0, [r5, #0]

   b7972:	a8c0      	add	r0, sp, #768	; 0x300
   b7974:	f002 ff1d 	bl	ba7b2 <_ZN6StringC1EPK19__FlashStringHelper>
   b7978:	aac0      	add	r2, sp, #768	; 0x300
   b797a:	2100      	movs	r1, #0
   b797c:	2003      	movs	r0, #3
      }
   b797e:	f7fe fed1 	bl	b6724 <_Z10showBitmapii6String>
   b7982:	a8c0      	add	r0, sp, #768	; 0x300
   b7984:	f002 feca 	bl	ba71c <_ZN6StringD1Ev>
   b7988:	e7e4      	b.n	b7954 <loop+0xc60>
            borradoPOP();
   b798a:	68a6      	ldr	r6, [r4, #8]
   b798c:	b91e      	cbnz	r6, b7996 <loop+0xca2>
            showBitmap(3,0,"Borrada ultima lectura");
   b798e:	f7fd ff53 	bl	b5838 <_Z10borradoPOPv>

   b7992:	49a0      	ldr	r1, [pc, #640]	; (b7c14 <loop+0xf20>)
   b7994:	e7ed      	b.n	b7972 <loop+0xc7e>
            borradoALL(2);
   b7996:	2e01      	cmp	r6, #1
   b7998:	d103      	bne.n	b79a2 <loop+0xcae>
            showBitmap(3,0,"Borrado completo realizado");
   b799a:	f7fd ff1b 	bl	b57d4 <_Z10borradoALLi>

   b799e:	499e      	ldr	r1, [pc, #632]	; (b7c18 <loop+0xf24>)
   b79a0:	e7e7      	b.n	b7972 <loop+0xc7e>

   b79a2:	f7ff f867 	bl	b6a74 <_Z13borradoBLOQUEi>
   b79a6:	e7d5      	b.n	b7954 <loop+0xc60>
      {
   b79a8:	6863      	ldr	r3, [r4, #4]
   b79aa:	2b01      	cmp	r3, #1
   b79ac:	d078      	beq.n	b7aa0 <loop+0xdac>
   b79ae:	2b02      	cmp	r3, #2
   b79b0:	f000 80bc 	beq.w	b7b2c <loop+0xe38>
   b79b4:	2b00      	cmp	r3, #0
   b79b6:	d1cd      	bne.n	b7954 <loop+0xc60>
        if (posicion<23) {
   b79b8:	68a1      	ldr	r1, [r4, #8]
   b79ba:	4e98      	ldr	r6, [pc, #608]	; (b7c1c <loop+0xf28>)
   b79bc:	4f98      	ldr	r7, [pc, #608]	; (b7c20 <loop+0xf2c>)
   b79be:	a8b8      	add	r0, sp, #736	; 0x2e0
   b79c0:	f7fd ffaa 	bl	b5918 <_Z19decodificarNOTA_msgi>
	StringSumHelper(const String &s) : String(s) {}
   b79c4:	a9b8      	add	r1, sp, #736	; 0x2e0
   b79c6:	a8c0      	add	r0, sp, #768	; 0x300
   b79c8:	f002 ff16 	bl	ba7f8 <_ZN6StringC1ERKS_>
   b79cc:	68e1      	ldr	r1, [r4, #12]
   b79ce:	a8bc      	add	r0, sp, #752	; 0x2f0
   b79d0:	f7fd ffd4 	bl	b597c <_Z19decodificarTIPO_msgi>
   b79d4:	a9bc      	add	r1, sp, #752	; 0x2f0
   b79d6:	a8c0      	add	r0, sp, #768	; 0x300
   b79d8:	f002 ff55 	bl	ba886 <_ZplRK15StringSumHelperRK6String>
   b79dc:	4991      	ldr	r1, [pc, #580]	; (b7c24 <loop+0xf30>)
   b79de:	f002 ff5e 	bl	ba89e <_ZplRK15StringSumHelperPKc>
   b79e2:	4601      	mov	r1, r0
   b79e4:	6830      	ldr	r0, [r6, #0]
   b79e6:	eb07 1000 	add.w	r0, r7, r0, lsl #4
   b79ea:	f002 fef6 	bl	ba7da <_ZN6StringaSERKS_>
   b79ee:	a8bc      	add	r0, sp, #752	; 0x2f0
   b79f0:	f002 fe94 	bl	ba71c <_ZN6StringD1Ev>
class StringSumHelper : public String
   b79f4:	a8c0      	add	r0, sp, #768	; 0x300
   b79f6:	f002 fe91 	bl	ba71c <_ZN6StringD1Ev>
   b79fa:	a8b8      	add	r0, sp, #736	; 0x2e0
   b79fc:	f002 fe8e 	bl	ba71c <_ZN6StringD1Ev>
          snprintf(buf, sizeof(buf), secuencia[posicion]);
   b7a00:	6833      	ldr	r3, [r6, #0]
   b7a02:	2b16      	cmp	r3, #22
   b7a04:	dc45      	bgt.n	b7a92 <loop+0xd9e>
	const char * c_str() const { return buffer; }
   b7a06:	011b      	lsls	r3, r3, #4
          display.print(buf);
   b7a08:	4887      	ldr	r0, [pc, #540]	; (b7c28 <loop+0xf34>)
   b7a0a:	58fa      	ldr	r2, [r7, r3]
   b7a0c:	2140      	movs	r1, #64	; 0x40
   b7a0e:	f002 fd0f 	bl	ba430 <snprintf>
          display.display();
   b7a12:	4985      	ldr	r1, [pc, #532]	; (b7c28 <loop+0xf34>)
   b7a14:	4885      	ldr	r0, [pc, #532]	; (b7c2c <loop+0xf38>)
   b7a16:	f002 ff87 	bl	ba928 <_ZN5Print5printEPKc>
        }
   b7a1a:	4884      	ldr	r0, [pc, #528]	; (b7c2c <loop+0xf38>)
   b7a1c:	f002 f92e 	bl	b9c7c <_ZN16Adafruit_SSD13067displayEv>

   b7a20:	f003 f9e4 	bl	badec <_Z16_fetch_usbserialv>
   b7a24:	68a1      	ldr	r1, [r4, #8]
   b7a26:	4607      	mov	r7, r0
   b7a28:	a8b8      	add	r0, sp, #736	; 0x2e0
   b7a2a:	f7fd ff75 	bl	b5918 <_Z19decodificarNOTA_msgi>
	StringSumHelper(const String &s) : String(s) {}
   b7a2e:	a9b8      	add	r1, sp, #736	; 0x2e0
   b7a30:	a8c0      	add	r0, sp, #768	; 0x300
   b7a32:	f002 fee1 	bl	ba7f8 <_ZN6StringC1ERKS_>
   b7a36:	68e1      	ldr	r1, [r4, #12]
   b7a38:	a8bc      	add	r0, sp, #752	; 0x2f0
   b7a3a:	f7fd ff9f 	bl	b597c <_Z19decodificarTIPO_msgi>
   b7a3e:	a9bc      	add	r1, sp, #752	; 0x2f0
   b7a40:	a8c0      	add	r0, sp, #768	; 0x300
   b7a42:	f002 ff20 	bl	ba886 <_ZplRK15StringSumHelperRK6String>
   b7a46:	6801      	ldr	r1, [r0, #0]
   b7a48:	4638      	mov	r0, r7
   b7a4a:	f7fd f854 	bl	b4af6 <_ZN5Print8printlnfEPKcz>
   b7a4e:	a8bc      	add	r0, sp, #752	; 0x2f0
   b7a50:	f002 fe64 	bl	ba71c <_ZN6StringD1Ev>
class StringSumHelper : public String
   b7a54:	a8c0      	add	r0, sp, #768	; 0x300
   b7a56:	f002 fe61 	bl	ba71c <_ZN6StringD1Ev>
   b7a5a:	a8b8      	add	r0, sp, #736	; 0x2e0
   b7a5c:	f002 fe5e 	bl	ba71c <_ZN6StringD1Ev>
        notas[posicion] = tagInfo[2];
   b7a60:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
   b7a64:	f7fd ffa4 	bl	b59b0 <_Z14reproducirNOTAii>
        duraciones[posicion] = tagInfo[3];
   b7a68:	6833      	ldr	r3, [r6, #0]
   b7a6a:	4a71      	ldr	r2, [pc, #452]	; (b7c30 <loop+0xf3c>)
   b7a6c:	68a1      	ldr	r1, [r4, #8]
   b7a6e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        
   b7a72:	4a70      	ldr	r2, [pc, #448]	; (b7c34 <loop+0xf40>)
   b7a74:	68e1      	ldr	r1, [r4, #12]
   b7a76:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

   b7a7a:	3301      	adds	r3, #1
   b7a7c:	6033      	str	r3, [r6, #0]
          tam_bucle++;
   b7a7e:	4b6e      	ldr	r3, [pc, #440]	; (b7c38 <loop+0xf44>)
   b7a80:	781b      	ldrb	r3, [r3, #0]
   b7a82:	2b00      	cmp	r3, #0
   b7a84:	f43f af66 	beq.w	b7954 <loop+0xc60>
        }
   b7a88:	4a6c      	ldr	r2, [pc, #432]	; (b7c3c <loop+0xf48>)
   b7a8a:	6813      	ldr	r3, [r2, #0]
   b7a8c:	3301      	adds	r3, #1
   b7a8e:	6013      	str	r3, [r2, #0]
   b7a90:	e760      	b.n	b7954 <loop+0xc60>
          snprintf(buf, sizeof(buf), "...");
   b7a92:	2b17      	cmp	r3, #23
   b7a94:	d1c4      	bne.n	b7a20 <loop+0xd2c>
          display.print(buf);
   b7a96:	496a      	ldr	r1, [pc, #424]	; (b7c40 <loop+0xf4c>)
   b7a98:	4863      	ldr	r0, [pc, #396]	; (b7c28 <loop+0xf34>)
   b7a9a:	f003 fd49 	bl	bb530 <strcpy>
   b7a9e:	e7b8      	b.n	b7a12 <loop+0xd1e>
          Serial.println("Loop");
   b7aa0:	4f65      	ldr	r7, [pc, #404]	; (b7c38 <loop+0xf44>)
   b7aa2:	783b      	ldrb	r3, [r7, #0]
   b7aa4:	2b00      	cmp	r3, #0
   b7aa6:	d134      	bne.n	b7b12 <loop+0xe1e>
          if (posicion<23) {
   b7aa8:	4e5c      	ldr	r6, [pc, #368]	; (b7c1c <loop+0xf28>)
   b7aaa:	f8df 8174 	ldr.w	r8, [pc, #372]	; b7c20 <loop+0xf2c>
          //showBitmap(3,0,"Loop");
   b7aae:	f003 f99d 	bl	badec <_Z16_fetch_usbserialv>
   b7ab2:	4964      	ldr	r1, [pc, #400]	; (b7c44 <loop+0xf50>)
   b7ab4:	f002 ff4b 	bl	ba94e <_ZN5Print7printlnEPKc>
          if (posicion<23) {
   b7ab8:	6830      	ldr	r0, [r6, #0]
   b7aba:	4963      	ldr	r1, [pc, #396]	; (b7c48 <loop+0xf54>)
   b7abc:	eb08 1000 	add.w	r0, r8, r0, lsl #4
   b7ac0:	f002 fea5 	bl	ba80e <_ZN6StringaSEPKc>
            snprintf(buf, sizeof(buf), secuencia[posicion]);
   b7ac4:	6833      	ldr	r3, [r6, #0]
   b7ac6:	2b16      	cmp	r3, #22
   b7ac8:	dc1c      	bgt.n	b7b04 <loop+0xe10>
	const char * c_str() const { return buffer; }
   b7aca:	011b      	lsls	r3, r3, #4
            display.print(buf);
   b7acc:	4856      	ldr	r0, [pc, #344]	; (b7c28 <loop+0xf34>)
   b7ace:	f858 2003 	ldr.w	r2, [r8, r3]
   b7ad2:	2140      	movs	r1, #64	; 0x40
   b7ad4:	f002 fcac 	bl	ba430 <snprintf>
            display.display();
   b7ad8:	4953      	ldr	r1, [pc, #332]	; (b7c28 <loop+0xf34>)
   b7ada:	4854      	ldr	r0, [pc, #336]	; (b7c2c <loop+0xf38>)
   b7adc:	f002 ff24 	bl	ba928 <_ZN5Print5printEPKc>
          }
   b7ae0:	4852      	ldr	r0, [pc, #328]	; (b7c2c <loop+0xf38>)
   b7ae2:	f002 f8cb 	bl	b9c7c <_ZN16Adafruit_SSD13067displayEv>
          duraciones[posicion] = 0;
   b7ae6:	6833      	ldr	r3, [r6, #0]
   b7ae8:	4a51      	ldr	r2, [pc, #324]	; (b7c30 <loop+0xf3c>)
   b7aea:	f04f 31ff 	mov.w	r1, #4294967295
   b7aee:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
          
   b7af2:	4a50      	ldr	r2, [pc, #320]	; (b7c34 <loop+0xf40>)
   b7af4:	2100      	movs	r1, #0
   b7af6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
          bucle = true;
   b7afa:	3301      	adds	r3, #1
   b7afc:	6033      	str	r3, [r6, #0]

   b7afe:	2301      	movs	r3, #1
   b7b00:	703b      	strb	r3, [r7, #0]
   b7b02:	e727      	b.n	b7954 <loop+0xc60>
            snprintf(buf, sizeof(buf), "...");
   b7b04:	2b17      	cmp	r3, #23
   b7b06:	d1ee      	bne.n	b7ae6 <loop+0xdf2>
            display.print(buf);
   b7b08:	494d      	ldr	r1, [pc, #308]	; (b7c40 <loop+0xf4c>)
   b7b0a:	4847      	ldr	r0, [pc, #284]	; (b7c28 <loop+0xf34>)
   b7b0c:	f003 fd10 	bl	bb530 <strcpy>
   b7b10:	e7e2      	b.n	b7ad8 <loop+0xde4>
          showBitmap(2,2,"");
   b7b12:	f003 f96b 	bl	badec <_Z16_fetch_usbserialv>
   b7b16:	494d      	ldr	r1, [pc, #308]	; (b7c4c <loop+0xf58>)
          showBitmap(2,2,"");
   b7b18:	f002 ff19 	bl	ba94e <_ZN5Print7printlnEPKc>
        }
   b7b1c:	494c      	ldr	r1, [pc, #304]	; (b7c50 <loop+0xf5c>)
   b7b1e:	a8c0      	add	r0, sp, #768	; 0x300
   b7b20:	f002 fe47 	bl	ba7b2 <_ZN6StringC1EPK19__FlashStringHelper>
   b7b24:	2102      	movs	r1, #2
   b7b26:	aac0      	add	r2, sp, #768	; 0x300
   b7b28:	4608      	mov	r0, r1
   b7b2a:	e728      	b.n	b797e <loop+0xc8a>
          Serial.println("END Loop");
   b7b2c:	4f42      	ldr	r7, [pc, #264]	; (b7c38 <loop+0xf44>)
   b7b2e:	783b      	ldrb	r3, [r7, #0]
   b7b30:	2b00      	cmp	r3, #0
   b7b32:	d057      	beq.n	b7be4 <loop+0xef0>
   b7b34:	f8df 8104 	ldr.w	r8, [pc, #260]	; b7c3c <loop+0xf48>
   b7b38:	f8d8 3000 	ldr.w	r3, [r8]
   b7b3c:	2b00      	cmp	r3, #0
   b7b3e:	dd51      	ble.n	b7be4 <loop+0xef0>
          //showBitmap(3,0,String(tagInfo[2]+2)+" iteraciones");
   b7b40:	f003 f954 	bl	badec <_Z16_fetch_usbserialv>
   b7b44:	4943      	ldr	r1, [pc, #268]	; (b7c54 <loop+0xf60>)
          if (posicion<23) {
   b7b46:	4e35      	ldr	r6, [pc, #212]	; (b7c1c <loop+0xf28>)
   b7b48:	f8df 90d4 	ldr.w	r9, [pc, #212]	; b7c20 <loop+0xf2c>
          //showBitmap(3,0,String(tagInfo[2]+2)+" iteraciones");
   b7b4c:	f002 feff 	bl	ba94e <_ZN5Print7printlnEPKc>
          if (posicion<23) {
   b7b50:	68a1      	ldr	r1, [r4, #8]
   b7b52:	220a      	movs	r2, #10
   b7b54:	3102      	adds	r1, #2
   b7b56:	a8bc      	add	r0, sp, #752	; 0x2f0
   b7b58:	f002 fe6b 	bl	ba832 <_ZN6StringC1Eih>
	StringSumHelper(const String &s) : String(s) {}
   b7b5c:	a9bc      	add	r1, sp, #752	; 0x2f0
   b7b5e:	a8c0      	add	r0, sp, #768	; 0x300
   b7b60:	f002 fe4a 	bl	ba7f8 <_ZN6StringC1ERKS_>
   b7b64:	493c      	ldr	r1, [pc, #240]	; (b7c58 <loop+0xf64>)
   b7b66:	a8c0      	add	r0, sp, #768	; 0x300
   b7b68:	f002 fe99 	bl	ba89e <_ZplRK15StringSumHelperPKc>
   b7b6c:	4601      	mov	r1, r0
   b7b6e:	6830      	ldr	r0, [r6, #0]
   b7b70:	eb09 1000 	add.w	r0, r9, r0, lsl #4
   b7b74:	f002 fe31 	bl	ba7da <_ZN6StringaSERKS_>
class StringSumHelper : public String
   b7b78:	a8c0      	add	r0, sp, #768	; 0x300
   b7b7a:	f002 fdcf 	bl	ba71c <_ZN6StringD1Ev>
   b7b7e:	a8bc      	add	r0, sp, #752	; 0x2f0
   b7b80:	f002 fdcc 	bl	ba71c <_ZN6StringD1Ev>
            snprintf(buf, sizeof(buf), secuencia[posicion]);
   b7b84:	6833      	ldr	r3, [r6, #0]
   b7b86:	2b16      	cmp	r3, #22
   b7b88:	dc25      	bgt.n	b7bd6 <loop+0xee2>
	const char * c_str() const { return buffer; }
   b7b8a:	011b      	lsls	r3, r3, #4
            display.print(buf);
   b7b8c:	4826      	ldr	r0, [pc, #152]	; (b7c28 <loop+0xf34>)
   b7b8e:	f859 2003 	ldr.w	r2, [r9, r3]
   b7b92:	2140      	movs	r1, #64	; 0x40
   b7b94:	f002 fc4c 	bl	ba430 <snprintf>
            display.display();
   b7b98:	4923      	ldr	r1, [pc, #140]	; (b7c28 <loop+0xf34>)
   b7b9a:	4824      	ldr	r0, [pc, #144]	; (b7c2c <loop+0xf38>)
   b7b9c:	f002 fec4 	bl	ba928 <_ZN5Print5printEPKc>
          }
   b7ba0:	4822      	ldr	r0, [pc, #136]	; (b7c2c <loop+0xf38>)
   b7ba2:	f002 f86b 	bl	b9c7c <_ZN16Adafruit_SSD13067displayEv>
          duraciones[posicion] = tam_bucle; // Almacenamos el tamaño del bucle en la posicion donde acaba
   b7ba6:	6833      	ldr	r3, [r6, #0]
   b7ba8:	4a21      	ldr	r2, [pc, #132]	; (b7c30 <loop+0xf3c>)
          duraciones[posicion - (tam_bucle+1)] = tagInfo[2]+2; // Almacenamos el num de iteraciones en la posicion de inicio del bucle
   b7baa:	4822      	ldr	r0, [pc, #136]	; (b7c34 <loop+0xf40>)
          duraciones[posicion] = tam_bucle; // Almacenamos el tamaño del bucle en la posicion donde acaba
   b7bac:	f06f 0101 	mvn.w	r1, #1
   b7bb0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
          duraciones[posicion - (tam_bucle+1)] = tagInfo[2]+2; // Almacenamos el num de iteraciones en la posicion de inicio del bucle
   b7bb4:	f8d8 2000 	ldr.w	r2, [r8]
   b7bb8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
          
   b7bbc:	68a1      	ldr	r1, [r4, #8]
   b7bbe:	3201      	adds	r2, #1
   b7bc0:	1a9a      	subs	r2, r3, r2
          bucle = false;
   b7bc2:	3301      	adds	r3, #1
          
   b7bc4:	3102      	adds	r1, #2
          bucle = false;
   b7bc6:	6033      	str	r3, [r6, #0]
          tam_bucle = 0;
   b7bc8:	2300      	movs	r3, #0
          
   b7bca:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
          tam_bucle = 0;
   b7bce:	703b      	strb	r3, [r7, #0]

   b7bd0:	f8c8 3000 	str.w	r3, [r8]
   b7bd4:	e6be      	b.n	b7954 <loop+0xc60>
            snprintf(buf, sizeof(buf), "...");
   b7bd6:	2b17      	cmp	r3, #23
   b7bd8:	d1e5      	bne.n	b7ba6 <loop+0xeb2>
            display.print(buf);
   b7bda:	4919      	ldr	r1, [pc, #100]	; (b7c40 <loop+0xf4c>)
   b7bdc:	4812      	ldr	r0, [pc, #72]	; (b7c28 <loop+0xf34>)
   b7bde:	f003 fca7 	bl	bb530 <strcpy>
   b7be2:	e7d9      	b.n	b7b98 <loop+0xea4>
          showBitmap(2,2,"");
   b7be4:	f003 f902 	bl	badec <_Z16_fetch_usbserialv>
   b7be8:	491c      	ldr	r1, [pc, #112]	; (b7c5c <loop+0xf68>)
   b7bea:	e795      	b.n	b7b18 <loop+0xe24>
        Serial.println("Tarjeta inválida para este modo");
   b7bec:	3601      	adds	r6, #1
   b7bee:	f43f aeb1 	beq.w	b7954 <loop+0xc60>
        showBitmap(2,0,"");
   b7bf2:	f003 f8fb 	bl	badec <_Z16_fetch_usbserialv>
   b7bf6:	491a      	ldr	r1, [pc, #104]	; (b7c60 <loop+0xf6c>)
   b7bf8:	f002 fea9 	bl	ba94e <_ZN5Print7printlnEPKc>
      }
   b7bfc:	4914      	ldr	r1, [pc, #80]	; (b7c50 <loop+0xf5c>)
   b7bfe:	a8c0      	add	r0, sp, #768	; 0x300
   b7c00:	f002 fdd7 	bl	ba7b2 <_ZN6StringC1EPK19__FlashStringHelper>
   b7c04:	aac0      	add	r2, sp, #768	; 0x300
   b7c06:	2100      	movs	r1, #0
   b7c08:	4638      	mov	r0, r7
   b7c0a:	e6b8      	b.n	b797e <loop+0xc8a>
   b7c0c:	2003da48 	.word	0x2003da48
   b7c10:	000bc0e8 	.word	0x000bc0e8
   b7c14:	000bc0f6 	.word	0x000bc0f6
   b7c18:	000bbdc3 	.word	0x000bbdc3
   b7c1c:	2003da34 	.word	0x2003da34
   b7c20:	2003da50 	.word	0x2003da50
   b7c24:	000bc156 	.word	0x000bc156
   b7c28:	2003d301 	.word	0x2003d301
   b7c2c:	2003d34c 	.word	0x2003d34c
   b7c30:	2003d704 	.word	0x2003d704
   b7c34:	2003d3bc 	.word	0x2003d3bc
   b7c38:	2003d300 	.word	0x2003d300
   b7c3c:	2003dc38 	.word	0x2003dc38
   b7c40:	000bbd71 	.word	0x000bbd71
   b7c44:	000bc14e 	.word	0x000bc14e
   b7c48:	000bc10d 	.word	0x000bc10d
   b7c4c:	000bc115 	.word	0x000bc115
   b7c50:	000bb886 	.word	0x000bb886
   b7c54:	000bc14a 	.word	0x000bc14a
   b7c58:	000bc153 	.word	0x000bc153
   b7c5c:	000bc15a 	.word	0x000bc15a
   b7c60:	000bc05e 	.word	0x000bc05e
    {
   b7c64:	2e03      	cmp	r6, #3
   b7c66:	4f77      	ldr	r7, [pc, #476]	; (b7e44 <loop+0x1150>)
   b7c68:	d057      	beq.n	b7d1a <loop+0x1026>
   b7c6a:	2e06      	cmp	r6, #6
   b7c6c:	f040 8088 	bne.w	b7d80 <loop+0x108c>
   b7c70:	f7fd fc16 	bl	b54a0 <_Z12pitidoBlink0v>
        {
   b7c74:	6866      	ldr	r6, [r4, #4]
   b7c76:	2e01      	cmp	r6, #1
   b7c78:	d029      	beq.n	b7cce <loop+0xfda>
   b7c7a:	2e02      	cmp	r6, #2
   b7c7c:	d029      	beq.n	b7cd2 <loop+0xfde>
   b7c7e:	b92e      	cbnz	r6, b7c8c <loop+0xf98>
            resetFunc();
   b7c80:	68a0      	ldr	r0, [r4, #8]
   b7c82:	f7fe ffdd 	bl	b6c40 <_Z10cambioModoi>
            break;
   b7c86:	4b70      	ldr	r3, [pc, #448]	; (b7e48 <loop+0x1154>)
   b7c88:	681b      	ldr	r3, [r3, #0]
   b7c8a:	4798      	blx	r3
      tagInfo[0]=-1;
   b7c8c:	6823      	ldr	r3, [r4, #0]
          val = leerSensorExp(bloques[0].sensores[0].id, bloques[0].sensores[0].puerto);
   b7c8e:	683e      	ldr	r6, [r7, #0]
      tagInfo[0]=-1;
   b7c90:	3301      	adds	r3, #1
    }
   b7c92:	bf1c      	itt	ne
   b7c94:	f04f 33ff 	movne.w	r3, #4294967295
   b7c98:	6023      	strne	r3, [r4, #0]
          val = leerSensorExp(bloques[0].sensores[0].id, bloques[0].sensores[0].puerto);
   b7c9a:	2e00      	cmp	r6, #0
   b7c9c:	f340 80bd 	ble.w	b7e1a <loop+0x1126>
   b7ca0:	782b      	ldrb	r3, [r5, #0]
   b7ca2:	2b00      	cmp	r3, #0
   b7ca4:	f43f aa2c 	beq.w	b7100 <loop+0x40c>

   b7ca8:	4b68      	ldr	r3, [pc, #416]	; (b7e4c <loop+0x1158>)
   b7caa:	4d69      	ldr	r5, [pc, #420]	; (b7e50 <loop+0x115c>)
   b7cac:	6919      	ldr	r1, [r3, #16]
   b7cae:	6858      	ldr	r0, [r3, #4]
   b7cb0:	f7fd fb0a 	bl	b52c8 <_Z13leerSensorExpii>
   b7cb4:	68e3      	ldr	r3, [r4, #12]
   b7cb6:	6028      	str	r0, [r5, #0]
          {
   b7cb8:	3b02      	subs	r3, #2
   b7cba:	2b0a      	cmp	r3, #10
   b7cbc:	d87b      	bhi.n	b7db6 <loop+0x10c2>
   b7cbe:	e8df f003 	tbb	[pc, r3]
   b7cc2:	6e69      	.short	0x6e69
   b7cc4:	9e72707a 	.word	0x9e72707a
   b7cc8:	7a7a7a7a 	.word	0x7a7a7a7a
   b7ccc:	a0          	.byte	0xa0
   b7ccd:	00          	.byte	0x00
            //showBitmap(3,0,"Ejecutando...");
   b7cce:	702e      	strb	r6, [r5, #0]

   b7cd0:	e7dc      	b.n	b7c8c <loop+0xf98>
              borradoALL(0);
   b7cd2:	68a3      	ldr	r3, [r4, #8]
   b7cd4:	2b01      	cmp	r3, #1
   b7cd6:	d10e      	bne.n	b7cf6 <loop+0x1002>

   b7cd8:	495e      	ldr	r1, [pc, #376]	; (b7e54 <loop+0x1160>)
   b7cda:	a8c0      	add	r0, sp, #768	; 0x300
   b7cdc:	f7fc feca 	bl	b4a74 <_Z10borradoALLi.part.0>
   b7ce0:	f002 fd67 	bl	ba7b2 <_ZN6StringC1EPK19__FlashStringHelper>
   b7ce4:	aac0      	add	r2, sp, #768	; 0x300
   b7ce6:	2100      	movs	r1, #0
   b7ce8:	2003      	movs	r0, #3
        }
   b7cea:	f7fe fd1b 	bl	b6724 <_Z10showBitmapii6String>
   b7cee:	a8c0      	add	r0, sp, #768	; 0x300
   b7cf0:	f002 fd14 	bl	ba71c <_ZN6StringD1Ev>
   b7cf4:	e7ca      	b.n	b7c8c <loop+0xf98>
              Serial.println("Borrado no permitido para este modo");
   b7cf6:	4958      	ldr	r1, [pc, #352]	; (b7e58 <loop+0x1164>)
   b7cf8:	a8c0      	add	r0, sp, #768	; 0x300
   b7cfa:	f002 fd5a 	bl	ba7b2 <_ZN6StringC1EPK19__FlashStringHelper>
   b7cfe:	aac0      	add	r2, sp, #768	; 0x300
   b7d00:	2101      	movs	r1, #1
   b7d02:	4630      	mov	r0, r6
   b7d04:	f7fe fd0e 	bl	b6724 <_Z10showBitmapii6String>
   b7d08:	a8c0      	add	r0, sp, #768	; 0x300
   b7d0a:	f002 fd07 	bl	ba71c <_ZN6StringD1Ev>
            }
   b7d0e:	f003 f86d 	bl	badec <_Z16_fetch_usbserialv>
   b7d12:	4952      	ldr	r1, [pc, #328]	; (b7e5c <loop+0x1168>)
   b7d14:	f002 fe1b 	bl	ba94e <_ZN5Print7printlnEPKc>
   b7d18:	e7b8      	b.n	b7c8c <loop+0xf98>
        tipo = tagInfo[2];
   b7d1a:	f8df a17c 	ldr.w	sl, [pc, #380]	; b7e98 <loop+0x11a4>
   b7d1e:	68e3      	ldr	r3, [r4, #12]

   b7d20:	f8df 9178 	ldr.w	r9, [pc, #376]	; b7e9c <loop+0x11a8>
          Serial.println("Sensor detectado");
   b7d24:	f8d4 8004 	ldr.w	r8, [r4, #4]
        tipo = tagInfo[2];
   b7d28:	f8ca 3000 	str.w	r3, [sl]

   b7d2c:	68a3      	ldr	r3, [r4, #8]
   b7d2e:	f8c9 3000 	str.w	r3, [r9]
          Serial.println("Sensor detectado");
   b7d32:	f1b8 0f00 	cmp.w	r8, #0
   b7d36:	d1a9      	bne.n	b7c8c <loop+0xf98>

   b7d38:	f003 f858 	bl	badec <_Z16_fetch_usbserialv>
   b7d3c:	4948      	ldr	r1, [pc, #288]	; (b7e60 <loop+0x116c>)
   b7d3e:	f002 fe06 	bl	ba94e <_ZN5Print7printlnEPKc>
          bloques[0].numSensores++;
   b7d42:	4a42      	ldr	r2, [pc, #264]	; (b7e4c <loop+0x1158>)
          
   b7d44:	f8d9 3000 	ldr.w	r3, [r9]

   b7d48:	f8da 1000 	ldr.w	r1, [sl]
          bloques[0].numSensores++;
   b7d4c:	6051      	str	r1, [r2, #4]
          numSensoresBloque++;
   b7d4e:	6811      	ldr	r1, [r2, #0]
          
   b7d50:	2b00      	cmp	r3, #0
          numSensoresBloque++;
   b7d52:	f101 0101 	add.w	r1, r1, #1
          
   b7d56:	bf18      	it	ne
   b7d58:	2302      	movne	r3, #2
          numSensoresBloque++;
   b7d5a:	6011      	str	r1, [r2, #0]
          bloques[0].numSensores++;
   b7d5c:	6113      	str	r3, [r2, #16]
          
   b7d5e:	683a      	ldr	r2, [r7, #0]
          } else {
   b7d60:	493d      	ldr	r1, [pc, #244]	; (b7e58 <loop+0x1164>)
          
   b7d62:	3201      	adds	r2, #1
   b7d64:	603a      	str	r2, [r7, #0]
          } else {
   b7d66:	a8c0      	add	r0, sp, #768	; 0x300
            showBitmap(1,3,""); //A0
   b7d68:	b92b      	cbnz	r3, b7d76 <loop+0x1082>
          } else {
   b7d6a:	f002 fd22 	bl	ba7b2 <_ZN6StringC1EPK19__FlashStringHelper>
   b7d6e:	aac0      	add	r2, sp, #768	; 0x300
   b7d70:	4631      	mov	r1, r6
          }
   b7d72:	2001      	movs	r0, #1
   b7d74:	e7b9      	b.n	b7cea <loop+0xff6>
   b7d76:	f002 fd1c 	bl	ba7b2 <_ZN6StringC1EPK19__FlashStringHelper>
   b7d7a:	aac0      	add	r2, sp, #768	; 0x300
   b7d7c:	4641      	mov	r1, r8
   b7d7e:	e7f8      	b.n	b7d72 <loop+0x107e>
          showBitmap(2,0,"");
   b7d80:	3601      	adds	r6, #1
   b7d82:	d083      	beq.n	b7c8c <loop+0xf98>
        }
   b7d84:	4934      	ldr	r1, [pc, #208]	; (b7e58 <loop+0x1164>)
   b7d86:	a8c0      	add	r0, sp, #768	; 0x300
   b7d88:	f002 fd13 	bl	ba7b2 <_ZN6StringC1EPK19__FlashStringHelper>
   b7d8c:	aac0      	add	r2, sp, #768	; 0x300
   b7d8e:	2100      	movs	r1, #0
   b7d90:	2002      	movs	r0, #2
   b7d92:	e7aa      	b.n	b7cea <loop+0xff6>
              break;
   b7d94:	4933      	ldr	r1, [pc, #204]	; (b7e64 <loop+0x1170>)
              break;
   b7d96:	4834      	ldr	r0, [pc, #208]	; (b7e68 <loop+0x1174>)
   b7d98:	f003 fbca 	bl	bb530 <strcpy>
          }
   b7d9c:	e00b      	b.n	b7db6 <loop+0x10c2>
              break;
   b7d9e:	4933      	ldr	r1, [pc, #204]	; (b7e6c <loop+0x1178>)
   b7da0:	e7f9      	b.n	b7d96 <loop+0x10a2>
              break;
   b7da2:	4933      	ldr	r1, [pc, #204]	; (b7e70 <loop+0x117c>)
   b7da4:	e7f7      	b.n	b7d96 <loop+0x10a2>
              val = ajusta_temp(val);
   b7da6:	4933      	ldr	r1, [pc, #204]	; (b7e74 <loop+0x1180>)
   b7da8:	482f      	ldr	r0, [pc, #188]	; (b7e68 <loop+0x1174>)
   b7daa:	f003 fbc1 	bl	bb530 <strcpy>
              break;
   b7dae:	6828      	ldr	r0, [r5, #0]
   b7db0:	f7fe f89e 	bl	b5ef0 <_Z11ajusta_tempi>
   b7db4:	6028      	str	r0, [r5, #0]
          display.setCursor(0, 0);
   b7db6:	4c30      	ldr	r4, [pc, #192]	; (b7e78 <loop+0x1184>)
   b7db8:	4620      	mov	r0, r4
   b7dba:	f001 fcf7 	bl	b97ac <_ZN16Adafruit_SSD130612clearDisplayEv>
   b7dbe:	2300      	movs	r3, #0

   b7dc0:	4929      	ldr	r1, [pc, #164]	; (b7e68 <loop+0x1174>)
   b7dc2:	6123      	str	r3, [r4, #16]
   b7dc4:	4620      	mov	r0, r4
   b7dc6:	f002 fdaf 	bl	ba928 <_ZN5Print5printEPKc>

   b7dca:	682b      	ldr	r3, [r5, #0]
   b7dcc:	4a2b      	ldr	r2, [pc, #172]	; (b7e7c <loop+0x1188>)
   b7dce:	4826      	ldr	r0, [pc, #152]	; (b7e68 <loop+0x1174>)
   b7dd0:	2140      	movs	r1, #64	; 0x40
   b7dd2:	f002 fb2d 	bl	ba430 <snprintf>
            display.setCursor(53, 25);
   b7dd6:	682b      	ldr	r3, [r5, #0]
   b7dd8:	2b09      	cmp	r3, #9
   b7dda:	dc14      	bgt.n	b7e06 <loop+0x1112>
   b7ddc:	4b28      	ldr	r3, [pc, #160]	; (b7e80 <loop+0x118c>)
   b7dde:	6123      	str	r3, [r4, #16]
          display.print(buf);
   b7de0:	4825      	ldr	r0, [pc, #148]	; (b7e78 <loop+0x1184>)
   b7de2:	2104      	movs	r1, #4
   b7de4:	f000 fe1d 	bl	b8a22 <_ZN12Adafruit_GFX11setTextSizeEh>
          display.setTextSize(1);
   b7de8:	491f      	ldr	r1, [pc, #124]	; (b7e68 <loop+0x1174>)
   b7dea:	4823      	ldr	r0, [pc, #140]	; (b7e78 <loop+0x1184>)
   b7dec:	f002 fd9c 	bl	ba928 <_ZN5Print5printEPKc>

   b7df0:	4821      	ldr	r0, [pc, #132]	; (b7e78 <loop+0x1184>)
   b7df2:	2101      	movs	r1, #1
   b7df4:	f000 fe15 	bl	b8a22 <_ZN12Adafruit_GFX11setTextSizeEh>
        }  else if (numSensoresBloque==0 && play == true) {
   b7df8:	481f      	ldr	r0, [pc, #124]	; (b7e78 <loop+0x1184>)
   b7dfa:	f7ff b893 	b.w	b6f24 <loop+0x230>
              break;
   b7dfe:	4921      	ldr	r1, [pc, #132]	; (b7e84 <loop+0x1190>)
   b7e00:	e7c9      	b.n	b7d96 <loop+0x10a2>
              break;
   b7e02:	4921      	ldr	r1, [pc, #132]	; (b7e88 <loop+0x1194>)
   b7e04:	e7c7      	b.n	b7d96 <loop+0x10a2>
            display.setCursor(40, 25);
   b7e06:	2b63      	cmp	r3, #99	; 0x63
   b7e08:	dc01      	bgt.n	b7e0e <loop+0x111a>
   b7e0a:	4b20      	ldr	r3, [pc, #128]	; (b7e8c <loop+0x1198>)
   b7e0c:	e7e7      	b.n	b7dde <loop+0x10ea>
            display.setCursor(27, 25);
   b7e0e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   b7e12:	bfb4      	ite	lt
   b7e14:	4b1e      	ldrlt	r3, [pc, #120]	; (b7e90 <loop+0x119c>)
   b7e16:	4b1f      	ldrge	r3, [pc, #124]	; (b7e94 <loop+0x11a0>)
   b7e18:	e7e1      	b.n	b7dde <loop+0x10ea>
              showBitmap(2,4,"");
   b7e1a:	f47f a971 	bne.w	b7100 <loop+0x40c>
   b7e1e:	782b      	ldrb	r3, [r5, #0]
   b7e20:	2b00      	cmp	r3, #0
   b7e22:	f43f a96d 	beq.w	b7100 <loop+0x40c>
              play=false;
   b7e26:	490c      	ldr	r1, [pc, #48]	; (b7e58 <loop+0x1164>)
   b7e28:	a8c0      	add	r0, sp, #768	; 0x300
   b7e2a:	f002 fcc2 	bl	ba7b2 <_ZN6StringC1EPK19__FlashStringHelper>
   b7e2e:	aac0      	add	r2, sp, #768	; 0x300
   b7e30:	2104      	movs	r1, #4
   b7e32:	2002      	movs	r0, #2
   b7e34:	f7fe fc76 	bl	b6724 <_Z10showBitmapii6String>
   b7e38:	a8c0      	add	r0, sp, #768	; 0x300
   b7e3a:	f002 fc6f 	bl	ba71c <_ZN6StringD1Ev>
        }
   b7e3e:	702e      	strb	r6, [r5, #0]
   b7e40:	f7ff b95e 	b.w	b7100 <loop+0x40c>
   b7e44:	2003da2c 	.word	0x2003da2c
   b7e48:	2003da48 	.word	0x2003da48
   b7e4c:	2003cd28 	.word	0x2003cd28
   b7e50:	2003e6b4 	.word	0x2003e6b4
   b7e54:	000bbdc3 	.word	0x000bbdc3
   b7e58:	000bb886 	.word	0x000bb886
   b7e5c:	000bbdde 	.word	0x000bbdde
   b7e60:	000bbe02 	.word	0x000bbe02
   b7e64:	000bc17c 	.word	0x000bc17c
   b7e68:	2003d301 	.word	0x2003d301
   b7e6c:	000bc18a 	.word	0x000bc18a
   b7e70:	000bc1a0 	.word	0x000bc1a0
   b7e74:	000bc1b4 	.word	0x000bc1b4
   b7e78:	2003d34c 	.word	0x2003d34c
   b7e7c:	000bc05b 	.word	0x000bc05b
   b7e80:	00190035 	.word	0x00190035
   b7e84:	000bc1cc 	.word	0x000bc1cc
   b7e88:	000bc1df 	.word	0x000bc1df
   b7e8c:	00190028 	.word	0x00190028
   b7e90:	0019001b 	.word	0x0019001b
   b7e94:	0019000a 	.word	0x0019000a
   b7e98:	2003d6e0 	.word	0x2003d6e0
   b7e9c:	2003e6b0 	.word	0x2003e6b0

000b7ea0 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   b7ea0:	4770      	bx	lr

000b7ea2 <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   b7ea2:	b510      	push	{r4, lr}
  }
   b7ea4:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   b7ea6:	4604      	mov	r4, r0
  }
   b7ea8:	f7fc fdcd 	bl	b4a46 <_ZdlPvj>
   b7eac:	4620      	mov	r0, r4
   b7eae:	bd10      	pop	{r4, pc}

000b7eb0 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   b7eb0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b7eb2:	4604      	mov	r4, r0
   b7eb4:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   b7eb6:	7922      	ldrb	r2, [r4, #4]
   b7eb8:	68a3      	ldr	r3, [r4, #8]
   b7eba:	b132      	cbz	r2, b7eca <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   b7ebc:	b9a3      	cbnz	r3, b7ee8 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   b7ebe:	490b      	ldr	r1, [pc, #44]	; (b7eec <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   b7ec0:	b002      	add	sp, #8
   b7ec2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   b7ec6:	f002 bd2f 	b.w	ba928 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b7eca:	4a09      	ldr	r2, [pc, #36]	; (b7ef0 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   b7ecc:	7b26      	ldrb	r6, [r4, #12]
   b7ece:	4d09      	ldr	r5, [pc, #36]	; (b7ef4 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   b7ed0:	4909      	ldr	r1, [pc, #36]	; (b7ef8 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   b7ed2:	7b64      	ldrb	r4, [r4, #13]
   b7ed4:	2e01      	cmp	r6, #1
   b7ed6:	bf18      	it	ne
   b7ed8:	4629      	movne	r1, r5
   b7eda:	e9cd 1400 	strd	r1, r4, [sp]
   b7ede:	4907      	ldr	r1, [pc, #28]	; (b7efc <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   b7ee0:	f7fc fdfb 	bl	b4ada <_ZN5Print6printfEPKcz>
  }
   b7ee4:	b002      	add	sp, #8
   b7ee6:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b7ee8:	4a05      	ldr	r2, [pc, #20]	; (b7f00 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   b7eea:	e7ef      	b.n	b7ecc <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   b7eec:	000bc60b 	.word	0x000bc60b
   b7ef0:	000bb886 	.word	0x000bb886
   b7ef4:	000bc607 	.word	0x000bc607
   b7ef8:	000bc603 	.word	0x000bc603
   b7efc:	000bc621 	.word	0x000bc621
   b7f00:	000bc5fa 	.word	0x000bc5fa

000b7f04 <_ZN12Adafruit_GFX9writeLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   b7f04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7f08:	b085      	sub	sp, #20
   b7f0a:	461f      	mov	r7, r3
   b7f0c:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
   b7f10:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
#if defined(ESP8266)
    yield();
#endif
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   b7f14:	eba8 0902 	sub.w	r9, r8, r2
   b7f18:	eba7 0a01 	sub.w	sl, r7, r1
   b7f1c:	f1b9 0f00 	cmp.w	r9, #0
   b7f20:	bfb8      	it	lt
   b7f22:	f1c9 0900 	rsblt	r9, r9, #0
   b7f26:	f1ba 0f00 	cmp.w	sl, #0
   b7f2a:	bfb8      	it	lt
   b7f2c:	f1ca 0a00 	rsblt	sl, sl, #0
    if (steep) {
   b7f30:	45d1      	cmp	r9, sl
        uint16_t color) {
   b7f32:	4683      	mov	fp, r0
   b7f34:	460c      	mov	r4, r1
   b7f36:	4615      	mov	r5, r2
    if (steep) {
   b7f38:	dd04      	ble.n	b7f44 <_ZN12Adafruit_GFX9writeLineEsssst+0x40>
   b7f3a:	463a      	mov	r2, r7
        _swap_int16_t(x0, y0);
   b7f3c:	462c      	mov	r4, r5
        _swap_int16_t(x1, y1);
   b7f3e:	4647      	mov	r7, r8
        _swap_int16_t(x0, y0);
   b7f40:	460d      	mov	r5, r1
        _swap_int16_t(x1, y1);
   b7f42:	4690      	mov	r8, r2
    }

    if (x0 > x1) {
   b7f44:	42bc      	cmp	r4, r7
   b7f46:	dd05      	ble.n	b7f54 <_ZN12Adafruit_GFX9writeLineEsssst+0x50>
   b7f48:	462a      	mov	r2, r5
        _swap_int16_t(x0, x1);
        _swap_int16_t(y0, y1);
   b7f4a:	4645      	mov	r5, r8
   b7f4c:	4690      	mov	r8, r2
    if (x0 > x1) {
   b7f4e:	4622      	mov	r2, r4
   b7f50:	463c      	mov	r4, r7
   b7f52:	4617      	mov	r7, r2
    }

    int16_t dx, dy;
    dx = x1 - x0;
   b7f54:	1b3e      	subs	r6, r7, r4
   b7f56:	b2b2      	uxth	r2, r6
   b7f58:	9200      	str	r2, [sp, #0]
    dy = abs(y1 - y0);
   b7f5a:	eba8 0205 	sub.w	r2, r8, r5
   b7f5e:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
   b7f62:	eba1 71e2 	sub.w	r1, r1, r2, asr #31

    int16_t err = dx / 2;
   b7f66:	f3c6 32c0 	ubfx	r2, r6, #15, #1
   b7f6a:	fa02 f686 	sxtah	r6, r2, r6
    int16_t ystep;

    if (y0 < y1) {
        ystep = 1;
    } else {
        ystep = -1;
   b7f6e:	4545      	cmp	r5, r8
   b7f70:	bfb4      	ite	lt
   b7f72:	2201      	movlt	r2, #1
   b7f74:	f04f 32ff 	movge.w	r2, #4294967295
    dy = abs(y1 - y0);
   b7f78:	9101      	str	r1, [sp, #4]
    int16_t err = dx / 2;
   b7f7a:	1076      	asrs	r6, r6, #1
        ystep = -1;
   b7f7c:	9202      	str	r2, [sp, #8]
    }

    for (; x0<=x1; x0++) {
   b7f7e:	42bc      	cmp	r4, r7
   b7f80:	dc1c      	bgt.n	b7fbc <_ZN12Adafruit_GFX9writeLineEsssst+0xb8>
        if (steep) {
            writePixel(y0, x0, color);
   b7f82:	f8db 2000 	ldr.w	r2, [fp]
   b7f86:	9303      	str	r3, [sp, #12]
        if (steep) {
   b7f88:	45d1      	cmp	r9, sl
            writePixel(y0, x0, color);
   b7f8a:	f8d2 8018 	ldr.w	r8, [r2, #24]
   b7f8e:	bfc7      	ittee	gt
   b7f90:	4629      	movgt	r1, r5
   b7f92:	4622      	movgt	r2, r4
        } else {
            writePixel(x0, y0, color);
   b7f94:	462a      	movle	r2, r5
   b7f96:	4621      	movle	r1, r4
   b7f98:	4658      	mov	r0, fp
   b7f9a:	47c0      	blx	r8
        }
        err -= dy;
   b7f9c:	9a01      	ldr	r2, [sp, #4]
            writePixel(x0, y0, color);
   b7f9e:	9b03      	ldr	r3, [sp, #12]
        err -= dy;
   b7fa0:	1ab6      	subs	r6, r6, r2
   b7fa2:	b2b1      	uxth	r1, r6
   b7fa4:	b236      	sxth	r6, r6
        if (err < 0) {
   b7fa6:	2e00      	cmp	r6, #0
   b7fa8:	da05      	bge.n	b7fb6 <_ZN12Adafruit_GFX9writeLineEsssst+0xb2>
            y0 += ystep;
   b7faa:	9a02      	ldr	r2, [sp, #8]
   b7fac:	4415      	add	r5, r2
            err += dx;
   b7fae:	9a00      	ldr	r2, [sp, #0]
   b7fb0:	1856      	adds	r6, r2, r1
            y0 += ystep;
   b7fb2:	b22d      	sxth	r5, r5
            err += dx;
   b7fb4:	b236      	sxth	r6, r6
    for (; x0<=x1; x0++) {
   b7fb6:	3401      	adds	r4, #1
   b7fb8:	b224      	sxth	r4, r4
   b7fba:	e7e0      	b.n	b7f7e <_ZN12Adafruit_GFX9writeLineEsssst+0x7a>
        }
    }
}
   b7fbc:	b005      	add	sp, #20
   b7fbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b7fc2 <_ZN12Adafruit_GFX10startWriteEv>:
/*!
   @brief    Start a display-writing routine, overwrite in subclasses.
*/
/**************************************************************************/
void Adafruit_GFX::startWrite(){
}
   b7fc2:	4770      	bx	lr

000b7fc4 <_ZN12Adafruit_GFX10writePixelEsst>:
    @param   x   x coordinate
    @param   y   y coordinate
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writePixel(int16_t x, int16_t y, uint16_t color){
   b7fc4:	b410      	push	{r4}
    drawPixel(x, y, color);
   b7fc6:	6804      	ldr	r4, [r0, #0]
   b7fc8:	6924      	ldr	r4, [r4, #16]
   b7fca:	46a4      	mov	ip, r4
}
   b7fcc:	f85d 4b04 	ldr.w	r4, [sp], #4
    drawPixel(x, y, color);
   b7fd0:	4760      	bx	ip

000b7fd2 <_ZN12Adafruit_GFX14writeFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   b7fd2:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Can be just writeLine(x, y, x, y+h-1, color);
    // or writeFillRect(x, y, 1, h, color);
    drawFastVLine(x, y, h, color);
   b7fd4:	6804      	ldr	r4, [r0, #0]
        int16_t h, uint16_t color) {
   b7fd6:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastVLine(x, y, h, color);
   b7fda:	9502      	str	r5, [sp, #8]
   b7fdc:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   b7fde:	46a4      	mov	ip, r4
}
   b7fe0:	bc30      	pop	{r4, r5}
    drawFastVLine(x, y, h, color);
   b7fe2:	4760      	bx	ip

000b7fe4 <_ZN12Adafruit_GFX14writeFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   b7fe4:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Example: writeLine(x, y, x+w-1, y, color);
    // or writeFillRect(x, y, w, 1, color);
    drawFastHLine(x, y, w, color);
   b7fe6:	6804      	ldr	r4, [r0, #0]
        int16_t w, uint16_t color) {
   b7fe8:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastHLine(x, y, w, color);
   b7fec:	9502      	str	r5, [sp, #8]
   b7fee:	6be4      	ldr	r4, [r4, #60]	; 0x3c
   b7ff0:	46a4      	mov	ip, r4
}
   b7ff2:	bc30      	pop	{r4, r5}
    drawFastHLine(x, y, w, color);
   b7ff4:	4760      	bx	ip

000b7ff6 <_ZN12Adafruit_GFX13writeFillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b7ff6:	b470      	push	{r4, r5, r6}
   b7ff8:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
   b7ffc:	f8bd 6010 	ldrh.w	r6, [sp, #16]
    // Overwrite in subclasses if desired!
    fillRect(x,y,w,h,color);
   b8000:	6804      	ldr	r4, [r0, #0]
   b8002:	e9cd 5603 	strd	r5, r6, [sp, #12]
   b8006:	6c24      	ldr	r4, [r4, #64]	; 0x40
   b8008:	46a4      	mov	ip, r4
}
   b800a:	bc70      	pop	{r4, r5, r6}
    fillRect(x,y,w,h,color);
   b800c:	4760      	bx	ip

000b800e <_ZN12Adafruit_GFX13drawFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   b800e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b8012:	461c      	mov	r4, r3
    startWrite();
   b8014:	6803      	ldr	r3, [r0, #0]
        int16_t h, uint16_t color) {
   b8016:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   b801a:	695b      	ldr	r3, [r3, #20]
        int16_t h, uint16_t color) {
   b801c:	4605      	mov	r5, r0
   b801e:	4616      	mov	r6, r2
    writeLine(x, y, x, y+h-1, color);
   b8020:	3c01      	subs	r4, #1
   b8022:	4434      	add	r4, r6
        int16_t h, uint16_t color) {
   b8024:	460f      	mov	r7, r1
    writeLine(x, y, x, y+h-1, color);
   b8026:	b224      	sxth	r4, r4
    startWrite();
   b8028:	4798      	blx	r3
    writeLine(x, y, x, y+h-1, color);
   b802a:	682b      	ldr	r3, [r5, #0]
   b802c:	f8cd 8004 	str.w	r8, [sp, #4]
   b8030:	9400      	str	r4, [sp, #0]
   b8032:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   b8034:	4628      	mov	r0, r5
   b8036:	463b      	mov	r3, r7
   b8038:	4632      	mov	r2, r6
   b803a:	4639      	mov	r1, r7
   b803c:	47a0      	blx	r4
    endWrite();
   b803e:	682b      	ldr	r3, [r5, #0]
   b8040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b8042:	4628      	mov	r0, r5
}
   b8044:	b002      	add	sp, #8
   b8046:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   b804a:	4718      	bx	r3

000b804c <_ZN12Adafruit_GFX13drawFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   b804c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b8050:	461d      	mov	r5, r3
    startWrite();
   b8052:	6803      	ldr	r3, [r0, #0]
        int16_t w, uint16_t color) {
   b8054:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   b8058:	695b      	ldr	r3, [r3, #20]
        int16_t w, uint16_t color) {
   b805a:	4604      	mov	r4, r0
   b805c:	4617      	mov	r7, r2
   b805e:	460e      	mov	r6, r1
    startWrite();
   b8060:	4798      	blx	r3
    writeLine(x, y, x+w-1, y, color);
   b8062:	e9cd 7800 	strd	r7, r8, [sp]
   b8066:	6822      	ldr	r2, [r4, #0]
   b8068:	1e6b      	subs	r3, r5, #1
   b806a:	4433      	add	r3, r6
   b806c:	6a95      	ldr	r5, [r2, #40]	; 0x28
   b806e:	4620      	mov	r0, r4
   b8070:	b21b      	sxth	r3, r3
   b8072:	463a      	mov	r2, r7
   b8074:	4631      	mov	r1, r6
   b8076:	47a8      	blx	r5
    endWrite();
   b8078:	6823      	ldr	r3, [r4, #0]
   b807a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b807c:	4620      	mov	r0, r4
}
   b807e:	b002      	add	sp, #8
   b8080:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   b8084:	4718      	bx	r3

000b8086 <_ZN12Adafruit_GFX8fillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b8086:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b808a:	461e      	mov	r6, r3
    startWrite();
   b808c:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   b808e:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
    startWrite();
   b8092:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   b8094:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   b8098:	460c      	mov	r4, r1
   b809a:	4605      	mov	r5, r0
   b809c:	4617      	mov	r7, r2
    startWrite();
   b809e:	4798      	blx	r3
    for (int16_t i=x; i<x+w; i++) {
   b80a0:	4426      	add	r6, r4
   b80a2:	42b4      	cmp	r4, r6
        writeFastVLine(i, y, h, color);
   b80a4:	682b      	ldr	r3, [r5, #0]
    for (int16_t i=x; i<x+w; i++) {
   b80a6:	da0b      	bge.n	b80c0 <_ZN12Adafruit_GFX8fillRectEsssst+0x3a>
        writeFastVLine(i, y, h, color);
   b80a8:	f8cd 8000 	str.w	r8, [sp]
   b80ac:	f8d3 a020 	ldr.w	sl, [r3, #32]
   b80b0:	4621      	mov	r1, r4
   b80b2:	464b      	mov	r3, r9
   b80b4:	463a      	mov	r2, r7
   b80b6:	4628      	mov	r0, r5
   b80b8:	3401      	adds	r4, #1
   b80ba:	47d0      	blx	sl
    for (int16_t i=x; i<x+w; i++) {
   b80bc:	b224      	sxth	r4, r4
   b80be:	e7f0      	b.n	b80a2 <_ZN12Adafruit_GFX8fillRectEsssst+0x1c>
    }
    endWrite();
   b80c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b80c2:	4628      	mov	r0, r5
}
   b80c4:	b002      	add	sp, #8
   b80c6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   b80ca:	4718      	bx	r3

000b80cc <_ZN12Adafruit_GFX10fillScreenEt>:
/*!
   @brief    Fill the screen completely with one color. Update in subclasses if desired!
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillScreen(uint16_t color) {
   b80cc:	b513      	push	{r0, r1, r4, lr}
    fillRect(0, 0, _width, _height, color);
   b80ce:	6802      	ldr	r2, [r0, #0]
   b80d0:	9101      	str	r1, [sp, #4]
   b80d2:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
   b80d6:	9100      	str	r1, [sp, #0]
   b80d8:	6c14      	ldr	r4, [r2, #64]	; 0x40
   b80da:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b80de:	2200      	movs	r2, #0
   b80e0:	4611      	mov	r1, r2
   b80e2:	47a0      	blx	r4
}
   b80e4:	b002      	add	sp, #8
   b80e6:	bd10      	pop	{r4, pc}

000b80e8 <_ZN12Adafruit_GFX8drawLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   b80e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    // Update in subclasses if desired!
    if(x0 == x1){
   b80ec:	4299      	cmp	r1, r3
        uint16_t color) {
   b80ee:	4616      	mov	r6, r2
   b80f0:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
   b80f4:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
        if(y0 > y1) _swap_int16_t(y0, y1);
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b80f8:	6802      	ldr	r2, [r0, #0]
        uint16_t color) {
   b80fa:	4680      	mov	r8, r0
   b80fc:	460d      	mov	r5, r1
   b80fe:	461c      	mov	r4, r3
    if(x0 == x1){
   b8100:	d113      	bne.n	b812a <_ZN12Adafruit_GFX8drawLineEsssst+0x42>
        if(y0 > y1) _swap_int16_t(y0, y1);
   b8102:	42be      	cmp	r6, r7
   b8104:	bfc8      	it	gt
   b8106:	4633      	movgt	r3, r6
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b8108:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
        if(y0 > y1) _swap_int16_t(y0, y1);
   b810c:	bfc4      	itt	gt
   b810e:	463e      	movgt	r6, r7
   b8110:	461f      	movgt	r7, r3
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b8112:	1c7b      	adds	r3, r7, #1
   b8114:	6b94      	ldr	r4, [r2, #56]	; 0x38
   b8116:	1b9b      	subs	r3, r3, r6
    } else if(y0 == y1){
        if(x0 > x1) _swap_int16_t(x0, x1);
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b8118:	b21b      	sxth	r3, r3
   b811a:	4632      	mov	r2, r6
   b811c:	4629      	mov	r1, r5
   b811e:	4640      	mov	r0, r8
   b8120:	46a4      	mov	ip, r4
    } else {
        startWrite();
        writeLine(x0, y0, x1, y1, color);
        endWrite();
    }
}
   b8122:	b003      	add	sp, #12
   b8124:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b8128:	4760      	bx	ip
    } else if(y0 == y1){
   b812a:	42be      	cmp	r6, r7
   b812c:	d10a      	bne.n	b8144 <_ZN12Adafruit_GFX8drawLineEsssst+0x5c>
        if(x0 > x1) _swap_int16_t(x0, x1);
   b812e:	4299      	cmp	r1, r3
   b8130:	bfc2      	ittt	gt
   b8132:	460b      	movgt	r3, r1
   b8134:	4625      	movgt	r5, r4
   b8136:	461c      	movgt	r4, r3
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b8138:	1c63      	adds	r3, r4, #1
   b813a:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   b813e:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b8140:	1b5b      	subs	r3, r3, r5
   b8142:	e7e9      	b.n	b8118 <_ZN12Adafruit_GFX8drawLineEsssst+0x30>
        startWrite();
   b8144:	6953      	ldr	r3, [r2, #20]
   b8146:	4798      	blx	r3
        writeLine(x0, y0, x1, y1, color);
   b8148:	e9cd 7900 	strd	r7, r9, [sp]
   b814c:	f8d8 3000 	ldr.w	r3, [r8]
   b8150:	4640      	mov	r0, r8
   b8152:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   b8154:	4632      	mov	r2, r6
   b8156:	4623      	mov	r3, r4
   b8158:	4629      	mov	r1, r5
   b815a:	47b8      	blx	r7
        endWrite();
   b815c:	f8d8 3000 	ldr.w	r3, [r8]
   b8160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b8162:	4640      	mov	r0, r8
}
   b8164:	b003      	add	sp, #12
   b8166:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        endWrite();
   b816a:	4718      	bx	r3

000b816c <_ZN12Adafruit_GFX8drawRectEsssst>:
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b816c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b8170:	461d      	mov	r5, r3
    startWrite();
   b8172:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   b8174:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
    startWrite();
   b8178:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   b817a:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
   b817e:	4604      	mov	r4, r0
   b8180:	460f      	mov	r7, r1
   b8182:	4616      	mov	r6, r2
    startWrite();
   b8184:	4798      	blx	r3
    writeFastHLine(x, y, w, color);
   b8186:	6823      	ldr	r3, [r4, #0]
   b8188:	f8cd 8000 	str.w	r8, [sp]
   b818c:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   b8190:	4632      	mov	r2, r6
   b8192:	462b      	mov	r3, r5
   b8194:	4639      	mov	r1, r7
   b8196:	4620      	mov	r0, r4
   b8198:	47d0      	blx	sl
    writeFastHLine(x, y+h-1, w, color);
   b819a:	6823      	ldr	r3, [r4, #0]
   b819c:	f8cd 8000 	str.w	r8, [sp]
   b81a0:	f109 32ff 	add.w	r2, r9, #4294967295
   b81a4:	4432      	add	r2, r6
   b81a6:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   b81aa:	4639      	mov	r1, r7
   b81ac:	462b      	mov	r3, r5
   b81ae:	4620      	mov	r0, r4
   b81b0:	b212      	sxth	r2, r2
   b81b2:	47d0      	blx	sl
    writeFastVLine(x, y, h, color);
   b81b4:	6823      	ldr	r3, [r4, #0]
   b81b6:	f8cd 8000 	str.w	r8, [sp]
   b81ba:	f8d3 a020 	ldr.w	sl, [r3, #32]
   b81be:	4632      	mov	r2, r6
   b81c0:	464b      	mov	r3, r9
   b81c2:	4639      	mov	r1, r7
   b81c4:	4620      	mov	r0, r4
   b81c6:	47d0      	blx	sl
    writeFastVLine(x+w-1, y, h, color);
   b81c8:	1e6b      	subs	r3, r5, #1
   b81ca:	19d9      	adds	r1, r3, r7
   b81cc:	6823      	ldr	r3, [r4, #0]
   b81ce:	f8cd 8000 	str.w	r8, [sp]
   b81d2:	6a1d      	ldr	r5, [r3, #32]
   b81d4:	4620      	mov	r0, r4
   b81d6:	464b      	mov	r3, r9
   b81d8:	4632      	mov	r2, r6
   b81da:	b209      	sxth	r1, r1
   b81dc:	47a8      	blx	r5
    endWrite();
   b81de:	6823      	ldr	r3, [r4, #0]
   b81e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b81e2:	4620      	mov	r0, r4
}
   b81e4:	b002      	add	sp, #8
   b81e6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   b81ea:	4718      	bx	r3

000b81ec <_ZN12Adafruit_GFX13invertDisplayEb>:
    @param   i  True if you want to invert, false to make 'normal'
*/
/**************************************************************************/
void Adafruit_GFX::invertDisplay(boolean i) {
    // Do nothing, must be subclassed if supported by hardware
}
   b81ec:	4770      	bx	lr

000b81ee <_ZN12Adafruit_GFX11setRotationEh>:
    rotation = (x & 3);
   b81ee:	f001 0303 	and.w	r3, r1, #3
            _height = HEIGHT;
   b81f2:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
    rotation = (x & 3);
   b81f6:	7683      	strb	r3, [r0, #26]
    switch(rotation) {
   b81f8:	07c9      	lsls	r1, r1, #31
            _width  = WIDTH;
   b81fa:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   b81fe:	bf59      	ittee	pl
   b8200:	8183      	strhpl	r3, [r0, #12]
            _height = HEIGHT;
   b8202:	81c2      	strhpl	r2, [r0, #14]
            _width  = HEIGHT;
   b8204:	8182      	strhmi	r2, [r0, #12]
            _height = WIDTH;
   b8206:	81c3      	strhmi	r3, [r0, #14]
}
   b8208:	4770      	bx	lr
	...

000b820c <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   b820c:	b530      	push	{r4, r5, lr}
WIDTH(w), HEIGHT(h)
   b820e:	8142      	strh	r2, [r0, #10]
    _height   = HEIGHT;
   b8210:	81c2      	strh	r2, [r0, #14]
    textsize_x = textsize_y  = 1;
   b8212:	4a07      	ldr	r2, [pc, #28]	; (b8230 <_ZN12Adafruit_GFXC1Ess+0x24>)
WIDTH(w), HEIGHT(h)
   b8214:	4d07      	ldr	r5, [pc, #28]	; (b8234 <_ZN12Adafruit_GFXC1Ess+0x28>)
   b8216:	8101      	strh	r1, [r0, #8]
    Print() : write_error(0) {}
   b8218:	2400      	movs	r4, #0
    _width    = WIDTH;
   b821a:	8181      	strh	r1, [r0, #12]
    textsize_x = textsize_y  = 1;
   b821c:	f04f 31ff 	mov.w	r1, #4294967295
   b8220:	e9c0 1205 	strd	r1, r2, [r0, #20]
   b8224:	6044      	str	r4, [r0, #4]
WIDTH(w), HEIGHT(h)
   b8226:	6005      	str	r5, [r0, #0]
    cursor_y  = cursor_x    = 0;
   b8228:	6104      	str	r4, [r0, #16]
    _cp437    = false;
   b822a:	7704      	strb	r4, [r0, #28]
    gfxFont   = NULL;
   b822c:	6204      	str	r4, [r0, #32]
}
   b822e:	bd30      	pop	{r4, r5, pc}
   b8230:	01000101 	.word	0x01000101
   b8234:	000bcb48 	.word	0x000bcb48

000b8238 <_ZN12Adafruit_GFX16fillCircleHelperEssshst>:
  uint8_t corners, int16_t delta, uint16_t color) {
   b8238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b823c:	b08b      	sub	sp, #44	; 0x2c
   b823e:	461c      	mov	r4, r3
   b8240:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
   b8244:	9304      	str	r3, [sp, #16]
    int16_t f     = 1 - r;
   b8246:	b2a3      	uxth	r3, r4
   b8248:	f1c3 0501 	rsb	r5, r3, #1
    int16_t ddF_y = -2 * r;
   b824c:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
   b8250:	005b      	lsls	r3, r3, #1
   b8252:	b21b      	sxth	r3, r3
   b8254:	9307      	str	r3, [sp, #28]
    delta++; // Avoid some +1's in the loop
   b8256:	f9bd 3054 	ldrsh.w	r3, [sp, #84]	; 0x54
   b825a:	3301      	adds	r3, #1
   b825c:	b29b      	uxth	r3, r3
   b825e:	9305      	str	r3, [sp, #20]
   b8260:	b293      	uxth	r3, r2
   b8262:	9306      	str	r3, [sp, #24]
  uint8_t corners, int16_t delta, uint16_t color) {
   b8264:	4688      	mov	r8, r1
    delta++; // Avoid some +1's in the loop
   b8266:	9b05      	ldr	r3, [sp, #20]
  uint8_t corners, int16_t delta, uint16_t color) {
   b8268:	f89d 1050 	ldrb.w	r1, [sp, #80]	; 0x50
    delta++; // Avoid some +1's in the loop
   b826c:	9303      	str	r3, [sp, #12]
    int16_t x     = 0;
   b826e:	2300      	movs	r3, #0
   b8270:	9302      	str	r3, [sp, #8]
            if(corners & 1) writeFastVLine(x0+x, y0-y, 2*y+delta, color);
   b8272:	f001 0301 	and.w	r3, r1, #1
   b8276:	9308      	str	r3, [sp, #32]
    delta++; // Avoid some +1's in the loop
   b8278:	f8dd a018 	ldr.w	sl, [sp, #24]
            if(corners & 2) writeFastVLine(x0-x, y0-y, 2*y+delta, color);
   b827c:	f001 0302 	and.w	r3, r1, #2
  uint8_t corners, int16_t delta, uint16_t color) {
   b8280:	4683      	mov	fp, r0
    int16_t f     = 1 - r;
   b8282:	b22d      	sxth	r5, r5
            if(corners & 2) writeFastVLine(x0-x, y0-y, 2*y+delta, color);
   b8284:	9309      	str	r3, [sp, #36]	; 0x24
    while(x < y) {
   b8286:	9b02      	ldr	r3, [sp, #8]
   b8288:	42a3      	cmp	r3, r4
   b828a:	da6f      	bge.n	b836c <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0x134>
        if (f >= 0) {
   b828c:	2d00      	cmp	r5, #0
   b828e:	db6b      	blt.n	b8368 <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0x130>
            ddF_y += 2;
   b8290:	9b07      	ldr	r3, [sp, #28]
   b8292:	3302      	adds	r3, #2
            y--;
   b8294:	1e66      	subs	r6, r4, #1
            ddF_y += 2;
   b8296:	b21a      	sxth	r2, r3
            f     += ddF_y;
   b8298:	fa15 f583 	uxtah	r5, r5, r3
            y--;
   b829c:	b236      	sxth	r6, r6
            ddF_y += 2;
   b829e:	9207      	str	r2, [sp, #28]
            f     += ddF_y;
   b82a0:	b22d      	sxth	r5, r5
        x++;
   b82a2:	9f02      	ldr	r7, [sp, #8]
   b82a4:	3701      	adds	r7, #1
   b82a6:	fa1f f987 	uxth.w	r9, r7
   b82aa:	b23b      	sxth	r3, r7
        ddF_x += 2;
   b82ac:	eb05 0549 	add.w	r5, r5, r9, lsl #1
        f     += ddF_x;
   b82b0:	3501      	adds	r5, #1
        if(x < (y + 1)) {
   b82b2:	429e      	cmp	r6, r3
   b82b4:	9302      	str	r3, [sp, #8]
        f     += ddF_x;
   b82b6:	b22d      	sxth	r5, r5
        if(x < (y + 1)) {
   b82b8:	db29      	blt.n	b830e <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0xd6>
            if(corners & 1) writeFastVLine(x0+x, y0-y, 2*y+delta, color);
   b82ba:	9b08      	ldr	r3, [sp, #32]
   b82bc:	b193      	cbz	r3, b82e4 <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0xac>
   b82be:	9804      	ldr	r0, [sp, #16]
   b82c0:	9000      	str	r0, [sp, #0]
   b82c2:	f8db 0000 	ldr.w	r0, [fp]
   b82c6:	9906      	ldr	r1, [sp, #24]
   b82c8:	9b05      	ldr	r3, [sp, #20]
   b82ca:	6a00      	ldr	r0, [r0, #32]
   b82cc:	b2b2      	uxth	r2, r6
   b82ce:	eb03 0342 	add.w	r3, r3, r2, lsl #1
   b82d2:	1a8a      	subs	r2, r1, r2
   b82d4:	eb09 0108 	add.w	r1, r9, r8
   b82d8:	4607      	mov	r7, r0
   b82da:	b21b      	sxth	r3, r3
   b82dc:	b212      	sxth	r2, r2
   b82de:	b209      	sxth	r1, r1
   b82e0:	4658      	mov	r0, fp
   b82e2:	47b8      	blx	r7
            if(corners & 2) writeFastVLine(x0-x, y0-y, 2*y+delta, color);
   b82e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b82e6:	b193      	cbz	r3, b830e <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0xd6>
   b82e8:	9906      	ldr	r1, [sp, #24]
   b82ea:	9804      	ldr	r0, [sp, #16]
   b82ec:	9b05      	ldr	r3, [sp, #20]
   b82ee:	9000      	str	r0, [sp, #0]
   b82f0:	b2b2      	uxth	r2, r6
   b82f2:	f8db 0000 	ldr.w	r0, [fp]
   b82f6:	eb03 0342 	add.w	r3, r3, r2, lsl #1
   b82fa:	1a8a      	subs	r2, r1, r2
   b82fc:	eba8 0109 	sub.w	r1, r8, r9
   b8300:	b21b      	sxth	r3, r3
   b8302:	f8d0 9020 	ldr.w	r9, [r0, #32]
   b8306:	b212      	sxth	r2, r2
   b8308:	b209      	sxth	r1, r1
   b830a:	4658      	mov	r0, fp
   b830c:	47c8      	blx	r9
        if(y != py) {
   b830e:	42b4      	cmp	r4, r6
   b8310:	d020      	beq.n	b8354 <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0x11c>
            if(corners & 1) writeFastVLine(x0+py, y0-px, 2*px+delta, color);
   b8312:	9b08      	ldr	r3, [sp, #32]
   b8314:	b173      	cbz	r3, b8334 <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0xfc>
   b8316:	f8db 3000 	ldr.w	r3, [fp]
   b831a:	9a04      	ldr	r2, [sp, #16]
   b831c:	9200      	str	r2, [sp, #0]
   b831e:	eb08 0104 	add.w	r1, r8, r4
   b8322:	f8d3 9020 	ldr.w	r9, [r3, #32]
   b8326:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
   b832a:	fa0f f28a 	sxth.w	r2, sl
   b832e:	b209      	sxth	r1, r1
   b8330:	4658      	mov	r0, fp
   b8332:	47c8      	blx	r9
            if(corners & 2) writeFastVLine(x0-py, y0-px, 2*px+delta, color);
   b8334:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b8336:	b16b      	cbz	r3, b8354 <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0x11c>
   b8338:	f8db 3000 	ldr.w	r3, [fp]
   b833c:	9a04      	ldr	r2, [sp, #16]
   b833e:	9200      	str	r2, [sp, #0]
   b8340:	eba8 0104 	sub.w	r1, r8, r4
   b8344:	fa0f f28a 	sxth.w	r2, sl
   b8348:	6a1c      	ldr	r4, [r3, #32]
   b834a:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
   b834e:	b209      	sxth	r1, r1
   b8350:	4658      	mov	r0, fp
   b8352:	47a0      	blx	r4
   b8354:	f10a 33ff 	add.w	r3, sl, #4294967295
   b8358:	fa1f fa83 	uxth.w	sl, r3
   b835c:	9b03      	ldr	r3, [sp, #12]
   b835e:	3302      	adds	r3, #2
   b8360:	b29b      	uxth	r3, r3
   b8362:	9303      	str	r3, [sp, #12]
  uint8_t corners, int16_t delta, uint16_t color) {
   b8364:	4634      	mov	r4, r6
   b8366:	e78e      	b.n	b8286 <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0x4e>
   b8368:	4626      	mov	r6, r4
   b836a:	e79a      	b.n	b82a2 <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0x6a>
}
   b836c:	b00b      	add	sp, #44	; 0x2c
   b836e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b8372 <_ZN12Adafruit_GFX10fillCircleEssst>:
        uint16_t color) {
   b8372:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b8376:	461e      	mov	r6, r3
   b8378:	b086      	sub	sp, #24
    startWrite();
   b837a:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   b837c:	9105      	str	r1, [sp, #20]
   b837e:	4604      	mov	r4, r0
    startWrite();
   b8380:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   b8382:	f8bd 7030 	ldrh.w	r7, [sp, #48]	; 0x30
   b8386:	4615      	mov	r5, r2
    startWrite();
   b8388:	4798      	blx	r3
    writeFastVLine(x0, y0-r, 2*r+1, color);
   b838a:	b2b2      	uxth	r2, r6
   b838c:	6820      	ldr	r0, [r4, #0]
   b838e:	9700      	str	r7, [sp, #0]
   b8390:	0053      	lsls	r3, r2, #1
   b8392:	3301      	adds	r3, #1
   b8394:	1aaa      	subs	r2, r5, r2
   b8396:	f8d0 8020 	ldr.w	r8, [r0, #32]
   b839a:	9905      	ldr	r1, [sp, #20]
   b839c:	4620      	mov	r0, r4
   b839e:	b21b      	sxth	r3, r3
   b83a0:	b212      	sxth	r2, r2
   b83a2:	47c0      	blx	r8
    fillCircleHelper(x0, y0, r, 3, 0, color);
   b83a4:	2303      	movs	r3, #3
   b83a6:	2200      	movs	r2, #0
   b83a8:	e9cd 3200 	strd	r3, r2, [sp]
   b83ac:	4620      	mov	r0, r4
   b83ae:	4633      	mov	r3, r6
   b83b0:	9905      	ldr	r1, [sp, #20]
   b83b2:	9702      	str	r7, [sp, #8]
   b83b4:	462a      	mov	r2, r5
   b83b6:	f7ff ff3f 	bl	b8238 <_ZN12Adafruit_GFX16fillCircleHelperEssshst>
    endWrite();
   b83ba:	6823      	ldr	r3, [r4, #0]
   b83bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b83be:	4620      	mov	r0, r4
}
   b83c0:	b006      	add	sp, #24
   b83c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   b83c6:	4718      	bx	r3

000b83c8 <_ZN12Adafruit_GFX12fillTriangleEsssssst>:
        int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color) {
   b83c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b83cc:	b08d      	sub	sp, #52	; 0x34
   b83ce:	461d      	mov	r5, r3
   b83d0:	f9bd 6058 	ldrsh.w	r6, [sp, #88]	; 0x58
   b83d4:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
   b83d8:	f9bd 805c 	ldrsh.w	r8, [sp, #92]	; 0x5c
   b83dc:	f9bd 7060 	ldrsh.w	r7, [sp, #96]	; 0x60
   b83e0:	9304      	str	r3, [sp, #16]
    if (y0 > y1) {
   b83e2:	42b2      	cmp	r2, r6
        int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color) {
   b83e4:	4683      	mov	fp, r0
   b83e6:	4689      	mov	r9, r1
   b83e8:	4614      	mov	r4, r2
    if (y0 > y1) {
   b83ea:	f340 80ce 	ble.w	b858a <_ZN12Adafruit_GFX12fillTriangleEsssssst+0x1c2>
    if (y1 > y2) {
   b83ee:	42ba      	cmp	r2, r7
   b83f0:	dd17      	ble.n	b8422 <_ZN12Adafruit_GFX12fillTriangleEsssssst+0x5a>
    if (y0 > y1) {
   b83f2:	42b7      	cmp	r7, r6
   b83f4:	da0f      	bge.n	b8416 <_ZN12Adafruit_GFX12fillTriangleEsssssst+0x4e>
   b83f6:	4633      	mov	r3, r6
   b83f8:	463e      	mov	r6, r7
   b83fa:	4627      	mov	r7, r4
   b83fc:	461c      	mov	r4, r3
   b83fe:	462b      	mov	r3, r5
   b8400:	4645      	mov	r5, r8
   b8402:	46c8      	mov	r8, r9
    if (y1 > y2) {
   b8404:	4699      	mov	r9, r3
   b8406:	e00c      	b.n	b8422 <_ZN12Adafruit_GFX12fillTriangleEsssssst+0x5a>
   b8408:	4623      	mov	r3, r4
   b840a:	4634      	mov	r4, r6
   b840c:	461e      	mov	r6, r3
   b840e:	464b      	mov	r3, r9
   b8410:	46a9      	mov	r9, r5
   b8412:	461d      	mov	r5, r3
   b8414:	e7ed      	b.n	b83f2 <_ZN12Adafruit_GFX12fillTriangleEsssssst+0x2a>
   b8416:	4623      	mov	r3, r4
   b8418:	463c      	mov	r4, r7
   b841a:	461f      	mov	r7, r3
   b841c:	464b      	mov	r3, r9
   b841e:	46c1      	mov	r9, r8
   b8420:	4698      	mov	r8, r3
    startWrite();
   b8422:	f8db 3000 	ldr.w	r3, [fp]
   b8426:	4658      	mov	r0, fp
   b8428:	695b      	ldr	r3, [r3, #20]
   b842a:	4798      	blx	r3
    if(y0 == y2) { // Handle awkward all-on-same-line case as its own thing
   b842c:	42be      	cmp	r6, r7
   b842e:	d122      	bne.n	b8476 <_ZN12Adafruit_GFX12fillTriangleEsssssst+0xae>
        if(x1 < a)      a = x1;
   b8430:	454d      	cmp	r5, r9
   b8432:	bfc2      	ittt	gt
   b8434:	462b      	movgt	r3, r5
   b8436:	464d      	movgt	r5, r9
   b8438:	4699      	movgt	r9, r3
        if(x2 < a)      a = x2;
   b843a:	4545      	cmp	r5, r8
   b843c:	dc05      	bgt.n	b844a <_ZN12Adafruit_GFX12fillTriangleEsssssst+0x82>
        else if(x2 > b) b = x2;
   b843e:	45c1      	cmp	r9, r8
   b8440:	bfb8      	it	lt
   b8442:	46c1      	movlt	r9, r8
   b8444:	fa0f f989 	sxth.w	r9, r9
   b8448:	46a8      	mov	r8, r5
        writeFastHLine(a, y0, b-a+1, color);
   b844a:	f8db 2000 	ldr.w	r2, [fp]
   b844e:	9904      	ldr	r1, [sp, #16]
   b8450:	9100      	str	r1, [sp, #0]
   b8452:	f109 0301 	add.w	r3, r9, #1
   b8456:	eba3 0308 	sub.w	r3, r3, r8
   b845a:	6a54      	ldr	r4, [r2, #36]	; 0x24
   b845c:	b21b      	sxth	r3, r3
   b845e:	4632      	mov	r2, r6
   b8460:	4641      	mov	r1, r8
   b8462:	4658      	mov	r0, fp
   b8464:	47a0      	blx	r4
    endWrite();
   b8466:	f8db 3000 	ldr.w	r3, [fp]
   b846a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b846c:	4658      	mov	r0, fp
}
   b846e:	b00d      	add	sp, #52	; 0x34
   b8470:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    endWrite();
   b8474:	4718      	bx	r3
    dx01 = x1 - x0,
   b8476:	fa1f f389 	uxth.w	r3, r9
   b847a:	9303      	str	r3, [sp, #12]
   b847c:	b2ab      	uxth	r3, r5
   b847e:	9302      	str	r3, [sp, #8]
   b8480:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b8484:	1a9b      	subs	r3, r3, r2
   b8486:	b21b      	sxth	r3, r3
    dy01 = y1 - y0,
   b8488:	fa1f fc86 	uxth.w	ip, r6
    dx01 = x1 - x0,
   b848c:	9308      	str	r3, [sp, #32]
    dy01 = y1 - y0,
   b848e:	b2a3      	uxth	r3, r4
   b8490:	eba3 020c 	sub.w	r2, r3, ip
   b8494:	b212      	sxth	r2, r2
   b8496:	9209      	str	r2, [sp, #36]	; 0x24
    dx02 = x2 - x0,
   b8498:	9a02      	ldr	r2, [sp, #8]
   b849a:	fa1f f188 	uxth.w	r1, r8
   b849e:	eba1 0802 	sub.w	r8, r1, r2
    dy02 = y2 - y0,
   b84a2:	b2ba      	uxth	r2, r7
   b84a4:	eba2 0c0c 	sub.w	ip, r2, ip
   b84a8:	fa0f f08c 	sxth.w	r0, ip
   b84ac:	9006      	str	r0, [sp, #24]
    dx12 = x2 - x1,
   b84ae:	9803      	ldr	r0, [sp, #12]
    if(y1 == y2) last = y1;   // Include y1 scanline
   b84b0:	42bc      	cmp	r4, r7
    dy12 = y2 - y1;
   b84b2:	eba2 0203 	sub.w	r2, r2, r3
    dx12 = x2 - x1,
   b84b6:	eba1 0100 	sub.w	r1, r1, r0
    else         last = y1-1; // Skip it
   b84ba:	bf18      	it	ne
   b84bc:	f103 33ff 	addne.w	r3, r3, #4294967295
    dy12 = y2 - y1;
   b84c0:	b212      	sxth	r2, r2
    dx12 = x2 - x1,
   b84c2:	b209      	sxth	r1, r1
    else         last = y1-1; // Skip it
   b84c4:	bf18      	it	ne
   b84c6:	b21b      	sxthne	r3, r3
    sb   = 0;
   b84c8:	f04f 0900 	mov.w	r9, #0
    dy12 = y2 - y1;
   b84cc:	920a      	str	r2, [sp, #40]	; 0x28
    dx02 = x2 - x0,
   b84ce:	fa0f f888 	sxth.w	r8, r8
    dx12 = x2 - x1,
   b84d2:	9107      	str	r1, [sp, #28]
    else         last = y1-1; // Skip it
   b84d4:	bf14      	ite	ne
   b84d6:	9305      	strne	r3, [sp, #20]
   b84d8:	9405      	streq	r4, [sp, #20]
    for(y=y0; y<=last; y++) {
   b84da:	4632      	mov	r2, r6
    sa   = 0,
   b84dc:	46ca      	mov	sl, r9
    for(y=y0; y<=last; y++) {
   b84de:	9b05      	ldr	r3, [sp, #20]
   b84e0:	429a      	cmp	r2, r3
   b84e2:	dc24      	bgt.n	b852e <_ZN12Adafruit_GFX12fillTriangleEsssssst+0x166>
        a   = x0 + sa / dy01;
   b84e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
        b   = x0 + sb / dy02;
   b84e6:	9802      	ldr	r0, [sp, #8]
        a   = x0 + sa / dy01;
   b84e8:	fb9a f1f3 	sdiv	r1, sl, r3
   b84ec:	9b02      	ldr	r3, [sp, #8]
        writeFastHLine(a, y, b-a+1, color);
   b84ee:	920b      	str	r2, [sp, #44]	; 0x2c
        a   = x0 + sa / dy01;
   b84f0:	4419      	add	r1, r3
        b   = x0 + sb / dy02;
   b84f2:	9b06      	ldr	r3, [sp, #24]
   b84f4:	fb99 f3f3 	sdiv	r3, r9, r3
   b84f8:	4403      	add	r3, r0
        sa += dx01;
   b84fa:	9808      	ldr	r0, [sp, #32]
        a   = x0 + sa / dy01;
   b84fc:	b209      	sxth	r1, r1
        b   = x0 + sb / dy02;
   b84fe:	b21b      	sxth	r3, r3
        if(a > b) _swap_int16_t(a,b);
   b8500:	4299      	cmp	r1, r3
        sa += dx01;
   b8502:	4482      	add	sl, r0
        writeFastHLine(a, y, b-a+1, color);
   b8504:	9804      	ldr	r0, [sp, #16]
   b8506:	9000      	str	r0, [sp, #0]
        if(a > b) _swap_int16_t(a,b);
   b8508:	bfc8      	it	gt
   b850a:	468c      	movgt	ip, r1
        writeFastHLine(a, y, b-a+1, color);
   b850c:	f8db 0000 	ldr.w	r0, [fp]
        if(a > b) _swap_int16_t(a,b);
   b8510:	bfc4      	itt	gt
   b8512:	4619      	movgt	r1, r3
   b8514:	4663      	movgt	r3, ip
        writeFastHLine(a, y, b-a+1, color);
   b8516:	6a40      	ldr	r0, [r0, #36]	; 0x24
   b8518:	3301      	adds	r3, #1
   b851a:	1a5b      	subs	r3, r3, r1
   b851c:	4605      	mov	r5, r0
   b851e:	b21b      	sxth	r3, r3
   b8520:	4658      	mov	r0, fp
   b8522:	47a8      	blx	r5
   b8524:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b8526:	3201      	adds	r2, #1
        sb += dx02;
   b8528:	44c1      	add	r9, r8
    for(y=y0; y<=last; y++) {
   b852a:	b212      	sxth	r2, r2
   b852c:	e7d7      	b.n	b84de <_ZN12Adafruit_GFX12fillTriangleEsssssst+0x116>
    sa = (int32_t)dx12 * (y - y1);
   b852e:	9b07      	ldr	r3, [sp, #28]
   b8530:	1b14      	subs	r4, r2, r4
    sb = (int32_t)dx02 * (y - y0);
   b8532:	1b96      	subs	r6, r2, r6
    sa = (int32_t)dx12 * (y - y1);
   b8534:	435c      	muls	r4, r3
    sb = (int32_t)dx02 * (y - y0);
   b8536:	fb08 f606 	mul.w	r6, r8, r6
    for(; y<=y2; y++) {
   b853a:	42ba      	cmp	r2, r7
   b853c:	dc93      	bgt.n	b8466 <_ZN12Adafruit_GFX12fillTriangleEsssssst+0x9e>
        a   = x1 + sa / dy12;
   b853e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
        b   = x0 + sb / dy02;
   b8540:	9802      	ldr	r0, [sp, #8]
        a   = x1 + sa / dy12;
   b8542:	fb94 f1f3 	sdiv	r1, r4, r3
   b8546:	9b03      	ldr	r3, [sp, #12]
        writeFastHLine(a, y, b-a+1, color);
   b8548:	9205      	str	r2, [sp, #20]
        a   = x1 + sa / dy12;
   b854a:	4419      	add	r1, r3
        b   = x0 + sb / dy02;
   b854c:	9b06      	ldr	r3, [sp, #24]
   b854e:	fb96 f3f3 	sdiv	r3, r6, r3
   b8552:	4403      	add	r3, r0
        a   = x1 + sa / dy12;
   b8554:	b209      	sxth	r1, r1
        b   = x0 + sb / dy02;
   b8556:	b21b      	sxth	r3, r3
        if(a > b) _swap_int16_t(a,b);
   b8558:	4299      	cmp	r1, r3
        sa += dx12;
   b855a:	9807      	ldr	r0, [sp, #28]
        if(a > b) _swap_int16_t(a,b);
   b855c:	bfc8      	it	gt
   b855e:	468c      	movgt	ip, r1
        sa += dx12;
   b8560:	4404      	add	r4, r0
        if(a > b) _swap_int16_t(a,b);
   b8562:	bfc8      	it	gt
   b8564:	4619      	movgt	r1, r3
        writeFastHLine(a, y, b-a+1, color);
   b8566:	9804      	ldr	r0, [sp, #16]
   b8568:	9000      	str	r0, [sp, #0]
        if(a > b) _swap_int16_t(a,b);
   b856a:	bfc8      	it	gt
   b856c:	4663      	movgt	r3, ip
        writeFastHLine(a, y, b-a+1, color);
   b856e:	f8db 0000 	ldr.w	r0, [fp]
   b8572:	3301      	adds	r3, #1
   b8574:	1a5b      	subs	r3, r3, r1
   b8576:	f8d0 9024 	ldr.w	r9, [r0, #36]	; 0x24
   b857a:	b21b      	sxth	r3, r3
   b857c:	4658      	mov	r0, fp
   b857e:	47c8      	blx	r9
   b8580:	9a05      	ldr	r2, [sp, #20]
   b8582:	3201      	adds	r2, #1
        sb += dx02;
   b8584:	4446      	add	r6, r8
    for(; y<=y2; y++) {
   b8586:	b212      	sxth	r2, r2
   b8588:	e7d7      	b.n	b853a <_ZN12Adafruit_GFX12fillTriangleEsssssst+0x172>
    if (y1 > y2) {
   b858a:	42be      	cmp	r6, r7
   b858c:	f73f af3c 	bgt.w	b8408 <_ZN12Adafruit_GFX12fillTriangleEsssssst+0x40>
   b8590:	4633      	mov	r3, r6
   b8592:	461c      	mov	r4, r3
   b8594:	4616      	mov	r6, r2
   b8596:	462b      	mov	r3, r5
   b8598:	460d      	mov	r5, r1
   b859a:	e733      	b.n	b8404 <_ZN12Adafruit_GFX12fillTriangleEsssssst+0x3c>

000b859c <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>:
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b859c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b85a0:	b089      	sub	sp, #36	; 0x24
   b85a2:	e9cd 1202 	strd	r1, r2, [sp, #8]
    startWrite();
   b85a6:	6802      	ldr	r2, [r0, #0]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b85a8:	f9bd 8048 	ldrsh.w	r8, [sp, #72]	; 0x48
   b85ac:	9304      	str	r3, [sp, #16]
   b85ae:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
    startWrite();
   b85b2:	6952      	ldr	r2, [r2, #20]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b85b4:	9305      	str	r3, [sp, #20]
   b85b6:	f8bd a050 	ldrh.w	sl, [sp, #80]	; 0x50
   b85ba:	4604      	mov	r4, r0
    startWrite();
   b85bc:	4790      	blx	r2
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   b85be:	f118 0207 	adds.w	r2, r8, #7
    startWrite();
   b85c2:	f04f 0600 	mov.w	r6, #0
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   b85c6:	bf48      	it	mi
   b85c8:	f108 020e 	addmi.w	r2, r8, #14
   b85cc:	ea4f 0be2 	mov.w	fp, r2, asr #3
    startWrite();
   b85d0:	9601      	str	r6, [sp, #4]
    uint8_t byte = 0;
   b85d2:	4635      	mov	r5, r6
   b85d4:	9b03      	ldr	r3, [sp, #12]
   b85d6:	9a01      	ldr	r2, [sp, #4]
    for(int16_t j=0; j<h; j++, y++) {
   b85d8:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
   b85dc:	189a      	adds	r2, r3, r2
   b85de:	9b05      	ldr	r3, [sp, #20]
   b85e0:	428b      	cmp	r3, r1
   b85e2:	b212      	sxth	r2, r2
   b85e4:	dd27      	ble.n	b8636 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x9a>
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b85e6:	9b04      	ldr	r3, [sp, #16]
   b85e8:	4433      	add	r3, r6
    for(int16_t j=0; j<h; j++, y++) {
   b85ea:	f04f 0900 	mov.w	r9, #0
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b85ee:	9306      	str	r3, [sp, #24]
   b85f0:	fa0f f089 	sxth.w	r0, r9
        for(int16_t i=0; i<w; i++) {
   b85f4:	4580      	cmp	r8, r0
   b85f6:	fa1f f189 	uxth.w	r1, r9
   b85fa:	dd17      	ble.n	b862c <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x90>
            if(i & 7) byte <<= 1;
   b85fc:	074f      	lsls	r7, r1, #29
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b85fe:	bf05      	ittet	eq
   b8600:	9b06      	ldreq	r3, [sp, #24]
   b8602:	10c0      	asreq	r0, r0, #3
            if(i & 7) byte <<= 1;
   b8604:	006d      	lslne	r5, r5, #1
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b8606:	5c1d      	ldrbeq	r5, [r3, r0]
            if(i & 7) byte <<= 1;
   b8608:	bf18      	it	ne
   b860a:	b2ed      	uxtbne	r5, r5
            if(byte & 0x80) writePixel(x+i, y, color);
   b860c:	062b      	lsls	r3, r5, #24
   b860e:	d50a      	bpl.n	b8626 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x8a>
   b8610:	9b02      	ldr	r3, [sp, #8]
   b8612:	6820      	ldr	r0, [r4, #0]
   b8614:	9207      	str	r2, [sp, #28]
   b8616:	4419      	add	r1, r3
   b8618:	6983      	ldr	r3, [r0, #24]
   b861a:	b209      	sxth	r1, r1
   b861c:	461f      	mov	r7, r3
   b861e:	4620      	mov	r0, r4
   b8620:	4653      	mov	r3, sl
   b8622:	47b8      	blx	r7
   b8624:	9a07      	ldr	r2, [sp, #28]
        for(int16_t i=0; i<w; i++) {
   b8626:	f109 0901 	add.w	r9, r9, #1
   b862a:	e7e1      	b.n	b85f0 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x54>
    for(int16_t j=0; j<h; j++, y++) {
   b862c:	9b01      	ldr	r3, [sp, #4]
   b862e:	3301      	adds	r3, #1
   b8630:	9301      	str	r3, [sp, #4]
   b8632:	445e      	add	r6, fp
   b8634:	e7ce      	b.n	b85d4 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x38>
    endWrite();
   b8636:	6823      	ldr	r3, [r4, #0]
   b8638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b863a:	4620      	mov	r0, r4
}
   b863c:	b009      	add	sp, #36	; 0x24
   b863e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    endWrite();
   b8642:	4718      	bx	r3

000b8644 <_ZN12Adafruit_GFX8drawCharEsshtthh>:
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   b8644:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8648:	ed2d 8b02 	vpush	{d8}
   b864c:	b091      	sub	sp, #68	; 0x44
   b864e:	4616      	mov	r6, r2
    if(!gfxFont) { // 'Classic' built-in font
   b8650:	6a02      	ldr	r2, [r0, #32]
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   b8652:	f8bd 8074 	ldrh.w	r8, [sp, #116]	; 0x74
   b8656:	f89d 5078 	ldrb.w	r5, [sp, #120]	; 0x78
   b865a:	f89d 407c 	ldrb.w	r4, [sp, #124]	; 0x7c
   b865e:	9103      	str	r1, [sp, #12]
   b8660:	461f      	mov	r7, r3
   b8662:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
   b8666:	9304      	str	r3, [sp, #16]
   b8668:	4683      	mov	fp, r0
    if(!gfxFont) { // 'Classic' built-in font
   b866a:	2a00      	cmp	r2, #0
   b866c:	f040 80c5 	bne.w	b87fa <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1b6>
        if((x >= _width)            || // Clip right
   b8670:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b8674:	428b      	cmp	r3, r1
   b8676:	f340 814c 	ble.w	b8912 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
   b867a:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
   b867e:	42b3      	cmp	r3, r6
   b8680:	f340 8147 	ble.w	b8912 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((x + 6 * size_x - 1) < 0) || // Clip left
   b8684:	2306      	movs	r3, #6
   b8686:	fb13 1305 	smlabb	r3, r3, r5, r1
           (y >= _height)           || // Clip bottom
   b868a:	2b00      	cmp	r3, #0
   b868c:	f340 8141 	ble.w	b8912 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((y + 8 * size_y - 1) < 0))   // Clip top
   b8690:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
           ((x + 6 * size_x - 1) < 0) || // Clip left
   b8694:	2b00      	cmp	r3, #0
   b8696:	f340 813c 	ble.w	b8912 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
        if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
   b869a:	7f03      	ldrb	r3, [r0, #28]
   b869c:	b91b      	cbnz	r3, b86a6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x62>
   b869e:	2faf      	cmp	r7, #175	; 0xaf
   b86a0:	bf84      	itt	hi
   b86a2:	3701      	addhi	r7, #1
   b86a4:	b2ff      	uxtbhi	r7, r7
        startWrite();
   b86a6:	f8db 3000 	ldr.w	r3, [fp]
   b86aa:	4658      	mov	r0, fp
   b86ac:	695b      	ldr	r3, [r3, #20]
   b86ae:	4798      	blx	r3
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b86b0:	2205      	movs	r2, #5
   b86b2:	9209      	str	r2, [sp, #36]	; 0x24
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   b86b4:	2200      	movs	r2, #0
   b86b6:	9205      	str	r2, [sp, #20]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b86b8:	4a98      	ldr	r2, [pc, #608]	; (b891c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2d8>)
   b86ba:	eb07 0387 	add.w	r3, r7, r7, lsl #2
   b86be:	18d3      	adds	r3, r2, r3
   b86c0:	930c      	str	r3, [sp, #48]	; 0x30
                        writePixel(x+i, y+j, color);
   b86c2:	b2b3      	uxth	r3, r6
   b86c4:	9306      	str	r3, [sp, #24]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b86c6:	9a05      	ldr	r2, [sp, #20]
   b86c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b86ca:	5c9b      	ldrb	r3, [r3, r2]
   b86cc:	9307      	str	r3, [sp, #28]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b86ce:	b2ab      	uxth	r3, r5
   b86d0:	930b      	str	r3, [sp, #44]	; 0x2c
   b86d2:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   b86d6:	9308      	str	r3, [sp, #32]
   b86d8:	9b03      	ldr	r3, [sp, #12]
   b86da:	fb02 f905 	mul.w	r9, r2, r5
   b86de:	fa19 f983 	uxtah	r9, r9, r3
   b86e2:	fa0f f389 	sxth.w	r3, r9
   b86e6:	ee08 3a10 	vmov	s16, r3
   b86ea:	2308      	movs	r3, #8
   b86ec:	930a      	str	r3, [sp, #40]	; 0x28
                        writePixel(x+i, y+j, bg);
   b86ee:	9b03      	ldr	r3, [sp, #12]
   b86f0:	eb02 0a03 	add.w	sl, r2, r3
            for(int8_t j=0; j<8; j++, line >>= 1) {
   b86f4:	f04f 0900 	mov.w	r9, #0
                        writePixel(x+i, y+j, bg);
   b86f8:	fa0f fa8a 	sxth.w	sl, sl
                if(line & 1) {
   b86fc:	9a07      	ldr	r2, [sp, #28]
                        writePixel(x+i, y+j, color);
   b86fe:	f8db 3000 	ldr.w	r3, [fp]
                if(line & 1) {
   b8702:	07d2      	lsls	r2, r2, #31
   b8704:	d552      	bpl.n	b87ac <_ZN12Adafruit_GFX8drawCharEsshtthh+0x168>
                    if(size_x == 1 && size_y == 1)
   b8706:	2d01      	cmp	r5, #1
                        writePixel(x+i, y+j, color);
   b8708:	fa1f f289 	uxth.w	r2, r9
                    if(size_x == 1 && size_y == 1)
   b870c:	d13e      	bne.n	b878c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
   b870e:	2c01      	cmp	r4, #1
   b8710:	d13c      	bne.n	b878c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
                        writePixel(x+i, y+j, color);
   b8712:	699b      	ldr	r3, [r3, #24]
   b8714:	9906      	ldr	r1, [sp, #24]
   b8716:	461f      	mov	r7, r3
   b8718:	9b04      	ldr	r3, [sp, #16]
   b871a:	440a      	add	r2, r1
                        writePixel(x+i, y+j, bg);
   b871c:	b212      	sxth	r2, r2
   b871e:	4651      	mov	r1, sl
   b8720:	4658      	mov	r0, fp
   b8722:	47b8      	blx	r7
            for(int8_t j=0; j<8; j++, line >>= 1) {
   b8724:	f109 0301 	add.w	r3, r9, #1
   b8728:	fa4f f983 	sxtb.w	r9, r3
   b872c:	9b07      	ldr	r3, [sp, #28]
   b872e:	085b      	lsrs	r3, r3, #1
   b8730:	9307      	str	r3, [sp, #28]
   b8732:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b8734:	3b01      	subs	r3, #1
   b8736:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b873a:	930a      	str	r3, [sp, #40]	; 0x28
   b873c:	d1de      	bne.n	b86fc <_ZN12Adafruit_GFX8drawCharEsshtthh+0xb8>
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   b873e:	9f05      	ldr	r7, [sp, #20]
   b8740:	3701      	adds	r7, #1
   b8742:	b27b      	sxtb	r3, r7
   b8744:	9305      	str	r3, [sp, #20]
   b8746:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b8748:	3b01      	subs	r3, #1
   b874a:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b874e:	9309      	str	r3, [sp, #36]	; 0x24
   b8750:	d1b9      	bne.n	b86c6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x82>
        if(bg != color) { // If opaque, draw vertical line for last column
   b8752:	9b04      	ldr	r3, [sp, #16]
   b8754:	4543      	cmp	r3, r8
   b8756:	d00f      	beq.n	b8778 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
            if(size_x == 1 && size_y == 1) writeFastVLine(x+5, y, 8, bg);
   b8758:	2d01      	cmp	r5, #1
   b875a:	f8db 3000 	ldr.w	r3, [fp]
   b875e:	d13b      	bne.n	b87d8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   b8760:	2c01      	cmp	r4, #1
   b8762:	d139      	bne.n	b87d8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   b8764:	9908      	ldr	r1, [sp, #32]
   b8766:	f8cd 8000 	str.w	r8, [sp]
   b876a:	3105      	adds	r1, #5
   b876c:	6a1c      	ldr	r4, [r3, #32]
   b876e:	4632      	mov	r2, r6
   b8770:	2308      	movs	r3, #8
   b8772:	b209      	sxth	r1, r1
   b8774:	4658      	mov	r0, fp
   b8776:	47a0      	blx	r4
        endWrite();
   b8778:	f8db 3000 	ldr.w	r3, [fp]
   b877c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b877e:	4658      	mov	r0, fp
}
   b8780:	b011      	add	sp, #68	; 0x44
   b8782:	ecbd 8b02 	vpop	{d8}
   b8786:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        endWrite();
   b878a:	4718      	bx	r3
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, color);
   b878c:	9906      	ldr	r1, [sp, #24]
   b878e:	fb14 f202 	smulbb	r2, r4, r2
   b8792:	440a      	add	r2, r1
   b8794:	9904      	ldr	r1, [sp, #16]
   b8796:	9101      	str	r1, [sp, #4]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b8798:	9400      	str	r4, [sp, #0]
   b879a:	69db      	ldr	r3, [r3, #28]
   b879c:	ee18 1a10 	vmov	r1, s16
   b87a0:	461f      	mov	r7, r3
   b87a2:	b212      	sxth	r2, r2
   b87a4:	462b      	mov	r3, r5
   b87a6:	4658      	mov	r0, fp
   b87a8:	47b8      	blx	r7
   b87aa:	e7bb      	b.n	b8724 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                } else if(bg != color) {
   b87ac:	9a04      	ldr	r2, [sp, #16]
   b87ae:	4542      	cmp	r2, r8
   b87b0:	d0b8      	beq.n	b8724 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                    if(size_x == 1 && size_y == 1)
   b87b2:	2d01      	cmp	r5, #1
                        writePixel(x+i, y+j, color);
   b87b4:	fa1f f289 	uxth.w	r2, r9
                    if(size_x == 1 && size_y == 1)
   b87b8:	d107      	bne.n	b87ca <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
   b87ba:	2c01      	cmp	r4, #1
   b87bc:	d105      	bne.n	b87ca <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
                        writePixel(x+i, y+j, bg);
   b87be:	699b      	ldr	r3, [r3, #24]
   b87c0:	9906      	ldr	r1, [sp, #24]
   b87c2:	461f      	mov	r7, r3
   b87c4:	440a      	add	r2, r1
   b87c6:	4643      	mov	r3, r8
   b87c8:	e7a8      	b.n	b871c <_ZN12Adafruit_GFX8drawCharEsshtthh+0xd8>
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b87ca:	9906      	ldr	r1, [sp, #24]
   b87cc:	f8cd 8004 	str.w	r8, [sp, #4]
   b87d0:	fb14 f202 	smulbb	r2, r4, r2
   b87d4:	440a      	add	r2, r1
   b87d6:	e7df      	b.n	b8798 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x154>
            else          writeFillRect(x+5*size_x, y, size_x, 8*size_y, bg);
   b87d8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b87da:	f8cd 8004 	str.w	r8, [sp, #4]
   b87de:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   b87e2:	9a08      	ldr	r2, [sp, #32]
   b87e4:	00e4      	lsls	r4, r4, #3
   b87e6:	440a      	add	r2, r1
   b87e8:	4611      	mov	r1, r2
   b87ea:	9400      	str	r4, [sp, #0]
   b87ec:	69dc      	ldr	r4, [r3, #28]
   b87ee:	4632      	mov	r2, r6
   b87f0:	462b      	mov	r3, r5
   b87f2:	b209      	sxth	r1, r1
   b87f4:	4658      	mov	r0, fp
   b87f6:	47a0      	blx	r4
        endWrite();
   b87f8:	e7be      	b.n	b8778 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   b87fa:	7a13      	ldrb	r3, [r2, #8]
    return gfxFont->glyph + c;
   b87fc:	6851      	ldr	r1, [r2, #4]
    return gfxFont->bitmap;
   b87fe:	6812      	ldr	r2, [r2, #0]
   b8800:	920b      	str	r2, [sp, #44]	; 0x2c
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   b8802:	1aff      	subs	r7, r7, r3
    return gfxFont->glyph + c;
   b8804:	b2ff      	uxtb	r7, r7
   b8806:	eb01 03c7 	add.w	r3, r1, r7, lsl #3
        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
   b880a:	f831 2037 	ldrh.w	r2, [r1, r7, lsl #3]
   b880e:	9206      	str	r2, [sp, #24]
        uint8_t  w  = pgm_read_byte(&glyph->width),
   b8810:	789a      	ldrb	r2, [r3, #2]
   b8812:	9209      	str	r2, [sp, #36]	; 0x24
                 h  = pgm_read_byte(&glyph->height);
   b8814:	78da      	ldrb	r2, [r3, #3]
   b8816:	920c      	str	r2, [sp, #48]	; 0x30
        if(size_x > 1 || size_y > 1) {
   b8818:	2d01      	cmp	r5, #1
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   b881a:	f993 2005 	ldrsb.w	r2, [r3, #5]
                 yo = pgm_read_byte(&glyph->yOffset);
   b881e:	f993 a006 	ldrsb.w	sl, [r3, #6]
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   b8822:	920a      	str	r2, [sp, #40]	; 0x28
        if(size_x > 1 || size_y > 1) {
   b8824:	d801      	bhi.n	b882a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1e6>
   b8826:	2c01      	cmp	r4, #1
   b8828:	d957      	bls.n	b88da <_ZN12Adafruit_GFX8drawCharEsshtthh+0x296>
            xo16 = xo;
   b882a:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
   b882e:	9308      	str	r3, [sp, #32]
            yo16 = yo;
   b8830:	fa0f f38a 	sxth.w	r3, sl
   b8834:	9307      	str	r3, [sp, #28]
        startWrite();
   b8836:	f8db 3000 	ldr.w	r3, [fp]
   b883a:	4658      	mov	r0, fp
   b883c:	695b      	ldr	r3, [r3, #20]
   b883e:	4798      	blx	r3
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b8840:	b2b3      	uxth	r3, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   b8842:	f04f 0800 	mov.w	r8, #0
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b8846:	930e      	str	r3, [sp, #56]	; 0x38
                        writePixel(x+xo+xx, y+yo+yy, color);
   b8848:	fa1a f386 	uxtah	r3, sl, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   b884c:	46c1      	mov	r9, r8
        for(yy=0; yy<h; yy++) {
   b884e:	4647      	mov	r7, r8
                        writePixel(x+xo+xx, y+yo+yy, color);
   b8850:	930f      	str	r3, [sp, #60]	; 0x3c
        for(yy=0; yy<h; yy++) {
   b8852:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b8854:	429f      	cmp	r7, r3
   b8856:	d28f      	bcs.n	b8778 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b8858:	9b07      	ldr	r3, [sp, #28]
   b885a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   b885c:	443b      	add	r3, r7
   b885e:	fb03 2304 	mla	r3, r3, r4, r2
            for(xx=0; xx<w; xx++) {
   b8862:	2200      	movs	r2, #0
   b8864:	9205      	str	r2, [sp, #20]
                        writePixel(x+xo+xx, y+yo+yy, color);
   b8866:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b8868:	b21b      	sxth	r3, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   b886a:	eb02 0a07 	add.w	sl, r2, r7
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b886e:	ee08 3a10 	vmov	s16, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   b8872:	fa0f fa8a 	sxth.w	sl, sl
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b8876:	4643      	mov	r3, r8
            for(xx=0; xx<w; xx++) {
   b8878:	9a09      	ldr	r2, [sp, #36]	; 0x24
   b887a:	9905      	ldr	r1, [sp, #20]
   b887c:	4291      	cmp	r1, r2
   b887e:	d241      	bcs.n	b8904 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2c0>
                if(!(bit++ & 7)) {
   b8880:	1c5a      	adds	r2, r3, #1
   b8882:	b2d2      	uxtb	r2, r2
   b8884:	075b      	lsls	r3, r3, #29
   b8886:	920d      	str	r2, [sp, #52]	; 0x34
   b8888:	d107      	bne.n	b889a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x256>
                    bits = pgm_read_byte(&bitmap[bo++]);
   b888a:	9b06      	ldr	r3, [sp, #24]
   b888c:	9906      	ldr	r1, [sp, #24]
   b888e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b8890:	3301      	adds	r3, #1
   b8892:	b29b      	uxth	r3, r3
   b8894:	f812 9001 	ldrb.w	r9, [r2, r1]
   b8898:	9306      	str	r3, [sp, #24]
                if(bits & 0x80) {
   b889a:	f019 0f80 	tst.w	r9, #128	; 0x80
   b889e:	d012      	beq.n	b88c6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
                    if(size_x == 1 && size_y == 1) {
   b88a0:	2d01      	cmp	r5, #1
                        writePixel(x+xo+xx, y+yo+yy, color);
   b88a2:	f8db 3000 	ldr.w	r3, [fp]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b88a6:	f8bd 100c 	ldrh.w	r1, [sp, #12]
                    if(size_x == 1 && size_y == 1) {
   b88aa:	d11a      	bne.n	b88e2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
   b88ac:	2c01      	cmp	r4, #1
   b88ae:	d118      	bne.n	b88e2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
                        writePixel(x+xo+xx, y+yo+yy, color);
   b88b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   b88b2:	699b      	ldr	r3, [r3, #24]
   b88b4:	4411      	add	r1, r2
   b88b6:	9a05      	ldr	r2, [sp, #20]
   b88b8:	4411      	add	r1, r2
   b88ba:	461e      	mov	r6, r3
   b88bc:	4652      	mov	r2, sl
   b88be:	9b04      	ldr	r3, [sp, #16]
   b88c0:	b209      	sxth	r1, r1
   b88c2:	4658      	mov	r0, fp
   b88c4:	47b0      	blx	r6
            for(xx=0; xx<w; xx++) {
   b88c6:	9e05      	ldr	r6, [sp, #20]
   b88c8:	3601      	adds	r6, #1
   b88ca:	b2f3      	uxtb	r3, r6
                bits <<= 1;
   b88cc:	ea4f 0949 	mov.w	r9, r9, lsl #1
            for(xx=0; xx<w; xx++) {
   b88d0:	9305      	str	r3, [sp, #20]
                bits <<= 1;
   b88d2:	fa5f f989 	uxtb.w	r9, r9
                if(!(bit++ & 7)) {
   b88d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
            for(xx=0; xx<w; xx++) {
   b88d8:	e7ce      	b.n	b8878 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x234>
        int16_t  xo16 = 0, yo16 = 0;
   b88da:	2300      	movs	r3, #0
   b88dc:	e9cd 3307 	strd	r3, r3, [sp, #28]
   b88e0:	e7a9      	b.n	b8836 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1f2>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b88e2:	9805      	ldr	r0, [sp, #20]
   b88e4:	9a08      	ldr	r2, [sp, #32]
   b88e6:	4402      	add	r2, r0
   b88e8:	fb02 1105 	mla	r1, r2, r5, r1
   b88ec:	9a04      	ldr	r2, [sp, #16]
   b88ee:	e9cd 4200 	strd	r4, r2, [sp]
   b88f2:	69db      	ldr	r3, [r3, #28]
   b88f4:	ee18 2a10 	vmov	r2, s16
   b88f8:	461e      	mov	r6, r3
   b88fa:	b209      	sxth	r1, r1
   b88fc:	462b      	mov	r3, r5
   b88fe:	4658      	mov	r0, fp
   b8900:	47b0      	blx	r6
   b8902:	e7e0      	b.n	b88c6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
   b8904:	9b09      	ldr	r3, [sp, #36]	; 0x24
        for(yy=0; yy<h; yy++) {
   b8906:	3701      	adds	r7, #1
   b8908:	4498      	add	r8, r3
   b890a:	fa5f f888 	uxtb.w	r8, r8
   b890e:	b2ff      	uxtb	r7, r7
   b8910:	e79f      	b.n	b8852 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x20e>
}
   b8912:	b011      	add	sp, #68	; 0x44
   b8914:	ecbd 8b02 	vpop	{d8}
   b8918:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b891c:	000bc63e 	.word	0x000bc63e

000b8920 <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
   b8920:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(!gfxFont) { // 'Classic' built-in font
   b8922:	6a02      	ldr	r2, [r0, #32]
size_t Adafruit_GFX::write(uint8_t c) {
   b8924:	b085      	sub	sp, #20
   b8926:	4604      	mov	r4, r0
   b8928:	460b      	mov	r3, r1
    if(!gfxFont) { // 'Classic' built-in font
   b892a:	2a00      	cmp	r2, #0
   b892c:	d134      	bne.n	b8998 <_ZN12Adafruit_GFX5writeEh+0x78>
        if(c == '\n') {                        // Newline?
   b892e:	290a      	cmp	r1, #10
   b8930:	d108      	bne.n	b8944 <_ZN12Adafruit_GFX5writeEh+0x24>
            cursor_y += textsize_y * 8;        // advance y one line
   b8932:	8a43      	ldrh	r3, [r0, #18]
            cursor_x  = 0;                     // Reset x to zero,
   b8934:	8202      	strh	r2, [r0, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   b8936:	7e42      	ldrb	r2, [r0, #25]
   b8938:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
            cursor_y += (int16_t)textsize_y *
   b893c:	8263      	strh	r3, [r4, #18]
}
   b893e:	2001      	movs	r0, #1
   b8940:	b005      	add	sp, #20
   b8942:	bdf0      	pop	{r4, r5, r6, r7, pc}
        } else if(c != '\r') {                 // Ignore carriage returns
   b8944:	290d      	cmp	r1, #13
   b8946:	d0fa      	beq.n	b893e <_ZN12Adafruit_GFX5writeEh+0x1e>
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b8948:	7ee1      	ldrb	r1, [r4, #27]
   b894a:	7e00      	ldrb	r0, [r0, #24]
            cursor_y += textsize_y * 8;        // advance y one line
   b894c:	7e65      	ldrb	r5, [r4, #25]
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b894e:	b171      	cbz	r1, b896e <_ZN12Adafruit_GFX5writeEh+0x4e>
   b8950:	f9b4 6010 	ldrsh.w	r6, [r4, #16]
   b8954:	2106      	movs	r1, #6
   b8956:	fb11 6100 	smlabb	r1, r1, r0, r6
   b895a:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
   b895e:	42b1      	cmp	r1, r6
            cursor_y += textsize_y * 8;        // advance y one line
   b8960:	bfc1      	itttt	gt
   b8962:	f9b4 1012 	ldrshgt.w	r1, [r4, #18]
                cursor_x  = 0;                 // Reset x to zero,
   b8966:	8222      	strhgt	r2, [r4, #16]
                cursor_y += textsize_y * 8;    // advance y one line
   b8968:	eb01 02c5 	addgt.w	r2, r1, r5, lsl #3
   b896c:	8262      	strhgt	r2, [r4, #18]
            drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   b896e:	8ae2      	ldrh	r2, [r4, #22]
   b8970:	9201      	str	r2, [sp, #4]
   b8972:	8aa2      	ldrh	r2, [r4, #20]
   b8974:	9200      	str	r2, [sp, #0]
   b8976:	e9cd 0502 	strd	r0, r5, [sp, #8]
   b897a:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   b897e:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b8982:	4620      	mov	r0, r4
   b8984:	f7ff fe5e 	bl	b8644 <_ZN12Adafruit_GFX8drawCharEsshtthh>
            cursor_x += textsize_x * 6;          // Advance x one char
   b8988:	7e23      	ldrb	r3, [r4, #24]
   b898a:	8a22      	ldrh	r2, [r4, #16]
   b898c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   b8990:	eb02 0343 	add.w	r3, r2, r3, lsl #1
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   b8994:	8223      	strh	r3, [r4, #16]
   b8996:	e7d2      	b.n	b893e <_ZN12Adafruit_GFX5writeEh+0x1e>
        if(c == '\n') {
   b8998:	290a      	cmp	r1, #10
   b899a:	d107      	bne.n	b89ac <_ZN12Adafruit_GFX5writeEh+0x8c>
            cursor_x  = 0;
   b899c:	2300      	movs	r3, #0
   b899e:	8203      	strh	r3, [r0, #16]
            cursor_y += (int16_t)textsize_y *
   b89a0:	7e41      	ldrb	r1, [r0, #25]
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   b89a2:	7a92      	ldrb	r2, [r2, #10]
            cursor_y += (int16_t)textsize_y *
   b89a4:	8a43      	ldrh	r3, [r0, #18]
   b89a6:	fb01 3302 	mla	r3, r1, r2, r3
   b89aa:	e7c7      	b.n	b893c <_ZN12Adafruit_GFX5writeEh+0x1c>
        } else if(c != '\r') {
   b89ac:	290d      	cmp	r1, #13
   b89ae:	d0c6      	beq.n	b893e <_ZN12Adafruit_GFX5writeEh+0x1e>
            uint8_t first = pgm_read_byte(&gfxFont->first);
   b89b0:	7a15      	ldrb	r5, [r2, #8]
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
   b89b2:	42a9      	cmp	r1, r5
   b89b4:	d3c3      	bcc.n	b893e <_ZN12Adafruit_GFX5writeEh+0x1e>
   b89b6:	7a51      	ldrb	r1, [r2, #9]
   b89b8:	4299      	cmp	r1, r3
   b89ba:	d3c0      	bcc.n	b893e <_ZN12Adafruit_GFX5writeEh+0x1e>
    return gfxFont->glyph + c;
   b89bc:	6851      	ldr	r1, [r2, #4]
                GFXglyph *glyph  = pgm_read_glyph_ptr(gfxFont, c - first);
   b89be:	1b5d      	subs	r5, r3, r5
    return gfxFont->glyph + c;
   b89c0:	b2ed      	uxtb	r5, r5
   b89c2:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
                uint8_t   w     = pgm_read_byte(&glyph->width),
   b89c6:	78a8      	ldrb	r0, [r5, #2]
                if((w > 0) && (h > 0)) { // Is there an associated bitmap?
   b89c8:	b328      	cbz	r0, b8a16 <_ZN12Adafruit_GFX5writeEh+0xf6>
   b89ca:	78e9      	ldrb	r1, [r5, #3]
   b89cc:	b319      	cbz	r1, b8a16 <_ZN12Adafruit_GFX5writeEh+0xf6>
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   b89ce:	7ee1      	ldrb	r1, [r4, #27]
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b89d0:	7e26      	ldrb	r6, [r4, #24]
            cursor_y += textsize_y * 8;        // advance y one line
   b89d2:	7e67      	ldrb	r7, [r4, #25]
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   b89d4:	b191      	cbz	r1, b89fc <_ZN12Adafruit_GFX5writeEh+0xdc>
   b89d6:	f995 1005 	ldrsb.w	r1, [r5, #5]
   b89da:	4408      	add	r0, r1
   b89dc:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b89e0:	fb06 1100 	mla	r1, r6, r0, r1
   b89e4:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   b89e8:	4281      	cmp	r1, r0
   b89ea:	dd07      	ble.n	b89fc <_ZN12Adafruit_GFX5writeEh+0xdc>
                        cursor_x  = 0;
   b89ec:	2000      	movs	r0, #0
   b89ee:	8220      	strh	r0, [r4, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   b89f0:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   b89f4:	7a92      	ldrb	r2, [r2, #10]
                        cursor_y += (int16_t)textsize_y *
   b89f6:	fb02 1207 	mla	r2, r2, r7, r1
   b89fa:	8262      	strh	r2, [r4, #18]
                    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   b89fc:	8ae2      	ldrh	r2, [r4, #22]
   b89fe:	9201      	str	r2, [sp, #4]
   b8a00:	8aa2      	ldrh	r2, [r4, #20]
   b8a02:	9200      	str	r2, [sp, #0]
   b8a04:	e9cd 6702 	strd	r6, r7, [sp, #8]
   b8a08:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   b8a0c:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b8a10:	4620      	mov	r0, r4
   b8a12:	f7ff fe17 	bl	b8644 <_ZN12Adafruit_GFX8drawCharEsshtthh>
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   b8a16:	7929      	ldrb	r1, [r5, #4]
   b8a18:	7e22      	ldrb	r2, [r4, #24]
   b8a1a:	8a23      	ldrh	r3, [r4, #16]
   b8a1c:	fb01 3302 	mla	r3, r1, r2, r3
   b8a20:	e7b8      	b.n	b8994 <_ZN12Adafruit_GFX5writeEh+0x74>

000b8a22 <_ZN12Adafruit_GFX11setTextSizeEh>:
    textsize_x = (s_x > 0) ? s_x : 1;
   b8a22:	2901      	cmp	r1, #1
   b8a24:	bf38      	it	cc
   b8a26:	2101      	movcc	r1, #1
   b8a28:	7601      	strb	r1, [r0, #24]
    textsize_y = (s_y > 0) ? s_y : 1;
   b8a2a:	7641      	strb	r1, [r0, #25]
}
   b8a2c:	4770      	bx	lr

000b8a2e <_ZN7MFRC522C1Ehh>:

/**
 * Constructor.
 * Prepares the output pins.
 */
MFRC522::MFRC522(	byte chipSelectPin,		///< Arduino pin connected to MFRC522's SPI slave select input (Pin 24, NSS, active low)
   b8a2e:	b538      	push	{r3, r4, r5, lr}
   b8a30:	4604      	mov	r4, r0
   b8a32:	4608      	mov	r0, r1
					byte resetPowerDownPin	///< Arduino pin connected to MFRC522's reset and power down input (Pin 6, NRSTPD, active low)
				) {
	// Set the chipSelectPin as digital output, do not select the slave yet
	_chipSelectPin = chipSelectPin;
   b8a34:	7321      	strb	r1, [r4, #12]
	pinMode(_chipSelectPin, OUTPUT);
   b8a36:	2101      	movs	r1, #1
MFRC522::MFRC522(	byte chipSelectPin,		///< Arduino pin connected to MFRC522's SPI slave select input (Pin 24, NSS, active low)
   b8a38:	4615      	mov	r5, r2
	pinMode(_chipSelectPin, OUTPUT);
   b8a3a:	f002 fc0d 	bl	bb258 <pinMode>
	digitalWrite(_chipSelectPin, HIGH);
   b8a3e:	7b20      	ldrb	r0, [r4, #12]
   b8a40:	2101      	movs	r1, #1
   b8a42:	f002 fc1a 	bl	bb27a <digitalWrite>
	
	// Set the resetPowerDownPin as digital output, do not reset or power down.
	_resetPowerDownPin = resetPowerDownPin;
	pinMode(_resetPowerDownPin, OUTPUT);
   b8a46:	4628      	mov	r0, r5
	_resetPowerDownPin = resetPowerDownPin;
   b8a48:	7365      	strb	r5, [r4, #13]
	pinMode(_resetPowerDownPin, OUTPUT);
   b8a4a:	2101      	movs	r1, #1
   b8a4c:	f002 fc04 	bl	bb258 <pinMode>
	digitalWrite(_resetPowerDownPin, LOW);
   b8a50:	7b60      	ldrb	r0, [r4, #13]
   b8a52:	2100      	movs	r1, #0
   b8a54:	f002 fc11 	bl	bb27a <digitalWrite>
	
	// Set SPI bus to work with MFRC522 chip.
	//setSPIConfig();
} // End constructor
   b8a58:	4620      	mov	r0, r4
   b8a5a:	bd38      	pop	{r3, r4, r5, pc}

000b8a5c <_ZN7MFRC52217GetStatusCodeNameEh>:
 * Returns a string pointer to a status code name.
 * 
 */
const char *MFRC522::GetStatusCodeName(byte code	///< One of the StatusCode enums.
										) {
	switch (code) {
   b8a5c:	3901      	subs	r1, #1
   b8a5e:	b2c9      	uxtb	r1, r1
   b8a60:	2908      	cmp	r1, #8
   b8a62:	bf9a      	itte	ls
   b8a64:	4b02      	ldrls	r3, [pc, #8]	; (b8a70 <_ZN7MFRC52217GetStatusCodeNameEh+0x14>)
   b8a66:	f853 0021 	ldrls.w	r0, [r3, r1, lsl #2]
										) {
   b8a6a:	4802      	ldrhi	r0, [pc, #8]	; (b8a74 <_ZN7MFRC52217GetStatusCodeNameEh+0x18>)
		case STATUS_MIFARE_NACK:	return "A MIFARE PICC responded with NAK."; break;
		default:
			return "Unknown error";
			break;
	}
} // End GetStatusCodeName()
   b8a6c:	4770      	bx	lr
   b8a6e:	bf00      	nop
   b8a70:	000bcc90 	.word	0x000bcc90
   b8a74:	000bcb98 	.word	0x000bcb98

000b8a78 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
    static SPIClass& instance() {
   b8a78:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   b8a7a:	4c0b      	ldr	r4, [pc, #44]	; (b8aa8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   b8a7c:	7821      	ldrb	r1, [r4, #0]
   b8a7e:	f3bf 8f5b 	dmb	ish
   b8a82:	f011 0101 	ands.w	r1, r1, #1
   b8a86:	d10b      	bne.n	b8aa0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b8a88:	4620      	mov	r0, r4
   b8a8a:	9101      	str	r1, [sp, #4]
   b8a8c:	f7fb ffea 	bl	b4a64 <__cxa_guard_acquire>
   b8a90:	9901      	ldr	r1, [sp, #4]
   b8a92:	b128      	cbz	r0, b8aa0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b8a94:	4805      	ldr	r0, [pc, #20]	; (b8aac <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b8a96:	f001 fd37 	bl	ba508 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b8a9a:	4620      	mov	r0, r4
   b8a9c:	f7fb ffe7 	bl	b4a6e <__cxa_guard_release>
    }
   b8aa0:	4802      	ldr	r0, [pc, #8]	; (b8aac <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b8aa2:	b002      	add	sp, #8
   b8aa4:	bd10      	pop	{r4, pc}
   b8aa6:	bf00      	nop
   b8aa8:	2003c730 	.word	0x2003c730
   b8aac:	2003c734 	.word	0x2003c734

000b8ab0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>:
        return instance().setClockSpeed(value, scale);
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
   b8ab0:	b507      	push	{r0, r1, r2, lr}
   b8ab2:	9001      	str	r0, [sp, #4]
        return instance().transfer(data);
   b8ab4:	f7ff ffe0 	bl	b8a78 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b8ab8:	9901      	ldr	r1, [sp, #4]
    }
   b8aba:	b003      	add	sp, #12
   b8abc:	f85d eb04 	ldr.w	lr, [sp], #4
        return instance().transfer(data);
   b8ac0:	f001 bdc8 	b.w	ba654 <_ZN8SPIClass8transferEh>

000b8ac4 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh>:
								) {
   b8ac4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8ac8:	4607      	mov	r7, r0
   b8aca:	f89d 8030 	ldrb.w	r8, [sp, #48]	; 0x30
   b8ace:	461e      	mov	r6, r3
	if (count == 0) {
   b8ad0:	4615      	mov	r5, r2
   b8ad2:	2a00      	cmp	r2, #0
   b8ad4:	d042      	beq.n	b8b5c <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x98>
	byte address = 0x80 | (reg & 0x7E);		// MSB == 1 is for reading. LSB is not used in address. Datasheet section 8.1.2.3.
   b8ad6:	f001 017e 	and.w	r1, r1, #126	; 0x7e
	digitalWrite(_chipSelectPin, LOW);		// Select slave
   b8ada:	7b00      	ldrb	r0, [r0, #12]
	byte address = 0x80 | (reg & 0x7E);		// MSB == 1 is for reading. LSB is not used in address. Datasheet section 8.1.2.3.
   b8adc:	f041 0980 	orr.w	r9, r1, #128	; 0x80
	digitalWrite(_chipSelectPin, LOW);		// Select slave
   b8ae0:	2100      	movs	r1, #0
   b8ae2:	f002 fbca 	bl	bb27a <digitalWrite>
	SPI.transfer(address);					// Tell MFRC522 which address we want to read
   b8ae6:	4648      	mov	r0, r9
   b8ae8:	f7ff ffe2 	bl	b8ab0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
	count--;								// One read is performed outside of the loop
   b8aec:	3d01      	subs	r5, #1
   b8aee:	b2ed      	uxtb	r5, r5
	SPI.transfer(address);					// Tell MFRC522 which address we want to read
   b8af0:	f04f 0b00 	mov.w	fp, #0
				mask |= (1 << i);
   b8af4:	f04f 0a01 	mov.w	sl, #1
	while (index < count) {
   b8af8:	fa5f f48b 	uxtb.w	r4, fp
   b8afc:	42a5      	cmp	r5, r4
   b8afe:	d922      	bls.n	b8b46 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x82>
		if (index == 0 && rxAlign) { // Only update bit positions rxAlign..7 in values[0]
   b8b00:	b9dc      	cbnz	r4, b8b3a <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x76>
   b8b02:	f1b8 0f00 	cmp.w	r8, #0
   b8b06:	d018      	beq.n	b8b3a <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x76>
   b8b08:	4642      	mov	r2, r8
			for (byte i = rxAlign; i <= 7; i++) {
   b8b0a:	b2d3      	uxtb	r3, r2
   b8b0c:	2b07      	cmp	r3, #7
				mask |= (1 << i);
   b8b0e:	b261      	sxtb	r1, r4
			for (byte i = rxAlign; i <= 7; i++) {
   b8b10:	d805      	bhi.n	b8b1e <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x5a>
				mask |= (1 << i);
   b8b12:	fa0a f402 	lsl.w	r4, sl, r2
   b8b16:	430c      	orrs	r4, r1
   b8b18:	b2e4      	uxtb	r4, r4
			for (byte i = rxAlign; i <= 7; i++) {
   b8b1a:	3201      	adds	r2, #1
   b8b1c:	e7f5      	b.n	b8b0a <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x46>
			byte value = SPI.transfer(address);	
   b8b1e:	4648      	mov	r0, r9
   b8b20:	9101      	str	r1, [sp, #4]
   b8b22:	f7ff ffc5 	bl	b8ab0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
			values[0] = (values[index] & ~mask) | (value & mask);
   b8b26:	7833      	ldrb	r3, [r6, #0]
   b8b28:	9901      	ldr	r1, [sp, #4]
   b8b2a:	4004      	ands	r4, r0
   b8b2c:	ea23 0301 	bic.w	r3, r3, r1
   b8b30:	431c      	orrs	r4, r3
   b8b32:	7034      	strb	r4, [r6, #0]
		index++;
   b8b34:	f10b 0b01 	add.w	fp, fp, #1
	while (index < count) {
   b8b38:	e7de      	b.n	b8af8 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x34>
			values[index] = SPI.transfer(address);	// Read value and tell that we want to read the same address again.
   b8b3a:	4648      	mov	r0, r9
   b8b3c:	f7ff ffb8 	bl	b8ab0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
   b8b40:	f806 000b 	strb.w	r0, [r6, fp]
   b8b44:	e7f6      	b.n	b8b34 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x70>
	values[index] = SPI.transfer(0);			// Read the final byte. Send 0 to stop reading.
   b8b46:	2000      	movs	r0, #0
   b8b48:	f7ff ffb2 	bl	b8ab0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
   b8b4c:	5570      	strb	r0, [r6, r5]
	digitalWrite(_chipSelectPin, HIGH);			// Release slave again
   b8b4e:	7b38      	ldrb	r0, [r7, #12]
   b8b50:	2101      	movs	r1, #1
} // End PCD_ReadRegister()
   b8b52:	b003      	add	sp, #12
   b8b54:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	digitalWrite(_chipSelectPin, HIGH);			// Release slave again
   b8b58:	f002 bb8f 	b.w	bb27a <digitalWrite>
} // End PCD_ReadRegister()
   b8b5c:	b003      	add	sp, #12
   b8b5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b8b62 <_ZN7MFRC52216PCD_ReadRegisterEh>:
								) {
   b8b62:	b538      	push	{r3, r4, r5, lr}
   b8b64:	460c      	mov	r4, r1
   b8b66:	4605      	mov	r5, r0
	digitalWrite(_chipSelectPin, LOW);			// Select slave
   b8b68:	2100      	movs	r1, #0
   b8b6a:	7b00      	ldrb	r0, [r0, #12]
	SPI.transfer(0x80 | (reg & 0x7E));			// MSB == 1 is for reading. LSB is not used in address. Datasheet section 8.1.2.3.
   b8b6c:	f004 047e 	and.w	r4, r4, #126	; 0x7e
	digitalWrite(_chipSelectPin, LOW);			// Select slave
   b8b70:	f002 fb83 	bl	bb27a <digitalWrite>
	SPI.transfer(0x80 | (reg & 0x7E));			// MSB == 1 is for reading. LSB is not used in address. Datasheet section 8.1.2.3.
   b8b74:	f044 0080 	orr.w	r0, r4, #128	; 0x80
   b8b78:	f7ff ff9a 	bl	b8ab0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
	value = SPI.transfer(0);					// Read the value back. Send 0 to stop reading.
   b8b7c:	2000      	movs	r0, #0
   b8b7e:	f7ff ff97 	bl	b8ab0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
	digitalWrite(_chipSelectPin, HIGH);			// Release slave again
   b8b82:	2101      	movs	r1, #1
	value = SPI.transfer(0);					// Read the value back. Send 0 to stop reading.
   b8b84:	4604      	mov	r4, r0
	digitalWrite(_chipSelectPin, HIGH);			// Release slave again
   b8b86:	7b28      	ldrb	r0, [r5, #12]
   b8b88:	f002 fb77 	bl	bb27a <digitalWrite>
} // End PCD_ReadRegister()
   b8b8c:	4620      	mov	r0, r4
   b8b8e:	bd38      	pop	{r3, r4, r5, pc}

000b8b90 <_ZN7MFRC52217PCD_WriteRegisterEhhPh>:
								) {
   b8b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8b92:	460f      	mov	r7, r1
   b8b94:	4606      	mov	r6, r0
	digitalWrite(_chipSelectPin, LOW);		// Select slave
   b8b96:	2100      	movs	r1, #0
   b8b98:	7b00      	ldrb	r0, [r0, #12]
								) {
   b8b9a:	4615      	mov	r5, r2
   b8b9c:	461c      	mov	r4, r3
	digitalWrite(_chipSelectPin, LOW);		// Select slave
   b8b9e:	f002 fb6c 	bl	bb27a <digitalWrite>
	SPI.transfer(reg & 0x7E);				// MSB == 0 is for writing. LSB is not used in address. Datasheet section 8.1.2.3.
   b8ba2:	f007 007e 	and.w	r0, r7, #126	; 0x7e
   b8ba6:	f7ff ff83 	bl	b8ab0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
	for (byte index = 0; index < count; index++) {
   b8baa:	4425      	add	r5, r4
   b8bac:	42ac      	cmp	r4, r5
   b8bae:	d004      	beq.n	b8bba <_ZN7MFRC52217PCD_WriteRegisterEhhPh+0x2a>
		SPI.transfer(values[index]);
   b8bb0:	f814 0b01 	ldrb.w	r0, [r4], #1
   b8bb4:	f7ff ff7c 	bl	b8ab0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
	for (byte index = 0; index < count; index++) {
   b8bb8:	e7f8      	b.n	b8bac <_ZN7MFRC52217PCD_WriteRegisterEhhPh+0x1c>
	digitalWrite(_chipSelectPin, HIGH);		// Release slave again
   b8bba:	7b30      	ldrb	r0, [r6, #12]
   b8bbc:	2101      	movs	r1, #1
} // End PCD_WriteRegister()
   b8bbe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	digitalWrite(_chipSelectPin, HIGH);		// Release slave again
   b8bc2:	f002 bb5a 	b.w	bb27a <digitalWrite>

000b8bc6 <_ZN7MFRC52217PCD_WriteRegisterEhh>:
								) {
   b8bc6:	b570      	push	{r4, r5, r6, lr}
   b8bc8:	4604      	mov	r4, r0
   b8bca:	460e      	mov	r6, r1
	digitalWrite(_chipSelectPin, LOW);		// Select slave
   b8bcc:	7b00      	ldrb	r0, [r0, #12]
   b8bce:	2100      	movs	r1, #0
								) {
   b8bd0:	4615      	mov	r5, r2
	digitalWrite(_chipSelectPin, LOW);		// Select slave
   b8bd2:	f002 fb52 	bl	bb27a <digitalWrite>
	SPI.transfer(reg & 0x7E);					// MSB == 0 is for writing. LSB is not used in address. Datasheet section 8.1.2.3.
   b8bd6:	f006 007e 	and.w	r0, r6, #126	; 0x7e
   b8bda:	f7ff ff69 	bl	b8ab0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
	SPI.transfer(value);
   b8bde:	4628      	mov	r0, r5
   b8be0:	f7ff ff66 	bl	b8ab0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
	digitalWrite(_chipSelectPin, HIGH);		// Release slave again
   b8be4:	7b20      	ldrb	r0, [r4, #12]
   b8be6:	2101      	movs	r1, #1
} // End PCD_WriteRegister()
   b8be8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	digitalWrite(_chipSelectPin, HIGH);		// Release slave again
   b8bec:	f002 bb45 	b.w	bb27a <digitalWrite>

000b8bf0 <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>:
									) { 
   b8bf0:	b570      	push	{r4, r5, r6, lr}
   b8bf2:	4616      	mov	r6, r2
   b8bf4:	4604      	mov	r4, r0
   b8bf6:	460d      	mov	r5, r1
	tmp = PCD_ReadRegister(reg);
   b8bf8:	f7ff ffb3 	bl	b8b62 <_ZN7MFRC52216PCD_ReadRegisterEh>
	PCD_WriteRegister(reg, tmp | mask);			// set bit mask
   b8bfc:	4330      	orrs	r0, r6
   b8bfe:	b2c2      	uxtb	r2, r0
   b8c00:	4629      	mov	r1, r5
   b8c02:	4620      	mov	r0, r4
} // End PCD_SetRegisterBitMask()
   b8c04:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	PCD_WriteRegister(reg, tmp | mask);			// set bit mask
   b8c08:	f7ff bfdd 	b.w	b8bc6 <_ZN7MFRC52217PCD_WriteRegisterEhh>

000b8c0c <_ZN7MFRC52224PCD_ClearRegisterBitMaskEhh>:
									  ) {
   b8c0c:	b570      	push	{r4, r5, r6, lr}
   b8c0e:	4616      	mov	r6, r2
   b8c10:	4604      	mov	r4, r0
   b8c12:	460d      	mov	r5, r1
	tmp = PCD_ReadRegister(reg);
   b8c14:	f7ff ffa5 	bl	b8b62 <_ZN7MFRC52216PCD_ReadRegisterEh>
	PCD_WriteRegister(reg, tmp & (~mask));		// clear bit mask
   b8c18:	ea20 0006 	bic.w	r0, r0, r6
   b8c1c:	b2c2      	uxtb	r2, r0
   b8c1e:	4629      	mov	r1, r5
   b8c20:	4620      	mov	r0, r4
} // End PCD_ClearRegisterBitMask()
   b8c22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	PCD_WriteRegister(reg, tmp & (~mask));		// clear bit mask
   b8c26:	f7ff bfce 	b.w	b8bc6 <_ZN7MFRC52217PCD_WriteRegisterEhh>

000b8c2a <_ZN7MFRC52215PCD_StopCrypto1Ev>:
	PCD_ClearRegisterBitMask(Status2Reg, 0x08); // Status2Reg[7..0] bits are: TempSensClear I2CForceHS reserved reserved   MFCrypto1On ModemState[2:0]
   b8c2a:	2208      	movs	r2, #8
   b8c2c:	2110      	movs	r1, #16
   b8c2e:	f7ff bfed 	b.w	b8c0c <_ZN7MFRC52224PCD_ClearRegisterBitMaskEhh>

000b8c32 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>:
					 ) {
   b8c32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8c34:	4604      	mov	r4, r0
   b8c36:	4615      	mov	r5, r2
   b8c38:	460f      	mov	r7, r1
	PCD_WriteRegister(CommandReg, PCD_Idle);			// Stop any active command.
   b8c3a:	2200      	movs	r2, #0
   b8c3c:	2102      	movs	r1, #2
					 ) {
   b8c3e:	461e      	mov	r6, r3
	PCD_WriteRegister(CommandReg, PCD_Idle);			// Stop any active command.
   b8c40:	f7ff ffc1 	bl	b8bc6 <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_WriteRegister(DivIrqReg, 0x04);					// Clear the CRCIRq interrupt request bit
   b8c44:	2204      	movs	r2, #4
   b8c46:	210a      	movs	r1, #10
   b8c48:	4620      	mov	r0, r4
   b8c4a:	f7ff ffbc 	bl	b8bc6 <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_SetRegisterBitMask(FIFOLevelReg, 0x80);		// FlushBuffer = 1, FIFO initialization
   b8c4e:	2280      	movs	r2, #128	; 0x80
   b8c50:	2114      	movs	r1, #20
   b8c52:	4620      	mov	r0, r4
   b8c54:	f7ff ffcc 	bl	b8bf0 <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>
	PCD_WriteRegister(FIFODataReg, length, data);		// Write data to the FIFO
   b8c58:	462a      	mov	r2, r5
   b8c5a:	463b      	mov	r3, r7
   b8c5c:	2112      	movs	r1, #18
   b8c5e:	4620      	mov	r0, r4
   b8c60:	f7ff ff96 	bl	b8b90 <_ZN7MFRC52217PCD_WriteRegisterEhhPh>
	PCD_WriteRegister(CommandReg, PCD_CalcCRC);		// Start the calculation
   b8c64:	2203      	movs	r2, #3
   b8c66:	2102      	movs	r1, #2
   b8c68:	4620      	mov	r0, r4
   b8c6a:	f7ff ffac 	bl	b8bc6 <_ZN7MFRC52217PCD_WriteRegisterEhh>
   b8c6e:	f241 3588 	movw	r5, #5000	; 0x1388
		n = PCD_ReadRegister(DivIrqReg);	// DivIrqReg[7..0] bits are: Set2 reserved reserved MfinActIRq   reserved CRCIRq reserved reserved
   b8c72:	210a      	movs	r1, #10
   b8c74:	4620      	mov	r0, r4
   b8c76:	f7ff ff74 	bl	b8b62 <_ZN7MFRC52216PCD_ReadRegisterEh>
		if (n & 0x04) {						// CRCIRq bit set - calculation done
   b8c7a:	0743      	lsls	r3, r0, #29
   b8c7c:	d405      	bmi.n	b8c8a <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0x58>
		if (--i == 0) {						// The emergency break. We will eventually terminate on this one after 89ms. Communication with the MFRC522 might be down.
   b8c7e:	3d01      	subs	r5, #1
   b8c80:	b2ad      	uxth	r5, r5
   b8c82:	2d00      	cmp	r5, #0
   b8c84:	d1f5      	bne.n	b8c72 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0x40>
			return STATUS_TIMEOUT;
   b8c86:	2004      	movs	r0, #4
   b8c88:	e00f      	b.n	b8caa <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0x78>
	PCD_WriteRegister(CommandReg, PCD_Idle);			// Stop calculating CRC for new content in the FIFO.
   b8c8a:	2200      	movs	r2, #0
   b8c8c:	2102      	movs	r1, #2
   b8c8e:	4620      	mov	r0, r4
   b8c90:	f7ff ff99 	bl	b8bc6 <_ZN7MFRC52217PCD_WriteRegisterEhh>
	result[0] = PCD_ReadRegister(CRCResultRegL);
   b8c94:	2144      	movs	r1, #68	; 0x44
   b8c96:	4620      	mov	r0, r4
   b8c98:	f7ff ff63 	bl	b8b62 <_ZN7MFRC52216PCD_ReadRegisterEh>
	result[1] = PCD_ReadRegister(CRCResultRegH);
   b8c9c:	2142      	movs	r1, #66	; 0x42
	result[0] = PCD_ReadRegister(CRCResultRegL);
   b8c9e:	7030      	strb	r0, [r6, #0]
	result[1] = PCD_ReadRegister(CRCResultRegH);
   b8ca0:	4620      	mov	r0, r4
   b8ca2:	f7ff ff5e 	bl	b8b62 <_ZN7MFRC52216PCD_ReadRegisterEh>
   b8ca6:	7070      	strb	r0, [r6, #1]
	return STATUS_OK;
   b8ca8:	2001      	movs	r0, #1
} // End PCD_CalculateCRC()
   b8caa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b8cac <_ZN7MFRC5229PCD_ResetEv>:
void MFRC522::PCD_Reset() {
   b8cac:	b510      	push	{r4, lr}
	PCD_WriteRegister(CommandReg, PCD_SoftReset);	// Issue the SoftReset command.
   b8cae:	220f      	movs	r2, #15
   b8cb0:	2102      	movs	r1, #2
void MFRC522::PCD_Reset() {
   b8cb2:	4604      	mov	r4, r0
	PCD_WriteRegister(CommandReg, PCD_SoftReset);	// Issue the SoftReset command.
   b8cb4:	f7ff ff87 	bl	b8bc6 <_ZN7MFRC52217PCD_WriteRegisterEhh>
	delay(50);
   b8cb8:	2032      	movs	r0, #50	; 0x32
   b8cba:	f001 ff02 	bl	baac2 <delay>
	while (PCD_ReadRegister(CommandReg) & (1<<4)) {
   b8cbe:	2102      	movs	r1, #2
   b8cc0:	4620      	mov	r0, r4
   b8cc2:	f7ff ff4e 	bl	b8b62 <_ZN7MFRC52216PCD_ReadRegisterEh>
   b8cc6:	06c3      	lsls	r3, r0, #27
   b8cc8:	d4f9      	bmi.n	b8cbe <_ZN7MFRC5229PCD_ResetEv+0x12>
} // End PCD_Reset()
   b8cca:	bd10      	pop	{r4, pc}

000b8ccc <_ZN7MFRC52213PCD_AntennaOnEv>:
void MFRC522::PCD_AntennaOn() {
   b8ccc:	b510      	push	{r4, lr}
	byte value = PCD_ReadRegister(TxControlReg);
   b8cce:	2128      	movs	r1, #40	; 0x28
void MFRC522::PCD_AntennaOn() {
   b8cd0:	4604      	mov	r4, r0
	byte value = PCD_ReadRegister(TxControlReg);
   b8cd2:	f7ff ff46 	bl	b8b62 <_ZN7MFRC52216PCD_ReadRegisterEh>
	if ((value & 0x03) != 0x03) {
   b8cd6:	f000 0303 	and.w	r3, r0, #3
   b8cda:	2b03      	cmp	r3, #3
   b8cdc:	d008      	beq.n	b8cf0 <_ZN7MFRC52213PCD_AntennaOnEv+0x24>
		PCD_WriteRegister(TxControlReg, value | 0x03);
   b8cde:	f040 0203 	orr.w	r2, r0, #3
   b8ce2:	b2d2      	uxtb	r2, r2
   b8ce4:	4620      	mov	r0, r4
   b8ce6:	2128      	movs	r1, #40	; 0x28
} // End PCD_AntennaOn()
   b8ce8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		PCD_WriteRegister(TxControlReg, value | 0x03);
   b8cec:	f7ff bf6b 	b.w	b8bc6 <_ZN7MFRC52217PCD_WriteRegisterEhh>
} // End PCD_AntennaOn()
   b8cf0:	bd10      	pop	{r4, pc}

000b8cf2 <_ZN7MFRC5228PCD_InitEv>:
void MFRC522::PCD_Init() {
   b8cf2:	b510      	push	{r4, lr}
   b8cf4:	4604      	mov	r4, r0
	if (digitalRead(_resetPowerDownPin) == LOW) { //The MFRC522 chip is in power down mode.
   b8cf6:	7b40      	ldrb	r0, [r0, #13]
   b8cf8:	f002 fad8 	bl	bb2ac <digitalRead>
   b8cfc:	bb48      	cbnz	r0, b8d52 <_ZN7MFRC5228PCD_InitEv+0x60>
		digitalWrite(_resetPowerDownPin, HIGH);	// Exit power down mode. This triggers a hard reset.
   b8cfe:	7b60      	ldrb	r0, [r4, #13]
   b8d00:	2101      	movs	r1, #1
   b8d02:	f002 faba 	bl	bb27a <digitalWrite>
		delay(50);
   b8d06:	2032      	movs	r0, #50	; 0x32
   b8d08:	f001 fedb 	bl	baac2 <delay>
    PCD_WriteRegister(TModeReg, 0x80);			// TAuto=1; timer starts automatically at the end of the transmission in all communication modes at all speeds
   b8d0c:	4620      	mov	r0, r4
   b8d0e:	2280      	movs	r2, #128	; 0x80
   b8d10:	2154      	movs	r1, #84	; 0x54
   b8d12:	f7ff ff58 	bl	b8bc6 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    PCD_WriteRegister(TPrescalerReg, 0xA9);	// TPreScaler = TModeReg[3..0]:TPrescalerReg, ie 0x0A9 = 169 => f_timer=40kHz, ie a timer period of 25�s.
   b8d16:	4620      	mov	r0, r4
   b8d18:	22a9      	movs	r2, #169	; 0xa9
   b8d1a:	2156      	movs	r1, #86	; 0x56
   b8d1c:	f7ff ff53 	bl	b8bc6 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    PCD_WriteRegister(TReloadRegH, 0x03);		// Reload timer with 0x3E8 = 1000, ie 25ms before timeout.
   b8d20:	4620      	mov	r0, r4
   b8d22:	2203      	movs	r2, #3
   b8d24:	2158      	movs	r1, #88	; 0x58
   b8d26:	f7ff ff4e 	bl	b8bc6 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    PCD_WriteRegister(TReloadRegL, 0xE8);
   b8d2a:	4620      	mov	r0, r4
   b8d2c:	22e8      	movs	r2, #232	; 0xe8
   b8d2e:	215a      	movs	r1, #90	; 0x5a
   b8d30:	f7ff ff49 	bl	b8bc6 <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_WriteRegister(TxASKReg, 0x40);		// Default 0x00. Force a 100 % ASK modulation independent of the ModGsPReg register setting
   b8d34:	4620      	mov	r0, r4
   b8d36:	2240      	movs	r2, #64	; 0x40
   b8d38:	212a      	movs	r1, #42	; 0x2a
   b8d3a:	f7ff ff44 	bl	b8bc6 <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_WriteRegister(ModeReg, 0x3D);		// Default 0x3F. Set the preset value for the CRC coprocessor for the CalcCRC command to 0x6363 (ISO 14443-3 part 6.2.4)
   b8d3e:	4620      	mov	r0, r4
   b8d40:	223d      	movs	r2, #61	; 0x3d
   b8d42:	2122      	movs	r1, #34	; 0x22
   b8d44:	f7ff ff3f 	bl	b8bc6 <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_AntennaOn();						// Enable the antenna driver pins TX1 and TX2 (they were disabled by the reset)
   b8d48:	4620      	mov	r0, r4
} // End PCD_Init()
   b8d4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	PCD_AntennaOn();						// Enable the antenna driver pins TX1 and TX2 (they were disabled by the reset)
   b8d4e:	f7ff bfbd 	b.w	b8ccc <_ZN7MFRC52213PCD_AntennaOnEv>
		PCD_Reset();
   b8d52:	4620      	mov	r0, r4
   b8d54:	f7ff ffaa 	bl	b8cac <_ZN7MFRC5229PCD_ResetEv>
   b8d58:	e7d8      	b.n	b8d0c <_ZN7MFRC5228PCD_InitEv+0x1a>

000b8d5a <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb>:
									 ) {
   b8d5a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8d5e:	b089      	sub	sp, #36	; 0x24
   b8d60:	e9dd 5613 	ldrd	r5, r6, [sp, #76]	; 0x4c
   b8d64:	f8dd 9054 	ldr.w	r9, [sp, #84]	; 0x54
   b8d68:	9203      	str	r2, [sp, #12]
   b8d6a:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
   b8d6e:	f89d b058 	ldrb.w	fp, [sp, #88]	; 0x58
   b8d72:	9204      	str	r2, [sp, #16]
   b8d74:	4604      	mov	r4, r0
   b8d76:	468a      	mov	sl, r1
   b8d78:	2700      	movs	r7, #0
	byte txLastBits = validBits ? *validBits : 0;
   b8d7a:	f1b9 0f00 	cmp.w	r9, #0
   b8d7e:	d03e      	beq.n	b8dfe <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xa4>
   b8d80:	f899 8000 	ldrb.w	r8, [r9]
   b8d84:	9305      	str	r3, [sp, #20]
	PCD_WriteRegister(CommandReg, PCD_Idle);			// Stop any active command.
   b8d86:	2200      	movs	r2, #0
   b8d88:	2102      	movs	r1, #2
   b8d8a:	4620      	mov	r0, r4
   b8d8c:	f7ff ff1b 	bl	b8bc6 <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_WriteRegister(ComIrqReg, 0x7F);					// Clear all seven interrupt request bits
   b8d90:	227f      	movs	r2, #127	; 0x7f
   b8d92:	2108      	movs	r1, #8
   b8d94:	4620      	mov	r0, r4
   b8d96:	f7ff ff16 	bl	b8bc6 <_ZN7MFRC52217PCD_WriteRegisterEhh>
	byte bitFraming	= (rxAlign << 4) + txLastBits;		// RxAlign = BitFramingReg[6..4]. TxLastBits = BitFramingReg[2..0]
   b8d9a:	eb08 180b 	add.w	r8, r8, fp, lsl #4
	PCD_SetRegisterBitMask(FIFOLevelReg, 0x80);		// FlushBuffer = 1, FIFO initialization
   b8d9e:	2280      	movs	r2, #128	; 0x80
   b8da0:	2114      	movs	r1, #20
   b8da2:	4620      	mov	r0, r4
   b8da4:	f7ff ff24 	bl	b8bf0 <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>
	byte bitFraming	= (rxAlign << 4) + txLastBits;		// RxAlign = BitFramingReg[6..4]. TxLastBits = BitFramingReg[2..0]
   b8da8:	fa5f f888 	uxtb.w	r8, r8
	PCD_WriteRegister(FIFODataReg, sendLen, sendData);	// Write sendData to the FIFO
   b8dac:	9b05      	ldr	r3, [sp, #20]
   b8dae:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
   b8db2:	2112      	movs	r1, #18
   b8db4:	4620      	mov	r0, r4
   b8db6:	f7ff feeb 	bl	b8b90 <_ZN7MFRC52217PCD_WriteRegisterEhhPh>
	PCD_WriteRegister(BitFramingReg, bitFraming);		// Bit adjustments
   b8dba:	4642      	mov	r2, r8
   b8dbc:	211a      	movs	r1, #26
   b8dbe:	4620      	mov	r0, r4
   b8dc0:	f7ff ff01 	bl	b8bc6 <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_WriteRegister(CommandReg, command);			// Execute the command
   b8dc4:	4652      	mov	r2, sl
   b8dc6:	2102      	movs	r1, #2
   b8dc8:	4620      	mov	r0, r4
   b8dca:	f7ff fefc 	bl	b8bc6 <_ZN7MFRC52217PCD_WriteRegisterEhh>
	if (command == PCD_Transceive) 	{
   b8dce:	f1ba 0f0c 	cmp.w	sl, #12
   b8dd2:	d104      	bne.n	b8dde <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x84>
		PCD_SetRegisterBitMask(BitFramingReg, 0x80);	// StartSend=1, transmission of data starts
   b8dd4:	2280      	movs	r2, #128	; 0x80
   b8dd6:	211a      	movs	r1, #26
   b8dd8:	4620      	mov	r0, r4
   b8dda:	f7ff ff09 	bl	b8bf0 <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>
	byte txLastBits = validBits ? *validBits : 0;
   b8dde:	f44f 68fa 	mov.w	r8, #2000	; 0x7d0
		n = PCD_ReadRegister(ComIrqReg);	// ComIrqReg[7..0] bits are: Set1 TxIRq RxIRq IdleIRq   HiAlertIRq LoAlertIRq ErrIRq TimerIRq
   b8de2:	2108      	movs	r1, #8
   b8de4:	4620      	mov	r0, r4
   b8de6:	f7ff febc 	bl	b8b62 <_ZN7MFRC52216PCD_ReadRegisterEh>
		if (n & waitIRq) {					// One of the interrupts that signal success has been set.
   b8dea:	9b03      	ldr	r3, [sp, #12]
   b8dec:	4218      	tst	r0, r3
   b8dee:	d108      	bne.n	b8e02 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xa8>
		if (n & 0x01) {						// Timer interrupt - nothing received in 25ms
   b8df0:	07c3      	lsls	r3, r0, #31
   b8df2:	d402      	bmi.n	b8dfa <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xa0>
		if (--i == 0) {						// The emergency break. If all other condions fail we will eventually terminate on this one after 35.7ms. Communication with the MFRC522 might be down.
   b8df4:	f1b8 0801 	subs.w	r8, r8, #1
   b8df8:	d1f3      	bne.n	b8de2 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x88>
			return STATUS_TIMEOUT;
   b8dfa:	2004      	movs	r0, #4
   b8dfc:	e04d      	b.n	b8e9a <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
	byte txLastBits = validBits ? *validBits : 0;
   b8dfe:	46c8      	mov	r8, r9
   b8e00:	e7c0      	b.n	b8d84 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x2a>
	byte errorRegValue = PCD_ReadRegister(ErrorReg); // ErrorReg[7..0] bits are: WrErr TempErr reserved BufferOvfl   CollErr CRCErr ParityErr ProtocolErr
   b8e02:	210c      	movs	r1, #12
   b8e04:	4620      	mov	r0, r4
   b8e06:	f7ff feac 	bl	b8b62 <_ZN7MFRC52216PCD_ReadRegisterEh>
	if (errorRegValue & 0x13) {	 // BufferOvfl ParityErr ProtocolErr
   b8e0a:	f010 0f13 	tst.w	r0, #19
	byte errorRegValue = PCD_ReadRegister(ErrorReg); // ErrorReg[7..0] bits are: WrErr TempErr reserved BufferOvfl   CollErr CRCErr ParityErr ProtocolErr
   b8e0e:	4680      	mov	r8, r0
	if (errorRegValue & 0x13) {	 // BufferOvfl ParityErr ProtocolErr
   b8e10:	d146      	bne.n	b8ea0 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x146>
	if (backData && backLen) {
   b8e12:	b1dd      	cbz	r5, b8e4c <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xf2>
   b8e14:	b1d6      	cbz	r6, b8e4c <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xf2>
		n = PCD_ReadRegister(FIFOLevelReg);						// Number of bytes in the FIFO
   b8e16:	2114      	movs	r1, #20
   b8e18:	4620      	mov	r0, r4
   b8e1a:	f7ff fea2 	bl	b8b62 <_ZN7MFRC52216PCD_ReadRegisterEh>
		if (n > *backLen) {
   b8e1e:	7833      	ldrb	r3, [r6, #0]
   b8e20:	4283      	cmp	r3, r0
		n = PCD_ReadRegister(FIFOLevelReg);						// Number of bytes in the FIFO
   b8e22:	4602      	mov	r2, r0
		if (n > *backLen) {
   b8e24:	d33e      	bcc.n	b8ea4 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x14a>
		*backLen = n;												// Number of bytes returned
   b8e26:	7030      	strb	r0, [r6, #0]
		PCD_ReadRegister(FIFODataReg, n, backData, rxAlign);		// Get received data from FIFO
   b8e28:	462b      	mov	r3, r5
   b8e2a:	2112      	movs	r1, #18
   b8e2c:	4620      	mov	r0, r4
   b8e2e:	f8cd b000 	str.w	fp, [sp]
   b8e32:	f7ff fe47 	bl	b8ac4 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh>
		_validBits = PCD_ReadRegister(ControlReg) & 0x07;	// RxLastBits[2:0] indicates the number of valid bits in the last received byte. If this value is 000b, the whole byte is valid.
   b8e36:	2118      	movs	r1, #24
   b8e38:	4620      	mov	r0, r4
   b8e3a:	f7ff fe92 	bl	b8b62 <_ZN7MFRC52216PCD_ReadRegisterEh>
   b8e3e:	f000 0707 	and.w	r7, r0, #7
		if (validBits) {
   b8e42:	f1b9 0f00 	cmp.w	r9, #0
   b8e46:	d001      	beq.n	b8e4c <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xf2>
			*validBits = _validBits;
   b8e48:	f889 7000 	strb.w	r7, [r9]
	if (errorRegValue & 0x08) { // CollErr
   b8e4c:	f018 0f08 	tst.w	r8, #8
   b8e50:	d12a      	bne.n	b8ea8 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x14e>
	if (backData && backLen && checkCRC) {
   b8e52:	b35d      	cbz	r5, b8eac <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x152>
   b8e54:	b356      	cbz	r6, b8eac <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x152>
   b8e56:	9b04      	ldr	r3, [sp, #16]
   b8e58:	b343      	cbz	r3, b8eac <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x152>
		if (*backLen == 1 && _validBits == 4) {
   b8e5a:	7832      	ldrb	r2, [r6, #0]
   b8e5c:	2a01      	cmp	r2, #1
   b8e5e:	d103      	bne.n	b8e68 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x10e>
   b8e60:	2f04      	cmp	r7, #4
   b8e62:	d125      	bne.n	b8eb0 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x156>
			return STATUS_MIFARE_NACK;
   b8e64:	2009      	movs	r0, #9
   b8e66:	e018      	b.n	b8e9a <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
		if (*backLen < 2 || _validBits != 0) {
   b8e68:	d922      	bls.n	b8eb0 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x156>
   b8e6a:	bb0f      	cbnz	r7, b8eb0 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x156>
		n = PCD_CalculateCRC(&backData[0], *backLen - 2, &controlBuffer[0]);
   b8e6c:	3a02      	subs	r2, #2
   b8e6e:	ab07      	add	r3, sp, #28
   b8e70:	b2d2      	uxtb	r2, r2
   b8e72:	4629      	mov	r1, r5
   b8e74:	4620      	mov	r0, r4
   b8e76:	f7ff fedc 	bl	b8c32 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
		if (n != STATUS_OK) {
   b8e7a:	2801      	cmp	r0, #1
   b8e7c:	d10d      	bne.n	b8e9a <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
		if ((backData[*backLen - 2] != controlBuffer[0]) || (backData[*backLen - 1] != controlBuffer[1])) {
   b8e7e:	7833      	ldrb	r3, [r6, #0]
   b8e80:	441d      	add	r5, r3
   b8e82:	f89d 301c 	ldrb.w	r3, [sp, #28]
   b8e86:	f815 2c02 	ldrb.w	r2, [r5, #-2]
   b8e8a:	429a      	cmp	r2, r3
   b8e8c:	d110      	bne.n	b8eb0 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x156>
   b8e8e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
   b8e92:	f89d 301d 	ldrb.w	r3, [sp, #29]
   b8e96:	429a      	cmp	r2, r3
   b8e98:	d10a      	bne.n	b8eb0 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x156>
} // End PCD_CommunicateWithPICC()
   b8e9a:	b009      	add	sp, #36	; 0x24
   b8e9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return STATUS_ERROR;
   b8ea0:	2002      	movs	r0, #2
   b8ea2:	e7fa      	b.n	b8e9a <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
			return STATUS_NO_ROOM;
   b8ea4:	2005      	movs	r0, #5
   b8ea6:	e7f8      	b.n	b8e9a <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
		return STATUS_COLLISION;
   b8ea8:	2003      	movs	r0, #3
   b8eaa:	e7f6      	b.n	b8e9a <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
	return STATUS_OK;
   b8eac:	2001      	movs	r0, #1
   b8eae:	e7f4      	b.n	b8e9a <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
			return STATUS_CRC_WRONG;
   b8eb0:	2008      	movs	r0, #8
   b8eb2:	e7f2      	b.n	b8e9a <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>

000b8eb4 <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>:
								 ) {
   b8eb4:	b510      	push	{r4, lr}
   b8eb6:	b086      	sub	sp, #24
	return PCD_CommunicateWithPICC(PCD_Transceive, waitIRq, sendData, sendLen, backData, backLen, validBits, rxAlign, checkCRC);
   b8eb8:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
   b8ebc:	9405      	str	r4, [sp, #20]
   b8ebe:	f89d 4028 	ldrb.w	r4, [sp, #40]	; 0x28
   b8ec2:	9404      	str	r4, [sp, #16]
   b8ec4:	9c09      	ldr	r4, [sp, #36]	; 0x24
   b8ec6:	9403      	str	r4, [sp, #12]
   b8ec8:	9c08      	ldr	r4, [sp, #32]
   b8eca:	9200      	str	r2, [sp, #0]
   b8ecc:	e9cd 3401 	strd	r3, r4, [sp, #4]
   b8ed0:	2230      	movs	r2, #48	; 0x30
   b8ed2:	460b      	mov	r3, r1
   b8ed4:	210c      	movs	r1, #12
   b8ed6:	f7ff ff40 	bl	b8d5a <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb>
} // End PCD_TransceiveData()
   b8eda:	b006      	add	sp, #24
   b8edc:	bd10      	pop	{r4, pc}

000b8ede <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_>:
							   ) {
   b8ede:	b570      	push	{r4, r5, r6, lr}
   b8ee0:	b088      	sub	sp, #32
   b8ee2:	4606      	mov	r6, r0
   b8ee4:	461c      	mov	r4, r3
   b8ee6:	f88d 1017 	strb.w	r1, [sp, #23]
	if (bufferATQA == NULL || *bufferSize < 2) {	// The ATQA response is 2 bytes long.
   b8eea:	4615      	mov	r5, r2
   b8eec:	b31a      	cbz	r2, b8f36 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x58>
   b8eee:	781b      	ldrb	r3, [r3, #0]
   b8ef0:	2b01      	cmp	r3, #1
   b8ef2:	d920      	bls.n	b8f36 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x58>
	PCD_ClearRegisterBitMask(CollReg, 0x80);			// ValuesAfterColl=1 => Bits received after collision are cleared.
   b8ef4:	2280      	movs	r2, #128	; 0x80
   b8ef6:	211c      	movs	r1, #28
   b8ef8:	f7ff fe88 	bl	b8c0c <_ZN7MFRC52224PCD_ClearRegisterBitMaskEhh>
	validBits = 7;										// For REQA and WUPA we need the short frame format - transmit only 7 bits of the last (and only) byte. TxLastBits = BitFramingReg[2..0]
   b8efc:	2307      	movs	r3, #7
   b8efe:	f88d 301f 	strb.w	r3, [sp, #31]
	status = PCD_TransceiveData(&command, 1, bufferATQA, bufferSize, &validBits);
   b8f02:	2300      	movs	r3, #0
   b8f04:	e9cd 3302 	strd	r3, r3, [sp, #8]
   b8f08:	f10d 031f 	add.w	r3, sp, #31
   b8f0c:	e9cd 4300 	strd	r4, r3, [sp]
   b8f10:	2201      	movs	r2, #1
   b8f12:	462b      	mov	r3, r5
   b8f14:	f10d 0117 	add.w	r1, sp, #23
   b8f18:	4630      	mov	r0, r6
   b8f1a:	f7ff ffcb 	bl	b8eb4 <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>
	if (status != STATUS_OK) {
   b8f1e:	2801      	cmp	r0, #1
   b8f20:	d107      	bne.n	b8f32 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x54>
	if (*bufferSize != 2 || validBits != 0) {		// ATQA must be exactly 16 bits.
   b8f22:	7823      	ldrb	r3, [r4, #0]
   b8f24:	2b02      	cmp	r3, #2
   b8f26:	d108      	bne.n	b8f3a <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x5c>
   b8f28:	f89d 301f 	ldrb.w	r3, [sp, #31]
		return STATUS_ERROR;
   b8f2c:	2b00      	cmp	r3, #0
   b8f2e:	bf18      	it	ne
   b8f30:	2002      	movne	r0, #2
} // End PICC_REQA_or_WUPA()
   b8f32:	b008      	add	sp, #32
   b8f34:	bd70      	pop	{r4, r5, r6, pc}
		return STATUS_NO_ROOM;
   b8f36:	2005      	movs	r0, #5
   b8f38:	e7fb      	b.n	b8f32 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x54>
		return STATUS_ERROR;
   b8f3a:	2002      	movs	r0, #2
   b8f3c:	e7f9      	b.n	b8f32 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x54>

000b8f3e <_ZN7MFRC52213PICC_RequestAEPhS0_>:
							) {
   b8f3e:	4613      	mov	r3, r2
	return PICC_REQA_or_WUPA(PICC_CMD_REQA, bufferATQA, bufferSize);
   b8f40:	460a      	mov	r2, r1
   b8f42:	2126      	movs	r1, #38	; 0x26
   b8f44:	f7ff bfcb 	b.w	b8ede <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_>

000b8f48 <_ZN7MFRC52221PICC_IsNewCardPresentEv>:
 * Returns true if a PICC responds to PICC_CMD_REQA.
 * Only "new" cards in state IDLE are invited. Sleeping cards in state HALT are ignored.
 * 
 * @return bool
 */
bool MFRC522::PICC_IsNewCardPresent() {
   b8f48:	b507      	push	{r0, r1, r2, lr}
	byte bufferATQA[2];
	byte bufferSize = sizeof(bufferATQA);
   b8f4a:	2302      	movs	r3, #2
	byte result = PICC_RequestA(bufferATQA, &bufferSize);
   b8f4c:	f10d 0203 	add.w	r2, sp, #3
   b8f50:	a901      	add	r1, sp, #4
	byte bufferSize = sizeof(bufferATQA);
   b8f52:	f88d 3003 	strb.w	r3, [sp, #3]
	byte result = PICC_RequestA(bufferATQA, &bufferSize);
   b8f56:	f7ff fff2 	bl	b8f3e <_ZN7MFRC52213PICC_RequestAEPhS0_>
	return (result == STATUS_OK || result == STATUS_COLLISION);
   b8f5a:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
} // End PICC_IsNewCardPresent()
   b8f5e:	1e43      	subs	r3, r0, #1
   b8f60:	4258      	negs	r0, r3
   b8f62:	4158      	adcs	r0, r3
   b8f64:	b003      	add	sp, #12
   b8f66:	f85d fb04 	ldr.w	pc, [sp], #4

000b8f6a <_ZN7MFRC52210PICC_HaltAEv>:
byte MFRC522::PICC_HaltA() {
   b8f6a:	b570      	push	{r4, r5, r6, lr}
   b8f6c:	b086      	sub	sp, #24
	buffer[0] = PICC_CMD_HLTA;
   b8f6e:	2350      	movs	r3, #80	; 0x50
   b8f70:	f88d 3014 	strb.w	r3, [sp, #20]
	buffer[1] = 0;
   b8f74:	2400      	movs	r4, #0
	result = PCD_CalculateCRC(buffer, 2, &buffer[2]);
   b8f76:	f10d 0316 	add.w	r3, sp, #22
   b8f7a:	2202      	movs	r2, #2
   b8f7c:	a905      	add	r1, sp, #20
byte MFRC522::PICC_HaltA() {
   b8f7e:	4606      	mov	r6, r0
	buffer[1] = 0;
   b8f80:	f88d 4015 	strb.w	r4, [sp, #21]
	result = PCD_CalculateCRC(buffer, 2, &buffer[2]);
   b8f84:	f7ff fe55 	bl	b8c32 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
	if (result != STATUS_OK) {
   b8f88:	2801      	cmp	r0, #1
	result = PCD_CalculateCRC(buffer, 2, &buffer[2]);
   b8f8a:	4605      	mov	r5, r0
	if (result != STATUS_OK) {
   b8f8c:	d10f      	bne.n	b8fae <_ZN7MFRC52210PICC_HaltAEv+0x44>
	result = PCD_TransceiveData(buffer, sizeof(buffer), NULL, 0);
   b8f8e:	e9cd 4402 	strd	r4, r4, [sp, #8]
   b8f92:	e9cd 4400 	strd	r4, r4, [sp]
   b8f96:	4623      	mov	r3, r4
   b8f98:	2204      	movs	r2, #4
   b8f9a:	a905      	add	r1, sp, #20
   b8f9c:	4630      	mov	r0, r6
   b8f9e:	f7ff ff89 	bl	b8eb4 <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>
	if (result == STATUS_TIMEOUT) {
   b8fa2:	2804      	cmp	r0, #4
   b8fa4:	d003      	beq.n	b8fae <_ZN7MFRC52210PICC_HaltAEv+0x44>
		return STATUS_ERROR;
   b8fa6:	2801      	cmp	r0, #1
   b8fa8:	bf14      	ite	ne
   b8faa:	4605      	movne	r5, r0
   b8fac:	2502      	moveq	r5, #2
} // End PICC_HaltA()
   b8fae:	4628      	mov	r0, r5
   b8fb0:	b006      	add	sp, #24
   b8fb2:	bd70      	pop	{r4, r5, r6, pc}

000b8fb4 <_ZN7MFRC52211MIFARE_ReadEhPhS0_>:
						) {
   b8fb4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b8fb6:	4606      	mov	r6, r0
   b8fb8:	461d      	mov	r5, r3
	if (buffer == NULL || *bufferSize < 18) {
   b8fba:	4614      	mov	r4, r2
   b8fbc:	b1ca      	cbz	r2, b8ff2 <_ZN7MFRC52211MIFARE_ReadEhPhS0_+0x3e>
   b8fbe:	781b      	ldrb	r3, [r3, #0]
   b8fc0:	2b11      	cmp	r3, #17
   b8fc2:	d916      	bls.n	b8ff2 <_ZN7MFRC52211MIFARE_ReadEhPhS0_+0x3e>
	buffer[0] = PICC_CMD_MF_READ;
   b8fc4:	2330      	movs	r3, #48	; 0x30
   b8fc6:	7013      	strb	r3, [r2, #0]
	buffer[1] = blockAddr;
   b8fc8:	7051      	strb	r1, [r2, #1]
	result = PCD_CalculateCRC(buffer, 2, &buffer[2]);
   b8fca:	1c93      	adds	r3, r2, #2
   b8fcc:	4621      	mov	r1, r4
   b8fce:	2202      	movs	r2, #2
   b8fd0:	f7ff fe2f 	bl	b8c32 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
	if (result != STATUS_OK) {
   b8fd4:	2801      	cmp	r0, #1
   b8fd6:	d10a      	bne.n	b8fee <_ZN7MFRC52211MIFARE_ReadEhPhS0_+0x3a>
	return PCD_TransceiveData(buffer, 4, buffer, bufferSize, NULL, 0, true);
   b8fd8:	2300      	movs	r3, #0
   b8fda:	e9cd 3301 	strd	r3, r3, [sp, #4]
   b8fde:	9003      	str	r0, [sp, #12]
   b8fe0:	9500      	str	r5, [sp, #0]
   b8fe2:	4623      	mov	r3, r4
   b8fe4:	2204      	movs	r2, #4
   b8fe6:	4621      	mov	r1, r4
   b8fe8:	4630      	mov	r0, r6
   b8fea:	f7ff ff63 	bl	b8eb4 <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>
} // End MIFARE_Read()
   b8fee:	b004      	add	sp, #16
   b8ff0:	bd70      	pop	{r4, r5, r6, pc}
		return STATUS_NO_ROOM;
   b8ff2:	2005      	movs	r0, #5
   b8ff4:	e7fb      	b.n	b8fee <_ZN7MFRC52211MIFARE_ReadEhPhS0_+0x3a>

000b8ff6 <_ZN7MFRC52216PCD_AuthenticateEhhPNS_10MIFARE_KeyEPNS_3UidE>:
								) {
   b8ff6:	b510      	push	{r4, lr}
   b8ff8:	b08a      	sub	sp, #40	; 0x28
   b8ffa:	9c0c      	ldr	r4, [sp, #48]	; 0x30
	sendData[1] = blockAddr;
   b8ffc:	f88d 201d 	strb.w	r2, [sp, #29]
		sendData[2+i] = key->keyByte[i];
   b9000:	681a      	ldr	r2, [r3, #0]
   b9002:	889b      	ldrh	r3, [r3, #4]
   b9004:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
		sendData[8+i] = uid->uidByte[i];
   b9008:	7863      	ldrb	r3, [r4, #1]
   b900a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   b900e:	78a3      	ldrb	r3, [r4, #2]
   b9010:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
   b9014:	78e3      	ldrb	r3, [r4, #3]
   b9016:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
   b901a:	7923      	ldrb	r3, [r4, #4]
   b901c:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
	return PCD_CommunicateWithPICC(PCD_MFAuthent, waitIRq, &sendData[0], sizeof(sendData));
   b9020:	2300      	movs	r3, #0
   b9022:	e9cd 3304 	strd	r3, r3, [sp, #16]
   b9026:	e9cd 3302 	strd	r3, r3, [sp, #8]
   b902a:	9301      	str	r3, [sp, #4]
   b902c:	230c      	movs	r3, #12
	sendData[0] = command;
   b902e:	f88d 101c 	strb.w	r1, [sp, #28]
		sendData[2+i] = key->keyByte[i];
   b9032:	f8cd 201e 	str.w	r2, [sp, #30]
	return PCD_CommunicateWithPICC(PCD_MFAuthent, waitIRq, &sendData[0], sizeof(sendData));
   b9036:	9300      	str	r3, [sp, #0]
   b9038:	2210      	movs	r2, #16
   b903a:	ab07      	add	r3, sp, #28
   b903c:	210e      	movs	r1, #14
   b903e:	f7ff fe8c 	bl	b8d5a <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb>
} // End PCD_Authenticate()
   b9042:	b00a      	add	sp, #40	; 0x28
   b9044:	bd10      	pop	{r4, pc}

000b9046 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh>:
						 ) {
   b9046:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (validBits > 80) {
   b904a:	2a50      	cmp	r2, #80	; 0x50
						 ) {
   b904c:	b08b      	sub	sp, #44	; 0x2c
   b904e:	4682      	mov	sl, r0
   b9050:	460f      	mov	r7, r1
   b9052:	4690      	mov	r8, r2
	if (validBits > 80) {
   b9054:	f200 8140 	bhi.w	b92d8 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x292>
	PCD_ClearRegisterBitMask(CollReg, 0x80);			// ValuesAfterColl=1 => Bits received after collision are cleared.
   b9058:	2280      	movs	r2, #128	; 0x80
   b905a:	211c      	movs	r1, #28
   b905c:	f7ff fdd6 	bl	b8c0c <_ZN7MFRC52224PCD_ClearRegisterBitMaskEhh>
				buffer[0] = PICC_CMD_SEL_CL1;
   b9060:	2393      	movs	r3, #147	; 0x93
   b9062:	f88d 301c 	strb.w	r3, [sp, #28]
				useCascadeTag = validBits && uid->size > 4;	// When we know that the UID has more than 4 bytes
   b9066:	f1b8 0f00 	cmp.w	r8, #0
   b906a:	f000 80bc 	beq.w	b91e6 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1a0>
   b906e:	783c      	ldrb	r4, [r7, #0]
   b9070:	2c04      	cmp	r4, #4
   b9072:	bf94      	ite	ls
   b9074:	2300      	movls	r3, #0
   b9076:	2301      	movhi	r3, #1
				useCascadeTag = validBits && uid->size > 7;	// When we know that the UID has more than 7 bytes
   b9078:	2501      	movs	r5, #1
   b907a:	2600      	movs	r6, #0
   b907c:	e00b      	b.n	b9096 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x50>
				buffer[0] = PICC_CMD_SEL_CL2;
   b907e:	2395      	movs	r3, #149	; 0x95
   b9080:	f88d 301c 	strb.w	r3, [sp, #28]
				useCascadeTag = validBits && uid->size > 7;	// When we know that the UID has more than 7 bytes
   b9084:	f1b8 0f00 	cmp.w	r8, #0
   b9088:	f000 80af 	beq.w	b91ea <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1a4>
   b908c:	783c      	ldrb	r4, [r7, #0]
   b908e:	2c07      	cmp	r4, #7
   b9090:	bf94      	ite	ls
   b9092:	2300      	movls	r3, #0
   b9094:	2301      	movhi	r3, #1
		currentLevelKnownBits = validBits - (8 * uidIndex);
   b9096:	eba8 04c6 	sub.w	r4, r8, r6, lsl #3
   b909a:	b264      	sxtb	r4, r4
		if (currentLevelKnownBits < 0) {
   b909c:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
		if (useCascadeTag) {
   b90a0:	2b00      	cmp	r3, #0
   b90a2:	f000 80a4 	beq.w	b91ee <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1a8>
			buffer[index++] = PICC_CMD_CT;
   b90a6:	2288      	movs	r2, #136	; 0x88
   b90a8:	f88d 201e 	strb.w	r2, [sp, #30]
   b90ac:	2103      	movs	r1, #3
		byte bytesToCopy = currentLevelKnownBits / 8 + (currentLevelKnownBits % 8 ? 1 : 0); // The number of bytes needed to represent the known bits for this level.
   b90ae:	f014 0207 	ands.w	r2, r4, #7
   b90b2:	bf18      	it	ne
   b90b4:	2201      	movne	r2, #1
   b90b6:	eb02 02e4 	add.w	r2, r2, r4, asr #3
		if (bytesToCopy) {
   b90ba:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
		byte bytesToCopy = currentLevelKnownBits / 8 + (currentLevelKnownBits % 8 ? 1 : 0); // The number of bytes needed to represent the known bits for this level.
   b90be:	b2e0      	uxtb	r0, r4
		if (bytesToCopy) {
   b90c0:	d01d      	beq.n	b90fe <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xb8>
			byte maxBytes = useCascadeTag ? 3 : 4; // Max 4 bytes in each Cascade Level. Only 3 left if we use the Cascade Tag
   b90c2:	2b00      	cmp	r3, #0
   b90c4:	bf14      	ite	ne
   b90c6:	f04f 0903 	movne.w	r9, #3
   b90ca:	f04f 0904 	moveq.w	r9, #4
			for (count = 0; count < bytesToCopy; count++) {
   b90ce:	f106 0c01 	add.w	ip, r6, #1
   b90d2:	4591      	cmp	r9, r2
   b90d4:	bf94      	ite	ls
   b90d6:	eb01 0e09 	addls.w	lr, r1, r9
   b90da:	eb01 0e02 	addhi.w	lr, r1, r2
   b90de:	fa57 fc8c 	uxtab	ip, r7, ip
   b90e2:	fa5f fe8e 	uxtb.w	lr, lr
				buffer[index++] = uid->uidByte[uidIndex + count];
   b90e6:	460a      	mov	r2, r1
   b90e8:	f10d 0b28 	add.w	fp, sp, #40	; 0x28
   b90ec:	3101      	adds	r1, #1
   b90ee:	b2c9      	uxtb	r1, r1
   b90f0:	445a      	add	r2, fp
   b90f2:	f81c 9b01 	ldrb.w	r9, [ip], #1
   b90f6:	f802 9c0c 	strb.w	r9, [r2, #-12]
			for (count = 0; count < bytesToCopy; count++) {
   b90fa:	4571      	cmp	r1, lr
   b90fc:	d1f3      	bne.n	b90e6 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xa0>
		if (useCascadeTag) {
   b90fe:	b10b      	cbz	r3, b9104 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xbe>
			currentLevelKnownBits += 8;
   b9100:	3008      	adds	r0, #8
   b9102:	b244      	sxtb	r4, r0
			if (currentLevelKnownBits >= 32) { // All UID bits in this Cascade Level are known. This is a SELECT.
   b9104:	2c1f      	cmp	r4, #31
   b9106:	dd74      	ble.n	b91f2 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1ac>
				buffer[1] = 0x70; // NVB - Number of Valid Bits: Seven whole bytes
   b9108:	f04f 0370 	mov.w	r3, #112	; 0x70
				buffer[6] = buffer[2] ^ buffer[3] ^ buffer[4] ^ buffer[5];
   b910c:	f89d 201f 	ldrb.w	r2, [sp, #31]
				buffer[1] = 0x70; // NVB - Number of Valid Bits: Seven whole bytes
   b9110:	f88d 301d 	strb.w	r3, [sp, #29]
				buffer[6] = buffer[2] ^ buffer[3] ^ buffer[4] ^ buffer[5];
   b9114:	f89d 301e 	ldrb.w	r3, [sp, #30]
   b9118:	4053      	eors	r3, r2
   b911a:	f89d 2020 	ldrb.w	r2, [sp, #32]
   b911e:	4053      	eors	r3, r2
   b9120:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
   b9124:	4053      	eors	r3, r2
   b9126:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
				result = PCD_CalculateCRC(buffer, 7, &buffer[7]);
   b912a:	2207      	movs	r2, #7
   b912c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
   b9130:	a907      	add	r1, sp, #28
   b9132:	4650      	mov	r0, sl
   b9134:	f7ff fd7d 	bl	b8c32 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
				if (result != STATUS_OK) {
   b9138:	2801      	cmp	r0, #1
				result = PCD_CalculateCRC(buffer, 7, &buffer[7]);
   b913a:	4681      	mov	r9, r0
				if (result != STATUS_OK) {
   b913c:	f040 80c8 	bne.w	b92d0 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28a>
				txLastBits		= 0; // 0 => All 8 bits are valid.
   b9140:	2300      	movs	r3, #0
   b9142:	f88d 301a 	strb.w	r3, [sp, #26]
				responseLength	= 3;
   b9146:	2303      	movs	r3, #3
   b9148:	f88d 301b 	strb.w	r3, [sp, #27]
   b914c:	9404      	str	r4, [sp, #16]
				responseBuffer	= &buffer[6];
   b914e:	f10d 0b22 	add.w	fp, sp, #34	; 0x22
				bufferUsed		= 9;
   b9152:	f04f 0909 	mov.w	r9, #9
			rxAlign = txLastBits;											// Having a seperate variable is overkill. But it makes the next line easier to read.
   b9156:	f89d 301a 	ldrb.w	r3, [sp, #26]
			PCD_WriteRegister(BitFramingReg, (rxAlign << 4) + txLastBits);	// RxAlign = BitFramingReg[6..4]. TxLastBits = BitFramingReg[2..0]
   b915a:	9305      	str	r3, [sp, #20]
   b915c:	eb03 1203 	add.w	r2, r3, r3, lsl #4
   b9160:	b2d2      	uxtb	r2, r2
   b9162:	211a      	movs	r1, #26
   b9164:	4650      	mov	r0, sl
   b9166:	f7ff fd2e 	bl	b8bc6 <_ZN7MFRC52217PCD_WriteRegisterEhh>
			result = PCD_TransceiveData(buffer, bufferUsed, responseBuffer, &responseLength, &txLastBits, rxAlign);			
   b916a:	9b05      	ldr	r3, [sp, #20]
   b916c:	9302      	str	r3, [sp, #8]
   b916e:	f10d 031a 	add.w	r3, sp, #26
   b9172:	2200      	movs	r2, #0
   b9174:	9301      	str	r3, [sp, #4]
   b9176:	f10d 031b 	add.w	r3, sp, #27
   b917a:	9203      	str	r2, [sp, #12]
   b917c:	9300      	str	r3, [sp, #0]
   b917e:	464a      	mov	r2, r9
   b9180:	465b      	mov	r3, fp
   b9182:	a907      	add	r1, sp, #28
   b9184:	4650      	mov	r0, sl
   b9186:	f7ff fe95 	bl	b8eb4 <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>
			if (result == STATUS_COLLISION) { // More than one PICC in the field => collision.
   b918a:	2803      	cmp	r0, #3
			result = PCD_TransceiveData(buffer, bufferUsed, responseBuffer, &responseLength, &txLastBits, rxAlign);			
   b918c:	4681      	mov	r9, r0
			if (result == STATUS_COLLISION) { // More than one PICC in the field => collision.
   b918e:	d14c      	bne.n	b922a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1e4>
				result = PCD_ReadRegister(CollReg); // CollReg[7..0] bits are: ValuesAfterColl reserved CollPosNotValid CollPos[4:0]
   b9190:	211c      	movs	r1, #28
   b9192:	4650      	mov	r0, sl
   b9194:	f7ff fce5 	bl	b8b62 <_ZN7MFRC52216PCD_ReadRegisterEh>
				if (result & 0x20) { // CollPosNotValid
   b9198:	0681      	lsls	r1, r0, #26
   b919a:	f100 8099 	bmi.w	b92d0 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28a>
					collisionPos = 32;
   b919e:	f010 001f 	ands.w	r0, r0, #31
   b91a2:	bf08      	it	eq
   b91a4:	2020      	moveq	r0, #32
				if (collisionPos <= currentLevelKnownBits) { // No progress - should not happen 
   b91a6:	42a0      	cmp	r0, r4
   b91a8:	f340 8087 	ble.w	b92ba <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x274>
				count			= (currentLevelKnownBits - 1) % 8; // The bit to modify
   b91ac:	1e43      	subs	r3, r0, #1
				index			= 1 + (currentLevelKnownBits / 8) + (count ? 1 : 0); // First byte is index 0.
   b91ae:	f003 0207 	and.w	r2, r3, #7
				currentLevelKnownBits = collisionPos;
   b91b2:	b244      	sxtb	r4, r0
				index			= 1 + (currentLevelKnownBits / 8) + (count ? 1 : 0); // First byte is index 0.
   b91b4:	f013 0307 	ands.w	r3, r3, #7
   b91b8:	ea4f 00d0 	mov.w	r0, r0, lsr #3
   b91bc:	bf18      	it	ne
   b91be:	2301      	movne	r3, #1
   b91c0:	3001      	adds	r0, #1
				buffer[index]	|= (1 << count); 
   b91c2:	4418      	add	r0, r3
   b91c4:	ab0a      	add	r3, sp, #40	; 0x28
   b91c6:	4418      	add	r0, r3
   b91c8:	2301      	movs	r3, #1
   b91ca:	fa03 f202 	lsl.w	r2, r3, r2
   b91ce:	f810 3c0c 	ldrb.w	r3, [r0, #-12]
   b91d2:	4313      	orrs	r3, r2
   b91d4:	f800 3c0c 	strb.w	r3, [r0, #-12]
		while ( ! selectDone) {
   b91d8:	e794      	b.n	b9104 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xbe>
				buffer[0] = PICC_CMD_SEL_CL3;
   b91da:	2397      	movs	r3, #151	; 0x97
   b91dc:	f88d 301c 	strb.w	r3, [sp, #28]
				uidIndex = 6;
   b91e0:	2606      	movs	r6, #6
				useCascadeTag = false;						// Never used in CL3.
   b91e2:	4623      	mov	r3, r4
				break;
   b91e4:	e757      	b.n	b9096 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x50>
				useCascadeTag = validBits && uid->size > 4;	// When we know that the UID has more than 4 bytes
   b91e6:	4643      	mov	r3, r8
   b91e8:	e746      	b.n	b9078 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x32>
				useCascadeTag = validBits && uid->size > 7;	// When we know that the UID has more than 7 bytes
   b91ea:	4643      	mov	r3, r8
   b91ec:	e753      	b.n	b9096 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x50>
		index = 2; // destination index in buffer[]
   b91ee:	2102      	movs	r1, #2
   b91f0:	e75d      	b.n	b90ae <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x68>
				count			= currentLevelKnownBits / 8;	// Number of whole bytes in the UID part.
   b91f2:	10e3      	asrs	r3, r4, #3
				index			= 2 + count;					// Number of whole bytes: SEL + NVB + UIDs
   b91f4:	3302      	adds	r3, #2
   b91f6:	b2db      	uxtb	r3, r3
				txLastBits		= currentLevelKnownBits % 8;
   b91f8:	f004 0207 	and.w	r2, r4, #7
				bufferUsed		= index + (txLastBits ? 1 : 0);
   b91fc:	f014 0907 	ands.w	r9, r4, #7
				txLastBits		= currentLevelKnownBits % 8;
   b9200:	f88d 201a 	strb.w	r2, [sp, #26]
				buffer[1]		= (index << 4) + txLastBits;	// NVB - Number of Valid Bits
   b9204:	eb02 1203 	add.w	r2, r2, r3, lsl #4
   b9208:	f88d 201d 	strb.w	r2, [sp, #29]
				bufferUsed		= index + (txLastBits ? 1 : 0);
   b920c:	bf18      	it	ne
   b920e:	f04f 0901 	movne.w	r9, #1
				responseBuffer	= &buffer[index];
   b9212:	aa07      	add	r2, sp, #28
				bufferUsed		= index + (txLastBits ? 1 : 0);
   b9214:	4499      	add	r9, r3
				responseBuffer	= &buffer[index];
   b9216:	eb02 0b03 	add.w	fp, r2, r3
				responseLength	= sizeof(buffer) - index;
   b921a:	f1c3 0309 	rsb	r3, r3, #9
				bufferUsed		= index + (txLastBits ? 1 : 0);
   b921e:	fa5f f989 	uxtb.w	r9, r9
				responseLength	= sizeof(buffer) - index;
   b9222:	f88d 301b 	strb.w	r3, [sp, #27]
   b9226:	9404      	str	r4, [sp, #16]
   b9228:	e795      	b.n	b9156 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x110>
			else if (result != STATUS_OK) {
   b922a:	2801      	cmp	r0, #1
   b922c:	d150      	bne.n	b92d0 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28a>
				if (currentLevelKnownBits >= 32) { // This was a SELECT.
   b922e:	9b04      	ldr	r3, [sp, #16]
   b9230:	2b1f      	cmp	r3, #31
					currentLevelKnownBits = 32;
   b9232:	f04f 0420 	mov.w	r4, #32
				if (currentLevelKnownBits >= 32) { // This was a SELECT.
   b9236:	f77f af67 	ble.w	b9108 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xc2>
		index			= (buffer[2] == PICC_CMD_CT) ? 3 : 2; // source index in buffer[]
   b923a:	f89d 301e 	ldrb.w	r3, [sp, #30]
   b923e:	2b88      	cmp	r3, #136	; 0x88
   b9240:	d13e      	bne.n	b92c0 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x27a>
   b9242:	2303      	movs	r3, #3
		bytesToCopy		= (buffer[2] == PICC_CMD_CT) ? 3 : 4;
   b9244:	461a      	mov	r2, r3
		for (count = 0; count < bytesToCopy; count++) {
   b9246:	3601      	adds	r6, #1
   b9248:	441a      	add	r2, r3
   b924a:	fa57 f686 	uxtab	r6, r7, r6
   b924e:	b2d2      	uxtb	r2, r2
			uid->uidByte[uidIndex + count] = buffer[index++];
   b9250:	4619      	mov	r1, r3
   b9252:	a80a      	add	r0, sp, #40	; 0x28
   b9254:	3301      	adds	r3, #1
   b9256:	4401      	add	r1, r0
   b9258:	b2db      	uxtb	r3, r3
   b925a:	f811 1c0c 	ldrb.w	r1, [r1, #-12]
   b925e:	f806 1b01 	strb.w	r1, [r6], #1
		for (count = 0; count < bytesToCopy; count++) {
   b9262:	4293      	cmp	r3, r2
   b9264:	d1f4      	bne.n	b9250 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x20a>
		if (responseLength != 3 || txLastBits != 0) {		// SAK must be exactly 24 bits (1 byte + CRC_A).
   b9266:	f89d 601b 	ldrb.w	r6, [sp, #27]
   b926a:	2e03      	cmp	r6, #3
   b926c:	d137      	bne.n	b92de <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x298>
   b926e:	f89d 401a 	ldrb.w	r4, [sp, #26]
   b9272:	bba4      	cbnz	r4, b92de <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x298>
		result = PCD_CalculateCRC(responseBuffer, 1, &buffer[2]);
   b9274:	f10d 031e 	add.w	r3, sp, #30
   b9278:	2201      	movs	r2, #1
   b927a:	4659      	mov	r1, fp
   b927c:	4650      	mov	r0, sl
   b927e:	f7ff fcd8 	bl	b8c32 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
		if (result != STATUS_OK) {
   b9282:	2801      	cmp	r0, #1
		result = PCD_CalculateCRC(responseBuffer, 1, &buffer[2]);
   b9284:	4681      	mov	r9, r0
		if (result != STATUS_OK) {
   b9286:	d123      	bne.n	b92d0 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28a>
		if ((buffer[2] != responseBuffer[1]) || (buffer[3] != responseBuffer[2])) {
   b9288:	f89d 201e 	ldrb.w	r2, [sp, #30]
   b928c:	f89b 3001 	ldrb.w	r3, [fp, #1]
   b9290:	429a      	cmp	r2, r3
   b9292:	d127      	bne.n	b92e4 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x29e>
   b9294:	f89d 201f 	ldrb.w	r2, [sp, #31]
   b9298:	f89b 3002 	ldrb.w	r3, [fp, #2]
   b929c:	429a      	cmp	r2, r3
   b929e:	d121      	bne.n	b92e4 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x29e>
		if (responseBuffer[0] & 0x04) { // Cascade bit set - UID not complete yes
   b92a0:	f89b 3000 	ldrb.w	r3, [fp]
   b92a4:	075a      	lsls	r2, r3, #29
   b92a6:	d50e      	bpl.n	b92c6 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x280>
			cascadeLevel++;
   b92a8:	3501      	adds	r5, #1
   b92aa:	b2ed      	uxtb	r5, r5
		switch (cascadeLevel) {
   b92ac:	2d03      	cmp	r5, #3
   b92ae:	d094      	beq.n	b91da <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x194>
   b92b0:	2d04      	cmp	r5, #4
   b92b2:	d002      	beq.n	b92ba <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x274>
   b92b4:	2d02      	cmp	r5, #2
   b92b6:	f43f aee2 	beq.w	b907e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x38>
   b92ba:	f04f 0906 	mov.w	r9, #6
   b92be:	e007      	b.n	b92d0 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28a>
		index			= (buffer[2] == PICC_CMD_CT) ? 3 : 2; // source index in buffer[]
   b92c0:	2302      	movs	r3, #2
		bytesToCopy		= (buffer[2] == PICC_CMD_CT) ? 3 : 4;
   b92c2:	2204      	movs	r2, #4
   b92c4:	e7bf      	b.n	b9246 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x200>
	uid->size = 3 * cascadeLevel + 1;
   b92c6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   b92ca:	3501      	adds	r5, #1
			uid->sak = responseBuffer[0];
   b92cc:	72fb      	strb	r3, [r7, #11]
	uid->size = 3 * cascadeLevel + 1;
   b92ce:	703d      	strb	r5, [r7, #0]
} // End PICC_Select()
   b92d0:	4648      	mov	r0, r9
   b92d2:	b00b      	add	sp, #44	; 0x2c
   b92d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return STATUS_INVALID;
   b92d8:	f04f 0907 	mov.w	r9, #7
   b92dc:	e7f8      	b.n	b92d0 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28a>
			return STATUS_ERROR;
   b92de:	f04f 0902 	mov.w	r9, #2
   b92e2:	e7f5      	b.n	b92d0 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28a>
			return STATUS_CRC_WRONG;
   b92e4:	f04f 0908 	mov.w	r9, #8
   b92e8:	e7f2      	b.n	b92d0 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28a>

000b92ea <_ZN7MFRC52219PICC_ReadCardSerialEv>:
 * Remember to call PICC_IsNewCardPresent(), PICC_RequestA() or PICC_WakeupA() first.
 * The read UID is available in the class variable uid.
 * 
 * @return bool
 */
bool MFRC522::PICC_ReadCardSerial() {
   b92ea:	b508      	push	{r3, lr}
   b92ec:	4601      	mov	r1, r0
	byte result = PICC_Select(&uid);
   b92ee:	2200      	movs	r2, #0
   b92f0:	f7ff fea9 	bl	b9046 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh>
	return (result == STATUS_OK);
} // End PICC_ReadCardSerial()
   b92f4:	1e43      	subs	r3, r0, #1
   b92f6:	4258      	negs	r0, r3
   b92f8:	4158      	adcs	r0, r3
   b92fa:	bd08      	pop	{r3, pc}

000b92fc <_ZN10UltrasonicC1Ei>:

#endif

Ultrasonic::Ultrasonic(int pin)
{
	_pin = pin;
   b92fc:	6001      	str	r1, [r0, #0]
}
   b92fe:	4770      	bx	lr

000b9300 <_ZN10Ultrasonic20MeasureInCentimetersEv>:
/*The measured distance from the range 0 to 400 Centimeters*/
long Ultrasonic::MeasureInCentimeters(void)
{
   b9300:	b510      	push	{r4, lr}
   b9302:	4604      	mov	r4, r0
	pinMode(_pin, OUTPUT);
   b9304:	2101      	movs	r1, #1
   b9306:	8800      	ldrh	r0, [r0, #0]
   b9308:	f001 ffa6 	bl	bb258 <pinMode>
	digitalWrite(_pin, LOW);
   b930c:	8820      	ldrh	r0, [r4, #0]
   b930e:	2100      	movs	r1, #0
   b9310:	f001 ffb3 	bl	bb27a <digitalWrite>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   b9314:	2002      	movs	r0, #2
   b9316:	f000 fe7f 	bl	ba018 <HAL_Delay_Microseconds>
	delayMicroseconds(2);
	digitalWrite(_pin, HIGH);
   b931a:	8820      	ldrh	r0, [r4, #0]
   b931c:	2101      	movs	r1, #1
   b931e:	f001 ffac 	bl	bb27a <digitalWrite>
   b9322:	2005      	movs	r0, #5
   b9324:	f000 fe78 	bl	ba018 <HAL_Delay_Microseconds>
	delayMicroseconds(5);
	digitalWrite(_pin,LOW);
   b9328:	8820      	ldrh	r0, [r4, #0]
   b932a:	2100      	movs	r1, #0
   b932c:	f001 ffa5 	bl	bb27a <digitalWrite>
	pinMode(_pin,INPUT);
   b9330:	8820      	ldrh	r0, [r4, #0]
   b9332:	2100      	movs	r1, #0
   b9334:	f001 ff90 	bl	bb258 <pinMode>
	long duration;
	duration = pulseIn(_pin,HIGH);
   b9338:	8820      	ldrh	r0, [r4, #0]
   b933a:	2101      	movs	r1, #1
   b933c:	f001 fffc 	bl	bb338 <pulseIn>
	long RangeInCentimeters;
	RangeInCentimeters = duration/29/2;
	return RangeInCentimeters;
}
   b9340:	233a      	movs	r3, #58	; 0x3a
   b9342:	fb90 f0f3 	sdiv	r0, r0, r3
   b9346:	bd10      	pop	{r4, pc}

000b9348 <_ZN3DHTC1Ehhh>:
 * modified for Spark Core by RussGrue
 * */

#include "Adafruit_DHT_Particle.h"

DHT::DHT(uint8_t pin, uint8_t type, uint8_t count) {
   b9348:	b510      	push	{r4, lr}
	_pin = pin;
	_type = type;
	_count = count;
   b934a:	7203      	strb	r3, [r0, #8]
	firstreading = true;
   b934c:	2301      	movs	r3, #1
	_pin = pin;
   b934e:	7181      	strb	r1, [r0, #6]
	_type = type;
   b9350:	71c2      	strb	r2, [r0, #7]
	firstreading = true;
   b9352:	7403      	strb	r3, [r0, #16]
}
   b9354:	bd10      	pop	{r4, pc}

000b9356 <_ZN3DHT5beginEv>:

void DHT::begin(void) {
   b9356:	b510      	push	{r4, lr}
   b9358:	4604      	mov	r4, r0
// set up the pins!
	pinMode(_pin, INPUT);
   b935a:	2100      	movs	r1, #0
   b935c:	7980      	ldrb	r0, [r0, #6]
   b935e:	f001 ff7b 	bl	bb258 <pinMode>
	digitalWrite(_pin, HIGH);
   b9362:	79a0      	ldrb	r0, [r4, #6]
   b9364:	2101      	movs	r1, #1
   b9366:	f001 ff88 	bl	bb27a <digitalWrite>
	_lastreadtime = 0;
   b936a:	2300      	movs	r3, #0
   b936c:	60e3      	str	r3, [r4, #12]
}
   b936e:	bd10      	pop	{r4, pc}

000b9370 <_ZN3DHT4readEv>:
	double Td = (b * tC) / (a - tC);
	return Td;
}


boolean DHT::read(void) {
   b9370:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b9374:	4604      	mov	r4, r0
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b9376:	f000 fe57 	bl	ba028 <HAL_Timer_Get_Milli_Seconds>
	unsigned long currenttime;

// Check if sensor was read less than two seconds ago and return early
// to use last reading.
	currenttime = millis();
	if (currenttime < _lastreadtime) {
   b937a:	68e3      	ldr	r3, [r4, #12]
   b937c:	4283      	cmp	r3, r0
// ie there was a rollover
		_lastreadtime = 0;
   b937e:	bf84      	itt	hi
   b9380:	2300      	movhi	r3, #0
   b9382:	60e3      	strhi	r3, [r4, #12]
	}
	if (!firstreading && ((currenttime - _lastreadtime) < 2000)) {
   b9384:	7c23      	ldrb	r3, [r4, #16]
   b9386:	b923      	cbnz	r3, b9392 <_ZN3DHT4readEv+0x22>
   b9388:	68e3      	ldr	r3, [r4, #12]
   b938a:	1ac0      	subs	r0, r0, r3
   b938c:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
   b9390:	d367      	bcc.n	b9462 <_ZN3DHT4readEv+0xf2>
		return true; // return last correct measurement
//		delay(2000 - (currenttime - _lastreadtime));
	}
	firstreading = false;
   b9392:	2500      	movs	r5, #0
   b9394:	7425      	strb	r5, [r4, #16]
   b9396:	f000 fe47 	bl	ba028 <HAL_Timer_Get_Milli_Seconds>
	_lastreadtime = millis();

	data[0] = data[1] = data[2] = data[3] = data[4] = 0;
  
// pull the pin high and wait 250 milliseconds
	digitalWrite(_pin, HIGH);
   b939a:	2101      	movs	r1, #1
	_lastreadtime = millis();
   b939c:	60e0      	str	r0, [r4, #12]
	data[0] = data[1] = data[2] = data[3] = data[4] = 0;
   b939e:	6025      	str	r5, [r4, #0]
	digitalWrite(_pin, HIGH);
   b93a0:	79a0      	ldrb	r0, [r4, #6]
	data[0] = data[1] = data[2] = data[3] = data[4] = 0;
   b93a2:	7125      	strb	r5, [r4, #4]
	digitalWrite(_pin, HIGH);
   b93a4:	f001 ff69 	bl	bb27a <digitalWrite>
	delay(250);
   b93a8:	20fa      	movs	r0, #250	; 0xfa
   b93aa:	f001 fb8a 	bl	baac2 <delay>

// now pull it low for ~20 milliseconds
	pinMode(_pin, OUTPUT);
   b93ae:	79a0      	ldrb	r0, [r4, #6]
   b93b0:	2101      	movs	r1, #1
   b93b2:	f001 ff51 	bl	bb258 <pinMode>
	digitalWrite(_pin, LOW);
   b93b6:	4629      	mov	r1, r5
   b93b8:	79a0      	ldrb	r0, [r4, #6]
   b93ba:	f001 ff5e 	bl	bb27a <digitalWrite>
	delay(20);
   b93be:	2014      	movs	r0, #20
   b93c0:	f001 fb7f 	bl	baac2 <delay>
	noInterrupts();
   b93c4:	f001 fd38 	bl	bae38 <_Z12noInterruptsv>
	digitalWrite(_pin, HIGH);
   b93c8:	2101      	movs	r1, #1
   b93ca:	79a0      	ldrb	r0, [r4, #6]
   b93cc:	f001 ff55 	bl	bb27a <digitalWrite>
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   b93d0:	2028      	movs	r0, #40	; 0x28
   b93d2:	f000 fe21 	bl	ba018 <HAL_Delay_Microseconds>
	delayMicroseconds(40);
	pinMode(_pin, INPUT);
   b93d6:	79a0      	ldrb	r0, [r4, #6]
   b93d8:	4629      	mov	r1, r5
   b93da:	f001 ff3d 	bl	bb258 <pinMode>
	uint8_t j = 0, i;
   b93de:	462e      	mov	r6, r5
	uint8_t laststate = HIGH;
   b93e0:	2701      	movs	r7, #1
   b93e2:	f04f 0800 	mov.w	r8, #0

// read in timings
	for ( i=0; i< MAXTIMINGS; i++) {
		counter = 0;
		while (digitalRead(_pin) == laststate) {
   b93e6:	79a0      	ldrb	r0, [r4, #6]
   b93e8:	f001 ff60 	bl	bb2ac <digitalRead>
   b93ec:	42b8      	cmp	r0, r7
   b93ee:	fa5f f988 	uxtb.w	r9, r8
   b93f2:	d108      	bne.n	b9406 <_ZN3DHT4readEv+0x96>
   b93f4:	2001      	movs	r0, #1
			counter++;
			delayMicroseconds(1);
			if (counter == 255) {
   b93f6:	f108 0801 	add.w	r8, r8, #1
   b93fa:	f000 fe0d 	bl	ba018 <HAL_Delay_Microseconds>
   b93fe:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   b9402:	d1f0      	bne.n	b93e6 <_ZN3DHT4readEv+0x76>
   b9404:	46c1      	mov	r9, r8
				break;
			}
		}
		laststate = digitalRead(_pin);
   b9406:	79a0      	ldrb	r0, [r4, #6]
   b9408:	f001 ff50 	bl	bb2ac <digitalRead>

		if (counter == 255) break;
   b940c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
		laststate = digitalRead(_pin);
   b9410:	b2c7      	uxtb	r7, r0
		if (counter == 255) break;
   b9412:	d014      	beq.n	b943e <_ZN3DHT4readEv+0xce>

// ignore first 3 transitions
		if ((i >= 4) && (i%2 == 0)) {
   b9414:	2d03      	cmp	r5, #3
   b9416:	d90e      	bls.n	b9436 <_ZN3DHT4readEv+0xc6>
   b9418:	07ea      	lsls	r2, r5, #31
   b941a:	d40c      	bmi.n	b9436 <_ZN3DHT4readEv+0xc6>
// shove each bit into the storage bytes
			data[j/8] <<= 1;
   b941c:	08f2      	lsrs	r2, r6, #3
			if (counter > _count)
				data[j/8] |= 1;
			j++;
   b941e:	3601      	adds	r6, #1
			data[j/8] <<= 1;
   b9420:	5ca3      	ldrb	r3, [r4, r2]
   b9422:	005b      	lsls	r3, r3, #1
   b9424:	b2db      	uxtb	r3, r3
   b9426:	54a3      	strb	r3, [r4, r2]
			if (counter > _count)
   b9428:	7a21      	ldrb	r1, [r4, #8]
   b942a:	4549      	cmp	r1, r9
				data[j/8] |= 1;
   b942c:	bf3c      	itt	cc
   b942e:	f043 0301 	orrcc.w	r3, r3, #1
   b9432:	54a3      	strbcc	r3, [r4, r2]
			j++;
   b9434:	b2f6      	uxtb	r6, r6
	for ( i=0; i< MAXTIMINGS; i++) {
   b9436:	3501      	adds	r5, #1
   b9438:	b2ed      	uxtb	r5, r5
   b943a:	2d55      	cmp	r5, #85	; 0x55
   b943c:	d1d1      	bne.n	b93e2 <_ZN3DHT4readEv+0x72>
		}

	}

	interrupts();
   b943e:	f001 fcfd 	bl	bae3c <_Z10interruptsv>
	Serial.print(data[4], HEX); Serial.print(" =? ");
	Serial.println(data[0] + data[1] + data[2] + data[3], HEX);
*/

// check we read 40 bits and that the checksum matches
	if ((j >= 40) && 
   b9442:	2e27      	cmp	r6, #39	; 0x27
   b9444:	d90f      	bls.n	b9466 <_ZN3DHT4readEv+0xf6>
	   (data[4] == ((data[0] + data[1] + data[2] + data[3]) & 0xFF)) ) {
   b9446:	7863      	ldrb	r3, [r4, #1]
   b9448:	7820      	ldrb	r0, [r4, #0]
   b944a:	4418      	add	r0, r3
   b944c:	78a3      	ldrb	r3, [r4, #2]
   b944e:	4418      	add	r0, r3
   b9450:	78e3      	ldrb	r3, [r4, #3]
   b9452:	4418      	add	r0, r3
   b9454:	7923      	ldrb	r3, [r4, #4]
   b9456:	b2c0      	uxtb	r0, r0
	if ((j >= 40) && 
   b9458:	1ac3      	subs	r3, r0, r3
   b945a:	4258      	negs	r0, r3
   b945c:	4158      	adcs	r0, r3
		return true;
	}
 
	return false;

}
   b945e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return true; // return last correct measurement
   b9462:	2001      	movs	r0, #1
   b9464:	e7fb      	b.n	b945e <_ZN3DHT4readEv+0xee>
	return false;
   b9466:	2000      	movs	r0, #0
   b9468:	e7f9      	b.n	b945e <_ZN3DHT4readEv+0xee>
	...

000b946c <_ZN3DHT15readTemperatureEv>:
float DHT::readTemperature() {
   b946c:	b510      	push	{r4, lr}
   b946e:	4604      	mov	r4, r0
	if (read()) {
   b9470:	f7ff ff7e 	bl	b9370 <_ZN3DHT4readEv>
   b9474:	b320      	cbz	r0, b94c0 <_ZN3DHT15readTemperatureEv+0x54>
		switch (_type) {
   b9476:	79e3      	ldrb	r3, [r4, #7]
   b9478:	2b0b      	cmp	r3, #11
   b947a:	d01b      	beq.n	b94b4 <_ZN3DHT15readTemperatureEv+0x48>
   b947c:	3b15      	subs	r3, #21
   b947e:	2b01      	cmp	r3, #1
   b9480:	d81e      	bhi.n	b94c0 <_ZN3DHT15readTemperatureEv+0x54>
   b9482:	78a3      	ldrb	r3, [r4, #2]
				f += data[3];
   b9484:	eddf 6a10 	vldr	s13, [pc, #64]	; b94c8 <_ZN3DHT15readTemperatureEv+0x5c>
				f = data[2] & 0x7F;
   b9488:	f003 027f 	and.w	r2, r3, #127	; 0x7f
   b948c:	ee07 2a10 	vmov	s14, r2
				f += data[3];
   b9490:	78e2      	ldrb	r2, [r4, #3]
   b9492:	ee07 2a90 	vmov	s15, r2
				f = data[2] & 0x7F;
   b9496:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
				f += data[3];
   b949a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
				if (data[2] & 0x80)
   b949e:	061b      	lsls	r3, r3, #24
				f += data[3];
   b94a0:	eee7 7a26 	vfma.f32	s15, s14, s13
				f /= 10;
   b94a4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
   b94a8:	ee87 0a87 	vdiv.f32	s0, s15, s14
				if (data[2] & 0x80)
   b94ac:	d507      	bpl.n	b94be <_ZN3DHT15readTemperatureEv+0x52>
					f *= -1;
   b94ae:	eeb1 0a40 	vneg.f32	s0, s0
   b94b2:	e004      	b.n	b94be <_ZN3DHT15readTemperatureEv+0x52>
				f = data[2];
   b94b4:	78a3      	ldrb	r3, [r4, #2]
   b94b6:	ee00 3a10 	vmov	s0, r3
   b94ba:	eeb8 0a40 	vcvt.f32.u32	s0, s0
}
   b94be:	bd10      	pop	{r4, pc}
		switch (_type) {
   b94c0:	ed9f 0a02 	vldr	s0, [pc, #8]	; b94cc <_ZN3DHT15readTemperatureEv+0x60>
   b94c4:	e7fb      	b.n	b94be <_ZN3DHT15readTemperatureEv+0x52>
   b94c6:	bf00      	nop
   b94c8:	43800000 	.word	0x43800000
   b94cc:	7fc00000 	.word	0x7fc00000

000b94d0 <_ZN3DHT14getTempCelciusEv>:
	return readTemperature();
   b94d0:	f7ff bfcc 	b.w	b946c <_ZN3DHT15readTemperatureEv>

000b94d4 <_ZN16Adafruit_SSD1306D1Ev>:
}

/*!
    @brief  Destructor for Adafruit_SSD1306 object.
*/
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   b94d4:	b510      	push	{r4, lr}
   b94d6:	4b04      	ldr	r3, [pc, #16]	; (b94e8 <_ZN16Adafruit_SSD1306D1Ev+0x14>)
   b94d8:	6003      	str	r3, [r0, #0]
   b94da:	4604      	mov	r4, r0
  if(buffer) {
   b94dc:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b94de:	b108      	cbz	r0, b94e4 <_ZN16Adafruit_SSD1306D1Ev+0x10>
    free(buffer);
   b94e0:	f000 ff96 	bl	ba410 <free>
    buffer = NULL;
  }
}
   b94e4:	4620      	mov	r0, r4
   b94e6:	bd10      	pop	{r4, pc}
   b94e8:	000bd2b0 	.word	0x000bd2b0

000b94ec <_ZN16Adafruit_SSD1306D0Ev>:
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   b94ec:	b510      	push	{r4, lr}
   b94ee:	4604      	mov	r4, r0
}
   b94f0:	f7ff fff0 	bl	b94d4 <_ZN16Adafruit_SSD1306D1Ev>
   b94f4:	4620      	mov	r0, r4
   b94f6:	2150      	movs	r1, #80	; 0x50
   b94f8:	f7fb faa5 	bl	b4a46 <_ZdlPvj>
   b94fc:	4620      	mov	r0, r4
   b94fe:	bd10      	pop	{r4, pc}

000b9500 <_ZN16Adafruit_SSD13069drawPixelEsst>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   b9500:	2900      	cmp	r1, #0
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   b9502:	b510      	push	{r4, lr}
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   b9504:	db4b      	blt.n	b959e <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b9506:	f9b0 400c 	ldrsh.w	r4, [r0, #12]
   b950a:	428c      	cmp	r4, r1
   b950c:	dd47      	ble.n	b959e <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b950e:	2a00      	cmp	r2, #0
   b9510:	db45      	blt.n	b959e <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b9512:	f9b0 400e 	ldrsh.w	r4, [r0, #14]
   b9516:	4294      	cmp	r4, r2
   b9518:	dd41      	ble.n	b959e <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
  /*!
    @brief      Get rotation setting for display
    @returns    0 thru 3 corresponding to 4 cardinal rotations
  */
  /************************************************************************/
  uint8_t getRotation(void) const { return rotation; }
   b951a:	7e84      	ldrb	r4, [r0, #26]
    // Pixel is in-bounds. Rotate coordinates if needed.
    switch(getRotation()) {
   b951c:	2c02      	cmp	r4, #2
   b951e:	d01f      	beq.n	b9560 <_ZN16Adafruit_SSD13069drawPixelEsst+0x60>
   b9520:	2c03      	cmp	r4, #3
   b9522:	d026      	beq.n	b9572 <_ZN16Adafruit_SSD13069drawPixelEsst+0x72>
   b9524:	2c01      	cmp	r4, #1
   b9526:	d104      	bne.n	b9532 <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case 1:
      ssd1306_swap(x, y);
      x = WIDTH - x - 1;
   b9528:	8904      	ldrh	r4, [r0, #8]
   b952a:	43d2      	mvns	r2, r2
   b952c:	4414      	add	r4, r2
      break;
   b952e:	460a      	mov	r2, r1
      x = WIDTH - x - 1;
   b9530:	b221      	sxth	r1, r4
     case 3:
      ssd1306_swap(x, y);
      y = HEIGHT - y - 1;
      break;
    }
    switch(color) {
   b9532:	2b01      	cmp	r3, #1
   b9534:	d023      	beq.n	b957e <_ZN16Adafruit_SSD13069drawPixelEsst+0x7e>
   b9536:	2b02      	cmp	r3, #2
   b9538:	d032      	beq.n	b95a0 <_ZN16Adafruit_SSD13069drawPixelEsst+0xa0>
   b953a:	bb83      	cbnz	r3, b959e <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
     case BLACK:   buffer[x + (y/8)*WIDTH] &= ~(1 << (y&7)); break;
   b953c:	2a00      	cmp	r2, #0
   b953e:	4613      	mov	r3, r2
   b9540:	8904      	ldrh	r4, [r0, #8]
   b9542:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b9544:	bfb8      	it	lt
   b9546:	1dd3      	addlt	r3, r2, #7
   b9548:	10db      	asrs	r3, r3, #3
   b954a:	fb13 1104 	smlabb	r1, r3, r4, r1
   b954e:	f002 0207 	and.w	r2, r2, #7
   b9552:	2301      	movs	r3, #1
   b9554:	4093      	lsls	r3, r2
   b9556:	5c42      	ldrb	r2, [r0, r1]
   b9558:	ea22 0203 	bic.w	r2, r2, r3
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
   b955c:	5442      	strb	r2, [r0, r1]
    }
  }
}
   b955e:	e01e      	b.n	b959e <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
      x = WIDTH  - x - 1;
   b9560:	8904      	ldrh	r4, [r0, #8]
   b9562:	3c01      	subs	r4, #1
   b9564:	1a61      	subs	r1, r4, r1
      y = HEIGHT - y - 1;
   b9566:	8944      	ldrh	r4, [r0, #10]
   b9568:	43d2      	mvns	r2, r2
   b956a:	4422      	add	r2, r4
      x = WIDTH  - x - 1;
   b956c:	b209      	sxth	r1, r1
      y = HEIGHT - y - 1;
   b956e:	b212      	sxth	r2, r2
      break;
   b9570:	e7df      	b.n	b9532 <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
      y = HEIGHT - y - 1;
   b9572:	8944      	ldrh	r4, [r0, #10]
   b9574:	3c01      	subs	r4, #1
   b9576:	1a64      	subs	r4, r4, r1
      break;
   b9578:	4611      	mov	r1, r2
      y = HEIGHT - y - 1;
   b957a:	b222      	sxth	r2, r4
      break;
   b957c:	e7d9      	b.n	b9532 <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
   b957e:	2a00      	cmp	r2, #0
   b9580:	8904      	ldrh	r4, [r0, #8]
   b9582:	4613      	mov	r3, r2
   b9584:	bfb8      	it	lt
   b9586:	1dd3      	addlt	r3, r2, #7
   b9588:	10db      	asrs	r3, r3, #3
   b958a:	fb13 1104 	smlabb	r1, r3, r4, r1
   b958e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   b9590:	f002 0007 	and.w	r0, r2, #7
   b9594:	2201      	movs	r2, #1
   b9596:	4082      	lsls	r2, r0
   b9598:	5c58      	ldrb	r0, [r3, r1]
   b959a:	4302      	orrs	r2, r0
   b959c:	545a      	strb	r2, [r3, r1]
}
   b959e:	bd10      	pop	{r4, pc}
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
   b95a0:	2a00      	cmp	r2, #0
   b95a2:	4613      	mov	r3, r2
   b95a4:	8904      	ldrh	r4, [r0, #8]
   b95a6:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b95a8:	bfb8      	it	lt
   b95aa:	1dd3      	addlt	r3, r2, #7
   b95ac:	10db      	asrs	r3, r3, #3
   b95ae:	fb13 1104 	smlabb	r1, r3, r4, r1
   b95b2:	f002 0207 	and.w	r2, r2, #7
   b95b6:	2301      	movs	r3, #1
   b95b8:	fa03 f202 	lsl.w	r2, r3, r2
   b95bc:	5c43      	ldrb	r3, [r0, r1]
   b95be:	405a      	eors	r2, r3
   b95c0:	e7cc      	b.n	b955c <_ZN16Adafruit_SSD13069drawPixelEsst+0x5c>
	...

000b95c4 <_ZN16Adafruit_SSD1306C1Ea>:
Adafruit_SSD1306::Adafruit_SSD1306(int8_t rst_pin) :
   b95c4:	b570      	push	{r4, r5, r6, lr}
  rstPin(rst_pin) {
   b95c6:	2240      	movs	r2, #64	; 0x40
Adafruit_SSD1306::Adafruit_SSD1306(int8_t rst_pin) :
   b95c8:	4604      	mov	r4, r0
   b95ca:	460e      	mov	r6, r1
  rstPin(rst_pin) {
   b95cc:	2180      	movs	r1, #128	; 0x80
   b95ce:	f7fe fe1d 	bl	b820c <_ZN12Adafruit_GFXC1Ess>
   b95d2:	2500      	movs	r5, #0
   b95d4:	4b0d      	ldr	r3, [pc, #52]	; (b960c <_ZN16Adafruit_SSD1306C1Ea+0x48>)
   b95d6:	6023      	str	r3, [r4, #0]
   b95d8:	6265      	str	r5, [r4, #36]	; 0x24
  Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT), spi(NULL), wire(&Wire),
   b95da:	f001 ff21 	bl	bb420 <_Z19__fetch_global_Wirev>
  rstPin(rst_pin) {
   b95de:	23ff      	movs	r3, #255	; 0xff
   b95e0:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
   b95e4:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
  {
   b95e8:	4b09      	ldr	r3, [pc, #36]	; (b9610 <_ZN16Adafruit_SSD1306C1Ea+0x4c>)
   b95ea:	63a3      	str	r3, [r4, #56]	; 0x38
   b95ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
   b95f0:	2301      	movs	r3, #1
   b95f2:	e9c4 050a 	strd	r0, r5, [r4, #40]	; 0x28
   b95f6:	86a2      	strh	r2, [r4, #52]	; 0x34
   b95f8:	f884 6037 	strb.w	r6, [r4, #55]	; 0x37
   b95fc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   b9600:	6425      	str	r5, [r4, #64]	; 0x40
   b9602:	f8a4 5044 	strh.w	r5, [r4, #68]	; 0x44
}
   b9606:	4620      	mov	r0, r4
   b9608:	bd70      	pop	{r4, r5, r6, pc}
   b960a:	bf00      	nop
   b960c:	000bd2b0 	.word	0x000bd2b0
   b9610:	000bccbc 	.word	0x000bccbc

000b9614 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>:
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   b9614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b9616:	4604      	mov	r4, r0
  if(wire) { // I2C
   b9618:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   b961a:	460d      	mov	r5, r1
  if(wire) { // I2C
   b961c:	b190      	cbz	r0, b9644 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x30>
    wire->beginTransmission(i2caddr);
   b961e:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b9622:	f001 fce1 	bl	bafe8 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b9626:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b9628:	6803      	ldr	r3, [r0, #0]
   b962a:	2100      	movs	r1, #0
   b962c:	689b      	ldr	r3, [r3, #8]
   b962e:	4798      	blx	r3
    WIRE_WRITE(c);
   b9630:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b9632:	6803      	ldr	r3, [r0, #0]
   b9634:	4629      	mov	r1, r5
   b9636:	689b      	ldr	r3, [r3, #8]
   b9638:	4798      	blx	r3
    wire->endTransmission();
   b963a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   b963c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    wire->endTransmission();
   b9640:	f001 bcd9 	b.w	baff6 <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   b9644:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   b9648:	4601      	mov	r1, r0
   b964a:	b298      	uxth	r0, r3
   b964c:	f001 fe15 	bl	bb27a <digitalWrite>
  if(spi) {
   b9650:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b9652:	b120      	cbz	r0, b965e <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4a>
    (void)spi->transfer(d);
   b9654:	4629      	mov	r1, r5
}
   b9656:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    (void)spi->transfer(d);
   b965a:	f000 bffb 	b.w	ba654 <_ZN8SPIClass8transferEh>
   b965e:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b9660:	2780      	movs	r7, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b9662:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b9666:	ea05 0107 	and.w	r1, r5, r7
   b966a:	b280      	uxth	r0, r0
   b966c:	f001 fe05 	bl	bb27a <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b9670:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b9674:	2101      	movs	r1, #1
   b9676:	b280      	uxth	r0, r0
   b9678:	f001 fdff 	bl	bb27a <digitalWrite>
      digitalWrite(clkPin , LOW);
   b967c:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b9680:	2100      	movs	r1, #0
   b9682:	b280      	uxth	r0, r0
   b9684:	f001 fdf9 	bl	bb27a <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b9688:	3e01      	subs	r6, #1
   b968a:	ea4f 0757 	mov.w	r7, r7, lsr #1
   b968e:	d1e8      	bne.n	b9662 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4e>
}
   b9690:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b9692 <_ZN16Adafruit_SSD130613invertDisplayEb>:
            display() function -- buffer contents are not changed, rather a
            different pixel mode of the display hardware is used. When
            enabled, drawing BLACK (value 0) pixels will actually draw white,
            WHITE (value 1) will draw black.
*/
void Adafruit_SSD1306::invertDisplay(boolean i) {
   b9692:	b538      	push	{r3, r4, r5, lr}
   b9694:	4604      	mov	r4, r0
  TRANSACTION_START
   b9696:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::invertDisplay(boolean i) {
   b9698:	460d      	mov	r5, r1
  TRANSACTION_START
   b969a:	b180      	cbz	r0, b96be <_ZN16Adafruit_SSD130613invertDisplayEb+0x2c>

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
  inline void setClock(uint32_t speed) {
	  setSpeed(speed);
   b969c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b969e:	f001 fc95 	bl	bafcc <_ZN7TwoWire8setSpeedEm>
  ssd1306_command1(i ? SSD1306_INVERTDISPLAY : SSD1306_NORMALDISPLAY);
   b96a2:	2d00      	cmp	r5, #0
   b96a4:	4620      	mov	r0, r4
   b96a6:	bf14      	ite	ne
   b96a8:	21a7      	movne	r1, #167	; 0xa7
   b96aa:	21a6      	moveq	r1, #166	; 0xa6
   b96ac:	f7ff ffb2 	bl	b9614 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  TRANSACTION_END
   b96b0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b96b2:	b188      	cbz	r0, b96d8 <_ZN16Adafruit_SSD130613invertDisplayEb+0x46>
   b96b4:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   b96b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b96ba:	f001 bc87 	b.w	bafcc <_ZN7TwoWire8setSpeedEm>
  TRANSACTION_START
   b96be:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b96c0:	b118      	cbz	r0, b96ca <_ZN16Adafruit_SSD130613invertDisplayEb+0x38>
   b96c2:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b96c6:	f000 ff57 	bl	ba578 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b96ca:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b96ce:	2100      	movs	r1, #0
   b96d0:	b280      	uxth	r0, r0
   b96d2:	f001 fdd2 	bl	bb27a <digitalWrite>
   b96d6:	e7e4      	b.n	b96a2 <_ZN16Adafruit_SSD130613invertDisplayEb+0x10>
  TRANSACTION_END
   b96d8:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b96dc:	2101      	movs	r1, #1
   b96de:	b280      	uxth	r0, r0
   b96e0:	f001 fdcb 	bl	bb27a <digitalWrite>
   b96e4:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b96e6:	b118      	cbz	r0, b96f0 <_ZN16Adafruit_SSD130613invertDisplayEb+0x5e>
}
   b96e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  TRANSACTION_END
   b96ec:	f000 bf2a 	b.w	ba544 <_ZN8SPIClass14endTransactionEv>
}
   b96f0:	bd38      	pop	{r3, r4, r5, pc}

000b96f2 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>:
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   b96f2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b96f6:	4604      	mov	r4, r0
  if(wire) { // I2C
   b96f8:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   b96fa:	460d      	mov	r5, r1
  if(wire) { // I2C
   b96fc:	188f      	adds	r7, r1, r2
   b96fe:	b340      	cbz	r0, b9752 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x60>
    wire->beginTransmission(i2caddr);
   b9700:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b9704:	f001 fc70 	bl	bafe8 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b9708:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b970a:	6803      	ldr	r3, [r0, #0]
   b970c:	2100      	movs	r1, #0
   b970e:	689b      	ldr	r3, [r3, #8]
   b9710:	4798      	blx	r3
    uint8_t bytesOut = 1;
   b9712:	2601      	movs	r6, #1
    while(n--) {
   b9714:	42af      	cmp	r7, r5
        wire->endTransmission();
   b9716:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    while(n--) {
   b9718:	d017      	beq.n	b974a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x58>
      if(bytesOut >= WIRE_MAX) {
   b971a:	2e1f      	cmp	r6, #31
   b971c:	d90c      	bls.n	b9738 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x46>
        wire->endTransmission();
   b971e:	f001 fc6a 	bl	baff6 <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   b9722:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b9726:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b9728:	f001 fc5e 	bl	bafe8 <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b972c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b972e:	6803      	ldr	r3, [r0, #0]
   b9730:	2100      	movs	r1, #0
   b9732:	689b      	ldr	r3, [r3, #8]
   b9734:	4798      	blx	r3
        bytesOut = 1;
   b9736:	2601      	movs	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   b9738:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b973a:	f815 1b01 	ldrb.w	r1, [r5], #1
   b973e:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   b9740:	3601      	adds	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   b9742:	689b      	ldr	r3, [r3, #8]
   b9744:	4798      	blx	r3
      bytesOut++;
   b9746:	b2f6      	uxtb	r6, r6
    while(n--) {
   b9748:	e7e4      	b.n	b9714 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x22>
}
   b974a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    wire->endTransmission();
   b974e:	f001 bc52 	b.w	baff6 <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   b9752:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   b9756:	4601      	mov	r1, r0
   b9758:	b298      	uxth	r0, r3
   b975a:	f001 fd8e 	bl	bb27a <digitalWrite>
    while(n--) SPIwrite(pgm_read_byte(c++));
   b975e:	42bd      	cmp	r5, r7
   b9760:	d022      	beq.n	b97a8 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xb6>
  if(spi) {
   b9762:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(n--) SPIwrite(pgm_read_byte(c++));
   b9764:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
   b9768:	b118      	cbz	r0, b9772 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x80>
    (void)spi->transfer(d);
   b976a:	4649      	mov	r1, r9
   b976c:	f000 ff72 	bl	ba654 <_ZN8SPIClass8transferEh>
   b9770:	e7f5      	b.n	b975e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
   b9772:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b9774:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b9778:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b977c:	ea09 0108 	and.w	r1, r9, r8
   b9780:	b280      	uxth	r0, r0
   b9782:	f001 fd7a 	bl	bb27a <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b9786:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b978a:	2101      	movs	r1, #1
   b978c:	b280      	uxth	r0, r0
   b978e:	f001 fd74 	bl	bb27a <digitalWrite>
      digitalWrite(clkPin , LOW);
   b9792:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b9796:	2100      	movs	r1, #0
   b9798:	b280      	uxth	r0, r0
   b979a:	f001 fd6e 	bl	bb27a <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b979e:	3e01      	subs	r6, #1
   b97a0:	ea4f 0858 	mov.w	r8, r8, lsr #1
   b97a4:	d1e8      	bne.n	b9778 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x86>
   b97a6:	e7da      	b.n	b975e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
}
   b97a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000b97ac <_ZN16Adafruit_SSD130612clearDisplayEv>:
  memset(buffer, 0, WIDTH * ((HEIGHT + 7) / 8));
   b97ac:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   b97b0:	1dda      	adds	r2, r3, #7
   b97b2:	bf48      	it	mi
   b97b4:	f103 020e 	addmi.w	r2, r3, #14
   b97b8:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   b97bc:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b97be:	10d2      	asrs	r2, r2, #3
   b97c0:	435a      	muls	r2, r3
   b97c2:	2100      	movs	r1, #0
   b97c4:	f001 be6e 	b.w	bb4a4 <memset>

000b97c8 <_ZN16Adafruit_SSD13065beginEhhbb>:
  boolean periphBegin) {
   b97c8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b97cc:	461e      	mov	r6, r3
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b97ce:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  boolean periphBegin) {
   b97d0:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   b97d4:	4604      	mov	r4, r0
   b97d6:	460f      	mov	r7, r1
   b97d8:	4615      	mov	r5, r2
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b97da:	b1d3      	cbz	r3, b9812 <_ZN16Adafruit_SSD13065beginEhhbb+0x4a>
  clearDisplay();
   b97dc:	4620      	mov	r0, r4
   b97de:	f7ff ffe5 	bl	b97ac <_ZN16Adafruit_SSD130612clearDisplayEv>
  if(HEIGHT > 32) {
   b97e2:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
   b97e6:	2a20      	cmp	r2, #32
   b97e8:	dc25      	bgt.n	b9836 <_ZN16Adafruit_SSD13065beginEhhbb+0x6e>
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   b97ea:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
   b97ee:	2320      	movs	r3, #32
   b97f0:	3a20      	subs	r2, #32
   b97f2:	3973      	subs	r1, #115	; 0x73
   b97f4:	2001      	movs	r0, #1
   b97f6:	e9cd 3001 	strd	r3, r0, [sp, #4]
   b97fa:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   b97fe:	2373      	movs	r3, #115	; 0x73
   b9800:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   b9804:	9300      	str	r3, [sp, #0]
   b9806:	f342 024f 	sbfx	r2, r2, #1, #16
   b980a:	4b85      	ldr	r3, [pc, #532]	; (b9a20 <_ZN16Adafruit_SSD13065beginEhhbb+0x258>)
   b980c:	f341 014f 	sbfx	r1, r1, #1, #16
   b9810:	e01b      	b.n	b984a <_ZN16Adafruit_SSD13065beginEhhbb+0x82>
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b9812:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   b9816:	1dd8      	adds	r0, r3, #7
   b9818:	bf48      	it	mi
   b981a:	f103 000e 	addmi.w	r0, r3, #14
   b981e:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
   b9822:	10c0      	asrs	r0, r0, #3
   b9824:	4358      	muls	r0, r3
   b9826:	f000 fdeb 	bl	ba400 <malloc>
   b982a:	62e0      	str	r0, [r4, #44]	; 0x2c
   b982c:	2800      	cmp	r0, #0
   b982e:	d1d5      	bne.n	b97dc <_ZN16Adafruit_SSD13065beginEhhbb+0x14>
}
   b9830:	b004      	add	sp, #16
   b9832:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    drawBitmap(0,0, sucreLogo_data, sucreLogo_width, sucreLogo_height, 1);
   b9836:	2340      	movs	r3, #64	; 0x40
   b9838:	f04f 0c01 	mov.w	ip, #1
   b983c:	e9cd 3c01 	strd	r3, ip, [sp, #4]
   b9840:	2380      	movs	r3, #128	; 0x80
   b9842:	9300      	str	r3, [sp, #0]
   b9844:	2200      	movs	r2, #0
   b9846:	4b77      	ldr	r3, [pc, #476]	; (b9a24 <_ZN16Adafruit_SSD13065beginEhhbb+0x25c>)
   b9848:	4611      	mov	r1, r2
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   b984a:	4620      	mov	r0, r4
   b984c:	f7fe fea6 	bl	b859c <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
  if(wire) { // Using I2C
   b9850:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  vccstate = vcs;
   b9852:	f884 7031 	strb.w	r7, [r4, #49]	; 0x31
  if(wire) { // Using I2C
   b9856:	2800      	cmp	r0, #0
   b9858:	d078      	beq.n	b994c <_ZN16Adafruit_SSD13065beginEhhbb+0x184>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   b985a:	2d00      	cmp	r5, #0
   b985c:	d174      	bne.n	b9948 <_ZN16Adafruit_SSD13065beginEhhbb+0x180>
   b985e:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   b9862:	2b20      	cmp	r3, #32
   b9864:	bf0c      	ite	eq
   b9866:	253c      	moveq	r5, #60	; 0x3c
   b9868:	253d      	movne	r5, #61	; 0x3d
   b986a:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    if(periphBegin) wire->begin();
   b986e:	f1b8 0f00 	cmp.w	r8, #0
   b9872:	d001      	beq.n	b9878 <_ZN16Adafruit_SSD13065beginEhhbb+0xb0>
   b9874:	f001 fbae 	bl	bafd4 <_ZN7TwoWire5beginEv>
  if(reset && (rstPin >= 0)) {
   b9878:	b1fe      	cbz	r6, b98ba <_ZN16Adafruit_SSD13065beginEhhbb+0xf2>
   b987a:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b987e:	2800      	cmp	r0, #0
   b9880:	db1b      	blt.n	b98ba <_ZN16Adafruit_SSD13065beginEhhbb+0xf2>
    pinMode(     rstPin, OUTPUT);
   b9882:	2101      	movs	r1, #1
   b9884:	b280      	uxth	r0, r0
   b9886:	f001 fce7 	bl	bb258 <pinMode>
    digitalWrite(rstPin, HIGH);
   b988a:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b988e:	2101      	movs	r1, #1
   b9890:	b280      	uxth	r0, r0
   b9892:	f001 fcf2 	bl	bb27a <digitalWrite>
    delay(1);                   // VDD goes high at start, pause for 1 ms
   b9896:	2001      	movs	r0, #1
   b9898:	f001 f913 	bl	baac2 <delay>
    digitalWrite(rstPin, LOW);  // Bring reset low
   b989c:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b98a0:	2100      	movs	r1, #0
   b98a2:	b280      	uxth	r0, r0
   b98a4:	f001 fce9 	bl	bb27a <digitalWrite>
    delay(10);                  // Wait 10 ms
   b98a8:	200a      	movs	r0, #10
   b98aa:	f001 f90a 	bl	baac2 <delay>
    digitalWrite(rstPin, HIGH); // Bring out of reset
   b98ae:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b98b2:	2101      	movs	r1, #1
   b98b4:	b280      	uxth	r0, r0
   b98b6:	f001 fce0 	bl	bb27a <digitalWrite>
  TRANSACTION_START
   b98ba:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b98bc:	2800      	cmp	r0, #0
   b98be:	d074      	beq.n	b99aa <_ZN16Adafruit_SSD13065beginEhhbb+0x1e2>
   b98c0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b98c2:	f001 fb83 	bl	bafcc <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(init1, sizeof(init1));
   b98c6:	2204      	movs	r2, #4
   b98c8:	4957      	ldr	r1, [pc, #348]	; (b9a28 <_ZN16Adafruit_SSD13065beginEhhbb+0x260>)
   b98ca:	4620      	mov	r0, r4
   b98cc:	f7ff ff11 	bl	b96f2 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(HEIGHT - 1);
   b98d0:	8961      	ldrh	r1, [r4, #10]
   b98d2:	3901      	subs	r1, #1
   b98d4:	b2c9      	uxtb	r1, r1
   b98d6:	4620      	mov	r0, r4
   b98d8:	f7ff fe9c 	bl	b9614 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init2, sizeof(init2));
   b98dc:	4953      	ldr	r1, [pc, #332]	; (b9a2c <_ZN16Adafruit_SSD13065beginEhhbb+0x264>)
   b98de:	2204      	movs	r2, #4
   b98e0:	4620      	mov	r0, r4
   b98e2:	f7ff ff06 	bl	b96f2 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0x14);
   b98e6:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b98ea:	2b01      	cmp	r3, #1
   b98ec:	bf0c      	ite	eq
   b98ee:	2110      	moveq	r1, #16
   b98f0:	2114      	movne	r1, #20
   b98f2:	4620      	mov	r0, r4
   b98f4:	f7ff fe8e 	bl	b9614 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init3, sizeof(init3));
   b98f8:	2204      	movs	r2, #4
   b98fa:	494d      	ldr	r1, [pc, #308]	; (b9a30 <_ZN16Adafruit_SSD13065beginEhhbb+0x268>)
   b98fc:	4620      	mov	r0, r4
   b98fe:	f7ff fef8 	bl	b96f2 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  if((WIDTH == 128) && (HEIGHT == 32)) {
   b9902:	68a3      	ldr	r3, [r4, #8]
   b9904:	4a4b      	ldr	r2, [pc, #300]	; (b9a34 <_ZN16Adafruit_SSD13065beginEhhbb+0x26c>)
   b9906:	4293      	cmp	r3, r2
   b9908:	d15c      	bne.n	b99c4 <_ZN16Adafruit_SSD13065beginEhhbb+0x1fc>
    ssd1306_commandList(init4a, sizeof(init4a));
   b990a:	494b      	ldr	r1, [pc, #300]	; (b9a38 <_ZN16Adafruit_SSD13065beginEhhbb+0x270>)
   b990c:	2204      	movs	r2, #4
   b990e:	4620      	mov	r0, r4
   b9910:	f7ff feef 	bl	b96f2 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(SSD1306_SETPRECHARGE); // 0xd9
   b9914:	21d9      	movs	r1, #217	; 0xd9
   b9916:	4620      	mov	r0, r4
   b9918:	f7ff fe7c 	bl	b9614 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x22 : 0xF1);
   b991c:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b9920:	2b01      	cmp	r3, #1
   b9922:	bf0c      	ite	eq
   b9924:	2122      	moveq	r1, #34	; 0x22
   b9926:	21f1      	movne	r1, #241	; 0xf1
   b9928:	4620      	mov	r0, r4
   b992a:	f7ff fe73 	bl	b9614 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init5, sizeof(init5));
   b992e:	4620      	mov	r0, r4
   b9930:	4942      	ldr	r1, [pc, #264]	; (b9a3c <_ZN16Adafruit_SSD13065beginEhhbb+0x274>)
   b9932:	2206      	movs	r2, #6
   b9934:	f7ff fedd 	bl	b96f2 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  TRANSACTION_END
   b9938:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b993a:	2800      	cmp	r0, #0
   b993c:	d063      	beq.n	b9a06 <_ZN16Adafruit_SSD13065beginEhhbb+0x23e>
   b993e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   b9940:	f001 fb44 	bl	bafcc <_ZN7TwoWire8setSpeedEm>
  return true; // Success
   b9944:	2001      	movs	r0, #1
   b9946:	e773      	b.n	b9830 <_ZN16Adafruit_SSD13065beginEhhbb+0x68>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   b9948:	b26d      	sxtb	r5, r5
   b994a:	e78e      	b.n	b986a <_ZN16Adafruit_SSD13065beginEhhbb+0xa2>
    pinMode(dcPin, OUTPUT); // Set data/command pin as output
   b994c:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   b9950:	2101      	movs	r1, #1
   b9952:	b280      	uxth	r0, r0
   b9954:	f001 fc80 	bl	bb258 <pinMode>
    pinMode(csPin, OUTPUT); // Same for chip select
   b9958:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b995c:	2101      	movs	r1, #1
   b995e:	b280      	uxth	r0, r0
   b9960:	f001 fc7a 	bl	bb258 <pinMode>
    SSD1306_DESELECT
   b9964:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b9968:	2101      	movs	r1, #1
   b996a:	b280      	uxth	r0, r0
   b996c:	f001 fc85 	bl	bb27a <digitalWrite>
    if(spi) { // Hardware SPI
   b9970:	6a65      	ldr	r5, [r4, #36]	; 0x24
   b9972:	b13d      	cbz	r5, b9984 <_ZN16Adafruit_SSD13065beginEhhbb+0x1bc>
      if(periphBegin) spi->begin();
   b9974:	f1b8 0f00 	cmp.w	r8, #0
   b9978:	f43f af7e 	beq.w	b9878 <_ZN16Adafruit_SSD13065beginEhhbb+0xb0>
   b997c:	4628      	mov	r0, r5
   b997e:	f000 fdcd 	bl	ba51c <_ZN8SPIClass5beginEv>
   b9982:	e779      	b.n	b9878 <_ZN16Adafruit_SSD13065beginEhhbb+0xb0>
      pinMode(mosiPin, OUTPUT); // MOSI and SCLK outputs
   b9984:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b9988:	2101      	movs	r1, #1
   b998a:	b280      	uxth	r0, r0
   b998c:	f001 fc64 	bl	bb258 <pinMode>
      pinMode(clkPin , OUTPUT);
   b9990:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b9994:	2101      	movs	r1, #1
   b9996:	b280      	uxth	r0, r0
   b9998:	f001 fc5e 	bl	bb258 <pinMode>
      digitalWrite(clkPin, LOW); // Clock low
   b999c:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b99a0:	4629      	mov	r1, r5
   b99a2:	b280      	uxth	r0, r0
   b99a4:	f001 fc69 	bl	bb27a <digitalWrite>
   b99a8:	e766      	b.n	b9878 <_ZN16Adafruit_SSD13065beginEhhbb+0xb0>
  TRANSACTION_START
   b99aa:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b99ac:	b118      	cbz	r0, b99b6 <_ZN16Adafruit_SSD13065beginEhhbb+0x1ee>
   b99ae:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b99b2:	f000 fde1 	bl	ba578 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b99b6:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b99ba:	2100      	movs	r1, #0
   b99bc:	b280      	uxth	r0, r0
   b99be:	f001 fc5c 	bl	bb27a <digitalWrite>
   b99c2:	e780      	b.n	b98c6 <_ZN16Adafruit_SSD13065beginEhhbb+0xfe>
  } else if((WIDTH == 128) && (HEIGHT == 64)) {
   b99c4:	4a1e      	ldr	r2, [pc, #120]	; (b9a40 <_ZN16Adafruit_SSD13065beginEhhbb+0x278>)
   b99c6:	4293      	cmp	r3, r2
   b99c8:	d10e      	bne.n	b99e8 <_ZN16Adafruit_SSD13065beginEhhbb+0x220>
    ssd1306_commandList(init4b, sizeof(init4b));
   b99ca:	491e      	ldr	r1, [pc, #120]	; (b9a44 <_ZN16Adafruit_SSD13065beginEhhbb+0x27c>)
   b99cc:	2203      	movs	r2, #3
   b99ce:	4620      	mov	r0, r4
   b99d0:	f7ff fe8f 	bl	b96f2 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x9F : 0xCF);
   b99d4:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b99d8:	2b01      	cmp	r3, #1
   b99da:	bf0c      	ite	eq
   b99dc:	219f      	moveq	r1, #159	; 0x9f
   b99de:	21cf      	movne	r1, #207	; 0xcf
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   b99e0:	4620      	mov	r0, r4
   b99e2:	f7ff fe17 	bl	b9614 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
   b99e6:	e795      	b.n	b9914 <_ZN16Adafruit_SSD13065beginEhhbb+0x14c>
  } else if((WIDTH == 96) && (HEIGHT == 16)) {
   b99e8:	4a17      	ldr	r2, [pc, #92]	; (b9a48 <_ZN16Adafruit_SSD13065beginEhhbb+0x280>)
   b99ea:	4293      	cmp	r3, r2
   b99ec:	d192      	bne.n	b9914 <_ZN16Adafruit_SSD13065beginEhhbb+0x14c>
    ssd1306_commandList(init4c, sizeof(init4c));
   b99ee:	4917      	ldr	r1, [pc, #92]	; (b9a4c <_ZN16Adafruit_SSD13065beginEhhbb+0x284>)
   b99f0:	2203      	movs	r2, #3
   b99f2:	4620      	mov	r0, r4
   b99f4:	f7ff fe7d 	bl	b96f2 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   b99f8:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b99fc:	2b01      	cmp	r3, #1
   b99fe:	bf0c      	ite	eq
   b9a00:	2110      	moveq	r1, #16
   b9a02:	21af      	movne	r1, #175	; 0xaf
   b9a04:	e7ec      	b.n	b99e0 <_ZN16Adafruit_SSD13065beginEhhbb+0x218>
  TRANSACTION_END
   b9a06:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b9a0a:	2101      	movs	r1, #1
   b9a0c:	b280      	uxth	r0, r0
   b9a0e:	f001 fc34 	bl	bb27a <digitalWrite>
   b9a12:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b9a14:	2800      	cmp	r0, #0
   b9a16:	d095      	beq.n	b9944 <_ZN16Adafruit_SSD13065beginEhhbb+0x17c>
   b9a18:	f000 fd94 	bl	ba544 <_ZN8SPIClass14endTransactionEv>
   b9a1c:	e792      	b.n	b9944 <_ZN16Adafruit_SSD13065beginEhhbb+0x17c>
   b9a1e:	bf00      	nop
   b9a20:	000bccc8 	.word	0x000bccc8
   b9a24:	000bcea8 	.word	0x000bcea8
   b9a28:	000bd310 	.word	0x000bd310
   b9a2c:	000bd314 	.word	0x000bd314
   b9a30:	000bd318 	.word	0x000bd318
   b9a34:	00200080 	.word	0x00200080
   b9a38:	000bd322 	.word	0x000bd322
   b9a3c:	000bd31c 	.word	0x000bd31c
   b9a40:	00400080 	.word	0x00400080
   b9a44:	000bd326 	.word	0x000bd326
   b9a48:	00100060 	.word	0x00100060
   b9a4c:	000bd329 	.word	0x000bd329

000b9a50 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b9a50:	b570      	push	{r4, r5, r6, lr}
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   b9a52:	2a00      	cmp	r2, #0
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b9a54:	f8bd 5010 	ldrh.w	r5, [sp, #16]
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   b9a58:	db3d      	blt.n	b9ad6 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b9a5a:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   b9a5e:	4294      	cmp	r4, r2
   b9a60:	dd39      	ble.n	b9ad6 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
    if(x < 0) { // Clip left
   b9a62:	2900      	cmp	r1, #0
      w += x;
   b9a64:	bfbe      	ittt	lt
   b9a66:	185b      	addlt	r3, r3, r1
   b9a68:	b21b      	sxthlt	r3, r3
      x  = 0;
   b9a6a:	2100      	movlt	r1, #0
    if((x + w) > WIDTH) { // Clip right
   b9a6c:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
   b9a70:	18ce      	adds	r6, r1, r3
   b9a72:	42a6      	cmp	r6, r4
      w = (WIDTH - x);
   b9a74:	bfc4      	itt	gt
   b9a76:	1a63      	subgt	r3, r4, r1
   b9a78:	b21b      	sxthgt	r3, r3
    if(w > 0) { // Proceed only if width is positive
   b9a7a:	2b00      	cmp	r3, #0
   b9a7c:	dd2b      	ble.n	b9ad6 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x],
   b9a7e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b9a80:	10d6      	asrs	r6, r2, #3
   b9a82:	fb14 1106 	smlabb	r1, r4, r6, r1
   b9a86:	4401      	add	r1, r0
               mask = 1 << (y & 7);
   b9a88:	f002 0007 	and.w	r0, r2, #7
   b9a8c:	2201      	movs	r2, #1
   b9a8e:	4082      	lsls	r2, r0
      switch(color) {
   b9a90:	2d01      	cmp	r5, #1
               mask = 1 << (y & 7);
   b9a92:	b2d2      	uxtb	r2, r2
      switch(color) {
   b9a94:	d016      	beq.n	b9ac4 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x74>
   b9a96:	2d02      	cmp	r5, #2
   b9a98:	d00b      	beq.n	b9ab2 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x62>
   b9a9a:	b9e5      	cbnz	r5, b9ad6 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
       case BLACK: mask = ~mask; while(w--) { *pBuf++ &= mask; }; break;
   b9a9c:	43d2      	mvns	r2, r2
   b9a9e:	b2d2      	uxtb	r2, r2
   b9aa0:	440b      	add	r3, r1
   b9aa2:	4299      	cmp	r1, r3
   b9aa4:	d017      	beq.n	b9ad6 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b9aa6:	f811 0b01 	ldrb.w	r0, [r1], #1
   b9aaa:	4010      	ands	r0, r2
   b9aac:	f801 0c01 	strb.w	r0, [r1, #-1]
   b9ab0:	e7f7      	b.n	b9aa2 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x52>
   b9ab2:	440b      	add	r3, r1
       case INVERSE:             while(w--) { *pBuf++ ^= mask; }; break;
   b9ab4:	4299      	cmp	r1, r3
   b9ab6:	d00e      	beq.n	b9ad6 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b9ab8:	f811 0b01 	ldrb.w	r0, [r1], #1
   b9abc:	4050      	eors	r0, r2
   b9abe:	f801 0c01 	strb.w	r0, [r1, #-1]
   b9ac2:	e7f7      	b.n	b9ab4 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x64>
   b9ac4:	440b      	add	r3, r1
       case WHITE:               while(w--) { *pBuf++ |= mask; }; break;
   b9ac6:	4299      	cmp	r1, r3
   b9ac8:	d005      	beq.n	b9ad6 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b9aca:	f811 0b01 	ldrb.w	r0, [r1], #1
   b9ace:	4310      	orrs	r0, r2
   b9ad0:	f801 0c01 	strb.w	r0, [r1, #-1]
   b9ad4:	e7f7      	b.n	b9ac6 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x76>
}
   b9ad6:	bd70      	pop	{r4, r5, r6, pc}

000b9ad8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>:
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
   b9ad8:	b5f0      	push	{r4, r5, r6, r7, lr}
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   b9ada:	2900      	cmp	r1, #0
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
   b9adc:	f8bd 5014 	ldrh.w	r5, [sp, #20]
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   b9ae0:	db76      	blt.n	b9bd0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
   b9ae2:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
   b9ae6:	42b1      	cmp	r1, r6
   b9ae8:	da72      	bge.n	b9bd0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
    if(__y < 0) { // Clip top
   b9aea:	2a00      	cmp	r2, #0
      __h += __y;
   b9aec:	bfbe      	ittt	lt
   b9aee:	189b      	addlt	r3, r3, r2
   b9af0:	b21b      	sxthlt	r3, r3
      __y = 0;
   b9af2:	2200      	movlt	r2, #0
    if((__y + __h) > HEIGHT) { // Clip bottom
   b9af4:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   b9af8:	18d7      	adds	r7, r2, r3
   b9afa:	42a7      	cmp	r7, r4
      __h = (HEIGHT - __y);
   b9afc:	bfc4      	itt	gt
   b9afe:	1aa3      	subgt	r3, r4, r2
   b9b00:	b21b      	sxthgt	r3, r3
    if(__h > 0) { // Proceed only if height is now positive
   b9b02:	2b00      	cmp	r3, #0
   b9b04:	dd64      	ble.n	b9bd0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   b9b06:	f3c2 04c4 	ubfx	r4, r2, #3, #5
   b9b0a:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
   b9b0c:	fb16 1604 	smlabb	r6, r6, r4, r1
      if(mod) {
   b9b10:	f012 0207 	ands.w	r2, r2, #7
      uint8_t  y = __y, h = __h;
   b9b14:	b2db      	uxtb	r3, r3
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   b9b16:	eb07 0406 	add.w	r4, r7, r6
      if(mod) {
   b9b1a:	d023      	beq.n	b9b64 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x8c>
        mod = 8 - mod;
   b9b1c:	f1c2 0208 	rsb	r2, r2, #8
   b9b20:	b2d2      	uxtb	r2, r2
        uint8_t mask = pgm_read_byte(&premask[mod]);
   b9b22:	492d      	ldr	r1, [pc, #180]	; (b9bd8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x100>)
        if(h < mod) mask &= (0XFF >> (mod - h));
   b9b24:	4293      	cmp	r3, r2
   b9b26:	bf3c      	itt	cc
   b9b28:	f04f 0cff 	movcc.w	ip, #255	; 0xff
   b9b2c:	eba2 0e03 	subcc.w	lr, r2, r3
        uint8_t mask = pgm_read_byte(&premask[mod]);
   b9b30:	5c89      	ldrb	r1, [r1, r2]
        if(h < mod) mask &= (0XFF >> (mod - h));
   b9b32:	bf3c      	itt	cc
   b9b34:	fa4c fc0e 	asrcc.w	ip, ip, lr
   b9b38:	ea0c 0101 	andcc.w	r1, ip, r1
        switch(color) {
   b9b3c:	2d01      	cmp	r5, #1
   b9b3e:	d007      	beq.n	b9b50 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x78>
   b9b40:	2d02      	cmp	r5, #2
   b9b42:	d02e      	beq.n	b9ba2 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xca>
   b9b44:	b94d      	cbnz	r5, b9b5a <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x82>
         case BLACK:   *pBuf &= ~mask; break;
   b9b46:	f817 c006 	ldrb.w	ip, [r7, r6]
   b9b4a:	ea2c 0101 	bic.w	r1, ip, r1
   b9b4e:	e003      	b.n	b9b58 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x80>
         case WHITE:   *pBuf |=  mask; break;
   b9b50:	f817 c006 	ldrb.w	ip, [r7, r6]
   b9b54:	ea41 010c 	orr.w	r1, r1, ip
         case INVERSE: *pBuf ^=  mask; break;
   b9b58:	55b9      	strb	r1, [r7, r6]
      if(h >= mod) { // More to go?
   b9b5a:	4293      	cmp	r3, r2
   b9b5c:	d338      	bcc.n	b9bd0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
        pBuf += WIDTH;
   b9b5e:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
   b9b62:	440c      	add	r4, r1
        h -= mod;
   b9b64:	1a9a      	subs	r2, r3, r2
   b9b66:	b2d2      	uxtb	r2, r2
        if(h >= 8) {
   b9b68:	2a07      	cmp	r2, #7
   b9b6a:	d90e      	bls.n	b9b8a <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xb2>
          if(color == INVERSE) {
   b9b6c:	2d02      	cmp	r5, #2
   b9b6e:	d11d      	bne.n	b9bac <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xd4>
   b9b70:	4613      	mov	r3, r2
              *pBuf ^= 0xFF;  // Invert byte
   b9b72:	7821      	ldrb	r1, [r4, #0]
   b9b74:	43c9      	mvns	r1, r1
   b9b76:	7021      	strb	r1, [r4, #0]
              h     -= 8;     // Subtract 8 rows from height
   b9b78:	3b08      	subs	r3, #8
              pBuf  += WIDTH; // Advance pointer 8 rows
   b9b7a:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
              h     -= 8;     // Subtract 8 rows from height
   b9b7e:	b2db      	uxtb	r3, r3
            } while(h >= 8);
   b9b80:	2b07      	cmp	r3, #7
              pBuf  += WIDTH; // Advance pointer 8 rows
   b9b82:	440c      	add	r4, r1
            } while(h >= 8);
   b9b84:	d8f5      	bhi.n	b9b72 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x9a>
              h    -= 8;      // Subtract 8 rows from height
   b9b86:	f002 0207 	and.w	r2, r2, #7
        if(h) { // Do the final partial byte, if necessary
   b9b8a:	b30a      	cbz	r2, b9bd0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   b9b8c:	4b13      	ldr	r3, [pc, #76]	; (b9bdc <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x104>)
          switch(color) {
   b9b8e:	2d01      	cmp	r5, #1
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   b9b90:	5c9b      	ldrb	r3, [r3, r2]
          switch(color) {
   b9b92:	d01a      	beq.n	b9bca <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf2>
   b9b94:	2d02      	cmp	r5, #2
   b9b96:	d01c      	beq.n	b9bd2 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xfa>
   b9b98:	b9d5      	cbnz	r5, b9bd0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
           case BLACK:   *pBuf &= ~mask; break;
   b9b9a:	7822      	ldrb	r2, [r4, #0]
   b9b9c:	ea22 0303 	bic.w	r3, r2, r3
   b9ba0:	e015      	b.n	b9bce <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
         case INVERSE: *pBuf ^=  mask; break;
   b9ba2:	f817 c006 	ldrb.w	ip, [r7, r6]
   b9ba6:	ea81 010c 	eor.w	r1, r1, ip
   b9baa:	e7d5      	b.n	b9b58 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x80>
            uint8_t val = (color != BLACK) ? 255 : 0;
   b9bac:	1e29      	subs	r1, r5, #0
   b9bae:	bf18      	it	ne
   b9bb0:	2101      	movne	r1, #1
   b9bb2:	4249      	negs	r1, r1
   b9bb4:	b2c9      	uxtb	r1, r1
   b9bb6:	4613      	mov	r3, r2
              *pBuf = val;    // Set byte
   b9bb8:	7021      	strb	r1, [r4, #0]
              h    -= 8;      // Subtract 8 rows from height
   b9bba:	3b08      	subs	r3, #8
              pBuf += WIDTH;  // Advance pointer 8 rows
   b9bbc:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
              h    -= 8;      // Subtract 8 rows from height
   b9bc0:	b2db      	uxtb	r3, r3
            } while(h >= 8);
   b9bc2:	2b07      	cmp	r3, #7
              pBuf += WIDTH;  // Advance pointer 8 rows
   b9bc4:	4434      	add	r4, r6
            } while(h >= 8);
   b9bc6:	d8f7      	bhi.n	b9bb8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xe0>
   b9bc8:	e7dd      	b.n	b9b86 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xae>
           case WHITE:   *pBuf |=  mask; break;
   b9bca:	7822      	ldrb	r2, [r4, #0]
   b9bcc:	4313      	orrs	r3, r2
           case INVERSE: *pBuf ^=  mask; break;
   b9bce:	7023      	strb	r3, [r4, #0]
}
   b9bd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
           case INVERSE: *pBuf ^=  mask; break;
   b9bd2:	7822      	ldrb	r2, [r4, #0]
   b9bd4:	4053      	eors	r3, r2
   b9bd6:	e7fa      	b.n	b9bce <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
   b9bd8:	000bd300 	.word	0x000bd300
   b9bdc:	000bd308 	.word	0x000bd308

000b9be0 <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b9be0:	b470      	push	{r4, r5, r6}
   b9be2:	4614      	mov	r4, r2
  switch(rotation) {
   b9be4:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b9be6:	f8bd 600c 	ldrh.w	r6, [sp, #12]
  switch(rotation) {
   b9bea:	2a02      	cmp	r2, #2
   b9bec:	d00d      	beq.n	b9c0a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x2a>
   b9bee:	2a03      	cmp	r2, #3
   b9bf0:	d018      	beq.n	b9c24 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x44>
   b9bf2:	2a01      	cmp	r2, #1
   b9bf4:	d111      	bne.n	b9c1a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3a>
    x = WIDTH - x - 1;
   b9bf6:	8902      	ldrh	r2, [r0, #8]
   b9bf8:	43e4      	mvns	r4, r4
   b9bfa:	4414      	add	r4, r2
   b9bfc:	b224      	sxth	r4, r4
  if(bSwap) drawFastVLineInternal(x, y, w, color);
   b9bfe:	9603      	str	r6, [sp, #12]
   b9c00:	460a      	mov	r2, r1
   b9c02:	4621      	mov	r1, r4
}
   b9c04:	bc70      	pop	{r4, r5, r6}
  if(bSwap) drawFastVLineInternal(x, y, w, color);
   b9c06:	f7ff bf67 	b.w	b9ad8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y  = HEIGHT - y - 1;
   b9c0a:	8942      	ldrh	r2, [r0, #10]
    x -= (w-1);
   b9c0c:	8905      	ldrh	r5, [r0, #8]
    y  = HEIGHT - y - 1;
   b9c0e:	43e4      	mvns	r4, r4
    x -= (w-1);
   b9c10:	4419      	add	r1, r3
    y  = HEIGHT - y - 1;
   b9c12:	4414      	add	r4, r2
    x -= (w-1);
   b9c14:	1a69      	subs	r1, r5, r1
    y  = HEIGHT - y - 1;
   b9c16:	b224      	sxth	r4, r4
    x -= (w-1);
   b9c18:	b209      	sxth	r1, r1
  else      drawFastHLineInternal(x, y, w, color);
   b9c1a:	9603      	str	r6, [sp, #12]
   b9c1c:	4622      	mov	r2, r4
}
   b9c1e:	bc70      	pop	{r4, r5, r6}
  else      drawFastHLineInternal(x, y, w, color);
   b9c20:	f7ff bf16 	b.w	b9a50 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    y -= (w-1);
   b9c24:	8945      	ldrh	r5, [r0, #10]
   b9c26:	4419      	add	r1, r3
   b9c28:	1a69      	subs	r1, r5, r1
   b9c2a:	b209      	sxth	r1, r1
    break;
   b9c2c:	e7e7      	b.n	b9bfe <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>

000b9c2e <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
  int16_t x, int16_t y, int16_t h, uint16_t color) {
   b9c2e:	b430      	push	{r4, r5}
   b9c30:	4614      	mov	r4, r2
  switch(rotation) {
   b9c32:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t h, uint16_t color) {
   b9c34:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  switch(rotation) {
   b9c38:	2a02      	cmp	r2, #2
   b9c3a:	d00d      	beq.n	b9c58 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x2a>
   b9c3c:	2a03      	cmp	r2, #3
   b9c3e:	d018      	beq.n	b9c72 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x44>
   b9c40:	2a01      	cmp	r2, #1
   b9c42:	d111      	bne.n	b9c68 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    x -= (h-1);
   b9c44:	18e2      	adds	r2, r4, r3
   b9c46:	8904      	ldrh	r4, [r0, #8]
   b9c48:	1aa4      	subs	r4, r4, r2
   b9c4a:	b224      	sxth	r4, r4
  if(bSwap) drawFastHLineInternal(x, y, h, color);
   b9c4c:	9502      	str	r5, [sp, #8]
   b9c4e:	460a      	mov	r2, r1
   b9c50:	4621      	mov	r1, r4
}
   b9c52:	bc30      	pop	{r4, r5}
  if(bSwap) drawFastHLineInternal(x, y, h, color);
   b9c54:	f7ff befc 	b.w	b9a50 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    x = WIDTH  - x - 1;
   b9c58:	8902      	ldrh	r2, [r0, #8]
   b9c5a:	43c9      	mvns	r1, r1
   b9c5c:	4411      	add	r1, r2
    y -= (h-1);
   b9c5e:	18e2      	adds	r2, r4, r3
   b9c60:	8944      	ldrh	r4, [r0, #10]
   b9c62:	1aa4      	subs	r4, r4, r2
    x = WIDTH  - x - 1;
   b9c64:	b209      	sxth	r1, r1
    y -= (h-1);
   b9c66:	b224      	sxth	r4, r4
  else      drawFastVLineInternal(x, y, h, color);
   b9c68:	9502      	str	r5, [sp, #8]
   b9c6a:	4622      	mov	r2, r4
}
   b9c6c:	bc30      	pop	{r4, r5}
  else      drawFastVLineInternal(x, y, h, color);
   b9c6e:	f7ff bf33 	b.w	b9ad8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y = HEIGHT - y - 1;
   b9c72:	8942      	ldrh	r2, [r0, #10]
   b9c74:	43c9      	mvns	r1, r1
   b9c76:	4411      	add	r1, r2
   b9c78:	b209      	sxth	r1, r1
    break;
   b9c7a:	e7e7      	b.n	b9c4c <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>

000b9c7c <_ZN16Adafruit_SSD13067displayEv>:
void Adafruit_SSD1306::display(void) {
   b9c7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b9c80:	4604      	mov	r4, r0
  TRANSACTION_START
   b9c82:	6a80      	ldr	r0, [r0, #40]	; 0x28
   b9c84:	2800      	cmp	r0, #0
   b9c86:	d042      	beq.n	b9d0e <_ZN16Adafruit_SSD13067displayEv+0x92>
   b9c88:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b9c8a:	f001 f99f 	bl	bafcc <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(dlist1, sizeof(dlist1));
   b9c8e:	4947      	ldr	r1, [pc, #284]	; (b9dac <_ZN16Adafruit_SSD13067displayEv+0x130>)
   b9c90:	2205      	movs	r2, #5
   b9c92:	4620      	mov	r0, r4
   b9c94:	f7ff fd2d 	bl	b96f2 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(WIDTH - 1); // Column end address
   b9c98:	8921      	ldrh	r1, [r4, #8]
   b9c9a:	3901      	subs	r1, #1
   b9c9c:	4620      	mov	r0, r4
   b9c9e:	b2c9      	uxtb	r1, r1
   b9ca0:	f7ff fcb8 	bl	b9614 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   b9ca4:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   b9ca8:	1dde      	adds	r6, r3, #7
   b9caa:	bf48      	it	mi
   b9cac:	f103 060e 	addmi.w	r6, r3, #14
  if(wire) { // I2C
   b9cb0:	e9d4 050a 	ldrd	r0, r5, [r4, #40]	; 0x28
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   b9cb4:	8923      	ldrh	r3, [r4, #8]
   b9cb6:	10f6      	asrs	r6, r6, #3
   b9cb8:	fb13 f606 	smulbb	r6, r3, r6
  uint8_t *ptr   = buffer;
   b9cbc:	fa15 f686 	uxtah	r6, r5, r6
  if(wire) { // I2C
   b9cc0:	2800      	cmp	r0, #0
   b9cc2:	d03a      	beq.n	b9d3a <_ZN16Adafruit_SSD13067displayEv+0xbe>
    wire->beginTransmission(i2caddr);
   b9cc4:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b9cc8:	f001 f98e 	bl	bafe8 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x40);
   b9ccc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b9cce:	6803      	ldr	r3, [r0, #0]
   b9cd0:	2140      	movs	r1, #64	; 0x40
   b9cd2:	689b      	ldr	r3, [r3, #8]
   b9cd4:	4798      	blx	r3
    uint8_t bytesOut = 1;
   b9cd6:	2701      	movs	r7, #1
    while(count--) {
   b9cd8:	42b5      	cmp	r5, r6
        wire->endTransmission();
   b9cda:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    while(count--) {
   b9cdc:	d024      	beq.n	b9d28 <_ZN16Adafruit_SSD13067displayEv+0xac>
      if(bytesOut >= WIRE_MAX) {
   b9cde:	2f1f      	cmp	r7, #31
   b9ce0:	d90c      	bls.n	b9cfc <_ZN16Adafruit_SSD13067displayEv+0x80>
        wire->endTransmission();
   b9ce2:	f001 f988 	bl	baff6 <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   b9ce6:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b9cea:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b9cec:	f001 f97c 	bl	bafe8 <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x40);
   b9cf0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b9cf2:	6803      	ldr	r3, [r0, #0]
   b9cf4:	2140      	movs	r1, #64	; 0x40
   b9cf6:	689b      	ldr	r3, [r3, #8]
   b9cf8:	4798      	blx	r3
        bytesOut = 1;
   b9cfa:	2701      	movs	r7, #1
      WIRE_WRITE(*ptr++);
   b9cfc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b9cfe:	f815 1b01 	ldrb.w	r1, [r5], #1
   b9d02:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   b9d04:	3701      	adds	r7, #1
      WIRE_WRITE(*ptr++);
   b9d06:	689b      	ldr	r3, [r3, #8]
   b9d08:	4798      	blx	r3
      bytesOut++;
   b9d0a:	b2ff      	uxtb	r7, r7
    while(count--) {
   b9d0c:	e7e4      	b.n	b9cd8 <_ZN16Adafruit_SSD13067displayEv+0x5c>
  TRANSACTION_START
   b9d0e:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b9d10:	b118      	cbz	r0, b9d1a <_ZN16Adafruit_SSD13067displayEv+0x9e>
   b9d12:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b9d16:	f000 fc2f 	bl	ba578 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b9d1a:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b9d1e:	2100      	movs	r1, #0
   b9d20:	b280      	uxth	r0, r0
   b9d22:	f001 faaa 	bl	bb27a <digitalWrite>
   b9d26:	e7b2      	b.n	b9c8e <_ZN16Adafruit_SSD13067displayEv+0x12>
    wire->endTransmission();
   b9d28:	f001 f965 	bl	baff6 <_ZN7TwoWire15endTransmissionEv>
  TRANSACTION_END
   b9d2c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b9d2e:	b378      	cbz	r0, b9d90 <_ZN16Adafruit_SSD13067displayEv+0x114>
   b9d30:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   b9d32:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b9d36:	f001 b949 	b.w	bafcc <_ZN7TwoWire8setSpeedEm>
    SSD1306_MODE_DATA
   b9d3a:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   b9d3e:	2101      	movs	r1, #1
   b9d40:	b280      	uxth	r0, r0
   b9d42:	f001 fa9a 	bl	bb27a <digitalWrite>
    while(count--) SPIwrite(*ptr++);
   b9d46:	42ae      	cmp	r6, r5
   b9d48:	d0f0      	beq.n	b9d2c <_ZN16Adafruit_SSD13067displayEv+0xb0>
  if(spi) {
   b9d4a:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(count--) SPIwrite(*ptr++);
   b9d4c:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
   b9d50:	b118      	cbz	r0, b9d5a <_ZN16Adafruit_SSD13067displayEv+0xde>
    (void)spi->transfer(d);
   b9d52:	4649      	mov	r1, r9
   b9d54:	f000 fc7e 	bl	ba654 <_ZN8SPIClass8transferEh>
   b9d58:	e7f5      	b.n	b9d46 <_ZN16Adafruit_SSD13067displayEv+0xca>
   b9d5a:	2708      	movs	r7, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b9d5c:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b9d60:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b9d64:	ea09 0108 	and.w	r1, r9, r8
   b9d68:	b280      	uxth	r0, r0
   b9d6a:	f001 fa86 	bl	bb27a <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b9d6e:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b9d72:	2101      	movs	r1, #1
   b9d74:	b280      	uxth	r0, r0
   b9d76:	f001 fa80 	bl	bb27a <digitalWrite>
      digitalWrite(clkPin , LOW);
   b9d7a:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b9d7e:	2100      	movs	r1, #0
   b9d80:	b280      	uxth	r0, r0
   b9d82:	f001 fa7a 	bl	bb27a <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b9d86:	3f01      	subs	r7, #1
   b9d88:	ea4f 0858 	mov.w	r8, r8, lsr #1
   b9d8c:	d1e8      	bne.n	b9d60 <_ZN16Adafruit_SSD13067displayEv+0xe4>
   b9d8e:	e7da      	b.n	b9d46 <_ZN16Adafruit_SSD13067displayEv+0xca>
  TRANSACTION_END
   b9d90:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b9d94:	2101      	movs	r1, #1
   b9d96:	b280      	uxth	r0, r0
   b9d98:	f001 fa6f 	bl	bb27a <digitalWrite>
   b9d9c:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b9d9e:	b118      	cbz	r0, b9da8 <_ZN16Adafruit_SSD13067displayEv+0x12c>
}
   b9da0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  TRANSACTION_END
   b9da4:	f000 bbce 	b.w	ba544 <_ZN8SPIClass14endTransactionEv>
}
   b9da8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b9dac:	000bd32c 	.word	0x000bd32c

000b9db0 <_ZN12ChainableLEDC1Ehhh>:
// Forward declaration
float hue2rgb(float p, float q, float t);

// --------------------------------------------------------------------------------------

ChainableLED::ChainableLED(byte clk_pin, byte data_pin, byte number_of_leds) :
   b9db0:	b510      	push	{r4, lr}
   b9db2:	4604      	mov	r4, r0
    _clk_pin(clk_pin), _data_pin(data_pin), _num_leds(number_of_leds)
   b9db4:	7001      	strb	r1, [r0, #0]
   b9db6:	7042      	strb	r2, [r0, #1]
   b9db8:	7083      	strb	r3, [r0, #2]
{
    _led_state = (byte*) calloc(_num_leds*3, sizeof(byte));
   b9dba:	2101      	movs	r1, #1
   b9dbc:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   b9dc0:	f001 fb5a 	bl	bb478 <calloc>
   b9dc4:	6060      	str	r0, [r4, #4]
}
   b9dc6:	4620      	mov	r0, r4
   b9dc8:	bd10      	pop	{r4, pc}

000b9dca <_ZN12ChainableLEDD1Ev>:

ChainableLED::~ChainableLED()
   b9dca:	b510      	push	{r4, lr}
   b9dcc:	4604      	mov	r4, r0
{
    free(_led_state);
   b9dce:	6840      	ldr	r0, [r0, #4]
   b9dd0:	f000 fb1e 	bl	ba410 <free>
}
   b9dd4:	4620      	mov	r0, r4
   b9dd6:	bd10      	pop	{r4, pc}

000b9dd8 <_ZN12ChainableLED3clkEv>:
    for (byte i=0; i<_num_leds; i++)
        setColorRGB(i, 0, 0, 0);
}

void ChainableLED::clk(void)
{
   b9dd8:	b510      	push	{r4, lr}
    digitalWrite(_clk_pin, LOW);
   b9dda:	2100      	movs	r1, #0
{
   b9ddc:	4604      	mov	r4, r0
    digitalWrite(_clk_pin, LOW);
   b9dde:	7800      	ldrb	r0, [r0, #0]
   b9de0:	f001 fa4b 	bl	bb27a <digitalWrite>
   b9de4:	2014      	movs	r0, #20
   b9de6:	f000 f917 	bl	ba018 <HAL_Delay_Microseconds>
    delayMicroseconds(_CLK_PULSE_DELAY);
    digitalWrite(_clk_pin, HIGH);
   b9dea:	7820      	ldrb	r0, [r4, #0]
   b9dec:	2101      	movs	r1, #1
   b9dee:	f001 fa44 	bl	bb27a <digitalWrite>
    delayMicroseconds(_CLK_PULSE_DELAY);
}
   b9df2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b9df6:	2014      	movs	r0, #20
   b9df8:	f000 b90e 	b.w	ba018 <HAL_Delay_Microseconds>

000b9dfc <_ZN12ChainableLED8sendByteEh>:

void ChainableLED::sendByte(byte b)
{
   b9dfc:	b570      	push	{r4, r5, r6, lr}
   b9dfe:	4606      	mov	r6, r0
   b9e00:	460c      	mov	r4, r1
   b9e02:	2508      	movs	r5, #8
    // Send one bit at a time, starting with the MSB
    for (byte i=0; i<8; i++)
    {
        // If MSB is 1, write one and clock it, else write 0 and clock
        if ((b & 0x80) != 0)
   b9e04:	0623      	lsls	r3, r4, #24
            digitalWrite(_data_pin, HIGH);
   b9e06:	bf4c      	ite	mi
   b9e08:	2101      	movmi	r1, #1
        else
            digitalWrite(_data_pin, LOW);
   b9e0a:	2100      	movpl	r1, #0
            digitalWrite(_data_pin, HIGH);
   b9e0c:	7870      	ldrb	r0, [r6, #1]
            digitalWrite(_data_pin, LOW);
   b9e0e:	f001 fa34 	bl	bb27a <digitalWrite>
    for (byte i=0; i<8; i++)
   b9e12:	3d01      	subs	r5, #1
        clk();
   b9e14:	4630      	mov	r0, r6
   b9e16:	f7ff ffdf 	bl	b9dd8 <_ZN12ChainableLED3clkEv>

        // Advance to the next bit to send
        b <<= 1;
   b9e1a:	0064      	lsls	r4, r4, #1
    for (byte i=0; i<8; i++)
   b9e1c:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
        b <<= 1;
   b9e20:	b2e4      	uxtb	r4, r4
    for (byte i=0; i<8; i++)
   b9e22:	d1ef      	bne.n	b9e04 <_ZN12ChainableLED8sendByteEh+0x8>
    }
}
   b9e24:	bd70      	pop	{r4, r5, r6, pc}

000b9e26 <_ZN12ChainableLED9sendColorEhhh>:

void ChainableLED::sendColor(byte red, byte green, byte blue)
{
   b9e26:	b573      	push	{r0, r1, r4, r5, r6, lr}
    // Start by sending a byte with the format "1 1 /B7 /B6 /G7 /G6 /R7 /R6"
    byte prefix = 0b11000000;
    if ((blue & 0x80) == 0)     prefix|= 0b00100000;
   b9e28:	f013 0f80 	tst.w	r3, #128	; 0x80
{
   b9e2c:	461e      	mov	r6, r3
   b9e2e:	460c      	mov	r4, r1
   b9e30:	4615      	mov	r5, r2
    if ((blue & 0x80) == 0)     prefix|= 0b00100000;
   b9e32:	bf14      	ite	ne
   b9e34:	21c0      	movne	r1, #192	; 0xc0
   b9e36:	21e0      	moveq	r1, #224	; 0xe0
    if ((blue & 0x40) == 0)     prefix|= 0b00010000;
   b9e38:	0673      	lsls	r3, r6, #25
   b9e3a:	bf58      	it	pl
   b9e3c:	f041 0110 	orrpl.w	r1, r1, #16
    if ((green & 0x80) == 0)    prefix|= 0b00001000;
   b9e40:	062a      	lsls	r2, r5, #24
   b9e42:	bf58      	it	pl
   b9e44:	f041 0108 	orrpl.w	r1, r1, #8
    if ((green & 0x40) == 0)    prefix|= 0b00000100;
   b9e48:	066b      	lsls	r3, r5, #25
   b9e4a:	bf58      	it	pl
   b9e4c:	f041 0104 	orrpl.w	r1, r1, #4
    if ((red & 0x80) == 0)      prefix|= 0b00000010;
   b9e50:	0622      	lsls	r2, r4, #24
   b9e52:	bf58      	it	pl
   b9e54:	f041 0102 	orrpl.w	r1, r1, #2
    if ((red & 0x40) == 0)      prefix|= 0b00000001;
   b9e58:	0663      	lsls	r3, r4, #25
   b9e5a:	bf58      	it	pl
   b9e5c:	f041 0101 	orrpl.w	r1, r1, #1
    sendByte(prefix);
   b9e60:	9001      	str	r0, [sp, #4]
   b9e62:	f7ff ffcb 	bl	b9dfc <_ZN12ChainableLED8sendByteEh>

    // Now must send the 3 colors
    sendByte(blue);
   b9e66:	9801      	ldr	r0, [sp, #4]
   b9e68:	4631      	mov	r1, r6
   b9e6a:	f7ff ffc7 	bl	b9dfc <_ZN12ChainableLED8sendByteEh>
    sendByte(green);
   b9e6e:	9801      	ldr	r0, [sp, #4]
   b9e70:	4629      	mov	r1, r5
   b9e72:	f7ff ffc3 	bl	b9dfc <_ZN12ChainableLED8sendByteEh>
    sendByte(red);
   b9e76:	9801      	ldr	r0, [sp, #4]
   b9e78:	4621      	mov	r1, r4
}
   b9e7a:	b002      	add	sp, #8
   b9e7c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    sendByte(red);
   b9e80:	f7ff bfbc 	b.w	b9dfc <_ZN12ChainableLED8sendByteEh>

000b9e84 <_ZN12ChainableLED11setColorRGBEhhhh>:

void ChainableLED::setColorRGB(byte led, byte red, byte green, byte blue)
{
   b9e84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b9e88:	4604      	mov	r4, r0
   b9e8a:	460f      	mov	r7, r1
    // Send data frame prefix (32x "0")
    sendByte(0x00);
   b9e8c:	2100      	movs	r1, #0
{
   b9e8e:	4690      	mov	r8, r2
   b9e90:	4699      	mov	r9, r3
   b9e92:	f89d a020 	ldrb.w	sl, [sp, #32]
    sendByte(0x00);
   b9e96:	f7ff ffb1 	bl	b9dfc <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   b9e9a:	2100      	movs	r1, #0
   b9e9c:	4620      	mov	r0, r4
   b9e9e:	f7ff ffad 	bl	b9dfc <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   b9ea2:	2100      	movs	r1, #0
   b9ea4:	4620      	mov	r0, r4
   b9ea6:	f7ff ffa9 	bl	b9dfc <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   b9eaa:	2100      	movs	r1, #0
   b9eac:	4620      	mov	r0, r4
   b9eae:	f7ff ffa5 	bl	b9dfc <_ZN12ChainableLED8sendByteEh>
   b9eb2:	2600      	movs	r6, #0

    // Send color data for each one of the leds
    for (byte i=0; i<_num_leds; i++)
   b9eb4:	78a3      	ldrb	r3, [r4, #2]
   b9eb6:	b2f5      	uxtb	r5, r6
   b9eb8:	42ab      	cmp	r3, r5
   b9eba:	d919      	bls.n	b9ef0 <_ZN12ChainableLED11setColorRGBEhhhh+0x6c>
    {
        if (i == led)
        {
            _led_state[i*3 + _CL_RED] = red;
   b9ebc:	eb05 0045 	add.w	r0, r5, r5, lsl #1
        if (i == led)
   b9ec0:	42af      	cmp	r7, r5
            _led_state[i*3 + _CL_GREEN] = green;
   b9ec2:	f100 0201 	add.w	r2, r0, #1
            _led_state[i*3 + _CL_BLUE] = blue;
   b9ec6:	f100 0302 	add.w	r3, r0, #2
        if (i == led)
   b9eca:	d108      	bne.n	b9ede <_ZN12ChainableLED11setColorRGBEhhhh+0x5a>
            _led_state[i*3 + _CL_RED] = red;
   b9ecc:	6861      	ldr	r1, [r4, #4]
   b9ece:	f801 8000 	strb.w	r8, [r1, r0]
            _led_state[i*3 + _CL_GREEN] = green;
   b9ed2:	6861      	ldr	r1, [r4, #4]
   b9ed4:	f801 9002 	strb.w	r9, [r1, r2]
            _led_state[i*3 + _CL_BLUE] = blue;
   b9ed8:	6861      	ldr	r1, [r4, #4]
   b9eda:	f801 a003 	strb.w	sl, [r1, r3]
        }

        sendColor(_led_state[i*3 + _CL_RED],
   b9ede:	6861      	ldr	r1, [r4, #4]
   b9ee0:	5ccb      	ldrb	r3, [r1, r3]
   b9ee2:	5c8a      	ldrb	r2, [r1, r2]
   b9ee4:	5c09      	ldrb	r1, [r1, r0]
   b9ee6:	4620      	mov	r0, r4
   b9ee8:	f7ff ff9d 	bl	b9e26 <_ZN12ChainableLED9sendColorEhhh>
    for (byte i=0; i<_num_leds; i++)
   b9eec:	3601      	adds	r6, #1
   b9eee:	e7e1      	b.n	b9eb4 <_ZN12ChainableLED11setColorRGBEhhhh+0x30>
                  _led_state[i*3 + _CL_GREEN],
                  _led_state[i*3 + _CL_BLUE]);
    }

    // Terminate data frame (32x "0")
    sendByte(0x00);
   b9ef0:	4620      	mov	r0, r4
   b9ef2:	2100      	movs	r1, #0
   b9ef4:	f7ff ff82 	bl	b9dfc <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   b9ef8:	4620      	mov	r0, r4
   b9efa:	2100      	movs	r1, #0
   b9efc:	f7ff ff7e 	bl	b9dfc <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   b9f00:	4620      	mov	r0, r4
   b9f02:	2100      	movs	r1, #0
   b9f04:	f7ff ff7a 	bl	b9dfc <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   b9f08:	4620      	mov	r0, r4
   b9f0a:	2100      	movs	r1, #0
}
   b9f0c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    sendByte(0x00);
   b9f10:	f7ff bf74 	b.w	b9dfc <_ZN12ChainableLED8sendByteEh>

000b9f14 <_ZN12ChainableLED4initEv>:
{
   b9f14:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b9f16:	4604      	mov	r4, r0
    pinMode(_clk_pin, OUTPUT);
   b9f18:	2101      	movs	r1, #1
   b9f1a:	7800      	ldrb	r0, [r0, #0]
   b9f1c:	f001 f99c 	bl	bb258 <pinMode>
    pinMode(_data_pin, OUTPUT);
   b9f20:	7860      	ldrb	r0, [r4, #1]
   b9f22:	2101      	movs	r1, #1
   b9f24:	f001 f998 	bl	bb258 <pinMode>
   b9f28:	2500      	movs	r5, #0
        setColorRGB(i, 0, 0, 0);
   b9f2a:	462e      	mov	r6, r5
    for (byte i=0; i<_num_leds; i++)
   b9f2c:	78a3      	ldrb	r3, [r4, #2]
   b9f2e:	b2e9      	uxtb	r1, r5
   b9f30:	428b      	cmp	r3, r1
   b9f32:	d907      	bls.n	b9f44 <_ZN12ChainableLED4initEv+0x30>
        setColorRGB(i, 0, 0, 0);
   b9f34:	2300      	movs	r3, #0
   b9f36:	9600      	str	r6, [sp, #0]
   b9f38:	461a      	mov	r2, r3
   b9f3a:	4620      	mov	r0, r4
   b9f3c:	f7ff ffa2 	bl	b9e84 <_ZN12ChainableLED11setColorRGBEhhhh>
    for (byte i=0; i<_num_leds; i++)
   b9f40:	3501      	adds	r5, #1
   b9f42:	e7f3      	b.n	b9f2c <_ZN12ChainableLED4initEv+0x18>
}
   b9f44:	b002      	add	sp, #8
   b9f46:	bd70      	pop	{r4, r5, r6, pc}

000b9f48 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b9f48:	b508      	push	{r3, lr}
   b9f4a:	4b02      	ldr	r3, [pc, #8]	; (b9f54 <netdb_freeaddrinfo+0xc>)
   b9f4c:	681b      	ldr	r3, [r3, #0]
   b9f4e:	689b      	ldr	r3, [r3, #8]
   b9f50:	9301      	str	r3, [sp, #4]
   b9f52:	bd08      	pop	{r3, pc}
   b9f54:	00030268 	.word	0x00030268

000b9f58 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b9f58:	b508      	push	{r3, lr}
   b9f5a:	4b02      	ldr	r3, [pc, #8]	; (b9f64 <netdb_getaddrinfo+0xc>)
   b9f5c:	681b      	ldr	r3, [r3, #0]
   b9f5e:	68db      	ldr	r3, [r3, #12]
   b9f60:	9301      	str	r3, [sp, #4]
   b9f62:	bd08      	pop	{r3, pc}
   b9f64:	00030268 	.word	0x00030268

000b9f68 <hal_pin_validate_function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, hal_pin_map, hal_pin_info_t*(void))
DYNALIB_FN(1, hal_gpio, hal_pin_validate_function, PinFunction(hal_pin_t, PinFunction))
   b9f68:	b508      	push	{r3, lr}
   b9f6a:	4b02      	ldr	r3, [pc, #8]	; (b9f74 <hal_pin_validate_function+0xc>)
   b9f6c:	681b      	ldr	r3, [r3, #0]
   b9f6e:	685b      	ldr	r3, [r3, #4]
   b9f70:	9301      	str	r3, [sp, #4]
   b9f72:	bd08      	pop	{r3, pc}
   b9f74:	0003022c 	.word	0x0003022c

000b9f78 <hal_gpio_mode>:
DYNALIB_FN(2, hal_gpio, hal_gpio_mode, void(hal_pin_t, PinMode))
   b9f78:	b508      	push	{r3, lr}
   b9f7a:	4b02      	ldr	r3, [pc, #8]	; (b9f84 <hal_gpio_mode+0xc>)
   b9f7c:	681b      	ldr	r3, [r3, #0]
   b9f7e:	689b      	ldr	r3, [r3, #8]
   b9f80:	9301      	str	r3, [sp, #4]
   b9f82:	bd08      	pop	{r3, pc}
   b9f84:	0003022c 	.word	0x0003022c

000b9f88 <hal_gpio_get_mode>:
DYNALIB_FN(3, hal_gpio, hal_gpio_get_mode, PinMode(hal_pin_t))
   b9f88:	b508      	push	{r3, lr}
   b9f8a:	4b02      	ldr	r3, [pc, #8]	; (b9f94 <hal_gpio_get_mode+0xc>)
   b9f8c:	681b      	ldr	r3, [r3, #0]
   b9f8e:	68db      	ldr	r3, [r3, #12]
   b9f90:	9301      	str	r3, [sp, #4]
   b9f92:	bd08      	pop	{r3, pc}
   b9f94:	0003022c 	.word	0x0003022c

000b9f98 <hal_gpio_write>:
DYNALIB_FN(4, hal_gpio, hal_gpio_write, void(hal_pin_t, uint8_t))
   b9f98:	b508      	push	{r3, lr}
   b9f9a:	4b02      	ldr	r3, [pc, #8]	; (b9fa4 <hal_gpio_write+0xc>)
   b9f9c:	681b      	ldr	r3, [r3, #0]
   b9f9e:	691b      	ldr	r3, [r3, #16]
   b9fa0:	9301      	str	r3, [sp, #4]
   b9fa2:	bd08      	pop	{r3, pc}
   b9fa4:	0003022c 	.word	0x0003022c

000b9fa8 <hal_gpio_read>:
DYNALIB_FN(5, hal_gpio, hal_gpio_read, int32_t(hal_pin_t))
   b9fa8:	b508      	push	{r3, lr}
   b9faa:	4b02      	ldr	r3, [pc, #8]	; (b9fb4 <hal_gpio_read+0xc>)
   b9fac:	681b      	ldr	r3, [r3, #0]
   b9fae:	695b      	ldr	r3, [r3, #20]
   b9fb0:	9301      	str	r3, [sp, #4]
   b9fb2:	bd08      	pop	{r3, pc}
   b9fb4:	0003022c 	.word	0x0003022c

000b9fb8 <hal_interrupt_enable_all>:
DYNALIB_FN(6, hal_gpio, hal_interrupt_attach, int(uint16_t, hal_interrupt_handler_t, void*, InterruptMode, hal_interrupt_extra_configuration_t*))
DYNALIB_FN(7, hal_gpio, hal_interrupt_detach, int(uint16_t))
DYNALIB_FN(8, hal_gpio, hal_interrupt_enable_all, void(void))
   b9fb8:	b508      	push	{r3, lr}
   b9fba:	4b02      	ldr	r3, [pc, #8]	; (b9fc4 <hal_interrupt_enable_all+0xc>)
   b9fbc:	681b      	ldr	r3, [r3, #0]
   b9fbe:	6a1b      	ldr	r3, [r3, #32]
   b9fc0:	9301      	str	r3, [sp, #4]
   b9fc2:	bd08      	pop	{r3, pc}
   b9fc4:	0003022c 	.word	0x0003022c

000b9fc8 <hal_interrupt_disable_all>:
DYNALIB_FN(9, hal_gpio, hal_interrupt_disable_all, void(void))
   b9fc8:	b508      	push	{r3, lr}
   b9fca:	4b02      	ldr	r3, [pc, #8]	; (b9fd4 <hal_interrupt_disable_all+0xc>)
   b9fcc:	681b      	ldr	r3, [r3, #0]
   b9fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b9fd0:	9301      	str	r3, [sp, #4]
   b9fd2:	bd08      	pop	{r3, pc}
   b9fd4:	0003022c 	.word	0x0003022c

000b9fd8 <hal_adc_read>:

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(hal_pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   b9fd8:	b508      	push	{r3, lr}
   b9fda:	4b02      	ldr	r3, [pc, #8]	; (b9fe4 <hal_adc_read+0xc>)
   b9fdc:	681b      	ldr	r3, [r3, #0]
   b9fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b9fe0:	9301      	str	r3, [sp, #4]
   b9fe2:	bd08      	pop	{r3, pc}
   b9fe4:	0003022c 	.word	0x0003022c

000b9fe8 <hal_gpio_pulse_in>:

DYNALIB_FN(16, hal_gpio, hal_interrupt_set_system_handler, uint8_t(hal_irq_t, const hal_interrupt_callback_t*, hal_interrupt_callback_t*, void*))
DYNALIB_FN(17, hal_gpio, hal_interrupt_get_system_handler, uint8_t(hal_irq_t, hal_interrupt_callback_t*, void*))
DYNALIB_FN(18, hal_gpio, hal_interrupt_trigger_system, void(hal_irq_t, void*))

DYNALIB_FN(19, hal_gpio, hal_gpio_pulse_in, uint32_t(hal_pin_t, uint16_t))
   b9fe8:	b508      	push	{r3, lr}
   b9fea:	4b02      	ldr	r3, [pc, #8]	; (b9ff4 <hal_gpio_pulse_in+0xc>)
   b9fec:	681b      	ldr	r3, [r3, #0]
   b9fee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b9ff0:	9301      	str	r3, [sp, #4]
   b9ff2:	bd08      	pop	{r3, pc}
   b9ff4:	0003022c 	.word	0x0003022c

000b9ff8 <hal_pwm_write_with_frequency_ext>:
DYNALIB_FN(26, hal_gpio, HAL_DAC_Set_Resolution, void(hal_pin_t, uint8_t))
DYNALIB_FN(27, hal_gpio, HAL_DAC_Enable_Buffer, void(hal_pin_t pin, uint8_t state))
DYNALIB_FN(28, hal_gpio, hal_pwm_get_resolution, uint8_t(uint16_t))
DYNALIB_FN(29, hal_gpio, hal_pwm_set_resolution, void(uint16_t, uint8_t))
DYNALIB_FN(30, hal_gpio, hal_pwm_write_ext, void(uint16_t, uint32_t))
DYNALIB_FN(31, hal_gpio, hal_pwm_write_with_frequency_ext, void(uint16_t, uint32_t, uint32_t))
   b9ff8:	b508      	push	{r3, lr}
   b9ffa:	4b02      	ldr	r3, [pc, #8]	; (ba004 <hal_pwm_write_with_frequency_ext+0xc>)
   b9ffc:	681b      	ldr	r3, [r3, #0]
   b9ffe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   ba000:	9301      	str	r3, [sp, #4]
   ba002:	bd08      	pop	{r3, pc}
   ba004:	0003022c 	.word	0x0003022c

000ba008 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   ba008:	b508      	push	{r3, lr}
   ba00a:	4b02      	ldr	r3, [pc, #8]	; (ba014 <HAL_RNG_GetRandomNumber+0xc>)
   ba00c:	681b      	ldr	r3, [r3, #0]
   ba00e:	685b      	ldr	r3, [r3, #4]
   ba010:	9301      	str	r3, [sp, #4]
   ba012:	bd08      	pop	{r3, pc}
   ba014:	00030218 	.word	0x00030218

000ba018 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   ba018:	b508      	push	{r3, lr}
   ba01a:	4b02      	ldr	r3, [pc, #8]	; (ba024 <HAL_Delay_Microseconds+0xc>)
   ba01c:	681b      	ldr	r3, [r3, #0]
   ba01e:	68db      	ldr	r3, [r3, #12]
   ba020:	9301      	str	r3, [sp, #4]
   ba022:	bd08      	pop	{r3, pc}
   ba024:	00030218 	.word	0x00030218

000ba028 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   ba028:	b508      	push	{r3, lr}
   ba02a:	4b02      	ldr	r3, [pc, #8]	; (ba034 <HAL_Timer_Get_Milli_Seconds+0xc>)
   ba02c:	681b      	ldr	r3, [r3, #0]
   ba02e:	695b      	ldr	r3, [r3, #20]
   ba030:	9301      	str	r3, [sp, #4]
   ba032:	bd08      	pop	{r3, pc}
   ba034:	00030218 	.word	0x00030218

000ba038 <HAL_EEPROM_Init>:
DYNALIB_FN(BASE_IDX + 5, hal, hal_rtc_get_unixtime_deprecated, time32_t(void))
DYNALIB_FN(BASE_IDX + 6, hal, hal_rtc_set_unixtime_deprecated, void(time32_t))

DYNALIB_FN(BASE_IDX + 7, hal, hal_rtc_set_alarm, int(const struct timeval*, uint32_t, hal_rtc_alarm_handler, void*, void*))

DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
   ba038:	b508      	push	{r3, lr}
   ba03a:	4b02      	ldr	r3, [pc, #8]	; (ba044 <HAL_EEPROM_Init+0xc>)
   ba03c:	681b      	ldr	r3, [r3, #0]
   ba03e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   ba040:	9301      	str	r3, [sp, #4]
   ba042:	bd08      	pop	{r3, pc}
   ba044:	00030218 	.word	0x00030218

000ba048 <HAL_EEPROM_Read>:
DYNALIB_FN(BASE_IDX + 9, hal, HAL_EEPROM_Read, uint8_t(uint32_t))
   ba048:	b508      	push	{r3, lr}
   ba04a:	4b02      	ldr	r3, [pc, #8]	; (ba054 <HAL_EEPROM_Read+0xc>)
   ba04c:	681b      	ldr	r3, [r3, #0]
   ba04e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   ba050:	9301      	str	r3, [sp, #4]
   ba052:	bd08      	pop	{r3, pc}
   ba054:	00030218 	.word	0x00030218

000ba058 <HAL_EEPROM_Put>:
DYNALIB_FN(BASE_IDX + 12, hal, HAL_disable_irq, int(void))
DYNALIB_FN(BASE_IDX + 13, hal, HAL_enable_irq, void(int))
DYNALIB_FN(BASE_IDX + 14, hal, hal_rtc_cancel_alarm, void(void))

DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
   ba058:	b508      	push	{r3, lr}
   ba05a:	4b02      	ldr	r3, [pc, #8]	; (ba064 <HAL_EEPROM_Put+0xc>)
   ba05c:	681b      	ldr	r3, [r3, #0]
   ba05e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   ba060:	9301      	str	r3, [sp, #4]
   ba062:	bd08      	pop	{r3, pc}
   ba064:	00030218 	.word	0x00030218

000ba068 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   ba068:	b508      	push	{r3, lr}
   ba06a:	4b02      	ldr	r3, [pc, #8]	; (ba074 <os_mutex_recursive_create+0xc>)
   ba06c:	681b      	ldr	r3, [r3, #0]
   ba06e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   ba070:	9301      	str	r3, [sp, #4]
   ba072:	bd08      	pop	{r3, pc}
   ba074:	00030248 	.word	0x00030248

000ba078 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   ba078:	b508      	push	{r3, lr}
   ba07a:	4b02      	ldr	r3, [pc, #8]	; (ba084 <inet_inet_ntop+0xc>)
   ba07c:	681b      	ldr	r3, [r3, #0]
   ba07e:	695b      	ldr	r3, [r3, #20]
   ba080:	9301      	str	r3, [sp, #4]
   ba082:	bd08      	pop	{r3, pc}
   ba084:	00030264 	.word	0x00030264

000ba088 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   ba088:	b508      	push	{r3, lr}
   ba08a:	4b02      	ldr	r3, [pc, #8]	; (ba094 <hal_usart_write+0xc>)
   ba08c:	681b      	ldr	r3, [r3, #0]
   ba08e:	68db      	ldr	r3, [r3, #12]
   ba090:	9301      	str	r3, [sp, #4]
   ba092:	bd08      	pop	{r3, pc}
   ba094:	0003023c 	.word	0x0003023c

000ba098 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   ba098:	b508      	push	{r3, lr}
   ba09a:	4b02      	ldr	r3, [pc, #8]	; (ba0a4 <hal_usart_available+0xc>)
   ba09c:	681b      	ldr	r3, [r3, #0]
   ba09e:	691b      	ldr	r3, [r3, #16]
   ba0a0:	9301      	str	r3, [sp, #4]
   ba0a2:	bd08      	pop	{r3, pc}
   ba0a4:	0003023c 	.word	0x0003023c

000ba0a8 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   ba0a8:	b508      	push	{r3, lr}
   ba0aa:	4b02      	ldr	r3, [pc, #8]	; (ba0b4 <hal_usart_read+0xc>)
   ba0ac:	681b      	ldr	r3, [r3, #0]
   ba0ae:	695b      	ldr	r3, [r3, #20]
   ba0b0:	9301      	str	r3, [sp, #4]
   ba0b2:	bd08      	pop	{r3, pc}
   ba0b4:	0003023c 	.word	0x0003023c

000ba0b8 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   ba0b8:	b508      	push	{r3, lr}
   ba0ba:	4b02      	ldr	r3, [pc, #8]	; (ba0c4 <hal_usart_peek+0xc>)
   ba0bc:	681b      	ldr	r3, [r3, #0]
   ba0be:	699b      	ldr	r3, [r3, #24]
   ba0c0:	9301      	str	r3, [sp, #4]
   ba0c2:	bd08      	pop	{r3, pc}
   ba0c4:	0003023c 	.word	0x0003023c

000ba0c8 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   ba0c8:	b508      	push	{r3, lr}
   ba0ca:	4b02      	ldr	r3, [pc, #8]	; (ba0d4 <hal_usart_flush+0xc>)
   ba0cc:	681b      	ldr	r3, [r3, #0]
   ba0ce:	69db      	ldr	r3, [r3, #28]
   ba0d0:	9301      	str	r3, [sp, #4]
   ba0d2:	bd08      	pop	{r3, pc}
   ba0d4:	0003023c 	.word	0x0003023c

000ba0d8 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   ba0d8:	b508      	push	{r3, lr}
   ba0da:	4b02      	ldr	r3, [pc, #8]	; (ba0e4 <hal_usart_is_enabled+0xc>)
   ba0dc:	681b      	ldr	r3, [r3, #0]
   ba0de:	6a1b      	ldr	r3, [r3, #32]
   ba0e0:	9301      	str	r3, [sp, #4]
   ba0e2:	bd08      	pop	{r3, pc}
   ba0e4:	0003023c 	.word	0x0003023c

000ba0e8 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   ba0e8:	b508      	push	{r3, lr}
   ba0ea:	4b02      	ldr	r3, [pc, #8]	; (ba0f4 <hal_usart_available_data_for_write+0xc>)
   ba0ec:	681b      	ldr	r3, [r3, #0]
   ba0ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   ba0f0:	9301      	str	r3, [sp, #4]
   ba0f2:	bd08      	pop	{r3, pc}
   ba0f4:	0003023c 	.word	0x0003023c

000ba0f8 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   ba0f8:	b508      	push	{r3, lr}
   ba0fa:	4b02      	ldr	r3, [pc, #8]	; (ba104 <hal_usart_init_ex+0xc>)
   ba0fc:	681b      	ldr	r3, [r3, #0]
   ba0fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   ba100:	9301      	str	r3, [sp, #4]
   ba102:	bd08      	pop	{r3, pc}
   ba104:	0003023c 	.word	0x0003023c

000ba108 <hal_i2c_set_speed>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
   ba108:	b508      	push	{r3, lr}
   ba10a:	4b02      	ldr	r3, [pc, #8]	; (ba114 <hal_i2c_set_speed+0xc>)
   ba10c:	681b      	ldr	r3, [r3, #0]
   ba10e:	681b      	ldr	r3, [r3, #0]
   ba110:	9301      	str	r3, [sp, #4]
   ba112:	bd08      	pop	{r3, pc}
   ba114:	00030228 	.word	0x00030228

000ba118 <hal_i2c_begin>:
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   ba118:	b508      	push	{r3, lr}
   ba11a:	4b02      	ldr	r3, [pc, #8]	; (ba124 <hal_i2c_begin+0xc>)
   ba11c:	681b      	ldr	r3, [r3, #0]
   ba11e:	68db      	ldr	r3, [r3, #12]
   ba120:	9301      	str	r3, [sp, #4]
   ba122:	bd08      	pop	{r3, pc}
   ba124:	00030228 	.word	0x00030228

000ba128 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   ba128:	b508      	push	{r3, lr}
   ba12a:	4b02      	ldr	r3, [pc, #8]	; (ba134 <hal_i2c_begin_transmission+0xc>)
   ba12c:	681b      	ldr	r3, [r3, #0]
   ba12e:	699b      	ldr	r3, [r3, #24]
   ba130:	9301      	str	r3, [sp, #4]
   ba132:	bd08      	pop	{r3, pc}
   ba134:	00030228 	.word	0x00030228

000ba138 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   ba138:	b508      	push	{r3, lr}
   ba13a:	4b02      	ldr	r3, [pc, #8]	; (ba144 <hal_i2c_end_transmission+0xc>)
   ba13c:	681b      	ldr	r3, [r3, #0]
   ba13e:	69db      	ldr	r3, [r3, #28]
   ba140:	9301      	str	r3, [sp, #4]
   ba142:	bd08      	pop	{r3, pc}
   ba144:	00030228 	.word	0x00030228

000ba148 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   ba148:	b508      	push	{r3, lr}
   ba14a:	4b02      	ldr	r3, [pc, #8]	; (ba154 <hal_i2c_write+0xc>)
   ba14c:	681b      	ldr	r3, [r3, #0]
   ba14e:	6a1b      	ldr	r3, [r3, #32]
   ba150:	9301      	str	r3, [sp, #4]
   ba152:	bd08      	pop	{r3, pc}
   ba154:	00030228 	.word	0x00030228

000ba158 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   ba158:	b508      	push	{r3, lr}
   ba15a:	4b02      	ldr	r3, [pc, #8]	; (ba164 <hal_i2c_available+0xc>)
   ba15c:	681b      	ldr	r3, [r3, #0]
   ba15e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   ba160:	9301      	str	r3, [sp, #4]
   ba162:	bd08      	pop	{r3, pc}
   ba164:	00030228 	.word	0x00030228

000ba168 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   ba168:	b508      	push	{r3, lr}
   ba16a:	4b02      	ldr	r3, [pc, #8]	; (ba174 <hal_i2c_read+0xc>)
   ba16c:	681b      	ldr	r3, [r3, #0]
   ba16e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   ba170:	9301      	str	r3, [sp, #4]
   ba172:	bd08      	pop	{r3, pc}
   ba174:	00030228 	.word	0x00030228

000ba178 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   ba178:	b508      	push	{r3, lr}
   ba17a:	4b02      	ldr	r3, [pc, #8]	; (ba184 <hal_i2c_peek+0xc>)
   ba17c:	681b      	ldr	r3, [r3, #0]
   ba17e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   ba180:	9301      	str	r3, [sp, #4]
   ba182:	bd08      	pop	{r3, pc}
   ba184:	00030228 	.word	0x00030228

000ba188 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   ba188:	b508      	push	{r3, lr}
   ba18a:	4b02      	ldr	r3, [pc, #8]	; (ba194 <hal_i2c_flush+0xc>)
   ba18c:	681b      	ldr	r3, [r3, #0]
   ba18e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   ba190:	9301      	str	r3, [sp, #4]
   ba192:	bd08      	pop	{r3, pc}
   ba194:	00030228 	.word	0x00030228

000ba198 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   ba198:	b508      	push	{r3, lr}
   ba19a:	4b02      	ldr	r3, [pc, #8]	; (ba1a4 <hal_i2c_is_enabled+0xc>)
   ba19c:	681b      	ldr	r3, [r3, #0]
   ba19e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   ba1a0:	9301      	str	r3, [sp, #4]
   ba1a2:	bd08      	pop	{r3, pc}
   ba1a4:	00030228 	.word	0x00030228

000ba1a8 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   ba1a8:	b508      	push	{r3, lr}
   ba1aa:	4b02      	ldr	r3, [pc, #8]	; (ba1b4 <hal_i2c_init+0xc>)
   ba1ac:	681b      	ldr	r3, [r3, #0]
   ba1ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   ba1b0:	9301      	str	r3, [sp, #4]
   ba1b2:	bd08      	pop	{r3, pc}
   ba1b4:	00030228 	.word	0x00030228

000ba1b8 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   ba1b8:	b508      	push	{r3, lr}
   ba1ba:	4b02      	ldr	r3, [pc, #8]	; (ba1c4 <hal_spi_begin+0xc>)
   ba1bc:	681b      	ldr	r3, [r3, #0]
   ba1be:	681b      	ldr	r3, [r3, #0]
   ba1c0:	9301      	str	r3, [sp, #4]
   ba1c2:	bd08      	pop	{r3, pc}
   ba1c4:	00030230 	.word	0x00030230

000ba1c8 <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   ba1c8:	b508      	push	{r3, lr}
   ba1ca:	4b02      	ldr	r3, [pc, #8]	; (ba1d4 <hal_spi_transfer+0xc>)
   ba1cc:	681b      	ldr	r3, [r3, #0]
   ba1ce:	695b      	ldr	r3, [r3, #20]
   ba1d0:	9301      	str	r3, [sp, #4]
   ba1d2:	bd08      	pop	{r3, pc}
   ba1d4:	00030230 	.word	0x00030230

000ba1d8 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   ba1d8:	b508      	push	{r3, lr}
   ba1da:	4b02      	ldr	r3, [pc, #8]	; (ba1e4 <hal_spi_init+0xc>)
   ba1dc:	681b      	ldr	r3, [r3, #0]
   ba1de:	69db      	ldr	r3, [r3, #28]
   ba1e0:	9301      	str	r3, [sp, #4]
   ba1e2:	bd08      	pop	{r3, pc}
   ba1e4:	00030230 	.word	0x00030230

000ba1e8 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   ba1e8:	b508      	push	{r3, lr}
   ba1ea:	4b02      	ldr	r3, [pc, #8]	; (ba1f4 <hal_spi_is_enabled+0xc>)
   ba1ec:	681b      	ldr	r3, [r3, #0]
   ba1ee:	6a1b      	ldr	r3, [r3, #32]
   ba1f0:	9301      	str	r3, [sp, #4]
   ba1f2:	bd08      	pop	{r3, pc}
   ba1f4:	00030230 	.word	0x00030230

000ba1f8 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   ba1f8:	b508      	push	{r3, lr}
   ba1fa:	4b02      	ldr	r3, [pc, #8]	; (ba204 <hal_spi_info+0xc>)
   ba1fc:	681b      	ldr	r3, [r3, #0]
   ba1fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   ba200:	9301      	str	r3, [sp, #4]
   ba202:	bd08      	pop	{r3, pc}
   ba204:	00030230 	.word	0x00030230

000ba208 <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   ba208:	b508      	push	{r3, lr}
   ba20a:	4b02      	ldr	r3, [pc, #8]	; (ba214 <hal_spi_set_settings+0xc>)
   ba20c:	681b      	ldr	r3, [r3, #0]
   ba20e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   ba210:	9301      	str	r3, [sp, #4]
   ba212:	bd08      	pop	{r3, pc}
   ba214:	00030230 	.word	0x00030230

000ba218 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   ba218:	b508      	push	{r3, lr}
   ba21a:	4b02      	ldr	r3, [pc, #8]	; (ba224 <hal_spi_acquire+0xc>)
   ba21c:	681b      	ldr	r3, [r3, #0]
   ba21e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   ba220:	9301      	str	r3, [sp, #4]
   ba222:	bd08      	pop	{r3, pc}
   ba224:	00030230 	.word	0x00030230

000ba228 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   ba228:	b508      	push	{r3, lr}
   ba22a:	4b02      	ldr	r3, [pc, #8]	; (ba234 <hal_spi_release+0xc>)
   ba22c:	681b      	ldr	r3, [r3, #0]
   ba22e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   ba230:	9301      	str	r3, [sp, #4]
   ba232:	bd08      	pop	{r3, pc}
   ba234:	00030230 	.word	0x00030230

000ba238 <HAL_Tone_Start>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_peripherals)

DYNALIB_FN(0, hal_peripherals, HAL_Tone_Start, void(uint8_t, uint32_t, uint32_t))
   ba238:	b508      	push	{r3, lr}
   ba23a:	4b02      	ldr	r3, [pc, #8]	; (ba244 <HAL_Tone_Start+0xc>)
   ba23c:	681b      	ldr	r3, [r3, #0]
   ba23e:	681b      	ldr	r3, [r3, #0]
   ba240:	9301      	str	r3, [sp, #4]
   ba242:	bd08      	pop	{r3, pc}
   ba244:	00030224 	.word	0x00030224

000ba248 <HAL_Tone_Stop>:
DYNALIB_FN(1, hal_peripherals, HAL_Tone_Stop, void(uint8_t))
   ba248:	b508      	push	{r3, lr}
   ba24a:	4b02      	ldr	r3, [pc, #8]	; (ba254 <HAL_Tone_Stop+0xc>)
   ba24c:	681b      	ldr	r3, [r3, #0]
   ba24e:	685b      	ldr	r3, [r3, #4]
   ba250:	9301      	str	r3, [sp, #4]
   ba252:	bd08      	pop	{r3, pc}
   ba254:	00030224 	.word	0x00030224

000ba258 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   ba258:	b508      	push	{r3, lr}
   ba25a:	4b02      	ldr	r3, [pc, #8]	; (ba264 <HAL_USB_USART_Init+0xc>)
   ba25c:	681b      	ldr	r3, [r3, #0]
   ba25e:	681b      	ldr	r3, [r3, #0]
   ba260:	9301      	str	r3, [sp, #4]
   ba262:	bd08      	pop	{r3, pc}
   ba264:	0003024c 	.word	0x0003024c

000ba268 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   ba268:	b508      	push	{r3, lr}
   ba26a:	4b02      	ldr	r3, [pc, #8]	; (ba274 <HAL_USB_USART_Begin+0xc>)
   ba26c:	681b      	ldr	r3, [r3, #0]
   ba26e:	685b      	ldr	r3, [r3, #4]
   ba270:	9301      	str	r3, [sp, #4]
   ba272:	bd08      	pop	{r3, pc}
   ba274:	0003024c 	.word	0x0003024c

000ba278 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   ba278:	b508      	push	{r3, lr}
   ba27a:	4b02      	ldr	r3, [pc, #8]	; (ba284 <HAL_USB_USART_Available_Data+0xc>)
   ba27c:	681b      	ldr	r3, [r3, #0]
   ba27e:	691b      	ldr	r3, [r3, #16]
   ba280:	9301      	str	r3, [sp, #4]
   ba282:	bd08      	pop	{r3, pc}
   ba284:	0003024c 	.word	0x0003024c

000ba288 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   ba288:	b508      	push	{r3, lr}
   ba28a:	4b02      	ldr	r3, [pc, #8]	; (ba294 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   ba28c:	681b      	ldr	r3, [r3, #0]
   ba28e:	695b      	ldr	r3, [r3, #20]
   ba290:	9301      	str	r3, [sp, #4]
   ba292:	bd08      	pop	{r3, pc}
   ba294:	0003024c 	.word	0x0003024c

000ba298 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   ba298:	b508      	push	{r3, lr}
   ba29a:	4b02      	ldr	r3, [pc, #8]	; (ba2a4 <HAL_USB_USART_Receive_Data+0xc>)
   ba29c:	681b      	ldr	r3, [r3, #0]
   ba29e:	699b      	ldr	r3, [r3, #24]
   ba2a0:	9301      	str	r3, [sp, #4]
   ba2a2:	bd08      	pop	{r3, pc}
   ba2a4:	0003024c 	.word	0x0003024c

000ba2a8 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   ba2a8:	b508      	push	{r3, lr}
   ba2aa:	4b02      	ldr	r3, [pc, #8]	; (ba2b4 <HAL_USB_USART_Send_Data+0xc>)
   ba2ac:	681b      	ldr	r3, [r3, #0]
   ba2ae:	69db      	ldr	r3, [r3, #28]
   ba2b0:	9301      	str	r3, [sp, #4]
   ba2b2:	bd08      	pop	{r3, pc}
   ba2b4:	0003024c 	.word	0x0003024c

000ba2b8 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   ba2b8:	b508      	push	{r3, lr}
   ba2ba:	4b02      	ldr	r3, [pc, #8]	; (ba2c4 <HAL_USB_USART_Flush_Data+0xc>)
   ba2bc:	681b      	ldr	r3, [r3, #0]
   ba2be:	6a1b      	ldr	r3, [r3, #32]
   ba2c0:	9301      	str	r3, [sp, #4]
   ba2c2:	bd08      	pop	{r3, pc}
   ba2c4:	0003024c 	.word	0x0003024c

000ba2c8 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   ba2c8:	b508      	push	{r3, lr}
   ba2ca:	4b02      	ldr	r3, [pc, #8]	; (ba2d4 <panic_+0xc>)
   ba2cc:	681b      	ldr	r3, [r3, #0]
   ba2ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   ba2d0:	9301      	str	r3, [sp, #4]
   ba2d2:	bd08      	pop	{r3, pc}
   ba2d4:	00030260 	.word	0x00030260

000ba2d8 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   ba2d8:	b508      	push	{r3, lr}
   ba2da:	4b02      	ldr	r3, [pc, #8]	; (ba2e4 <set_system_mode+0xc>)
   ba2dc:	681b      	ldr	r3, [r3, #0]
   ba2de:	685b      	ldr	r3, [r3, #4]
   ba2e0:	9301      	str	r3, [sp, #4]
   ba2e2:	bd08      	pop	{r3, pc}
   ba2e4:	00030220 	.word	0x00030220

000ba2e8 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   ba2e8:	b508      	push	{r3, lr}
   ba2ea:	4b02      	ldr	r3, [pc, #8]	; (ba2f4 <system_delay_ms+0xc>)
   ba2ec:	681b      	ldr	r3, [r3, #0]
   ba2ee:	695b      	ldr	r3, [r3, #20]
   ba2f0:	9301      	str	r3, [sp, #4]
   ba2f2:	bd08      	pop	{r3, pc}
   ba2f4:	00030220 	.word	0x00030220

000ba2f8 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   ba2f8:	b508      	push	{r3, lr}
   ba2fa:	4b03      	ldr	r3, [pc, #12]	; (ba308 <system_ctrl_set_app_request_handler+0x10>)
   ba2fc:	681b      	ldr	r3, [r3, #0]
   ba2fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   ba302:	9301      	str	r3, [sp, #4]
   ba304:	bd08      	pop	{r3, pc}
   ba306:	0000      	.short	0x0000
   ba308:	00030220 	.word	0x00030220

000ba30c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   ba30c:	b508      	push	{r3, lr}
   ba30e:	4b03      	ldr	r3, [pc, #12]	; (ba31c <system_ctrl_set_result+0x10>)
   ba310:	681b      	ldr	r3, [r3, #0]
   ba312:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   ba316:	9301      	str	r3, [sp, #4]
   ba318:	bd08      	pop	{r3, pc}
   ba31a:	0000      	.short	0x0000
   ba31c:	00030220 	.word	0x00030220

000ba320 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   ba320:	b508      	push	{r3, lr}
   ba322:	4b02      	ldr	r3, [pc, #8]	; (ba32c <network_connect+0xc>)
   ba324:	681b      	ldr	r3, [r3, #0]
   ba326:	685b      	ldr	r3, [r3, #4]
   ba328:	9301      	str	r3, [sp, #4]
   ba32a:	bd08      	pop	{r3, pc}
   ba32c:	00030240 	.word	0x00030240

000ba330 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   ba330:	b508      	push	{r3, lr}
   ba332:	4b02      	ldr	r3, [pc, #8]	; (ba33c <network_connecting+0xc>)
   ba334:	681b      	ldr	r3, [r3, #0]
   ba336:	689b      	ldr	r3, [r3, #8]
   ba338:	9301      	str	r3, [sp, #4]
   ba33a:	bd08      	pop	{r3, pc}
   ba33c:	00030240 	.word	0x00030240

000ba340 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   ba340:	b508      	push	{r3, lr}
   ba342:	4b02      	ldr	r3, [pc, #8]	; (ba34c <network_disconnect+0xc>)
   ba344:	681b      	ldr	r3, [r3, #0]
   ba346:	68db      	ldr	r3, [r3, #12]
   ba348:	9301      	str	r3, [sp, #4]
   ba34a:	bd08      	pop	{r3, pc}
   ba34c:	00030240 	.word	0x00030240

000ba350 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   ba350:	b508      	push	{r3, lr}
   ba352:	4b02      	ldr	r3, [pc, #8]	; (ba35c <network_ready+0xc>)
   ba354:	681b      	ldr	r3, [r3, #0]
   ba356:	691b      	ldr	r3, [r3, #16]
   ba358:	9301      	str	r3, [sp, #4]
   ba35a:	bd08      	pop	{r3, pc}
   ba35c:	00030240 	.word	0x00030240

000ba360 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   ba360:	b508      	push	{r3, lr}
   ba362:	4b02      	ldr	r3, [pc, #8]	; (ba36c <network_on+0xc>)
   ba364:	681b      	ldr	r3, [r3, #0]
   ba366:	695b      	ldr	r3, [r3, #20]
   ba368:	9301      	str	r3, [sp, #4]
   ba36a:	bd08      	pop	{r3, pc}
   ba36c:	00030240 	.word	0x00030240

000ba370 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   ba370:	b508      	push	{r3, lr}
   ba372:	4b02      	ldr	r3, [pc, #8]	; (ba37c <network_off+0xc>)
   ba374:	681b      	ldr	r3, [r3, #0]
   ba376:	699b      	ldr	r3, [r3, #24]
   ba378:	9301      	str	r3, [sp, #4]
   ba37a:	bd08      	pop	{r3, pc}
   ba37c:	00030240 	.word	0x00030240

000ba380 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   ba380:	b508      	push	{r3, lr}
   ba382:	4b02      	ldr	r3, [pc, #8]	; (ba38c <network_listen+0xc>)
   ba384:	681b      	ldr	r3, [r3, #0]
   ba386:	69db      	ldr	r3, [r3, #28]
   ba388:	9301      	str	r3, [sp, #4]
   ba38a:	bd08      	pop	{r3, pc}
   ba38c:	00030240 	.word	0x00030240

000ba390 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   ba390:	b508      	push	{r3, lr}
   ba392:	4b02      	ldr	r3, [pc, #8]	; (ba39c <network_listening+0xc>)
   ba394:	681b      	ldr	r3, [r3, #0]
   ba396:	6a1b      	ldr	r3, [r3, #32]
   ba398:	9301      	str	r3, [sp, #4]
   ba39a:	bd08      	pop	{r3, pc}
   ba39c:	00030240 	.word	0x00030240

000ba3a0 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   ba3a0:	b508      	push	{r3, lr}
   ba3a2:	4b02      	ldr	r3, [pc, #8]	; (ba3ac <network_set_listen_timeout+0xc>)
   ba3a4:	681b      	ldr	r3, [r3, #0]
   ba3a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   ba3a8:	9301      	str	r3, [sp, #4]
   ba3aa:	bd08      	pop	{r3, pc}
   ba3ac:	00030240 	.word	0x00030240

000ba3b0 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   ba3b0:	b508      	push	{r3, lr}
   ba3b2:	4b02      	ldr	r3, [pc, #8]	; (ba3bc <network_get_listen_timeout+0xc>)
   ba3b4:	681b      	ldr	r3, [r3, #0]
   ba3b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   ba3b8:	9301      	str	r3, [sp, #4]
   ba3ba:	bd08      	pop	{r3, pc}
   ba3bc:	00030240 	.word	0x00030240

000ba3c0 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   ba3c0:	b508      	push	{r3, lr}
   ba3c2:	4b02      	ldr	r3, [pc, #8]	; (ba3cc <network_is_on+0xc>)
   ba3c4:	681b      	ldr	r3, [r3, #0]
   ba3c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   ba3c8:	9301      	str	r3, [sp, #4]
   ba3ca:	bd08      	pop	{r3, pc}
   ba3cc:	00030240 	.word	0x00030240

000ba3d0 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   ba3d0:	b508      	push	{r3, lr}
   ba3d2:	4b02      	ldr	r3, [pc, #8]	; (ba3dc <network_is_off+0xc>)
   ba3d4:	681b      	ldr	r3, [r3, #0]
   ba3d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   ba3d8:	9301      	str	r3, [sp, #4]
   ba3da:	bd08      	pop	{r3, pc}
   ba3dc:	00030240 	.word	0x00030240

000ba3e0 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   ba3e0:	b508      	push	{r3, lr}
   ba3e2:	4b02      	ldr	r3, [pc, #8]	; (ba3ec <spark_set_random_seed_from_cloud_handler+0xc>)
   ba3e4:	681b      	ldr	r3, [r3, #0]
   ba3e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   ba3e8:	9301      	str	r3, [sp, #4]
   ba3ea:	bd08      	pop	{r3, pc}
   ba3ec:	00030244 	.word	0x00030244

000ba3f0 <spark_cloud_disconnect>:
DYNALIB_FN(16, system_cloud, spark_publish_vitals, int(system_tick_t, void*))
DYNALIB_FN(17, system_cloud, spark_cloud_disconnect, int(const spark_cloud_disconnect_options*, void*))
   ba3f0:	b508      	push	{r3, lr}
   ba3f2:	4b02      	ldr	r3, [pc, #8]	; (ba3fc <spark_cloud_disconnect+0xc>)
   ba3f4:	681b      	ldr	r3, [r3, #0]
   ba3f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   ba3f8:	9301      	str	r3, [sp, #4]
   ba3fa:	bd08      	pop	{r3, pc}
   ba3fc:	00030244 	.word	0x00030244

000ba400 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   ba400:	b508      	push	{r3, lr}
   ba402:	4b02      	ldr	r3, [pc, #8]	; (ba40c <malloc+0xc>)
   ba404:	681b      	ldr	r3, [r3, #0]
   ba406:	681b      	ldr	r3, [r3, #0]
   ba408:	9301      	str	r3, [sp, #4]
   ba40a:	bd08      	pop	{r3, pc}
   ba40c:	0003021c 	.word	0x0003021c

000ba410 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   ba410:	b508      	push	{r3, lr}
   ba412:	4b02      	ldr	r3, [pc, #8]	; (ba41c <free+0xc>)
   ba414:	681b      	ldr	r3, [r3, #0]
   ba416:	685b      	ldr	r3, [r3, #4]
   ba418:	9301      	str	r3, [sp, #4]
   ba41a:	bd08      	pop	{r3, pc}
   ba41c:	0003021c 	.word	0x0003021c

000ba420 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   ba420:	b508      	push	{r3, lr}
   ba422:	4b02      	ldr	r3, [pc, #8]	; (ba42c <realloc+0xc>)
   ba424:	681b      	ldr	r3, [r3, #0]
   ba426:	689b      	ldr	r3, [r3, #8]
   ba428:	9301      	str	r3, [sp, #4]
   ba42a:	bd08      	pop	{r3, pc}
   ba42c:	0003021c 	.word	0x0003021c

000ba430 <snprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   ba430:	b508      	push	{r3, lr}
   ba432:	4b02      	ldr	r3, [pc, #8]	; (ba43c <snprintf+0xc>)
   ba434:	681b      	ldr	r3, [r3, #0]
   ba436:	69db      	ldr	r3, [r3, #28]
   ba438:	9301      	str	r3, [sp, #4]
   ba43a:	bd08      	pop	{r3, pc}
   ba43c:	0003021c 	.word	0x0003021c

000ba440 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   ba440:	b508      	push	{r3, lr}
   ba442:	4b02      	ldr	r3, [pc, #8]	; (ba44c <vsnprintf+0xc>)
   ba444:	681b      	ldr	r3, [r3, #0]
   ba446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   ba448:	9301      	str	r3, [sp, #4]
   ba44a:	bd08      	pop	{r3, pc}
   ba44c:	0003021c 	.word	0x0003021c

000ba450 <_malloc_r>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   ba450:	b508      	push	{r3, lr}
   ba452:	4b02      	ldr	r3, [pc, #8]	; (ba45c <_malloc_r+0xc>)
   ba454:	681b      	ldr	r3, [r3, #0]
   ba456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   ba458:	9301      	str	r3, [sp, #4]
   ba45a:	bd08      	pop	{r3, pc}
   ba45c:	0003021c 	.word	0x0003021c

000ba460 <__assert_func>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   ba460:	b508      	push	{r3, lr}
   ba462:	4b02      	ldr	r3, [pc, #8]	; (ba46c <__assert_func+0xc>)
   ba464:	681b      	ldr	r3, [r3, #0]
   ba466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   ba468:	9301      	str	r3, [sp, #4]
   ba46a:	bd08      	pop	{r3, pc}
   ba46c:	0003021c 	.word	0x0003021c

000ba470 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   ba470:	b508      	push	{r3, lr}
   ba472:	4b02      	ldr	r3, [pc, #8]	; (ba47c <newlib_impure_ptr_callback+0xc>)
   ba474:	681b      	ldr	r3, [r3, #0]
   ba476:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   ba478:	9301      	str	r3, [sp, #4]
   ba47a:	bd08      	pop	{r3, pc}
   ba47c:	0003021c 	.word	0x0003021c

000ba480 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   ba480:	2200      	movs	r2, #0
   ba482:	6840      	ldr	r0, [r0, #4]
   ba484:	4611      	mov	r1, r2
   ba486:	f7ff bf83 	b.w	ba390 <network_listening>

000ba48a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   ba48a:	2200      	movs	r2, #0
   ba48c:	6840      	ldr	r0, [r0, #4]
   ba48e:	4611      	mov	r1, r2
   ba490:	f7ff bf8e 	b.w	ba3b0 <network_get_listen_timeout>

000ba494 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   ba494:	6840      	ldr	r0, [r0, #4]
   ba496:	2200      	movs	r2, #0
   ba498:	f7ff bf82 	b.w	ba3a0 <network_set_listen_timeout>

000ba49c <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   ba49c:	6840      	ldr	r0, [r0, #4]
   ba49e:	2200      	movs	r2, #0
   ba4a0:	f081 0101 	eor.w	r1, r1, #1
   ba4a4:	f7ff bf6c 	b.w	ba380 <network_listen>

000ba4a8 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   ba4a8:	2300      	movs	r3, #0
   ba4aa:	6840      	ldr	r0, [r0, #4]
   ba4ac:	461a      	mov	r2, r3
   ba4ae:	4619      	mov	r1, r3
   ba4b0:	f7ff bf5e 	b.w	ba370 <network_off>

000ba4b4 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   ba4b4:	2300      	movs	r3, #0
   ba4b6:	6840      	ldr	r0, [r0, #4]
   ba4b8:	461a      	mov	r2, r3
   ba4ba:	4619      	mov	r1, r3
   ba4bc:	f7ff bf50 	b.w	ba360 <network_on>

000ba4c0 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   ba4c0:	2200      	movs	r2, #0
   ba4c2:	6840      	ldr	r0, [r0, #4]
   ba4c4:	4611      	mov	r1, r2
   ba4c6:	f7ff bf43 	b.w	ba350 <network_ready>

000ba4ca <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   ba4ca:	2200      	movs	r2, #0
   ba4cc:	6840      	ldr	r0, [r0, #4]
   ba4ce:	4611      	mov	r1, r2
   ba4d0:	f7ff bf2e 	b.w	ba330 <network_connecting>

000ba4d4 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   ba4d4:	6840      	ldr	r0, [r0, #4]
   ba4d6:	2200      	movs	r2, #0
   ba4d8:	2102      	movs	r1, #2
   ba4da:	f7ff bf31 	b.w	ba340 <network_disconnect>

000ba4de <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   ba4de:	2300      	movs	r3, #0
   ba4e0:	6840      	ldr	r0, [r0, #4]
   ba4e2:	461a      	mov	r2, r3
   ba4e4:	f7ff bf1c 	b.w	ba320 <network_connect>

000ba4e8 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   ba4e8:	4b02      	ldr	r3, [pc, #8]	; (ba4f4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   ba4ea:	2203      	movs	r2, #3
   ba4ec:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   ba4ee:	4a02      	ldr	r2, [pc, #8]	; (ba4f8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   ba4f0:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   ba4f2:	4770      	bx	lr
   ba4f4:	2003e6bc 	.word	0x2003e6bc
   ba4f8:	000bd33c 	.word	0x000bd33c

000ba4fc <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   ba4fc:	2100      	movs	r1, #0
   ba4fe:	f7ff be93 	b.w	ba228 <hal_spi_release>

000ba502 <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   ba502:	2100      	movs	r1, #0
   ba504:	f7ff be88 	b.w	ba218 <hal_spi_acquire>

000ba508 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   ba508:	b510      	push	{r4, lr}
   ba50a:	4604      	mov	r4, r0
   ba50c:	4608      	mov	r0, r1
{
    _spi = spi;
   ba50e:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   ba510:	f7ff fe62 	bl	ba1d8 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   ba514:	2300      	movs	r3, #0
   ba516:	6063      	str	r3, [r4, #4]
}
   ba518:	4620      	mov	r0, r4
   ba51a:	bd10      	pop	{r4, pc}

000ba51c <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   ba51c:	b513      	push	{r0, r1, r4, lr}
   ba51e:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   ba520:	7800      	ldrb	r0, [r0, #0]
   ba522:	f7ff ffee 	bl	ba502 <_ZN8SPIClass4lockEv.isra.0>
   ba526:	b958      	cbnz	r0, ba540 <_ZN8SPIClass5beginEv+0x24>
   ba528:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   ba52a:	9001      	str	r0, [sp, #4]
   ba52c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   ba530:	f7ff fe42 	bl	ba1b8 <hal_spi_begin>
        unlock();
   ba534:	9801      	ldr	r0, [sp, #4]
    }
}
   ba536:	b002      	add	sp, #8
   ba538:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   ba53c:	f7ff bfde 	b.w	ba4fc <_ZN8SPIClass6unlockEv.isra.0>
   ba540:	b002      	add	sp, #8
   ba542:	bd10      	pop	{r4, pc}

000ba544 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   ba544:	7800      	ldrb	r0, [r0, #0]
   ba546:	f7ff bfd9 	b.w	ba4fc <_ZN8SPIClass6unlockEv.isra.0>
	...

000ba54c <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   ba54c:	0840      	lsrs	r0, r0, #1
{
   ba54e:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   ba550:	6018      	str	r0, [r3, #0]
   ba552:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   ba554:	6818      	ldr	r0, [r3, #0]
   ba556:	4288      	cmp	r0, r1
   ba558:	b2e5      	uxtb	r5, r4
   ba55a:	d906      	bls.n	ba56a <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   ba55c:	3401      	adds	r4, #1
   ba55e:	2c08      	cmp	r4, #8
   ba560:	d002      	beq.n	ba568 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   ba562:	0840      	lsrs	r0, r0, #1
   ba564:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   ba566:	e7f5      	b.n	ba554 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   ba568:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   ba56a:	4b02      	ldr	r3, [pc, #8]	; (ba574 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   ba56c:	5d5b      	ldrb	r3, [r3, r5]
   ba56e:	7013      	strb	r3, [r2, #0]
}
   ba570:	bd30      	pop	{r4, r5, pc}
   ba572:	bf00      	nop
   ba574:	000bd370 	.word	0x000bd370

000ba578 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   ba578:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   ba57c:	4606      	mov	r6, r0
   ba57e:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   ba580:	7800      	ldrb	r0, [r0, #0]
{
   ba582:	460c      	mov	r4, r1
    CHECK(lock());
   ba584:	f7ff ffbd 	bl	ba502 <_ZN8SPIClass4lockEv.isra.0>
   ba588:	2800      	cmp	r0, #0
   ba58a:	db1b      	blt.n	ba5c4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   ba58c:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   ba58e:	2214      	movs	r2, #20
   ba590:	2100      	movs	r1, #0
   ba592:	a809      	add	r0, sp, #36	; 0x24
   ba594:	f000 ff86 	bl	bb4a4 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   ba598:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   ba59a:	2200      	movs	r2, #0
   ba59c:	a909      	add	r1, sp, #36	; 0x24
   ba59e:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   ba5a0:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   ba5a4:	f7ff fe28 	bl	ba1f8 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   ba5a8:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   ba5ac:	b113      	cbz	r3, ba5b4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   ba5ae:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   ba5b2:	b155      	cbz	r5, ba5ca <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   ba5b4:	2700      	movs	r7, #0
   ba5b6:	46b9      	mov	r9, r7
   ba5b8:	46b8      	mov	r8, r7
   ba5ba:	2501      	movs	r5, #1
    if (default_ && other.default_)
   ba5bc:	7923      	ldrb	r3, [r4, #4]
   ba5be:	b15d      	cbz	r5, ba5d8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   ba5c0:	b1c3      	cbz	r3, ba5f4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   ba5c2:	2000      	movs	r0, #0
}
   ba5c4:	b00f      	add	sp, #60	; 0x3c
   ba5c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   ba5ca:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   ba5ce:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   ba5d2:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   ba5d6:	e7f1      	b.n	ba5bc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   ba5d8:	2b00      	cmp	r3, #0
   ba5da:	d135      	bne.n	ba648 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   ba5dc:	68a3      	ldr	r3, [r4, #8]
   ba5de:	4543      	cmp	r3, r8
   ba5e0:	d108      	bne.n	ba5f4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   ba5e2:	f88d 9020 	strb.w	r9, [sp, #32]
   ba5e6:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   ba5ea:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   ba5ee:	89a3      	ldrh	r3, [r4, #12]
   ba5f0:	429a      	cmp	r2, r3
   ba5f2:	d0e6      	beq.n	ba5c2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   ba5f4:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   ba5f6:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   ba5f8:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   ba5fc:	980a      	ldr	r0, [sp, #40]	; 0x28
   ba5fe:	ab04      	add	r3, sp, #16
   ba600:	f10d 020f 	add.w	r2, sp, #15
   ba604:	f7ff ffa2 	bl	ba54c <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   ba608:	7921      	ldrb	r1, [r4, #4]
   ba60a:	b985      	cbnz	r5, ba62e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   ba60c:	b989      	cbnz	r1, ba632 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   ba60e:	68a3      	ldr	r3, [r4, #8]
   ba610:	4543      	cmp	r3, r8
   ba612:	d30e      	bcc.n	ba632 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   ba614:	f88d 9020 	strb.w	r9, [sp, #32]
   ba618:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   ba61c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   ba620:	89a3      	ldrh	r3, [r4, #12]
   ba622:	429a      	cmp	r2, r3
   ba624:	d105      	bne.n	ba632 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   ba626:	9b04      	ldr	r3, [sp, #16]
   ba628:	4543      	cmp	r3, r8
   ba62a:	d102      	bne.n	ba632 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   ba62c:	e7c9      	b.n	ba5c2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   ba62e:	2900      	cmp	r1, #0
   ba630:	d1f9      	bne.n	ba626 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   ba632:	2300      	movs	r3, #0
   ba634:	9301      	str	r3, [sp, #4]
   ba636:	7b63      	ldrb	r3, [r4, #13]
   ba638:	9300      	str	r3, [sp, #0]
   ba63a:	f89d 200f 	ldrb.w	r2, [sp, #15]
   ba63e:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   ba640:	7830      	ldrb	r0, [r6, #0]
   ba642:	f7ff fde1 	bl	ba208 <hal_spi_set_settings>
   ba646:	e7bc      	b.n	ba5c2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   ba648:	e9cd 5500 	strd	r5, r5, [sp]
   ba64c:	462b      	mov	r3, r5
   ba64e:	462a      	mov	r2, r5
   ba650:	2101      	movs	r1, #1
   ba652:	e7f5      	b.n	ba640 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000ba654 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   ba654:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   ba656:	7800      	ldrb	r0, [r0, #0]
   ba658:	f7ff fdb6 	bl	ba1c8 <hal_spi_transfer>
}
   ba65c:	b2c0      	uxtb	r0, r0
   ba65e:	bd08      	pop	{r3, pc}

000ba660 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   ba660:	4b05      	ldr	r3, [pc, #20]	; (ba678 <_GLOBAL__sub_I_System+0x18>)
   ba662:	2202      	movs	r2, #2
   ba664:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   ba666:	4b05      	ldr	r3, [pc, #20]	; (ba67c <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   ba668:	4a05      	ldr	r2, [pc, #20]	; (ba680 <_GLOBAL__sub_I_System+0x20>)
   ba66a:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   ba66c:	2000      	movs	r0, #0
   ba66e:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   ba672:	f7ff be31 	b.w	ba2d8 <set_system_mode>
   ba676:	bf00      	nop
   ba678:	2003e6d0 	.word	0x2003e6d0
   ba67c:	2003e6c4 	.word	0x2003e6c4
   ba680:	ffff0000 	.word	0xffff0000

000ba684 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   ba684:	b510      	push	{r4, lr}
   ba686:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   ba688:	f7fa f998 	bl	b49bc <strlen>
   ba68c:	3801      	subs	r0, #1
   ba68e:	1823      	adds	r3, r4, r0
   ba690:	4620      	mov	r0, r4
	while(i<j){
   ba692:	4283      	cmp	r3, r0
   ba694:	d906      	bls.n	ba6a4 <_Z11str_reversePc+0x20>
		c = *i;
   ba696:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   ba698:	7819      	ldrb	r1, [r3, #0]
   ba69a:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   ba69e:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   ba6a2:	e7f6      	b.n	ba692 <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   ba6a4:	bd10      	pop	{r4, pc}

000ba6a6 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   ba6a6:	b570      	push	{r4, r5, r6, lr}
   ba6a8:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   ba6aa:	1e91      	subs	r1, r2, #2
   ba6ac:	2922      	cmp	r1, #34	; 0x22
   ba6ae:	d81d      	bhi.n	ba6ec <ultoa+0x46>
		return NULL;
	}
	char* ptr=buffer;
   ba6b0:	4625      	mov	r5, r4

	div_t result;
	while(a){
   ba6b2:	b930      	cbnz	r0, ba6c2 <ultoa+0x1c>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   ba6b4:	4423      	add	r3, r4
            *ptr++ = '0';
   ba6b6:	2230      	movs	r2, #48	; 0x30
        while (ptr < buffer+pad)
   ba6b8:	429d      	cmp	r5, r3
   ba6ba:	d210      	bcs.n	ba6de <ultoa+0x38>
            *ptr++ = '0';
   ba6bc:	f805 2b01 	strb.w	r2, [r5], #1
        while (ptr < buffer+pad)
   ba6c0:	e7fa      	b.n	ba6b8 <ultoa+0x12>
            result.quot = a/radix;
   ba6c2:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   ba6c6:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   ba6ca:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
   ba6cc:	2809      	cmp	r0, #9
                *ptr += '0';
   ba6ce:	bf94      	ite	ls
   ba6d0:	3130      	addls	r1, #48	; 0x30
                *ptr += 'a'-10;
   ba6d2:	3157      	addhi	r1, #87	; 0x57
   ba6d4:	b2c9      	uxtb	r1, r1
   ba6d6:	f805 1b01 	strb.w	r1, [r5], #1
            a = result.quot;
   ba6da:	4630      	mov	r0, r6
	while(a){
   ba6dc:	e7e9      	b.n	ba6b2 <ultoa+0xc>

	*ptr = '\0';
   ba6de:	2300      	movs	r3, #0
	str_reverse(buffer);
   ba6e0:	4620      	mov	r0, r4
	*ptr = '\0';
   ba6e2:	702b      	strb	r3, [r5, #0]
	str_reverse(buffer);
   ba6e4:	f7ff ffce 	bl	ba684 <_Z11str_reversePc>
	return buffer;
   ba6e8:	4620      	mov	r0, r4
}
   ba6ea:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   ba6ec:	2000      	movs	r0, #0
   ba6ee:	e7fc      	b.n	ba6ea <ultoa+0x44>

000ba6f0 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   ba6f0:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   ba6f2:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   ba6f4:	460c      	mov	r4, r1
   ba6f6:	4615      	mov	r5, r2
	if(a<0){
   ba6f8:	da0e      	bge.n	ba718 <itoa+0x28>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   ba6fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
		*buffer = '-';
   ba6fe:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   ba702:	bf14      	ite	ne
   ba704:	4258      	negne	r0, r3
   ba706:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   ba708:	2301      	movs	r3, #1
		*buffer = '-';
   ba70a:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
   ba70c:	462a      	mov	r2, r5
   ba70e:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
   ba710:	f7ff ffc9 	bl	ba6a6 <ultoa>
	}
	return buffer;
}
   ba714:	4620      	mov	r0, r4
   ba716:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
   ba718:	2301      	movs	r3, #1
   ba71a:	e7f9      	b.n	ba710 <itoa+0x20>

000ba71c <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   ba71c:	b510      	push	{r4, lr}
   ba71e:	4604      	mov	r4, r0
{
	free(buffer);
   ba720:	6800      	ldr	r0, [r0, #0]
   ba722:	f7ff fe75 	bl	ba410 <free>
}
   ba726:	4620      	mov	r0, r4
   ba728:	bd10      	pop	{r4, pc}

000ba72a <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   ba72a:	b510      	push	{r4, lr}
   ba72c:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   ba72e:	6800      	ldr	r0, [r0, #0]
   ba730:	b108      	cbz	r0, ba736 <_ZN6String10invalidateEv+0xc>
   ba732:	f7ff fe6d 	bl	ba410 <free>
	buffer = NULL;
   ba736:	2300      	movs	r3, #0
	capacity = len = 0;
   ba738:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   ba73c:	6023      	str	r3, [r4, #0]
}
   ba73e:	bd10      	pop	{r4, pc}

000ba740 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   ba740:	b538      	push	{r3, r4, r5, lr}
   ba742:	4604      	mov	r4, r0
   ba744:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   ba746:	6800      	ldr	r0, [r0, #0]
   ba748:	3101      	adds	r1, #1
   ba74a:	f7ff fe69 	bl	ba420 <realloc>
	if (newbuffer) {
   ba74e:	b110      	cbz	r0, ba756 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   ba750:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   ba754:	2001      	movs	r0, #1
	}
	return 0;
}
   ba756:	bd38      	pop	{r3, r4, r5, pc}

000ba758 <_ZN6String7reserveEj>:
{
   ba758:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   ba75a:	6803      	ldr	r3, [r0, #0]
{
   ba75c:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   ba75e:	b123      	cbz	r3, ba76a <_ZN6String7reserveEj+0x12>
   ba760:	6843      	ldr	r3, [r0, #4]
   ba762:	428b      	cmp	r3, r1
   ba764:	d301      	bcc.n	ba76a <_ZN6String7reserveEj+0x12>
   ba766:	2001      	movs	r0, #1
}
   ba768:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   ba76a:	4620      	mov	r0, r4
   ba76c:	f7ff ffe8 	bl	ba740 <_ZN6String12changeBufferEj>
   ba770:	2800      	cmp	r0, #0
   ba772:	d0f9      	beq.n	ba768 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   ba774:	68a3      	ldr	r3, [r4, #8]
   ba776:	2b00      	cmp	r3, #0
   ba778:	d1f5      	bne.n	ba766 <_ZN6String7reserveEj+0xe>
   ba77a:	6822      	ldr	r2, [r4, #0]
   ba77c:	7013      	strb	r3, [r2, #0]
   ba77e:	e7f2      	b.n	ba766 <_ZN6String7reserveEj+0xe>

000ba780 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   ba780:	b537      	push	{r0, r1, r2, r4, r5, lr}
   ba782:	460d      	mov	r5, r1
	if (!reserve(length)) {
   ba784:	4611      	mov	r1, r2
   ba786:	9201      	str	r2, [sp, #4]
{
   ba788:	4604      	mov	r4, r0
	if (!reserve(length)) {
   ba78a:	f7ff ffe5 	bl	ba758 <_ZN6String7reserveEj>
   ba78e:	9a01      	ldr	r2, [sp, #4]
   ba790:	b928      	cbnz	r0, ba79e <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   ba792:	4620      	mov	r0, r4
   ba794:	f7ff ffc9 	bl	ba72a <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   ba798:	4620      	mov	r0, r4
   ba79a:	b003      	add	sp, #12
   ba79c:	bd30      	pop	{r4, r5, pc}
	len = length;
   ba79e:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   ba7a0:	4629      	mov	r1, r5
   ba7a2:	6820      	ldr	r0, [r4, #0]
   ba7a4:	f000 fe70 	bl	bb488 <memcpy>
	buffer[len] = 0;
   ba7a8:	6822      	ldr	r2, [r4, #0]
   ba7aa:	68a3      	ldr	r3, [r4, #8]
   ba7ac:	2100      	movs	r1, #0
   ba7ae:	54d1      	strb	r1, [r2, r3]
	return *this;
   ba7b0:	e7f2      	b.n	ba798 <_ZN6String4copyEPKcj+0x18>

000ba7b2 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   ba7b2:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   ba7b4:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   ba7b6:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   ba7ba:	4604      	mov	r4, r0
	len = 0;
   ba7bc:	6083      	str	r3, [r0, #8]
	flags = 0;
   ba7be:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   ba7c0:	b141      	cbz	r1, ba7d4 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   ba7c2:	4608      	mov	r0, r1
   ba7c4:	9101      	str	r1, [sp, #4]
   ba7c6:	f7fa f8f9 	bl	b49bc <strlen>
   ba7ca:	9901      	ldr	r1, [sp, #4]
   ba7cc:	4602      	mov	r2, r0
   ba7ce:	4620      	mov	r0, r4
   ba7d0:	f7ff ffd6 	bl	ba780 <_ZN6String4copyEPKcj>
}
   ba7d4:	4620      	mov	r0, r4
   ba7d6:	b002      	add	sp, #8
   ba7d8:	bd10      	pop	{r4, pc}

000ba7da <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   ba7da:	4288      	cmp	r0, r1
{
   ba7dc:	b510      	push	{r4, lr}
   ba7de:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   ba7e0:	d005      	beq.n	ba7ee <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   ba7e2:	680b      	ldr	r3, [r1, #0]
   ba7e4:	b12b      	cbz	r3, ba7f2 <_ZN6StringaSERKS_+0x18>
   ba7e6:	688a      	ldr	r2, [r1, #8]
   ba7e8:	4619      	mov	r1, r3
   ba7ea:	f7ff ffc9 	bl	ba780 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   ba7ee:	4620      	mov	r0, r4
   ba7f0:	bd10      	pop	{r4, pc}
	else invalidate();
   ba7f2:	f7ff ff9a 	bl	ba72a <_ZN6String10invalidateEv>
   ba7f6:	e7fa      	b.n	ba7ee <_ZN6StringaSERKS_+0x14>

000ba7f8 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   ba7f8:	b510      	push	{r4, lr}
	buffer = NULL;
   ba7fa:	2300      	movs	r3, #0
String::String(const String &value)
   ba7fc:	4604      	mov	r4, r0
	capacity = 0;
   ba7fe:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   ba802:	6083      	str	r3, [r0, #8]
	flags = 0;
   ba804:	7303      	strb	r3, [r0, #12]
	*this = value;
   ba806:	f7ff ffe8 	bl	ba7da <_ZN6StringaSERKS_>
}
   ba80a:	4620      	mov	r0, r4
   ba80c:	bd10      	pop	{r4, pc}

000ba80e <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   ba80e:	b513      	push	{r0, r1, r4, lr}
   ba810:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   ba812:	b159      	cbz	r1, ba82c <_ZN6StringaSEPKc+0x1e>
   ba814:	4608      	mov	r0, r1
   ba816:	9101      	str	r1, [sp, #4]
   ba818:	f7fa f8d0 	bl	b49bc <strlen>
   ba81c:	9901      	ldr	r1, [sp, #4]
   ba81e:	4602      	mov	r2, r0
   ba820:	4620      	mov	r0, r4
   ba822:	f7ff ffad 	bl	ba780 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   ba826:	4620      	mov	r0, r4
   ba828:	b002      	add	sp, #8
   ba82a:	bd10      	pop	{r4, pc}
	else invalidate();
   ba82c:	f7ff ff7d 	bl	ba72a <_ZN6String10invalidateEv>
   ba830:	e7f9      	b.n	ba826 <_ZN6StringaSEPKc+0x18>

000ba832 <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
   ba832:	b510      	push	{r4, lr}
   ba834:	4604      	mov	r4, r0
   ba836:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   ba838:	2300      	movs	r3, #0
	capacity = 0;
   ba83a:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   ba83e:	60a3      	str	r3, [r4, #8]
	flags = 0;
   ba840:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
   ba842:	4608      	mov	r0, r1
	itoa(value, buf, base);
   ba844:	a901      	add	r1, sp, #4
   ba846:	f7ff ff53 	bl	ba6f0 <itoa>
	*this = buf;
   ba84a:	a901      	add	r1, sp, #4
   ba84c:	4620      	mov	r0, r4
   ba84e:	f7ff ffde 	bl	ba80e <_ZN6StringaSEPKc>
}
   ba852:	4620      	mov	r0, r4
   ba854:	b00a      	add	sp, #40	; 0x28
   ba856:	bd10      	pop	{r4, pc}

000ba858 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   ba858:	b570      	push	{r4, r5, r6, lr}
   ba85a:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   ba85c:	460e      	mov	r6, r1
   ba85e:	b909      	cbnz	r1, ba864 <_ZN6String6concatEPKcj+0xc>
   ba860:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   ba862:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   ba864:	b16a      	cbz	r2, ba882 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   ba866:	6884      	ldr	r4, [r0, #8]
   ba868:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   ba86a:	4621      	mov	r1, r4
   ba86c:	f7ff ff74 	bl	ba758 <_ZN6String7reserveEj>
   ba870:	2800      	cmp	r0, #0
   ba872:	d0f5      	beq.n	ba860 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   ba874:	6828      	ldr	r0, [r5, #0]
   ba876:	68ab      	ldr	r3, [r5, #8]
   ba878:	4631      	mov	r1, r6
   ba87a:	4418      	add	r0, r3
   ba87c:	f000 fe58 	bl	bb530 <strcpy>
	len = newlen;
   ba880:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   ba882:	2001      	movs	r0, #1
   ba884:	e7ed      	b.n	ba862 <_ZN6String6concatEPKcj+0xa>

000ba886 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   ba886:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   ba888:	688a      	ldr	r2, [r1, #8]
   ba88a:	6809      	ldr	r1, [r1, #0]
{
   ba88c:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   ba88e:	f7ff ffe3 	bl	ba858 <_ZN6String6concatEPKcj>
   ba892:	b910      	cbnz	r0, ba89a <_ZplRK15StringSumHelperRK6String+0x14>
   ba894:	4620      	mov	r0, r4
   ba896:	f7ff ff48 	bl	ba72a <_ZN6String10invalidateEv>
	return a;
}
   ba89a:	4620      	mov	r0, r4
   ba89c:	bd10      	pop	{r4, pc}

000ba89e <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   ba89e:	b513      	push	{r0, r1, r4, lr}
   ba8a0:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   ba8a2:	b929      	cbnz	r1, ba8b0 <_ZplRK15StringSumHelperPKc+0x12>
   ba8a4:	4620      	mov	r0, r4
   ba8a6:	f7ff ff40 	bl	ba72a <_ZN6String10invalidateEv>
	return a;
}
   ba8aa:	4620      	mov	r0, r4
   ba8ac:	b002      	add	sp, #8
   ba8ae:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   ba8b0:	4608      	mov	r0, r1
   ba8b2:	9101      	str	r1, [sp, #4]
   ba8b4:	f7fa f882 	bl	b49bc <strlen>
   ba8b8:	9901      	ldr	r1, [sp, #4]
   ba8ba:	4602      	mov	r2, r0
   ba8bc:	4620      	mov	r0, r4
   ba8be:	f7ff ffcb 	bl	ba858 <_ZN6String6concatEPKcj>
   ba8c2:	2800      	cmp	r0, #0
   ba8c4:	d0ee      	beq.n	ba8a4 <_ZplRK15StringSumHelperPKc+0x6>
   ba8c6:	e7f0      	b.n	ba8aa <_ZplRK15StringSumHelperPKc+0xc>

000ba8c8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   ba8c8:	4802      	ldr	r0, [pc, #8]	; (ba8d4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   ba8ca:	2300      	movs	r3, #0
   ba8cc:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   ba8ce:	f7ff bbcb 	b.w	ba068 <os_mutex_recursive_create>
   ba8d2:	bf00      	nop
   ba8d4:	2003e6d4 	.word	0x2003e6d4

000ba8d8 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   ba8d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   ba8da:	4606      	mov	r6, r0
   ba8dc:	460d      	mov	r5, r1
  size_t n = 0;
   ba8de:	188f      	adds	r7, r1, r2
   ba8e0:	2400      	movs	r4, #0
  while (size--) {
   ba8e2:	42bd      	cmp	r5, r7
   ba8e4:	d00c      	beq.n	ba900 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   ba8e6:	6833      	ldr	r3, [r6, #0]
   ba8e8:	f815 1b01 	ldrb.w	r1, [r5], #1
   ba8ec:	689b      	ldr	r3, [r3, #8]
   ba8ee:	4630      	mov	r0, r6
   ba8f0:	4798      	blx	r3
     if (chunk>=0)
   ba8f2:	1e03      	subs	r3, r0, #0
   ba8f4:	db01      	blt.n	ba8fa <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   ba8f6:	441c      	add	r4, r3
  while (size--) {
   ba8f8:	e7f3      	b.n	ba8e2 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   ba8fa:	2c00      	cmp	r4, #0
   ba8fc:	bf08      	it	eq
   ba8fe:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   ba900:	4620      	mov	r0, r4
   ba902:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000ba904 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   ba904:	b513      	push	{r0, r1, r4, lr}
   ba906:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   ba908:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   ba90a:	b159      	cbz	r1, ba924 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   ba90c:	9101      	str	r1, [sp, #4]
   ba90e:	f7fa f855 	bl	b49bc <strlen>
   ba912:	6823      	ldr	r3, [r4, #0]
   ba914:	9901      	ldr	r1, [sp, #4]
   ba916:	68db      	ldr	r3, [r3, #12]
   ba918:	4602      	mov	r2, r0
   ba91a:	4620      	mov	r0, r4
    }
   ba91c:	b002      	add	sp, #8
   ba91e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   ba922:	4718      	bx	r3
    }
   ba924:	b002      	add	sp, #8
   ba926:	bd10      	pop	{r4, pc}

000ba928 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   ba928:	b508      	push	{r3, lr}
  return write(str);
   ba92a:	f7ff ffeb 	bl	ba904 <_ZN5Print5writeEPKc>
}
   ba92e:	bd08      	pop	{r3, pc}

000ba930 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   ba930:	6803      	ldr	r3, [r0, #0]
   ba932:	689b      	ldr	r3, [r3, #8]
   ba934:	4718      	bx	r3

000ba936 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   ba936:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   ba938:	210d      	movs	r1, #13
{
   ba93a:	4605      	mov	r5, r0
  size_t n = print('\r');
   ba93c:	f7ff fff8 	bl	ba930 <_ZN5Print5printEc>
  n += print('\n');
   ba940:	210a      	movs	r1, #10
  size_t n = print('\r');
   ba942:	4604      	mov	r4, r0
  n += print('\n');
   ba944:	4628      	mov	r0, r5
   ba946:	f7ff fff3 	bl	ba930 <_ZN5Print5printEc>
  return n;
}
   ba94a:	4420      	add	r0, r4
   ba94c:	bd38      	pop	{r3, r4, r5, pc}

000ba94e <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   ba94e:	b538      	push	{r3, r4, r5, lr}
   ba950:	4605      	mov	r5, r0
  return write(str);
   ba952:	f7ff ffd7 	bl	ba904 <_ZN5Print5writeEPKc>
   ba956:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   ba958:	4628      	mov	r0, r5
   ba95a:	f7ff ffec 	bl	ba936 <_ZN5Print7printlnEv>
  return n;
}
   ba95e:	4420      	add	r0, r4
   ba960:	bd38      	pop	{r3, r4, r5, pc}

000ba962 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   ba962:	b530      	push	{r4, r5, lr}
   ba964:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   ba966:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   ba968:	2a01      	cmp	r2, #1
  *str = '\0';
   ba96a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   ba96e:	bf98      	it	ls
   ba970:	220a      	movls	r2, #10
   ba972:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   ba974:	460d      	mov	r5, r1
   ba976:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   ba97a:	fb01 5312 	mls	r3, r1, r2, r5
   ba97e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   ba982:	2b09      	cmp	r3, #9
   ba984:	bf94      	ite	ls
   ba986:	3330      	addls	r3, #48	; 0x30
   ba988:	3337      	addhi	r3, #55	; 0x37
   ba98a:	b2db      	uxtb	r3, r3
  } while(n);
   ba98c:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   ba98e:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   ba992:	d9ef      	bls.n	ba974 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   ba994:	4621      	mov	r1, r4
   ba996:	f7ff ffb5 	bl	ba904 <_ZN5Print5writeEPKc>
}
   ba99a:	b00b      	add	sp, #44	; 0x2c
   ba99c:	bd30      	pop	{r4, r5, pc}

000ba99e <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   ba99e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   ba9a2:	b086      	sub	sp, #24
   ba9a4:	af00      	add	r7, sp, #0
   ba9a6:	4605      	mov	r5, r0
   ba9a8:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   ba9aa:	1d38      	adds	r0, r7, #4
   ba9ac:	2114      	movs	r1, #20
{
   ba9ae:	4614      	mov	r4, r2
    va_copy(args2, args);
   ba9b0:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   ba9b2:	f7ff fd45 	bl	ba440 <vsnprintf>

    if (n<bufsize)
   ba9b6:	2813      	cmp	r0, #19
   ba9b8:	d80e      	bhi.n	ba9d8 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   ba9ba:	1d39      	adds	r1, r7, #4
   ba9bc:	4628      	mov	r0, r5
   ba9be:	f7ff ffa1 	bl	ba904 <_ZN5Print5writeEPKc>
   ba9c2:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   ba9c4:	b11e      	cbz	r6, ba9ce <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   ba9c6:	4628      	mov	r0, r5
   ba9c8:	f7ff ffb5 	bl	ba936 <_ZN5Print7printlnEv>
   ba9cc:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   ba9ce:	4620      	mov	r0, r4
   ba9d0:	3718      	adds	r7, #24
   ba9d2:	46bd      	mov	sp, r7
   ba9d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   ba9d8:	f100 0308 	add.w	r3, r0, #8
   ba9dc:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   ba9e0:	46e8      	mov	r8, sp
        char bigger[n+1];
   ba9e2:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   ba9e6:	4622      	mov	r2, r4
   ba9e8:	1c41      	adds	r1, r0, #1
   ba9ea:	683b      	ldr	r3, [r7, #0]
   ba9ec:	4668      	mov	r0, sp
   ba9ee:	f7ff fd27 	bl	ba440 <vsnprintf>
  return write(str);
   ba9f2:	4669      	mov	r1, sp
   ba9f4:	4628      	mov	r0, r5
   ba9f6:	f7ff ff85 	bl	ba904 <_ZN5Print5writeEPKc>
   ba9fa:	4604      	mov	r4, r0
   ba9fc:	46c5      	mov	sp, r8
   ba9fe:	e7e1      	b.n	ba9c4 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000baa00 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   baa00:	4b01      	ldr	r3, [pc, #4]	; (baa08 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   baa02:	4a02      	ldr	r2, [pc, #8]	; (baa0c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   baa04:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   baa06:	4770      	bx	lr
   baa08:	2003e6d8 	.word	0x2003e6d8
   baa0c:	000bd378 	.word	0x000bd378

000baa10 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   baa10:	4b02      	ldr	r3, [pc, #8]	; (baa1c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   baa12:	681a      	ldr	r2, [r3, #0]
   baa14:	4b02      	ldr	r3, [pc, #8]	; (baa20 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   baa16:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   baa18:	4770      	bx	lr
   baa1a:	bf00      	nop
   baa1c:	2003c6c4 	.word	0x2003c6c4
   baa20:	2003e6dc 	.word	0x2003e6dc

000baa24 <_Z3mapiiiii>:
    hal_adc_set_sample_time(ADC_SampleTime);
}

int map(int value, int fromStart, int fromEnd, int toStart, int toEnd)
{
    if (fromEnd == fromStart) {
   baa24:	428a      	cmp	r2, r1
{
   baa26:	b510      	push	{r4, lr}
    if (fromEnd == fromStart) {
   baa28:	d007      	beq.n	baa3a <_Z3mapiiiii+0x16>
        return value;
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
   baa2a:	1a44      	subs	r4, r0, r1
   baa2c:	9802      	ldr	r0, [sp, #8]
   baa2e:	1ac0      	subs	r0, r0, r3
   baa30:	4344      	muls	r4, r0
   baa32:	1a50      	subs	r0, r2, r1
   baa34:	fb94 f0f0 	sdiv	r0, r4, r0
   baa38:	4418      	add	r0, r3
}
   baa3a:	bd10      	pop	{r4, pc}

000baa3c <_Z3mapddddd>:

double map(double value, double fromStart, double fromEnd, double toStart, double toEnd)
{
   baa3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   baa40:	ec55 4b11 	vmov	r4, r5, d1
   baa44:	ec57 6b12 	vmov	r6, r7, d2
   baa48:	b085      	sub	sp, #20
    if (fromEnd == fromStart) {
   baa4a:	ee11 2a10 	vmov	r2, s2
   baa4e:	ee12 0a10 	vmov	r0, s4
   baa52:	462b      	mov	r3, r5
   baa54:	4639      	mov	r1, r7
{
   baa56:	ed8d 0b02 	vstr	d0, [sp, #8]
   baa5a:	ed8d 4b00 	vstr	d4, [sp]
   baa5e:	ec5b ab13 	vmov	sl, fp, d3
    if (fromEnd == fromStart) {
   baa62:	f7f9 ff01 	bl	b4868 <__aeabi_dcmpeq>
   baa66:	ed9d 0b02 	vldr	d0, [sp, #8]
   baa6a:	bb38      	cbnz	r0, baabc <_Z3mapddddd+0x80>
        return value;
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
   baa6c:	ec51 0b10 	vmov	r0, r1, d0
   baa70:	4622      	mov	r2, r4
   baa72:	462b      	mov	r3, r5
   baa74:	f7f9 fad8 	bl	b4028 <__aeabi_dsub>
   baa78:	4652      	mov	r2, sl
   baa7a:	4680      	mov	r8, r0
   baa7c:	4689      	mov	r9, r1
   baa7e:	465b      	mov	r3, fp
   baa80:	e9dd 0100 	ldrd	r0, r1, [sp]
   baa84:	f7f9 fad0 	bl	b4028 <__aeabi_dsub>
   baa88:	4602      	mov	r2, r0
   baa8a:	460b      	mov	r3, r1
   baa8c:	4640      	mov	r0, r8
   baa8e:	4649      	mov	r1, r9
   baa90:	f7f9 fc82 	bl	b4398 <__aeabi_dmul>
   baa94:	4622      	mov	r2, r4
   baa96:	4680      	mov	r8, r0
   baa98:	4689      	mov	r9, r1
   baa9a:	462b      	mov	r3, r5
   baa9c:	4630      	mov	r0, r6
   baa9e:	4639      	mov	r1, r7
   baaa0:	f7f9 fac2 	bl	b4028 <__aeabi_dsub>
   baaa4:	4602      	mov	r2, r0
   baaa6:	460b      	mov	r3, r1
   baaa8:	4640      	mov	r0, r8
   baaaa:	4649      	mov	r1, r9
   baaac:	f7f9 fd9e 	bl	b45ec <__aeabi_ddiv>
   baab0:	4652      	mov	r2, sl
   baab2:	465b      	mov	r3, fp
   baab4:	f7f9 faba 	bl	b402c <__adddf3>
   baab8:	ec41 0b10 	vmov	d0, r0, r1
}
   baabc:	b005      	add	sp, #20
   baabe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000baac2 <delay>:

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   baac2:	2100      	movs	r1, #0
   baac4:	f7ff bc10 	b.w	ba2e8 <system_delay_ms>

000baac8 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   baac8:	4b01      	ldr	r3, [pc, #4]	; (baad0 <_GLOBAL__sub_I_RGB+0x8>)
   baaca:	2200      	movs	r2, #0
   baacc:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   baace:	4770      	bx	lr
   baad0:	2003e6e0 	.word	0x2003e6e0

000baad4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   baad4:	4b01      	ldr	r3, [pc, #4]	; (baadc <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   baad6:	6018      	str	r0, [r3, #0]
    }, nullptr);
   baad8:	4770      	bx	lr
   baada:	bf00      	nop
   baadc:	2003c6c8 	.word	0x2003c6c8

000baae0 <serialEventRun>:
{
   baae0:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   baae2:	4b0b      	ldr	r3, [pc, #44]	; (bab10 <serialEventRun+0x30>)
   baae4:	b143      	cbz	r3, baaf8 <serialEventRun+0x18>
   baae6:	f000 f981 	bl	badec <_Z16_fetch_usbserialv>
   baaea:	6803      	ldr	r3, [r0, #0]
   baaec:	691b      	ldr	r3, [r3, #16]
   baaee:	4798      	blx	r3
   baaf0:	2800      	cmp	r0, #0
   baaf2:	dd01      	ble.n	baaf8 <serialEventRun+0x18>
        serialEvent();
   baaf4:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   baaf8:	4b06      	ldr	r3, [pc, #24]	; (bab14 <serialEventRun+0x34>)
   baafa:	b143      	cbz	r3, bab0e <serialEventRun+0x2e>
   baafc:	f000 fc3a 	bl	bb374 <_Z22__fetch_global_Serial1v>
   bab00:	6803      	ldr	r3, [r0, #0]
   bab02:	691b      	ldr	r3, [r3, #16]
   bab04:	4798      	blx	r3
   bab06:	2800      	cmp	r0, #0
   bab08:	dd01      	ble.n	bab0e <serialEventRun+0x2e>
        serialEvent1();
   bab0a:	f3af 8000 	nop.w
}
   bab0e:	bd08      	pop	{r3, pc}
	...

000bab18 <_post_loop>:
{
   bab18:	b508      	push	{r3, lr}
	serialEventRun();
   bab1a:	f7ff ffe1 	bl	baae0 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   bab1e:	f7ff fa83 	bl	ba028 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   bab22:	4b01      	ldr	r3, [pc, #4]	; (bab28 <_post_loop+0x10>)
   bab24:	6018      	str	r0, [r3, #0]
}
   bab26:	bd08      	pop	{r3, pc}
   bab28:	2003e738 	.word	0x2003e738

000bab2c <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   bab2c:	4805      	ldr	r0, [pc, #20]	; (bab44 <_Z33system_initialize_user_backup_ramv+0x18>)
   bab2e:	4a06      	ldr	r2, [pc, #24]	; (bab48 <_Z33system_initialize_user_backup_ramv+0x1c>)
   bab30:	4906      	ldr	r1, [pc, #24]	; (bab4c <_Z33system_initialize_user_backup_ramv+0x20>)
{
   bab32:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   bab34:	1a12      	subs	r2, r2, r0
   bab36:	f000 fca7 	bl	bb488 <memcpy>
    __backup_sram_signature = signature;
   bab3a:	4b05      	ldr	r3, [pc, #20]	; (bab50 <_Z33system_initialize_user_backup_ramv+0x24>)
   bab3c:	4a05      	ldr	r2, [pc, #20]	; (bab54 <_Z33system_initialize_user_backup_ramv+0x28>)
   bab3e:	601a      	str	r2, [r3, #0]
}
   bab40:	bd08      	pop	{r3, pc}
   bab42:	bf00      	nop
   bab44:	2003f400 	.word	0x2003f400
   bab48:	2003f404 	.word	0x2003f404
   bab4c:	000bd6c4 	.word	0x000bd6c4
   bab50:	2003f400 	.word	0x2003f400
   bab54:	9a271c1e 	.word	0x9a271c1e

000bab58 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   bab58:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   bab5a:	2300      	movs	r3, #0
   bab5c:	9300      	str	r3, [sp, #0]
   bab5e:	461a      	mov	r2, r3
   bab60:	f06f 0177 	mvn.w	r1, #119	; 0x77
   bab64:	f7ff fbd2 	bl	ba30c <system_ctrl_set_result>
}
   bab68:	b003      	add	sp, #12
   bab6a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000bab70 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   bab70:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   bab72:	8843      	ldrh	r3, [r0, #2]
   bab74:	2b0a      	cmp	r3, #10
   bab76:	d008      	beq.n	bab8a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   bab78:	2b50      	cmp	r3, #80	; 0x50
   bab7a:	d10b      	bne.n	bab94 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   bab7c:	4b09      	ldr	r3, [pc, #36]	; (baba4 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   bab7e:	681b      	ldr	r3, [r3, #0]
   bab80:	b14b      	cbz	r3, bab96 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   bab82:	b003      	add	sp, #12
   bab84:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   bab88:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   bab8a:	f7ff ffe5 	bl	bab58 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   bab8e:	b003      	add	sp, #12
   bab90:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   bab94:	2300      	movs	r3, #0
   bab96:	9300      	str	r3, [sp, #0]
   bab98:	461a      	mov	r2, r3
   bab9a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   bab9e:	f7ff fbb5 	bl	ba30c <system_ctrl_set_result>
}
   baba2:	e7f4      	b.n	bab8e <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   baba4:	2003e6f4 	.word	0x2003e6f4

000baba8 <module_user_init_hook>:
{
   baba8:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   babaa:	4812      	ldr	r0, [pc, #72]	; (babf4 <module_user_init_hook+0x4c>)
   babac:	2100      	movs	r1, #0
   babae:	f7ff fc5f 	bl	ba470 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   babb2:	4b11      	ldr	r3, [pc, #68]	; (babf8 <module_user_init_hook+0x50>)
   babb4:	681a      	ldr	r2, [r3, #0]
   babb6:	4b11      	ldr	r3, [pc, #68]	; (babfc <module_user_init_hook+0x54>)
   babb8:	429a      	cmp	r2, r3
   babba:	4b11      	ldr	r3, [pc, #68]	; (bac00 <module_user_init_hook+0x58>)
   babbc:	bf0c      	ite	eq
   babbe:	2201      	moveq	r2, #1
   babc0:	2200      	movne	r2, #0
   babc2:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   babc4:	d001      	beq.n	babca <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   babc6:	f7ff ffb1 	bl	bab2c <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   babca:	f7ff fa1d 	bl	ba008 <HAL_RNG_GetRandomNumber>
   babce:	4604      	mov	r4, r0
    srand(seed);
   babd0:	f000 fc80 	bl	bb4d4 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   babd4:	4b0b      	ldr	r3, [pc, #44]	; (bac04 <module_user_init_hook+0x5c>)
   babd6:	b113      	cbz	r3, babde <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   babd8:	4620      	mov	r0, r4
   babda:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   babde:	2100      	movs	r1, #0
   babe0:	4808      	ldr	r0, [pc, #32]	; (bac04 <module_user_init_hook+0x5c>)
   babe2:	f7ff fbfd 	bl	ba3e0 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   babe6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   babea:	4807      	ldr	r0, [pc, #28]	; (bac08 <module_user_init_hook+0x60>)
   babec:	2100      	movs	r1, #0
   babee:	f7ff bb83 	b.w	ba2f8 <system_ctrl_set_app_request_handler>
   babf2:	bf00      	nop
   babf4:	000baad5 	.word	0x000baad5
   babf8:	2003f400 	.word	0x2003f400
   babfc:	9a271c1e 	.word	0x9a271c1e
   bac00:	2003e6f0 	.word	0x2003e6f0
   bac04:	00000000 	.word	0x00000000
   bac08:	000bab71 	.word	0x000bab71

000bac0c <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>:

int CloudClass::publishVitals(system_tick_t period_s_) {
    return spark_publish_vitals(period_s_, nullptr);
}

void CloudClass::disconnect(const CloudDisconnectOptions& options) {
   bac0c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    opts.size = sizeof(opts);
   bac0e:	230c      	movs	r3, #12
   bac10:	f8ad 3004 	strh.w	r3, [sp, #4]
    opts.flags = flags_;
   bac14:	6803      	ldr	r3, [r0, #0]
   bac16:	f88d 3006 	strb.w	r3, [sp, #6]
    opts.graceful = graceful_;
   bac1a:	7a03      	ldrb	r3, [r0, #8]
   bac1c:	f88d 3007 	strb.w	r3, [sp, #7]
    opts.timeout = timeout_;
   bac20:	6843      	ldr	r3, [r0, #4]
   bac22:	9302      	str	r3, [sp, #8]
    spark_cloud_disconnect_options opts = {};
   bac24:	2100      	movs	r1, #0
    opts.clear_session = clearSession_;
   bac26:	7a43      	ldrb	r3, [r0, #9]
    spark_cloud_disconnect_options opts = {};
   bac28:	f8ad 100d 	strh.w	r1, [sp, #13]
    const auto opts = options.toSystemOptions();
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   bac2c:	a801      	add	r0, sp, #4
    spark_cloud_disconnect_options opts = {};
   bac2e:	f88d 100f 	strb.w	r1, [sp, #15]
    opts.clear_session = clearSession_;
   bac32:	f88d 300c 	strb.w	r3, [sp, #12]
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   bac36:	f7ff fbdb 	bl	ba3f0 <spark_cloud_disconnect>
}
   bac3a:	b005      	add	sp, #20
   bac3c:	f85d fb04 	ldr.w	pc, [sp], #4

000bac40 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   bac40:	4770      	bx	lr

000bac42 <_ZN9IPAddressD0Ev>:
   bac42:	b510      	push	{r4, lr}
   bac44:	2118      	movs	r1, #24
   bac46:	4604      	mov	r4, r0
   bac48:	f7f9 fefd 	bl	b4a46 <_ZdlPvj>
   bac4c:	4620      	mov	r0, r4
   bac4e:	bd10      	pop	{r4, pc}

000bac50 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   bac50:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   bac52:	7d03      	ldrb	r3, [r0, #20]
   bac54:	2b06      	cmp	r3, #6
{
   bac56:	b08d      	sub	sp, #52	; 0x34
   bac58:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   bac5a:	f100 0704 	add.w	r7, r0, #4
   bac5e:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   bac62:	d012      	beq.n	bac8a <_ZNK9IPAddress7printToER5Print+0x3a>
   bac64:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   bac68:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   bac6c:	220a      	movs	r2, #10
   bac6e:	4630      	mov	r0, r6
   bac70:	f7ff fe77 	bl	ba962 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   bac74:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   bac76:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   bac78:	d019      	beq.n	bacae <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   bac7a:	2c00      	cmp	r4, #0
   bac7c:	d0f4      	beq.n	bac68 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   bac7e:	212e      	movs	r1, #46	; 0x2e
   bac80:	4630      	mov	r0, r6
   bac82:	f7ff fe55 	bl	ba930 <_ZN5Print5printEc>
   bac86:	4404      	add	r4, r0
   bac88:	e7ee      	b.n	bac68 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   bac8a:	232f      	movs	r3, #47	; 0x2f
   bac8c:	466a      	mov	r2, sp
   bac8e:	4639      	mov	r1, r7
   bac90:	200a      	movs	r0, #10
		buf[0] = 0;
   bac92:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   bac96:	f7ff f9ef 	bl	ba078 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   bac9a:	4668      	mov	r0, sp
   bac9c:	f7f9 fe8e 	bl	b49bc <strlen>
   baca0:	6833      	ldr	r3, [r6, #0]
   baca2:	4602      	mov	r2, r0
   baca4:	68db      	ldr	r3, [r3, #12]
   baca6:	4669      	mov	r1, sp
   baca8:	4630      	mov	r0, r6
   bacaa:	4798      	blx	r3
   bacac:	4604      	mov	r4, r0
    }
    return n;
}
   bacae:	4620      	mov	r0, r4
   bacb0:	b00d      	add	sp, #52	; 0x34
   bacb2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000bacb4 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   bacb4:	b510      	push	{r4, lr}
   bacb6:	4b05      	ldr	r3, [pc, #20]	; (baccc <_ZN9IPAddressC1Ev+0x18>)
   bacb8:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   bacba:	2211      	movs	r2, #17
   bacbc:	f840 3b04 	str.w	r3, [r0], #4
   bacc0:	2100      	movs	r1, #0
   bacc2:	f000 fbef 	bl	bb4a4 <memset>
}
   bacc6:	4620      	mov	r0, r4
   bacc8:	bd10      	pop	{r4, pc}
   bacca:	bf00      	nop
   baccc:	000bd3a0 	.word	0x000bd3a0

000bacd0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   bacd0:	4603      	mov	r3, r0
   bacd2:	4a07      	ldr	r2, [pc, #28]	; (bacf0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   bacd4:	b510      	push	{r4, lr}
   bacd6:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   bacda:	f101 0210 	add.w	r2, r1, #16
   bacde:	f851 4b04 	ldr.w	r4, [r1], #4
   bace2:	f843 4b04 	str.w	r4, [r3], #4
   bace6:	4291      	cmp	r1, r2
   bace8:	d1f9      	bne.n	bacde <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   bacea:	780a      	ldrb	r2, [r1, #0]
   bacec:	701a      	strb	r2, [r3, #0]
}
   bacee:	bd10      	pop	{r4, pc}
   bacf0:	000bd3a0 	.word	0x000bd3a0

000bacf4 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   bacf4:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   bacf6:	f89d 4008 	ldrb.w	r4, [sp, #8]
   bacfa:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   bacfe:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   bad02:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   bad06:	2304      	movs	r3, #4
   bad08:	6041      	str	r1, [r0, #4]
   bad0a:	7503      	strb	r3, [r0, #20]
}
   bad0c:	bd10      	pop	{r4, pc}
	...

000bad10 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   bad10:	b507      	push	{r0, r1, r2, lr}
   bad12:	4b06      	ldr	r3, [pc, #24]	; (bad2c <_ZN9IPAddressC1EPKh+0x1c>)
   bad14:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   bad16:	78cb      	ldrb	r3, [r1, #3]
   bad18:	9300      	str	r3, [sp, #0]
   bad1a:	788b      	ldrb	r3, [r1, #2]
   bad1c:	784a      	ldrb	r2, [r1, #1]
   bad1e:	7809      	ldrb	r1, [r1, #0]
   bad20:	f7ff ffe8 	bl	bacf4 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   bad24:	b003      	add	sp, #12
   bad26:	f85d fb04 	ldr.w	pc, [sp], #4
   bad2a:	bf00      	nop
   bad2c:	000bd3a0 	.word	0x000bd3a0

000bad30 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   bad30:	7441      	strb	r1, [r0, #17]
}
   bad32:	4770      	bx	lr

000bad34 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   bad34:	4770      	bx	lr

000bad36 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   bad36:	4770      	bx	lr

000bad38 <_ZN9USBSerial4readEv>:
{
   bad38:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   bad3a:	2100      	movs	r1, #0
   bad3c:	7c00      	ldrb	r0, [r0, #16]
   bad3e:	f7ff faab 	bl	ba298 <HAL_USB_USART_Receive_Data>
}
   bad42:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bad46:	bd08      	pop	{r3, pc}

000bad48 <_ZN9USBSerial4peekEv>:
{
   bad48:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   bad4a:	2101      	movs	r1, #1
   bad4c:	7c00      	ldrb	r0, [r0, #16]
   bad4e:	f7ff faa3 	bl	ba298 <HAL_USB_USART_Receive_Data>
}
   bad52:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bad56:	bd08      	pop	{r3, pc}

000bad58 <_ZN9USBSerial17availableForWriteEv>:
{
   bad58:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   bad5a:	7c00      	ldrb	r0, [r0, #16]
   bad5c:	f7ff fa94 	bl	ba288 <HAL_USB_USART_Available_Data_For_Write>
}
   bad60:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bad64:	bd08      	pop	{r3, pc}

000bad66 <_ZN9USBSerial9availableEv>:
{
   bad66:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   bad68:	7c00      	ldrb	r0, [r0, #16]
   bad6a:	f7ff fa85 	bl	ba278 <HAL_USB_USART_Available_Data>
}
   bad6e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bad72:	bd08      	pop	{r3, pc}

000bad74 <_ZN9USBSerial5writeEh>:
{
   bad74:	b513      	push	{r0, r1, r4, lr}
   bad76:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   bad78:	7c00      	ldrb	r0, [r0, #16]
{
   bad7a:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   bad7c:	f7ff fa84 	bl	ba288 <HAL_USB_USART_Available_Data_For_Write>
   bad80:	2800      	cmp	r0, #0
   bad82:	9901      	ldr	r1, [sp, #4]
   bad84:	dc01      	bgt.n	bad8a <_ZN9USBSerial5writeEh+0x16>
   bad86:	7c60      	ldrb	r0, [r4, #17]
   bad88:	b120      	cbz	r0, bad94 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   bad8a:	7c20      	ldrb	r0, [r4, #16]
   bad8c:	f7ff fa8c 	bl	ba2a8 <HAL_USB_USART_Send_Data>
   bad90:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   bad94:	b002      	add	sp, #8
   bad96:	bd10      	pop	{r4, pc}

000bad98 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   bad98:	7c00      	ldrb	r0, [r0, #16]
   bad9a:	f7ff ba8d 	b.w	ba2b8 <HAL_USB_USART_Flush_Data>

000bad9e <_ZN9USBSerialD0Ev>:
   bad9e:	b510      	push	{r4, lr}
   bada0:	2114      	movs	r1, #20
   bada2:	4604      	mov	r4, r0
   bada4:	f7f9 fe4f 	bl	b4a46 <_ZdlPvj>
   bada8:	4620      	mov	r0, r4
   badaa:	bd10      	pop	{r4, pc}

000badac <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   badac:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   badae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   badb2:	4604      	mov	r4, r0
   badb4:	4608      	mov	r0, r1
   badb6:	2100      	movs	r1, #0
   badb8:	e9c4 1301 	strd	r1, r3, [r4, #4]
   badbc:	4b04      	ldr	r3, [pc, #16]	; (badd0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   badbe:	6023      	str	r3, [r4, #0]
  _blocking = true;
   badc0:	2301      	movs	r3, #1
  _serial = serial;
   badc2:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   badc4:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   badc6:	4611      	mov	r1, r2
   badc8:	f7ff fa46 	bl	ba258 <HAL_USB_USART_Init>
}
   badcc:	4620      	mov	r0, r4
   badce:	bd10      	pop	{r4, pc}
   badd0:	000bd3b4 	.word	0x000bd3b4

000badd4 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   badd4:	7c00      	ldrb	r0, [r0, #16]
   badd6:	2200      	movs	r2, #0
   badd8:	f7ff ba46 	b.w	ba268 <HAL_USB_USART_Begin>

000baddc <_Z19acquireSerialBufferv>:
{
   baddc:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   badde:	2214      	movs	r2, #20
{
   bade0:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   bade2:	2100      	movs	r1, #0
   bade4:	f000 fb5e 	bl	bb4a4 <memset>
}
   bade8:	4620      	mov	r0, r4
   badea:	bd10      	pop	{r4, pc}

000badec <_Z16_fetch_usbserialv>:
{
   badec:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   badee:	4c0f      	ldr	r4, [pc, #60]	; (bae2c <_Z16_fetch_usbserialv+0x40>)
{
   badf0:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   badf2:	a803      	add	r0, sp, #12
   badf4:	f7ff fff2 	bl	baddc <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   badf8:	7821      	ldrb	r1, [r4, #0]
   badfa:	f3bf 8f5b 	dmb	ish
   badfe:	f011 0101 	ands.w	r1, r1, #1
   bae02:	d10f      	bne.n	bae24 <_Z16_fetch_usbserialv+0x38>
   bae04:	4620      	mov	r0, r4
   bae06:	9101      	str	r1, [sp, #4]
   bae08:	f7f9 fe2c 	bl	b4a64 <__cxa_guard_acquire>
   bae0c:	9901      	ldr	r1, [sp, #4]
   bae0e:	b148      	cbz	r0, bae24 <_Z16_fetch_usbserialv+0x38>
   bae10:	aa03      	add	r2, sp, #12
   bae12:	4807      	ldr	r0, [pc, #28]	; (bae30 <_Z16_fetch_usbserialv+0x44>)
   bae14:	f7ff ffca 	bl	badac <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   bae18:	4620      	mov	r0, r4
   bae1a:	f7f9 fe28 	bl	b4a6e <__cxa_guard_release>
   bae1e:	4805      	ldr	r0, [pc, #20]	; (bae34 <_Z16_fetch_usbserialv+0x48>)
   bae20:	f000 fb24 	bl	bb46c <atexit>
	return _usbserial;
}
   bae24:	4802      	ldr	r0, [pc, #8]	; (bae30 <_Z16_fetch_usbserialv+0x44>)
   bae26:	b008      	add	sp, #32
   bae28:	bd10      	pop	{r4, pc}
   bae2a:	bf00      	nop
   bae2c:	2003e6f8 	.word	0x2003e6f8
   bae30:	2003e6fc 	.word	0x2003e6fc
   bae34:	000bad35 	.word	0x000bad35

000bae38 <_Z12noInterruptsv>:
 * Return         : None.
 *******************************************************************************/
void noInterrupts(void)
{
  //Only disable the interrupts that are exposed to the user
  hal_interrupt_disable_all();
   bae38:	f7ff b8c6 	b.w	b9fc8 <hal_interrupt_disable_all>

000bae3c <_Z10interruptsv>:
 * Return         : None.
 *******************************************************************************/
void interrupts(void)
{
  //Only enable the interrupts that are exposed to the user
  hal_interrupt_enable_all();
   bae3c:	f7ff b8bc 	b.w	b9fb8 <hal_interrupt_enable_all>

000bae40 <tone>:

#include "spark_wiring_tone.h"
#include "tone_hal.h"

void tone(uint8_t pin, unsigned int frequency, unsigned long duration)
{
   bae40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (pinAvailable(pin) && hal_pin_validate_function(pin, PF_TIMER)==PF_TIMER) {
   bae42:	b287      	uxth	r7, r0
{
   bae44:	4604      	mov	r4, r0
    if (pinAvailable(pin) && hal_pin_validate_function(pin, PF_TIMER)==PF_TIMER) {
   bae46:	4638      	mov	r0, r7
{
   bae48:	460d      	mov	r5, r1
   bae4a:	4616      	mov	r6, r2
    if (pinAvailable(pin) && hal_pin_validate_function(pin, PF_TIMER)==PF_TIMER) {
   bae4c:	f000 f9c6 	bl	bb1dc <pinAvailable>
   bae50:	b160      	cbz	r0, bae6c <tone+0x2c>
   bae52:	2102      	movs	r1, #2
   bae54:	4638      	mov	r0, r7
   bae56:	f7ff f887 	bl	b9f68 <hal_pin_validate_function>
   bae5a:	2802      	cmp	r0, #2
   bae5c:	d106      	bne.n	bae6c <tone+0x2c>
        HAL_Tone_Start(pin, frequency, duration);
   bae5e:	4632      	mov	r2, r6
   bae60:	4629      	mov	r1, r5
   bae62:	4620      	mov	r0, r4
    }
}
   bae64:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        HAL_Tone_Start(pin, frequency, duration);
   bae68:	f7ff b9e6 	b.w	ba238 <HAL_Tone_Start>
}
   bae6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bae6e <noTone>:

void noTone(uint8_t pin)
{
   bae6e:	b538      	push	{r3, r4, r5, lr}
    if (pinAvailable(pin) && hal_pin_validate_function(pin, PF_TIMER)==PF_TIMER) {
   bae70:	b285      	uxth	r5, r0
{
   bae72:	4604      	mov	r4, r0
    if (pinAvailable(pin) && hal_pin_validate_function(pin, PF_TIMER)==PF_TIMER) {
   bae74:	4628      	mov	r0, r5
   bae76:	f000 f9b1 	bl	bb1dc <pinAvailable>
   bae7a:	b150      	cbz	r0, bae92 <noTone+0x24>
   bae7c:	2102      	movs	r1, #2
   bae7e:	4628      	mov	r0, r5
   bae80:	f7ff f872 	bl	b9f68 <hal_pin_validate_function>
   bae84:	2802      	cmp	r0, #2
   bae86:	d104      	bne.n	bae92 <noTone+0x24>
        HAL_Tone_Stop(pin);
   bae88:	4620      	mov	r0, r4
    }
}
   bae8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        HAL_Tone_Stop(pin);
   bae8e:	f7ff b9db 	b.w	ba248 <HAL_Tone_Stop>
}
   bae92:	bd38      	pop	{r3, r4, r5, pc}

000bae94 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   bae94:	4770      	bx	lr

000bae96 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   bae96:	7441      	strb	r1, [r0, #17]
}
   bae98:	4770      	bx	lr

000bae9a <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   bae9a:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   bae9c:	7c00      	ldrb	r0, [r0, #16]
   bae9e:	f7ff f923 	bl	ba0e8 <hal_usart_available_data_for_write>
}
   baea2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   baea6:	bd08      	pop	{r3, pc}

000baea8 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   baea8:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   baeaa:	7c00      	ldrb	r0, [r0, #16]
   baeac:	f7ff f8f4 	bl	ba098 <hal_usart_available>
}
   baeb0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   baeb4:	bd08      	pop	{r3, pc}

000baeb6 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   baeb6:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   baeb8:	7c00      	ldrb	r0, [r0, #16]
   baeba:	f7ff f8fd 	bl	ba0b8 <hal_usart_peek>
}
   baebe:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   baec2:	bd08      	pop	{r3, pc}

000baec4 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   baec4:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   baec6:	7c00      	ldrb	r0, [r0, #16]
   baec8:	f7ff f8ee 	bl	ba0a8 <hal_usart_read>
}
   baecc:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   baed0:	bd08      	pop	{r3, pc}

000baed2 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   baed2:	7c00      	ldrb	r0, [r0, #16]
   baed4:	f7ff b8f8 	b.w	ba0c8 <hal_usart_flush>

000baed8 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   baed8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   baeda:	7c45      	ldrb	r5, [r0, #17]
{
   baedc:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   baede:	b12d      	cbz	r5, baeec <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   baee0:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   baee2:	b003      	add	sp, #12
   baee4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   baee8:	f7ff b8ce 	b.w	ba088 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   baeec:	7c00      	ldrb	r0, [r0, #16]
   baeee:	9101      	str	r1, [sp, #4]
   baef0:	f7ff f8fa 	bl	ba0e8 <hal_usart_available_data_for_write>
   baef4:	2800      	cmp	r0, #0
   baef6:	9901      	ldr	r1, [sp, #4]
   baef8:	dcf2      	bgt.n	baee0 <_ZN11USARTSerial5writeEh+0x8>
}
   baefa:	4628      	mov	r0, r5
   baefc:	b003      	add	sp, #12
   baefe:	bd30      	pop	{r4, r5, pc}

000baf00 <_ZN11USARTSerialD0Ev>:
   baf00:	b510      	push	{r4, lr}
   baf02:	2114      	movs	r1, #20
   baf04:	4604      	mov	r4, r0
   baf06:	f7f9 fd9e 	bl	b4a46 <_ZdlPvj>
   baf0a:	4620      	mov	r0, r4
   baf0c:	bd10      	pop	{r4, pc}
	...

000baf10 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   baf10:	b510      	push	{r4, lr}
   baf12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   baf16:	4604      	mov	r4, r0
   baf18:	4608      	mov	r0, r1
   baf1a:	4611      	mov	r1, r2
   baf1c:	2200      	movs	r2, #0
   baf1e:	e9c4 2301 	strd	r2, r3, [r4, #4]
   baf22:	4b04      	ldr	r3, [pc, #16]	; (baf34 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   baf24:	6023      	str	r3, [r4, #0]
  _blocking = true;
   baf26:	2301      	movs	r3, #1
  _serial = serial;
   baf28:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   baf2a:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   baf2c:	f7ff f8e4 	bl	ba0f8 <hal_usart_init_ex>
}
   baf30:	4620      	mov	r0, r4
   baf32:	bd10      	pop	{r4, pc}
   baf34:	000bd3e4 	.word	0x000bd3e4

000baf38 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   baf38:	4770      	bx	lr

000baf3a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   baf3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   baf3c:	4606      	mov	r6, r0
   baf3e:	4615      	mov	r5, r2
   baf40:	460c      	mov	r4, r1
   baf42:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   baf44:	42bc      	cmp	r4, r7
   baf46:	d006      	beq.n	baf56 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   baf48:	6833      	ldr	r3, [r6, #0]
   baf4a:	f814 1b01 	ldrb.w	r1, [r4], #1
   baf4e:	689b      	ldr	r3, [r3, #8]
   baf50:	4630      	mov	r0, r6
   baf52:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   baf54:	e7f6      	b.n	baf44 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   baf56:	4628      	mov	r0, r5
   baf58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000baf5a <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   baf5a:	7c00      	ldrb	r0, [r0, #16]
   baf5c:	2200      	movs	r2, #0
   baf5e:	f7ff b8f3 	b.w	ba148 <hal_i2c_write>

000baf62 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   baf62:	7c00      	ldrb	r0, [r0, #16]
   baf64:	2100      	movs	r1, #0
   baf66:	f7ff b8f7 	b.w	ba158 <hal_i2c_available>

000baf6a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   baf6a:	7c00      	ldrb	r0, [r0, #16]
   baf6c:	2100      	movs	r1, #0
   baf6e:	f7ff b8fb 	b.w	ba168 <hal_i2c_read>

000baf72 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   baf72:	7c00      	ldrb	r0, [r0, #16]
   baf74:	2100      	movs	r1, #0
   baf76:	f7ff b8ff 	b.w	ba178 <hal_i2c_peek>

000baf7a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   baf7a:	7c00      	ldrb	r0, [r0, #16]
   baf7c:	2100      	movs	r1, #0
   baf7e:	f7ff b903 	b.w	ba188 <hal_i2c_flush>

000baf82 <_ZN7TwoWireD0Ev>:
   baf82:	b510      	push	{r4, lr}
   baf84:	2114      	movs	r1, #20
   baf86:	4604      	mov	r4, r0
   baf88:	f7f9 fd5d 	bl	b4a46 <_ZdlPvj>
   baf8c:	4620      	mov	r0, r4
   baf8e:	bd10      	pop	{r4, pc}

000baf90 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   baf90:	b538      	push	{r3, r4, r5, lr}
   baf92:	4604      	mov	r4, r0
   baf94:	4615      	mov	r5, r2
   baf96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   baf9a:	2200      	movs	r2, #0
   baf9c:	e9c4 2301 	strd	r2, r3, [r4, #4]
   bafa0:	4b09      	ldr	r3, [pc, #36]	; (bafc8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   bafa2:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   bafa4:	4608      	mov	r0, r1
   bafa6:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   bafa8:	4629      	mov	r1, r5
   bafaa:	f7ff f8fd 	bl	ba1a8 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   bafae:	30bf      	adds	r0, #191	; 0xbf
   bafb0:	d108      	bne.n	bafc4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   bafb2:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   bafb4:	07db      	lsls	r3, r3, #31
   bafb6:	d505      	bpl.n	bafc4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   bafb8:	6868      	ldr	r0, [r5, #4]
   bafba:	f7ff fa29 	bl	ba410 <free>
    free(conf.tx_buffer);
   bafbe:	68e8      	ldr	r0, [r5, #12]
   bafc0:	f7ff fa26 	bl	ba410 <free>
}
   bafc4:	4620      	mov	r0, r4
   bafc6:	bd38      	pop	{r3, r4, r5, pc}
   bafc8:	000bd414 	.word	0x000bd414

000bafcc <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
   bafcc:	7c00      	ldrb	r0, [r0, #16]
   bafce:	2200      	movs	r2, #0
   bafd0:	f7ff b89a 	b.w	ba108 <hal_i2c_set_speed>

000bafd4 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   bafd4:	2300      	movs	r3, #0
   bafd6:	7c00      	ldrb	r0, [r0, #16]
   bafd8:	461a      	mov	r2, r3
   bafda:	4619      	mov	r1, r3
   bafdc:	f7ff b89c 	b.w	ba118 <hal_i2c_begin>

000bafe0 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   bafe0:	7c00      	ldrb	r0, [r0, #16]
   bafe2:	2200      	movs	r2, #0
   bafe4:	f7ff b8a0 	b.w	ba128 <hal_i2c_begin_transmission>

000bafe8 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   bafe8:	b2c9      	uxtb	r1, r1
   bafea:	f7ff bff9 	b.w	bafe0 <_ZN7TwoWire17beginTransmissionEh>

000bafee <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   bafee:	7c00      	ldrb	r0, [r0, #16]
   baff0:	2200      	movs	r2, #0
   baff2:	f7ff b8a1 	b.w	ba138 <hal_i2c_end_transmission>

000baff6 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   baff6:	2101      	movs	r1, #1
   baff8:	f7ff bff9 	b.w	bafee <_ZN7TwoWire15endTransmissionEh>

000baffc <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   baffc:	2200      	movs	r2, #0
   baffe:	6840      	ldr	r0, [r0, #4]
   bb000:	4611      	mov	r1, r2
   bb002:	f7ff b9a5 	b.w	ba350 <network_ready>

000bb006 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   bb006:	2200      	movs	r2, #0
   bb008:	6840      	ldr	r0, [r0, #4]
   bb00a:	4611      	mov	r1, r2
   bb00c:	f7ff b9c0 	b.w	ba390 <network_listening>

000bb010 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   bb010:	2200      	movs	r2, #0
   bb012:	6840      	ldr	r0, [r0, #4]
   bb014:	4611      	mov	r1, r2
   bb016:	f7ff b9cb 	b.w	ba3b0 <network_get_listen_timeout>

000bb01a <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   bb01a:	6840      	ldr	r0, [r0, #4]
   bb01c:	2200      	movs	r2, #0
   bb01e:	f7ff b9bf 	b.w	ba3a0 <network_set_listen_timeout>

000bb022 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   bb022:	6840      	ldr	r0, [r0, #4]
   bb024:	2200      	movs	r2, #0
   bb026:	f081 0101 	eor.w	r1, r1, #1
   bb02a:	f7ff b9a9 	b.w	ba380 <network_listen>

000bb02e <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   bb02e:	2300      	movs	r3, #0
   bb030:	6840      	ldr	r0, [r0, #4]
   bb032:	461a      	mov	r2, r3
   bb034:	4619      	mov	r1, r3
   bb036:	f7ff b99b 	b.w	ba370 <network_off>

000bb03a <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   bb03a:	2300      	movs	r3, #0
   bb03c:	6840      	ldr	r0, [r0, #4]
   bb03e:	461a      	mov	r2, r3
   bb040:	4619      	mov	r1, r3
   bb042:	f7ff b98d 	b.w	ba360 <network_on>

000bb046 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   bb046:	2200      	movs	r2, #0
   bb048:	6840      	ldr	r0, [r0, #4]
   bb04a:	4611      	mov	r1, r2
   bb04c:	f7ff b970 	b.w	ba330 <network_connecting>

000bb050 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   bb050:	6840      	ldr	r0, [r0, #4]
   bb052:	2200      	movs	r2, #0
   bb054:	2102      	movs	r1, #2
   bb056:	f7ff b973 	b.w	ba340 <network_disconnect>

000bb05a <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   bb05a:	2300      	movs	r3, #0
   bb05c:	6840      	ldr	r0, [r0, #4]
   bb05e:	461a      	mov	r2, r3
   bb060:	f7ff b95e 	b.w	ba320 <network_connect>

000bb064 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   bb064:	4b02      	ldr	r3, [pc, #8]	; (bb070 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   bb066:	2204      	movs	r2, #4
   bb068:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   bb06a:	4a02      	ldr	r2, [pc, #8]	; (bb074 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   bb06c:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   bb06e:	4770      	bx	lr
   bb070:	2003e710 	.word	0x2003e710
   bb074:	000bd43c 	.word	0x000bd43c

000bb078 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   bb078:	2300      	movs	r3, #0
   bb07a:	6840      	ldr	r0, [r0, #4]
   bb07c:	461a      	mov	r2, r3
   bb07e:	f7ff b94f 	b.w	ba320 <network_connect>

000bb082 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   bb082:	6840      	ldr	r0, [r0, #4]
   bb084:	2200      	movs	r2, #0
   bb086:	2102      	movs	r1, #2
   bb088:	f7ff b95a 	b.w	ba340 <network_disconnect>

000bb08c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   bb08c:	2200      	movs	r2, #0
   bb08e:	6840      	ldr	r0, [r0, #4]
   bb090:	4611      	mov	r1, r2
   bb092:	f7ff b94d 	b.w	ba330 <network_connecting>

000bb096 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   bb096:	2200      	movs	r2, #0
   bb098:	6840      	ldr	r0, [r0, #4]
   bb09a:	4611      	mov	r1, r2
   bb09c:	f7ff b958 	b.w	ba350 <network_ready>

000bb0a0 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   bb0a0:	2300      	movs	r3, #0
   bb0a2:	6840      	ldr	r0, [r0, #4]
   bb0a4:	461a      	mov	r2, r3
   bb0a6:	4619      	mov	r1, r3
   bb0a8:	f7ff b95a 	b.w	ba360 <network_on>

000bb0ac <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   bb0ac:	2300      	movs	r3, #0
   bb0ae:	6840      	ldr	r0, [r0, #4]
   bb0b0:	461a      	mov	r2, r3
   bb0b2:	4619      	mov	r1, r3
   bb0b4:	f7ff b95c 	b.w	ba370 <network_off>

000bb0b8 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   bb0b8:	6840      	ldr	r0, [r0, #4]
   bb0ba:	2100      	movs	r1, #0
   bb0bc:	f7ff b980 	b.w	ba3c0 <network_is_on>

000bb0c0 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   bb0c0:	6840      	ldr	r0, [r0, #4]
   bb0c2:	2100      	movs	r1, #0
   bb0c4:	f7ff b984 	b.w	ba3d0 <network_is_off>

000bb0c8 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   bb0c8:	6840      	ldr	r0, [r0, #4]
   bb0ca:	2200      	movs	r2, #0
   bb0cc:	f081 0101 	eor.w	r1, r1, #1
   bb0d0:	f7ff b956 	b.w	ba380 <network_listen>

000bb0d4 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   bb0d4:	6840      	ldr	r0, [r0, #4]
   bb0d6:	2200      	movs	r2, #0
   bb0d8:	f7ff b962 	b.w	ba3a0 <network_set_listen_timeout>

000bb0dc <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   bb0dc:	2200      	movs	r2, #0
   bb0de:	6840      	ldr	r0, [r0, #4]
   bb0e0:	4611      	mov	r1, r2
   bb0e2:	f7ff b965 	b.w	ba3b0 <network_get_listen_timeout>

000bb0e6 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   bb0e6:	2200      	movs	r2, #0
   bb0e8:	6840      	ldr	r0, [r0, #4]
   bb0ea:	4611      	mov	r1, r2
   bb0ec:	f7ff b950 	b.w	ba390 <network_listening>

000bb0f0 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   bb0f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bb0f4:	b095      	sub	sp, #84	; 0x54
   bb0f6:	4614      	mov	r4, r2
   bb0f8:	460d      	mov	r5, r1
   bb0fa:	4607      	mov	r7, r0
    IPAddress addr;
   bb0fc:	f7ff fdda 	bl	bacb4 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   bb100:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   bb102:	221c      	movs	r2, #28
   bb104:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   bb106:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   bb108:	f000 f9cc 	bl	bb4a4 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   bb10c:	2340      	movs	r3, #64	; 0x40
   bb10e:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   bb110:	4620      	mov	r0, r4
   bb112:	466b      	mov	r3, sp
   bb114:	aa0c      	add	r2, sp, #48	; 0x30
   bb116:	2100      	movs	r1, #0
   bb118:	f7fe ff1e 	bl	b9f58 <netdb_getaddrinfo>
    if (!r) {
   bb11c:	4604      	mov	r4, r0
   bb11e:	2800      	cmp	r0, #0
   bb120:	d14b      	bne.n	bb1ba <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   bb122:	4602      	mov	r2, r0
   bb124:	2101      	movs	r1, #1
   bb126:	6868      	ldr	r0, [r5, #4]
   bb128:	f7ff f912 	bl	ba350 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   bb12c:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   bb12e:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   bb130:	4622      	mov	r2, r4
   bb132:	6868      	ldr	r0, [r5, #4]
   bb134:	f7ff f90c 	bl	ba350 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   bb138:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   bb13a:	4681      	mov	r9, r0
        bool ok = false;
   bb13c:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   bb13e:	2e00      	cmp	r6, #0
   bb140:	d03b      	beq.n	bb1ba <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   bb142:	2900      	cmp	r1, #0
   bb144:	d139      	bne.n	bb1ba <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   bb146:	6873      	ldr	r3, [r6, #4]
   bb148:	2b02      	cmp	r3, #2
   bb14a:	d003      	beq.n	bb154 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   bb14c:	2b0a      	cmp	r3, #10
   bb14e:	d011      	beq.n	bb174 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   bb150:	69f6      	ldr	r6, [r6, #28]
   bb152:	e7f4      	b.n	bb13e <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   bb154:	f1b8 0f00 	cmp.w	r8, #0
   bb158:	d0fa      	beq.n	bb150 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   bb15a:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   bb15c:	a806      	add	r0, sp, #24
   bb15e:	3104      	adds	r1, #4
class IPAddress : public Printable {
   bb160:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   bb162:	f7ff fdd5 	bl	bad10 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   bb166:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bb168:	1d3c      	adds	r4, r7, #4
   bb16a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bb16c:	682b      	ldr	r3, [r5, #0]
   bb16e:	7023      	strb	r3, [r4, #0]
                    ok = true;
   bb170:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   bb172:	e7ed      	b.n	bb150 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   bb174:	f1b9 0f00 	cmp.w	r9, #0
   bb178:	d0ea      	beq.n	bb150 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   bb17a:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   bb17c:	2210      	movs	r2, #16
   bb17e:	a801      	add	r0, sp, #4
   bb180:	f000 f990 	bl	bb4a4 <memset>
                    a.v = 6;
   bb184:	2306      	movs	r3, #6
   bb186:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   bb18a:	ad01      	add	r5, sp, #4
   bb18c:	f104 0308 	add.w	r3, r4, #8
   bb190:	3418      	adds	r4, #24
   bb192:	6818      	ldr	r0, [r3, #0]
   bb194:	6859      	ldr	r1, [r3, #4]
   bb196:	462a      	mov	r2, r5
   bb198:	c203      	stmia	r2!, {r0, r1}
   bb19a:	3308      	adds	r3, #8
   bb19c:	42a3      	cmp	r3, r4
   bb19e:	4615      	mov	r5, r2
   bb1a0:	d1f7      	bne.n	bb192 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   bb1a2:	a901      	add	r1, sp, #4
   bb1a4:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   bb1a6:	ad07      	add	r5, sp, #28
   bb1a8:	f7ff fd92 	bl	bacd0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   bb1ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bb1ae:	1d3c      	adds	r4, r7, #4
   bb1b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bb1b2:	682b      	ldr	r3, [r5, #0]
   bb1b4:	7023      	strb	r3, [r4, #0]
                    ok = true;
   bb1b6:	4649      	mov	r1, r9
   bb1b8:	e7ca      	b.n	bb150 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   bb1ba:	9800      	ldr	r0, [sp, #0]
   bb1bc:	f7fe fec4 	bl	b9f48 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   bb1c0:	4638      	mov	r0, r7
   bb1c2:	b015      	add	sp, #84	; 0x54
   bb1c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000bb1c8 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   bb1c8:	4b02      	ldr	r3, [pc, #8]	; (bb1d4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   bb1ca:	4a03      	ldr	r2, [pc, #12]	; (bb1d8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   bb1cc:	601a      	str	r2, [r3, #0]
   bb1ce:	2200      	movs	r2, #0
   bb1d0:	605a      	str	r2, [r3, #4]
    network_free_configuration(c, count, nullptr);
    return res;
}
#endif // HAL_USE_SOCKET_HAL_POSIX

} // spark
   bb1d2:	4770      	bx	lr
   bb1d4:	2003e718 	.word	0x2003e718
   bb1d8:	000bd478 	.word	0x000bd478

000bb1dc <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   bb1dc:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   bb1de:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   bb1e0:	d902      	bls.n	bb1e8 <pinAvailable+0xc>
    return false;
   bb1e2:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   bb1e4:	b002      	add	sp, #8
   bb1e6:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   bb1e8:	f1a0 030b 	sub.w	r3, r0, #11
   bb1ec:	2b02      	cmp	r3, #2
   bb1ee:	d81a      	bhi.n	bb226 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   bb1f0:	4c17      	ldr	r4, [pc, #92]	; (bb250 <pinAvailable+0x74>)
   bb1f2:	7821      	ldrb	r1, [r4, #0]
   bb1f4:	f3bf 8f5b 	dmb	ish
   bb1f8:	f011 0101 	ands.w	r1, r1, #1
   bb1fc:	d10b      	bne.n	bb216 <pinAvailable+0x3a>
   bb1fe:	4620      	mov	r0, r4
   bb200:	9101      	str	r1, [sp, #4]
   bb202:	f7f9 fc2f 	bl	b4a64 <__cxa_guard_acquire>
   bb206:	9901      	ldr	r1, [sp, #4]
   bb208:	b128      	cbz	r0, bb216 <pinAvailable+0x3a>
   bb20a:	4812      	ldr	r0, [pc, #72]	; (bb254 <pinAvailable+0x78>)
   bb20c:	f7ff f97c 	bl	ba508 <_ZN8SPIClassC1E19hal_spi_interface_t>
   bb210:	4620      	mov	r0, r4
   bb212:	f7f9 fc2c 	bl	b4a6e <__cxa_guard_release>
   bb216:	4b0f      	ldr	r3, [pc, #60]	; (bb254 <pinAvailable+0x78>)
   bb218:	7818      	ldrb	r0, [r3, #0]
   bb21a:	f7fe ffe5 	bl	ba1e8 <hal_spi_is_enabled>
   bb21e:	2800      	cmp	r0, #0
   bb220:	d1df      	bne.n	bb1e2 <pinAvailable+0x6>
  return true; // 'pin' is available
   bb222:	2001      	movs	r0, #1
   bb224:	e7de      	b.n	bb1e4 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   bb226:	2801      	cmp	r0, #1
   bb228:	d809      	bhi.n	bb23e <pinAvailable+0x62>
   bb22a:	f000 f8f9 	bl	bb420 <_Z19__fetch_global_Wirev>
   bb22e:	2100      	movs	r1, #0
   bb230:	7c00      	ldrb	r0, [r0, #16]
   bb232:	f7fe ffb1 	bl	ba198 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   bb236:	f080 0001 	eor.w	r0, r0, #1
   bb23a:	b2c0      	uxtb	r0, r0
   bb23c:	e7d2      	b.n	bb1e4 <pinAvailable+0x8>
   bb23e:	3809      	subs	r0, #9
   bb240:	2801      	cmp	r0, #1
   bb242:	d8ee      	bhi.n	bb222 <pinAvailable+0x46>
   bb244:	f000 f896 	bl	bb374 <_Z22__fetch_global_Serial1v>
   bb248:	7c00      	ldrb	r0, [r0, #16]
   bb24a:	f7fe ff45 	bl	ba0d8 <hal_usart_is_enabled>
   bb24e:	e7f2      	b.n	bb236 <pinAvailable+0x5a>
   bb250:	2003c730 	.word	0x2003c730
   bb254:	2003c734 	.word	0x2003c734

000bb258 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   bb258:	2823      	cmp	r0, #35	; 0x23
{
   bb25a:	b538      	push	{r3, r4, r5, lr}
   bb25c:	4604      	mov	r4, r0
   bb25e:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   bb260:	d80a      	bhi.n	bb278 <pinMode+0x20>
   bb262:	29ff      	cmp	r1, #255	; 0xff
   bb264:	d008      	beq.n	bb278 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   bb266:	f7ff ffb9 	bl	bb1dc <pinAvailable>
   bb26a:	b128      	cbz	r0, bb278 <pinMode+0x20>
  hal_gpio_mode(pin, setMode);
   bb26c:	4629      	mov	r1, r5
   bb26e:	4620      	mov	r0, r4
}
   bb270:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_mode(pin, setMode);
   bb274:	f7fe be80 	b.w	b9f78 <hal_gpio_mode>
}
   bb278:	bd38      	pop	{r3, r4, r5, pc}

000bb27a <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(hal_pin_t pin, uint8_t value)
{
   bb27a:	b538      	push	{r3, r4, r5, lr}
   bb27c:	4604      	mov	r4, r0
   bb27e:	460d      	mov	r5, r1
    PinMode mode = hal_gpio_get_mode(pin);
   bb280:	f7fe fe82 	bl	b9f88 <hal_gpio_get_mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   bb284:	28ff      	cmp	r0, #255	; 0xff
   bb286:	d010      	beq.n	bb2aa <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   bb288:	2806      	cmp	r0, #6
   bb28a:	d804      	bhi.n	bb296 <digitalWrite+0x1c>
   bb28c:	234d      	movs	r3, #77	; 0x4d
   bb28e:	fa23 f000 	lsr.w	r0, r3, r0
   bb292:	07c3      	lsls	r3, r0, #31
   bb294:	d409      	bmi.n	bb2aa <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   bb296:	4620      	mov	r0, r4
   bb298:	f7ff ffa0 	bl	bb1dc <pinAvailable>
   bb29c:	b128      	cbz	r0, bb2aa <digitalWrite+0x30>
    return;
  }

  hal_gpio_write(pin, value);
   bb29e:	4629      	mov	r1, r5
   bb2a0:	4620      	mov	r0, r4
}
   bb2a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_write(pin, value);
   bb2a6:	f7fe be77 	b.w	b9f98 <hal_gpio_write>
}
   bb2aa:	bd38      	pop	{r3, r4, r5, pc}

000bb2ac <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(hal_pin_t pin)
{
   bb2ac:	b510      	push	{r4, lr}
   bb2ae:	4604      	mov	r4, r0
    PinMode mode = hal_gpio_get_mode(pin);
   bb2b0:	f7fe fe6a 	bl	b9f88 <hal_gpio_get_mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   bb2b4:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   bb2b6:	b2db      	uxtb	r3, r3
   bb2b8:	2b01      	cmp	r3, #1
   bb2ba:	d908      	bls.n	bb2ce <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   bb2bc:	4620      	mov	r0, r4
   bb2be:	f7ff ff8d 	bl	bb1dc <pinAvailable>
   bb2c2:	b120      	cbz	r0, bb2ce <digitalRead+0x22>
      return LOW;
    }

    return hal_gpio_read(pin);
   bb2c4:	4620      	mov	r0, r4
}
   bb2c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return hal_gpio_read(pin);
   bb2ca:	f7fe be6d 	b.w	b9fa8 <hal_gpio_read>
}
   bb2ce:	2000      	movs	r0, #0
   bb2d0:	bd10      	pop	{r4, pc}

000bb2d2 <analogRead>:
int32_t analogRead(hal_pin_t pin)
{
#if !HAL_PLATFORM_RTL872X
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   bb2d2:	280d      	cmp	r0, #13
{
   bb2d4:	b510      	push	{r4, lr}
   bb2d6:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   bb2d8:	bf9c      	itt	ls
   bb2da:	340e      	addls	r4, #14
   bb2dc:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
#endif

  // Safety check
  if( !pinAvailable(pin) ) {
   bb2de:	4620      	mov	r0, r4
   bb2e0:	f7ff ff7c 	bl	bb1dc <pinAvailable>
   bb2e4:	b150      	cbz	r0, bb2fc <analogRead+0x2a>
    return LOW;
  }

  if(hal_pin_validate_function(pin, PF_ADC)!=PF_ADC)
   bb2e6:	2103      	movs	r1, #3
   bb2e8:	4620      	mov	r0, r4
   bb2ea:	f7fe fe3d 	bl	b9f68 <hal_pin_validate_function>
   bb2ee:	2803      	cmp	r0, #3
   bb2f0:	d104      	bne.n	bb2fc <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   bb2f2:	4620      	mov	r0, r4
}
   bb2f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   bb2f8:	f7fe be6e 	b.w	b9fd8 <hal_adc_read>
}
   bb2fc:	2000      	movs	r0, #0
   bb2fe:	bd10      	pop	{r4, pc}

000bb300 <_Z11analogWritetmm>:
/*
 * @brief Should take an integer 0-255 and create a PWM signal with a duty cycle from 0-100%
 * and frequency from 1 to 65535 Hz.
 */
void analogWrite(hal_pin_t pin, uint32_t value, uint32_t pwm_frequency)
{
   bb300:	b570      	push	{r4, r5, r6, lr}
   bb302:	4604      	mov	r4, r0
   bb304:	460d      	mov	r5, r1
   bb306:	4616      	mov	r6, r2
    // Safety check
    if (!pinAvailable(pin))
   bb308:	f7ff ff68 	bl	bb1dc <pinAvailable>
   bb30c:	b198      	cbz	r0, bb336 <_Z11analogWritetmm+0x36>
    {
        return;
    }

    if (hal_pin_validate_function(pin, PF_TIMER) == PF_TIMER)
   bb30e:	2102      	movs	r1, #2
   bb310:	4620      	mov	r0, r4
   bb312:	f7fe fe29 	bl	b9f68 <hal_pin_validate_function>
   bb316:	2802      	cmp	r0, #2
   bb318:	d10d      	bne.n	bb336 <_Z11analogWritetmm+0x36>
    {
        PinMode mode = hal_gpio_get_mode(pin);
   bb31a:	4620      	mov	r0, r4
   bb31c:	f7fe fe34 	bl	b9f88 <hal_gpio_get_mode>

        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
   bb320:	2801      	cmp	r0, #1
   bb322:	d001      	beq.n	bb328 <_Z11analogWritetmm+0x28>
   bb324:	2804      	cmp	r0, #4
   bb326:	d106      	bne.n	bb336 <_Z11analogWritetmm+0x36>
        {
            return;
        }

        hal_pwm_write_with_frequency_ext(pin, value, pwm_frequency);
   bb328:	4632      	mov	r2, r6
   bb32a:	4629      	mov	r1, r5
   bb32c:	4620      	mov	r0, r4
    }
}
   bb32e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        hal_pwm_write_with_frequency_ext(pin, value, pwm_frequency);
   bb332:	f7fe be61 	b.w	b9ff8 <hal_pwm_write_with_frequency_ext>
}
   bb336:	bd70      	pop	{r4, r5, r6, pc}

000bb338 <pulseIn>:
 */
uint32_t pulseIn(hal_pin_t pin, uint16_t value) {

    // NO SAFETY CHECKS!!! WILD WILD WEST!!!

    return hal_gpio_pulse_in(pin, value);
   bb338:	f7fe be56 	b.w	b9fe8 <hal_gpio_pulse_in>

000bb33c <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   bb33c:	4770      	bx	lr
	...

000bb340 <_Z20acquireSerial1Bufferv>:
{
   bb340:	b538      	push	{r3, r4, r5, lr}
   bb342:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   bb344:	2514      	movs	r5, #20
   bb346:	462a      	mov	r2, r5
   bb348:	2100      	movs	r1, #0
   bb34a:	f000 f8ab 	bl	bb4a4 <memset>
   bb34e:	8025      	strh	r5, [r4, #0]
   bb350:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bb352:	4907      	ldr	r1, [pc, #28]	; (bb370 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   bb354:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bb356:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   bb358:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bb35a:	f000 f885 	bl	bb468 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bb35e:	4904      	ldr	r1, [pc, #16]	; (bb370 <_Z20acquireSerial1Bufferv+0x30>)
    };
   bb360:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bb362:	4628      	mov	r0, r5
   bb364:	f000 f880 	bl	bb468 <_ZnajRKSt9nothrow_t>
    };
   bb368:	60e0      	str	r0, [r4, #12]
}
   bb36a:	4620      	mov	r0, r4
   bb36c:	bd38      	pop	{r3, r4, r5, pc}
   bb36e:	bf00      	nop
   bb370:	000bd4ac 	.word	0x000bd4ac

000bb374 <_Z22__fetch_global_Serial1v>:
{
   bb374:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   bb376:	4d0e      	ldr	r5, [pc, #56]	; (bb3b0 <_Z22__fetch_global_Serial1v+0x3c>)
   bb378:	7829      	ldrb	r1, [r5, #0]
   bb37a:	f3bf 8f5b 	dmb	ish
   bb37e:	f011 0401 	ands.w	r4, r1, #1
{
   bb382:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   bb384:	d111      	bne.n	bb3aa <_Z22__fetch_global_Serial1v+0x36>
   bb386:	4628      	mov	r0, r5
   bb388:	f7f9 fb6c 	bl	b4a64 <__cxa_guard_acquire>
   bb38c:	b168      	cbz	r0, bb3aa <_Z22__fetch_global_Serial1v+0x36>
   bb38e:	a801      	add	r0, sp, #4
   bb390:	f7ff ffd6 	bl	bb340 <_Z20acquireSerial1Bufferv>
   bb394:	aa01      	add	r2, sp, #4
   bb396:	4621      	mov	r1, r4
   bb398:	4806      	ldr	r0, [pc, #24]	; (bb3b4 <_Z22__fetch_global_Serial1v+0x40>)
   bb39a:	f7ff fdb9 	bl	baf10 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   bb39e:	4628      	mov	r0, r5
   bb3a0:	f7f9 fb65 	bl	b4a6e <__cxa_guard_release>
   bb3a4:	4804      	ldr	r0, [pc, #16]	; (bb3b8 <_Z22__fetch_global_Serial1v+0x44>)
   bb3a6:	f000 f861 	bl	bb46c <atexit>
    return serial1;
}
   bb3aa:	4802      	ldr	r0, [pc, #8]	; (bb3b4 <_Z22__fetch_global_Serial1v+0x40>)
   bb3ac:	b007      	add	sp, #28
   bb3ae:	bd30      	pop	{r4, r5, pc}
   bb3b0:	2003e720 	.word	0x2003e720
   bb3b4:	2003e724 	.word	0x2003e724
   bb3b8:	000bb33d 	.word	0x000bb33d

000bb3bc <_Z21__fetch_global_EEPROMv>:

// we don't use this global instance since there's no actual instance data
// Having this keeps the unoptimized build happy

EEPROMClass& __fetch_global_EEPROM()
{
   bb3bc:	b510      	push	{r4, lr}
	static EEPROMClass eeprom;
   bb3be:	4c08      	ldr	r4, [pc, #32]	; (bb3e0 <_Z21__fetch_global_EEPROMv+0x24>)
   bb3c0:	7823      	ldrb	r3, [r4, #0]
   bb3c2:	f3bf 8f5b 	dmb	ish
   bb3c6:	07db      	lsls	r3, r3, #31
   bb3c8:	d408      	bmi.n	bb3dc <_Z21__fetch_global_EEPROMv+0x20>
   bb3ca:	4620      	mov	r0, r4
   bb3cc:	f7f9 fb4a 	bl	b4a64 <__cxa_guard_acquire>
   bb3d0:	b120      	cbz	r0, bb3dc <_Z21__fetch_global_EEPROMv+0x20>

struct EEPROMClass{

	EEPROMClass()
    {
    		HAL_EEPROM_Init();
   bb3d2:	f7fe fe31 	bl	ba038 <HAL_EEPROM_Init>
   bb3d6:	4620      	mov	r0, r4
   bb3d8:	f7f9 fb49 	bl	b4a6e <__cxa_guard_release>
	return eeprom;
}
   bb3dc:	4801      	ldr	r0, [pc, #4]	; (bb3e4 <_Z21__fetch_global_EEPROMv+0x28>)
   bb3de:	bd10      	pop	{r4, pc}
   bb3e0:	2003e73c 	.word	0x2003e73c
   bb3e4:	2003e740 	.word	0x2003e740

000bb3e8 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   bb3e8:	4770      	bx	lr
	...

000bb3ec <_Z17acquireWireBufferv>:
{
   bb3ec:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   bb3ee:	4b0a      	ldr	r3, [pc, #40]	; (bb418 <_Z17acquireWireBufferv+0x2c>)
   bb3f0:	6003      	str	r3, [r0, #0]
   bb3f2:	2301      	movs	r3, #1
{
   bb3f4:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   bb3f6:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   bb3f8:	4908      	ldr	r1, [pc, #32]	; (bb41c <_Z17acquireWireBufferv+0x30>)
   bb3fa:	2020      	movs	r0, #32
   bb3fc:	f000 f834 	bl	bb468 <_ZnajRKSt9nothrow_t>
	};
   bb400:	2520      	movs	r5, #32
   bb402:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   bb404:	4905      	ldr	r1, [pc, #20]	; (bb41c <_Z17acquireWireBufferv+0x30>)
	};
   bb406:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   bb408:	4628      	mov	r0, r5
   bb40a:	f000 f82d 	bl	bb468 <_ZnajRKSt9nothrow_t>
	};
   bb40e:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   bb412:	4620      	mov	r0, r4
   bb414:	bd38      	pop	{r3, r4, r5, pc}
   bb416:	bf00      	nop
   bb418:	00010018 	.word	0x00010018
   bb41c:	000bd4ac 	.word	0x000bd4ac

000bb420 <_Z19__fetch_global_Wirev>:
{
   bb420:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   bb422:	4d0e      	ldr	r5, [pc, #56]	; (bb45c <_Z19__fetch_global_Wirev+0x3c>)
   bb424:	7829      	ldrb	r1, [r5, #0]
   bb426:	f3bf 8f5b 	dmb	ish
   bb42a:	f011 0401 	ands.w	r4, r1, #1
{
   bb42e:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   bb430:	d111      	bne.n	bb456 <_Z19__fetch_global_Wirev+0x36>
   bb432:	4628      	mov	r0, r5
   bb434:	f7f9 fb16 	bl	b4a64 <__cxa_guard_acquire>
   bb438:	b168      	cbz	r0, bb456 <_Z19__fetch_global_Wirev+0x36>
   bb43a:	4668      	mov	r0, sp
   bb43c:	f7ff ffd6 	bl	bb3ec <_Z17acquireWireBufferv>
   bb440:	466a      	mov	r2, sp
   bb442:	4621      	mov	r1, r4
   bb444:	4806      	ldr	r0, [pc, #24]	; (bb460 <_Z19__fetch_global_Wirev+0x40>)
   bb446:	f7ff fda3 	bl	baf90 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   bb44a:	4628      	mov	r0, r5
   bb44c:	f7f9 fb0f 	bl	b4a6e <__cxa_guard_release>
   bb450:	4804      	ldr	r0, [pc, #16]	; (bb464 <_Z19__fetch_global_Wirev+0x44>)
   bb452:	f000 f80b 	bl	bb46c <atexit>
	return wire;
}
   bb456:	4802      	ldr	r0, [pc, #8]	; (bb460 <_Z19__fetch_global_Wirev+0x40>)
   bb458:	b007      	add	sp, #28
   bb45a:	bd30      	pop	{r4, r5, pc}
   bb45c:	2003e744 	.word	0x2003e744
   bb460:	2003e748 	.word	0x2003e748
   bb464:	000bb3e9 	.word	0x000bb3e9

000bb468 <_ZnajRKSt9nothrow_t>:
   bb468:	f7f9 baeb 	b.w	b4a42 <_Znaj>

000bb46c <atexit>:
   bb46c:	2300      	movs	r3, #0
   bb46e:	4601      	mov	r1, r0
   bb470:	461a      	mov	r2, r3
   bb472:	4618      	mov	r0, r3
   bb474:	f000 b8c0 	b.w	bb5f8 <__register_exitproc>

000bb478 <calloc>:
   bb478:	4b02      	ldr	r3, [pc, #8]	; (bb484 <calloc+0xc>)
   bb47a:	460a      	mov	r2, r1
   bb47c:	4601      	mov	r1, r0
   bb47e:	6818      	ldr	r0, [r3, #0]
   bb480:	f000 b818 	b.w	bb4b4 <_calloc_r>
   bb484:	2003c6c8 	.word	0x2003c6c8

000bb488 <memcpy>:
   bb488:	440a      	add	r2, r1
   bb48a:	4291      	cmp	r1, r2
   bb48c:	f100 33ff 	add.w	r3, r0, #4294967295
   bb490:	d100      	bne.n	bb494 <memcpy+0xc>
   bb492:	4770      	bx	lr
   bb494:	b510      	push	{r4, lr}
   bb496:	f811 4b01 	ldrb.w	r4, [r1], #1
   bb49a:	f803 4f01 	strb.w	r4, [r3, #1]!
   bb49e:	4291      	cmp	r1, r2
   bb4a0:	d1f9      	bne.n	bb496 <memcpy+0xe>
   bb4a2:	bd10      	pop	{r4, pc}

000bb4a4 <memset>:
   bb4a4:	4402      	add	r2, r0
   bb4a6:	4603      	mov	r3, r0
   bb4a8:	4293      	cmp	r3, r2
   bb4aa:	d100      	bne.n	bb4ae <memset+0xa>
   bb4ac:	4770      	bx	lr
   bb4ae:	f803 1b01 	strb.w	r1, [r3], #1
   bb4b2:	e7f9      	b.n	bb4a8 <memset+0x4>

000bb4b4 <_calloc_r>:
   bb4b4:	b513      	push	{r0, r1, r4, lr}
   bb4b6:	434a      	muls	r2, r1
   bb4b8:	4611      	mov	r1, r2
   bb4ba:	9201      	str	r2, [sp, #4]
   bb4bc:	f7fe ffc8 	bl	ba450 <_malloc_r>
   bb4c0:	4604      	mov	r4, r0
   bb4c2:	b118      	cbz	r0, bb4cc <_calloc_r+0x18>
   bb4c4:	9a01      	ldr	r2, [sp, #4]
   bb4c6:	2100      	movs	r1, #0
   bb4c8:	f7ff ffec 	bl	bb4a4 <memset>
   bb4cc:	4620      	mov	r0, r4
   bb4ce:	b002      	add	sp, #8
   bb4d0:	bd10      	pop	{r4, pc}
	...

000bb4d4 <srand>:
   bb4d4:	b538      	push	{r3, r4, r5, lr}
   bb4d6:	4b10      	ldr	r3, [pc, #64]	; (bb518 <srand+0x44>)
   bb4d8:	681d      	ldr	r5, [r3, #0]
   bb4da:	6bab      	ldr	r3, [r5, #56]	; 0x38
   bb4dc:	4604      	mov	r4, r0
   bb4de:	b9b3      	cbnz	r3, bb50e <srand+0x3a>
   bb4e0:	2018      	movs	r0, #24
   bb4e2:	f7fe ff8d 	bl	ba400 <malloc>
   bb4e6:	4602      	mov	r2, r0
   bb4e8:	63a8      	str	r0, [r5, #56]	; 0x38
   bb4ea:	b920      	cbnz	r0, bb4f6 <srand+0x22>
   bb4ec:	4b0b      	ldr	r3, [pc, #44]	; (bb51c <srand+0x48>)
   bb4ee:	480c      	ldr	r0, [pc, #48]	; (bb520 <srand+0x4c>)
   bb4f0:	2142      	movs	r1, #66	; 0x42
   bb4f2:	f7fe ffb5 	bl	ba460 <__assert_func>
   bb4f6:	490b      	ldr	r1, [pc, #44]	; (bb524 <srand+0x50>)
   bb4f8:	4b0b      	ldr	r3, [pc, #44]	; (bb528 <srand+0x54>)
   bb4fa:	e9c0 1300 	strd	r1, r3, [r0]
   bb4fe:	4b0b      	ldr	r3, [pc, #44]	; (bb52c <srand+0x58>)
   bb500:	6083      	str	r3, [r0, #8]
   bb502:	230b      	movs	r3, #11
   bb504:	8183      	strh	r3, [r0, #12]
   bb506:	2100      	movs	r1, #0
   bb508:	2001      	movs	r0, #1
   bb50a:	e9c2 0104 	strd	r0, r1, [r2, #16]
   bb50e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   bb510:	2200      	movs	r2, #0
   bb512:	611c      	str	r4, [r3, #16]
   bb514:	615a      	str	r2, [r3, #20]
   bb516:	bd38      	pop	{r3, r4, r5, pc}
   bb518:	2003c6c8 	.word	0x2003c6c8
   bb51c:	000bd4ad 	.word	0x000bd4ad
   bb520:	000bd4c4 	.word	0x000bd4c4
   bb524:	abcd330e 	.word	0xabcd330e
   bb528:	e66d1234 	.word	0xe66d1234
   bb52c:	0005deec 	.word	0x0005deec

000bb530 <strcpy>:
   bb530:	4603      	mov	r3, r0
   bb532:	f811 2b01 	ldrb.w	r2, [r1], #1
   bb536:	f803 2b01 	strb.w	r2, [r3], #1
   bb53a:	2a00      	cmp	r2, #0
   bb53c:	d1f9      	bne.n	bb532 <strcpy+0x2>
   bb53e:	4770      	bx	lr

000bb540 <strtok>:
   bb540:	4b16      	ldr	r3, [pc, #88]	; (bb59c <strtok+0x5c>)
   bb542:	b573      	push	{r0, r1, r4, r5, r6, lr}
   bb544:	681e      	ldr	r6, [r3, #0]
   bb546:	6db4      	ldr	r4, [r6, #88]	; 0x58
   bb548:	4605      	mov	r5, r0
   bb54a:	b9fc      	cbnz	r4, bb58c <strtok+0x4c>
   bb54c:	2050      	movs	r0, #80	; 0x50
   bb54e:	9101      	str	r1, [sp, #4]
   bb550:	f7fe ff56 	bl	ba400 <malloc>
   bb554:	9901      	ldr	r1, [sp, #4]
   bb556:	65b0      	str	r0, [r6, #88]	; 0x58
   bb558:	4602      	mov	r2, r0
   bb55a:	b920      	cbnz	r0, bb566 <strtok+0x26>
   bb55c:	4b10      	ldr	r3, [pc, #64]	; (bb5a0 <strtok+0x60>)
   bb55e:	4811      	ldr	r0, [pc, #68]	; (bb5a4 <strtok+0x64>)
   bb560:	2157      	movs	r1, #87	; 0x57
   bb562:	f7fe ff7d 	bl	ba460 <__assert_func>
   bb566:	e9c0 4400 	strd	r4, r4, [r0]
   bb56a:	e9c0 4402 	strd	r4, r4, [r0, #8]
   bb56e:	e9c0 4404 	strd	r4, r4, [r0, #16]
   bb572:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
   bb576:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
   bb57a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
   bb57e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
   bb582:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
   bb586:	6184      	str	r4, [r0, #24]
   bb588:	7704      	strb	r4, [r0, #28]
   bb58a:	6244      	str	r4, [r0, #36]	; 0x24
   bb58c:	6db2      	ldr	r2, [r6, #88]	; 0x58
   bb58e:	2301      	movs	r3, #1
   bb590:	4628      	mov	r0, r5
   bb592:	b002      	add	sp, #8
   bb594:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   bb598:	f000 b806 	b.w	bb5a8 <__strtok_r>
   bb59c:	2003c6c8 	.word	0x2003c6c8
   bb5a0:	000bd4ad 	.word	0x000bd4ad
   bb5a4:	000bd541 	.word	0x000bd541

000bb5a8 <__strtok_r>:
   bb5a8:	b5f0      	push	{r4, r5, r6, r7, lr}
   bb5aa:	b908      	cbnz	r0, bb5b0 <__strtok_r+0x8>
   bb5ac:	6810      	ldr	r0, [r2, #0]
   bb5ae:	b188      	cbz	r0, bb5d4 <__strtok_r+0x2c>
   bb5b0:	4604      	mov	r4, r0
   bb5b2:	4620      	mov	r0, r4
   bb5b4:	f814 5b01 	ldrb.w	r5, [r4], #1
   bb5b8:	460f      	mov	r7, r1
   bb5ba:	f817 6b01 	ldrb.w	r6, [r7], #1
   bb5be:	b91e      	cbnz	r6, bb5c8 <__strtok_r+0x20>
   bb5c0:	b965      	cbnz	r5, bb5dc <__strtok_r+0x34>
   bb5c2:	6015      	str	r5, [r2, #0]
   bb5c4:	4628      	mov	r0, r5
   bb5c6:	e005      	b.n	bb5d4 <__strtok_r+0x2c>
   bb5c8:	42b5      	cmp	r5, r6
   bb5ca:	d1f6      	bne.n	bb5ba <__strtok_r+0x12>
   bb5cc:	2b00      	cmp	r3, #0
   bb5ce:	d1f0      	bne.n	bb5b2 <__strtok_r+0xa>
   bb5d0:	6014      	str	r4, [r2, #0]
   bb5d2:	7003      	strb	r3, [r0, #0]
   bb5d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   bb5d6:	461c      	mov	r4, r3
   bb5d8:	e00c      	b.n	bb5f4 <__strtok_r+0x4c>
   bb5da:	b915      	cbnz	r5, bb5e2 <__strtok_r+0x3a>
   bb5dc:	f814 3b01 	ldrb.w	r3, [r4], #1
   bb5e0:	460e      	mov	r6, r1
   bb5e2:	f816 5b01 	ldrb.w	r5, [r6], #1
   bb5e6:	42ab      	cmp	r3, r5
   bb5e8:	d1f7      	bne.n	bb5da <__strtok_r+0x32>
   bb5ea:	2b00      	cmp	r3, #0
   bb5ec:	d0f3      	beq.n	bb5d6 <__strtok_r+0x2e>
   bb5ee:	2300      	movs	r3, #0
   bb5f0:	f804 3c01 	strb.w	r3, [r4, #-1]
   bb5f4:	6014      	str	r4, [r2, #0]
   bb5f6:	e7ed      	b.n	bb5d4 <__strtok_r+0x2c>

000bb5f8 <__register_exitproc>:
   bb5f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bb5fc:	f8df 80b8 	ldr.w	r8, [pc, #184]	; bb6b8 <__register_exitproc+0xc0>
   bb600:	4606      	mov	r6, r0
   bb602:	f8d8 0000 	ldr.w	r0, [r8]
   bb606:	461f      	mov	r7, r3
   bb608:	460d      	mov	r5, r1
   bb60a:	4691      	mov	r9, r2
   bb60c:	f000 f856 	bl	bb6bc <__retarget_lock_acquire_recursive>
   bb610:	4b25      	ldr	r3, [pc, #148]	; (bb6a8 <__register_exitproc+0xb0>)
   bb612:	681c      	ldr	r4, [r3, #0]
   bb614:	b934      	cbnz	r4, bb624 <__register_exitproc+0x2c>
   bb616:	4c25      	ldr	r4, [pc, #148]	; (bb6ac <__register_exitproc+0xb4>)
   bb618:	601c      	str	r4, [r3, #0]
   bb61a:	4b25      	ldr	r3, [pc, #148]	; (bb6b0 <__register_exitproc+0xb8>)
   bb61c:	b113      	cbz	r3, bb624 <__register_exitproc+0x2c>
   bb61e:	681b      	ldr	r3, [r3, #0]
   bb620:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   bb624:	6863      	ldr	r3, [r4, #4]
   bb626:	2b1f      	cmp	r3, #31
   bb628:	dd07      	ble.n	bb63a <__register_exitproc+0x42>
   bb62a:	f8d8 0000 	ldr.w	r0, [r8]
   bb62e:	f000 f847 	bl	bb6c0 <__retarget_lock_release_recursive>
   bb632:	f04f 30ff 	mov.w	r0, #4294967295
   bb636:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bb63a:	b34e      	cbz	r6, bb690 <__register_exitproc+0x98>
   bb63c:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   bb640:	b988      	cbnz	r0, bb666 <__register_exitproc+0x6e>
   bb642:	4b1c      	ldr	r3, [pc, #112]	; (bb6b4 <__register_exitproc+0xbc>)
   bb644:	b923      	cbnz	r3, bb650 <__register_exitproc+0x58>
   bb646:	f8d8 0000 	ldr.w	r0, [r8]
   bb64a:	f000 f838 	bl	bb6be <__retarget_lock_release>
   bb64e:	e7f0      	b.n	bb632 <__register_exitproc+0x3a>
   bb650:	f44f 7084 	mov.w	r0, #264	; 0x108
   bb654:	f7fe fed4 	bl	ba400 <malloc>
   bb658:	2800      	cmp	r0, #0
   bb65a:	d0f4      	beq.n	bb646 <__register_exitproc+0x4e>
   bb65c:	2300      	movs	r3, #0
   bb65e:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   bb662:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   bb666:	6863      	ldr	r3, [r4, #4]
   bb668:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   bb66c:	2201      	movs	r2, #1
   bb66e:	409a      	lsls	r2, r3
   bb670:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   bb674:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   bb678:	4313      	orrs	r3, r2
   bb67a:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   bb67e:	2e02      	cmp	r6, #2
   bb680:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   bb684:	bf02      	ittt	eq
   bb686:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   bb68a:	4313      	orreq	r3, r2
   bb68c:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   bb690:	6863      	ldr	r3, [r4, #4]
   bb692:	f8d8 0000 	ldr.w	r0, [r8]
   bb696:	1c5a      	adds	r2, r3, #1
   bb698:	3302      	adds	r3, #2
   bb69a:	6062      	str	r2, [r4, #4]
   bb69c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   bb6a0:	f000 f80e 	bl	bb6c0 <__retarget_lock_release_recursive>
   bb6a4:	2000      	movs	r0, #0
   bb6a6:	e7c6      	b.n	bb636 <__register_exitproc+0x3e>
   bb6a8:	2003e7e8 	.word	0x2003e7e8
   bb6ac:	2003e75c 	.word	0x2003e75c
   bb6b0:	00000000 	.word	0x00000000
   bb6b4:	000ba401 	.word	0x000ba401
   bb6b8:	2003c72c 	.word	0x2003c72c

000bb6bc <__retarget_lock_acquire_recursive>:
   bb6bc:	4770      	bx	lr

000bb6be <__retarget_lock_release>:
   bb6be:	4770      	bx	lr

000bb6c0 <__retarget_lock_release_recursive>:
   bb6c0:	4770      	bx	lr

000bb6c2 <link_code_end>:
	...

000bb6c4 <dynalib_user>:
   bb6c4:	49cd 000b 4a09 000b 4a31 000b 4a35 000b     .I...J..1J..5J..
   bb6d4:	0000 0000 6143 6c6c 6f20 206e 7570 6572     ....Call on pure
   bb6e4:	7620 7269 7574 6c61 5400 6d65 3a70 2520      virtual.Temp: %
   bb6f4:	0066 6e49 6176 696c 5364 6e65 6f73 4572     f.InvalidSensorE
   bb704:	7272 726f 5600 6c61 726f 6e20 206f 6176     rror.Valor no va
   bb714:	696c 6f64 4c00 6465 7245 6f72 4f72 7470     lido.LedErrorOpt
   bb724:	6f69 006e 6f4e 6174 6920 766e a1c3 696c     ion.Nota inv..li
   bb734:	6164 5400 7069 206f 6e69 c376 6ca1 6469     da.Tipo inv..lid
   bb744:	006f 4552 4d00 0049 4146 5300 4c4f 4c00     o.RE.MI.FA.SOL.L
   bb754:	0041 4953 5f00 0043 4e5f 5f00 0042 6e49     A.SI._C._N._B.In
   bb764:	6176 696c 2064 6573 736e 726f 2021 3e2d     valid sensor! ->
   bb774:	5320 6e65 6f73 2072 6572 6570 6974 6f64      Sensor repetido
   bb784:	6520 206e 6c65 6220 6f6c 7571 0065 494d      en el bloque.MI
   bb794:	4146 4552 525f 6165 2864 2029 6166 6c69     FARE_Read() fail
   bb7a4:	6465 203a 5000 4443 415f 7475 6568 746e     ed: .PCD_Authent
   bb7b4:	6369 7461 2865 2029 6166 6c69 6465 203a     icate() failed: 
   bb7c4:	5400 6761 6e49 6f66 203a 7325 5700 5757     .TagInfo: %s.WWW
   bb7d4:	4300 6e6f 6365 6174 2072 6c61 7020 6575     .Conectar al pue
   bb7e4:	7472 206f 3041 000a 6f43 656e 7463 7261     rto A0..Conectar
   bb7f4:	6120 206c 7570 7265 6f74 4120 0a32 4300      al puerto A2..C
   bb804:	6e6f 6365 6174 2072 6c61 7020 6575 7472     onectar al puert
   bb814:	206f 3441 000a 6f43 656e 7463 7261 6120     o A4..Conectar a
   bb824:	206c 7570 7265 6f74 4420 0a32 4300 6e6f     l puerto D2..Con
   bb834:	6365 6174 2072 6c61 7020 6575 7472 206f     ectar al puerto 
   bb844:	3444 000a 6f43 656e 7463 7261 6120 206c     D4..Conectar al 
   bb854:	7570 7265 6f74 4420 0a36 4500 7272 726f     puerto D6..Error
   bb864:	203a 6f4e 6820 7961 6d20 7361 7020 6575     : No hay mas pue
   bb874:	7472 736f 6420 7369 6f70 696e 6c62 7365     rtos disponibles
   bb884:	0a20 4500 5045 4f52 204d 6d65 7470 0079      ..EEPROM empty.
   bb894:	002d 2330 2339 0031 2330 3031 3123 3000     -.0#9#1.0#10#1.0
   bb8a4:	3123 2331 0031 2330 2331 2331 0030 2330     #11#1.0#1#1#0.0#
   bb8b4:	2331 2331 0031 2330 2330 2331 0030 2330     1#1#1.0#0#1#0.0#
   bb8c4:	2330 2331 0031 2330 2330 2331 0032 2330     0#1#1.0#0#1#2.0#
   bb8d4:	2330 2331 0033 2330 2330 2331 0034 2330     0#1#3.0#0#1#4.0#
   bb8e4:	2330 2331 0035 2331 2330 2331 2337 0030     0#1#5.1#0#1#7#0.
   bb8f4:	2331 2330 2331 2337 0031 2331 2330 2330     1#0#1#7#1.1#0#0#
   bb904:	2332 0030 2331 2330 2330 2332 0031 2331     2#0.1#0#0#2#1.1#
   bb914:	2330 2330 2333 0030 2331 2330 2330 2333     0#0#3#0.1#0#0#3#
   bb924:	0031 2331 2330 2331 2334 0030 2331 2330     1.1#0#1#4#0.1#0#
   bb934:	2331 2334 0031 2331 2330 2331 2335 0030     1#4#1.1#0#1#5#0.
   bb944:	2331 2330 2331 2335 0031 2331 2330 2331     1#0#1#5#1.1#0#1#
   bb954:	2336 0030 2331 2330 2331 2336 0031 2331     6#0.1#0#1#6#1.1#
   bb964:	2330 2331 2336 0032 2331 2331 2331 2331     0#1#6#2.1#1#1#1#
   bb974:	0030 2331 2331 2331 2331 0031 2331 2331     0.1#1#1#1#1.1#1#
   bb984:	2331 2330 0030 2331 2331 2331 2330 0031     1#0#0.1#1#1#0#1.
   bb994:	2331 2331 2331 2330 0032 2331 2331 2331     1#1#1#0#2.1#1#1#
   bb9a4:	2330 0033 2331 2331 2331 2330 0034 2331     0#3.1#1#1#0#4.1#
   bb9b4:	2331 2331 2330 0035 2331 2331 2331 2330     1#1#0#5.1#1#1#0#
   bb9c4:	0036 2331 2331 2331 2330 0037 2331 2333     6.1#1#1#0#7.1#3#
   bb9d4:	0030 2331 2333 0031 2332 2330 2330 0030     0.1#3#1.2#0#0#0.
   bb9e4:	2332 2330 2330 0031 2332 2330 2330 0032     2#0#0#1.2#0#0#2.
   bb9f4:	2332 2330 2331 0030 2332 2330 2331 0031     2#0#1#0.2#0#1#1.
   bba04:	2332 2330 2331 0032 2332 2330 2332 0030     2#0#1#2.2#0#2#0.
   bba14:	2332 2330 2332 0031 2332 2330 2332 0032     2#0#2#1.2#0#2#2.
   bba24:	2332 2330 2333 0030 2332 2330 2333 0031     2#0#3#0.2#0#3#1.
   bba34:	2332 2330 2333 0032 2332 2330 2334 0030     2#0#3#2.2#0#4#0.
   bba44:	2332 2330 2334 0031 2332 2330 2334 0032     2#0#4#1.2#0#4#2.
   bba54:	2332 2330 2335 0030 2332 2330 2335 0031     2#0#5#0.2#0#5#1.
   bba64:	2332 2330 2335 0032 2332 2330 2336 0030     2#0#5#2.2#0#6#0.
   bba74:	2332 2330 2336 0031 2332 2330 2336 0032     2#0#6#1.2#0#6#2.
   bba84:	2332 2330 2337 0030 2332 2330 2337 0031     2#0#7#0.2#0#7#1.
   bba94:	2332 2330 2337 0032 2332 2331 0030 2332     2#0#7#2.2#1#0.2#
   bbaa4:	2332 0030 2332 2332 0031 2332 2332 0032     2#0.2#2#1.2#2#2.
   bbab4:	2332 2332 0033 2332 2332 0034 2332 2332     2#2#3.2#2#4.2#2#
   bbac4:	0035 2332 2332 0036 2332 2332 0037 2332     5.2#2#6.2#2#7.2#
   bbad4:	2332 0038 2336 2330 0030 2336 2330 0031     2#8.6#0#0.6#0#1.
   bbae4:	2336 2330 0032 2336 2331 0030 2336 2332     6#0#2.6#1#0.6#2#
   bbaf4:	0030 2336 2332 0031 2336 2332 0032 2333     0.6#2#1.6#2#2.3#
   bbb04:	2330 2330 3231 3023 3300 3023 3123 3623     0#0#12#0.3#0#1#6
   bbb14:	3023 3100 3023 3123 3923 3323 3100 3023     #0.1#0#1#9#3.1#0
   bbb24:	3023 3123 2332 0031 2331 2331 2330 3331     #0#12#1.1#1#0#13
   bbb34:	3123 4d00 444f 204f 4142 4953 4f43 4d00     #1.MODO BASICO.M
   bbb44:	444f 204f 5641 4e41 415a 4f44 4d00 444f     ODO AVANZADO.MOD
   bbb54:	204f 554d 4953 4143 4d00 444f 204f 5845     O MUSICA.MODO EX
   bbb64:	4c50 524f 0041 6942 6d74 7061 6e20 746f     PLORA.Bitmap not
   bbb74:	6120 6176 6c69 6261 656c 002e 2020 2020      available..    
   bbb84:	4320 4e4f 4345 4154 2052 3a41 5900 2041      CONECTAR A:.YA 
   bbb94:	4f43 454e 5443 4441 004f 6154 6a72 7465     CONECTADO.Tarjet
   bbba4:	2061 6e69 6176 696c 6164 7020 7261 2061     a invalida para 
   bbbb4:	7365 6574 6d20 646f 006f 6f42 7272 6461     este modo.Borrad
   bbbc4:	206f 6e69 6176 696c 6f64 7020 7261 2061     o invalido para 
   bbbd4:	7365 6574 6d20 646f 006f 724f 6564 206e     este modo.Orden 
   bbbe4:	6564 7420 7261 656a 6174 2073 6e69 6176     de tarjetas inva
   bbbf4:	696c 6f64 5000 6575 7472 206f 6f6e 6420     lido.Puerto no d
   bbc04:	7369 6f70 696e 6c62 0065 6c50 7961 6e20     isponible.Play n
   bbc14:	206f 6964 7073 6e6f 6269 656c 5300 6e65     o disponible.Sen
   bbc24:	6f73 2072 6f6e 6420 7369 6f70 696e 6c62     sor no disponibl
   bbc34:	2065 6528 206e 7375 296f 4100 7463 6175     e (en uso).Actua
   bbc44:	6f64 2072 6f6e 6420 7369 6f70 696e 6c62     dor no disponibl
   bbc54:	2065 6528 206e 7375 296f 4200 726f 6172     e (en uso).Borra
   bbc64:	6f64 6420 2065 6c62 716f 6575 7220 6165     do de bloque rea
   bbc74:	696c 617a 6f64 4e00 6461 2061 7571 2065     lizado.Nada que 
   bbc84:	6f62 7272 7261 4200 726f 6172 6f64 6420     borrar.Borrado d
   bbc94:	2065 6f6c 706f 7220 6165 696c 617a 6f64     e loop realizado
   bbca4:	4e00 6461 2061 7571 2065 6f62 7272 7261     .Nada que borrar
   bbcb4:	002e 6425 2d20 2520 0064 6946 616e 696c     ..%d - %d.Finali
   bbcc4:	617a 6520 206c 7562 6c63 2065 6e61 6574     za el bucle ante
   bbcd4:	2073 6564 7220 7065 6f72 7564 6963 0072     s de reproducir.
   bbce4:	6f4d 6f64 4220 5341 4349 204f 6564 6574     Modo BASICO dete
   bbcf4:	7463 6461 006f 6e49 6369 6169 646e 206f     ctado.Iniciando 
   bbd04:	6f6d 6f64 4220 5341 4349 2e4f 2e2e 4d00     modo BASICO....M
   bbd14:	646f 206f 5641 4e41 415a 4f44 6420 7465     odo AVANZADO det
   bbd24:	6365 6174 6f64 4900 696e 6963 6e61 6f64     ectado.Iniciando
   bbd34:	6d20 646f 206f 5641 4e41 415a 4f44 2e2e      modo AVANZADO..
   bbd44:	002e 6f4d 6f64 4d20 5355 4349 2041 6564     ..Modo MUSICA de
   bbd54:	6574 7463 6461 006f 6e49 6369 6169 646e     tectado.Iniciand
   bbd64:	206f 6f6d 6f64 4d20 5355 4349 2e41 2e2e     o modo MUSICA...
   bbd74:	4d00 646f 206f 5845 4c50 524f 2041 6564     .Modo EXPLORA de
   bbd84:	6574 7463 6461 006f 6e49 6369 6169 646e     tectado.Iniciand
   bbd94:	206f 6f6d 6f64 4520 5058 4f4c 4152 2e2e     o modo EXPLORA..
   bbda4:	002e 755a 626d 6461 726f 003a 6154 2067     ..Zumbador:.Tag 
   bbdb4:	6544 6574 7463 6461 2061 2d2d 203e 4200     Detectada --> .B
   bbdc4:	726f 6172 6f64 6320 6d6f 6c70 7465 206f     orrado completo 
   bbdd4:	6572 6c61 7a69 6461 006f 6f42 7272 6461     realizado.Borrad
   bbde4:	206f 6f6e 7020 7265 696d 6974 6f64 7020     o no permitido p
   bbdf4:	7261 2061 7365 6574 6d20 646f 006f 6553     ara este modo.Se
   bbe04:	736e 726f 6420 7465 6365 6174 6f64 4100     nsor detectado.A
   bbe14:	7463 6175 6f64 2072 6564 6574 7463 6461     ctuador detectad
   bbe24:	006f 6f42 7272 6461 206f 6564 206c bac3     o.Borrado del ..
   bbe34:	746c 6d69 206f 6572 6c61 7a69 6461 006f     ltimo realizado.
   bbe44:	6a45 6365 7475 6e61 6f64 7420 6761 2d20     Ejecutando tag -
   bbe54:	3e2d 0020 7550 7265 6f74 6e20 206f 6964     -> .Puerto no di
   bbe64:	7073 6e6f 6269 656c 6565 0065 6553 6520     sponibleeee.Se e
   bbe74:	7073 7265 6261 2061 4649 7420 6761 4400     speraba IF tag.D
   bbe84:	7365 7570 7365 6420 2065 6e75 7320 6e65     espues de un sen
   bbe94:	6f73 2072 6573 6520 7073 7265 2061 6e75     sor se espera un
   bbea4:	2061 6f63 636e 6f69 3a6e 4120 444e 7520     a concion: AND u
   bbeb4:	4f20 0052 6553 736e 726f 6920 766e 6c61      OR.Sensor inval
   bbec4:	6469 006f 6553 6520 7073 7265 6261 2061     ido.Se esperaba 
   bbed4:	4854 4e45 7420 6761 4900 2046 6564 6574     THEN tag.IF dete
   bbee4:	7463 6461 006f 4649 4e00 6d75 7265 206f     ctado.IF.Numero 
   bbef4:	6564 6220 6f6c 7571 7365 3e20 3220 7c20     de bloques > 2 |
   bbf04:	207c 6553 6e20 6365 7365 7469 2061 6c61     | Se necesita al
   bbf14:	6d20 6e65 736f 7520 206e 6361 7574 6461      menos un actuad
   bbf24:	726f 7020 7261 2061 6574 6d72 6e69 7261     or para terminar
   bbf34:	6520 206c 6c62 716f 6575 4100 444e 4f2f      el bloque.AND/O
   bbf44:	2052 6564 6574 7463 6461 006f 4e41 0044     R detectado.AND.
   bbf54:	6e55 2061 6f63 636e 6369 6f69 206e 6f73     Una concicion so
   bbf64:	6f6c 7020 6575 6564 6920 2072 6573 7567     lo puede ir segu
   bbf74:	6469 2061 6564 7520 206e 6573 736e 726f     ida de un sensor
   bbf84:	002e 4854 4e45 6420 7465 6365 6174 6f64     ..THEN detectado
   bbf94:	5400 4548 004e 754e 656d 6f72 6420 2065     .THEN.Numero de 
   bbfa4:	6573 736e 726f 7365 6920 666e 6375 6569     sensores infucie
   bbfb4:	746e 7365 4500 534c 2045 6564 6574 7463     ntes.ELSE detect
   bbfc4:	6461 006f 4c45 4553 4900 746e 6f72 7564     ado.ELSE.Introdu
   bbfd4:	6563 7520 206e 6341 7574 6461 726f 7020     ce un Actuador p
   bbfe4:	7261 2061 616c 6520 6176 756c 6361 c369     ara la evaluaci.
   bbff4:	6eb3 6120 5420 5552 0045 6946 206e 6154     .n a TRUE.Fin Ta
   bc004:	0067 2023 6c42 716f 6575 7c20 2320 5320     g.# Bloque | # S
   bc014:	6e65 6f73 6572 2073 207c 2023 6f43 646e     ensores | # Cond
   bc024:	6369 6f69 656e 2073 207c 2023 6341 7574     iciones | # Actu
   bc034:	6461 726f 7365 2000 2020 2520 2064 7c09     adores.    %d .|
   bc044:	2009 6425 0920 097c 2520 2064 7c09 2009     . %d .|. %d .|. 
   bc054:	6425 0920 097c 2520 0064 6154 6a72 7465     %d .|. %d.Tarjet
   bc064:	2061 6e69 c376 6ca1 6469 2061 6170 6172     a inv..lida para
   bc074:	6520 7473 2065 6f6d 6f64 4200 4f4c 5551      este modo.BLOQU
   bc084:	2045 3a31 5420 5552 0045 4c42 514f 4555     E 1: TRUE.BLOQUE
   bc094:	3120 203a 4146 534c 0045 2020 6361 6261      1: FALSE.  acab
   bc0a4:	2061 6c62 716f 6575 3120 4200 4f4c 5551     a bloque 1.BLOQU
   bc0b4:	2045 3a32 5420 5552 0045 4c42 514f 4555     E 2: TRUE.BLOQUE
   bc0c4:	3220 203a 4146 534c 0045 4c42 514f 4555      2: FALSE.BLOQUE
   bc0d4:	3220 203a 2020 6f6e 6620 6e69 6c61 7a69      2:   no finaliz
   bc0e4:	6461 006f 6a45 6365 7475 6e61 6f64 2e2e     ado.Ejecutando..
   bc0f4:	002e 6f42 7272 6461 2061 6c75 6974 616d     ..Borrada ultima
   bc104:	6c20 6365 7574 6172 4c00 6f6f 2070 202d      lectura.Loop - 
   bc114:	5000 7261 2061 6f63 656d 7a6e 7261 7520     .Para comenzar u
   bc124:	206e 6f6c 706f 6820 7961 7120 6575 6620     n loop hay que f
   bc134:	6e69 6c61 7a69 7261 6520 206c 6e61 6574     inalizar el ante
   bc144:	6972 726f 002e 4e45 2044 6f4c 706f 7200     rior..END Loop.r
   bc154:	7065 2d20 0020 6f4c 706f 7320 6e69 6320     ep - .Loop sin c
   bc164:	6d6f 6e65 617a 2072 206f 6973 206e 6f63     omenzar o sin co
   bc174:	746e 6e65 6469 006f 2020 2020 2020 2020     ntenido.        
   bc184:	4c20 7a75 003a 2020 7552 6469 206f 6428      Luz:.  Ruido (d
   bc194:	6365 6269 6c65 6f69 2973 003a 2020 4120     ecibelios):.   A
   bc1a4:	676e 6c75 206f 6728 6172 6f64 2973 003a     ngulo (grados):.
   bc1b4:	2020 6554 706d 7265 7461 7275 2061 6728       Temperatura (g
   bc1c4:	6172 6f64 2973 003a 2020 4420 7369 6174     rados):.   Dista
   bc1d4:	636e 6169 2820 6d63 3a29 2000 2020 2020     ncia (cm):.     
   bc1e4:	5420 7275 6962 6564 3a7a                      Turbidez:.

000bc1ef <CSWTCH.418>:
   bc1ef:	ff13 ff11                                    .....

000bc1f4 <CSWTCH.430>:
   bc1f4:	00fa 01f4 03e8                              ......

000bc1fa <_ZL14sucreLogo_data>:
   bc1fa:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bc20a:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bc21a:	ffff ffff ffff fff8 ffff ffff ffff ffff     ................
   bc22a:	ffff ffff ffff 7fc0 ffff ffff ffff ffff     ................
   bc23a:	ffff ffff feff 7f00 ffff ffff ffff ffff     ................
   bc24a:	ffff ffff feff 7f00 ffff ffff ffff ffff     ................
   bc25a:	ffff ffff feff 3f00 ffff ffff ffff ffff     .......?........
   bc26a:	ffff ffff feff 3f00 ffff ffff ffff ffff     .......?........
   bc27a:	ffff ffff 3ffc 3f00 ffff ffff ffff ffff     .....?.?........
   bc28a:	ffff ffff 0ffc 1f00 ffff ffff ffff ffff     ................
   bc29a:	ffff ffff 07fc 1f00 ffff ffff ffff ffff     ................
   bc2aa:	ffff ffff 07f8 3f00 ffff ffff ffff ffff     .......?........
   bc2ba:	ffff ffff 07f8 ff83 ffff ffff ffff ffff     ................
   bc2ca:	ffff ffff 0ff0 ffcf ffff ffff ffff ffff     ................
   bc2da:	ffff ffff 0ff8 ffff ffff ffff ffff ffff     ................
   bc2ea:	ffff ffff 0ffe ffff ffff ffff ffff ffff     ................
   bc2fa:	ffff ffff 9fff ffff ffff ffff ffff ffff     ................
   bc30a:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bc31a:	ffff ffff fcff ff1f ffff ffff ffff ffff     ................
   bc32a:	ffff 7fc0 fcff ff0d 3fe0 03ef c0ff ff7f     .........?......
   bc33a:	feff 3f00 f8f3 ff09 0780 01e4 00ff ff1f     ...?............
   bc34a:	fcff 1f3f f8f3 ff09 c31f f8e0 3ffc ff87     ..?..........?..
   bc35a:	f8ff ffff f8f3 fe09 f13f fce1 fff8 ffe3     ........?.......
   bc36a:	f1ff ffff f8f3 fc19 f87f ffe3 fff1 ffe3     ................
   bc37a:	e3ff ffff fff3 f819 fcff ffe7 ffe3 ffc7     ................
   bc38a:	e7ff ffff fff3 f1f9 feff ffe7 ffe7 ff8f     ................
   bc39a:	c7ff ffff e7f3 f3f9 ffff ffe7 ffe7 ff1f     ................
   bc3aa:	cfff ffff c3f3 f3f9 ffff ffe7 fec7 ff3f     ..............?.
   bc3ba:	cfff ffff 81f3 f3f9 ffff ffe7 fccf ff7f     ................
   bc3ca:	c0ff 0000 00f3 e3f9 ffff ffe7 f8cf ffff     ................
   bc3da:	c0ff 0000 0072 e379 ffff ffe7 f1cf ffff     ....r.y.........
   bc3ea:	feff 0000 0072 e379 ffff ffe7 e3cf ffff     ....r.y.........
   bc3fa:	ffff fcff 00f3 f3f9 ffff ffe7 c7c7 ffff     ................
   bc40a:	ffff fcff 81f3 f3f9 ffff ffe7 8fc7 ffff     ................
   bc41a:	ffff f8ff c3f3 f1f9 ffff ffe7 1fe7 ffff     ................
   bc42a:	ffff f9ff e7f1 f9f1 fcff ffe7 3fe2 fffb     .............?..
   bc43a:	ffff f1ff fff8 f8f1 fcff ffe7 7ff0 fff3     ................
   bc44a:	ffff e3ff fffc fce1 f87f ffe7 fff8 ffe3     ................
   bc45a:	feff c77f 3ffc fe81 e13f ffe7 7ffc ffc7     .....?..?.......
   bc46a:	feff 0f1e 0efe ff09 8307 ffe7 0efe ff0f     ................
   bc47a:	ffff 1f00 80ff ff39 0fc0 ffe7 00ff ff1f     ......9.........
   bc48a:	ffff ffe0 e0ff ffff 7ff0 ffff e0ff ffff     ................
   bc49a:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bc4aa:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bc4ba:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bc4ca:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bc4da:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bc4ea:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bc4fa:	ffff ffff ffff ffff cfff ffff ffff ffff     ................
   bc50a:	ffff ffff ffff ffff 9fff ffff ffff ffff     ................
   bc51a:	ffff ffff ffff ffff 3fff feff 7cf6 ffff     .........?...|..
   bc52a:	ffff ffff ffff ffff 7cff feff fce7 ffe7     .........|......
   bc53a:	ffff ffff ffff ffff 78ff fe7c fccf ffc7     .........x|.....
   bc54a:	ffff ffff ffff ffff 39ff fe31 e1df ff9f     .........91.....
   bc55a:	ffff ffff ffff ffff 03fe fe93 413e ff8f     ............>A..
   bc56a:	ffff ffff ffff ffff 33ff feb7 9c1e ffe3     .........3......
   bc57a:	ffff ffff ffff ffff 73ff fe37 1dc6 ffbb     .........s7.....
   bc58a:	ffff ffff ffff ffff 38ff fe27 9df2 ff39     .........8'...9.
   bc59a:	ffff ffff ffff ffff 3cff fe67 417a ff93     .........<g.zA..
   bc5aa:	ffff ffff ffff ffff 3fff ffe7 61fe ff87     .........?...a..
   bc5ba:	ffff ffff ffff ffff ffff ffff fdff ffff     ................
   bc5ca:	ffff ffff ffff ffff ffff ffff fdff ffff     ................
   bc5da:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bc5ea:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bc5fa:	6564 6166 6c75 2074 4d00 4253 4c00 4253     default .MSB.LSB
   bc60a:	3c00 5053 5349 7465 6974 676e 2073 6564     .<SPISettings de
   bc61a:	6166 6c75 3e74 3c00 5053 5349 7465 6974     fault>.<SPISetti
   bc62a:	676e 2073 7325 7525 2520 2073 4f4d 4544     ngs %s%u %s MODE
   bc63a:	7525 003e                                   %u>.

000bc63e <_ZL4font>:
   bc63e:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
   bc64e:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
   bc65e:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
   bc66e:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
   bc67e:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
   bc68e:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
   bc69e:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
   bc6ae:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
   bc6be:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
   bc6ce:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
   bc6de:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
   bc6ee:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
   bc6fe:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
   bc70e:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
   bc71e:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
   bc72e:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
   bc73e:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
   bc74e:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
   bc75e:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
   bc76e:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
   bc77e:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
   bc78e:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
   bc79e:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
   bc7ae:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
   bc7be:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
   bc7ce:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
   bc7de:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
   bc7ee:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
   bc7fe:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
   bc80e:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
   bc81e:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
   bc82e:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
   bc83e:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
   bc84e:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
   bc85e:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
   bc86e:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
   bc87e:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
   bc88e:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
   bc89e:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
   bc8ae:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
   bc8be:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
   bc8ce:	5555 4179 5422 7854 2142 5455 4078 5420     UUyA"TTxB!UTx@ T
   bc8de:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
   bc8ee:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
   bc8fe:	0042 4501 407c 127d 1211 f07d 2528 f028     B..E|@}...}.(%(.
   bc90e:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
   bc91e:	4949 3249 443a 4444 323a 484a 3048 413a     III2:DDD:2JHH0:A
   bc92e:	2141 3a7a 4042 7820 9d00 a0a0 3d7d 4242     A!z:B@ x....}=BB
   bc93e:	3d42 403d 4040 3c3d ff24 2424 7e48 4349     B==@@@=<$.$$H~IC
   bc94e:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
   bc95e:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
   bc96e:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
   bc97e:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
   bc98e:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
   bc99e:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
   bc9ae:	0055 0055 aa55 aa55 aa55 55ff 55ff 00ff     U.U.U.U.U..U.U..
   bc9be:	0000 00ff 1010 ff10 1400 1414 00ff 1010     ................
   bc9ce:	00ff 10ff f010 f010 1414 fc14 1400 f714     ................
   bc9de:	ff00 0000 00ff 14ff f414 fc04 1414 1017     ................
   bc9ee:	101f 1f10 1f10 1414 1f14 1000 1010 00f0     ................
   bc9fe:	0000 1f00 1010 1010 101f 1010 f010 0010     ................
   bca0e:	0000 10ff 1010 1010 1010 1010 10ff 0000     ................
   bca1e:	ff00 0014 ff00 ff00 0000 101f 0017 fc00     ................
   bca2e:	f404 1414 1017 1417 f414 f404 0000 00ff     ................
   bca3e:	14f7 1414 1414 1414 00f7 14f7 1414 1417     ................
   bca4e:	1010 101f 141f 1414 14f4 1010 10f0 00f0     ................
   bca5e:	1f00 1f10 0000 1f00 0014 0000 14fc 0000     ................
   bca6e:	10f0 10f0 ff10 ff10 1414 ff14 1014 1010     ................
   bca7e:	001f 0000 f000 ff10 ffff ffff f0f0 f0f0     ................
   bca8e:	fff0 ffff 0000 0000 ff00 0fff 0f0f 0f0f     ................
   bca9e:	4438 3844 fc44 4a4a 344a 027e 0602 0206     8DD8D.JJJ4~.....
   bcaae:	027e 027e 5563 4149 3863 4444 043c 7e40     ~.~.cUIAc8DD<.@~
   bcabe:	1e20 0620 7e02 0202 a599 a5e7 1c99 492a      . ..~........*I
   bcace:	1c2a 724c 7201 304c 4d4a 304d 4830 4878     *.Lr.rL0JMM00HxH
   bcade:	bc30 5a62 3d46 493e 4949 7e00 0101 7e01     0.bZF=>III.~...~
   bcaee:	2a2a 2a2a 442a 5f44 4444 5140 444a 4040     *****DD_DD@QJD@@
   bcafe:	4a44 4051 0000 01ff e003 ff80 0000 0808     DJQ@............
   bcb0e:	6b6b 3608 3612 3624 0f06 0f09 0006 1800     kk.6.6$6........
   bcb1e:	0018 0000 1010 3000 ff40 0101 1f00 0101     .......0@.......
   bcb2e:	001e 1d19 1217 3c00 3c3c 003c 0000 0000     .......<<<<.....
	...

000bcb40 <_ZTV12Adafruit_GFX>:
	...
   bcb50:	8921 000b a8d9 000b 4a4d 000b 7fc3 000b     !.......MJ......
   bcb60:	7fc5 000b 7ff7 000b 7fd3 000b 7fe5 000b     ................
   bcb70:	7f05 000b 7fc3 000b 81ef 000b 81ed 000b     ................
   bcb80:	800f 000b 804d 000b 8087 000b 80cd 000b     ....M...........
   bcb90:	80e9 000b 816d 000b 6e55 6e6b 776f 206e     ....m...Unknown 
   bcba0:	7265 6f72 0072 7553 6363 7365 2e73 4500     error.Success..E
   bcbb0:	7272 726f 6920 206e 6f63 6d6d 6e75 6369     rror in communic
   bcbc0:	7461 6f69 2e6e 4300 6c6f 696c 7373 6f69     ation..Collissio
   bcbd0:	206e 6564 6574 7463 6465 002e 6954 656d     n detected..Time
   bcbe0:	756f 2074 6e69 6320 6d6f 756d 696e 6163     out in communica
   bcbf0:	6974 6e6f 002e 2041 7562 6666 7265 6920     tion..A buffer i
   bcc00:	2073 6f6e 2074 6962 2067 6e65 756f 6867     s not big enough
   bcc10:	002e 6e49 6574 6e72 6c61 6520 7272 726f     ..Internal error
   bcc20:	6920 206e 6874 2065 6f63 6564 202e 6853      in the code. Sh
   bcc30:	756f 646c 6e20 746f 6820 7061 6570 2e6e     ould not happen.
   bcc40:	4900 766e 6c61 6469 6120 6772 6d75 6e65     .Invalid argumen
   bcc50:	2e74 5400 6568 4320 4352 415f 6420 656f     t..The CRC_A doe
   bcc60:	2073 6f6e 2074 616d 6374 2e68 4100 4d20     s not match..A M
   bcc70:	4649 5241 2045 4950 4343 7220 7365 6f70     IFARE PICC respo
   bcc80:	646e 6465 7720 7469 2068 414e 2e4b 0000     nded with NAK...

000bcc90 <CSWTCH.84>:
   bcc90:	cba6 000b cbaf 000b cbc7 000b cbdc 000b     ................
   bcca0:	cbf6 000b cc12 000b cc41 000b cc53 000b     ........A...S...
   bccb0:	cc6d 000b                                   m...

000bccb4 <_ZTVN8particle11SPISettingsE>:
	...
   bccbc:	7eb1 000b 7ea1 000b 7ea3 000b               .~...~...~..

000bccc8 <_ZL12splash2_data>:
   bccc8:	0000 0060 0000 0000 0000 0000 0000 0000     ..`.............
   bccd8:	e000 0000 0000 0000 0000 0000 0000 0100     ................
   bcce8:	00e0 0000 0000 0000 0000 0000 0000 f001     ................
	...
   bcd04:	0300 00f0 0000 0000 0000 0000 0000 0000     ................
   bcd14:	f007 0000 0000 0000 0000 0000 0000 0700     ................
   bcd24:	00f8 0000 0000 0000 0000 0000 0000 f80f     ................
   bcd34:	0000 0300 00c0 007e 0100 00e0 0f7f 00f8     ......~.........
   bcd44:	0000 c003 fe00 0000 e001 ff00 f8ef 0000     ................
   bcd54:	0300 00c0 00fe 0100 00e0 ffff 00f8 0000     ................
   bcd64:	c003 f000 0000 0f00 7f00 7ffe 00c0 0300     ................
   bcd74:	00c0 00f0 0000 000f fe3f f87f f13f cffb     ........?...?...
   bcd84:	fefc bcf3 ef3d 1fe0 7ffe 7fff fffb fedf     ....=...........
   bcd94:	fffe 3dbc e0ef c61f ffff fb7f dfff fefe     ...=............
   bcda4:	bcff ef3d 0fe0 c7e3 78fe c37b 1ede fff0     ..=......x{.....
   bcdb4:	3dbc 00ef ff07 fc87 7b78 dec3 f01e 3cf8     .=......x{.....<
   bcdc4:	ef3d 0100 ffff 00f0 c37b 1ec0 f0f0 3d3c     =.......{.....<=
   bcdd4:	00ef f301 e07f fb3f cfc3 f0fe 3cf0 ef3d     ......?......<=.
   bcde4:	0300 3fe3 7f80 c3fb fedf f0f0 3d3c 00ef     ...?........<=..
   bcdf4:	e707 003c 7b78 dec3 f01e 3cf0 ef3d 0700     ..<.x{.....<=...
   bce04:	beff 7800 c37b 1ede f0f0 3d3c 00ef ff07     ...x{.....<=....
   bce14:	00fe 7b78 dec3 f01e 3cf0 ef3d 0f00 feff     ..x{.....<=.....
   bce24:	7f00 fffb fedf f0f0 fd3f e0ef ff0f 00ff     ........?.......
   bce34:	fb7f dfff f0fe 3ff0 effd 0fe0 fff9 3e00     .......?.......>
   bce44:	f979 9ecf f0f0 3d1f e0e7 f11f 00ff 0000     y......=........
	...
   bce5c:	1f00 ff80 7f00 ffff ffff ffff ffff e0ff     ................
   bce6c:	001c 007f ff7f ffff b4fe 886d 188d 00e0     ..........m.....
   bce7c:	1f00 7f00 ffff feff ad95 b57d e077 0000     ..........}.w...
   bce8c:	000f ff7f ffff a5fe 9dad 198d 00e0 0600     ................
   bce9c:	7f00 ffff feff adb5 b5ed e07e               ..........~.

000bcea8 <_ZL14sucreLogo_data>:
   bcea8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bceb8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bcec8:	ffff ffff ffff fff8 ffff ffff ffff ffff     ................
   bced8:	ffff ffff ffff 7fc0 ffff ffff ffff ffff     ................
   bcee8:	ffff ffff feff 7f00 ffff ffff ffff ffff     ................
   bcef8:	ffff ffff feff 7f00 ffff ffff ffff ffff     ................
   bcf08:	ffff ffff feff 3f00 ffff ffff ffff ffff     .......?........
   bcf18:	ffff ffff feff 3f00 ffff ffff ffff ffff     .......?........
   bcf28:	ffff ffff 3ffc 3f00 ffff ffff ffff ffff     .....?.?........
   bcf38:	ffff ffff 0ffc 1f00 ffff ffff ffff ffff     ................
   bcf48:	ffff ffff 07fc 1f00 ffff ffff ffff ffff     ................
   bcf58:	ffff ffff 07f8 3f00 ffff ffff ffff ffff     .......?........
   bcf68:	ffff ffff 07f8 ff83 ffff ffff ffff ffff     ................
   bcf78:	ffff ffff 0ff0 ffcf ffff ffff ffff ffff     ................
   bcf88:	ffff ffff 0ff8 ffff ffff ffff ffff ffff     ................
   bcf98:	ffff ffff 0ffe ffff ffff ffff ffff ffff     ................
   bcfa8:	ffff ffff 9fff ffff ffff ffff ffff ffff     ................
   bcfb8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bcfc8:	ffff ffff fcff ff1f ffff ffff ffff ffff     ................
   bcfd8:	ffff 7fc0 fcff ff0d 3fe0 03ef c0ff ff7f     .........?......
   bcfe8:	feff 3f00 f8f3 ff09 0780 01e4 00ff ff1f     ...?............
   bcff8:	fcff 1f3f f8f3 ff09 c31f f8e0 3ffc ff87     ..?..........?..
   bd008:	f8ff ffff f8f3 fe09 f13f fce1 fff8 ffe3     ........?.......
   bd018:	f1ff ffff f8f3 fc19 f87f ffe3 fff1 ffe3     ................
   bd028:	e3ff ffff fff3 f819 fcff ffe7 ffe3 ffc7     ................
   bd038:	e7ff ffff fff3 f1f9 feff ffe7 ffe7 ff8f     ................
   bd048:	c7ff ffff e7f3 f3f9 ffff ffe7 ffe7 ff1f     ................
   bd058:	cfff ffff c3f3 f3f9 ffff ffe7 fec7 ff3f     ..............?.
   bd068:	cfff ffff 81f3 f3f9 ffff ffe7 fccf ff7f     ................
   bd078:	c0ff 0000 00f3 e3f9 ffff ffe7 f8cf ffff     ................
   bd088:	c0ff 0000 0072 e379 ffff ffe7 f1cf ffff     ....r.y.........
   bd098:	feff 0000 0072 e379 ffff ffe7 e3cf ffff     ....r.y.........
   bd0a8:	ffff fcff 00f3 f3f9 ffff ffe7 c7c7 ffff     ................
   bd0b8:	ffff fcff 81f3 f3f9 ffff ffe7 8fc7 ffff     ................
   bd0c8:	ffff f8ff c3f3 f1f9 ffff ffe7 1fe7 ffff     ................
   bd0d8:	ffff f9ff e7f1 f9f1 fcff ffe7 3fe2 fffb     .............?..
   bd0e8:	ffff f1ff fff8 f8f1 fcff ffe7 7ff0 fff3     ................
   bd0f8:	ffff e3ff fffc fce1 f87f ffe7 fff8 ffe3     ................
   bd108:	feff c77f 3ffc fe81 e13f ffe7 7ffc ffc7     .....?..?.......
   bd118:	feff 0f1e 0efe ff09 8307 ffe7 0efe ff0f     ................
   bd128:	ffff 1f00 80ff ff39 0fc0 ffe7 00ff ff1f     ......9.........
   bd138:	ffff ffe0 e0ff ffff 7ff0 ffff e0ff ffff     ................
   bd148:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bd158:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bd168:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bd178:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bd188:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bd198:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bd1a8:	ffff ffff ffff ffff cfff ffff ffff ffff     ................
   bd1b8:	ffff ffff ffff ffff 9fff ffff ffff ffff     ................
   bd1c8:	ffff ffff ffff ffff 3fff feff 7cf6 ffff     .........?...|..
   bd1d8:	ffff ffff ffff ffff 7cff feff fce7 ffe7     .........|......
   bd1e8:	ffff ffff ffff ffff 78ff fe7c fccf ffc7     .........x|.....
   bd1f8:	ffff ffff ffff ffff 39ff fe31 e1df ff9f     .........91.....
   bd208:	ffff ffff ffff ffff 03fe fe93 413e ff8f     ............>A..
   bd218:	ffff ffff ffff ffff 33ff feb7 9c1e ffe3     .........3......
   bd228:	ffff ffff ffff ffff 73ff fe37 1dc6 ffbb     .........s7.....
   bd238:	ffff ffff ffff ffff 38ff fe27 9df2 ff39     .........8'...9.
   bd248:	ffff ffff ffff ffff 3cff fe67 417a ff93     .........<g.zA..
   bd258:	ffff ffff ffff ffff 3fff ffe7 61fe ff87     .........?...a..
   bd268:	ffff ffff ffff ffff ffff ffff fdff ffff     ................
   bd278:	ffff ffff ffff ffff ffff ffff fdff ffff     ................
   bd288:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bd298:	ffff ffff ffff ffff ffff ffff ffff ffff     ................

000bd2a8 <_ZTV16Adafruit_SSD1306>:
	...
   bd2b0:	94d5 000b 94ed 000b 8921 000b a8d9 000b     ........!.......
   bd2c0:	9501 000b 7fc3 000b 7fc5 000b 7ff7 000b     ................
   bd2d0:	7fd3 000b 7fe5 000b 7f05 000b 7fc3 000b     ................
   bd2e0:	81ef 000b 9693 000b 9c2f 000b 9be1 000b     ......../.......
   bd2f0:	8087 000b 80cd 000b 80e9 000b 816d 000b     ............m...

000bd300 <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE7premask>:
   bd300:	8000 e0c0 f8f0 fefc                         ........

000bd308 <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE8postmask>:
   bd308:	0100 0703 1f0f 7f3f                         ......?.

000bd310 <_ZZN16Adafruit_SSD13065beginEhhbbE5init1>:
   bd310:	d5ae a880                                   ....

000bd314 <_ZZN16Adafruit_SSD13065beginEhhbbE5init2>:
   bd314:	00d3 8d40                                   ..@.

000bd318 <_ZZN16Adafruit_SSD13065beginEhhbbE5init3>:
   bd318:	0020 c8a1                                    ...

000bd31c <_ZZN16Adafruit_SSD13065beginEhhbbE5init5>:
   bd31c:	40db a6a4 af2e                              .@....

000bd322 <_ZZN16Adafruit_SSD13065beginEhhbbE6init4a>:
   bd322:	02da 8f81                                   ....

000bd326 <_ZZN16Adafruit_SSD13065beginEhhbbE6init4b>:
   bd326:	12da                                         ...

000bd329 <_ZZN16Adafruit_SSD13065beginEhhbbE6init4c>:
   bd329:	02da                                         ...

000bd32c <_ZZN16Adafruit_SSD13067displayEvE6dlist1>:
   bd32c:	0022 21ff 0000 0000                         "..!....

000bd334 <_ZTVN5spark13EthernetClassE>:
	...
   bd33c:	a4df 000b a4d5 000b a4cb 000b a4c1 000b     ................
   bd34c:	a4b5 000b a4a9 000b b0b9 000b b0c1 000b     ................
   bd35c:	a49d 000b a495 000b a48b 000b a481 000b     ................
   bd36c:	b0f1 000b                                   ....

000bd370 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   bd370:	0800 1810 2820 3830 7061 0070 5925 252d     .... (08app.%Y-%
   bd380:	2d6d 6425 2554 3a48 4d25 253a 2553 007a     m-%dT%H:%M:%S%z.
   bd390:	7361 7463 6d69 0065                         asctime.

000bd398 <_ZTV9IPAddress>:
	...
   bd3a0:	ac51 000b ac41 000b ac43 000b               Q...A...C...

000bd3ac <_ZTV9USBSerial>:
	...
   bd3b4:	ad37 000b ad9f 000b ad75 000b a8d9 000b     7.......u.......
   bd3c4:	ad67 000b ad39 000b ad49 000b ad99 000b     g...9...I.......
   bd3d4:	ad59 000b ad31 000b                         Y...1...

000bd3dc <_ZTV11USARTSerial>:
	...
   bd3e4:	ae95 000b af01 000b aed9 000b a8d9 000b     ................
   bd3f4:	aea9 000b aec5 000b aeb7 000b aed3 000b     ................
   bd404:	ae97 000b ae9b 000b                         ........

000bd40c <_ZTV7TwoWire>:
	...
   bd414:	af39 000b af83 000b af5b 000b af3b 000b     9.......[...;...
   bd424:	af63 000b af6b 000b af73 000b af7b 000b     c...k...s...{...

000bd434 <_ZTVN5spark9WiFiClassE>:
	...
   bd43c:	b05b 000b b051 000b b047 000b affd 000b     [...Q...G.......
   bd44c:	b03b 000b b02f 000b b0b9 000b b0c1 000b     ;.../...........
   bd45c:	b023 000b b01b 000b b011 000b b007 000b     #...............
   bd46c:	b0f1 000b                                   ....

000bd470 <_ZTVN5spark12NetworkClassE>:
	...
   bd478:	b079 000b b083 000b b08d 000b b097 000b     y...............
   bd488:	b0a1 000b b0ad 000b b0b9 000b b0c1 000b     ................
   bd498:	b0c9 000b b0d5 000b b0dd 000b b0e7 000b     ................
   bd4a8:	b0f1 000b                                   ....

000bd4ac <_ZSt7nothrow>:
   bd4ac:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
   bd4bc:	6363 6565 6564 0064 6d2f 746e 772f 726f     cceeded./mnt/wor
   bd4cc:	736b 6170 6563 772f 726f 736b 6170 6563     kspace/workspace
   bd4dc:	472f 4343 312d 2d30 6970 6570 696c 656e     /GCC-10-pipeline
   bd4ec:	6a2f 6e65 696b 736e 472d 4343 312d 2d30     /jenkins-GCC-10-
   bd4fc:	6970 6570 696c 656e 342d 5f38 3032 3032     pipeline-48_2020
   bd50c:	3131 3432 315f 3036 3136 3038 3436 2f31     1124_1606180641/
   bd51c:	7273 2f63 656e 6c77 6269 6e2f 7765 696c     src/newlib/newli
   bd52c:	2f62 696c 6362 732f 6474 696c 2f62 6172     b/libc/stdlib/ra
   bd53c:	646e 632e 2f00 6e6d 2f74 6f77 6b72 7073     nd.c./mnt/worksp
   bd54c:	6361 2f65 6f77 6b72 7073 6361 2f65 4347     ace/workspace/GC
   bd55c:	2d43 3031 702d 7069 6c65 6e69 2f65 656a     C-10-pipeline/je
   bd56c:	6b6e 6e69 2d73 4347 2d43 3031 702d 7069     nkins-GCC-10-pip
   bd57c:	6c65 6e69 2d65 3834 325f 3230 3130 3231     eline-48_2020112
   bd58c:	5f34 3631 3630 3831 3630 3134 732f 6372     4_1606180641/src
   bd59c:	6e2f 7765 696c 2f62 656e 6c77 6269 6c2f     /newlib/newlib/l
   bd5ac:	6269 2f63 7473 6972 676e 732f 7274 6f74     ibc/string/strto
   bd5bc:	2e6b 0063                                   k.c.

000bd5c0 <link_const_data_end>:
   bd5c0:	000b60a5 	.word	0x000b60a5
   bd5c4:	000ba4e9 	.word	0x000ba4e9
   bd5c8:	000ba661 	.word	0x000ba661
   bd5cc:	000ba8c9 	.word	0x000ba8c9
   bd5d0:	000baa01 	.word	0x000baa01
   bd5d4:	000baa11 	.word	0x000baa11
   bd5d8:	000baac9 	.word	0x000baac9
   bd5dc:	000bb065 	.word	0x000bb065
   bd5e0:	000bb1c9 	.word	0x000bb1c9
