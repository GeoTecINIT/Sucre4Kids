
c:/Users/SVO/GITSUCRE/Sucre4Kids/target/5.3.0/argon/Sucre4Kids.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00009e18  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000bde38  000bde38  0000de38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .data         000000bc  2003c660  000bde5c  0001c660  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000020d4  2003c71c  2003c71c  0003c71c  2**2
                  ALLOC
  6 .backup       00000004  2003f400  000bdf18  0001f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_product 00000006  000bdf1c  000bdf1c  0002df1c  2**0
                  ALLOC
  8 .module_info_suffix 00000024  000bdf22  000bdf22  0002df22  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .module_info_crc 00000004  000bdf46  000bdf46  0002df46  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .debug_info   00177ee0  00000000  00000000  0002df4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0001979b  00000000  00000000  001a5e2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    00054984  00000000  00000000  001bf5c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00003900  00000000  00000000  00213f49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 0000cb58  00000000  00000000  00217849  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00045c10  00000000  00000000  002243a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0005de62  00000000  00000000  00269fb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001468e3  00000000  00000000  002c7e13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  0000aeb0  00000000  00000000  0040e6f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <__aeabi_drsub>:
   b4020:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b4024:	e002      	b.n	b402c <__adddf3>
   b4026:	bf00      	nop

000b4028 <__aeabi_dsub>:
   b4028:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b402c <__adddf3>:
   b402c:	b530      	push	{r4, r5, lr}
   b402e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b4032:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b4036:	ea94 0f05 	teq	r4, r5
   b403a:	bf08      	it	eq
   b403c:	ea90 0f02 	teqeq	r0, r2
   b4040:	bf1f      	itttt	ne
   b4042:	ea54 0c00 	orrsne.w	ip, r4, r0
   b4046:	ea55 0c02 	orrsne.w	ip, r5, r2
   b404a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b404e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b4052:	f000 80e2 	beq.w	b421a <__adddf3+0x1ee>
   b4056:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b405a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b405e:	bfb8      	it	lt
   b4060:	426d      	neglt	r5, r5
   b4062:	dd0c      	ble.n	b407e <__adddf3+0x52>
   b4064:	442c      	add	r4, r5
   b4066:	ea80 0202 	eor.w	r2, r0, r2
   b406a:	ea81 0303 	eor.w	r3, r1, r3
   b406e:	ea82 0000 	eor.w	r0, r2, r0
   b4072:	ea83 0101 	eor.w	r1, r3, r1
   b4076:	ea80 0202 	eor.w	r2, r0, r2
   b407a:	ea81 0303 	eor.w	r3, r1, r3
   b407e:	2d36      	cmp	r5, #54	; 0x36
   b4080:	bf88      	it	hi
   b4082:	bd30      	pophi	{r4, r5, pc}
   b4084:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b4088:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b408c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b4090:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b4094:	d002      	beq.n	b409c <__adddf3+0x70>
   b4096:	4240      	negs	r0, r0
   b4098:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b409c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b40a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b40a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b40a8:	d002      	beq.n	b40b0 <__adddf3+0x84>
   b40aa:	4252      	negs	r2, r2
   b40ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b40b0:	ea94 0f05 	teq	r4, r5
   b40b4:	f000 80a7 	beq.w	b4206 <__adddf3+0x1da>
   b40b8:	f1a4 0401 	sub.w	r4, r4, #1
   b40bc:	f1d5 0e20 	rsbs	lr, r5, #32
   b40c0:	db0d      	blt.n	b40de <__adddf3+0xb2>
   b40c2:	fa02 fc0e 	lsl.w	ip, r2, lr
   b40c6:	fa22 f205 	lsr.w	r2, r2, r5
   b40ca:	1880      	adds	r0, r0, r2
   b40cc:	f141 0100 	adc.w	r1, r1, #0
   b40d0:	fa03 f20e 	lsl.w	r2, r3, lr
   b40d4:	1880      	adds	r0, r0, r2
   b40d6:	fa43 f305 	asr.w	r3, r3, r5
   b40da:	4159      	adcs	r1, r3
   b40dc:	e00e      	b.n	b40fc <__adddf3+0xd0>
   b40de:	f1a5 0520 	sub.w	r5, r5, #32
   b40e2:	f10e 0e20 	add.w	lr, lr, #32
   b40e6:	2a01      	cmp	r2, #1
   b40e8:	fa03 fc0e 	lsl.w	ip, r3, lr
   b40ec:	bf28      	it	cs
   b40ee:	f04c 0c02 	orrcs.w	ip, ip, #2
   b40f2:	fa43 f305 	asr.w	r3, r3, r5
   b40f6:	18c0      	adds	r0, r0, r3
   b40f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b40fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b4100:	d507      	bpl.n	b4112 <__adddf3+0xe6>
   b4102:	f04f 0e00 	mov.w	lr, #0
   b4106:	f1dc 0c00 	rsbs	ip, ip, #0
   b410a:	eb7e 0000 	sbcs.w	r0, lr, r0
   b410e:	eb6e 0101 	sbc.w	r1, lr, r1
   b4112:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b4116:	d31b      	bcc.n	b4150 <__adddf3+0x124>
   b4118:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b411c:	d30c      	bcc.n	b4138 <__adddf3+0x10c>
   b411e:	0849      	lsrs	r1, r1, #1
   b4120:	ea5f 0030 	movs.w	r0, r0, rrx
   b4124:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b4128:	f104 0401 	add.w	r4, r4, #1
   b412c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b4130:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b4134:	f080 809a 	bcs.w	b426c <__adddf3+0x240>
   b4138:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b413c:	bf08      	it	eq
   b413e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b4142:	f150 0000 	adcs.w	r0, r0, #0
   b4146:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b414a:	ea41 0105 	orr.w	r1, r1, r5
   b414e:	bd30      	pop	{r4, r5, pc}
   b4150:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b4154:	4140      	adcs	r0, r0
   b4156:	eb41 0101 	adc.w	r1, r1, r1
   b415a:	3c01      	subs	r4, #1
   b415c:	bf28      	it	cs
   b415e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b4162:	d2e9      	bcs.n	b4138 <__adddf3+0x10c>
   b4164:	f091 0f00 	teq	r1, #0
   b4168:	bf04      	itt	eq
   b416a:	4601      	moveq	r1, r0
   b416c:	2000      	moveq	r0, #0
   b416e:	fab1 f381 	clz	r3, r1
   b4172:	bf08      	it	eq
   b4174:	3320      	addeq	r3, #32
   b4176:	f1a3 030b 	sub.w	r3, r3, #11
   b417a:	f1b3 0220 	subs.w	r2, r3, #32
   b417e:	da0c      	bge.n	b419a <__adddf3+0x16e>
   b4180:	320c      	adds	r2, #12
   b4182:	dd08      	ble.n	b4196 <__adddf3+0x16a>
   b4184:	f102 0c14 	add.w	ip, r2, #20
   b4188:	f1c2 020c 	rsb	r2, r2, #12
   b418c:	fa01 f00c 	lsl.w	r0, r1, ip
   b4190:	fa21 f102 	lsr.w	r1, r1, r2
   b4194:	e00c      	b.n	b41b0 <__adddf3+0x184>
   b4196:	f102 0214 	add.w	r2, r2, #20
   b419a:	bfd8      	it	le
   b419c:	f1c2 0c20 	rsble	ip, r2, #32
   b41a0:	fa01 f102 	lsl.w	r1, r1, r2
   b41a4:	fa20 fc0c 	lsr.w	ip, r0, ip
   b41a8:	bfdc      	itt	le
   b41aa:	ea41 010c 	orrle.w	r1, r1, ip
   b41ae:	4090      	lslle	r0, r2
   b41b0:	1ae4      	subs	r4, r4, r3
   b41b2:	bfa2      	ittt	ge
   b41b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b41b8:	4329      	orrge	r1, r5
   b41ba:	bd30      	popge	{r4, r5, pc}
   b41bc:	ea6f 0404 	mvn.w	r4, r4
   b41c0:	3c1f      	subs	r4, #31
   b41c2:	da1c      	bge.n	b41fe <__adddf3+0x1d2>
   b41c4:	340c      	adds	r4, #12
   b41c6:	dc0e      	bgt.n	b41e6 <__adddf3+0x1ba>
   b41c8:	f104 0414 	add.w	r4, r4, #20
   b41cc:	f1c4 0220 	rsb	r2, r4, #32
   b41d0:	fa20 f004 	lsr.w	r0, r0, r4
   b41d4:	fa01 f302 	lsl.w	r3, r1, r2
   b41d8:	ea40 0003 	orr.w	r0, r0, r3
   b41dc:	fa21 f304 	lsr.w	r3, r1, r4
   b41e0:	ea45 0103 	orr.w	r1, r5, r3
   b41e4:	bd30      	pop	{r4, r5, pc}
   b41e6:	f1c4 040c 	rsb	r4, r4, #12
   b41ea:	f1c4 0220 	rsb	r2, r4, #32
   b41ee:	fa20 f002 	lsr.w	r0, r0, r2
   b41f2:	fa01 f304 	lsl.w	r3, r1, r4
   b41f6:	ea40 0003 	orr.w	r0, r0, r3
   b41fa:	4629      	mov	r1, r5
   b41fc:	bd30      	pop	{r4, r5, pc}
   b41fe:	fa21 f004 	lsr.w	r0, r1, r4
   b4202:	4629      	mov	r1, r5
   b4204:	bd30      	pop	{r4, r5, pc}
   b4206:	f094 0f00 	teq	r4, #0
   b420a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b420e:	bf06      	itte	eq
   b4210:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b4214:	3401      	addeq	r4, #1
   b4216:	3d01      	subne	r5, #1
   b4218:	e74e      	b.n	b40b8 <__adddf3+0x8c>
   b421a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b421e:	bf18      	it	ne
   b4220:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b4224:	d029      	beq.n	b427a <__adddf3+0x24e>
   b4226:	ea94 0f05 	teq	r4, r5
   b422a:	bf08      	it	eq
   b422c:	ea90 0f02 	teqeq	r0, r2
   b4230:	d005      	beq.n	b423e <__adddf3+0x212>
   b4232:	ea54 0c00 	orrs.w	ip, r4, r0
   b4236:	bf04      	itt	eq
   b4238:	4619      	moveq	r1, r3
   b423a:	4610      	moveq	r0, r2
   b423c:	bd30      	pop	{r4, r5, pc}
   b423e:	ea91 0f03 	teq	r1, r3
   b4242:	bf1e      	ittt	ne
   b4244:	2100      	movne	r1, #0
   b4246:	2000      	movne	r0, #0
   b4248:	bd30      	popne	{r4, r5, pc}
   b424a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b424e:	d105      	bne.n	b425c <__adddf3+0x230>
   b4250:	0040      	lsls	r0, r0, #1
   b4252:	4149      	adcs	r1, r1
   b4254:	bf28      	it	cs
   b4256:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b425a:	bd30      	pop	{r4, r5, pc}
   b425c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b4260:	bf3c      	itt	cc
   b4262:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b4266:	bd30      	popcc	{r4, r5, pc}
   b4268:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b426c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b4270:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b4274:	f04f 0000 	mov.w	r0, #0
   b4278:	bd30      	pop	{r4, r5, pc}
   b427a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b427e:	bf1a      	itte	ne
   b4280:	4619      	movne	r1, r3
   b4282:	4610      	movne	r0, r2
   b4284:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b4288:	bf1c      	itt	ne
   b428a:	460b      	movne	r3, r1
   b428c:	4602      	movne	r2, r0
   b428e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b4292:	bf06      	itte	eq
   b4294:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b4298:	ea91 0f03 	teqeq	r1, r3
   b429c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b42a0:	bd30      	pop	{r4, r5, pc}
   b42a2:	bf00      	nop

000b42a4 <__aeabi_ui2d>:
   b42a4:	f090 0f00 	teq	r0, #0
   b42a8:	bf04      	itt	eq
   b42aa:	2100      	moveq	r1, #0
   b42ac:	4770      	bxeq	lr
   b42ae:	b530      	push	{r4, r5, lr}
   b42b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b42b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b42b8:	f04f 0500 	mov.w	r5, #0
   b42bc:	f04f 0100 	mov.w	r1, #0
   b42c0:	e750      	b.n	b4164 <__adddf3+0x138>
   b42c2:	bf00      	nop

000b42c4 <__aeabi_i2d>:
   b42c4:	f090 0f00 	teq	r0, #0
   b42c8:	bf04      	itt	eq
   b42ca:	2100      	moveq	r1, #0
   b42cc:	4770      	bxeq	lr
   b42ce:	b530      	push	{r4, r5, lr}
   b42d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b42d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b42d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b42dc:	bf48      	it	mi
   b42de:	4240      	negmi	r0, r0
   b42e0:	f04f 0100 	mov.w	r1, #0
   b42e4:	e73e      	b.n	b4164 <__adddf3+0x138>
   b42e6:	bf00      	nop

000b42e8 <__aeabi_f2d>:
   b42e8:	0042      	lsls	r2, r0, #1
   b42ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b42ee:	ea4f 0131 	mov.w	r1, r1, rrx
   b42f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b42f6:	bf1f      	itttt	ne
   b42f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b42fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b4300:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b4304:	4770      	bxne	lr
   b4306:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b430a:	bf08      	it	eq
   b430c:	4770      	bxeq	lr
   b430e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b4312:	bf04      	itt	eq
   b4314:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b4318:	4770      	bxeq	lr
   b431a:	b530      	push	{r4, r5, lr}
   b431c:	f44f 7460 	mov.w	r4, #896	; 0x380
   b4320:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b4324:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b4328:	e71c      	b.n	b4164 <__adddf3+0x138>
   b432a:	bf00      	nop

000b432c <__aeabi_ul2d>:
   b432c:	ea50 0201 	orrs.w	r2, r0, r1
   b4330:	bf08      	it	eq
   b4332:	4770      	bxeq	lr
   b4334:	b530      	push	{r4, r5, lr}
   b4336:	f04f 0500 	mov.w	r5, #0
   b433a:	e00a      	b.n	b4352 <__aeabi_l2d+0x16>

000b433c <__aeabi_l2d>:
   b433c:	ea50 0201 	orrs.w	r2, r0, r1
   b4340:	bf08      	it	eq
   b4342:	4770      	bxeq	lr
   b4344:	b530      	push	{r4, r5, lr}
   b4346:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b434a:	d502      	bpl.n	b4352 <__aeabi_l2d+0x16>
   b434c:	4240      	negs	r0, r0
   b434e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b4352:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b4356:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b435a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b435e:	f43f aed8 	beq.w	b4112 <__adddf3+0xe6>
   b4362:	f04f 0203 	mov.w	r2, #3
   b4366:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b436a:	bf18      	it	ne
   b436c:	3203      	addne	r2, #3
   b436e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b4372:	bf18      	it	ne
   b4374:	3203      	addne	r2, #3
   b4376:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b437a:	f1c2 0320 	rsb	r3, r2, #32
   b437e:	fa00 fc03 	lsl.w	ip, r0, r3
   b4382:	fa20 f002 	lsr.w	r0, r0, r2
   b4386:	fa01 fe03 	lsl.w	lr, r1, r3
   b438a:	ea40 000e 	orr.w	r0, r0, lr
   b438e:	fa21 f102 	lsr.w	r1, r1, r2
   b4392:	4414      	add	r4, r2
   b4394:	e6bd      	b.n	b4112 <__adddf3+0xe6>
   b4396:	bf00      	nop

000b4398 <__aeabi_dmul>:
   b4398:	b570      	push	{r4, r5, r6, lr}
   b439a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b439e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b43a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b43a6:	bf1d      	ittte	ne
   b43a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b43ac:	ea94 0f0c 	teqne	r4, ip
   b43b0:	ea95 0f0c 	teqne	r5, ip
   b43b4:	f000 f8de 	bleq	b4574 <__aeabi_dmul+0x1dc>
   b43b8:	442c      	add	r4, r5
   b43ba:	ea81 0603 	eor.w	r6, r1, r3
   b43be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b43c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b43c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b43ca:	bf18      	it	ne
   b43cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b43d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b43d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b43d8:	d038      	beq.n	b444c <__aeabi_dmul+0xb4>
   b43da:	fba0 ce02 	umull	ip, lr, r0, r2
   b43de:	f04f 0500 	mov.w	r5, #0
   b43e2:	fbe1 e502 	umlal	lr, r5, r1, r2
   b43e6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b43ea:	fbe0 e503 	umlal	lr, r5, r0, r3
   b43ee:	f04f 0600 	mov.w	r6, #0
   b43f2:	fbe1 5603 	umlal	r5, r6, r1, r3
   b43f6:	f09c 0f00 	teq	ip, #0
   b43fa:	bf18      	it	ne
   b43fc:	f04e 0e01 	orrne.w	lr, lr, #1
   b4400:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b4404:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b4408:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b440c:	d204      	bcs.n	b4418 <__aeabi_dmul+0x80>
   b440e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b4412:	416d      	adcs	r5, r5
   b4414:	eb46 0606 	adc.w	r6, r6, r6
   b4418:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b441c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b4420:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b4424:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b4428:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b442c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b4430:	bf88      	it	hi
   b4432:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b4436:	d81e      	bhi.n	b4476 <__aeabi_dmul+0xde>
   b4438:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b443c:	bf08      	it	eq
   b443e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b4442:	f150 0000 	adcs.w	r0, r0, #0
   b4446:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b444a:	bd70      	pop	{r4, r5, r6, pc}
   b444c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b4450:	ea46 0101 	orr.w	r1, r6, r1
   b4454:	ea40 0002 	orr.w	r0, r0, r2
   b4458:	ea81 0103 	eor.w	r1, r1, r3
   b445c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b4460:	bfc2      	ittt	gt
   b4462:	ebd4 050c 	rsbsgt	r5, r4, ip
   b4466:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b446a:	bd70      	popgt	{r4, r5, r6, pc}
   b446c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b4470:	f04f 0e00 	mov.w	lr, #0
   b4474:	3c01      	subs	r4, #1
   b4476:	f300 80ab 	bgt.w	b45d0 <__aeabi_dmul+0x238>
   b447a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b447e:	bfde      	ittt	le
   b4480:	2000      	movle	r0, #0
   b4482:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b4486:	bd70      	pople	{r4, r5, r6, pc}
   b4488:	f1c4 0400 	rsb	r4, r4, #0
   b448c:	3c20      	subs	r4, #32
   b448e:	da35      	bge.n	b44fc <__aeabi_dmul+0x164>
   b4490:	340c      	adds	r4, #12
   b4492:	dc1b      	bgt.n	b44cc <__aeabi_dmul+0x134>
   b4494:	f104 0414 	add.w	r4, r4, #20
   b4498:	f1c4 0520 	rsb	r5, r4, #32
   b449c:	fa00 f305 	lsl.w	r3, r0, r5
   b44a0:	fa20 f004 	lsr.w	r0, r0, r4
   b44a4:	fa01 f205 	lsl.w	r2, r1, r5
   b44a8:	ea40 0002 	orr.w	r0, r0, r2
   b44ac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b44b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b44b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b44b8:	fa21 f604 	lsr.w	r6, r1, r4
   b44bc:	eb42 0106 	adc.w	r1, r2, r6
   b44c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b44c4:	bf08      	it	eq
   b44c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b44ca:	bd70      	pop	{r4, r5, r6, pc}
   b44cc:	f1c4 040c 	rsb	r4, r4, #12
   b44d0:	f1c4 0520 	rsb	r5, r4, #32
   b44d4:	fa00 f304 	lsl.w	r3, r0, r4
   b44d8:	fa20 f005 	lsr.w	r0, r0, r5
   b44dc:	fa01 f204 	lsl.w	r2, r1, r4
   b44e0:	ea40 0002 	orr.w	r0, r0, r2
   b44e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b44e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b44ec:	f141 0100 	adc.w	r1, r1, #0
   b44f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b44f4:	bf08      	it	eq
   b44f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b44fa:	bd70      	pop	{r4, r5, r6, pc}
   b44fc:	f1c4 0520 	rsb	r5, r4, #32
   b4500:	fa00 f205 	lsl.w	r2, r0, r5
   b4504:	ea4e 0e02 	orr.w	lr, lr, r2
   b4508:	fa20 f304 	lsr.w	r3, r0, r4
   b450c:	fa01 f205 	lsl.w	r2, r1, r5
   b4510:	ea43 0302 	orr.w	r3, r3, r2
   b4514:	fa21 f004 	lsr.w	r0, r1, r4
   b4518:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b451c:	fa21 f204 	lsr.w	r2, r1, r4
   b4520:	ea20 0002 	bic.w	r0, r0, r2
   b4524:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b4528:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b452c:	bf08      	it	eq
   b452e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b4532:	bd70      	pop	{r4, r5, r6, pc}
   b4534:	f094 0f00 	teq	r4, #0
   b4538:	d10f      	bne.n	b455a <__aeabi_dmul+0x1c2>
   b453a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b453e:	0040      	lsls	r0, r0, #1
   b4540:	eb41 0101 	adc.w	r1, r1, r1
   b4544:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b4548:	bf08      	it	eq
   b454a:	3c01      	subeq	r4, #1
   b454c:	d0f7      	beq.n	b453e <__aeabi_dmul+0x1a6>
   b454e:	ea41 0106 	orr.w	r1, r1, r6
   b4552:	f095 0f00 	teq	r5, #0
   b4556:	bf18      	it	ne
   b4558:	4770      	bxne	lr
   b455a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b455e:	0052      	lsls	r2, r2, #1
   b4560:	eb43 0303 	adc.w	r3, r3, r3
   b4564:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b4568:	bf08      	it	eq
   b456a:	3d01      	subeq	r5, #1
   b456c:	d0f7      	beq.n	b455e <__aeabi_dmul+0x1c6>
   b456e:	ea43 0306 	orr.w	r3, r3, r6
   b4572:	4770      	bx	lr
   b4574:	ea94 0f0c 	teq	r4, ip
   b4578:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b457c:	bf18      	it	ne
   b457e:	ea95 0f0c 	teqne	r5, ip
   b4582:	d00c      	beq.n	b459e <__aeabi_dmul+0x206>
   b4584:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b4588:	bf18      	it	ne
   b458a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b458e:	d1d1      	bne.n	b4534 <__aeabi_dmul+0x19c>
   b4590:	ea81 0103 	eor.w	r1, r1, r3
   b4594:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b4598:	f04f 0000 	mov.w	r0, #0
   b459c:	bd70      	pop	{r4, r5, r6, pc}
   b459e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b45a2:	bf06      	itte	eq
   b45a4:	4610      	moveq	r0, r2
   b45a6:	4619      	moveq	r1, r3
   b45a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b45ac:	d019      	beq.n	b45e2 <__aeabi_dmul+0x24a>
   b45ae:	ea94 0f0c 	teq	r4, ip
   b45b2:	d102      	bne.n	b45ba <__aeabi_dmul+0x222>
   b45b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b45b8:	d113      	bne.n	b45e2 <__aeabi_dmul+0x24a>
   b45ba:	ea95 0f0c 	teq	r5, ip
   b45be:	d105      	bne.n	b45cc <__aeabi_dmul+0x234>
   b45c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b45c4:	bf1c      	itt	ne
   b45c6:	4610      	movne	r0, r2
   b45c8:	4619      	movne	r1, r3
   b45ca:	d10a      	bne.n	b45e2 <__aeabi_dmul+0x24a>
   b45cc:	ea81 0103 	eor.w	r1, r1, r3
   b45d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b45d4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b45d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b45dc:	f04f 0000 	mov.w	r0, #0
   b45e0:	bd70      	pop	{r4, r5, r6, pc}
   b45e2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b45e6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b45ea:	bd70      	pop	{r4, r5, r6, pc}

000b45ec <__aeabi_ddiv>:
   b45ec:	b570      	push	{r4, r5, r6, lr}
   b45ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b45f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b45f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b45fa:	bf1d      	ittte	ne
   b45fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b4600:	ea94 0f0c 	teqne	r4, ip
   b4604:	ea95 0f0c 	teqne	r5, ip
   b4608:	f000 f8a7 	bleq	b475a <__aeabi_ddiv+0x16e>
   b460c:	eba4 0405 	sub.w	r4, r4, r5
   b4610:	ea81 0e03 	eor.w	lr, r1, r3
   b4614:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b4618:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b461c:	f000 8088 	beq.w	b4730 <__aeabi_ddiv+0x144>
   b4620:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b4624:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b4628:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b462c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b4630:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b4634:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b4638:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b463c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b4640:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b4644:	429d      	cmp	r5, r3
   b4646:	bf08      	it	eq
   b4648:	4296      	cmpeq	r6, r2
   b464a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b464e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b4652:	d202      	bcs.n	b465a <__aeabi_ddiv+0x6e>
   b4654:	085b      	lsrs	r3, r3, #1
   b4656:	ea4f 0232 	mov.w	r2, r2, rrx
   b465a:	1ab6      	subs	r6, r6, r2
   b465c:	eb65 0503 	sbc.w	r5, r5, r3
   b4660:	085b      	lsrs	r3, r3, #1
   b4662:	ea4f 0232 	mov.w	r2, r2, rrx
   b4666:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b466a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b466e:	ebb6 0e02 	subs.w	lr, r6, r2
   b4672:	eb75 0e03 	sbcs.w	lr, r5, r3
   b4676:	bf22      	ittt	cs
   b4678:	1ab6      	subcs	r6, r6, r2
   b467a:	4675      	movcs	r5, lr
   b467c:	ea40 000c 	orrcs.w	r0, r0, ip
   b4680:	085b      	lsrs	r3, r3, #1
   b4682:	ea4f 0232 	mov.w	r2, r2, rrx
   b4686:	ebb6 0e02 	subs.w	lr, r6, r2
   b468a:	eb75 0e03 	sbcs.w	lr, r5, r3
   b468e:	bf22      	ittt	cs
   b4690:	1ab6      	subcs	r6, r6, r2
   b4692:	4675      	movcs	r5, lr
   b4694:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b4698:	085b      	lsrs	r3, r3, #1
   b469a:	ea4f 0232 	mov.w	r2, r2, rrx
   b469e:	ebb6 0e02 	subs.w	lr, r6, r2
   b46a2:	eb75 0e03 	sbcs.w	lr, r5, r3
   b46a6:	bf22      	ittt	cs
   b46a8:	1ab6      	subcs	r6, r6, r2
   b46aa:	4675      	movcs	r5, lr
   b46ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b46b0:	085b      	lsrs	r3, r3, #1
   b46b2:	ea4f 0232 	mov.w	r2, r2, rrx
   b46b6:	ebb6 0e02 	subs.w	lr, r6, r2
   b46ba:	eb75 0e03 	sbcs.w	lr, r5, r3
   b46be:	bf22      	ittt	cs
   b46c0:	1ab6      	subcs	r6, r6, r2
   b46c2:	4675      	movcs	r5, lr
   b46c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b46c8:	ea55 0e06 	orrs.w	lr, r5, r6
   b46cc:	d018      	beq.n	b4700 <__aeabi_ddiv+0x114>
   b46ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b46d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b46d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b46da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b46de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b46e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b46e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b46ea:	d1c0      	bne.n	b466e <__aeabi_ddiv+0x82>
   b46ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b46f0:	d10b      	bne.n	b470a <__aeabi_ddiv+0x11e>
   b46f2:	ea41 0100 	orr.w	r1, r1, r0
   b46f6:	f04f 0000 	mov.w	r0, #0
   b46fa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b46fe:	e7b6      	b.n	b466e <__aeabi_ddiv+0x82>
   b4700:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b4704:	bf04      	itt	eq
   b4706:	4301      	orreq	r1, r0
   b4708:	2000      	moveq	r0, #0
   b470a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b470e:	bf88      	it	hi
   b4710:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b4714:	f63f aeaf 	bhi.w	b4476 <__aeabi_dmul+0xde>
   b4718:	ebb5 0c03 	subs.w	ip, r5, r3
   b471c:	bf04      	itt	eq
   b471e:	ebb6 0c02 	subseq.w	ip, r6, r2
   b4722:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b4726:	f150 0000 	adcs.w	r0, r0, #0
   b472a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b472e:	bd70      	pop	{r4, r5, r6, pc}
   b4730:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b4734:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b4738:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b473c:	bfc2      	ittt	gt
   b473e:	ebd4 050c 	rsbsgt	r5, r4, ip
   b4742:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b4746:	bd70      	popgt	{r4, r5, r6, pc}
   b4748:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b474c:	f04f 0e00 	mov.w	lr, #0
   b4750:	3c01      	subs	r4, #1
   b4752:	e690      	b.n	b4476 <__aeabi_dmul+0xde>
   b4754:	ea45 0e06 	orr.w	lr, r5, r6
   b4758:	e68d      	b.n	b4476 <__aeabi_dmul+0xde>
   b475a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b475e:	ea94 0f0c 	teq	r4, ip
   b4762:	bf08      	it	eq
   b4764:	ea95 0f0c 	teqeq	r5, ip
   b4768:	f43f af3b 	beq.w	b45e2 <__aeabi_dmul+0x24a>
   b476c:	ea94 0f0c 	teq	r4, ip
   b4770:	d10a      	bne.n	b4788 <__aeabi_ddiv+0x19c>
   b4772:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b4776:	f47f af34 	bne.w	b45e2 <__aeabi_dmul+0x24a>
   b477a:	ea95 0f0c 	teq	r5, ip
   b477e:	f47f af25 	bne.w	b45cc <__aeabi_dmul+0x234>
   b4782:	4610      	mov	r0, r2
   b4784:	4619      	mov	r1, r3
   b4786:	e72c      	b.n	b45e2 <__aeabi_dmul+0x24a>
   b4788:	ea95 0f0c 	teq	r5, ip
   b478c:	d106      	bne.n	b479c <__aeabi_ddiv+0x1b0>
   b478e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b4792:	f43f aefd 	beq.w	b4590 <__aeabi_dmul+0x1f8>
   b4796:	4610      	mov	r0, r2
   b4798:	4619      	mov	r1, r3
   b479a:	e722      	b.n	b45e2 <__aeabi_dmul+0x24a>
   b479c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b47a0:	bf18      	it	ne
   b47a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b47a6:	f47f aec5 	bne.w	b4534 <__aeabi_dmul+0x19c>
   b47aa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b47ae:	f47f af0d 	bne.w	b45cc <__aeabi_dmul+0x234>
   b47b2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b47b6:	f47f aeeb 	bne.w	b4590 <__aeabi_dmul+0x1f8>
   b47ba:	e712      	b.n	b45e2 <__aeabi_dmul+0x24a>

000b47bc <__gedf2>:
   b47bc:	f04f 3cff 	mov.w	ip, #4294967295
   b47c0:	e006      	b.n	b47d0 <__cmpdf2+0x4>
   b47c2:	bf00      	nop

000b47c4 <__ledf2>:
   b47c4:	f04f 0c01 	mov.w	ip, #1
   b47c8:	e002      	b.n	b47d0 <__cmpdf2+0x4>
   b47ca:	bf00      	nop

000b47cc <__cmpdf2>:
   b47cc:	f04f 0c01 	mov.w	ip, #1
   b47d0:	f84d cd04 	str.w	ip, [sp, #-4]!
   b47d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b47d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b47dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b47e0:	bf18      	it	ne
   b47e2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   b47e6:	d01b      	beq.n	b4820 <__cmpdf2+0x54>
   b47e8:	b001      	add	sp, #4
   b47ea:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   b47ee:	bf0c      	ite	eq
   b47f0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   b47f4:	ea91 0f03 	teqne	r1, r3
   b47f8:	bf02      	ittt	eq
   b47fa:	ea90 0f02 	teqeq	r0, r2
   b47fe:	2000      	moveq	r0, #0
   b4800:	4770      	bxeq	lr
   b4802:	f110 0f00 	cmn.w	r0, #0
   b4806:	ea91 0f03 	teq	r1, r3
   b480a:	bf58      	it	pl
   b480c:	4299      	cmppl	r1, r3
   b480e:	bf08      	it	eq
   b4810:	4290      	cmpeq	r0, r2
   b4812:	bf2c      	ite	cs
   b4814:	17d8      	asrcs	r0, r3, #31
   b4816:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   b481a:	f040 0001 	orr.w	r0, r0, #1
   b481e:	4770      	bx	lr
   b4820:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b4824:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b4828:	d102      	bne.n	b4830 <__cmpdf2+0x64>
   b482a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b482e:	d107      	bne.n	b4840 <__cmpdf2+0x74>
   b4830:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b4834:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b4838:	d1d6      	bne.n	b47e8 <__cmpdf2+0x1c>
   b483a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b483e:	d0d3      	beq.n	b47e8 <__cmpdf2+0x1c>
   b4840:	f85d 0b04 	ldr.w	r0, [sp], #4
   b4844:	4770      	bx	lr
   b4846:	bf00      	nop

000b4848 <__aeabi_cdrcmple>:
   b4848:	4684      	mov	ip, r0
   b484a:	4610      	mov	r0, r2
   b484c:	4662      	mov	r2, ip
   b484e:	468c      	mov	ip, r1
   b4850:	4619      	mov	r1, r3
   b4852:	4663      	mov	r3, ip
   b4854:	e000      	b.n	b4858 <__aeabi_cdcmpeq>
   b4856:	bf00      	nop

000b4858 <__aeabi_cdcmpeq>:
   b4858:	b501      	push	{r0, lr}
   b485a:	f7ff ffb7 	bl	b47cc <__cmpdf2>
   b485e:	2800      	cmp	r0, #0
   b4860:	bf48      	it	mi
   b4862:	f110 0f00 	cmnmi.w	r0, #0
   b4866:	bd01      	pop	{r0, pc}

000b4868 <__aeabi_dcmpeq>:
   b4868:	f84d ed08 	str.w	lr, [sp, #-8]!
   b486c:	f7ff fff4 	bl	b4858 <__aeabi_cdcmpeq>
   b4870:	bf0c      	ite	eq
   b4872:	2001      	moveq	r0, #1
   b4874:	2000      	movne	r0, #0
   b4876:	f85d fb08 	ldr.w	pc, [sp], #8
   b487a:	bf00      	nop

000b487c <__aeabi_dcmplt>:
   b487c:	f84d ed08 	str.w	lr, [sp, #-8]!
   b4880:	f7ff ffea 	bl	b4858 <__aeabi_cdcmpeq>
   b4884:	bf34      	ite	cc
   b4886:	2001      	movcc	r0, #1
   b4888:	2000      	movcs	r0, #0
   b488a:	f85d fb08 	ldr.w	pc, [sp], #8
   b488e:	bf00      	nop

000b4890 <__aeabi_dcmple>:
   b4890:	f84d ed08 	str.w	lr, [sp, #-8]!
   b4894:	f7ff ffe0 	bl	b4858 <__aeabi_cdcmpeq>
   b4898:	bf94      	ite	ls
   b489a:	2001      	movls	r0, #1
   b489c:	2000      	movhi	r0, #0
   b489e:	f85d fb08 	ldr.w	pc, [sp], #8
   b48a2:	bf00      	nop

000b48a4 <__aeabi_dcmpge>:
   b48a4:	f84d ed08 	str.w	lr, [sp, #-8]!
   b48a8:	f7ff ffce 	bl	b4848 <__aeabi_cdrcmple>
   b48ac:	bf94      	ite	ls
   b48ae:	2001      	movls	r0, #1
   b48b0:	2000      	movhi	r0, #0
   b48b2:	f85d fb08 	ldr.w	pc, [sp], #8
   b48b6:	bf00      	nop

000b48b8 <__aeabi_dcmpgt>:
   b48b8:	f84d ed08 	str.w	lr, [sp, #-8]!
   b48bc:	f7ff ffc4 	bl	b4848 <__aeabi_cdrcmple>
   b48c0:	bf34      	ite	cc
   b48c2:	2001      	movcc	r0, #1
   b48c4:	2000      	movcs	r0, #0
   b48c6:	f85d fb08 	ldr.w	pc, [sp], #8
   b48ca:	bf00      	nop

000b48cc <__aeabi_d2iz>:
   b48cc:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b48d0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b48d4:	d215      	bcs.n	b4902 <__aeabi_d2iz+0x36>
   b48d6:	d511      	bpl.n	b48fc <__aeabi_d2iz+0x30>
   b48d8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b48dc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b48e0:	d912      	bls.n	b4908 <__aeabi_d2iz+0x3c>
   b48e2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b48e6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b48ea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b48ee:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b48f2:	fa23 f002 	lsr.w	r0, r3, r2
   b48f6:	bf18      	it	ne
   b48f8:	4240      	negne	r0, r0
   b48fa:	4770      	bx	lr
   b48fc:	f04f 0000 	mov.w	r0, #0
   b4900:	4770      	bx	lr
   b4902:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b4906:	d105      	bne.n	b4914 <__aeabi_d2iz+0x48>
   b4908:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   b490c:	bf08      	it	eq
   b490e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   b4912:	4770      	bx	lr
   b4914:	f04f 0000 	mov.w	r0, #0
   b4918:	4770      	bx	lr
   b491a:	bf00      	nop

000b491c <__aeabi_d2f>:
   b491c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b4920:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   b4924:	bf24      	itt	cs
   b4926:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   b492a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   b492e:	d90d      	bls.n	b494c <__aeabi_d2f+0x30>
   b4930:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   b4934:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   b4938:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   b493c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   b4940:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   b4944:	bf08      	it	eq
   b4946:	f020 0001 	biceq.w	r0, r0, #1
   b494a:	4770      	bx	lr
   b494c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   b4950:	d121      	bne.n	b4996 <__aeabi_d2f+0x7a>
   b4952:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   b4956:	bfbc      	itt	lt
   b4958:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   b495c:	4770      	bxlt	lr
   b495e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b4962:	ea4f 5252 	mov.w	r2, r2, lsr #21
   b4966:	f1c2 0218 	rsb	r2, r2, #24
   b496a:	f1c2 0c20 	rsb	ip, r2, #32
   b496e:	fa10 f30c 	lsls.w	r3, r0, ip
   b4972:	fa20 f002 	lsr.w	r0, r0, r2
   b4976:	bf18      	it	ne
   b4978:	f040 0001 	orrne.w	r0, r0, #1
   b497c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b4980:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   b4984:	fa03 fc0c 	lsl.w	ip, r3, ip
   b4988:	ea40 000c 	orr.w	r0, r0, ip
   b498c:	fa23 f302 	lsr.w	r3, r3, r2
   b4990:	ea4f 0343 	mov.w	r3, r3, lsl #1
   b4994:	e7cc      	b.n	b4930 <__aeabi_d2f+0x14>
   b4996:	ea7f 5362 	mvns.w	r3, r2, asr #21
   b499a:	d107      	bne.n	b49ac <__aeabi_d2f+0x90>
   b499c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   b49a0:	bf1e      	ittt	ne
   b49a2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   b49a6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   b49aa:	4770      	bxne	lr
   b49ac:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   b49b0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   b49b4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   b49b8:	4770      	bx	lr
   b49ba:	bf00      	nop

000b49bc <strlen>:
   b49bc:	4603      	mov	r3, r0
   b49be:	f813 2b01 	ldrb.w	r2, [r3], #1
   b49c2:	2a00      	cmp	r2, #0
   b49c4:	d1fb      	bne.n	b49be <strlen+0x2>
   b49c6:	1a18      	subs	r0, r3, r0
   b49c8:	3801      	subs	r0, #1
   b49ca:	4770      	bx	lr

000b49cc <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b49cc:	4809      	ldr	r0, [pc, #36]	; (b49f4 <module_user_pre_init+0x28>)
   b49ce:	490a      	ldr	r1, [pc, #40]	; (b49f8 <module_user_pre_init+0x2c>)
   b49d0:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b49d2:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b49d4:	d005      	beq.n	b49e2 <module_user_pre_init+0x16>
   b49d6:	4a09      	ldr	r2, [pc, #36]	; (b49fc <module_user_pre_init+0x30>)
   b49d8:	4282      	cmp	r2, r0
   b49da:	d002      	beq.n	b49e2 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b49dc:	1a12      	subs	r2, r2, r0
   b49de:	f007 f861 	bl	bbaa4 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b49e2:	4807      	ldr	r0, [pc, #28]	; (b4a00 <module_user_pre_init+0x34>)
   b49e4:	4a07      	ldr	r2, [pc, #28]	; (b4a04 <module_user_pre_init+0x38>)
   b49e6:	2100      	movs	r1, #0
   b49e8:	1a12      	subs	r2, r2, r0
   b49ea:	f007 f869 	bl	bbac0 <memset>
    return &link_global_data_start;
}
   b49ee:	4801      	ldr	r0, [pc, #4]	; (b49f4 <module_user_pre_init+0x28>)
   b49f0:	bd08      	pop	{r3, pc}
   b49f2:	bf00      	nop
   b49f4:	2003c660 	.word	0x2003c660
   b49f8:	000bde5c 	.word	0x000bde5c
   b49fc:	2003c71c 	.word	0x2003c71c
   b4a00:	2003c71c 	.word	0x2003c71c
   b4a04:	2003e7f0 	.word	0x2003e7f0

000b4a08 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4a08:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4a0a:	4e07      	ldr	r6, [pc, #28]	; (b4a28 <module_user_init+0x20>)
   b4a0c:	4c07      	ldr	r4, [pc, #28]	; (b4a2c <module_user_init+0x24>)
    module_user_init_hook();
   b4a0e:	f006 fbd9 	bl	bb1c4 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4a12:	1ba4      	subs	r4, r4, r6
   b4a14:	08a4      	lsrs	r4, r4, #2
   b4a16:	2500      	movs	r5, #0
   b4a18:	42ac      	cmp	r4, r5
   b4a1a:	d100      	bne.n	b4a1e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4a1c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4a1e:	f856 3b04 	ldr.w	r3, [r6], #4
   b4a22:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4a24:	3501      	adds	r5, #1
   b4a26:	e7f7      	b.n	b4a18 <module_user_init+0x10>
   b4a28:	000bde14 	.word	0x000bde14
   b4a2c:	000bde38 	.word	0x000bde38

000b4a30 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4a30:	f001 bcdc 	b.w	b63ec <setup>

000b4a34 <module_user_loop>:
}

void module_user_loop() {
   b4a34:	b508      	push	{r3, lr}
    loop();
   b4a36:	f002 fc0b 	bl	b7250 <loop>
    _post_loop();
}
   b4a3a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4a3e:	f006 bb79 	b.w	bb134 <_post_loop>

000b4a42 <_Znaj>:
   b4a42:	f005 bfc5 	b.w	ba9d0 <malloc>

000b4a46 <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b4a46:	f005 bfcb 	b.w	ba9e0 <free>
	...

000b4a4c <__cxa_pure_virtual>:
int __wrap_printf(const char* fmt, ...) {
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b4a4c:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b4a4e:	4a03      	ldr	r2, [pc, #12]	; (b4a5c <__cxa_pure_virtual+0x10>)
   b4a50:	4903      	ldr	r1, [pc, #12]	; (b4a60 <__cxa_pure_virtual+0x14>)
   b4a52:	200c      	movs	r0, #12
   b4a54:	f005 ff20 	bl	ba898 <panic_>
  while (1);
   b4a58:	e7fe      	b.n	b4a58 <__cxa_pure_virtual+0xc>
   b4a5a:	bf00      	nop
   b4a5c:	000ba5e9 	.word	0x000ba5e9
   b4a60:	000bbcf4 	.word	0x000bbcf4

000b4a64 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b4a64:	7800      	ldrb	r0, [r0, #0]
   b4a66:	fab0 f080 	clz	r0, r0
   b4a6a:	0940      	lsrs	r0, r0, #5
   b4a6c:	4770      	bx	lr

000b4a6e <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b4a6e:	2301      	movs	r3, #1
   b4a70:	7003      	strb	r3, [r0, #0]
   b4a72:	4770      	bx	lr

000b4a74 <_Z10borradoALLi.part.0>:
      numSensoresBloque = 0;
      numActuadoresBloque = 0;
      break;
   }
   case 1: {
      IF_pasado = false;
   b4a74:	4a0f      	ldr	r2, [pc, #60]	; (b4ab4 <_Z10borradoALLi.part.0+0x40>)
   b4a76:	2300      	movs	r3, #0
   b4a78:	7013      	strb	r3, [r2, #0]
      THEN_pasado = false;
   b4a7a:	4a0f      	ldr	r2, [pc, #60]	; (b4ab8 <_Z10borradoALLi.part.0+0x44>)
   b4a7c:	7013      	strb	r3, [r2, #0]
      ELSE_pasado = false;
   b4a7e:	4a0f      	ldr	r2, [pc, #60]	; (b4abc <_Z10borradoALLi.part.0+0x48>)
   b4a80:	7013      	strb	r3, [r2, #0]
      if1 = false; if2 = false; then1 = false; then2 = false; else1 = false; else2 = false;
   b4a82:	4a0f      	ldr	r2, [pc, #60]	; (b4ac0 <_Z10borradoALLi.part.0+0x4c>)
   b4a84:	7013      	strb	r3, [r2, #0]
   b4a86:	4a0f      	ldr	r2, [pc, #60]	; (b4ac4 <_Z10borradoALLi.part.0+0x50>)
   b4a88:	7013      	strb	r3, [r2, #0]
   b4a8a:	4a0f      	ldr	r2, [pc, #60]	; (b4ac8 <_Z10borradoALLi.part.0+0x54>)
   b4a8c:	7013      	strb	r3, [r2, #0]
   b4a8e:	4a0f      	ldr	r2, [pc, #60]	; (b4acc <_Z10borradoALLi.part.0+0x58>)
   b4a90:	7013      	strb	r3, [r2, #0]
   b4a92:	4a0f      	ldr	r2, [pc, #60]	; (b4ad0 <_Z10borradoALLi.part.0+0x5c>)
   b4a94:	7013      	strb	r3, [r2, #0]
   b4a96:	4a0f      	ldr	r2, [pc, #60]	; (b4ad4 <_Z10borradoALLi.part.0+0x60>)
   b4a98:	7013      	strb	r3, [r2, #0]
      scroll = 0;
   b4a9a:	4a0f      	ldr	r2, [pc, #60]	; (b4ad8 <_Z10borradoALLi.part.0+0x64>)
   b4a9c:	6013      	str	r3, [r2, #0]

      numBloque = -1;
   b4a9e:	4a0f      	ldr	r2, [pc, #60]	; (b4adc <_Z10borradoALLi.part.0+0x68>)
   b4aa0:	f04f 31ff 	mov.w	r1, #4294967295
   b4aa4:	6011      	str	r1, [r2, #0]

      puertoDigital = 3;
   b4aa6:	4a0e      	ldr	r2, [pc, #56]	; (b4ae0 <_Z10borradoALLi.part.0+0x6c>)
   b4aa8:	2103      	movs	r1, #3
   b4aaa:	6011      	str	r1, [r2, #0]
      puertoAnalogico = 0;
   b4aac:	4a0d      	ldr	r2, [pc, #52]	; (b4ae4 <_Z10borradoALLi.part.0+0x70>)
   b4aae:	6013      	str	r3, [r2, #0]
      tam_bucle = 0;
   }
   default:
      break;
   }
}
   b4ab0:	4770      	bx	lr
   b4ab2:	bf00      	nop
   b4ab4:	2003c729 	.word	0x2003c729
   b4ab8:	2003c738 	.word	0x2003c738
   b4abc:	2003c728 	.word	0x2003c728
   b4ac0:	2003d6d4 	.word	0x2003d6d4
   b4ac4:	2003d6d5 	.word	0x2003d6d5
   b4ac8:	2003e6ac 	.word	0x2003e6ac
   b4acc:	2003e6ad 	.word	0x2003e6ad
   b4ad0:	2003d6c8 	.word	0x2003d6c8
   b4ad4:	2003d6c9 	.word	0x2003d6c9
   b4ad8:	2003da44 	.word	0x2003da44
   b4adc:	2003c688 	.word	0x2003c688
   b4ae0:	2003c68c 	.word	0x2003c68c
   b4ae4:	2003da30 	.word	0x2003da30

000b4ae8 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4ae8:	b40e      	push	{r1, r2, r3}
   b4aea:	b503      	push	{r0, r1, lr}
   b4aec:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b4aee:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4af0:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b4af4:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b4af6:	f006 fa60 	bl	bafba <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b4afa:	b002      	add	sp, #8
   b4afc:	f85d eb04 	ldr.w	lr, [sp], #4
   b4b00:	b003      	add	sp, #12
   b4b02:	4770      	bx	lr

000b4b04 <_ZN5Print8printlnfEPKcz>:

    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4b04:	b40e      	push	{r1, r2, r3}
   b4b06:	b503      	push	{r0, r1, lr}
   b4b08:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(true, format, args);
   b4b0a:	2101      	movs	r1, #1
    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4b0c:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b4b10:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(true, format, args);
   b4b12:	f006 fa52 	bl	bafba <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b4b16:	b002      	add	sp, #8
   b4b18:	f85d eb04 	ldr.w	lr, [sp], #4
   b4b1c:	b003      	add	sp, #12
   b4b1e:	4770      	bx	lr

000b4b20 <_Z11noDistanciai>:
//---------------------------------------------------------------------------------------------------
//------------------------------------- M O D O   1 -------------------------------------------------
//---------------------------------------------------------------------------------------------------

bool noDistancia(int puerto)
{
   b4b20:	b507      	push	{r0, r1, r2, lr}
   b4b22:	4601      	mov	r1, r0
    Ultrasonic ultrasonic(puerto);
   b4b24:	a801      	add	r0, sp, #4
   b4b26:	f004 fed1 	bl	b98cc <_ZN10UltrasonicC1Ei>
    long range = ultrasonic.MeasureInCentimeters();
   b4b2a:	a801      	add	r0, sp, #4
   b4b2c:	f004 fed0 	bl	b98d0 <_ZN10Ultrasonic20MeasureInCentimetersEv>
    // Serial.printlnf("Distancia: %d", range);
    if (range >= 0 && range < 10)
        return true;
    else
        return false;
}
   b4b30:	2809      	cmp	r0, #9
   b4b32:	bf8c      	ite	hi
   b4b34:	2000      	movhi	r0, #0
   b4b36:	2001      	movls	r0, #1
   b4b38:	b003      	add	sp, #12
   b4b3a:	f85d fb04 	ldr.w	pc, [sp], #4

000b4b3e <_Z11siDistanciai>:

bool siDistancia(int puerto)
{
   b4b3e:	b507      	push	{r0, r1, r2, lr}
   b4b40:	4601      	mov	r1, r0
    Ultrasonic ultrasonic(puerto);
   b4b42:	a801      	add	r0, sp, #4
   b4b44:	f004 fec2 	bl	b98cc <_ZN10UltrasonicC1Ei>
    long range = ultrasonic.MeasureInCentimeters();
   b4b48:	a801      	add	r0, sp, #4
   b4b4a:	f004 fec1 	bl	b98d0 <_ZN10Ultrasonic20MeasureInCentimetersEv>
    // Serial.printlnf("Distancia: %d", range);
    if (range > 10)
        return true;
    else
        return false;
}
   b4b4e:	280a      	cmp	r0, #10
   b4b50:	bfd4      	ite	le
   b4b52:	2000      	movle	r0, #0
   b4b54:	2001      	movgt	r0, #1
   b4b56:	b003      	add	sp, #12
   b4b58:	f85d fb04 	ldr.w	pc, [sp], #4

000b4b5c <_Z5siLuzi>:

bool siLuz(int puerto)
{
    int threshold = 1000;
    
    switch (puerto)
   b4b5c:	2802      	cmp	r0, #2
{
   b4b5e:	b508      	push	{r3, lr}
    switch (puerto)
   b4b60:	d00b      	beq.n	b4b7a <_Z5siLuzi+0x1e>
   b4b62:	2804      	cmp	r0, #4
   b4b64:	d00b      	beq.n	b4b7e <_Z5siLuzi+0x22>
   b4b66:	b960      	cbnz	r0, b4b82 <_Z5siLuzi+0x26>
    {
    case 0:
        if (analogRead(A0) >= threshold)
   b4b68:	2013      	movs	r0, #19
        if (analogRead(A2) >= threshold)
            return true;
        return false;

    case 4:
        if (analogRead(A4) >= threshold)
   b4b6a:	f006 fec0 	bl	bb8ee <analogRead>
   b4b6e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   b4b72:	bfb4      	ite	lt
   b4b74:	2000      	movlt	r0, #0
   b4b76:	2001      	movge	r0, #1
        return false;

    default:
        return false;
    }
}
   b4b78:	bd08      	pop	{r3, pc}
        if (analogRead(A2) >= threshold)
   b4b7a:	2011      	movs	r0, #17
   b4b7c:	e7f5      	b.n	b4b6a <_Z5siLuzi+0xe>
        if (analogRead(A4) >= threshold)
   b4b7e:	200f      	movs	r0, #15
   b4b80:	e7f3      	b.n	b4b6a <_Z5siLuzi+0xe>
    switch (puerto)
   b4b82:	2000      	movs	r0, #0
   b4b84:	e7f8      	b.n	b4b78 <_Z5siLuzi+0x1c>

000b4b86 <_Z5noLuzi>:

bool noLuz(int puerto)
{
    int threshold = 1000;
    switch (puerto)
   b4b86:	2802      	cmp	r0, #2
{
   b4b88:	b508      	push	{r3, lr}
    switch (puerto)
   b4b8a:	d00b      	beq.n	b4ba4 <_Z5noLuzi+0x1e>
   b4b8c:	2804      	cmp	r0, #4
   b4b8e:	d00b      	beq.n	b4ba8 <_Z5noLuzi+0x22>
   b4b90:	b960      	cbnz	r0, b4bac <_Z5noLuzi+0x26>
    {
    case 0:
        if (analogRead(A0) <= threshold)
   b4b92:	2013      	movs	r0, #19
        if (analogRead(A2) <= threshold)
            return true;
        return false;

    case 4:
        if (analogRead(A4) <= threshold)
   b4b94:	f006 feab 	bl	bb8ee <analogRead>
   b4b98:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   b4b9c:	bfcc      	ite	gt
   b4b9e:	2000      	movgt	r0, #0
   b4ba0:	2001      	movle	r0, #1
        return false;

    default:
        return false;
    }
}
   b4ba2:	bd08      	pop	{r3, pc}
        if (analogRead(A2) <= threshold)
   b4ba4:	2011      	movs	r0, #17
   b4ba6:	e7f5      	b.n	b4b94 <_Z5noLuzi+0xe>
        if (analogRead(A4) <= threshold)
   b4ba8:	200f      	movs	r0, #15
   b4baa:	e7f3      	b.n	b4b94 <_Z5noLuzi+0xe>
    switch (puerto)
   b4bac:	2000      	movs	r0, #0
   b4bae:	e7f8      	b.n	b4ba2 <_Z5noLuzi+0x1c>

000b4bb0 <_Z7siRuidoi>:

bool siRuido(int puerto)
{
    int p;
    switch (puerto)
   b4bb0:	2802      	cmp	r0, #2
{
   b4bb2:	b538      	push	{r3, r4, r5, lr}
    switch (puerto)
   b4bb4:	d023      	beq.n	b4bfe <_Z7siRuidoi+0x4e>
   b4bb6:	2804      	cmp	r0, #4
   b4bb8:	d023      	beq.n	b4c02 <_Z7siRuidoi+0x52>
   b4bba:	bb30      	cbnz	r0, b4c0a <_Z7siRuidoi+0x5a>
    {
    case 0:
        p = A0;
   b4bbc:	2013      	movs	r0, #19

    default:
        return false;
    }

    int sonido = analogRead(p);
   b4bbe:	f006 fe96 	bl	bb8ee <analogRead>
   b4bc2:	4604      	mov	r4, r0
    Serial.println(sonido);
   b4bc4:	f006 fc20 	bl	bb408 <_Z16_fetch_usbserialv>
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
   b4bc8:	2c00      	cmp	r4, #0
   b4bca:	4605      	mov	r5, r0
   b4bcc:	da1b      	bge.n	b4c06 <_Z7siRuidoi+0x56>
            t = print('-');
   b4bce:	212d      	movs	r1, #45	; 0x2d
   b4bd0:	f006 f9bc 	bl	baf4c <_ZN5Print5printEc>
            val = -n;
   b4bd4:	4261      	negs	r1, r4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b4bd6:	220a      	movs	r2, #10
   b4bd8:	4628      	mov	r0, r5
   b4bda:	f006 f9d0 	bl	baf7e <_ZN5Print11printNumberEmh>
        n += println();
   b4bde:	4628      	mov	r0, r5
   b4be0:	f006 f9b7 	bl	baf52 <_ZN5Print7printlnEv>
    if (sonido >= 1600)
   b4be4:	f5b4 6fc8 	cmp.w	r4, #1600	; 0x640
   b4be8:	4a09      	ldr	r2, [pc, #36]	; (b4c10 <_Z7siRuidoi+0x60>)
        ruid = 12;
   b4bea:	bfa4      	itt	ge
   b4bec:	230c      	movge	r3, #12
   b4bee:	6013      	strge	r3, [r2, #0]
    if (ruid > 0){
   b4bf0:	6813      	ldr	r3, [r2, #0]
   b4bf2:	2b00      	cmp	r3, #0
   b4bf4:	dd09      	ble.n	b4c0a <_Z7siRuidoi+0x5a>
        ruid--;
   b4bf6:	3b01      	subs	r3, #1
   b4bf8:	6013      	str	r3, [r2, #0]
        return true;}
   b4bfa:	2001      	movs	r0, #1
    return false;
}
   b4bfc:	bd38      	pop	{r3, r4, r5, pc}
    switch (puerto)
   b4bfe:	2011      	movs	r0, #17
   b4c00:	e7dd      	b.n	b4bbe <_Z7siRuidoi+0xe>
        p = A4;
   b4c02:	200f      	movs	r0, #15
   b4c04:	e7db      	b.n	b4bbe <_Z7siRuidoi+0xe>
            val = n;
   b4c06:	4621      	mov	r1, r4
   b4c08:	e7e5      	b.n	b4bd6 <_Z7siRuidoi+0x26>
    return false;
   b4c0a:	2000      	movs	r0, #0
   b4c0c:	e7f6      	b.n	b4bfc <_Z7siRuidoi+0x4c>
   b4c0e:	bf00      	nop
   b4c10:	2003da40 	.word	0x2003da40

000b4c14 <_Z7noRuidoi>:

bool noRuido(int puerto)
{
   b4c14:	b508      	push	{r3, lr}
    if (analogRead(puerto) <= 700)
   b4c16:	b280      	uxth	r0, r0
   b4c18:	f006 fe69 	bl	bb8ee <analogRead>
        return true;
    return false;
}
   b4c1c:	f5b0 7f2f 	cmp.w	r0, #700	; 0x2bc
   b4c20:	bfcc      	ite	gt
   b4c22:	2000      	movgt	r0, #0
   b4c24:	2001      	movle	r0, #1
   b4c26:	bd08      	pop	{r3, pc}

000b4c28 <_Z7siBotoni>:

bool siBoton(int puerto)
{
   b4c28:	b507      	push	{r0, r1, r2, lr}
    pinMode(puerto, INPUT);
   b4c2a:	b280      	uxth	r0, r0
   b4c2c:	2100      	movs	r1, #0
   b4c2e:	9001      	str	r0, [sp, #4]
   b4c30:	f006 fe20 	bl	bb874 <pinMode>
    if (digitalRead(puerto) == HIGH)
   b4c34:	9801      	ldr	r0, [sp, #4]
   b4c36:	f006 fe47 	bl	bb8c8 <digitalRead>
        return true;
    return false;
}
   b4c3a:	1e43      	subs	r3, r0, #1
   b4c3c:	4258      	negs	r0, r3
   b4c3e:	4158      	adcs	r0, r3
   b4c40:	b003      	add	sp, #12
   b4c42:	f85d fb04 	ldr.w	pc, [sp], #4

000b4c46 <_Z7noBotoni>:

bool noBoton(int puerto)
{
   b4c46:	b507      	push	{r0, r1, r2, lr}
    pinMode(puerto, INPUT);
   b4c48:	b280      	uxth	r0, r0
   b4c4a:	2100      	movs	r1, #0
   b4c4c:	9001      	str	r0, [sp, #4]
   b4c4e:	f006 fe11 	bl	bb874 <pinMode>
    if (digitalRead(puerto) == LOW)
   b4c52:	9801      	ldr	r0, [sp, #4]
   b4c54:	f006 fe38 	bl	bb8c8 <digitalRead>
        return true;
    return false;
}
   b4c58:	fab0 f080 	clz	r0, r0
   b4c5c:	0940      	lsrs	r0, r0, #5
   b4c5e:	b003      	add	sp, #12
   b4c60:	f85d fb04 	ldr.w	pc, [sp], #4
   b4c64:	0000      	movs	r0, r0
	...

000b4c68 <_Z10siRotativoi>:

bool siRotativo(int puerto)
{
    float voltage;
    int sensor_value;
    switch (puerto)
   b4c68:	2802      	cmp	r0, #2
{
   b4c6a:	b507      	push	{r0, r1, r2, lr}
    switch (puerto)
   b4c6c:	d030      	beq.n	b4cd0 <_Z10siRotativoi+0x68>
   b4c6e:	2804      	cmp	r0, #4
   b4c70:	d030      	beq.n	b4cd4 <_Z10siRotativoi+0x6c>
   b4c72:	b918      	cbnz	r0, b4c7c <_Z10siRotativoi+0x14>
    {
    case 0:
        sensor_value = analogRead(A0);
   b4c74:	2013      	movs	r0, #19
        break;
    case 2:
        sensor_value = analogRead(A2);
        break;
    case 4:
        sensor_value = analogRead(A4);
   b4c76:	f006 fe3a 	bl	bb8ee <analogRead>
   b4c7a:	9001      	str	r0, [sp, #4]
        break;
    }

    voltage = (float)sensor_value * 3.3 / 1023;
   b4c7c:	eddd 7a01 	vldr	s15, [sp, #4]
   b4c80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b4c84:	ee17 0a90 	vmov	r0, s15
   b4c88:	f7ff fb2e 	bl	b42e8 <__aeabi_f2d>
   b4c8c:	a314      	add	r3, pc, #80	; (adr r3, b4ce0 <_Z10siRotativoi+0x78>)
   b4c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4c92:	f7ff fb81 	bl	b4398 <__aeabi_dmul>
   b4c96:	a314      	add	r3, pc, #80	; (adr r3, b4ce8 <_Z10siRotativoi+0x80>)
   b4c98:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4c9c:	f7ff fca6 	bl	b45ec <__aeabi_ddiv>
   b4ca0:	f7ff fe3c 	bl	b491c <__aeabi_d2f>
    float degrees = (voltage * 300) / 5;
   b4ca4:	eddf 7a0c 	vldr	s15, [pc, #48]	; b4cd8 <_Z10siRotativoi+0x70>
   b4ca8:	ee07 0a10 	vmov	s14, r0
   b4cac:	ee67 7a27 	vmul.f32	s15, s14, s15
   b4cb0:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
   b4cb4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
    if (degrees <= 360)
   b4cb8:	eddf 7a08 	vldr	s15, [pc, #32]	; b4cdc <_Z10siRotativoi+0x74>
   b4cbc:	eeb4 7ae7 	vcmpe.f32	s14, s15
   b4cc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        return true;
    return false;
}
   b4cc4:	bf94      	ite	ls
   b4cc6:	2001      	movls	r0, #1
   b4cc8:	2000      	movhi	r0, #0
   b4cca:	b003      	add	sp, #12
   b4ccc:	f85d fb04 	ldr.w	pc, [sp], #4
        sensor_value = analogRead(A2);
   b4cd0:	2011      	movs	r0, #17
   b4cd2:	e7d0      	b.n	b4c76 <_Z10siRotativoi+0xe>
        sensor_value = analogRead(A4);
   b4cd4:	200f      	movs	r0, #15
   b4cd6:	e7ce      	b.n	b4c76 <_Z10siRotativoi+0xe>
   b4cd8:	43960000 	.word	0x43960000
   b4cdc:	43b40000 	.word	0x43b40000
   b4ce0:	66666666 	.word	0x66666666
   b4ce4:	400a6666 	.word	0x400a6666
   b4ce8:	00000000 	.word	0x00000000
   b4cec:	408ff800 	.word	0x408ff800

000b4cf0 <_Z10noRotativoi>:

bool noRotativo(int puerto)
{
    float voltage;
    int sensor_value;
    switch (puerto)
   b4cf0:	2802      	cmp	r0, #2
{
   b4cf2:	b507      	push	{r0, r1, r2, lr}
    switch (puerto)
   b4cf4:	d030      	beq.n	b4d58 <_Z10noRotativoi+0x68>
   b4cf6:	2804      	cmp	r0, #4
   b4cf8:	d030      	beq.n	b4d5c <_Z10noRotativoi+0x6c>
   b4cfa:	b918      	cbnz	r0, b4d04 <_Z10noRotativoi+0x14>
    {
    case 0:
        sensor_value = analogRead(A0);
   b4cfc:	2013      	movs	r0, #19
        break;
    case 2:
        sensor_value = analogRead(A2);
        break;
    case 4:
        sensor_value = analogRead(A4);
   b4cfe:	f006 fdf6 	bl	bb8ee <analogRead>
   b4d02:	9001      	str	r0, [sp, #4]
        break;
    }

    voltage = (float)sensor_value * 3.3 / 1023;
   b4d04:	eddd 7a01 	vldr	s15, [sp, #4]
   b4d08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b4d0c:	ee17 0a90 	vmov	r0, s15
   b4d10:	f7ff faea 	bl	b42e8 <__aeabi_f2d>
   b4d14:	a314      	add	r3, pc, #80	; (adr r3, b4d68 <_Z10noRotativoi+0x78>)
   b4d16:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4d1a:	f7ff fb3d 	bl	b4398 <__aeabi_dmul>
   b4d1e:	a314      	add	r3, pc, #80	; (adr r3, b4d70 <_Z10noRotativoi+0x80>)
   b4d20:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4d24:	f7ff fc62 	bl	b45ec <__aeabi_ddiv>
   b4d28:	f7ff fdf8 	bl	b491c <__aeabi_d2f>
    float degrees = (voltage * 300) / 5;
   b4d2c:	eddf 7a0c 	vldr	s15, [pc, #48]	; b4d60 <_Z10noRotativoi+0x70>
   b4d30:	ee07 0a10 	vmov	s14, r0
   b4d34:	ee67 7a27 	vmul.f32	s15, s14, s15
   b4d38:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
   b4d3c:	ee87 7aa6 	vdiv.f32	s14, s15, s13

    if (degrees >= 360)
   b4d40:	eddf 7a08 	vldr	s15, [pc, #32]	; b4d64 <_Z10noRotativoi+0x74>
   b4d44:	eeb4 7ae7 	vcmpe.f32	s14, s15
   b4d48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        return true;
    return false;
}
   b4d4c:	bfac      	ite	ge
   b4d4e:	2001      	movge	r0, #1
   b4d50:	2000      	movlt	r0, #0
   b4d52:	b003      	add	sp, #12
   b4d54:	f85d fb04 	ldr.w	pc, [sp], #4
        sensor_value = analogRead(A2);
   b4d58:	2011      	movs	r0, #17
   b4d5a:	e7d0      	b.n	b4cfe <_Z10noRotativoi+0xe>
        sensor_value = analogRead(A4);
   b4d5c:	200f      	movs	r0, #15
   b4d5e:	e7ce      	b.n	b4cfe <_Z10noRotativoi+0xe>
   b4d60:	43960000 	.word	0x43960000
   b4d64:	43b40000 	.word	0x43b40000
   b4d68:	66666666 	.word	0x66666666
   b4d6c:	400a6666 	.word	0x400a6666
   b4d70:	00000000 	.word	0x00000000
   b4d74:	408ff800 	.word	0x408ff800

000b4d78 <_Z10BotonDualAi>:

bool BotonDualA(int puerto)
{
   b4d78:	b538      	push	{r3, r4, r5, lr}
    pinMode(puerto, INPUT);
   b4d7a:	b284      	uxth	r4, r0
    pinMode(puerto+1, INPUT);
   b4d7c:	1c65      	adds	r5, r4, #1
    pinMode(puerto, INPUT);
   b4d7e:	2100      	movs	r1, #0
   b4d80:	4620      	mov	r0, r4
    pinMode(puerto+1, INPUT);
   b4d82:	b2ad      	uxth	r5, r5
    pinMode(puerto, INPUT);
   b4d84:	f006 fd76 	bl	bb874 <pinMode>
    pinMode(puerto+1, INPUT);
   b4d88:	4628      	mov	r0, r5
   b4d8a:	2100      	movs	r1, #0
   b4d8c:	f006 fd72 	bl	bb874 <pinMode>
    if (digitalRead(puerto) == LOW && digitalRead(puerto+1) == HIGH)
   b4d90:	4620      	mov	r0, r4
   b4d92:	f006 fd99 	bl	bb8c8 <digitalRead>
   b4d96:	b930      	cbnz	r0, b4da6 <_Z10BotonDualAi+0x2e>
   b4d98:	4628      	mov	r0, r5
   b4d9a:	f006 fd95 	bl	bb8c8 <digitalRead>
   b4d9e:	1e43      	subs	r3, r0, #1
   b4da0:	4258      	negs	r0, r3
   b4da2:	4158      	adcs	r0, r3
        return true;
    return false;
}
   b4da4:	bd38      	pop	{r3, r4, r5, pc}
    return false;
   b4da6:	2000      	movs	r0, #0
   b4da8:	e7fc      	b.n	b4da4 <_Z10BotonDualAi+0x2c>

000b4daa <_Z10BotonDualBi>:

bool BotonDualB(int puerto)
{
   b4daa:	b538      	push	{r3, r4, r5, lr}
    pinMode(puerto+1, INPUT);
   b4dac:	b284      	uxth	r4, r0
   b4dae:	1c65      	adds	r5, r4, #1
   b4db0:	b2ad      	uxth	r5, r5
   b4db2:	2100      	movs	r1, #0
   b4db4:	4628      	mov	r0, r5
   b4db6:	f006 fd5d 	bl	bb874 <pinMode>
    pinMode(puerto, INPUT);
   b4dba:	4620      	mov	r0, r4
   b4dbc:	2100      	movs	r1, #0
   b4dbe:	f006 fd59 	bl	bb874 <pinMode>
    if (digitalRead(puerto+1) == LOW && digitalRead(puerto) == HIGH)
   b4dc2:	4628      	mov	r0, r5
   b4dc4:	f006 fd80 	bl	bb8c8 <digitalRead>
   b4dc8:	b930      	cbnz	r0, b4dd8 <_Z10BotonDualBi+0x2e>
   b4dca:	4620      	mov	r0, r4
   b4dcc:	f006 fd7c 	bl	bb8c8 <digitalRead>
   b4dd0:	1e43      	subs	r3, r0, #1
   b4dd2:	4258      	negs	r0, r3
   b4dd4:	4158      	adcs	r0, r3
        return true;
    return false;
}
   b4dd6:	bd38      	pop	{r3, r4, r5, pc}
    return false;
   b4dd8:	2000      	movs	r0, #0
   b4dda:	e7fc      	b.n	b4dd6 <_Z10BotonDualBi+0x2c>

000b4ddc <_Z10BotonDual2i>:

bool BotonDual2(int puerto)
{
   b4ddc:	b538      	push	{r3, r4, r5, lr}
    pinMode(puerto, INPUT);
   b4dde:	b284      	uxth	r4, r0
    pinMode(puerto+1, INPUT);
   b4de0:	1c65      	adds	r5, r4, #1
    pinMode(puerto, INPUT);
   b4de2:	2100      	movs	r1, #0
   b4de4:	4620      	mov	r0, r4
    pinMode(puerto+1, INPUT);
   b4de6:	b2ad      	uxth	r5, r5
    pinMode(puerto, INPUT);
   b4de8:	f006 fd44 	bl	bb874 <pinMode>
    pinMode(puerto+1, INPUT);
   b4dec:	4628      	mov	r0, r5
   b4dee:	2100      	movs	r1, #0
   b4df0:	f006 fd40 	bl	bb874 <pinMode>
    if (digitalRead(puerto) == LOW && digitalRead(puerto+1) == LOW)
   b4df4:	4620      	mov	r0, r4
   b4df6:	f006 fd67 	bl	bb8c8 <digitalRead>
   b4dfa:	b930      	cbnz	r0, b4e0a <_Z10BotonDual2i+0x2e>
   b4dfc:	4628      	mov	r0, r5
   b4dfe:	f006 fd63 	bl	bb8c8 <digitalRead>
   b4e02:	fab0 f080 	clz	r0, r0
   b4e06:	0940      	lsrs	r0, r0, #5
        return true;
    return false;
}
   b4e08:	bd38      	pop	{r3, r4, r5, pc}
    return false;
   b4e0a:	2000      	movs	r0, #0
   b4e0c:	e7fc      	b.n	b4e08 <_Z10BotonDual2i+0x2c>

000b4e0e <_Z11noBotonDuali>:

bool noBotonDual(int puerto)
{
   b4e0e:	b538      	push	{r3, r4, r5, lr}
    pinMode(puerto, INPUT);
   b4e10:	b284      	uxth	r4, r0
    pinMode(puerto+1, INPUT);
   b4e12:	1c65      	adds	r5, r4, #1
    pinMode(puerto, INPUT);
   b4e14:	2100      	movs	r1, #0
   b4e16:	4620      	mov	r0, r4
    pinMode(puerto+1, INPUT);
   b4e18:	b2ad      	uxth	r5, r5
    pinMode(puerto, INPUT);
   b4e1a:	f006 fd2b 	bl	bb874 <pinMode>
    pinMode(puerto+1, INPUT);
   b4e1e:	2100      	movs	r1, #0
   b4e20:	4628      	mov	r0, r5
   b4e22:	f006 fd27 	bl	bb874 <pinMode>
    if (digitalRead(puerto) == HIGH && digitalRead(puerto+1) == HIGH)
   b4e26:	4620      	mov	r0, r4
   b4e28:	f006 fd4e 	bl	bb8c8 <digitalRead>
   b4e2c:	2801      	cmp	r0, #1
   b4e2e:	d106      	bne.n	b4e3e <_Z11noBotonDuali+0x30>
   b4e30:	4628      	mov	r0, r5
   b4e32:	f006 fd49 	bl	bb8c8 <digitalRead>
   b4e36:	1e43      	subs	r3, r0, #1
   b4e38:	4258      	negs	r0, r3
   b4e3a:	4158      	adcs	r0, r3
        return true;
    return false;
}
   b4e3c:	bd38      	pop	{r3, r4, r5, pc}
    return false;
   b4e3e:	2000      	movs	r0, #0
   b4e40:	e7fc      	b.n	b4e3c <_Z11noBotonDuali+0x2e>

000b4e42 <_Z4Cafei>:


bool Cafe(int puerto)
{
    int sensor_value;
    switch (puerto)
   b4e42:	2802      	cmp	r0, #2
{
   b4e44:	b538      	push	{r3, r4, r5, lr}
    switch (puerto)
   b4e46:	d01c      	beq.n	b4e82 <_Z4Cafei+0x40>
   b4e48:	2804      	cmp	r0, #4
   b4e4a:	d01c      	beq.n	b4e86 <_Z4Cafei+0x44>
   b4e4c:	b918      	cbnz	r0, b4e56 <_Z4Cafei+0x14>
    {
    case 0:
        sensor_value = analogRead(A0);
   b4e4e:	2013      	movs	r0, #19
        break;
    case 2:
        sensor_value = analogRead(A2);
        break;
    case 4:
        sensor_value = analogRead(A4);
   b4e50:	f006 fd4d 	bl	bb8ee <analogRead>
   b4e54:	4604      	mov	r4, r0
        break;
    }
    Serial.println(sensor_value);
   b4e56:	f006 fad7 	bl	bb408 <_Z16_fetch_usbserialv>
        if (n < 0 && base == 10) {
   b4e5a:	2c00      	cmp	r4, #0
   b4e5c:	4605      	mov	r5, r0
   b4e5e:	da14      	bge.n	b4e8a <_Z4Cafei+0x48>
            t = print('-');
   b4e60:	212d      	movs	r1, #45	; 0x2d
   b4e62:	f006 f873 	bl	baf4c <_ZN5Print5printEc>
            val = -n;
   b4e66:	4261      	negs	r1, r4
        return printNumber(val, base) + t;
   b4e68:	220a      	movs	r2, #10
   b4e6a:	4628      	mov	r0, r5
   b4e6c:	f006 f887 	bl	baf7e <_ZN5Print11printNumberEmh>
        n += println();
   b4e70:	4628      	mov	r0, r5
   b4e72:	f006 f86e 	bl	baf52 <_ZN5Print7printlnEv>
    if (sensor_value < 2000)
        return true;
    return false;
}
   b4e76:	f5b4 6ffa 	cmp.w	r4, #2000	; 0x7d0
   b4e7a:	bfac      	ite	ge
   b4e7c:	2000      	movge	r0, #0
   b4e7e:	2001      	movlt	r0, #1
   b4e80:	bd38      	pop	{r3, r4, r5, pc}
        sensor_value = analogRead(A2);
   b4e82:	2011      	movs	r0, #17
   b4e84:	e7e4      	b.n	b4e50 <_Z4Cafei+0xe>
        sensor_value = analogRead(A4);
   b4e86:	200f      	movs	r0, #15
   b4e88:	e7e2      	b.n	b4e50 <_Z4Cafei+0xe>
            val = n;
   b4e8a:	4621      	mov	r1, r4
   b4e8c:	e7ec      	b.n	b4e68 <_Z4Cafei+0x26>

000b4e8e <_Z9AguaClarai>:

bool AguaClara(int puerto)
{
    int sensor_value;
    switch (puerto)
   b4e8e:	2802      	cmp	r0, #2
{
   b4e90:	b508      	push	{r3, lr}
    switch (puerto)
   b4e92:	d00d      	beq.n	b4eb0 <_Z9AguaClarai+0x22>
   b4e94:	2804      	cmp	r0, #4
   b4e96:	d00d      	beq.n	b4eb4 <_Z9AguaClarai+0x26>
   b4e98:	b918      	cbnz	r0, b4ea2 <_Z9AguaClarai+0x14>
    {
    case 0:
        sensor_value = analogRead(A0);
   b4e9a:	2013      	movs	r0, #19
        break;
    case 2:
        sensor_value = analogRead(A2);
        break;
    case 4:
        sensor_value = analogRead(A4);
   b4e9c:	f006 fd27 	bl	bb8ee <analogRead>
   b4ea0:	4603      	mov	r3, r0
        break;
    }
    if (sensor_value > 2500)
        return true;
    return false;
}
   b4ea2:	f640 10c4 	movw	r0, #2500	; 0x9c4
   b4ea6:	4283      	cmp	r3, r0
   b4ea8:	bfd4      	ite	le
   b4eaa:	2000      	movle	r0, #0
   b4eac:	2001      	movgt	r0, #1
   b4eae:	bd08      	pop	{r3, pc}
        sensor_value = analogRead(A2);
   b4eb0:	2011      	movs	r0, #17
   b4eb2:	e7f3      	b.n	b4e9c <_Z9AguaClarai+0xe>
        sensor_value = analogRead(A4);
   b4eb4:	200f      	movs	r0, #15
   b4eb6:	e7f1      	b.n	b4e9c <_Z9AguaClarai+0xe>

000b4eb8 <_Z8tempFrioi>:

bool tempFrio(int puerto)
{
   b4eb8:	b530      	push	{r4, r5, lr}
   b4eba:	ed2d 8b02 	vpush	{d8}
   b4ebe:	b087      	sub	sp, #28
    DHT dht(puerto, DHT11);
   b4ec0:	b2c1      	uxtb	r1, r0
   b4ec2:	2306      	movs	r3, #6
   b4ec4:	220b      	movs	r2, #11
   b4ec6:	a801      	add	r0, sp, #4
   b4ec8:	f004 fd26 	bl	b9918 <_ZN3DHTC1Ehhh>
    dht.begin();
   b4ecc:	a801      	add	r0, sp, #4
   b4ece:	f004 fd2a 	bl	b9926 <_ZN3DHT5beginEv>
    float t = dht.getTempCelcius();
   b4ed2:	a801      	add	r0, sp, #4
   b4ed4:	f004 fde4 	bl	b9aa0 <_ZN3DHT14getTempCelciusEv>

    // The fast read may cause an invalid value like 0.0000 or NuLL. Repeat until valid value.
    while (isnan(t) | t == 0.0)
   b4ed8:	eeb5 0a40 	vcmp.f32	s0, #0.0
   b4edc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr bool
  isnan(float __x)
  { return __builtin_isnan(__x); }
   b4ee0:	eeb4 0a40 	vcmp.f32	s0, s0
   b4ee4:	bf0c      	ite	eq
   b4ee6:	2401      	moveq	r4, #1
   b4ee8:	2400      	movne	r4, #0
   b4eea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4eee:	bf68      	it	vs
   b4ef0:	f044 0401 	orrvs.w	r4, r4, #1
    float t = dht.getTempCelcius();
   b4ef4:	eeb0 8a40 	vmov.f32	s16, s0
    while (isnan(t) | t == 0.0)
   b4ef8:	2c00      	cmp	r4, #0
   b4efa:	d1ea      	bne.n	b4ed2 <_Z8tempFrioi+0x1a>
    {
        t = dht.getTempCelcius();
    }

    Serial.printlnf("Temp: %f", t);
   b4efc:	f006 fa84 	bl	bb408 <_Z16_fetch_usbserialv>
   b4f00:	4605      	mov	r5, r0
   b4f02:	ee18 0a10 	vmov	r0, s16
   b4f06:	f7ff f9ef 	bl	b42e8 <__aeabi_f2d>
   b4f0a:	4602      	mov	r2, r0
   b4f0c:	460b      	mov	r3, r1
   b4f0e:	4628      	mov	r0, r5
   b4f10:	490a      	ldr	r1, [pc, #40]	; (b4f3c <_Z8tempFrioi+0x84>)
   b4f12:	f7ff fdf7 	bl	b4b04 <_ZN5Print8printlnfEPKcz>
    if (t > 0.0 && t < 8)
   b4f16:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
   b4f1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4f1e:	dd08      	ble.n	b4f32 <_Z8tempFrioi+0x7a>
   b4f20:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
   b4f24:	eeb4 8ae7 	vcmpe.f32	s16, s15
   b4f28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4f2c:	bf4c      	ite	mi
   b4f2e:	2401      	movmi	r4, #1
   b4f30:	2400      	movpl	r4, #0
        return true;
    else
        return false;
}
   b4f32:	4620      	mov	r0, r4
   b4f34:	b007      	add	sp, #28
   b4f36:	ecbd 8b02 	vpop	{d8}
   b4f3a:	bd30      	pop	{r4, r5, pc}
   b4f3c:	000bbd09 	.word	0x000bbd09

000b4f40 <_Z12tempTempladoi>:

bool tempTemplado(int puerto)
{
   b4f40:	b510      	push	{r4, lr}
   b4f42:	ed2d 8b02 	vpush	{d8}
   b4f46:	b086      	sub	sp, #24
    DHT dht(puerto, DHT11);
   b4f48:	b2c1      	uxtb	r1, r0
   b4f4a:	2306      	movs	r3, #6
   b4f4c:	220b      	movs	r2, #11
   b4f4e:	a801      	add	r0, sp, #4
   b4f50:	f004 fce2 	bl	b9918 <_ZN3DHTC1Ehhh>
    dht.begin();
   b4f54:	a801      	add	r0, sp, #4
   b4f56:	f004 fce6 	bl	b9926 <_ZN3DHT5beginEv>
    float t = dht.getTempCelcius();
   b4f5a:	a801      	add	r0, sp, #4
   b4f5c:	f004 fda0 	bl	b9aa0 <_ZN3DHT14getTempCelciusEv>

    // The fast read may cause an invalid value like 0.0000 or NuLL. Repeat until valid value.
    while (isnan(t) || (t == 0.0))
   b4f60:	eeb4 0a40 	vcmp.f32	s0, s0
   b4f64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    float t = dht.getTempCelcius();
   b4f68:	eeb0 8a40 	vmov.f32	s16, s0
    while (isnan(t) || (t == 0.0))
   b4f6c:	d6f5      	bvs.n	b4f5a <_Z12tempTempladoi+0x1a>
   b4f6e:	eeb5 0a40 	vcmp.f32	s0, #0.0
   b4f72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4f76:	d0f0      	beq.n	b4f5a <_Z12tempTempladoi+0x1a>
    {
        t = dht.getTempCelcius();
    }

    Serial.printlnf("Temp: %f", t);
   b4f78:	f006 fa46 	bl	bb408 <_Z16_fetch_usbserialv>
   b4f7c:	4604      	mov	r4, r0
   b4f7e:	ee18 0a10 	vmov	r0, s16
   b4f82:	f7ff f9b1 	bl	b42e8 <__aeabi_f2d>
   b4f86:	4602      	mov	r2, r0
   b4f88:	460b      	mov	r3, r1
   b4f8a:	4620      	mov	r0, r4
   b4f8c:	490c      	ldr	r1, [pc, #48]	; (b4fc0 <_Z12tempTempladoi+0x80>)
   b4f8e:	f7ff fdb9 	bl	b4b04 <_ZN5Print8printlnfEPKcz>
    if (t > 7 && t < 26)
   b4f92:	eef1 7a0c 	vmov.f32	s15, #28	; 0x40e00000  7.0
   b4f96:	eeb4 8ae7 	vcmpe.f32	s16, s15
   b4f9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4f9e:	dc04      	bgt.n	b4faa <_Z12tempTempladoi+0x6a>
        return true;
    else
        return false;
   b4fa0:	2000      	movs	r0, #0
}
   b4fa2:	b006      	add	sp, #24
   b4fa4:	ecbd 8b02 	vpop	{d8}
   b4fa8:	bd10      	pop	{r4, pc}
    if (t > 7 && t < 26)
   b4faa:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
   b4fae:	eeb4 8ae7 	vcmpe.f32	s16, s15
   b4fb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4fb6:	bf4c      	ite	mi
   b4fb8:	2001      	movmi	r0, #1
   b4fba:	2000      	movpl	r0, #0
   b4fbc:	e7f1      	b.n	b4fa2 <_Z12tempTempladoi+0x62>
   b4fbe:	bf00      	nop
   b4fc0:	000bbd09 	.word	0x000bbd09

000b4fc4 <_Z9tempCalori>:

bool tempCalor(int puerto)
{
   b4fc4:	b530      	push	{r4, r5, lr}
   b4fc6:	ed2d 8b02 	vpush	{d8}
   b4fca:	b087      	sub	sp, #28
    DHT dht(puerto, DHT11);
   b4fcc:	b2c1      	uxtb	r1, r0
   b4fce:	2306      	movs	r3, #6
   b4fd0:	220b      	movs	r2, #11
   b4fd2:	a801      	add	r0, sp, #4
   b4fd4:	f004 fca0 	bl	b9918 <_ZN3DHTC1Ehhh>
    dht.begin();
   b4fd8:	a801      	add	r0, sp, #4
   b4fda:	f004 fca4 	bl	b9926 <_ZN3DHT5beginEv>
    float t = dht.getTempCelcius();
   b4fde:	a801      	add	r0, sp, #4
   b4fe0:	f004 fd5e 	bl	b9aa0 <_ZN3DHT14getTempCelciusEv>

    // The fast read may cause an invalid value like 0.0000 or NuLL. Repeat until valid value.
    while (isnan(t) | t == 0.0)
   b4fe4:	eeb5 0a40 	vcmp.f32	s0, #0.0
   b4fe8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4fec:	eeb4 0a40 	vcmp.f32	s0, s0
   b4ff0:	bf0c      	ite	eq
   b4ff2:	2401      	moveq	r4, #1
   b4ff4:	2400      	movne	r4, #0
   b4ff6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4ffa:	bf68      	it	vs
   b4ffc:	f044 0401 	orrvs.w	r4, r4, #1
    float t = dht.getTempCelcius();
   b5000:	eeb0 8a40 	vmov.f32	s16, s0
    while (isnan(t) | t == 0.0)
   b5004:	2c00      	cmp	r4, #0
   b5006:	d1ea      	bne.n	b4fde <_Z9tempCalori+0x1a>
    {
        t = dht.getTempCelcius();
    }

    Serial.printlnf("Temp: %f", t);
   b5008:	f006 f9fe 	bl	bb408 <_Z16_fetch_usbserialv>
   b500c:	4605      	mov	r5, r0
   b500e:	ee18 0a10 	vmov	r0, s16
   b5012:	f7ff f969 	bl	b42e8 <__aeabi_f2d>
   b5016:	4602      	mov	r2, r0
   b5018:	460b      	mov	r3, r1
   b501a:	4628      	mov	r0, r5
   b501c:	490b      	ldr	r1, [pc, #44]	; (b504c <_Z9tempCalori+0x88>)
   b501e:	f7ff fd71 	bl	b4b04 <_ZN5Print8printlnfEPKcz>
    if (t > 25 && t < 50)
   b5022:	eef3 7a09 	vmov.f32	s15, #57	; 0x41c80000  25.0
   b5026:	eeb4 8ae7 	vcmpe.f32	s16, s15
   b502a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b502e:	dd08      	ble.n	b5042 <_Z9tempCalori+0x7e>
   b5030:	eddf 7a07 	vldr	s15, [pc, #28]	; b5050 <_Z9tempCalori+0x8c>
   b5034:	eeb4 8ae7 	vcmpe.f32	s16, s15
   b5038:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b503c:	bf4c      	ite	mi
   b503e:	2401      	movmi	r4, #1
   b5040:	2400      	movpl	r4, #0
        return true;
    else
        return false;
}
   b5042:	4620      	mov	r0, r4
   b5044:	b007      	add	sp, #28
   b5046:	ecbd 8b02 	vpop	{d8}
   b504a:	bd30      	pop	{r4, r5, pc}
   b504c:	000bbd09 	.word	0x000bbd09
   b5050:	42480000 	.word	0x42480000

000b5054 <_Z12DistanciaExpi>:
//---------------------------------------------------------------------------------------------------
//------------------------------------- M O D O   3 -------------------------------------------------
//---------------------------------------------------------------------------------------------------

int DistanciaExp(int puerto)
{
   b5054:	b507      	push	{r0, r1, r2, lr}
   b5056:	4601      	mov	r1, r0
    Ultrasonic ultrasonic(puerto);
   b5058:	a801      	add	r0, sp, #4
   b505a:	f004 fc37 	bl	b98cc <_ZN10UltrasonicC1Ei>
    int range = ultrasonic.MeasureInCentimeters();
   b505e:	a801      	add	r0, sp, #4
   b5060:	f004 fc36 	bl	b98d0 <_ZN10Ultrasonic20MeasureInCentimetersEv>
    // Serial.printlnf("Distancia: %d", range);
    return range;
}
   b5064:	b003      	add	sp, #12
   b5066:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b506c <_Z9AnguloExpv>:

int AnguloExp()
{
   b506c:	b510      	push	{r4, lr}
   b506e:	ed2d 8b04 	vpush	{d8-d9}
   float voltage;
    int sensor_value;
    for (int i = 0; i < 50; i++){
        sensor_value = analogRead(rotoryAngle_PIN);
        voltage += (float)sensor_value * 5 / 1023;
   b5072:	ed9f 9a1b 	vldr	s18, [pc, #108]	; b50e0 <_Z9AnguloExpv+0x74>
{
   b5076:	2432      	movs	r4, #50	; 0x32
        voltage += (float)sensor_value * 5 / 1023;
   b5078:	eeb1 8a04 	vmov.f32	s16, #20	; 0x40a00000  5.0
        sensor_value = analogRead(rotoryAngle_PIN);
   b507c:	2013      	movs	r0, #19
   b507e:	f006 fc36 	bl	bb8ee <analogRead>
        voltage += (float)sensor_value * 5 / 1023;
   b5082:	ee07 0a90 	vmov	s15, r0
   b5086:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    for (int i = 0; i < 50; i++){
   b508a:	3c01      	subs	r4, #1
        voltage += (float)sensor_value * 5 / 1023;
   b508c:	ee67 7a88 	vmul.f32	s15, s15, s16
   b5090:	ee87 7a89 	vdiv.f32	s14, s15, s18
   b5094:	ee78 8a87 	vadd.f32	s17, s17, s14
    for (int i = 0; i < 50; i++){
   b5098:	d1f0      	bne.n	b507c <_Z9AnguloExpv+0x10>
    }
    voltage = voltage/50;
   b509a:	ed9f 7a12 	vldr	s14, [pc, #72]	; b50e4 <_Z9AnguloExpv+0x78>
   float degrees = (voltage * 300) / 5;
   degrees = degrees * 270 / 1200;
   b509e:	ed9f 6a12 	vldr	s12, [pc, #72]	; b50e8 <_Z9AnguloExpv+0x7c>
    voltage = voltage/50;
   b50a2:	eec8 7a87 	vdiv.f32	s15, s17, s14
   float degrees = (voltage * 300) / 5;
   b50a6:	ed9f 7a11 	vldr	s14, [pc, #68]	; b50ec <_Z9AnguloExpv+0x80>
   b50aa:	ee67 7a87 	vmul.f32	s15, s15, s14
   b50ae:	ee87 7a88 	vdiv.f32	s14, s15, s16
   degrees = 270 - degrees;
   if (degrees < 0)
    degrees = 0;

   return (int) degrees;
}
   b50b2:	ecbd 8b04 	vpop	{d8-d9}
   degrees = degrees * 270 / 1200;
   b50b6:	eddf 7a0e 	vldr	s15, [pc, #56]	; b50f0 <_Z9AnguloExpv+0x84>
   b50ba:	ee27 7a27 	vmul.f32	s14, s14, s15
   b50be:	eec7 6a06 	vdiv.f32	s13, s14, s12
   degrees = 270 - degrees;
   b50c2:	ee77 7ae6 	vsub.f32	s15, s15, s13
   if (degrees < 0)
   b50c6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   b50ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    degrees = 0;
   b50ce:	bf48      	it	mi
   b50d0:	eddf 7a08 	vldrmi	s15, [pc, #32]	; b50f4 <_Z9AnguloExpv+0x88>
}
   b50d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   b50d8:	ee17 0a90 	vmov	r0, s15
   b50dc:	bd10      	pop	{r4, pc}
   b50de:	bf00      	nop
   b50e0:	447fc000 	.word	0x447fc000
   b50e4:	42480000 	.word	0x42480000
   b50e8:	44960000 	.word	0x44960000
   b50ec:	43960000 	.word	0x43960000
   b50f0:	43870000 	.word	0x43870000
   b50f4:	00000000 	.word	0x00000000

000b50f8 <_Z6LuzExpv>:

int LuzExp()
{
   b50f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b50fa:	2432      	movs	r4, #50	; 0x32
    int value = 0;
   b50fc:	2500      	movs	r5, #0
    for (int i = 0; i < 50; i++){
        value += analogRead(sensorLuz_PIN);
   b50fe:	2013      	movs	r0, #19
   b5100:	f006 fbf5 	bl	bb8ee <analogRead>
    for (int i = 0; i < 50; i++){
   b5104:	3c01      	subs	r4, #1
        value += analogRead(sensorLuz_PIN);
   b5106:	4405      	add	r5, r0
    for (int i = 0; i < 50; i++){
   b5108:	d1f9      	bne.n	b50fe <_Z6LuzExpv+0x6>
    }
    value = value/50;
    value = map(value, 0, 4095, 0, 100);
   b510a:	2364      	movs	r3, #100	; 0x64
   b510c:	9300      	str	r3, [sp, #0]
   b510e:	f640 72ff 	movw	r2, #4095	; 0xfff
   b5112:	4623      	mov	r3, r4
   b5114:	4621      	mov	r1, r4
   b5116:	2032      	movs	r0, #50	; 0x32
   b5118:	fb95 f0f0 	sdiv	r0, r5, r0
   b511c:	f005 ff90 	bl	bb040 <_Z3mapiiiii>
    return value;
   
}
   b5120:	b003      	add	sp, #12
   b5122:	bd30      	pop	{r4, r5, pc}
   b5124:	0000      	movs	r0, r0
	...

000b5128 <_Z15SensorSonidoExpv>:

int SensorSonidoExp()
{
   b5128:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b512c:	f005 fa64 	bl	ba5f8 <HAL_Timer_Get_Milli_Seconds>
    unsigned int sample;
    unsigned long startMillis= millis();                   // Start of sample window
    double peakToPeak = 0;                                 // peak-to-peak level
    
    unsigned int signalMax = 0;                            //minimum value
    unsigned int signalMin = 1024;                         //maximum value
   b5130:	f44f 6580 	mov.w	r5, #1024	; 0x400
   b5134:	4607      	mov	r7, r0
    unsigned int signalMax = 0;                            //minimum value
   b5136:	2600      	movs	r6, #0
   b5138:	f005 fa5e 	bl	ba5f8 <HAL_Timer_Get_Milli_Seconds>
    
                                                            // collect data for 50 mS
    while (millis() - startMillis < sampleWindow)
   b513c:	1bc0      	subs	r0, r0, r7
   b513e:	2831      	cmp	r0, #49	; 0x31
   b5140:	d818      	bhi.n	b5174 <_Z15SensorSonidoExpv+0x4c>
    {
        sample = analogRead(sensorSonido_PIN);              //get reading from microphone
   b5142:	2013      	movs	r0, #19
   b5144:	f006 fbd3 	bl	bb8ee <analogRead>
   b5148:	4604      	mov	r4, r0
        Serial.println(sample);
   b514a:	f006 f95d 	bl	bb408 <_Z16_fetch_usbserialv>
        return printNumber(val, base) + t;
   b514e:	220a      	movs	r2, #10
   b5150:	4680      	mov	r8, r0
   b5152:	4621      	mov	r1, r4
   b5154:	f005 ff13 	bl	baf7e <_ZN5Print11printNumberEmh>
        n += println();
   b5158:	4640      	mov	r0, r8
   b515a:	f005 fefa 	bl	baf52 <_ZN5Print7printlnEv>
        if (sample < 1024)                                  // toss out spurious readings
   b515e:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
   b5162:	d2e9      	bcs.n	b5138 <_Z15SensorSonidoExpv+0x10>
        {
            if (sample > signalMax)
   b5164:	42a6      	cmp	r6, r4
   b5166:	d303      	bcc.n	b5170 <_Z15SensorSonidoExpv+0x48>
            {
                signalMax = sample;                           // save just the max levels
            }
            else if (sample < signalMin)
   b5168:	42a5      	cmp	r5, r4
   b516a:	bf28      	it	cs
   b516c:	4625      	movcs	r5, r4
   b516e:	e7e3      	b.n	b5138 <_Z15SensorSonidoExpv+0x10>
   b5170:	4626      	mov	r6, r4
   b5172:	e7e1      	b.n	b5138 <_Z15SensorSonidoExpv+0x10>
                signalMin = sample;                           // save just the min levels
            }
        }
    }
        
    peakToPeak = signalMax - signalMin;                    // max - min = peak-peak amplitude
   b5174:	1b70      	subs	r0, r6, r5
   b5176:	f7ff f895 	bl	b42a4 <__aeabi_ui2d>
    int db = map(peakToPeak,20.0,900.0,49.5,90.0); 
   b517a:	ed9f 4b09 	vldr	d4, [pc, #36]	; b51a0 <_Z15SensorSonidoExpv+0x78>
   b517e:	ed9f 3b0a 	vldr	d3, [pc, #40]	; b51a8 <_Z15SensorSonidoExpv+0x80>
   b5182:	ed9f 2b0b 	vldr	d2, [pc, #44]	; b51b0 <_Z15SensorSonidoExpv+0x88>
   b5186:	ed9f 1b0c 	vldr	d1, [pc, #48]	; b51b8 <_Z15SensorSonidoExpv+0x90>
   b518a:	ec41 0b10 	vmov	d0, r0, r1
   b518e:	f005 ff63 	bl	bb058 <_Z3mapddddd>
   b5192:	ec51 0b10 	vmov	r0, r1, d0
   b5196:	f7ff fb99 	bl	b48cc <__aeabi_d2iz>
    return db;
    }
   b519a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b519e:	bf00      	nop
   b51a0:	00000000 	.word	0x00000000
   b51a4:	40568000 	.word	0x40568000
   b51a8:	00000000 	.word	0x00000000
   b51ac:	4048c000 	.word	0x4048c000
   b51b0:	00000000 	.word	0x00000000
   b51b4:	408c2000 	.word	0x408c2000
   b51b8:	00000000 	.word	0x00000000
   b51bc:	40340000 	.word	0x40340000

000b51c0 <_Z13SensorTempExpi>:

int SensorTempExp(int puerto)
{
   b51c0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    DHT dht(puerto, DHT11);
   b51c2:	b2c1      	uxtb	r1, r0
   b51c4:	2306      	movs	r3, #6
   b51c6:	220b      	movs	r2, #11
   b51c8:	a801      	add	r0, sp, #4
   b51ca:	f004 fba5 	bl	b9918 <_ZN3DHTC1Ehhh>
    dht.begin();
   b51ce:	a801      	add	r0, sp, #4
   b51d0:	f004 fba9 	bl	b9926 <_ZN3DHT5beginEv>
    float t = dht.getTempCelcius();
   b51d4:	a801      	add	r0, sp, #4
   b51d6:	f004 fc63 	bl	b9aa0 <_ZN3DHT14getTempCelciusEv>

    // The fast read may cause an invalid value like 0.0000 or NuLL. Repeat until valid value.
    while (isnan(t) | t == 0.0)
   b51da:	eeb5 0a40 	vcmp.f32	s0, #0.0
   b51de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b51e2:	d0f7      	beq.n	b51d4 <_Z13SensorTempExpi+0x14>
   b51e4:	eeb4 0a40 	vcmp.f32	s0, s0
   b51e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b51ec:	d6f2      	bvs.n	b51d4 <_Z13SensorTempExpi+0x14>
    }

    //t = ajusta_temp(t); 
    
    return t;
}
   b51ee:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   b51f2:	ee17 0a90 	vmov	r0, s15
   b51f6:	b007      	add	sp, #28
   b51f8:	f85d fb04 	ldr.w	pc, [sp], #4

000b51fc <_Z9TurbiaExpi>:

int TurbiaExp(int puerto)
{
    int sensor_value;
    switch (puerto)
   b51fc:	2802      	cmp	r0, #2
   b51fe:	d005      	beq.n	b520c <_Z9TurbiaExpi+0x10>
   b5200:	2804      	cmp	r0, #4
   b5202:	d005      	beq.n	b5210 <_Z9TurbiaExpi+0x14>
   b5204:	b930      	cbnz	r0, b5214 <_Z9TurbiaExpi+0x18>
    {
    case 0: 
        sensor_value = analogRead(A0);
   b5206:	2013      	movs	r0, #19
        break;
    case 2:
        sensor_value = analogRead(A2);
        break;
    case 4:
        sensor_value = analogRead(A4);
   b5208:	f006 bb71 	b.w	bb8ee <analogRead>
        sensor_value = analogRead(A2);
   b520c:	2011      	movs	r0, #17
   b520e:	e7fb      	b.n	b5208 <_Z9TurbiaExpi+0xc>
        sensor_value = analogRead(A4);
   b5210:	200f      	movs	r0, #15
   b5212:	e7f9      	b.n	b5208 <_Z9TurbiaExpi+0xc>
        break;
    }
    return sensor_value;
}
   b5214:	2000      	movs	r0, #0
   b5216:	4770      	bx	lr

000b5218 <_Z10leerSensoriii>:


bool leerSensor(int id, int condicion, int puerto)
{
   b5218:	b508      	push	{r3, lr}
   b521a:	4603      	mov	r3, r0
   b521c:	3b01      	subs	r3, #1
   b521e:	4610      	mov	r0, r2
   b5220:	2b0b      	cmp	r3, #11
   b5222:	d85f      	bhi.n	b52e4 <_Z10leerSensoriii+0xcc>
   b5224:	e8df f003 	tbb	[pc, r3]
   b5228:	1d140b06 	.word	0x1d140b06
   b522c:	40062b22 	.word	0x40062b22
   b5230:	5b575346 	.word	0x5b575346
    switch (id)
    {
    case 1:
        return (condicion == 0 ? noDistancia(puerto) : siDistancia(puerto));
   b5234:	bba1      	cbnz	r1, b52a0 <_Z10leerSensoriii+0x88>

    default:
        Serial.println("InvalidSensorError");
        return false;
    }
}
   b5236:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0 ? noDistancia(puerto) : siDistancia(puerto));
   b523a:	f7ff bc71 	b.w	b4b20 <_Z11noDistanciai>
        return (condicion == 0 ? noLuz(puerto) : siLuz(puerto));
   b523e:	b919      	cbnz	r1, b5248 <_Z10leerSensoriii+0x30>
}
   b5240:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0 ? noLuz(puerto) : siLuz(puerto));
   b5244:	f7ff bc9f 	b.w	b4b86 <_Z5noLuzi>
}
   b5248:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0 ? noLuz(puerto) : siLuz(puerto));
   b524c:	f7ff bc86 	b.w	b4b5c <_Z5siLuzi>
        return (condicion == 0 ? noRuido(puerto) : siRuido(puerto));
   b5250:	b919      	cbnz	r1, b525a <_Z10leerSensoriii+0x42>
}
   b5252:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0 ? noRuido(puerto) : siRuido(puerto));
   b5256:	f7ff bcdd 	b.w	b4c14 <_Z7noRuidoi>
}
   b525a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0 ? noRuido(puerto) : siRuido(puerto));
   b525e:	f7ff bca7 	b.w	b4bb0 <_Z7siRuidoi>
        return (condicion == 0 ? noBoton(puerto) : siBoton(puerto));
   b5262:	bb19      	cbnz	r1, b52ac <_Z10leerSensoriii+0x94>
}
   b5264:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0 ? noBoton(puerto) : siBoton(puerto));
   b5268:	f7ff bced 	b.w	b4c46 <_Z7noBotoni>
        return (condicion == 0 ? noRotativo(puerto) : siRotativo(puerto));
   b526c:	b919      	cbnz	r1, b5276 <_Z10leerSensoriii+0x5e>
}
   b526e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0 ? noRotativo(puerto) : siRotativo(puerto));
   b5272:	f7ff bd3d 	b.w	b4cf0 <_Z10noRotativoi>
}
   b5276:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0 ? noRotativo(puerto) : siRotativo(puerto));
   b527a:	f7ff bcf5 	b.w	b4c68 <_Z10siRotativoi>
        switch (condicion)
   b527e:	2901      	cmp	r1, #1
   b5280:	d006      	beq.n	b5290 <_Z10leerSensoriii+0x78>
   b5282:	2902      	cmp	r1, #2
   b5284:	d008      	beq.n	b5298 <_Z10leerSensoriii+0x80>
   b5286:	b959      	cbnz	r1, b52a0 <_Z10leerSensoriii+0x88>
}
   b5288:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            return tempFrio(puerto);
   b528c:	f7ff be14 	b.w	b4eb8 <_Z8tempFrioi>
}
   b5290:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            return tempTemplado(puerto);
   b5294:	f7ff be54 	b.w	b4f40 <_Z12tempTempladoi>
}
   b5298:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            return tempCalor(puerto);
   b529c:	f7ff be92 	b.w	b4fc4 <_Z9tempCalori>
}
   b52a0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0 ? noDistancia(puerto) : siDistancia(puerto));
   b52a4:	f7ff bc4b 	b.w	b4b3e <_Z11siDistanciai>
        return (condicion == 0 ? noAgua(puerto) : siAgua(puerto));
   b52a8:	2900      	cmp	r1, #0
   b52aa:	d1db      	bne.n	b5264 <_Z10leerSensoriii+0x4c>
}
   b52ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return (condicion == 0 ? noBoton(puerto) : siBoton(puerto));
   b52b0:	f7ff bcba 	b.w	b4c28 <_Z7siBotoni>
        switch (condicion)
   b52b4:	2901      	cmp	r1, #1
   b52b6:	d006      	beq.n	b52c6 <_Z10leerSensoriii+0xae>
   b52b8:	2903      	cmp	r1, #3
   b52ba:	d00c      	beq.n	b52d6 <_Z10leerSensoriii+0xbe>
   b52bc:	b939      	cbnz	r1, b52ce <_Z10leerSensoriii+0xb6>
}
   b52be:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            return noBotonDual(puerto);
   b52c2:	f7ff bda4 	b.w	b4e0e <_Z11noBotonDuali>
}
   b52c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            return BotonDualA(puerto);
   b52ca:	f7ff bd55 	b.w	b4d78 <_Z10BotonDualAi>
}
   b52ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            return BotonDualB(puerto);
   b52d2:	f7ff bd6a 	b.w	b4daa <_Z10BotonDualBi>
}
   b52d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            return BotonDual2(puerto);
   b52da:	f7ff bd7f 	b.w	b4ddc <_Z10BotonDual2i>
        switch (condicion)
   b52de:	b141      	cbz	r1, b52f2 <_Z10leerSensoriii+0xda>
   b52e0:	2901      	cmp	r1, #1
   b52e2:	d00a      	beq.n	b52fa <_Z10leerSensoriii+0xe2>
        Serial.println("InvalidSensorError");
   b52e4:	f006 f890 	bl	bb408 <_Z16_fetch_usbserialv>
   b52e8:	4906      	ldr	r1, [pc, #24]	; (b5304 <_Z10leerSensoriii+0xec>)
   b52ea:	f005 fe3e 	bl	baf6a <_ZN5Print7printlnEPKc>
}
   b52ee:	2000      	movs	r0, #0
   b52f0:	bd08      	pop	{r3, pc}
   b52f2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            return Cafe(puerto);
   b52f6:	f7ff bda4 	b.w	b4e42 <_Z4Cafei>
}
   b52fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            return AguaClara(puerto);           
   b52fe:	f7ff bdc6 	b.w	b4e8e <_Z9AguaClarai>
   b5302:	bf00      	nop
   b5304:	000bbd12 	.word	0x000bbd12

000b5308 <_Z13leerSensorExpii>:

int leerSensorExp(int id, int puerto){
   b5308:	b508      	push	{r3, lr}
   b530a:	4603      	mov	r3, r0
   b530c:	3b02      	subs	r3, #2
   b530e:	4608      	mov	r0, r1
   b5310:	2b0a      	cmp	r3, #10
   b5312:	d81f      	bhi.n	b5354 <_Z13leerSensorExpii+0x4c>
   b5314:	e8df f003 	tbb	[pc, r3]
   b5318:	0e1e0a06 	.word	0x0e1e0a06
   b531c:	1e1e1612 	.word	0x1e1e1612
   b5320:	1e1e      	.short	0x1e1e
   b5322:	1a          	.byte	0x1a
   b5323:	00          	.byte	0x00
    
    default:
        Serial.println("InvalidSensorError");
        return -1;
    }
}
   b5324:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return LuzExp();
   b5328:	f7ff bee6 	b.w	b50f8 <_Z6LuzExpv>
}
   b532c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return SensorSonidoExp();
   b5330:	f7ff befa 	b.w	b5128 <_Z15SensorSonidoExpv>
}
   b5334:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return AnguloExp();
   b5338:	f7ff be98 	b.w	b506c <_Z9AnguloExpv>
}
   b533c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return SensorTempExp(puerto);
   b5340:	f7ff bf3e 	b.w	b51c0 <_Z13SensorTempExpi>
}
   b5344:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return DistanciaExp(puerto);
   b5348:	f7ff be84 	b.w	b5054 <_Z12DistanciaExpi>
}
   b534c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        return TurbiaExp(puerto);
   b5350:	f7ff bf54 	b.w	b51fc <_Z9TurbiaExpi>
        Serial.println("InvalidSensorError");
   b5354:	f006 f858 	bl	bb408 <_Z16_fetch_usbserialv>
   b5358:	4902      	ldr	r1, [pc, #8]	; (b5364 <_Z13leerSensorExpii+0x5c>)
   b535a:	f005 fe06 	bl	baf6a <_ZN5Print7printlnEPKc>
}
   b535e:	f04f 30ff 	mov.w	r0, #4294967295
   b5362:	bd08      	pop	{r3, pc}
   b5364:	000bbd12 	.word	0x000bbd12

000b5368 <_Z9ledApagarv>:
bool init = false;

int counter = 0;

void ledApagar()
{
   b5368:	b507      	push	{r0, r1, r2, lr}
   ledObject.setColorRGB(0, 0, 0, 0);
   b536a:	2300      	movs	r3, #0
   b536c:	4804      	ldr	r0, [pc, #16]	; (b5380 <_Z9ledApagarv+0x18>)
   b536e:	9300      	str	r3, [sp, #0]
   b5370:	461a      	mov	r2, r3
   b5372:	4619      	mov	r1, r3
   b5374:	f005 f86e 	bl	ba454 <_ZN12ChainableLED11setColorRGBEhhhh>
}
   b5378:	b003      	add	sp, #12
   b537a:	f85d fb04 	ldr.w	pc, [sp], #4
   b537e:	bf00      	nop
   b5380:	2003d6e0 	.word	0x2003d6e0

000b5384 <_Z7ledRojov>:
void ledRojo()
{
   b5384:	b507      	push	{r0, r1, r2, lr}
    // Serial.println("LedRojo");
    ledObject.setColorRGB(0, 255, 0, 0);
   b5386:	2300      	movs	r3, #0
   b5388:	4804      	ldr	r0, [pc, #16]	; (b539c <_Z7ledRojov+0x18>)
   b538a:	9300      	str	r3, [sp, #0]
   b538c:	22ff      	movs	r2, #255	; 0xff
   b538e:	4619      	mov	r1, r3
   b5390:	f005 f860 	bl	ba454 <_ZN12ChainableLED11setColorRGBEhhhh>
}
   b5394:	b003      	add	sp, #12
   b5396:	f85d fb04 	ldr.w	pc, [sp], #4
   b539a:	bf00      	nop
   b539c:	2003d6e0 	.word	0x2003d6e0

000b53a0 <_Z8ledVerdev>:
void ledVerde()
{
   b53a0:	b507      	push	{r0, r1, r2, lr}
    ledObject.setColorRGB(0, 0, 255, 10);
   b53a2:	230a      	movs	r3, #10
   b53a4:	2200      	movs	r2, #0
   b53a6:	9300      	str	r3, [sp, #0]
   b53a8:	4803      	ldr	r0, [pc, #12]	; (b53b8 <_Z8ledVerdev+0x18>)
   b53aa:	23ff      	movs	r3, #255	; 0xff
   b53ac:	4611      	mov	r1, r2
   b53ae:	f005 f851 	bl	ba454 <_ZN12ChainableLED11setColorRGBEhhhh>
}
   b53b2:	b003      	add	sp, #12
   b53b4:	f85d fb04 	ldr.w	pc, [sp], #4
   b53b8:	2003d6e0 	.word	0x2003d6e0

000b53bc <_Z7ledAzulv>:
void ledAzul()
{
   b53bc:	b507      	push	{r0, r1, r2, lr}
    ledObject.setColorRGB(0, 0, 0, 255);
   b53be:	23ff      	movs	r3, #255	; 0xff
   b53c0:	9300      	str	r3, [sp, #0]
   b53c2:	2300      	movs	r3, #0
   b53c4:	4803      	ldr	r0, [pc, #12]	; (b53d4 <_Z7ledAzulv+0x18>)
   b53c6:	461a      	mov	r2, r3
   b53c8:	4619      	mov	r1, r3
   b53ca:	f005 f843 	bl	ba454 <_ZN12ChainableLED11setColorRGBEhhhh>
}
   b53ce:	b003      	add	sp, #12
   b53d0:	f85d fb04 	ldr.w	pc, [sp], #4
   b53d4:	2003d6e0 	.word	0x2003d6e0

000b53d8 <_Z11ledAmarillov>:
void ledAmarillo()
{
   b53d8:	b507      	push	{r0, r1, r2, lr}
    ledObject.setColorRGB(0, 255, 233, 0);
   b53da:	2100      	movs	r1, #0
   b53dc:	4804      	ldr	r0, [pc, #16]	; (b53f0 <_Z11ledAmarillov+0x18>)
   b53de:	9100      	str	r1, [sp, #0]
   b53e0:	23e9      	movs	r3, #233	; 0xe9
   b53e2:	22ff      	movs	r2, #255	; 0xff
   b53e4:	f005 f836 	bl	ba454 <_ZN12ChainableLED11setColorRGBEhhhh>
}
   b53e8:	b003      	add	sp, #12
   b53ea:	f85d fb04 	ldr.w	pc, [sp], #4
   b53ee:	bf00      	nop
   b53f0:	2003d6e0 	.word	0x2003d6e0

000b53f4 <_Z9ledMoradov>:
void ledMorado()
{
   b53f4:	b507      	push	{r0, r1, r2, lr}
    ledObject.setColorRGB(0, 108, 70, 117);
   b53f6:	2375      	movs	r3, #117	; 0x75
   b53f8:	9300      	str	r3, [sp, #0]
   b53fa:	4804      	ldr	r0, [pc, #16]	; (b540c <_Z9ledMoradov+0x18>)
   b53fc:	2346      	movs	r3, #70	; 0x46
   b53fe:	226c      	movs	r2, #108	; 0x6c
   b5400:	2100      	movs	r1, #0
   b5402:	f005 f827 	bl	ba454 <_ZN12ChainableLED11setColorRGBEhhhh>
}
   b5406:	b003      	add	sp, #12
   b5408:	f85d fb04 	ldr.w	pc, [sp], #4
   b540c:	2003d6e0 	.word	0x2003d6e0

000b5410 <_Z10ledNaranjav>:
void ledNaranja()
{
   b5410:	b507      	push	{r0, r1, r2, lr}
    ledObject.setColorRGB(0, 255, 128, 0);
   b5412:	2100      	movs	r1, #0
   b5414:	4804      	ldr	r0, [pc, #16]	; (b5428 <_Z10ledNaranjav+0x18>)
   b5416:	9100      	str	r1, [sp, #0]
   b5418:	2380      	movs	r3, #128	; 0x80
   b541a:	22ff      	movs	r2, #255	; 0xff
   b541c:	f005 f81a 	bl	ba454 <_ZN12ChainableLED11setColorRGBEhhhh>
}
   b5420:	b003      	add	sp, #12
   b5422:	f85d fb04 	ldr.w	pc, [sp], #4
   b5426:	bf00      	nop
   b5428:	2003d6e0 	.word	0x2003d6e0

000b542c <_Z9ledBlancov>:
void ledBlanco()
{
   b542c:	b507      	push	{r0, r1, r2, lr}
    ledObject.setColorRGB(0, 255, 255, 255);
   b542e:	23ff      	movs	r3, #255	; 0xff
   b5430:	4804      	ldr	r0, [pc, #16]	; (b5444 <_Z9ledBlancov+0x18>)
   b5432:	9300      	str	r3, [sp, #0]
   b5434:	461a      	mov	r2, r3
   b5436:	2100      	movs	r1, #0
   b5438:	f005 f80c 	bl	ba454 <_ZN12ChainableLED11setColorRGBEhhhh>
}
   b543c:	b003      	add	sp, #12
   b543e:	f85d fb04 	ldr.w	pc, [sp], #4
   b5442:	bf00      	nop
   b5444:	2003d6e0 	.word	0x2003d6e0

000b5448 <_Z11ledArcoirisv>:
void ledArcoiris()
{
   b5448:	b510      	push	{r4, lr}
   switch (counter)
   b544a:	4c11      	ldr	r4, [pc, #68]	; (b5490 <_Z11ledArcoirisv+0x48>)
   b544c:	6823      	ldr	r3, [r4, #0]
   b544e:	2b05      	cmp	r3, #5
   b5450:	d809      	bhi.n	b5466 <_Z11ledArcoirisv+0x1e>
   b5452:	e8df f003 	tbb	[pc, r3]
   b5456:	0d03      	.short	0x0d03
   b5458:	19161310 	.word	0x19161310
   {
   case 0:
      ledRojo();
   b545c:	f7ff ff92 	bl	b5384 <_Z7ledRojov>
      counter++;
      break;

   case 4:
      ledMorado();
      counter++;
   b5460:	6823      	ldr	r3, [r4, #0]
   b5462:	3301      	adds	r3, #1
      break;

   case 5:
      ledAzul();
      counter = 0;
   b5464:	6023      	str	r3, [r4, #0]
    for (double i = 0; i < 1; i += 0.01)
    {
        ledObject.setColorHSB(0, i, 0.75, 0.75);
    }*/

}
   b5466:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   delay(150);
   b546a:	2096      	movs	r0, #150	; 0x96
   b546c:	f005 be37 	b.w	bb0de <delay>
      ledNaranja();
   b5470:	f7ff ffce 	bl	b5410 <_Z10ledNaranjav>
      counter++;
   b5474:	e7f4      	b.n	b5460 <_Z11ledArcoirisv+0x18>
      ledAmarillo();
   b5476:	f7ff ffaf 	bl	b53d8 <_Z11ledAmarillov>
      counter++;
   b547a:	e7f1      	b.n	b5460 <_Z11ledArcoirisv+0x18>
      ledVerde();
   b547c:	f7ff ff90 	bl	b53a0 <_Z8ledVerdev>
      counter++;
   b5480:	e7ee      	b.n	b5460 <_Z11ledArcoirisv+0x18>
      ledMorado();
   b5482:	f7ff ffb7 	bl	b53f4 <_Z9ledMoradov>
   b5486:	e7eb      	b.n	b5460 <_Z11ledArcoirisv+0x18>
      ledAzul();
   b5488:	f7ff ff98 	bl	b53bc <_Z7ledAzulv>
      counter = 0;
   b548c:	2300      	movs	r3, #0
   b548e:	e7e9      	b.n	b5464 <_Z11ledArcoirisv+0x1c>
   b5490:	2003d330 	.word	0x2003d330

000b5494 <_Z9pitidoON0v>:
//--------------------------------- M O D O   0 ---------------------------------
//-------------------------------------------------------------------------------

void 
pitidoON0()
{
   b5494:	b508      	push	{r3, lr}
   //Serial.println("Zumbador ON");
   digitalWrite(Zumbador_PIN, 1);
   b5496:	2101      	movs	r1, #1
   b5498:	2006      	movs	r0, #6
   b549a:	f006 f9fc 	bl	bb896 <digitalWrite>
   digitalWrite(Zumbador_PIN, HIGH);
   b549e:	2101      	movs	r1, #1
   b54a0:	2006      	movs	r0, #6
   b54a2:	f006 f9f8 	bl	bb896 <digitalWrite>
   digitalWrite(D7, HIGH);
   b54a6:	2101      	movs	r1, #1
   b54a8:	2007      	movs	r0, #7
   b54aa:	f006 f9f4 	bl	bb896 <digitalWrite>
   digitalWrite(D7, 1);
}
   b54ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   digitalWrite(D7, 1);
   b54b2:	2101      	movs	r1, #1
   b54b4:	2007      	movs	r0, #7
   b54b6:	f006 b9ee 	b.w	bb896 <digitalWrite>

000b54ba <_Z10pitidoOFF0v>:

void pitidoOFF0()
{
   b54ba:	b508      	push	{r3, lr}
   //Serial.println("Zumbador OFF");
   digitalWrite(Zumbador_PIN, 0);
   b54bc:	2100      	movs	r1, #0
   b54be:	2006      	movs	r0, #6
   b54c0:	f006 f9e9 	bl	bb896 <digitalWrite>
   digitalWrite(Zumbador_PIN, LOW);
   b54c4:	2100      	movs	r1, #0
   b54c6:	2006      	movs	r0, #6
   b54c8:	f006 f9e5 	bl	bb896 <digitalWrite>
   digitalWrite(D7, LOW);
   b54cc:	2100      	movs	r1, #0
   b54ce:	2007      	movs	r0, #7
   b54d0:	f006 f9e1 	bl	bb896 <digitalWrite>
   digitalWrite(D7, 0);
}
   b54d4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   digitalWrite(D7, 0);
   b54d8:	2100      	movs	r1, #0
   b54da:	2007      	movs	r0, #7
   b54dc:	f006 b9db 	b.w	bb896 <digitalWrite>

000b54e0 <_Z12pitidoBlink0v>:

void pitidoBlink0()
{
   b54e0:	b508      	push	{r3, lr}
   pitidoON0();
   b54e2:	f7ff ffd7 	bl	b5494 <_Z9pitidoON0v>
   delay(100);
   b54e6:	2064      	movs	r0, #100	; 0x64
   b54e8:	f005 fdf9 	bl	bb0de <delay>
   pitidoOFF0();
   b54ec:	f7ff ffe5 	bl	b54ba <_Z10pitidoOFF0v>
   delay(100);
}
   b54f0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   delay(100);
   b54f4:	2064      	movs	r0, #100	; 0x64
   b54f6:	f005 bdf2 	b.w	bb0de <delay>

000b54fa <_Z14ledAzulNaranjab>:

void ledAzulNaranja(boolean estado)
{
   if (estado)
   b54fa:	b108      	cbz	r0, b5500 <_Z14ledAzulNaranjab+0x6>
   {
      ledAzul();
   b54fc:	f7ff bf5e 	b.w	b53bc <_Z7ledAzulv>
   }
   else
   {
      ledNaranja();
   b5500:	f7ff bf86 	b.w	b5410 <_Z10ledNaranjav>

000b5504 <_Z17ledMoradoAmarillob>:
   }
}
void ledMoradoAmarillo(boolean estado)
{
   if (estado)
   b5504:	b108      	cbz	r0, b550a <_Z17ledMoradoAmarillob+0x6>
   {
      ledAmarillo();
   b5506:	f7ff bf67 	b.w	b53d8 <_Z11ledAmarillov>
   }
   else
   {
      ledMorado();
   b550a:	f7ff bf73 	b.w	b53f4 <_Z9ledMoradov>

000b550e <_Z12ledVerdeRojob>:
   }
}
void ledVerdeRojo(boolean estado)
{
   if (estado)
   b550e:	b108      	cbz	r0, b5514 <_Z12ledVerdeRojob+0x6>
   {
      ledVerde();
   b5510:	f7ff bf46 	b.w	b53a0 <_Z8ledVerdev>
   }
   else
   {
      ledRojo();
   b5514:	f7ff bf36 	b.w	b5384 <_Z7ledRojov>

000b5518 <_Z9ledBlink0b>:
   }
}
void ledBlink0(boolean estado)
{
   b5518:	b508      	push	{r3, lr}
   if (estado)
   b551a:	b160      	cbz	r0, b5536 <_Z9ledBlink0b+0x1e>
   {
      ledBlanco();
   b551c:	f7ff ff86 	bl	b542c <_Z9ledBlancov>
      delay(400);
   b5520:	f44f 70c8 	mov.w	r0, #400	; 0x190
   b5524:	f005 fddb 	bl	bb0de <delay>
      ledApagar();
   b5528:	f7ff ff1e 	bl	b5368 <_Z9ledApagarv>
   }
   else
   {
      ledApagar();
   }
}
   b552c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      delay(200);
   b5530:	20c8      	movs	r0, #200	; 0xc8
   b5532:	f005 bdd4 	b.w	bb0de <delay>
}
   b5536:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      ledApagar();
   b553a:	f7ff bf15 	b.w	b5368 <_Z9ledApagarv>

000b553e <_Z8ledOnOffb>:

void ledOnOff(boolean estado)
{
   if (estado)
   b553e:	b108      	cbz	r0, b5544 <_Z8ledOnOffb+0x6>
   {
      ledBlanco();
   b5540:	f7ff bf74 	b.w	b542c <_Z9ledBlancov>
   }
   else
   {
      ledApagar();
   b5544:	f7ff bf10 	b.w	b5368 <_Z9ledApagarv>

000b5548 <_Z12ledArcoiris0b>:
   }
}

void ledArcoiris0(boolean estado)
{
   if (estado)
   b5548:	b108      	cbz	r0, b554e <_Z12ledArcoiris0b+0x6>
   {
      ledArcoiris();
   b554a:	f7ff bf7d 	b.w	b5448 <_Z11ledArcoirisv>
   }
   else
   {
      ledApagar();
   b554e:	f7ff bf0b 	b.w	b5368 <_Z9ledApagarv>

000b5552 <_Z13blinkAndSleepb>:
   }
}

void blinkAndSleep(boolean estado)
{
   if (estado)
   b5552:	b108      	cbz	r0, b5558 <_Z13blinkAndSleepb+0x6>
   {
      pitidoBlink0();
   b5554:	f7ff bfc4 	b.w	b54e0 <_Z12pitidoBlink0v>
   }
   else
   {
      pitidoOFF0();
   b5558:	f7ff bfaf 	b.w	b54ba <_Z10pitidoOFF0v>

000b555c <_Z8zumbadorb>:
   }
}
void zumbador(boolean estado)
{
   if (estado)
   b555c:	b108      	cbz	r0, b5562 <_Z8zumbadorb+0x6>
   {
      pitidoON0();
   b555e:	f7ff bf99 	b.w	b5494 <_Z9pitidoON0v>
   }
   else
   {
      pitidoOFF0();
   b5562:	f7ff bfaa 	b.w	b54ba <_Z10pitidoOFF0v>
	...

000b5568 <_Z15activarActuadoriib>:
   }
}

void activarActuador(int id, int opcion, boolean valor)
{
   switch (id)
   b5568:	2801      	cmp	r0, #1
{
   b556a:	b538      	push	{r3, r4, r5, lr}
   b556c:	460d      	mov	r5, r1
   b556e:	4614      	mov	r4, r2
   switch (id)
   b5570:	d027      	beq.n	b55c2 <_Z15activarActuadoriib+0x5a>
   b5572:	280d      	cmp	r0, #13
   b5574:	d03b      	beq.n	b55ee <_Z15activarActuadoriib+0x86>
   b5576:	bb48      	cbnz	r0, b55cc <_Z15activarActuadoriib+0x64>
   {
      pitidoOFF0();
   // Actuador led
   case 0:

      switch (opcion) {
   b5578:	2905      	cmp	r1, #5
   b557a:	d827      	bhi.n	b55cc <_Z15activarActuadoriib+0x64>
   b557c:	e8df f001 	tbb	[pc, r1]
   b5580:	120d0803 	.word	0x120d0803
   b5584:	1c17      	.short	0x1c17
      
   default:
      Serial.println("Valor no valido");
      break;
   }
}
   b5586:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            ledVerdeRojo(valor);
   b558a:	4610      	mov	r0, r2
   b558c:	f7ff bfbf 	b.w	b550e <_Z12ledVerdeRojob>
}
   b5590:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            ledMoradoAmarillo(valor);
   b5594:	4610      	mov	r0, r2
   b5596:	f7ff bfb5 	b.w	b5504 <_Z17ledMoradoAmarillob>
}
   b559a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            ledAzulNaranja(valor);
   b559e:	4610      	mov	r0, r2
   b55a0:	f7ff bfab 	b.w	b54fa <_Z14ledAzulNaranjab>
}
   b55a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            ledBlink0(valor);
   b55a8:	4610      	mov	r0, r2
   b55aa:	f7ff bfb5 	b.w	b5518 <_Z9ledBlink0b>
}
   b55ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            ledArcoiris0(valor);
   b55b2:	4610      	mov	r0, r2
   b55b4:	f7ff bfc8 	b.w	b5548 <_Z12ledArcoiris0b>
}
   b55b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            ledOnOff(valor);
   b55bc:	4610      	mov	r0, r2
   b55be:	f7ff bfbe 	b.w	b553e <_Z8ledOnOffb>
      ledApagar();
   b55c2:	f7ff fed1 	bl	b5368 <_Z9ledApagarv>
      switch (opcion) {
   b55c6:	b145      	cbz	r5, b55da <_Z15activarActuadoriib+0x72>
   b55c8:	2d01      	cmp	r5, #1
   b55ca:	d00b      	beq.n	b55e4 <_Z15activarActuadoriib+0x7c>
            Serial.println("Valor no valido");
   b55cc:	f005 ff1c 	bl	bb408 <_Z16_fetch_usbserialv>
}
   b55d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            Serial.println("Valor no valido");
   b55d4:	490f      	ldr	r1, [pc, #60]	; (b5614 <_Z15activarActuadoriib+0xac>)
   b55d6:	f005 bcc8 	b.w	baf6a <_ZN5Print7printlnEPKc>
            zumbador(valor);
   b55da:	4620      	mov	r0, r4
}
   b55dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            zumbador(valor);
   b55e0:	f7ff bfbc 	b.w	b555c <_Z8zumbadorb>
            blinkAndSleep(valor);
   b55e4:	4620      	mov	r0, r4
}
   b55e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            blinkAndSleep(valor);
   b55ea:	f7ff bfb2 	b.w	b5552 <_Z13blinkAndSleepb>
      pitidoOFF0();
   b55ee:	f7ff ff64 	bl	b54ba <_Z10pitidoOFF0v>
      ledApagar();
   b55f2:	f7ff feb9 	bl	b5368 <_Z9ledApagarv>
      pinMode(A2, OUTPUT);
   b55f6:	2101      	movs	r1, #1
   b55f8:	2011      	movs	r0, #17
   b55fa:	f006 f93b 	bl	bb874 <pinMode>
      if (valor) {
   b55fe:	b134      	cbz	r4, b560e <_Z15activarActuadoriib+0xa6>
         analogWrite(A2, 50, 40);
   b5600:	2228      	movs	r2, #40	; 0x28
   b5602:	2132      	movs	r1, #50	; 0x32
}
   b5604:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
         analogWrite(A2, 0, 0);
   b5608:	2011      	movs	r0, #17
   b560a:	f006 b987 	b.w	bb91c <_Z11analogWritetmm>
   b560e:	4622      	mov	r2, r4
   b5610:	4621      	mov	r1, r4
   b5612:	e7f7      	b.n	b5604 <_Z15activarActuadoriib+0x9c>
   b5614:	000bbd25 	.word	0x000bbd25

000b5618 <_Z8ledBlinkv>:
//-------------------------------------------------------------------------------
//--------------------------------- M O D O   1 ---------------------------------
//-------------------------------------------------------------------------------

void ledBlink()
{
   b5618:	b508      	push	{r3, lr}
    ledBlanco();
   b561a:	f7ff ff07 	bl	b542c <_Z9ledBlancov>
    delay(400);
   b561e:	f44f 70c8 	mov.w	r0, #400	; 0x190
   b5622:	f005 fd5c 	bl	bb0de <delay>
    ledApagar();
   b5626:	f7ff fe9f 	bl	b5368 <_Z9ledApagarv>
    delay(200);
}
   b562a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    delay(200);
   b562e:	20c8      	movs	r0, #200	; 0xc8
   b5630:	f005 bd55 	b.w	bb0de <delay>

000b5634 <_Z9pitidoON1i>:

// Acciones del zumbador MODO 1
void pitidoON1(int puerto)
{
   b5634:	b513      	push	{r0, r1, r4, lr}
    digitalWrite(puerto, 1);
   b5636:	b284      	uxth	r4, r0
   b5638:	4620      	mov	r0, r4
   b563a:	2101      	movs	r1, #1
   b563c:	f006 f92b 	bl	bb896 <digitalWrite>
    digitalWrite(puerto, HIGH);
   b5640:	4620      	mov	r0, r4
   b5642:	2101      	movs	r1, #1
   b5644:	f006 f927 	bl	bb896 <digitalWrite>
    digitalWrite(puerto + 1, HIGH);
   b5648:	1c60      	adds	r0, r4, #1
   b564a:	b280      	uxth	r0, r0
   b564c:	2101      	movs	r1, #1
   b564e:	9001      	str	r0, [sp, #4]
   b5650:	f006 f921 	bl	bb896 <digitalWrite>
    digitalWrite(puerto + 1, 1);
   b5654:	9801      	ldr	r0, [sp, #4]
   b5656:	2101      	movs	r1, #1
}
   b5658:	b002      	add	sp, #8
   b565a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    digitalWrite(puerto + 1, 1);
   b565e:	f006 b91a 	b.w	bb896 <digitalWrite>

000b5662 <_Z10pitidoOFF1i>:

void pitidoOFF1(int puerto)
{
   b5662:	b513      	push	{r0, r1, r4, lr}
    digitalWrite(puerto, 0);
   b5664:	b284      	uxth	r4, r0
   b5666:	4620      	mov	r0, r4
   b5668:	2100      	movs	r1, #0
   b566a:	f006 f914 	bl	bb896 <digitalWrite>
    digitalWrite(puerto, LOW);
   b566e:	4620      	mov	r0, r4
   b5670:	2100      	movs	r1, #0
   b5672:	f006 f910 	bl	bb896 <digitalWrite>
    digitalWrite(puerto + 1, LOW);
   b5676:	1c60      	adds	r0, r4, #1
   b5678:	b280      	uxth	r0, r0
   b567a:	2100      	movs	r1, #0
   b567c:	9001      	str	r0, [sp, #4]
   b567e:	f006 f90a 	bl	bb896 <digitalWrite>
    digitalWrite(puerto + 1, 0);
   b5682:	9801      	ldr	r0, [sp, #4]
   b5684:	2100      	movs	r1, #0
}
   b5686:	b002      	add	sp, #8
   b5688:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    digitalWrite(puerto + 1, 0);
   b568c:	f006 b903 	b.w	bb896 <digitalWrite>

000b5690 <_Z12pitidoBlink1i>:

void pitidoBlink1(int puerto)
{
   b5690:	b510      	push	{r4, lr}
   b5692:	4604      	mov	r4, r0
    pitidoON1(puerto);
   b5694:	f7ff ffce 	bl	b5634 <_Z9pitidoON1i>
    delay(100);
   b5698:	2064      	movs	r0, #100	; 0x64
   b569a:	f005 fd20 	bl	bb0de <delay>
    pitidoOFF1(puerto);
   b569e:	4620      	mov	r0, r4
   b56a0:	f7ff ffdf 	bl	b5662 <_Z10pitidoOFF1i>
    delay(100);
}
   b56a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delay(100);
   b56a8:	2064      	movs	r0, #100	; 0x64
   b56aa:	f005 bd18 	b.w	bb0de <delay>
	...

000b56b0 <_Z10activarLEDii>:

// Recive el actuador que es, el tipo de actuador, el puerto al que esta conectado, el valor de los sensores para actuar en consecuencia y los puertos de dichos sensores.
void activarLED(int opcion, int puerto)
{
   b56b0:	b508      	push	{r3, lr}
   b56b2:	2807      	cmp	r0, #7
   b56b4:	d825      	bhi.n	b5702 <_Z10activarLEDii+0x52>
   b56b6:	e8df f000 	tbb	[pc, r0]
   b56ba:	0804      	.short	0x0804
   b56bc:	1814100c 	.word	0x1814100c
   b56c0:	201c      	.short	0x201c

    default:
        Serial.println("LedErrorOption");
        break;
    }
}
   b56c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        ledVerde();
   b56c6:	f7ff be6b 	b.w	b53a0 <_Z8ledVerdev>
}
   b56ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        ledRojo();
   b56ce:	f7ff be59 	b.w	b5384 <_Z7ledRojov>
}
   b56d2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        ledAmarillo();
   b56d6:	f7ff be7f 	b.w	b53d8 <_Z11ledAmarillov>
}
   b56da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        ledMorado();
   b56de:	f7ff be89 	b.w	b53f4 <_Z9ledMoradov>
}
   b56e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        ledAzul();
   b56e6:	f7ff be69 	b.w	b53bc <_Z7ledAzulv>
}
   b56ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        ledNaranja();
   b56ee:	f7ff be8f 	b.w	b5410 <_Z10ledNaranjav>
}
   b56f2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        ledBlink();
   b56f6:	f7ff bf8f 	b.w	b5618 <_Z8ledBlinkv>
}
   b56fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        ledArcoiris();
   b56fe:	f7ff bea3 	b.w	b5448 <_Z11ledArcoirisv>
        Serial.println("LedErrorOption");
   b5702:	f005 fe81 	bl	bb408 <_Z16_fetch_usbserialv>
}
   b5706:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        Serial.println("LedErrorOption");
   b570a:	4901      	ldr	r1, [pc, #4]	; (b5710 <_Z10activarLEDii+0x60>)
   b570c:	f005 bc2d 	b.w	baf6a <_ZN5Print7printlnEPKc>
   b5710:	000bbd35 	.word	0x000bbd35

000b5714 <_Z15activarZumbadorii>:

void activarZumbador(int opcion, int puerto)
{
   b5714:	b538      	push	{r3, r4, r5, lr}
   b5716:	460c      	mov	r4, r1
   b5718:	4605      	mov	r5, r0
    pinMode(puerto, OUTPUT);
   b571a:	2101      	movs	r1, #1
   b571c:	b2a0      	uxth	r0, r4
   b571e:	f006 f8a9 	bl	bb874 <pinMode>

    switch (opcion)
   b5722:	b145      	cbz	r5, b5736 <_Z15activarZumbadorii+0x22>
   b5724:	2d01      	cmp	r5, #1
   b5726:	d00b      	beq.n	b5740 <_Z15activarZumbadorii+0x2c>
        break;
    case 1:
        pitidoBlink1(puerto);
        break;
    default:
        Serial.println("Valor no valido");
   b5728:	f005 fe6e 	bl	bb408 <_Z16_fetch_usbserialv>
        break;
    }
}
   b572c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        Serial.println("Valor no valido");
   b5730:	4906      	ldr	r1, [pc, #24]	; (b574c <_Z15activarZumbadorii+0x38>)
   b5732:	f005 bc1a 	b.w	baf6a <_ZN5Print7printlnEPKc>
        pitidoON1(puerto);
   b5736:	4620      	mov	r0, r4
}
   b5738:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        pitidoON1(puerto);
   b573c:	f7ff bf7a 	b.w	b5634 <_Z9pitidoON1i>
        pitidoBlink1(puerto);
   b5740:	4620      	mov	r0, r4
}
   b5742:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        pitidoBlink1(puerto);
   b5746:	f7ff bfa3 	b.w	b5690 <_Z12pitidoBlink1i>
   b574a:	bf00      	nop
   b574c:	000bbd25 	.word	0x000bbd25

000b5750 <_Z17activarVentiladorii>:

void activarVentilador(int opcion, int puerto)
{
   b5750:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b5752:	460c      	mov	r4, r1
   b5754:	4605      	mov	r5, r0
   pitidoOFF0();
   b5756:	f7ff feb0 	bl	b54ba <_Z10pitidoOFF0v>
   ledApagar();
   b575a:	f7ff fe05 	bl	b5368 <_Z9ledApagarv>

   int p;
   switch (puerto)
   b575e:	2c04      	cmp	r4, #4
   b5760:	bf9a      	itte	ls
   b5762:	4b0d      	ldrls	r3, [pc, #52]	; (b5798 <_Z17activarVentiladorii+0x48>)
   b5764:	571b      	ldrsbls	r3, [r3, r4]
   ledApagar();
   b5766:	f04f 33ff 	movhi.w	r3, #4294967295
    default:
        p = -1;
        break;
    }

   pinMode(p, OUTPUT);
   b576a:	b298      	uxth	r0, r3
   b576c:	2101      	movs	r1, #1
   b576e:	9001      	str	r0, [sp, #4]
   b5770:	f006 f880 	bl	bb874 <pinMode>
    switch (opcion)
   b5774:	2d01      	cmp	r5, #1
   b5776:	d807      	bhi.n	b5788 <_Z17activarVentiladorii+0x38>
    {
    case 0:
      analogWrite(p, 50, 50);
      break;
    case 1:
      analogWrite(p, 50, 50);
   b5778:	2232      	movs	r2, #50	; 0x32
   b577a:	9801      	ldr	r0, [sp, #4]
   b577c:	4611      	mov	r1, r2
      Serial.println("Valor no valido");
      break;
    }


}
   b577e:	b003      	add	sp, #12
   b5780:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      analogWrite(p, 50, 50);
   b5784:	f006 b8ca 	b.w	bb91c <_Z11analogWritetmm>
      Serial.println("Valor no valido");
   b5788:	f005 fe3e 	bl	bb408 <_Z16_fetch_usbserialv>
   b578c:	4903      	ldr	r1, [pc, #12]	; (b579c <_Z17activarVentiladorii+0x4c>)
}
   b578e:	b003      	add	sp, #12
   b5790:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      Serial.println("Valor no valido");
   b5794:	f005 bbe9 	b.w	baf6a <_ZN5Print7printlnEPKc>
   b5798:	000bca44 	.word	0x000bca44
   b579c:	000bbd25 	.word	0x000bbd25

000b57a0 <_Z10ventApagari>:

void ventApagar(int puerto)
{
      int p;
      switch (puerto)
   b57a0:	2804      	cmp	r0, #4
{
   b57a2:	b507      	push	{r0, r1, r2, lr}
   b57a4:	bf9a      	itte	ls
   b57a6:	4b08      	ldrls	r3, [pc, #32]	; (b57c8 <_Z10ventApagari+0x28>)
   b57a8:	5618      	ldrsbls	r0, [r3, r0]
   b57aa:	f04f 30ff 	movhi.w	r0, #4294967295

      default:
         p = -1;
         break;
      }
      pinMode(p, OUTPUT);
   b57ae:	b280      	uxth	r0, r0
   b57b0:	2101      	movs	r1, #1
   b57b2:	9001      	str	r0, [sp, #4]
   b57b4:	f006 f85e 	bl	bb874 <pinMode>
      analogWrite(p, 0, 0);
   b57b8:	2200      	movs	r2, #0
   b57ba:	9801      	ldr	r0, [sp, #4]
   b57bc:	4611      	mov	r1, r2
}
   b57be:	b003      	add	sp, #12
   b57c0:	f85d eb04 	ldr.w	lr, [sp], #4
      analogWrite(p, 0, 0);
   b57c4:	f006 b8aa 	b.w	bb91c <_Z11analogWritetmm>
   b57c8:	000bca44 	.word	0x000bca44

000b57cc <_Z14apagarActuadorii>:

void apagarActuador(int id, int puerto)
{
   b57cc:	b538      	push	{r3, r4, r5, lr}
   b57ce:	460c      	mov	r4, r1
    id == 0 ? ledApagar() : digitalWrite(puerto, 0);
   b57d0:	4605      	mov	r5, r0
   b57d2:	b918      	cbnz	r0, b57dc <_Z14apagarActuadorii+0x10>
    if (id == 13){
      ventApagar(puerto);
    }

}
   b57d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    id == 0 ? ledApagar() : digitalWrite(puerto, 0);
   b57d8:	f7ff bdc6 	b.w	b5368 <_Z9ledApagarv>
   b57dc:	2100      	movs	r1, #0
   b57de:	b2a0      	uxth	r0, r4
   b57e0:	f006 f859 	bl	bb896 <digitalWrite>
    if (id == 13){
   b57e4:	2d0d      	cmp	r5, #13
   b57e6:	d104      	bne.n	b57f2 <_Z14apagarActuadorii+0x26>
      ventApagar(puerto);
   b57e8:	4620      	mov	r0, r4
}
   b57ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ventApagar(puerto);
   b57ee:	f7ff bfd7 	b.w	b57a0 <_Z10ventApagari>
}
   b57f2:	bd38      	pop	{r3, r4, r5, pc}

000b57f4 <_Z15actuadorHandleriii>:

void actuadorHandler(int id, int opcion, int puerto)
{
   b57f4:	4603      	mov	r3, r0
    if (id < 2)
   b57f6:	2b01      	cmp	r3, #1
{
   b57f8:	4608      	mov	r0, r1
   b57fa:	4611      	mov	r1, r2
    if (id < 2)
   b57fc:	dc04      	bgt.n	b5808 <_Z15actuadorHandleriii+0x14>
        id == 0 ? activarLED(opcion, puerto) : activarZumbador(opcion, puerto);
   b57fe:	b90b      	cbnz	r3, b5804 <_Z15actuadorHandleriii+0x10>
   b5800:	f7ff bf56 	b.w	b56b0 <_Z10activarLEDii>
   b5804:	f7ff bf86 	b.w	b5714 <_Z15activarZumbadorii>
   if (id == 13)
   b5808:	2b0d      	cmp	r3, #13
   b580a:	d101      	bne.n	b5810 <_Z15actuadorHandleriii+0x1c>
      activarVentilador(opcion, puerto);
   b580c:	f7ff bfa0 	b.w	b5750 <_Z17activarVentiladorii>
}
   b5810:	4770      	bx	lr
	...

000b5814 <_Z10borradoALLi>:
   switch (modo)
   b5814:	2801      	cmp	r0, #1
   b5816:	d00f      	beq.n	b5838 <_Z10borradoALLi+0x24>
   b5818:	2802      	cmp	r0, #2
   b581a:	d00f      	beq.n	b583c <_Z10borradoALLi+0x28>
   b581c:	b9a8      	cbnz	r0, b584a <_Z10borradoALLi+0x36>
      bloques[0] = bloque;
   b581e:	4b0b      	ldr	r3, [pc, #44]	; (b584c <_Z10borradoALLi+0x38>)
   b5820:	6018      	str	r0, [r3, #0]
   b5822:	f8c3 0144 	str.w	r0, [r3, #324]	; 0x144
      bloque2[0] = bloque;
   b5826:	4b0a      	ldr	r3, [pc, #40]	; (b5850 <_Z10borradoALLi+0x3c>)
   b5828:	6018      	str	r0, [r3, #0]
   b582a:	f8c3 0144 	str.w	r0, [r3, #324]	; 0x144
      numSensoresBloque = 0;
   b582e:	4b09      	ldr	r3, [pc, #36]	; (b5854 <_Z10borradoALLi+0x40>)
   b5830:	6018      	str	r0, [r3, #0]
      numActuadoresBloque = 0;
   b5832:	4b09      	ldr	r3, [pc, #36]	; (b5858 <_Z10borradoALLi+0x44>)
   b5834:	6018      	str	r0, [r3, #0]
      break;
   b5836:	4770      	bx	lr
   b5838:	f7ff b91c 	b.w	b4a74 <_Z10borradoALLi.part.0>
      posicion = 0;
   b583c:	4a07      	ldr	r2, [pc, #28]	; (b585c <_Z10borradoALLi+0x48>)
   b583e:	2300      	movs	r3, #0
   b5840:	6013      	str	r3, [r2, #0]
      bucle = false;
   b5842:	4a07      	ldr	r2, [pc, #28]	; (b5860 <_Z10borradoALLi+0x4c>)
   b5844:	7013      	strb	r3, [r2, #0]
      tam_bucle = 0;
   b5846:	4a07      	ldr	r2, [pc, #28]	; (b5864 <_Z10borradoALLi+0x50>)
   b5848:	6013      	str	r3, [r2, #0]
}
   b584a:	4770      	bx	lr
   b584c:	2003cd14 	.word	0x2003cd14
   b5850:	2003c73c 	.word	0x2003c73c
   b5854:	2003da20 	.word	0x2003da20
   b5858:	2003da18 	.word	0x2003da18
   b585c:	2003da28 	.word	0x2003da28
   b5860:	2003d2ec 	.word	0x2003d2ec
   b5864:	2003dc34 	.word	0x2003dc34

000b5868 <_Z10borradoPOPv>:
      break;
   }
}

void borradoPOP(){
   posicion--;
   b5868:	4a0e      	ldr	r2, [pc, #56]	; (b58a4 <_Z10borradoPOPv+0x3c>)
   b586a:	6813      	ldr	r3, [r2, #0]
   b586c:	3b01      	subs	r3, #1
   b586e:	6013      	str	r3, [r2, #0]

   if (notas[posicion] == -2) { // Ultima es N iter
   b5870:	4a0d      	ldr	r2, [pc, #52]	; (b58a8 <_Z10borradoPOPv+0x40>)
   b5872:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
   b5876:	1c8a      	adds	r2, r1, #2
   b5878:	4a0c      	ldr	r2, [pc, #48]	; (b58ac <_Z10borradoPOPv+0x44>)
   b587a:	d107      	bne.n	b588c <_Z10borradoPOPv+0x24>
      bucle = true;
   b587c:	2101      	movs	r1, #1
   b587e:	7011      	strb	r1, [r2, #0]
      tam_bucle = duraciones[posicion];
   b5880:	4a0b      	ldr	r2, [pc, #44]	; (b58b0 <_Z10borradoPOPv+0x48>)
   b5882:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   b5886:	4b0b      	ldr	r3, [pc, #44]	; (b58b4 <_Z10borradoPOPv+0x4c>)
   b5888:	601a      	str	r2, [r3, #0]
   b588a:	4770      	bx	lr

   } else if (notas[posicion] == -1) { // Ultima es LOOP
   b588c:	3101      	adds	r1, #1
   b588e:	d102      	bne.n	b5896 <_Z10borradoPOPv+0x2e>
      bucle = false;
   b5890:	2300      	movs	r3, #0
   b5892:	7013      	strb	r3, [r2, #0]
   b5894:	4770      	bx	lr

   } else {
      if (bucle) {
   b5896:	7813      	ldrb	r3, [r2, #0]
   b5898:	b11b      	cbz	r3, b58a2 <_Z10borradoPOPv+0x3a>
         tam_bucle--;
   b589a:	4a06      	ldr	r2, [pc, #24]	; (b58b4 <_Z10borradoPOPv+0x4c>)
   b589c:	6813      	ldr	r3, [r2, #0]
   b589e:	3b01      	subs	r3, #1
   b58a0:	6013      	str	r3, [r2, #0]
      }
   }
}
   b58a2:	4770      	bx	lr
   b58a4:	2003da28 	.word	0x2003da28
   b58a8:	2003d6f8 	.word	0x2003d6f8
   b58ac:	2003d2ec 	.word	0x2003d2ec
   b58b0:	2003d3a8 	.word	0x2003d3a8
   b58b4:	2003dc34 	.word	0x2003dc34

000b58b8 <_Z15decodificarNOTAi>:

//--------------------------------  REPRODUCCION  -------------------------------------

int decodificarNOTA(int nota) {
   b58b8:	b508      	push	{r3, lr}
   b58ba:	2807      	cmp	r0, #7
   b58bc:	d816      	bhi.n	b58ec <_Z15decodificarNOTAi+0x34>
   b58be:	e8df f000 	tbb	[pc, r0]
   b58c2:	0704      	.short	0x0704
   b58c4:	0f0d0b09 	.word	0x0f0d0b09
   b58c8:	1311      	.short	0x1311
   switch (nota)
   {
   case 0:
      return DO;
   b58ca:	4b0c      	ldr	r3, [pc, #48]	; (b58fc <_Z15decodificarNOTAi+0x44>)

   case 6:
      return SI;

   case 7:
      return DO_;
   b58cc:	6818      	ldr	r0, [r3, #0]

   default:
      Serial.println("Nota inválida");
      return -1;
   }
}
   b58ce:	bd08      	pop	{r3, pc}
      return RE;
   b58d0:	4b0b      	ldr	r3, [pc, #44]	; (b5900 <_Z15decodificarNOTAi+0x48>)
   b58d2:	e7fb      	b.n	b58cc <_Z15decodificarNOTAi+0x14>
      return MI;
   b58d4:	4b0b      	ldr	r3, [pc, #44]	; (b5904 <_Z15decodificarNOTAi+0x4c>)
   b58d6:	e7f9      	b.n	b58cc <_Z15decodificarNOTAi+0x14>
      return FA;
   b58d8:	4b0b      	ldr	r3, [pc, #44]	; (b5908 <_Z15decodificarNOTAi+0x50>)
   b58da:	e7f7      	b.n	b58cc <_Z15decodificarNOTAi+0x14>
      return SOL;
   b58dc:	4b0b      	ldr	r3, [pc, #44]	; (b590c <_Z15decodificarNOTAi+0x54>)
   b58de:	e7f5      	b.n	b58cc <_Z15decodificarNOTAi+0x14>
      return LA;
   b58e0:	4b0b      	ldr	r3, [pc, #44]	; (b5910 <_Z15decodificarNOTAi+0x58>)
   b58e2:	e7f3      	b.n	b58cc <_Z15decodificarNOTAi+0x14>
      return SI;
   b58e4:	4b0b      	ldr	r3, [pc, #44]	; (b5914 <_Z15decodificarNOTAi+0x5c>)
   b58e6:	e7f1      	b.n	b58cc <_Z15decodificarNOTAi+0x14>
      return DO_;
   b58e8:	4b0b      	ldr	r3, [pc, #44]	; (b5918 <_Z15decodificarNOTAi+0x60>)
   b58ea:	e7ef      	b.n	b58cc <_Z15decodificarNOTAi+0x14>
      Serial.println("Nota inválida");
   b58ec:	f005 fd8c 	bl	bb408 <_Z16_fetch_usbserialv>
   b58f0:	490a      	ldr	r1, [pc, #40]	; (b591c <_Z15decodificarNOTAi+0x64>)
   b58f2:	f005 fb3a 	bl	baf6a <_ZN5Print7printlnEPKc>
      return -1;
   b58f6:	f04f 30ff 	mov.w	r0, #4294967295
   b58fa:	e7e8      	b.n	b58ce <_Z15decodificarNOTAi+0x16>
   b58fc:	2003c660 	.word	0x2003c660
   b5900:	2003c674 	.word	0x2003c674
   b5904:	2003c670 	.word	0x2003c670
   b5908:	2003c668 	.word	0x2003c668
   b590c:	2003c67c 	.word	0x2003c67c
   b5910:	2003c66c 	.word	0x2003c66c
   b5914:	2003c678 	.word	0x2003c678
   b5918:	2003c664 	.word	0x2003c664
   b591c:	000bbd44 	.word	0x000bbd44

000b5920 <_Z15decodificarTIPOi>:

int decodificarTIPO(int tipo) {
   switch (tipo)
   b5920:	2802      	cmp	r0, #2
int decodificarTIPO(int tipo) {
   b5922:	b508      	push	{r3, lr}
   b5924:	d803      	bhi.n	b592e <_Z15decodificarTIPOi+0xe>
   b5926:	4b06      	ldr	r3, [pc, #24]	; (b5940 <_Z15decodificarTIPOi+0x20>)
   b5928:	f933 0010 	ldrsh.w	r0, [r3, r0, lsl #1]

   default:
      Serial.println("Tipo inválido");
      return -1;
   }
}
   b592c:	bd08      	pop	{r3, pc}
      Serial.println("Tipo inválido");
   b592e:	f005 fd6b 	bl	bb408 <_Z16_fetch_usbserialv>
   b5932:	4904      	ldr	r1, [pc, #16]	; (b5944 <_Z15decodificarTIPOi+0x24>)
   b5934:	f005 fb19 	bl	baf6a <_ZN5Print7printlnEPKc>
   b5938:	f04f 30ff 	mov.w	r0, #4294967295
   b593c:	e7f6      	b.n	b592c <_Z15decodificarTIPOi+0xc>
   b593e:	bf00      	nop
   b5940:	000bca4a 	.word	0x000bca4a
   b5944:	000bbd53 	.word	0x000bbd53

000b5948 <_Z19decodificarNOTA_msgi>:

String decodificarNOTA_msg(int nota) {
   b5948:	b510      	push	{r4, lr}
   b594a:	4604      	mov	r4, r0
   b594c:	2907      	cmp	r1, #7
   b594e:	d819      	bhi.n	b5984 <_Z19decodificarNOTA_msgi+0x3c>
   b5950:	e8df f001 	tbb	[pc, r1]
   b5954:	0e0c0a04 	.word	0x0e0c0a04
   b5958:	16141210 	.word	0x16141210
   switch (nota)
   {
   case 0:
      return "DO";
   b595c:	490a      	ldr	r1, [pc, #40]	; (b5988 <_Z19decodificarNOTA_msgi+0x40>)

   case 7:
      return "do";

   default:
      return "Nota inválida";
   b595e:	4620      	mov	r0, r4
   b5960:	f005 fa0f 	bl	bad82 <_ZN6StringC1EPK19__FlashStringHelper>
   }
}
   b5964:	4620      	mov	r0, r4
   b5966:	bd10      	pop	{r4, pc}
      return "RE";
   b5968:	4908      	ldr	r1, [pc, #32]	; (b598c <_Z19decodificarNOTA_msgi+0x44>)
   b596a:	e7f8      	b.n	b595e <_Z19decodificarNOTA_msgi+0x16>
      return "MI";
   b596c:	4908      	ldr	r1, [pc, #32]	; (b5990 <_Z19decodificarNOTA_msgi+0x48>)
   b596e:	e7f6      	b.n	b595e <_Z19decodificarNOTA_msgi+0x16>
      return "FA";
   b5970:	4908      	ldr	r1, [pc, #32]	; (b5994 <_Z19decodificarNOTA_msgi+0x4c>)
   b5972:	e7f4      	b.n	b595e <_Z19decodificarNOTA_msgi+0x16>
      return "SOL";
   b5974:	4908      	ldr	r1, [pc, #32]	; (b5998 <_Z19decodificarNOTA_msgi+0x50>)
   b5976:	e7f2      	b.n	b595e <_Z19decodificarNOTA_msgi+0x16>
      return "LA";
   b5978:	4908      	ldr	r1, [pc, #32]	; (b599c <_Z19decodificarNOTA_msgi+0x54>)
   b597a:	e7f0      	b.n	b595e <_Z19decodificarNOTA_msgi+0x16>
      return "SI";
   b597c:	4908      	ldr	r1, [pc, #32]	; (b59a0 <_Z19decodificarNOTA_msgi+0x58>)
   b597e:	e7ee      	b.n	b595e <_Z19decodificarNOTA_msgi+0x16>
      return "do";
   b5980:	4908      	ldr	r1, [pc, #32]	; (b59a4 <_Z19decodificarNOTA_msgi+0x5c>)
   b5982:	e7ec      	b.n	b595e <_Z19decodificarNOTA_msgi+0x16>
      return "Nota inválida";
   b5984:	4908      	ldr	r1, [pc, #32]	; (b59a8 <_Z19decodificarNOTA_msgi+0x60>)
   b5986:	e7ea      	b.n	b595e <_Z19decodificarNOTA_msgi+0x16>
   b5988:	000bc40f 	.word	0x000bc40f
   b598c:	000bbd62 	.word	0x000bbd62
   b5990:	000bbd65 	.word	0x000bbd65
   b5994:	000bbd68 	.word	0x000bbd68
   b5998:	000bbd6b 	.word	0x000bbd6b
   b599c:	000bbd6f 	.word	0x000bbd6f
   b59a0:	000bbd72 	.word	0x000bbd72
   b59a4:	000bc5cd 	.word	0x000bc5cd
   b59a8:	000bbd44 	.word	0x000bbd44

000b59ac <_Z19decodificarTIPO_msgi>:

String decodificarTIPO_msg(int tipo) {
   switch (tipo)
   b59ac:	2901      	cmp	r1, #1
String decodificarTIPO_msg(int tipo) {
   b59ae:	b510      	push	{r4, lr}
   b59b0:	4604      	mov	r4, r0
   switch (tipo)
   b59b2:	d007      	beq.n	b59c4 <_Z19decodificarTIPO_msgi+0x18>
   b59b4:	2902      	cmp	r1, #2
   b59b6:	d007      	beq.n	b59c8 <_Z19decodificarTIPO_msgi+0x1c>
   b59b8:	b941      	cbnz	r1, b59cc <_Z19decodificarTIPO_msgi+0x20>
   {
   case 0:
      return "_C";
   b59ba:	4905      	ldr	r1, [pc, #20]	; (b59d0 <_Z19decodificarTIPO_msgi+0x24>)

   case 2:
      return "_B";

   default:
      return "Tipo inválido";
   b59bc:	f005 f9e1 	bl	bad82 <_ZN6StringC1EPK19__FlashStringHelper>
   }
}
   b59c0:	4620      	mov	r0, r4
   b59c2:	bd10      	pop	{r4, pc}
      return "_N";
   b59c4:	4903      	ldr	r1, [pc, #12]	; (b59d4 <_Z19decodificarTIPO_msgi+0x28>)
   b59c6:	e7f9      	b.n	b59bc <_Z19decodificarTIPO_msgi+0x10>
      return "_B";
   b59c8:	4903      	ldr	r1, [pc, #12]	; (b59d8 <_Z19decodificarTIPO_msgi+0x2c>)
   b59ca:	e7f7      	b.n	b59bc <_Z19decodificarTIPO_msgi+0x10>
      return "Tipo inválido";
   b59cc:	4903      	ldr	r1, [pc, #12]	; (b59dc <_Z19decodificarTIPO_msgi+0x30>)
   b59ce:	e7f5      	b.n	b59bc <_Z19decodificarTIPO_msgi+0x10>
   b59d0:	000bbd75 	.word	0x000bbd75
   b59d4:	000bbd78 	.word	0x000bbd78
   b59d8:	000bbd7b 	.word	0x000bbd7b
   b59dc:	000bbd53 	.word	0x000bbd53

000b59e0 <_Z14reproducirNOTAii>:

void reproducirNOTA(int nota, int tipo) {
   b59e0:	b513      	push	{r0, r1, r4, lr}
   b59e2:	460c      	mov	r4, r1
   int frecuencia = decodificarNOTA(nota);
   b59e4:	f7ff ff68 	bl	b58b8 <_Z15decodificarNOTAi>
   b59e8:	9001      	str	r0, [sp, #4]
   int duracion = decodificarTIPO(tipo);
   b59ea:	4620      	mov	r0, r4
   b59ec:	f7ff ff98 	bl	b5920 <_Z15decodificarTIPOi>

   tone(Zumbador_PIN, frecuencia);
   b59f0:	9901      	ldr	r1, [sp, #4]
   b59f2:	2200      	movs	r2, #0
   int duracion = decodificarTIPO(tipo);
   b59f4:	4604      	mov	r4, r0
   tone(Zumbador_PIN, frecuencia);
   b59f6:	2006      	movs	r0, #6
   b59f8:	f005 fd30 	bl	bb45c <tone>
   delay(duracion);
   b59fc:	4620      	mov	r0, r4
   b59fe:	f005 fb6e 	bl	bb0de <delay>
   noTone(Zumbador_PIN);
   b5a02:	2006      	movs	r0, #6
   b5a04:	f005 fd41 	bl	bb48a <noTone>
   delay(30);
   b5a08:	201e      	movs	r0, #30
}
   b5a0a:	b002      	add	sp, #8
   b5a0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   delay(30);
   b5a10:	f005 bb65 	b.w	bb0de <delay>

000b5a14 <_Z13isValidSensori>:
   return type == 0;
}

// TRUE Si el disposivo no ha sido utilizado en el bloque ACTUAL.
bool isValidSensor(int deviceID)
{
   b5a14:	b510      	push	{r4, lr}
  for (int i = 0; i < bloques[numBloque].numSensores; i++)
   b5a16:	4b0d      	ldr	r3, [pc, #52]	; (b5a4c <_Z13isValidSensori+0x38>)
   b5a18:	681a      	ldr	r2, [r3, #0]
   b5a1a:	4b0d      	ldr	r3, [pc, #52]	; (b5a50 <_Z13isValidSensori+0x3c>)
   b5a1c:	f44f 713b 	mov.w	r1, #748	; 0x2ec
   b5a20:	434a      	muls	r2, r1
   b5a22:	5899      	ldr	r1, [r3, r2]
   b5a24:	4413      	add	r3, r2
   b5a26:	2200      	movs	r2, #0
   b5a28:	4291      	cmp	r1, r2
   b5a2a:	dd0d      	ble.n	b5a48 <_Z13isValidSensori+0x34>
  {
    if (bloques[numBloque].sensores[i].id == deviceID)
   b5a2c:	685c      	ldr	r4, [r3, #4]
   b5a2e:	4284      	cmp	r4, r0
   b5a30:	f103 0310 	add.w	r3, r3, #16
   b5a34:	d106      	bne.n	b5a44 <_Z13isValidSensori+0x30>
    {
      Serial.println("Invalid sensor! -> Sensor repetido en el bloque");
   b5a36:	f005 fce7 	bl	bb408 <_Z16_fetch_usbserialv>
   b5a3a:	4906      	ldr	r1, [pc, #24]	; (b5a54 <_Z13isValidSensori+0x40>)
   b5a3c:	f005 fa95 	bl	baf6a <_ZN5Print7printlnEPKc>
   b5a40:	2000      	movs	r0, #0
      return false;
    }
  };

  return true;
}
   b5a42:	bd10      	pop	{r4, pc}
  for (int i = 0; i < bloques[numBloque].numSensores; i++)
   b5a44:	3201      	adds	r2, #1
   b5a46:	e7ef      	b.n	b5a28 <_Z13isValidSensori+0x14>
  return true;
   b5a48:	2001      	movs	r0, #1
   b5a4a:	e7fa      	b.n	b5a42 <_Z13isValidSensori+0x2e>
   b5a4c:	2003c688 	.word	0x2003c688
   b5a50:	2003cd14 	.word	0x2003cd14
   b5a54:	000bbd7e 	.word	0x000bbd7e

000b5a58 <_Z11isNewSensori>:

// -1 si el sensor es nuevo, o el puerto donde esta siendo usado.
int isNewSensor(int deviceID)
{
   b5a58:	b5f0      	push	{r4, r5, r6, r7, lr}
  for (int i = 0; i <= numBloque; i++)
   b5a5a:	4b11      	ldr	r3, [pc, #68]	; (b5aa0 <_Z11isNewSensori+0x48>)
   b5a5c:	4a11      	ldr	r2, [pc, #68]	; (b5aa4 <_Z11isNewSensori+0x4c>)
   b5a5e:	681e      	ldr	r6, [r3, #0]
   b5a60:	4694      	mov	ip, r2
   b5a62:	2300      	movs	r3, #0
   b5a64:	429e      	cmp	r6, r3
   b5a66:	db17      	blt.n	b5a98 <_Z11isNewSensori+0x40>
  {
    for (int j = 0; j < bloques[i].numSensores; j++)
   b5a68:	6817      	ldr	r7, [r2, #0]
   b5a6a:	4615      	mov	r5, r2
   b5a6c:	2100      	movs	r1, #0
   b5a6e:	428f      	cmp	r7, r1
   b5a70:	dd0e      	ble.n	b5a90 <_Z11isNewSensori+0x38>
    {
      if (bloques[i].sensores[j].id == deviceID)
   b5a72:	686c      	ldr	r4, [r5, #4]
   b5a74:	4284      	cmp	r4, r0
   b5a76:	f105 0510 	add.w	r5, r5, #16
   b5a7a:	d107      	bne.n	b5a8c <_Z11isNewSensori+0x34>
        return bloques[i].sensores[j].puerto;
   b5a7c:	f44f 723b 	mov.w	r2, #748	; 0x2ec
   b5a80:	4353      	muls	r3, r2
   b5a82:	eb03 1301 	add.w	r3, r3, r1, lsl #4
   b5a86:	4463      	add	r3, ip
   b5a88:	6918      	ldr	r0, [r3, #16]
    }
  }
  return -1;
}
   b5a8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    for (int j = 0; j < bloques[i].numSensores; j++)
   b5a8c:	3101      	adds	r1, #1
   b5a8e:	e7ee      	b.n	b5a6e <_Z11isNewSensori+0x16>
  for (int i = 0; i <= numBloque; i++)
   b5a90:	3301      	adds	r3, #1
   b5a92:	f502 723b 	add.w	r2, r2, #748	; 0x2ec
   b5a96:	e7e5      	b.n	b5a64 <_Z11isNewSensori+0xc>
  return -1;
   b5a98:	f04f 30ff 	mov.w	r0, #4294967295
   b5a9c:	e7f5      	b.n	b5a8a <_Z11isNewSensori+0x32>
   b5a9e:	bf00      	nop
   b5aa0:	2003c688 	.word	0x2003c688
   b5aa4:	2003cd14 	.word	0x2003cd14

000b5aa8 <_Z13isNewActuadori>:
}


// -1 si no ha sido usado en ningun bloque, o el puerto donde se encuantra conectado.
int isNewActuador(int deviceID)
{
   b5aa8:	b5f0      	push	{r4, r5, r6, r7, lr}

  for (int j = 0; j <= numBloque; j++)
   b5aaa:	4b1d      	ldr	r3, [pc, #116]	; (b5b20 <_Z13isNewActuadori+0x78>)
   b5aac:	4a1d      	ldr	r2, [pc, #116]	; (b5b24 <_Z13isNewActuadori+0x7c>)
   b5aae:	681e      	ldr	r6, [r3, #0]
   b5ab0:	4694      	mov	ip, r2
   b5ab2:	2300      	movs	r3, #0
   b5ab4:	429e      	cmp	r6, r3
   b5ab6:	db15      	blt.n	b5ae4 <_Z13isNewActuadori+0x3c>
  {
    for (int i = 0; i < bloques[j].numActuadores; i++)
   b5ab8:	f8d2 7144 	ldr.w	r7, [r2, #324]	; 0x144
   b5abc:	4615      	mov	r5, r2
   b5abe:	2100      	movs	r1, #0
   b5ac0:	428f      	cmp	r7, r1
   b5ac2:	dd24      	ble.n	b5b0e <_Z13isNewActuadori+0x66>
    {
      if (bloques[j].actuadores[i].id == deviceID)
   b5ac4:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
   b5ac8:	4284      	cmp	r4, r0
   b5aca:	f105 0514 	add.w	r5, r5, #20
   b5ace:	d11c      	bne.n	b5b0a <_Z13isNewActuadori+0x62>
      {
        return bloques[j].actuadores[i].puerto;
   b5ad0:	f44f 723b 	mov.w	r2, #748	; 0x2ec
   b5ad4:	4353      	muls	r3, r2
   b5ad6:	2214      	movs	r2, #20
   b5ad8:	fb02 3301 	mla	r3, r2, r1, r3
   b5adc:	4463      	add	r3, ip
   b5ade:	f8d3 0154 	ldr.w	r0, [r3, #340]	; 0x154
        return bloque2[0].actuadores[i].puerto;
      }
    }
  
  return -1;
}
   b5ae2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   for (int i = 0; i < bloque2[0].numActuadores; i++)
   b5ae4:	4b10      	ldr	r3, [pc, #64]	; (b5b28 <_Z13isNewActuadori+0x80>)
   b5ae6:	f8d3 4144 	ldr.w	r4, [r3, #324]	; 0x144
   b5aea:	2200      	movs	r2, #0
   b5aec:	4619      	mov	r1, r3
   b5aee:	4294      	cmp	r4, r2
   b5af0:	dd13      	ble.n	b5b1a <_Z13isNewActuadori+0x72>
      if (bloque2[0].actuadores[i].id == deviceID)
   b5af2:	f8d3 5148 	ldr.w	r5, [r3, #328]	; 0x148
   b5af6:	42a8      	cmp	r0, r5
   b5af8:	f103 0314 	add.w	r3, r3, #20
   b5afc:	d10b      	bne.n	b5b16 <_Z13isNewActuadori+0x6e>
        return bloque2[0].actuadores[i].puerto;
   b5afe:	2314      	movs	r3, #20
   b5b00:	fb03 1202 	mla	r2, r3, r2, r1
   b5b04:	f8d2 0154 	ldr.w	r0, [r2, #340]	; 0x154
   b5b08:	e7eb      	b.n	b5ae2 <_Z13isNewActuadori+0x3a>
    for (int i = 0; i < bloques[j].numActuadores; i++)
   b5b0a:	3101      	adds	r1, #1
   b5b0c:	e7d8      	b.n	b5ac0 <_Z13isNewActuadori+0x18>
  for (int j = 0; j <= numBloque; j++)
   b5b0e:	3301      	adds	r3, #1
   b5b10:	f502 723b 	add.w	r2, r2, #748	; 0x2ec
   b5b14:	e7ce      	b.n	b5ab4 <_Z13isNewActuadori+0xc>
   for (int i = 0; i < bloque2[0].numActuadores; i++)
   b5b16:	3201      	adds	r2, #1
   b5b18:	e7e9      	b.n	b5aee <_Z13isNewActuadori+0x46>
  return -1;
   b5b1a:	f04f 30ff 	mov.w	r0, #4294967295
   b5b1e:	e7e0      	b.n	b5ae2 <_Z13isNewActuadori+0x3a>
   b5b20:	2003c688 	.word	0x2003c688
   b5b24:	2003cd14 	.word	0x2003cd14
   b5b28:	2003c73c 	.word	0x2003c73c

000b5b2c <_Z14isActuadorDualii>:

// True si el actuador es usado tanto para THEN como ELSE; Necesario para no apagarlo y encenderlo constantemente.
bool isActuadorDual(int deviceID, int bloque)
{
   b5b2c:	b530      	push	{r4, r5, lr}
  int contador = 0;
  for (int i = 0; i < bloques[bloque].numActuadores; i++)
   b5b2e:	4b0c      	ldr	r3, [pc, #48]	; (b5b60 <_Z14isActuadorDualii+0x34>)
   b5b30:	f44f 723b 	mov.w	r2, #748	; 0x2ec
   b5b34:	fb02 3101 	mla	r1, r2, r1, r3
   b5b38:	2200      	movs	r2, #0
   b5b3a:	f8d1 4144 	ldr.w	r4, [r1, #324]	; 0x144
  int contador = 0;
   b5b3e:	4613      	mov	r3, r2
  for (int i = 0; i < bloques[bloque].numActuadores; i++)
   b5b40:	4294      	cmp	r4, r2
   b5b42:	dd08      	ble.n	b5b56 <_Z14isActuadorDualii+0x2a>
  {
    if (bloques[bloque].actuadores[i].id == deviceID)
   b5b44:	f8d1 5148 	ldr.w	r5, [r1, #328]	; 0x148
   b5b48:	4285      	cmp	r5, r0
   b5b4a:	d101      	bne.n	b5b50 <_Z14isActuadorDualii+0x24>
      contador++;

    if (contador > 1)
   b5b4c:	b92b      	cbnz	r3, b5b5a <_Z14isActuadorDualii+0x2e>
   b5b4e:	2301      	movs	r3, #1
  for (int i = 0; i < bloques[bloque].numActuadores; i++)
   b5b50:	3201      	adds	r2, #1
   b5b52:	3114      	adds	r1, #20
   b5b54:	e7f4      	b.n	b5b40 <_Z14isActuadorDualii+0x14>
      return true;
  }

  return false;
   b5b56:	2000      	movs	r0, #0
}
   b5b58:	bd30      	pop	{r4, r5, pc}
      return true;
   b5b5a:	4618      	mov	r0, r3
   b5b5c:	e7fc      	b.n	b5b58 <_Z14isActuadorDualii+0x2c>
   b5b5e:	bf00      	nop
   b5b60:	2003cd14 	.word	0x2003cd14

000b5b64 <_Z12makeEvaluate6BLOQUE>:

// Evaluate recorre el vector de sensores, leyendo su valor y concatenandolo con el valor del siguiente
// en funcion de la condición que los une (AND u OR). Comenienzando por el primer sensor.
bool makeEvaluate(Bloque bloque)
{
   b5b64:	b084      	sub	sp, #16
   b5b66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5b68:	ac06      	add	r4, sp, #24
   b5b6a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   bool valorEvaluado = leerSensor(bloque.sensores[0].id, bloque.sensores[0].condicion, bloque.sensores[0].puerto);
   b5b6e:	e9dd 0107 	ldrd	r0, r1, [sp, #28]
   b5b72:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   b5b74:	f7ff fb50 	bl	b5218 <_Z10leerSensoriii>
   b5b78:	ad06      	add	r5, sp, #24
   b5b7a:	4604      	mov	r4, r0

   for (int i = 1; i < bloque.numSensores; i++)
   b5b7c:	afbc      	add	r7, sp, #752	; 0x2f0
   b5b7e:	2601      	movs	r6, #1
   b5b80:	9b06      	ldr	r3, [sp, #24]
   b5b82:	42b3      	cmp	r3, r6
   b5b84:	dd12      	ble.n	b5bac <_Z12makeEvaluate6BLOQUE+0x48>
   {
      Sensor sigSensor = bloque.sensores[i];
      bool nextValor = leerSensor(sigSensor.id, sigSensor.condicion, sigSensor.puerto);
   b5b86:	e9d5 0105 	ldrd	r0, r1, [r5, #20]
   b5b8a:	6a2a      	ldr	r2, [r5, #32]
   b5b8c:	f7ff fb44 	bl	b5218 <_Z10leerSensoriii>

      if (bloque.condiciones.condicionesBloque[i - 1])
   b5b90:	f817 3b01 	ldrb.w	r3, [r7], #1
   b5b94:	b133      	cbz	r3, b5ba4 <_Z12makeEvaluate6BLOQUE+0x40>
         valorEvaluado = (valorEvaluado && nextValor);
   b5b96:	2c00      	cmp	r4, #0
   b5b98:	bf08      	it	eq
   b5b9a:	2000      	moveq	r0, #0
   for (int i = 1; i < bloque.numSensores; i++)
   b5b9c:	3601      	adds	r6, #1
   b5b9e:	3510      	adds	r5, #16
   b5ba0:	4604      	mov	r4, r0
   b5ba2:	e7ed      	b.n	b5b80 <_Z12makeEvaluate6BLOQUE+0x1c>
         valorEvaluado = (valorEvaluado && nextValor);
   b5ba4:	2c00      	cmp	r4, #0
   b5ba6:	bf18      	it	ne
   b5ba8:	4620      	movne	r0, r4
   b5baa:	e7f7      	b.n	b5b9c <_Z12makeEvaluate6BLOQUE+0x38>
      else
         valorEvaluado = (valorEvaluado || nextValor);
   }

   return valorEvaluado;
}
   b5bac:	4620      	mov	r0, r4
   b5bae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   b5bb2:	b004      	add	sp, #16
   b5bb4:	4770      	bx	lr

000b5bb6 <_Z4atoiPc>:
      Serial.print(buffer[i], HEX);
   }
}

int atoi(char *str)
{
   b5bb6:	b530      	push	{r4, r5, lr}
   int num = 0;
   int i = 0;
   bool isNegetive = false;
   if (str[i] == '-')
   b5bb8:	7803      	ldrb	r3, [r0, #0]
   b5bba:	2b2d      	cmp	r3, #45	; 0x2d
   {
      isNegetive = true;
   b5bbc:	bf0c      	ite	eq
   b5bbe:	2201      	moveq	r2, #1
   bool isNegetive = false;
   b5bc0:	2200      	movne	r2, #0
   int i = 0;
   b5bc2:	4613      	mov	r3, r2
   b5bc4:	4403      	add	r3, r0
      i++;
   }

   while (str[i] && (str[i] >= '0' && str[i] <= '9'))
   {
      num = num * 10 + (str[i] - '0');
   b5bc6:	240a      	movs	r4, #10
      i++;
   b5bc8:	2000      	movs	r0, #0
   while (str[i] && (str[i] >= '0' && str[i] <= '9'))
   b5bca:	f813 1b01 	ldrb.w	r1, [r3], #1
   b5bce:	3930      	subs	r1, #48	; 0x30
   b5bd0:	b2cd      	uxtb	r5, r1
   b5bd2:	2d09      	cmp	r5, #9
   b5bd4:	d802      	bhi.n	b5bdc <_Z4atoiPc+0x26>
      num = num * 10 + (str[i] - '0');
   b5bd6:	fb04 1000 	mla	r0, r4, r0, r1
   while (str[i] && (str[i] >= '0' && str[i] <= '9'))
   b5bda:	e7f6      	b.n	b5bca <_Z4atoiPc+0x14>
      i++;
   }

   if (isNegetive)
   b5bdc:	b102      	cbz	r2, b5be0 <_Z4atoiPc+0x2a>
      num = -1 * num;
   b5bde:	4240      	negs	r0, r0
   return num;
}
   b5be0:	bd30      	pop	{r4, r5, pc}

000b5be2 <_Z5splitPcS_Pi>:

void split(char cadena[], char delim[], int solution[])
{
   b5be2:	b538      	push	{r3, r4, r5, lr}
   b5be4:	4614      	mov	r4, r2
   b5be6:	460d      	mov	r5, r1
   char *ptr = strtok(cadena, delim);
   b5be8:	f005 ffb8 	bl	bbb5c <strtok>
   int j = 0;
   b5bec:	3c04      	subs	r4, #4
   while (ptr != NULL)
   b5bee:	b140      	cbz	r0, b5c02 <_Z5splitPcS_Pi+0x20>
   {
      solution[j] = atoi(ptr);
   b5bf0:	f7ff ffe1 	bl	b5bb6 <_Z4atoiPc>
      j++;
      ptr = strtok(NULL, delim);
   b5bf4:	4629      	mov	r1, r5
      solution[j] = atoi(ptr);
   b5bf6:	f844 0f04 	str.w	r0, [r4, #4]!
      ptr = strtok(NULL, delim);
   b5bfa:	2000      	movs	r0, #0
   b5bfc:	f005 ffae 	bl	bbb5c <strtok>
   while (ptr != NULL)
   b5c00:	e7f5      	b.n	b5bee <_Z5splitPcS_Pi+0xc>
   }
}
   b5c02:	bd38      	pop	{r3, r4, r5, pc}

000b5c04 <_Z17readDataFromBlockhPhh>:
      tarjeta++;
   }
}

bool readDataFromBlock(byte blockAddr, byte buffer[], byte size)
{
   b5c04:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b5c06:	f88d 2007 	strb.w	r2, [sp, #7]
   // Serial.print(F("Leer datos del sector ")); Serial.print(blockAddr);
   status = (MFRC522::StatusCode)mfrc522.MIFARE_Read(blockAddr, buffer, &size);
   b5c0a:	f10d 0307 	add.w	r3, sp, #7
   b5c0e:	460a      	mov	r2, r1
   b5c10:	4601      	mov	r1, r0
   b5c12:	480d      	ldr	r0, [pc, #52]	; (b5c48 <_Z17readDataFromBlockhPhh+0x44>)
   b5c14:	4d0d      	ldr	r5, [pc, #52]	; (b5c4c <_Z17readDataFromBlockhPhh+0x48>)
   b5c16:	f003 fcb5 	bl	b9584 <_ZN7MFRC52211MIFARE_ReadEhPhS0_>
   if (status != MFRC522::STATUS_OK)
   b5c1a:	2801      	cmp	r0, #1
   status = (MFRC522::StatusCode)mfrc522.MIFARE_Read(blockAddr, buffer, &size);
   b5c1c:	7028      	strb	r0, [r5, #0]
   if (status != MFRC522::STATUS_OK)
   b5c1e:	d010      	beq.n	b5c42 <_Z17readDataFromBlockhPhh+0x3e>
   {
      Serial.print(F("MIFARE_Read() failed: "));
   b5c20:	f005 fbf2 	bl	bb408 <_Z16_fetch_usbserialv>
   b5c24:	490a      	ldr	r1, [pc, #40]	; (b5c50 <_Z17readDataFromBlockhPhh+0x4c>)
   b5c26:	f005 f98d 	bl	baf44 <_ZN5Print5printEPKc>
      Serial.println(mfrc522.GetStatusCodeName(status));
   b5c2a:	f005 fbed 	bl	bb408 <_Z16_fetch_usbserialv>
   b5c2e:	7829      	ldrb	r1, [r5, #0]
   b5c30:	4604      	mov	r4, r0
   b5c32:	4805      	ldr	r0, [pc, #20]	; (b5c48 <_Z17readDataFromBlockhPhh+0x44>)
   b5c34:	f003 f9fa 	bl	b902c <_ZN7MFRC52217GetStatusCodeNameEh>
   b5c38:	4601      	mov	r1, r0
   b5c3a:	4620      	mov	r0, r4
   b5c3c:	f005 f995 	bl	baf6a <_ZN5Print7printlnEPKc>
   b5c40:	2000      	movs	r0, #0
      return false;
   }
   return true;
}
   b5c42:	b003      	add	sp, #12
   b5c44:	bd30      	pop	{r4, r5, pc}
   b5c46:	bf00      	nop
   b5c48:	2003d6e8 	.word	0x2003d6e8
   b5c4c:	2003dc30 	.word	0x2003dc30
   b5c50:	000bbdae 	.word	0x000bbdae

000b5c54 <_Z8getTagIDPi>:

void getTagID(int infoTag[])
{
   b5c54:	b5f0      	push	{r4, r5, r6, r7, lr}
   b5c56:	b08d      	sub	sp, #52	; 0x34

   status = (MFRC522::StatusCode)mfrc522.PCD_Authenticate(MFRC522::PICC_CMD_MF_AUTH_KEY_A, trailerBlock, &key, &(mfrc522.uid));
   b5c58:	4d1e      	ldr	r5, [pc, #120]	; (b5cd4 <_Z8getTagIDPi+0x80>)
   b5c5a:	4a1f      	ldr	r2, [pc, #124]	; (b5cd8 <_Z8getTagIDPi+0x84>)
   b5c5c:	9500      	str	r5, [sp, #0]
   b5c5e:	4b1f      	ldr	r3, [pc, #124]	; (b5cdc <_Z8getTagIDPi+0x88>)
   b5c60:	7812      	ldrb	r2, [r2, #0]
   b5c62:	4f1f      	ldr	r7, [pc, #124]	; (b5ce0 <_Z8getTagIDPi+0x8c>)
{
   b5c64:	4606      	mov	r6, r0
   status = (MFRC522::StatusCode)mfrc522.PCD_Authenticate(MFRC522::PICC_CMD_MF_AUTH_KEY_A, trailerBlock, &key, &(mfrc522.uid));
   b5c66:	2160      	movs	r1, #96	; 0x60
   b5c68:	4628      	mov	r0, r5
   b5c6a:	f003 fcac 	bl	b95c6 <_ZN7MFRC52216PCD_AuthenticateEhhPNS_10MIFARE_KeyEPNS_3UidE>
   if (status != MFRC522::STATUS_OK)
   b5c6e:	2801      	cmp	r0, #1
   status = (MFRC522::StatusCode)mfrc522.PCD_Authenticate(MFRC522::PICC_CMD_MF_AUTH_KEY_A, trailerBlock, &key, &(mfrc522.uid));
   b5c70:	7038      	strb	r0, [r7, #0]
   if (status != MFRC522::STATUS_OK)
   b5c72:	d00f      	beq.n	b5c94 <_Z8getTagIDPi+0x40>
   {
      Serial.print(F("PCD_Authenticate() failed: "));
   b5c74:	f005 fbc8 	bl	bb408 <_Z16_fetch_usbserialv>
   b5c78:	491a      	ldr	r1, [pc, #104]	; (b5ce4 <_Z8getTagIDPi+0x90>)
   b5c7a:	f005 f963 	bl	baf44 <_ZN5Print5printEPKc>
         Serial.println(mfrc522.GetStatusCodeName(status));
   b5c7e:	f005 fbc3 	bl	bb408 <_Z16_fetch_usbserialv>
   b5c82:	7839      	ldrb	r1, [r7, #0]
   b5c84:	4604      	mov	r4, r0
   b5c86:	4628      	mov	r0, r5
   b5c88:	f003 f9d0 	bl	b902c <_ZN7MFRC52217GetStatusCodeNameEh>
   b5c8c:	4601      	mov	r1, r0
   b5c8e:	4620      	mov	r0, r4
   b5c90:	f005 f96b 	bl	baf6a <_ZN5Print7printlnEPKc>
      //writeDataToBLock(blockAddr);

      // Read data from the block's Tag.
      byte buffer[18];
      byte size = sizeof(buffer);
      if (!readDataFromBlock(blockAddr, buffer, size))
   b5c94:	4b14      	ldr	r3, [pc, #80]	; (b5ce8 <_Z8getTagIDPi+0x94>)
   b5c96:	2212      	movs	r2, #18
   b5c98:	7818      	ldrb	r0, [r3, #0]
   b5c9a:	a907      	add	r1, sp, #28
   b5c9c:	f7ff ffb2 	bl	b5c04 <_Z17readDataFromBlockhPhh>
   b5ca0:	b1b0      	cbz	r0, b5cd0 <_Z8getTagIDPi+0x7c>
      // Convert from hex to String:
      char tagInfo[16];
      int i = 0;
      for (byte j = 0; j < sizeof(buffer); j++)
      {
         tagInfo[i] = (char)buffer[j];
   b5ca2:	ac07      	add	r4, sp, #28
   b5ca4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b5ca6:	ad03      	add	r5, sp, #12
   b5ca8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b5caa:	6823      	ldr	r3, [r4, #0]
   b5cac:	802b      	strh	r3, [r5, #0]
         i++;
         // Serial.write(buffer[j]);
         // tagInfo += Serial.write(buffer[j]);
      }
      Serial.printlnf("TagInfo: %s", tagInfo);
   b5cae:	f005 fbab 	bl	bb408 <_Z16_fetch_usbserialv>
   b5cb2:	490e      	ldr	r1, [pc, #56]	; (b5cec <_Z8getTagIDPi+0x98>)
   b5cb4:	aa03      	add	r2, sp, #12
   b5cb6:	f7fe ff25 	bl	b4b04 <_ZN5Print8printlnfEPKcz>
   split(tagInfo, delim, infoTag);
   b5cba:	490d      	ldr	r1, [pc, #52]	; (b5cf0 <_Z8getTagIDPi+0x9c>)
   b5cbc:	4632      	mov	r2, r6
   b5cbe:	a803      	add	r0, sp, #12
   b5cc0:	f7ff ff8f 	bl	b5be2 <_Z5splitPcS_Pi>

   // Evitamos seguir leyendo la misma tag.
   mfrc522.PICC_HaltA();
   b5cc4:	4803      	ldr	r0, [pc, #12]	; (b5cd4 <_Z8getTagIDPi+0x80>)
   b5cc6:	f003 fc38 	bl	b953a <_ZN7MFRC52210PICC_HaltAEv>
   // Stop encryption on PCD
   mfrc522.PCD_StopCrypto1();
   b5cca:	4802      	ldr	r0, [pc, #8]	; (b5cd4 <_Z8getTagIDPi+0x80>)
   b5ccc:	f003 fa95 	bl	b91fa <_ZN7MFRC52215PCD_StopCrypto1Ev>
}
   b5cd0:	b00d      	add	sp, #52	; 0x34
   b5cd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b5cd4:	2003d6e8 	.word	0x2003d6e8
   b5cd8:	2003c6ac 	.word	0x2003c6ac
   b5cdc:	2003d6d7 	.word	0x2003d6d7
   b5ce0:	2003dc30 	.word	0x2003dc30
   b5ce4:	000bbdc5 	.word	0x000bbdc5
   b5ce8:	2003c680 	.word	0x2003c680
   b5cec:	000bbde1 	.word	0x000bbde1
   b5cf0:	2003c681 	.word	0x2003c681

000b5cf4 <_Z11identificarii>:

String identificar(int id, int cond){
   b5cf4:	b570      	push	{r4, r5, r6, lr}
   b5cf6:	460e      	mov	r6, r1
// Obtenemos el nombre del dispositivo a partir de su código
      String res;
   b5cf8:	493e      	ldr	r1, [pc, #248]	; (b5df4 <_Z11identificarii+0x100>)
String identificar(int id, int cond){
   b5cfa:	4604      	mov	r4, r0
   b5cfc:	4615      	mov	r5, r2
      String res;
   b5cfe:	f005 f840 	bl	bad82 <_ZN6StringC1EPK19__FlashStringHelper>
      if (id == 0){
   b5d02:	b9f6      	cbnz	r6, b5d42 <_Z11identificarii+0x4e>
            switch (cond){
   b5d04:	2d08      	cmp	r5, #8
   b5d06:	d80a      	bhi.n	b5d1e <_Z11identificarii+0x2a>
   b5d08:	e8df f005 	tbb	[pc, r5]
   b5d0c:	0f0d0b05 	.word	0x0f0d0b05
   b5d10:	17151311 	.word	0x17151311
   b5d14:	19          	.byte	0x19
   b5d15:	00          	.byte	0x00
               case 0:{
                  res = "      Luz verde ";
   b5d16:	4938      	ldr	r1, [pc, #224]	; (b5df8 <_Z11identificarii+0x104>)
               case 12:{
                  res = "   Agua turbia ";
                  break;
               }
               case 13:{
                  res = "   Ventilador ";
   b5d18:	4620      	mov	r0, r4
   b5d1a:	f005 f885 	bl	bae28 <_ZN6StringaSEPKc>
               }
            
         }

         return res;
}
   b5d1e:	4620      	mov	r0, r4
   b5d20:	bd70      	pop	{r4, r5, r6, pc}
                  res = "      Luz Roja ";
   b5d22:	4936      	ldr	r1, [pc, #216]	; (b5dfc <_Z11identificarii+0x108>)
   b5d24:	e7f8      	b.n	b5d18 <_Z11identificarii+0x24>
                  res = "    Luz Amarilla ";
   b5d26:	4936      	ldr	r1, [pc, #216]	; (b5e00 <_Z11identificarii+0x10c>)
   b5d28:	e7f6      	b.n	b5d18 <_Z11identificarii+0x24>
                  res = "     Luz Morada ";
   b5d2a:	4936      	ldr	r1, [pc, #216]	; (b5e04 <_Z11identificarii+0x110>)
   b5d2c:	e7f4      	b.n	b5d18 <_Z11identificarii+0x24>
                  res = "      Luz Azul ";
   b5d2e:	4936      	ldr	r1, [pc, #216]	; (b5e08 <_Z11identificarii+0x114>)
   b5d30:	e7f2      	b.n	b5d18 <_Z11identificarii+0x24>
                  res = "    Luz Naranja ";
   b5d32:	4936      	ldr	r1, [pc, #216]	; (b5e0c <_Z11identificarii+0x118>)
   b5d34:	e7f0      	b.n	b5d18 <_Z11identificarii+0x24>
                  res = "    Luz parpadea ";
   b5d36:	4936      	ldr	r1, [pc, #216]	; (b5e10 <_Z11identificarii+0x11c>)
   b5d38:	e7ee      	b.n	b5d18 <_Z11identificarii+0x24>
                  res = "    Luz Arcoiris ";
   b5d3a:	4936      	ldr	r1, [pc, #216]	; (b5e14 <_Z11identificarii+0x120>)
   b5d3c:	e7ec      	b.n	b5d18 <_Z11identificarii+0x24>
                  res = "    Luz apagada ";
   b5d3e:	4936      	ldr	r1, [pc, #216]	; (b5e18 <_Z11identificarii+0x124>)
   b5d40:	e7ea      	b.n	b5d18 <_Z11identificarii+0x24>
         } switch (id){
   b5d42:	3e01      	subs	r6, #1
   b5d44:	2e0c      	cmp	r6, #12
   b5d46:	d8ea      	bhi.n	b5d1e <_Z11identificarii+0x2a>
   b5d48:	a301      	add	r3, pc, #4	; (adr r3, b5d50 <_Z11identificarii+0x5c>)
   b5d4a:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
   b5d4e:	bf00      	nop
   b5d50:	000b5d85 	.word	0x000b5d85
   b5d54:	000b5d8f 	.word	0x000b5d8f
   b5d58:	000b5d99 	.word	0x000b5d99
   b5d5c:	000b5da3 	.word	0x000b5da3
   b5d60:	000b5dad 	.word	0x000b5dad
   b5d64:	000b5db7 	.word	0x000b5db7
   b5d68:	000b5dc1 	.word	0x000b5dc1
   b5d6c:	000b5dcb 	.word	0x000b5dcb
   b5d70:	000b5dd5 	.word	0x000b5dd5
   b5d74:	000b5d1f 	.word	0x000b5d1f
   b5d78:	000b5d1f 	.word	0x000b5d1f
   b5d7c:	000b5ded 	.word	0x000b5ded
   b5d80:	000b5df1 	.word	0x000b5df1
                  if (cond == 1){res = "Zumbador intermitente ";}
   b5d84:	2d01      	cmp	r5, #1
   b5d86:	bf0c      	ite	eq
   b5d88:	4924      	ldreq	r1, [pc, #144]	; (b5e1c <_Z11identificarii+0x128>)
                  else{res = "      Zumbador ";}
   b5d8a:	4925      	ldrne	r1, [pc, #148]	; (b5e20 <_Z11identificarii+0x12c>)
   b5d8c:	e7c4      	b.n	b5d18 <_Z11identificarii+0x24>
                  if (cond == 1){res = "      Mucha luz ";}
   b5d8e:	2d01      	cmp	r5, #1
   b5d90:	bf0c      	ite	eq
   b5d92:	4924      	ldreq	r1, [pc, #144]	; (b5e24 <_Z11identificarii+0x130>)
                  else{res = "      Poca luz ";}
   b5d94:	4924      	ldrne	r1, [pc, #144]	; (b5e28 <_Z11identificarii+0x134>)
   b5d96:	e7bf      	b.n	b5d18 <_Z11identificarii+0x24>
                  if (cond == 1){res = "     Mucho ruido ";}
   b5d98:	2d01      	cmp	r5, #1
   b5d9a:	bf0c      	ite	eq
   b5d9c:	4923      	ldreq	r1, [pc, #140]	; (b5e2c <_Z11identificarii+0x138>)
                  else{res = "     Poco ruido ";}
   b5d9e:	4924      	ldrne	r1, [pc, #144]	; (b5e30 <_Z11identificarii+0x13c>)
   b5da0:	e7ba      	b.n	b5d18 <_Z11identificarii+0x24>
                  if (cond == 1){res = "   Boton activado ";}
   b5da2:	2d01      	cmp	r5, #1
   b5da4:	bf0c      	ite	eq
   b5da6:	4923      	ldreq	r1, [pc, #140]	; (b5e34 <_Z11identificarii+0x140>)
                  else{res = "  Boton desactivado ";}
   b5da8:	4923      	ldrne	r1, [pc, #140]	; (b5e38 <_Z11identificarii+0x144>)
   b5daa:	e7b5      	b.n	b5d18 <_Z11identificarii+0x24>
                  if (cond == 1){res = "     Giro pequeño ";}
   b5dac:	2d01      	cmp	r5, #1
   b5dae:	bf0c      	ite	eq
   b5db0:	4922      	ldreq	r1, [pc, #136]	; (b5e3c <_Z11identificarii+0x148>)
                  else{res = "    Giro grande ";}
   b5db2:	4923      	ldrne	r1, [pc, #140]	; (b5e40 <_Z11identificarii+0x14c>)
   b5db4:	e7b0      	b.n	b5d18 <_Z11identificarii+0x24>
                  if (cond == 2){res = "      Calor ";}
   b5db6:	2d02      	cmp	r5, #2
   b5db8:	bf0c      	ite	eq
   b5dba:	4922      	ldreq	r1, [pc, #136]	; (b5e44 <_Z11identificarii+0x150>)
                  else{res = "      Frio ";}
   b5dbc:	4922      	ldrne	r1, [pc, #136]	; (b5e48 <_Z11identificarii+0x154>)
   b5dbe:	e7ab      	b.n	b5d18 <_Z11identificarii+0x24>
                  if (cond == 1){res = "   Mucha distancia ";}
   b5dc0:	2d01      	cmp	r5, #1
   b5dc2:	bf0c      	ite	eq
   b5dc4:	4921      	ldreq	r1, [pc, #132]	; (b5e4c <_Z11identificarii+0x158>)
                  else{res = "   Poca distancia ";}
   b5dc6:	4922      	ldrne	r1, [pc, #136]	; (b5e50 <_Z11identificarii+0x15c>)
   b5dc8:	e7a6      	b.n	b5d18 <_Z11identificarii+0x24>
                  if (cond == 1){res = "    Hay agua ";}
   b5dca:	2d01      	cmp	r5, #1
   b5dcc:	bf0c      	ite	eq
   b5dce:	4921      	ldreq	r1, [pc, #132]	; (b5e54 <_Z11identificarii+0x160>)
                  else{res = " No hay agua ";}
   b5dd0:	4921      	ldrne	r1, [pc, #132]	; (b5e58 <_Z11identificarii+0x164>)
   b5dd2:	e7a1      	b.n	b5d18 <_Z11identificarii+0x24>
                  if (cond == 0 ){res = "Boton dual no activado";}
   b5dd4:	b90d      	cbnz	r5, b5dda <_Z11identificarii+0xe6>
   b5dd6:	4921      	ldr	r1, [pc, #132]	; (b5e5c <_Z11identificarii+0x168>)
   b5dd8:	e79e      	b.n	b5d18 <_Z11identificarii+0x24>
                  else if (cond == 1){res = "Boton dual derecho";}
   b5dda:	2d01      	cmp	r5, #1
   b5ddc:	d101      	bne.n	b5de2 <_Z11identificarii+0xee>
   b5dde:	4920      	ldr	r1, [pc, #128]	; (b5e60 <_Z11identificarii+0x16c>)
   b5de0:	e79a      	b.n	b5d18 <_Z11identificarii+0x24>
                  else if (cond ==2){res = "Boton dual izquierdo";}
   b5de2:	2d02      	cmp	r5, #2
   b5de4:	bf0c      	ite	eq
   b5de6:	491f      	ldreq	r1, [pc, #124]	; (b5e64 <_Z11identificarii+0x170>)
                  else {res = "Boton dual doble";}
   b5de8:	491f      	ldrne	r1, [pc, #124]	; (b5e68 <_Z11identificarii+0x174>)
   b5dea:	e795      	b.n	b5d18 <_Z11identificarii+0x24>
                  res = "   Agua turbia ";
   b5dec:	491f      	ldr	r1, [pc, #124]	; (b5e6c <_Z11identificarii+0x178>)
   b5dee:	e793      	b.n	b5d18 <_Z11identificarii+0x24>
                  res = "   Ventilador ";
   b5df0:	491f      	ldr	r1, [pc, #124]	; (b5e70 <_Z11identificarii+0x17c>)
   b5df2:	e791      	b.n	b5d18 <_Z11identificarii+0x24>
   b5df4:	000bc0fa 	.word	0x000bc0fa
   b5df8:	000bbded 	.word	0x000bbded
   b5dfc:	000bbdfe 	.word	0x000bbdfe
   b5e00:	000bbe0e 	.word	0x000bbe0e
   b5e04:	000bbe20 	.word	0x000bbe20
   b5e08:	000bbe31 	.word	0x000bbe31
   b5e0c:	000bbe41 	.word	0x000bbe41
   b5e10:	000bbe52 	.word	0x000bbe52
   b5e14:	000bbe64 	.word	0x000bbe64
   b5e18:	000bbe76 	.word	0x000bbe76
   b5e1c:	000bbe87 	.word	0x000bbe87
   b5e20:	000bbe9e 	.word	0x000bbe9e
   b5e24:	000bbeae 	.word	0x000bbeae
   b5e28:	000bbebf 	.word	0x000bbebf
   b5e2c:	000bbecf 	.word	0x000bbecf
   b5e30:	000bbee1 	.word	0x000bbee1
   b5e34:	000bbef2 	.word	0x000bbef2
   b5e38:	000bbf05 	.word	0x000bbf05
   b5e3c:	000bbf1a 	.word	0x000bbf1a
   b5e40:	000bbf2e 	.word	0x000bbf2e
   b5e44:	000bbf3f 	.word	0x000bbf3f
   b5e48:	000bbf4c 	.word	0x000bbf4c
   b5e4c:	000bbf58 	.word	0x000bbf58
   b5e50:	000bbf6c 	.word	0x000bbf6c
   b5e54:	000bbf7f 	.word	0x000bbf7f
   b5e58:	000bbf8d 	.word	0x000bbf8d
   b5e5c:	000bbf9b 	.word	0x000bbf9b
   b5e60:	000bbfb2 	.word	0x000bbfb2
   b5e64:	000bbfc5 	.word	0x000bbfc5
   b5e68:	000bbfda 	.word	0x000bbfda
   b5e6c:	000bbfeb 	.word	0x000bbfeb
   b5e70:	000bbffb 	.word	0x000bbffb

000b5e74 <_Z6listarv>:

void listar(){
   b5e74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      // Mostramos la lista de targetas pasadas en el display.
      int elems = bloque2[0].numActuadores + bloques[0].numActuadores + bloques[0].numSensores + bloques[1].numActuadores + bloques[1].numSensores - 3;
   b5e78:	4ab7      	ldr	r2, [pc, #732]	; (b6158 <_Z6listarv+0x2e4>)
   b5e7a:	4eb8      	ldr	r6, [pc, #736]	; (b615c <_Z6listarv+0x2e8>)
   b5e7c:	f8d2 5144 	ldr.w	r5, [r2, #324]	; 0x144
   b5e80:	f8d6 3144 	ldr.w	r3, [r6, #324]	; 0x144
      // Calculamos el número de elementos que debemos mostrar
      String st;
   b5e84:	49b6      	ldr	r1, [pc, #728]	; (b6160 <_Z6listarv+0x2ec>)
      int c;
      display.clearDisplay();

      for (c = 0; c < bloque2[0].numActuadores; c++){
         st = identificar(bloque2[0].actuadores[c].id, bloque2[0].actuadores[c].condicion);
         display.setCursor(0, (c*10) - scroll + 3);
   b5e86:	f8df a314 	ldr.w	sl, [pc, #788]	; b619c <_Z6listarv+0x328>
    @brief  Set text cursor location
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
   b5e8a:	f8df 92d8 	ldr.w	r9, [pc, #728]	; b6164 <_Z6listarv+0x2f0>
         snprintf(buf, sizeof(buf), st);
   b5e8e:	f8df 82e8 	ldr.w	r8, [pc, #744]	; b6178 <_Z6listarv+0x304>
      int elems = bloque2[0].numActuadores + bloques[0].numActuadores + bloques[0].numSensores + bloques[1].numActuadores + bloques[1].numSensores - 3;
   b5e92:	441d      	add	r5, r3
   b5e94:	6813      	ldr	r3, [r2, #0]
   b5e96:	441d      	add	r5, r3
   b5e98:	f8d2 3430 	ldr.w	r3, [r2, #1072]	; 0x430
void listar(){
   b5e9c:	b08b      	sub	sp, #44	; 0x2c
      int elems = bloque2[0].numActuadores + bloques[0].numActuadores + bloques[0].numSensores + bloques[1].numActuadores + bloques[1].numSensores - 3;
   b5e9e:	441d      	add	r5, r3
   b5ea0:	f8d2 32ec 	ldr.w	r3, [r2, #748]	; 0x2ec
      String st;
   b5ea4:	a802      	add	r0, sp, #8
      int elems = bloque2[0].numActuadores + bloques[0].numActuadores + bloques[0].numSensores + bloques[1].numActuadores + bloques[1].numSensores - 3;
   b5ea6:	441d      	add	r5, r3
      String st;
   b5ea8:	f004 ff6b 	bl	bad82 <_ZN6StringC1EPK19__FlashStringHelper>
      display.clearDisplay();
   b5eac:	48ad      	ldr	r0, [pc, #692]	; (b6164 <_Z6listarv+0x2f0>)
   b5eae:	f003 ff65 	bl	b9d7c <_ZN16Adafruit_SSD130612clearDisplayEv>
      for (c = 0; c < bloque2[0].numActuadores; c++){
   b5eb2:	2700      	movs	r7, #0
      int elems = bloque2[0].numActuadores + bloques[0].numActuadores + bloques[0].numSensores + bloques[1].numActuadores + bloques[1].numSensores - 3;
   b5eb4:	3d03      	subs	r5, #3
      int pos = 0;
   b5eb6:	463c      	mov	r4, r7
   b5eb8:	46b3      	mov	fp, r6
      for (c = 0; c < bloque2[0].numActuadores; c++){
   b5eba:	f8db 3144 	ldr.w	r3, [fp, #324]	; 0x144
   b5ebe:	42bb      	cmp	r3, r7
   b5ec0:	f106 0614 	add.w	r6, r6, #20
   b5ec4:	dc6b      	bgt.n	b5f9e <_Z6listarv+0x12a>
         display.print(buf);
         pos+=10;
      }

      for(i = 0; i <= numBloque; i++){
   b5ec6:	2300      	movs	r3, #0
   b5ec8:	4ea3      	ldr	r6, [pc, #652]	; (b6158 <_Z6listarv+0x2e4>)

         if ((if1 && i == 0) || if2){
            elems++;
            display.setCursor(0, 0 - scroll + 3 + pos);
   b5eca:	f8df 92d0 	ldr.w	r9, [pc, #720]	; b619c <_Z6listarv+0x328>
      for(i = 0; i <= numBloque; i++){
   b5ece:	9300      	str	r3, [sp, #0]
   b5ed0:	4ba5      	ldr	r3, [pc, #660]	; (b6168 <_Z6listarv+0x2f4>)
   b5ed2:	9a00      	ldr	r2, [sp, #0]
   b5ed4:	681b      	ldr	r3, [r3, #0]
   b5ed6:	4293      	cmp	r3, r2
   b5ed8:	f2c0 8129 	blt.w	b612e <_Z6listarv+0x2ba>
         if ((if1 && i == 0) || if2){
   b5edc:	4ba3      	ldr	r3, [pc, #652]	; (b616c <_Z6listarv+0x2f8>)
   b5ede:	781b      	ldrb	r3, [r3, #0]
   b5ee0:	b103      	cbz	r3, b5ee4 <_Z6listarv+0x70>
   b5ee2:	b11a      	cbz	r2, b5eec <_Z6listarv+0x78>
   b5ee4:	4ba2      	ldr	r3, [pc, #648]	; (b6170 <_Z6listarv+0x2fc>)
   b5ee6:	781b      	ldrb	r3, [r3, #0]
   b5ee8:	2b00      	cmp	r3, #0
   b5eea:	d07c      	beq.n	b5fe6 <_Z6listarv+0x172>
            display.setCursor(0, 0 - scroll + 3 + pos);
   b5eec:	f8d9 3000 	ldr.w	r3, [r9]
   b5ef0:	4f9c      	ldr	r7, [pc, #624]	; (b6164 <_Z6listarv+0x2f0>)
            snprintf(buf, sizeof(buf), "         IF");
   b5ef2:	49a0      	ldr	r1, [pc, #640]	; (b6174 <_Z6listarv+0x300>)
   b5ef4:	48a0      	ldr	r0, [pc, #640]	; (b6178 <_Z6listarv+0x304>)
                  if (bloques[i].condiciones.condicionesBloque[c - 1]){
                     snprintf(buf, sizeof(buf), "         AND");  
                  } else {
                     snprintf(buf, sizeof(buf), "         OR");
                  }
                  display.print(buf);
   b5ef6:	f8df a280 	ldr.w	sl, [pc, #640]	; b6178 <_Z6listarv+0x304>
            display.setCursor(0, 0 - scroll + 3 + pos);
   b5efa:	f1c3 0303 	rsb	r3, r3, #3
   b5efe:	4423      	add	r3, r4
   b5f00:	f04f 0800 	mov.w	r8, #0
   b5f04:	827b      	strh	r3, [r7, #18]
   b5f06:	f8a7 8010 	strh.w	r8, [r7, #16]
            snprintf(buf, sizeof(buf), "         IF");
   b5f0a:	f005 fe1f 	bl	bbb4c <strcpy>
            display.print(buf);
   b5f0e:	499a      	ldr	r1, [pc, #616]	; (b6178 <_Z6listarv+0x304>)
   b5f10:	4638      	mov	r0, r7
   b5f12:	f005 f817 	bl	baf44 <_ZN5Print5printEPKc>
            elems++;
   b5f16:	3501      	adds	r5, #1
            pos+=10;
   b5f18:	340a      	adds	r4, #10
   b5f1a:	46b3      	mov	fp, r6
            for (c = 0; c < bloques[i].numSensores; c++){
   b5f1c:	6833      	ldr	r3, [r6, #0]
   b5f1e:	4543      	cmp	r3, r8
   b5f20:	dd61      	ble.n	b5fe6 <_Z6listarv+0x172>
               if (c != 0){
   b5f22:	f1b8 0f00 	cmp.w	r8, #0
   b5f26:	d017      	beq.n	b5f58 <_Z6listarv+0xe4>
                  display.setCursor(0, 0 - scroll + 3 + pos);
   b5f28:	f8d9 3000 	ldr.w	r3, [r9]
   b5f2c:	f1c3 0303 	rsb	r3, r3, #3
   b5f30:	4423      	add	r3, r4
   b5f32:	827b      	strh	r3, [r7, #18]
                  if (bloques[i].condiciones.condicionesBloque[c - 1]){
   b5f34:	f206 23d7 	addw	r3, r6, #727	; 0x2d7
   b5f38:	2200      	movs	r2, #0
   b5f3a:	f813 3008 	ldrb.w	r3, [r3, r8]
   b5f3e:	823a      	strh	r2, [r7, #16]
   b5f40:	2b00      	cmp	r3, #0
   b5f42:	d04e      	beq.n	b5fe2 <_Z6listarv+0x16e>
                     snprintf(buf, sizeof(buf), "         AND");  
   b5f44:	498d      	ldr	r1, [pc, #564]	; (b617c <_Z6listarv+0x308>)
                     snprintf(buf, sizeof(buf), "         OR");
   b5f46:	4650      	mov	r0, sl
   b5f48:	f005 fe00 	bl	bbb4c <strcpy>
                  display.print(buf);
   b5f4c:	4651      	mov	r1, sl
   b5f4e:	4638      	mov	r0, r7
   b5f50:	f004 fff8 	bl	baf44 <_ZN5Print5printEPKc>
                  elems++;
   b5f54:	3501      	adds	r5, #1
                  pos+=10; 
   b5f56:	340a      	adds	r4, #10
               }
               st = identificar(bloques[i].sensores[c].id, bloques[i].sensores[c].condicion);
   b5f58:	e9db 1201 	ldrd	r1, r2, [fp, #4]
   b5f5c:	a806      	add	r0, sp, #24
   b5f5e:	f7ff fec9 	bl	b5cf4 <_Z11identificarii>
   b5f62:	a906      	add	r1, sp, #24
   b5f64:	a802      	add	r0, sp, #8
   b5f66:	f004 ff57 	bl	bae18 <_ZN6StringaSEOS_>
   b5f6a:	a806      	add	r0, sp, #24
   b5f6c:	f004 febe 	bl	bacec <_ZN6StringD1Ev>
               display.setCursor(0, 0 - scroll + 3 + pos);
   b5f70:	f8d9 3000 	ldr.w	r3, [r9]
   b5f74:	f1c3 0303 	rsb	r3, r3, #3
   b5f78:	4423      	add	r3, r4
   b5f7a:	2200      	movs	r2, #0
   b5f7c:	823a      	strh	r2, [r7, #16]
   b5f7e:	827b      	strh	r3, [r7, #18]
               snprintf(buf, sizeof(buf), st);
   b5f80:	9a02      	ldr	r2, [sp, #8]
   b5f82:	2140      	movs	r1, #64	; 0x40
   b5f84:	4650      	mov	r0, sl
   b5f86:	f004 fd3b 	bl	baa00 <snprintf>
               display.print(buf);
   b5f8a:	4651      	mov	r1, sl
   b5f8c:	4638      	mov	r0, r7
   b5f8e:	f004 ffd9 	bl	baf44 <_ZN5Print5printEPKc>
               pos+=10;
   b5f92:	340a      	adds	r4, #10
            for (c = 0; c < bloques[i].numSensores; c++){
   b5f94:	f108 0801 	add.w	r8, r8, #1
   b5f98:	f10b 0b10 	add.w	fp, fp, #16
   b5f9c:	e7be      	b.n	b5f1c <_Z6listarv+0xa8>
         st = identificar(bloque2[0].actuadores[c].id, bloque2[0].actuadores[c].condicion);
   b5f9e:	e9d6 124d 	ldrd	r1, r2, [r6, #308]	; 0x134
   b5fa2:	a806      	add	r0, sp, #24
   b5fa4:	f7ff fea6 	bl	b5cf4 <_Z11identificarii>
   b5fa8:	a906      	add	r1, sp, #24
   b5faa:	a802      	add	r0, sp, #8
   b5fac:	f004 ff34 	bl	bae18 <_ZN6StringaSEOS_>
   b5fb0:	a806      	add	r0, sp, #24
   b5fb2:	f004 fe9b 	bl	bacec <_ZN6StringD1Ev>
         display.setCursor(0, (c*10) - scroll + 3);
   b5fb6:	f8da 3000 	ldr.w	r3, [sl]
   b5fba:	f1c3 0303 	rsb	r3, r3, #3
   b5fbe:	4423      	add	r3, r4
   b5fc0:	2200      	movs	r2, #0
   b5fc2:	f8a9 2010 	strh.w	r2, [r9, #16]
   b5fc6:	f8a9 3012 	strh.w	r3, [r9, #18]
         snprintf(buf, sizeof(buf), st);
   b5fca:	9a02      	ldr	r2, [sp, #8]
   b5fcc:	2140      	movs	r1, #64	; 0x40
   b5fce:	4640      	mov	r0, r8
   b5fd0:	f004 fd16 	bl	baa00 <snprintf>
         display.print(buf);
   b5fd4:	4863      	ldr	r0, [pc, #396]	; (b6164 <_Z6listarv+0x2f0>)
   b5fd6:	4641      	mov	r1, r8
   b5fd8:	f004 ffb4 	bl	baf44 <_ZN5Print5printEPKc>
         pos+=10;
   b5fdc:	340a      	adds	r4, #10
      for (c = 0; c < bloque2[0].numActuadores; c++){
   b5fde:	3701      	adds	r7, #1
   b5fe0:	e76b      	b.n	b5eba <_Z6listarv+0x46>
                     snprintf(buf, sizeof(buf), "         OR");
   b5fe2:	4967      	ldr	r1, [pc, #412]	; (b6180 <_Z6listarv+0x30c>)
   b5fe4:	e7af      	b.n	b5f46 <_Z6listarv+0xd2>
            }
         }

         if ((then1 && i == 0) || then2){
   b5fe6:	4b67      	ldr	r3, [pc, #412]	; (b6184 <_Z6listarv+0x310>)
   b5fe8:	781b      	ldrb	r3, [r3, #0]
   b5fea:	b10b      	cbz	r3, b5ff0 <_Z6listarv+0x17c>
   b5fec:	9b00      	ldr	r3, [sp, #0]
   b5fee:	b11b      	cbz	r3, b5ff8 <_Z6listarv+0x184>
   b5ff0:	4b65      	ldr	r3, [pc, #404]	; (b6188 <_Z6listarv+0x314>)
   b5ff2:	781b      	ldrb	r3, [r3, #0]
   b5ff4:	2b00      	cmp	r3, #0
   b5ff6:	d043      	beq.n	b6080 <_Z6listarv+0x20c>
            elems++;
            display.setCursor(0, 0 - scroll + 3 + pos);
   b5ff8:	f8d9 3000 	ldr.w	r3, [r9]
   b5ffc:	f8df 8164 	ldr.w	r8, [pc, #356]	; b6164 <_Z6listarv+0x2f0>
            snprintf(buf, sizeof(buf), "        THEN");
   b6000:	4962      	ldr	r1, [pc, #392]	; (b618c <_Z6listarv+0x318>)
   b6002:	485d      	ldr	r0, [pc, #372]	; (b6178 <_Z6listarv+0x304>)
            pos+=10;
            for (c = 0; c < bloques[i].numActuadores; c++){
               if(bloques[i].actuadores[c].evaluate){
                  st = identificar(bloques[i].actuadores[c].id, bloques[i].actuadores[c].condicion);
                  display.setCursor(0, 0 - scroll + 3 + pos);
                  snprintf(buf, sizeof(buf), st);
   b6004:	f8df a170 	ldr.w	sl, [pc, #368]	; b6178 <_Z6listarv+0x304>
            display.setCursor(0, 0 - scroll + 3 + pos);
   b6008:	f1c3 0303 	rsb	r3, r3, #3
   b600c:	4423      	add	r3, r4
   b600e:	2700      	movs	r7, #0
   b6010:	f8a8 3012 	strh.w	r3, [r8, #18]
   b6014:	f8a8 7010 	strh.w	r7, [r8, #16]
            snprintf(buf, sizeof(buf), "        THEN");
   b6018:	f005 fd98 	bl	bbb4c <strcpy>
            display.print(buf);
   b601c:	4956      	ldr	r1, [pc, #344]	; (b6178 <_Z6listarv+0x304>)
   b601e:	4640      	mov	r0, r8
   b6020:	f004 ff90 	bl	baf44 <_ZN5Print5printEPKc>
            elems++;
   b6024:	3501      	adds	r5, #1
            pos+=10;
   b6026:	340a      	adds	r4, #10
   b6028:	46b3      	mov	fp, r6
            for (c = 0; c < bloques[i].numActuadores; c++){
   b602a:	f8d6 3144 	ldr.w	r3, [r6, #324]	; 0x144
   b602e:	42bb      	cmp	r3, r7
   b6030:	dd26      	ble.n	b6080 <_Z6listarv+0x20c>
               if(bloques[i].actuadores[c].evaluate){
   b6032:	f89b 3158 	ldrb.w	r3, [fp, #344]	; 0x158
   b6036:	b1fb      	cbz	r3, b6078 <_Z6listarv+0x204>
                  st = identificar(bloques[i].actuadores[c].id, bloques[i].actuadores[c].condicion);
   b6038:	e9db 1252 	ldrd	r1, r2, [fp, #328]	; 0x148
   b603c:	a806      	add	r0, sp, #24
   b603e:	f7ff fe59 	bl	b5cf4 <_Z11identificarii>
   b6042:	a906      	add	r1, sp, #24
   b6044:	a802      	add	r0, sp, #8
   b6046:	f004 fee7 	bl	bae18 <_ZN6StringaSEOS_>
   b604a:	a806      	add	r0, sp, #24
   b604c:	f004 fe4e 	bl	bacec <_ZN6StringD1Ev>
                  display.setCursor(0, 0 - scroll + 3 + pos);
   b6050:	f8d9 3000 	ldr.w	r3, [r9]
   b6054:	f1c3 0303 	rsb	r3, r3, #3
   b6058:	4423      	add	r3, r4
   b605a:	2200      	movs	r2, #0
   b605c:	f8a8 2010 	strh.w	r2, [r8, #16]
   b6060:	f8a8 3012 	strh.w	r3, [r8, #18]
                  snprintf(buf, sizeof(buf), st);
   b6064:	9a02      	ldr	r2, [sp, #8]
   b6066:	2140      	movs	r1, #64	; 0x40
   b6068:	4650      	mov	r0, sl
   b606a:	f004 fcc9 	bl	baa00 <snprintf>
                  display.print(buf);
   b606e:	4651      	mov	r1, sl
   b6070:	4640      	mov	r0, r8
   b6072:	f004 ff67 	bl	baf44 <_ZN5Print5printEPKc>
                  pos+=10;
   b6076:	340a      	adds	r4, #10
            for (c = 0; c < bloques[i].numActuadores; c++){
   b6078:	3701      	adds	r7, #1
   b607a:	f10b 0b14 	add.w	fp, fp, #20
   b607e:	e7d4      	b.n	b602a <_Z6listarv+0x1b6>
               }
            }
         }

         if ((else1 && i == 0) || (else2 && i == 1)){
   b6080:	4b43      	ldr	r3, [pc, #268]	; (b6190 <_Z6listarv+0x31c>)
   b6082:	781b      	ldrb	r3, [r3, #0]
   b6084:	b10b      	cbz	r3, b608a <_Z6listarv+0x216>
   b6086:	9b00      	ldr	r3, [sp, #0]
   b6088:	b133      	cbz	r3, b6098 <_Z6listarv+0x224>
   b608a:	4b42      	ldr	r3, [pc, #264]	; (b6194 <_Z6listarv+0x320>)
   b608c:	781b      	ldrb	r3, [r3, #0]
   b608e:	2b00      	cmp	r3, #0
   b6090:	d047      	beq.n	b6122 <_Z6listarv+0x2ae>
   b6092:	9b00      	ldr	r3, [sp, #0]
   b6094:	2b01      	cmp	r3, #1
   b6096:	d144      	bne.n	b6122 <_Z6listarv+0x2ae>
            elems++;
            display.setCursor(0, 0 - scroll + 3 + pos);
   b6098:	f8d9 3000 	ldr.w	r3, [r9]
   b609c:	f8df 80c4 	ldr.w	r8, [pc, #196]	; b6164 <_Z6listarv+0x2f0>
            snprintf(buf, sizeof(buf), "        ELSE");
   b60a0:	493d      	ldr	r1, [pc, #244]	; (b6198 <_Z6listarv+0x324>)
   b60a2:	4835      	ldr	r0, [pc, #212]	; (b6178 <_Z6listarv+0x304>)
            pos+=10;
            for (c = 0; c < bloques[i].numActuadores; c++){
               if(!bloques[i].actuadores[c].evaluate){
                  st = identificar(bloques[i].actuadores[c].id, bloques[i].actuadores[c].condicion);
                  display.setCursor(0, 0 - scroll + 3 + pos);
                  snprintf(buf, sizeof(buf), st);
   b60a4:	f8df b0d0 	ldr.w	fp, [pc, #208]	; b6178 <_Z6listarv+0x304>
            display.setCursor(0, 0 - scroll + 3 + pos);
   b60a8:	f1c3 0303 	rsb	r3, r3, #3
   b60ac:	4423      	add	r3, r4
   b60ae:	2700      	movs	r7, #0
   b60b0:	f8a8 3012 	strh.w	r3, [r8, #18]
   b60b4:	f8a8 7010 	strh.w	r7, [r8, #16]
            snprintf(buf, sizeof(buf), "        ELSE");
   b60b8:	f005 fd48 	bl	bbb4c <strcpy>
            display.print(buf);
   b60bc:	492e      	ldr	r1, [pc, #184]	; (b6178 <_Z6listarv+0x304>)
   b60be:	4640      	mov	r0, r8
   b60c0:	f004 ff40 	bl	baf44 <_ZN5Print5printEPKc>
            elems++;
   b60c4:	3501      	adds	r5, #1
            pos+=10;
   b60c6:	340a      	adds	r4, #10
   b60c8:	46b2      	mov	sl, r6
            for (c = 0; c < bloques[i].numActuadores; c++){
   b60ca:	f8d6 3144 	ldr.w	r3, [r6, #324]	; 0x144
   b60ce:	42bb      	cmp	r3, r7
   b60d0:	dd27      	ble.n	b6122 <_Z6listarv+0x2ae>
               if(!bloques[i].actuadores[c].evaluate){
   b60d2:	f89a 3158 	ldrb.w	r3, [sl, #344]	; 0x158
   b60d6:	bb03      	cbnz	r3, b611a <_Z6listarv+0x2a6>
                  st = identificar(bloques[i].actuadores[c].id, bloques[i].actuadores[c].condicion);
   b60d8:	e9da 1252 	ldrd	r1, r2, [sl, #328]	; 0x148
   b60dc:	a806      	add	r0, sp, #24
   b60de:	9301      	str	r3, [sp, #4]
   b60e0:	f7ff fe08 	bl	b5cf4 <_Z11identificarii>
   b60e4:	a906      	add	r1, sp, #24
   b60e6:	a802      	add	r0, sp, #8
   b60e8:	f004 fe96 	bl	bae18 <_ZN6StringaSEOS_>
   b60ec:	a806      	add	r0, sp, #24
   b60ee:	f004 fdfd 	bl	bacec <_ZN6StringD1Ev>
                  display.setCursor(0, 0 - scroll + 3 + pos);
   b60f2:	f8d9 2000 	ldr.w	r2, [r9]
   b60f6:	9b01      	ldr	r3, [sp, #4]
   b60f8:	f8a8 3010 	strh.w	r3, [r8, #16]
   b60fc:	f1c2 0203 	rsb	r2, r2, #3
   b6100:	4422      	add	r2, r4
   b6102:	f8a8 2012 	strh.w	r2, [r8, #18]
                  snprintf(buf, sizeof(buf), st);
   b6106:	2140      	movs	r1, #64	; 0x40
   b6108:	9a02      	ldr	r2, [sp, #8]
   b610a:	4658      	mov	r0, fp
   b610c:	f004 fc78 	bl	baa00 <snprintf>
                  display.print(buf);
   b6110:	4659      	mov	r1, fp
   b6112:	4640      	mov	r0, r8
   b6114:	f004 ff16 	bl	baf44 <_ZN5Print5printEPKc>
                  pos += 10;
   b6118:	340a      	adds	r4, #10
            for (c = 0; c < bloques[i].numActuadores; c++){
   b611a:	3701      	adds	r7, #1
   b611c:	f10a 0a14 	add.w	sl, sl, #20
   b6120:	e7d3      	b.n	b60ca <_Z6listarv+0x256>
      for(i = 0; i <= numBloque; i++){
   b6122:	9b00      	ldr	r3, [sp, #0]
   b6124:	3301      	adds	r3, #1
   b6126:	9300      	str	r3, [sp, #0]
   b6128:	f506 763b 	add.w	r6, r6, #748	; 0x2ec
   b612c:	e6d0      	b.n	b5ed0 <_Z6listarv+0x5c>
            }
         }

      }

      display.display();
   b612e:	480d      	ldr	r0, [pc, #52]	; (b6164 <_Z6listarv+0x2f0>)
   b6130:	f004 f88c 	bl	ba24c <_ZN16Adafruit_SSD13067displayEv>
      
      if (elems > 2){
   b6134:	2d02      	cmp	r5, #2
   b6136:	dd08      	ble.n	b614a <_Z6listarv+0x2d6>
         scroll++;
   b6138:	4a18      	ldr	r2, [pc, #96]	; (b619c <_Z6listarv+0x328>)
   b613a:	6813      	ldr	r3, [r2, #0]
         if(scroll > elems * 10){
   b613c:	210a      	movs	r1, #10
         scroll++;
   b613e:	3301      	adds	r3, #1
         if(scroll > elems * 10){
   b6140:	434d      	muls	r5, r1
   b6142:	42ab      	cmp	r3, r5
            scroll = 0;
   b6144:	bfc8      	it	gt
   b6146:	2300      	movgt	r3, #0
   b6148:	6013      	str	r3, [r2, #0]
      String st;
   b614a:	a802      	add	r0, sp, #8
   b614c:	f004 fdce 	bl	bacec <_ZN6StringD1Ev>
         }
      }
   }
   b6150:	b00b      	add	sp, #44	; 0x2c
   b6152:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b6156:	bf00      	nop
   b6158:	2003cd14 	.word	0x2003cd14
   b615c:	2003c73c 	.word	0x2003c73c
   b6160:	000bc0fa 	.word	0x000bc0fa
   b6164:	2003d338 	.word	0x2003d338
   b6168:	2003c688 	.word	0x2003c688
   b616c:	2003d6d4 	.word	0x2003d6d4
   b6170:	2003d6d5 	.word	0x2003d6d5
   b6174:	000bc00a 	.word	0x000bc00a
   b6178:	2003d2ed 	.word	0x2003d2ed
   b617c:	000bc016 	.word	0x000bc016
   b6180:	000bc023 	.word	0x000bc023
   b6184:	2003e6ac 	.word	0x2003e6ac
   b6188:	2003e6ad 	.word	0x2003e6ad
   b618c:	000bc02f 	.word	0x000bc02f
   b6190:	2003d6c8 	.word	0x2003d6c8
   b6194:	2003d6c9 	.word	0x2003d6c9
   b6198:	000bc03c 	.word	0x000bc03c
   b619c:	2003da44 	.word	0x2003da44

000b61a0 <_Z11serieBeforei>:

void serieBefore(int bloque){
   int esp;

   for (int j = 0; j < bloque2[bloque].numActuadores; j++)
   b61a0:	4b1b      	ldr	r3, [pc, #108]	; (b6210 <_Z11serieBeforei+0x70>)
void serieBefore(int bloque){
   b61a2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b61a6:	f44f 743b 	mov.w	r4, #748	; 0x2ec
   b61aa:	fb04 3400 	mla	r4, r4, r0, r3
   Actuador actuador = bloque2[bloque].actuadores[j];
   actuadorHandler(actuador.id, actuador.condicion, actuador.puerto);
      
      while (esp > 0){   
           esp--;
           if (mfrc522.PICC_IsNewCardPresent()){
   b61ae:	f8df a064 	ldr.w	sl, [pc, #100]	; b6214 <_Z11serieBeforei+0x74>
   for (int j = 0; j < bloque2[bloque].numActuadores; j++)
   b61b2:	2500      	movs	r5, #0
   b61b4:	46a1      	mov	r9, r4
   b61b6:	f8d9 3144 	ldr.w	r3, [r9, #324]	; 0x144
   b61ba:	42ab      	cmp	r3, r5
   b61bc:	dd1c      	ble.n	b61f8 <_Z11serieBeforei+0x58>
   Actuador actuador = bloque2[bloque].actuadores[j];
   b61be:	f8d4 6148 	ldr.w	r6, [r4, #328]	; 0x148
   b61c2:	f8d4 7154 	ldr.w	r7, [r4, #340]	; 0x154
   actuadorHandler(actuador.id, actuador.condicion, actuador.puerto);
   b61c6:	f8d4 114c 	ldr.w	r1, [r4, #332]	; 0x14c
   b61ca:	463a      	mov	r2, r7
   b61cc:	4630      	mov	r0, r6
   b61ce:	f7ff fb11 	bl	b57f4 <_Z15actuadorHandleriii>
   b61d2:	f04f 081e 	mov.w	r8, #30
           if (mfrc522.PICC_IsNewCardPresent()){
   b61d6:	4650      	mov	r0, sl
   b61d8:	f003 f99e 	bl	b9518 <_ZN7MFRC52221PICC_IsNewCardPresentEv>
   b61dc:	b170      	cbz	r0, b61fc <_Z11serieBeforei+0x5c>
            apagarActuador(actuador.id, actuador.puerto);
   b61de:	4639      	mov	r1, r7
   b61e0:	4630      	mov	r0, r6
   b61e2:	f7ff faf3 	bl	b57cc <_Z14apagarActuadorii>
            mfrc522.PICC_ReadCardSerial();
   b61e6:	480b      	ldr	r0, [pc, #44]	; (b6214 <_Z11serieBeforei+0x74>)
   b61e8:	f003 fb67 	bl	b98ba <_ZN7MFRC52219PICC_ReadCardSerialEv>
            getTagID(tagInfo);
   b61ec:	480a      	ldr	r0, [pc, #40]	; (b6218 <_Z11serieBeforei+0x78>)
   b61ee:	f7ff fd31 	bl	b5c54 <_Z8getTagIDPi>
            play = false;
   b61f2:	4b0a      	ldr	r3, [pc, #40]	; (b621c <_Z11serieBeforei+0x7c>)
   b61f4:	2200      	movs	r2, #0
   b61f6:	701a      	strb	r2, [r3, #0]
         return;}
      }
      apagarActuador(actuador.id, actuador.puerto);
   }
}
   b61f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      while (esp > 0){   
   b61fc:	f1b8 0801 	subs.w	r8, r8, #1
   b6200:	d1e9      	bne.n	b61d6 <_Z11serieBeforei+0x36>
      apagarActuador(actuador.id, actuador.puerto);
   b6202:	4639      	mov	r1, r7
   b6204:	4630      	mov	r0, r6
   b6206:	f7ff fae1 	bl	b57cc <_Z14apagarActuadorii>
   for (int j = 0; j < bloque2[bloque].numActuadores; j++)
   b620a:	3501      	adds	r5, #1
   b620c:	3414      	adds	r4, #20
   b620e:	e7d2      	b.n	b61b6 <_Z11serieBeforei+0x16>
   b6210:	2003c73c 	.word	0x2003c73c
   b6214:	2003d6e8 	.word	0x2003d6e8
   b6218:	2003c690 	.word	0x2003c690
   b621c:	2003da24 	.word	0x2003da24

000b6220 <_Z18ejecutarEvaluacionbi>:

void ejecutarEvaluacion(bool evaluacion, int bloque) {
   b6220:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6224:	4c22      	ldr	r4, [pc, #136]	; (b62b0 <_Z18ejecutarEvaluacionbi+0x90>)
    {
      esp = 30;
      actuadorHandler(actuador.id, actuador.condicion, actuador.puerto);
      while (esp > 0){
         esp--;
         if (mfrc522.PICC_IsNewCardPresent()){
   b6226:	f8df b08c 	ldr.w	fp, [pc, #140]	; b62b4 <_Z18ejecutarEvaluacionbi+0x94>
   b622a:	f44f 733b 	mov.w	r3, #748	; 0x2ec
   b622e:	fb03 4401 	mla	r4, r3, r1, r4
void ejecutarEvaluacion(bool evaluacion, int bloque) {
   b6232:	4681      	mov	r9, r0
   b6234:	460e      	mov	r6, r1
  for (int j = 0; j < bloques[bloque].numActuadores; j++)
   b6236:	f04f 0800 	mov.w	r8, #0
   b623a:	46a2      	mov	sl, r4
   b623c:	f8da 3144 	ldr.w	r3, [sl, #324]	; 0x144
   b6240:	4543      	cmp	r3, r8
   b6242:	dd21      	ble.n	b6288 <_Z18ejecutarEvaluacionbi+0x68>
    if (evaluacion == actuador.evaluate)
   b6244:	f894 3158 	ldrb.w	r3, [r4, #344]	; 0x158
    Actuador actuador = bloques[bloque].actuadores[j];
   b6248:	f8d4 5148 	ldr.w	r5, [r4, #328]	; 0x148
   b624c:	f8d4 7154 	ldr.w	r7, [r4, #340]	; 0x154
    if (evaluacion == actuador.evaluate)
   b6250:	454b      	cmp	r3, r9
   b6252:	d123      	bne.n	b629c <_Z18ejecutarEvaluacionbi+0x7c>
      actuadorHandler(actuador.id, actuador.condicion, actuador.puerto);
   b6254:	f8d4 114c 	ldr.w	r1, [r4, #332]	; 0x14c
   b6258:	463a      	mov	r2, r7
   b625a:	4628      	mov	r0, r5
   b625c:	f7ff faca 	bl	b57f4 <_Z15actuadorHandleriii>
   b6260:	231e      	movs	r3, #30
         if (mfrc522.PICC_IsNewCardPresent()){
   b6262:	4658      	mov	r0, fp
   b6264:	9301      	str	r3, [sp, #4]
   b6266:	f003 f957 	bl	b9518 <_ZN7MFRC52221PICC_IsNewCardPresentEv>
   b626a:	9b01      	ldr	r3, [sp, #4]
   b626c:	b178      	cbz	r0, b628e <_Z18ejecutarEvaluacionbi+0x6e>
            apagarActuador(actuador.id, actuador.puerto);
   b626e:	4639      	mov	r1, r7
   b6270:	4628      	mov	r0, r5
   b6272:	f7ff faab 	bl	b57cc <_Z14apagarActuadorii>
            mfrc522.PICC_ReadCardSerial();
   b6276:	480f      	ldr	r0, [pc, #60]	; (b62b4 <_Z18ejecutarEvaluacionbi+0x94>)
   b6278:	f003 fb1f 	bl	b98ba <_ZN7MFRC52219PICC_ReadCardSerialEv>
            getTagID(tagInfo);
   b627c:	480e      	ldr	r0, [pc, #56]	; (b62b8 <_Z18ejecutarEvaluacionbi+0x98>)
   b627e:	f7ff fce9 	bl	b5c54 <_Z8getTagIDPi>
            play = false;
   b6282:	4b0e      	ldr	r3, [pc, #56]	; (b62bc <_Z18ejecutarEvaluacionbi+0x9c>)
   b6284:	2200      	movs	r2, #0
   b6286:	701a      	strb	r2, [r3, #0]
        apagarActuador(actuador.id, actuador.puerto);
      }
    }
    
  }
}
   b6288:	b003      	add	sp, #12
   b628a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      while (esp > 0){
   b628e:	3b01      	subs	r3, #1
   b6290:	d1e7      	bne.n	b6262 <_Z18ejecutarEvaluacionbi+0x42>
        apagarActuador(actuador.id, actuador.puerto);
   b6292:	4639      	mov	r1, r7
   b6294:	4628      	mov	r0, r5
   b6296:	f7ff fa99 	bl	b57cc <_Z14apagarActuadorii>
   b629a:	e005      	b.n	b62a8 <_Z18ejecutarEvaluacionbi+0x88>
      if (!isActuadorDual(actuador.id, bloque))
   b629c:	4631      	mov	r1, r6
   b629e:	4628      	mov	r0, r5
   b62a0:	f7ff fc44 	bl	b5b2c <_Z14isActuadorDualii>
   b62a4:	2800      	cmp	r0, #0
   b62a6:	d0f4      	beq.n	b6292 <_Z18ejecutarEvaluacionbi+0x72>
  for (int j = 0; j < bloques[bloque].numActuadores; j++)
   b62a8:	f108 0801 	add.w	r8, r8, #1
   b62ac:	3414      	adds	r4, #20
   b62ae:	e7c5      	b.n	b623c <_Z18ejecutarEvaluacionbi+0x1c>
   b62b0:	2003cd14 	.word	0x2003cd14
   b62b4:	2003d6e8 	.word	0x2003d6e8
   b62b8:	2003c690 	.word	0x2003c690
   b62bc:	2003da24 	.word	0x2003da24

000b62c0 <_Z13asignarPuertoi>:

int asignarPuerto(int type)
{
   b62c0:	b510      	push	{r4, lr}
   int option;
   
   if (esAnalogico(type))
   b62c2:	b940      	cbnz	r0, b62d6 <_Z13asignarPuertoi+0x16>
   {
      option = puertoAnalogico;
   b62c4:	4b32      	ldr	r3, [pc, #200]	; (b6390 <_Z13asignarPuertoi+0xd0>)
   }
   else
      option = puertoDigital;
   b62c6:	681c      	ldr	r4, [r3, #0]

   switch (option)
   b62c8:	2c05      	cmp	r4, #5
   b62ca:	d858      	bhi.n	b637e <_Z13asignarPuertoi+0xbe>
   b62cc:	e8df f004 	tbb	[pc, r4]
   b62d0:	32221305 	.word	0x32221305
   b62d4:	483d      	.short	0x483d
      option = puertoDigital;
   b62d6:	4b2f      	ldr	r3, [pc, #188]	; (b6394 <_Z13asignarPuertoi+0xd4>)
   b62d8:	e7f5      	b.n	b62c6 <_Z13asignarPuertoi+0x6>
   {
   case 0:
      Serial.print("Conectar al puerto A0\n");
   b62da:	f005 f895 	bl	bb408 <_Z16_fetch_usbserialv>
   b62de:	492e      	ldr	r1, [pc, #184]	; (b6398 <_Z13asignarPuertoi+0xd8>)
   b62e0:	f004 fe30 	bl	baf44 <_ZN5Print5printEPKc>
      puertoAnalogico++;
   b62e4:	4a2a      	ldr	r2, [pc, #168]	; (b6390 <_Z13asignarPuertoi+0xd0>)
   b62e6:	6813      	ldr	r3, [r2, #0]
   b62e8:	3301      	adds	r3, #1
   b62ea:	6013      	str	r3, [r2, #0]
      puertoAnalogico_bloque++;
   b62ec:	4a2b      	ldr	r2, [pc, #172]	; (b639c <_Z13asignarPuertoi+0xdc>)
      return 2;

   case 4:
      Serial.print("Conectar al puerto D4\n");
      puertoDigital++;
      puertoDigital_bloque++;
   b62ee:	6813      	ldr	r3, [r2, #0]
   b62f0:	3301      	adds	r3, #1
   b62f2:	6013      	str	r3, [r2, #0]
      return 4;
   b62f4:	e01c      	b.n	b6330 <_Z13asignarPuertoi+0x70>
      Serial.print("Conectar al puerto A2\n");
   b62f6:	f005 f887 	bl	bb408 <_Z16_fetch_usbserialv>
   b62fa:	4929      	ldr	r1, [pc, #164]	; (b63a0 <_Z13asignarPuertoi+0xe0>)
   b62fc:	f004 fe22 	bl	baf44 <_ZN5Print5printEPKc>
      puertoAnalogico++;
   b6300:	4a23      	ldr	r2, [pc, #140]	; (b6390 <_Z13asignarPuertoi+0xd0>)
   b6302:	6813      	ldr	r3, [r2, #0]
   b6304:	3301      	adds	r3, #1
   b6306:	6013      	str	r3, [r2, #0]
      puertoAnalogico_bloque++;
   b6308:	4a24      	ldr	r2, [pc, #144]	; (b639c <_Z13asignarPuertoi+0xdc>)
      puertoDigital_bloque++;
   b630a:	6813      	ldr	r3, [r2, #0]
   b630c:	3301      	adds	r3, #1
   b630e:	6013      	str	r3, [r2, #0]
      return 2;
   b6310:	2402      	movs	r4, #2
   b6312:	e00d      	b.n	b6330 <_Z13asignarPuertoi+0x70>
      Serial.print("Conectar al puerto A4\n");
   b6314:	f005 f878 	bl	bb408 <_Z16_fetch_usbserialv>
   b6318:	4922      	ldr	r1, [pc, #136]	; (b63a4 <_Z13asignarPuertoi+0xe4>)
   b631a:	f004 fe13 	bl	baf44 <_ZN5Print5printEPKc>
      puertoAnalogico = -1;
   b631e:	4b1c      	ldr	r3, [pc, #112]	; (b6390 <_Z13asignarPuertoi+0xd0>)
   b6320:	f04f 32ff 	mov.w	r2, #4294967295
   b6324:	601a      	str	r2, [r3, #0]
      puertoAnalogico_bloque++;
   b6326:	4a1d      	ldr	r2, [pc, #116]	; (b639c <_Z13asignarPuertoi+0xdc>)
   b6328:	6813      	ldr	r3, [r2, #0]
   b632a:	3301      	adds	r3, #1
   b632c:	6013      	str	r3, [r2, #0]
      return 4;
   b632e:	2404      	movs	r4, #4
   default:
      Serial.print("Error: No hay mas puertos disponibles \n");
      return -1;
   }

}
   b6330:	4620      	mov	r0, r4
   b6332:	bd10      	pop	{r4, pc}
      Serial.print("Conectar al puerto D2\n");
   b6334:	f005 f868 	bl	bb408 <_Z16_fetch_usbserialv>
   b6338:	491b      	ldr	r1, [pc, #108]	; (b63a8 <_Z13asignarPuertoi+0xe8>)
   b633a:	f004 fe03 	bl	baf44 <_ZN5Print5printEPKc>
      puertoDigital++;
   b633e:	4a15      	ldr	r2, [pc, #84]	; (b6394 <_Z13asignarPuertoi+0xd4>)
   b6340:	6813      	ldr	r3, [r2, #0]
   b6342:	3301      	adds	r3, #1
   b6344:	6013      	str	r3, [r2, #0]
      puertoDigital_bloque++;
   b6346:	4a19      	ldr	r2, [pc, #100]	; (b63ac <_Z13asignarPuertoi+0xec>)
   b6348:	e7df      	b.n	b630a <_Z13asignarPuertoi+0x4a>
      Serial.print("Conectar al puerto D4\n");
   b634a:	f005 f85d 	bl	bb408 <_Z16_fetch_usbserialv>
   b634e:	4918      	ldr	r1, [pc, #96]	; (b63b0 <_Z13asignarPuertoi+0xf0>)
   b6350:	f004 fdf8 	bl	baf44 <_ZN5Print5printEPKc>
      puertoDigital++;
   b6354:	4a0f      	ldr	r2, [pc, #60]	; (b6394 <_Z13asignarPuertoi+0xd4>)
   b6356:	6813      	ldr	r3, [r2, #0]
   b6358:	3301      	adds	r3, #1
   b635a:	6013      	str	r3, [r2, #0]
      puertoDigital_bloque++;
   b635c:	4a13      	ldr	r2, [pc, #76]	; (b63ac <_Z13asignarPuertoi+0xec>)
   b635e:	e7c6      	b.n	b62ee <_Z13asignarPuertoi+0x2e>
      Serial.print("Conectar al puerto D6\n");
   b6360:	f005 f852 	bl	bb408 <_Z16_fetch_usbserialv>
   b6364:	4913      	ldr	r1, [pc, #76]	; (b63b4 <_Z13asignarPuertoi+0xf4>)
   b6366:	f004 fded 	bl	baf44 <_ZN5Print5printEPKc>
      puertoDigital = -1;
   b636a:	4b0a      	ldr	r3, [pc, #40]	; (b6394 <_Z13asignarPuertoi+0xd4>)
   b636c:	f04f 32ff 	mov.w	r2, #4294967295
   b6370:	601a      	str	r2, [r3, #0]
      puertoDigital_bloque++;
   b6372:	4a0e      	ldr	r2, [pc, #56]	; (b63ac <_Z13asignarPuertoi+0xec>)
   b6374:	6813      	ldr	r3, [r2, #0]
   b6376:	3301      	adds	r3, #1
   b6378:	6013      	str	r3, [r2, #0]
      return 6;
   b637a:	2406      	movs	r4, #6
   b637c:	e7d8      	b.n	b6330 <_Z13asignarPuertoi+0x70>
      Serial.print("Error: No hay mas puertos disponibles \n");
   b637e:	f005 f843 	bl	bb408 <_Z16_fetch_usbserialv>
   b6382:	490d      	ldr	r1, [pc, #52]	; (b63b8 <_Z13asignarPuertoi+0xf8>)
   b6384:	f004 fdde 	bl	baf44 <_ZN5Print5printEPKc>
      return -1;
   b6388:	f04f 34ff 	mov.w	r4, #4294967295
   b638c:	e7d0      	b.n	b6330 <_Z13asignarPuertoi+0x70>
   b638e:	bf00      	nop
   b6390:	2003da30 	.word	0x2003da30
   b6394:	2003c68c 	.word	0x2003c68c
   b6398:	000bc049 	.word	0x000bc049
   b639c:	2003da34 	.word	0x2003da34
   b63a0:	000bc060 	.word	0x000bc060
   b63a4:	000bc077 	.word	0x000bc077
   b63a8:	000bc08e 	.word	0x000bc08e
   b63ac:	2003da38 	.word	0x2003da38
   b63b0:	000bc0a5 	.word	0x000bc0a5
   b63b4:	000bc0bc 	.word	0x000bc0bc
   b63b8:	000bc0d3 	.word	0x000bc0d3

000b63bc <_Z11ajusta_tempi>:

// Eliminar 'outliers' de la temperatura
   int ajusta_temp(int val)
   {
   b63bc:	b510      	push	{r4, lr}
      if (temp_rep == 0){
   b63be:	4a09      	ldr	r2, [pc, #36]	; (b63e4 <_Z11ajusta_tempi+0x28>)
   b63c0:	4909      	ldr	r1, [pc, #36]	; (b63e8 <_Z11ajusta_tempi+0x2c>)
   b63c2:	6813      	ldr	r3, [r2, #0]
   b63c4:	b923      	cbnz	r3, b63d0 <_Z11ajusta_tempi+0x14>
         temp_prev = val;
   b63c6:	6008      	str	r0, [r1, #0]
         temp_rep++;}
   b63c8:	2301      	movs	r3, #1
      else if (temp_prev == val && temp_rep < 6)
         temp_rep++;
      else
         temp_rep--;
   b63ca:	6013      	str	r3, [r2, #0]
         val = temp_prev;
      return val;
   }
   b63cc:	6808      	ldr	r0, [r1, #0]
   b63ce:	bd10      	pop	{r4, pc}
      else if (temp_prev == val && temp_rep < 6)
   b63d0:	680c      	ldr	r4, [r1, #0]
   b63d2:	4284      	cmp	r4, r0
   b63d4:	d103      	bne.n	b63de <_Z11ajusta_tempi+0x22>
   b63d6:	2b05      	cmp	r3, #5
   b63d8:	dc01      	bgt.n	b63de <_Z11ajusta_tempi+0x22>
         temp_rep++;
   b63da:	3301      	adds	r3, #1
   b63dc:	e7f5      	b.n	b63ca <_Z11ajusta_tempi+0xe>
         temp_rep--;
   b63de:	3b01      	subs	r3, #1
   b63e0:	e7f3      	b.n	b63ca <_Z11ajusta_tempi+0xe>
   b63e2:	bf00      	nop
   b63e4:	2003e6a8 	.word	0x2003e6a8
   b63e8:	2003c6a8 	.word	0x2003c6a8

000b63ec <setup>:
// Unconnected mode ON, evita conexion wifi.

SYSTEM_MODE(SEMI_AUTOMATIC);

void setup()
{
   b63ec:	b570      	push	{r4, r5, r6, lr}
   b63ee:	b08a      	sub	sp, #40	; 0x28
inline CloudDisconnectOptions::CloudDisconnectOptions(unsigned flags, system_tick_t timeout, bool graceful,
        bool clearSession) :
        flags_(flags),
        timeout_(timeout),
        graceful_(graceful),
        clearSession_(clearSession) {
   b63f0:	2400      	movs	r4, #0
  // Unconnected mode ON
  Particle.disconnect();
   b63f2:	a807      	add	r0, sp, #28
   b63f4:	e9cd 4407 	strd	r4, r4, [sp, #28]
        bool clearSession) :
   b63f8:	f8ad 4024 	strh.w	r4, [sp, #36]	; 0x24
   b63fc:	f004 ff14 	bl	bb228 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   b6400:	4843      	ldr	r0, [pc, #268]	; (b6510 <setup+0x124>)
   b6402:	4623      	mov	r3, r4
   b6404:	4622      	mov	r2, r4
   b6406:	4621      	mov	r1, r4
   b6408:	6840      	ldr	r0, [r0, #4]

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b640a:	4c42      	ldr	r4, [pc, #264]	; (b6514 <setup+0x128>)
   b640c:	f004 fa98 	bl	ba940 <network_off>
  WiFi.off();

  // Particle setup
  Serial.begin(9600);
   b6410:	f004 fffa 	bl	bb408 <_Z16_fetch_usbserialv>
   b6414:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b6418:	f004 ffea 	bl	bb3f0 <_ZN9USBSerial5beginEl>
   b641c:	7821      	ldrb	r1, [r4, #0]
   b641e:	f3bf 8f5b 	dmb	ish
   b6422:	f011 0101 	ands.w	r1, r1, #1
   b6426:	d10b      	bne.n	b6440 <setup+0x54>
   b6428:	4620      	mov	r0, r4
   b642a:	9105      	str	r1, [sp, #20]
   b642c:	f7fe fb1a 	bl	b4a64 <__cxa_guard_acquire>
   b6430:	9905      	ldr	r1, [sp, #20]
   b6432:	b128      	cbz	r0, b6440 <setup+0x54>
   b6434:	4838      	ldr	r0, [pc, #224]	; (b6518 <setup+0x12c>)
   b6436:	f004 fb4f 	bl	baad8 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b643a:	4620      	mov	r0, r4
   b643c:	f7fe fb17 	bl	b4a6e <__cxa_guard_release>

    hal_spi_interface_t interface() {
         return instance().interface();
    }
    void begin() {
        instance().begin();
   b6440:	4835      	ldr	r0, [pc, #212]	; (b6518 <setup+0x12c>)
  for (byte i = 0; i < 6; i++)
  {
    key.keyByte[i] = 0xFF;
  }

  MODE = EEPROM.read(0);
   b6442:	4c36      	ldr	r4, [pc, #216]	; (b651c <setup+0x130>)
  display.begin(SSD1306_SWITCHCAPVCC, 0x3C);
   b6444:	2501      	movs	r5, #1
   b6446:	f004 fb51 	bl	baaec <_ZN8SPIClass5beginEv>
   b644a:	462b      	mov	r3, r5
   b644c:	223c      	movs	r2, #60	; 0x3c
   b644e:	2102      	movs	r1, #2
   b6450:	4833      	ldr	r0, [pc, #204]	; (b6520 <setup+0x134>)
   b6452:	9500      	str	r5, [sp, #0]
   b6454:	f003 fca0 	bl	b9d98 <_ZN16Adafruit_SSD13065beginEhhbb>
  display.clearDisplay();
   b6458:	4831      	ldr	r0, [pc, #196]	; (b6520 <setup+0x134>)
   b645a:	f003 fc8f 	bl	b9d7c <_ZN16Adafruit_SSD130612clearDisplayEv>
  display.display();
   b645e:	4830      	ldr	r0, [pc, #192]	; (b6520 <setup+0x134>)
   b6460:	f003 fef4 	bl	ba24c <_ZN16Adafruit_SSD13067displayEv>
  mfrc522.PCD_Init();
   b6464:	482f      	ldr	r0, [pc, #188]	; (b6524 <setup+0x138>)
   b6466:	f002 ff2c 	bl	b92c2 <_ZN7MFRC5228PCD_InitEv>
    key.keyByte[i] = 0xFF;
   b646a:	4a2f      	ldr	r2, [pc, #188]	; (b6528 <setup+0x13c>)
   b646c:	21ff      	movs	r1, #255	; 0xff
   b646e:	7011      	strb	r1, [r2, #0]
   b6470:	7051      	strb	r1, [r2, #1]
   b6472:	7091      	strb	r1, [r2, #2]
   b6474:	70d1      	strb	r1, [r2, #3]
   b6476:	7111      	strb	r1, [r2, #4]
   b6478:	7151      	strb	r1, [r2, #5]
  MODE = EEPROM.read(0);
   b647a:	f005 faad 	bl	bb9d8 <_Z21__fetch_global_EEPROMv>

    EERef( const int index )
        : index( index )                 {}

    //Access/read members.
    uint8_t operator*() const            { return HAL_EEPROM_Read(index); }
   b647e:	2000      	movs	r0, #0
   b6480:	f004 f8ca 	bl	ba618 <HAL_EEPROM_Read>

  // EEPROM empty
  if ( MODE == 0xFF ) {
   b6484:	28ff      	cmp	r0, #255	; 0xff
  MODE = EEPROM.read(0);
   b6486:	7020      	strb	r0, [r4, #0]
  if ( MODE == 0xFF ) {
   b6488:	d10d      	bne.n	b64a6 <setup+0xba>
    
    Serial.println("EEPROM empty");
   b648a:	f004 ffbd 	bl	bb408 <_Z16_fetch_usbserialv>
    MODE = 0;
   b648e:	2600      	movs	r6, #0
    Serial.println("EEPROM empty");
   b6490:	4926      	ldr	r1, [pc, #152]	; (b652c <setup+0x140>)
   b6492:	f004 fd6a 	bl	baf6a <_ZN5Print7printlnEPKc>
    MODE = 0;
   b6496:	7026      	strb	r6, [r4, #0]
    EEPROM.put(0, MODE);
   b6498:	f005 fa9e 	bl	bb9d8 <_Z21__fetch_global_EEPROMv>
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   b649c:	462a      	mov	r2, r5
   b649e:	4621      	mov	r1, r4
   b64a0:	4630      	mov	r0, r6
   b64a2:	f004 f8c1 	bl	ba628 <HAL_EEPROM_Put>

  }

  if ( MODE == 0 ) {
   b64a6:	7824      	ldrb	r4, [r4, #0]
   b64a8:	bb54      	cbnz	r4, b6500 <setup+0x114>

    // MODO BÁSICO iniciado
    pinMode(Zumbador_PIN, OUTPUT);
   b64aa:	2101      	movs	r1, #1
   b64ac:	2006      	movs	r0, #6
   b64ae:	f005 f9e1 	bl	bb874 <pinMode>
    ledObject.init();
   b64b2:	481f      	ldr	r0, [pc, #124]	; (b6530 <setup+0x144>)
   b64b4:	f004 f816 	bl	ba4e4 <_ZN12ChainableLED4initEv>
    init = true;
   b64b8:	4b1e      	ldr	r3, [pc, #120]	; (b6534 <setup+0x148>)
   b64ba:	2201      	movs	r2, #1
   b64bc:	701a      	strb	r2, [r3, #0]

    Bloque bloque;
    numBloque++;
   b64be:	4a1e      	ldr	r2, [pc, #120]	; (b6538 <setup+0x14c>)
   b64c0:	6813      	ldr	r3, [r2, #0]
   b64c2:	3301      	adds	r3, #1
   b64c4:	6013      	str	r3, [r2, #0]
    bloques[numBloque] = bloque;
   b64c6:	f44f 713b 	mov.w	r1, #748	; 0x2ec
   b64ca:	4a1c      	ldr	r2, [pc, #112]	; (b653c <setup+0x150>)
   b64cc:	434b      	muls	r3, r1
   b64ce:	18d1      	adds	r1, r2, r3
   b64d0:	50d4      	str	r4, [r2, r3]
   b64d2:	f8c1 4144 	str.w	r4, [r1, #324]	; 0x144
    // MODO MUSICA iniciado
    pinMode(Zumbador_PIN, OUTPUT);
    //showBitmap(0,2,"");
  }

  display.drawBitmap(0,0, sucreLogo_data, sucreLogo_width, sucreLogo_height, 1);
   b64d6:	2340      	movs	r3, #64	; 0x40
   b64d8:	2201      	movs	r2, #1
   b64da:	e9cd 3201 	strd	r3, r2, [sp, #4]
   b64de:	2200      	movs	r2, #0
   b64e0:	2380      	movs	r3, #128	; 0x80
   b64e2:	4611      	mov	r1, r2
   b64e4:	9300      	str	r3, [sp, #0]
   b64e6:	480e      	ldr	r0, [pc, #56]	; (b6520 <setup+0x134>)
   b64e8:	4b15      	ldr	r3, [pc, #84]	; (b6540 <setup+0x154>)
   b64ea:	f002 fb3f 	bl	b8b6c <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
  display.display();
   b64ee:	480c      	ldr	r0, [pc, #48]	; (b6520 <setup+0x134>)
   b64f0:	f003 feac 	bl	ba24c <_ZN16Adafruit_SSD13067displayEv>
   b64f4:	f004 f880 	bl	ba5f8 <HAL_Timer_Get_Milli_Seconds>
  startTime = millis();
   b64f8:	4b12      	ldr	r3, [pc, #72]	; (b6544 <setup+0x158>)
   b64fa:	6018      	str	r0, [r3, #0]
  
}
   b64fc:	b00a      	add	sp, #40	; 0x28
   b64fe:	bd70      	pop	{r4, r5, r6, pc}
  } else if ( MODE == 1 ) {
   b6500:	2c01      	cmp	r4, #1
   b6502:	d0e8      	beq.n	b64d6 <setup+0xea>
    pinMode(Zumbador_PIN, OUTPUT);
   b6504:	2101      	movs	r1, #1
   b6506:	2006      	movs	r0, #6
   b6508:	f005 f9b4 	bl	bb874 <pinMode>
   b650c:	e7e3      	b.n	b64d6 <setup+0xea>
   b650e:	bf00      	nop
   b6510:	2003e710 	.word	0x2003e710
   b6514:	2003c71c 	.word	0x2003c71c
   b6518:	2003c720 	.word	0x2003c720
   b651c:	2003c72a 	.word	0x2003c72a
   b6520:	2003d338 	.word	0x2003d338
   b6524:	2003d6e8 	.word	0x2003d6e8
   b6528:	2003d6d7 	.word	0x2003d6d7
   b652c:	000bc0fb 	.word	0x000bc0fb
   b6530:	2003d6e0 	.word	0x2003d6e0
   b6534:	2003d6d6 	.word	0x2003d6d6
   b6538:	2003c688 	.word	0x2003c688
   b653c:	2003cd14 	.word	0x2003cd14
   b6540:	000bca50 	.word	0x000bca50
   b6544:	2003dc2c 	.word	0x2003dc2c

000b6548 <_GLOBAL__sub_I_ruid>:
ChainableLED ledObject = ChainableLED(led_PIN1, led_PIN2, NUM_LEDS);
   b6548:	2305      	movs	r3, #5
              showBitmap(2,4,"");
              play=false;
        }

  }
   b654a:	b570      	push	{r4, r5, r6, lr}
   b654c:	461a      	mov	r2, r3
   b654e:	2104      	movs	r1, #4
   b6550:	48aa      	ldr	r0, [pc, #680]	; (b67fc <_GLOBAL__sub_I_ruid+0x2b4>)
String tarjetas[80] = {"3#0#0#12#0","3#0#1#6#0", "1#0#1#9#3", "1#0#0#12#1", "1#1#0#13#1"};
   b6552:	4dab      	ldr	r5, [pc, #684]	; (b6800 <_GLOBAL__sub_I_ruid+0x2b8>)
   b6554:	4eab      	ldr	r6, [pc, #684]	; (b6804 <_GLOBAL__sub_I_ruid+0x2bc>)
   b6556:	f003 ff13 	bl	ba380 <_ZN12ChainableLEDC1Ehhh>
    int bloque;
    int puerto;
    bool evaluate;
} Actuador;

typedef struct BLOQUE
   b655a:	4bab      	ldr	r3, [pc, #684]	; (b6808 <_GLOBAL__sub_I_ruid+0x2c0>)
Adafruit_SSD1306 display(-1);
   b655c:	48ab      	ldr	r0, [pc, #684]	; (b680c <_GLOBAL__sub_I_ruid+0x2c4>)
   b655e:	2400      	movs	r4, #0
   b6560:	601c      	str	r4, [r3, #0]
   b6562:	f8c3 4144 	str.w	r4, [r3, #324]	; 0x144
   b6566:	f8c3 42ec 	str.w	r4, [r3, #748]	; 0x2ec
   b656a:	f8c3 4430 	str.w	r4, [r3, #1072]	; 0x430
   b656e:	4ba8      	ldr	r3, [pc, #672]	; (b6810 <_GLOBAL__sub_I_ruid+0x2c8>)
   b6570:	f04f 31ff 	mov.w	r1, #4294967295
   b6574:	601c      	str	r4, [r3, #0]
   b6576:	f8c3 4144 	str.w	r4, [r3, #324]	; 0x144
   b657a:	f8c3 42ec 	str.w	r4, [r3, #748]	; 0x2ec
   b657e:	f8c3 4430 	str.w	r4, [r3, #1072]	; 0x430
   b6582:	f003 fb07 	bl	b9b94 <_ZN16Adafruit_SSD1306C1Ea>
String dispositivos[2] = {"-", "-"};
   b6586:	49a3      	ldr	r1, [pc, #652]	; (b6814 <_GLOBAL__sub_I_ruid+0x2cc>)
   b6588:	48a3      	ldr	r0, [pc, #652]	; (b6818 <_GLOBAL__sub_I_ruid+0x2d0>)
   b658a:	f004 fbfa 	bl	bad82 <_ZN6StringC1EPK19__FlashStringHelper>
   b658e:	49a1      	ldr	r1, [pc, #644]	; (b6814 <_GLOBAL__sub_I_ruid+0x2cc>)
   b6590:	48a2      	ldr	r0, [pc, #648]	; (b681c <_GLOBAL__sub_I_ruid+0x2d4>)
   b6592:	f004 fbf6 	bl	bad82 <_ZN6StringC1EPK19__FlashStringHelper>
String tarjetas_modoBasico[16] = { "0#2#0","0#3#0","0#4#1","0#9#1","0#10#1","0#11#1","0#1#1#0","0#1#1#1","0#0#1#0","0#0#1#1","0#0#1#2","0#0#1#3","0#0#1#4","0#0#1#5"};
   b6596:	49a2      	ldr	r1, [pc, #648]	; (b6820 <_GLOBAL__sub_I_ruid+0x2d8>)
   b6598:	48a2      	ldr	r0, [pc, #648]	; (b6824 <_GLOBAL__sub_I_ruid+0x2dc>)
   b659a:	f004 fbf2 	bl	bad82 <_ZN6StringC1EPK19__FlashStringHelper>
   b659e:	49a2      	ldr	r1, [pc, #648]	; (b6828 <_GLOBAL__sub_I_ruid+0x2e0>)
   b65a0:	48a2      	ldr	r0, [pc, #648]	; (b682c <_GLOBAL__sub_I_ruid+0x2e4>)
   b65a2:	f004 fbee 	bl	bad82 <_ZN6StringC1EPK19__FlashStringHelper>
   b65a6:	49a2      	ldr	r1, [pc, #648]	; (b6830 <_GLOBAL__sub_I_ruid+0x2e8>)
   b65a8:	48a2      	ldr	r0, [pc, #648]	; (b6834 <_GLOBAL__sub_I_ruid+0x2ec>)
   b65aa:	f004 fbea 	bl	bad82 <_ZN6StringC1EPK19__FlashStringHelper>
   b65ae:	49a2      	ldr	r1, [pc, #648]	; (b6838 <_GLOBAL__sub_I_ruid+0x2f0>)
   b65b0:	48a2      	ldr	r0, [pc, #648]	; (b683c <_GLOBAL__sub_I_ruid+0x2f4>)
   b65b2:	f004 fbe6 	bl	bad82 <_ZN6StringC1EPK19__FlashStringHelper>
   b65b6:	49a2      	ldr	r1, [pc, #648]	; (b6840 <_GLOBAL__sub_I_ruid+0x2f8>)
   b65b8:	48a2      	ldr	r0, [pc, #648]	; (b6844 <_GLOBAL__sub_I_ruid+0x2fc>)
   b65ba:	f004 fbe2 	bl	bad82 <_ZN6StringC1EPK19__FlashStringHelper>
   b65be:	49a2      	ldr	r1, [pc, #648]	; (b6848 <_GLOBAL__sub_I_ruid+0x300>)
   b65c0:	48a2      	ldr	r0, [pc, #648]	; (b684c <_GLOBAL__sub_I_ruid+0x304>)
   b65c2:	f004 fbde 	bl	bad82 <_ZN6StringC1EPK19__FlashStringHelper>
   b65c6:	49a2      	ldr	r1, [pc, #648]	; (b6850 <_GLOBAL__sub_I_ruid+0x308>)
   b65c8:	48a2      	ldr	r0, [pc, #648]	; (b6854 <_GLOBAL__sub_I_ruid+0x30c>)
   b65ca:	f004 fbda 	bl	bad82 <_ZN6StringC1EPK19__FlashStringHelper>
   b65ce:	49a2      	ldr	r1, [pc, #648]	; (b6858 <_GLOBAL__sub_I_ruid+0x310>)
   b65d0:	48a2      	ldr	r0, [pc, #648]	; (b685c <_GLOBAL__sub_I_ruid+0x314>)
   b65d2:	f004 fbd6 	bl	bad82 <_ZN6StringC1EPK19__FlashStringHelper>
   b65d6:	49a2      	ldr	r1, [pc, #648]	; (b6860 <_GLOBAL__sub_I_ruid+0x318>)
   b65d8:	48a2      	ldr	r0, [pc, #648]	; (b6864 <_GLOBAL__sub_I_ruid+0x31c>)
   b65da:	f004 fbd2 	bl	bad82 <_ZN6StringC1EPK19__FlashStringHelper>
   b65de:	49a2      	ldr	r1, [pc, #648]	; (b6868 <_GLOBAL__sub_I_ruid+0x320>)
   b65e0:	48a2      	ldr	r0, [pc, #648]	; (b686c <_GLOBAL__sub_I_ruid+0x324>)
   b65e2:	f004 fbce 	bl	bad82 <_ZN6StringC1EPK19__FlashStringHelper>
   b65e6:	49a2      	ldr	r1, [pc, #648]	; (b6870 <_GLOBAL__sub_I_ruid+0x328>)
   b65e8:	48a2      	ldr	r0, [pc, #648]	; (b6874 <_GLOBAL__sub_I_ruid+0x32c>)
   b65ea:	f004 fbca 	bl	bad82 <_ZN6StringC1EPK19__FlashStringHelper>
   b65ee:	49a2      	ldr	r1, [pc, #648]	; (b6878 <_GLOBAL__sub_I_ruid+0x330>)
   b65f0:	48a2      	ldr	r0, [pc, #648]	; (b687c <_GLOBAL__sub_I_ruid+0x334>)
   b65f2:	f004 fbc6 	bl	bad82 <_ZN6StringC1EPK19__FlashStringHelper>
   b65f6:	49a2      	ldr	r1, [pc, #648]	; (b6880 <_GLOBAL__sub_I_ruid+0x338>)
   b65f8:	48a2      	ldr	r0, [pc, #648]	; (b6884 <_GLOBAL__sub_I_ruid+0x33c>)
   b65fa:	f004 fbc2 	bl	bad82 <_ZN6StringC1EPK19__FlashStringHelper>
   b65fe:	49a2      	ldr	r1, [pc, #648]	; (b6888 <_GLOBAL__sub_I_ruid+0x340>)
   b6600:	48a2      	ldr	r0, [pc, #648]	; (b688c <_GLOBAL__sub_I_ruid+0x344>)
   b6602:	f004 fbbe 	bl	bad82 <_ZN6StringC1EPK19__FlashStringHelper>
   b6606:	497f      	ldr	r1, [pc, #508]	; (b6804 <_GLOBAL__sub_I_ruid+0x2bc>)
   b6608:	48a1      	ldr	r0, [pc, #644]	; (b6890 <_GLOBAL__sub_I_ruid+0x348>)
   b660a:	f004 fbba 	bl	bad82 <_ZN6StringC1EPK19__FlashStringHelper>
   b660e:	497d      	ldr	r1, [pc, #500]	; (b6804 <_GLOBAL__sub_I_ruid+0x2bc>)
   b6610:	48a0      	ldr	r0, [pc, #640]	; (b6894 <_GLOBAL__sub_I_ruid+0x34c>)
   b6612:	f004 fbb6 	bl	bad82 <_ZN6StringC1EPK19__FlashStringHelper>
                        "1#2","1#3#0","1#3#1","1#4","1#5" };
   b6616:	49a0      	ldr	r1, [pc, #640]	; (b6898 <_GLOBAL__sub_I_ruid+0x350>)
   b6618:	48a0      	ldr	r0, [pc, #640]	; (b689c <_GLOBAL__sub_I_ruid+0x354>)
   b661a:	f004 fbb2 	bl	bad82 <_ZN6StringC1EPK19__FlashStringHelper>
   b661e:	49a0      	ldr	r1, [pc, #640]	; (b68a0 <_GLOBAL__sub_I_ruid+0x358>)
   b6620:	48a0      	ldr	r0, [pc, #640]	; (b68a4 <_GLOBAL__sub_I_ruid+0x35c>)
   b6622:	f004 fbae 	bl	bad82 <_ZN6StringC1EPK19__FlashStringHelper>
   b6626:	49a0      	ldr	r1, [pc, #640]	; (b68a8 <_GLOBAL__sub_I_ruid+0x360>)
   b6628:	48a0      	ldr	r0, [pc, #640]	; (b68ac <_GLOBAL__sub_I_ruid+0x364>)
   b662a:	f004 fbaa 	bl	bad82 <_ZN6StringC1EPK19__FlashStringHelper>
   b662e:	49a0      	ldr	r1, [pc, #640]	; (b68b0 <_GLOBAL__sub_I_ruid+0x368>)
   b6630:	48a0      	ldr	r0, [pc, #640]	; (b68b4 <_GLOBAL__sub_I_ruid+0x36c>)
   b6632:	f004 fba6 	bl	bad82 <_ZN6StringC1EPK19__FlashStringHelper>
   b6636:	49a0      	ldr	r1, [pc, #640]	; (b68b8 <_GLOBAL__sub_I_ruid+0x370>)
   b6638:	48a0      	ldr	r0, [pc, #640]	; (b68bc <_GLOBAL__sub_I_ruid+0x374>)
   b663a:	f004 fba2 	bl	bad82 <_ZN6StringC1EPK19__FlashStringHelper>
   b663e:	49a0      	ldr	r1, [pc, #640]	; (b68c0 <_GLOBAL__sub_I_ruid+0x378>)
   b6640:	48a0      	ldr	r0, [pc, #640]	; (b68c4 <_GLOBAL__sub_I_ruid+0x37c>)
   b6642:	f004 fb9e 	bl	bad82 <_ZN6StringC1EPK19__FlashStringHelper>
   b6646:	49a0      	ldr	r1, [pc, #640]	; (b68c8 <_GLOBAL__sub_I_ruid+0x380>)
   b6648:	48a0      	ldr	r0, [pc, #640]	; (b68cc <_GLOBAL__sub_I_ruid+0x384>)
   b664a:	f004 fb9a 	bl	bad82 <_ZN6StringC1EPK19__FlashStringHelper>
   b664e:	49a0      	ldr	r1, [pc, #640]	; (b68d0 <_GLOBAL__sub_I_ruid+0x388>)
   b6650:	48a0      	ldr	r0, [pc, #640]	; (b68d4 <_GLOBAL__sub_I_ruid+0x38c>)
   b6652:	f004 fb96 	bl	bad82 <_ZN6StringC1EPK19__FlashStringHelper>
   b6656:	49a0      	ldr	r1, [pc, #640]	; (b68d8 <_GLOBAL__sub_I_ruid+0x390>)
   b6658:	48a0      	ldr	r0, [pc, #640]	; (b68dc <_GLOBAL__sub_I_ruid+0x394>)
   b665a:	f004 fb92 	bl	bad82 <_ZN6StringC1EPK19__FlashStringHelper>
   b665e:	49a0      	ldr	r1, [pc, #640]	; (b68e0 <_GLOBAL__sub_I_ruid+0x398>)
   b6660:	48a0      	ldr	r0, [pc, #640]	; (b68e4 <_GLOBAL__sub_I_ruid+0x39c>)
   b6662:	f004 fb8e 	bl	bad82 <_ZN6StringC1EPK19__FlashStringHelper>
   b6666:	49a0      	ldr	r1, [pc, #640]	; (b68e8 <_GLOBAL__sub_I_ruid+0x3a0>)
   b6668:	48a0      	ldr	r0, [pc, #640]	; (b68ec <_GLOBAL__sub_I_ruid+0x3a4>)
   b666a:	f004 fb8a 	bl	bad82 <_ZN6StringC1EPK19__FlashStringHelper>
   b666e:	49a0      	ldr	r1, [pc, #640]	; (b68f0 <_GLOBAL__sub_I_ruid+0x3a8>)
   b6670:	48a0      	ldr	r0, [pc, #640]	; (b68f4 <_GLOBAL__sub_I_ruid+0x3ac>)
   b6672:	f004 fb86 	bl	bad82 <_ZN6StringC1EPK19__FlashStringHelper>
   b6676:	49a0      	ldr	r1, [pc, #640]	; (b68f8 <_GLOBAL__sub_I_ruid+0x3b0>)
   b6678:	48a0      	ldr	r0, [pc, #640]	; (b68fc <_GLOBAL__sub_I_ruid+0x3b4>)
   b667a:	f004 fb82 	bl	bad82 <_ZN6StringC1EPK19__FlashStringHelper>
   b667e:	49a0      	ldr	r1, [pc, #640]	; (b6900 <_GLOBAL__sub_I_ruid+0x3b8>)
   b6680:	48a0      	ldr	r0, [pc, #640]	; (b6904 <_GLOBAL__sub_I_ruid+0x3bc>)
   b6682:	f004 fb7e 	bl	bad82 <_ZN6StringC1EPK19__FlashStringHelper>
   b6686:	49a0      	ldr	r1, [pc, #640]	; (b6908 <_GLOBAL__sub_I_ruid+0x3c0>)
   b6688:	48a0      	ldr	r0, [pc, #640]	; (b690c <_GLOBAL__sub_I_ruid+0x3c4>)
   b668a:	f004 fb7a 	bl	bad82 <_ZN6StringC1EPK19__FlashStringHelper>
   b668e:	49a0      	ldr	r1, [pc, #640]	; (b6910 <_GLOBAL__sub_I_ruid+0x3c8>)
   b6690:	48a0      	ldr	r0, [pc, #640]	; (b6914 <_GLOBAL__sub_I_ruid+0x3cc>)
   b6692:	f004 fb76 	bl	bad82 <_ZN6StringC1EPK19__FlashStringHelper>
   b6696:	49a0      	ldr	r1, [pc, #640]	; (b6918 <_GLOBAL__sub_I_ruid+0x3d0>)
   b6698:	48a0      	ldr	r0, [pc, #640]	; (b691c <_GLOBAL__sub_I_ruid+0x3d4>)
   b669a:	f004 fb72 	bl	bad82 <_ZN6StringC1EPK19__FlashStringHelper>
   b669e:	49a0      	ldr	r1, [pc, #640]	; (b6920 <_GLOBAL__sub_I_ruid+0x3d8>)
   b66a0:	48a0      	ldr	r0, [pc, #640]	; (b6924 <_GLOBAL__sub_I_ruid+0x3dc>)
   b66a2:	f004 fb6e 	bl	bad82 <_ZN6StringC1EPK19__FlashStringHelper>
   b66a6:	49a0      	ldr	r1, [pc, #640]	; (b6928 <_GLOBAL__sub_I_ruid+0x3e0>)
   b66a8:	48a0      	ldr	r0, [pc, #640]	; (b692c <_GLOBAL__sub_I_ruid+0x3e4>)
   b66aa:	f004 fb6a 	bl	bad82 <_ZN6StringC1EPK19__FlashStringHelper>
   b66ae:	49a0      	ldr	r1, [pc, #640]	; (b6930 <_GLOBAL__sub_I_ruid+0x3e8>)
   b66b0:	48a0      	ldr	r0, [pc, #640]	; (b6934 <_GLOBAL__sub_I_ruid+0x3ec>)
   b66b2:	f004 fb66 	bl	bad82 <_ZN6StringC1EPK19__FlashStringHelper>
   b66b6:	49a0      	ldr	r1, [pc, #640]	; (b6938 <_GLOBAL__sub_I_ruid+0x3f0>)
   b66b8:	48a0      	ldr	r0, [pc, #640]	; (b693c <_GLOBAL__sub_I_ruid+0x3f4>)
   b66ba:	f004 fb62 	bl	bad82 <_ZN6StringC1EPK19__FlashStringHelper>
   b66be:	49a0      	ldr	r1, [pc, #640]	; (b6940 <_GLOBAL__sub_I_ruid+0x3f8>)
   b66c0:	48a0      	ldr	r0, [pc, #640]	; (b6944 <_GLOBAL__sub_I_ruid+0x3fc>)
   b66c2:	f004 fb5e 	bl	bad82 <_ZN6StringC1EPK19__FlashStringHelper>
   b66c6:	49a0      	ldr	r1, [pc, #640]	; (b6948 <_GLOBAL__sub_I_ruid+0x400>)
   b66c8:	48a0      	ldr	r0, [pc, #640]	; (b694c <_GLOBAL__sub_I_ruid+0x404>)
   b66ca:	f004 fb5a 	bl	bad82 <_ZN6StringC1EPK19__FlashStringHelper>
   b66ce:	49a0      	ldr	r1, [pc, #640]	; (b6950 <_GLOBAL__sub_I_ruid+0x408>)
   b66d0:	48a0      	ldr	r0, [pc, #640]	; (b6954 <_GLOBAL__sub_I_ruid+0x40c>)
   b66d2:	f004 fb56 	bl	bad82 <_ZN6StringC1EPK19__FlashStringHelper>
   b66d6:	49a0      	ldr	r1, [pc, #640]	; (b6958 <_GLOBAL__sub_I_ruid+0x410>)
   b66d8:	48a0      	ldr	r0, [pc, #640]	; (b695c <_GLOBAL__sub_I_ruid+0x414>)
   b66da:	f004 fb52 	bl	bad82 <_ZN6StringC1EPK19__FlashStringHelper>
   b66de:	49a0      	ldr	r1, [pc, #640]	; (b6960 <_GLOBAL__sub_I_ruid+0x418>)
   b66e0:	48a0      	ldr	r0, [pc, #640]	; (b6964 <_GLOBAL__sub_I_ruid+0x41c>)
   b66e2:	f004 fb4e 	bl	bad82 <_ZN6StringC1EPK19__FlashStringHelper>
   b66e6:	49a0      	ldr	r1, [pc, #640]	; (b6968 <_GLOBAL__sub_I_ruid+0x420>)
   b66e8:	48a0      	ldr	r0, [pc, #640]	; (b696c <_GLOBAL__sub_I_ruid+0x424>)
   b66ea:	f004 fb4a 	bl	bad82 <_ZN6StringC1EPK19__FlashStringHelper>
   b66ee:	49a0      	ldr	r1, [pc, #640]	; (b6970 <_GLOBAL__sub_I_ruid+0x428>)
   b66f0:	48a0      	ldr	r0, [pc, #640]	; (b6974 <_GLOBAL__sub_I_ruid+0x42c>)
   b66f2:	f004 fb46 	bl	bad82 <_ZN6StringC1EPK19__FlashStringHelper>
                        "2#1#0","2#2#0","2#2#1","2#2#2","2#2#3","2#2#4","2#2#5","2#2#6","2#2#7","2#2#8"};
   b66f6:	49a0      	ldr	r1, [pc, #640]	; (b6978 <_GLOBAL__sub_I_ruid+0x430>)
   b66f8:	48a0      	ldr	r0, [pc, #640]	; (b697c <_GLOBAL__sub_I_ruid+0x434>)
   b66fa:	f004 fb42 	bl	bad82 <_ZN6StringC1EPK19__FlashStringHelper>
   b66fe:	49a0      	ldr	r1, [pc, #640]	; (b6980 <_GLOBAL__sub_I_ruid+0x438>)
   b6700:	48a0      	ldr	r0, [pc, #640]	; (b6984 <_GLOBAL__sub_I_ruid+0x43c>)
   b6702:	f004 fb3e 	bl	bad82 <_ZN6StringC1EPK19__FlashStringHelper>
   b6706:	49a0      	ldr	r1, [pc, #640]	; (b6988 <_GLOBAL__sub_I_ruid+0x440>)
   b6708:	48a0      	ldr	r0, [pc, #640]	; (b698c <_GLOBAL__sub_I_ruid+0x444>)
   b670a:	f004 fb3a 	bl	bad82 <_ZN6StringC1EPK19__FlashStringHelper>
   b670e:	49a0      	ldr	r1, [pc, #640]	; (b6990 <_GLOBAL__sub_I_ruid+0x448>)
   b6710:	48a0      	ldr	r0, [pc, #640]	; (b6994 <_GLOBAL__sub_I_ruid+0x44c>)
   b6712:	f004 fb36 	bl	bad82 <_ZN6StringC1EPK19__FlashStringHelper>
   b6716:	49a0      	ldr	r1, [pc, #640]	; (b6998 <_GLOBAL__sub_I_ruid+0x450>)
   b6718:	48a0      	ldr	r0, [pc, #640]	; (b699c <_GLOBAL__sub_I_ruid+0x454>)
   b671a:	f004 fb32 	bl	bad82 <_ZN6StringC1EPK19__FlashStringHelper>
   b671e:	49a0      	ldr	r1, [pc, #640]	; (b69a0 <_GLOBAL__sub_I_ruid+0x458>)
   b6720:	48a0      	ldr	r0, [pc, #640]	; (b69a4 <_GLOBAL__sub_I_ruid+0x45c>)
   b6722:	f004 fb2e 	bl	bad82 <_ZN6StringC1EPK19__FlashStringHelper>
   b6726:	49a0      	ldr	r1, [pc, #640]	; (b69a8 <_GLOBAL__sub_I_ruid+0x460>)
   b6728:	48a0      	ldr	r0, [pc, #640]	; (b69ac <_GLOBAL__sub_I_ruid+0x464>)
   b672a:	f004 fb2a 	bl	bad82 <_ZN6StringC1EPK19__FlashStringHelper>
   b672e:	49a0      	ldr	r1, [pc, #640]	; (b69b0 <_GLOBAL__sub_I_ruid+0x468>)
   b6730:	48a0      	ldr	r0, [pc, #640]	; (b69b4 <_GLOBAL__sub_I_ruid+0x46c>)
   b6732:	f004 fb26 	bl	bad82 <_ZN6StringC1EPK19__FlashStringHelper>
   b6736:	49a0      	ldr	r1, [pc, #640]	; (b69b8 <_GLOBAL__sub_I_ruid+0x470>)
   b6738:	48a0      	ldr	r0, [pc, #640]	; (b69bc <_GLOBAL__sub_I_ruid+0x474>)
   b673a:	f004 fb22 	bl	bad82 <_ZN6StringC1EPK19__FlashStringHelper>
   b673e:	49a0      	ldr	r1, [pc, #640]	; (b69c0 <_GLOBAL__sub_I_ruid+0x478>)
   b6740:	48a0      	ldr	r0, [pc, #640]	; (b69c4 <_GLOBAL__sub_I_ruid+0x47c>)
   b6742:	f004 fb1e 	bl	bad82 <_ZN6StringC1EPK19__FlashStringHelper>
   b6746:	49a0      	ldr	r1, [pc, #640]	; (b69c8 <_GLOBAL__sub_I_ruid+0x480>)
   b6748:	48a0      	ldr	r0, [pc, #640]	; (b69cc <_GLOBAL__sub_I_ruid+0x484>)
   b674a:	f004 fb1a 	bl	bad82 <_ZN6StringC1EPK19__FlashStringHelper>
   b674e:	49a0      	ldr	r1, [pc, #640]	; (b69d0 <_GLOBAL__sub_I_ruid+0x488>)
   b6750:	48a0      	ldr	r0, [pc, #640]	; (b69d4 <_GLOBAL__sub_I_ruid+0x48c>)
   b6752:	f004 fb16 	bl	bad82 <_ZN6StringC1EPK19__FlashStringHelper>
   b6756:	49a0      	ldr	r1, [pc, #640]	; (b69d8 <_GLOBAL__sub_I_ruid+0x490>)
   b6758:	48a0      	ldr	r0, [pc, #640]	; (b69dc <_GLOBAL__sub_I_ruid+0x494>)
   b675a:	f004 fb12 	bl	bad82 <_ZN6StringC1EPK19__FlashStringHelper>
   b675e:	49a0      	ldr	r1, [pc, #640]	; (b69e0 <_GLOBAL__sub_I_ruid+0x498>)
   b6760:	48a0      	ldr	r0, [pc, #640]	; (b69e4 <_GLOBAL__sub_I_ruid+0x49c>)
   b6762:	f004 fb0e 	bl	bad82 <_ZN6StringC1EPK19__FlashStringHelper>
   b6766:	49a0      	ldr	r1, [pc, #640]	; (b69e8 <_GLOBAL__sub_I_ruid+0x4a0>)
   b6768:	48a0      	ldr	r0, [pc, #640]	; (b69ec <_GLOBAL__sub_I_ruid+0x4a4>)
   b676a:	f004 fb0a 	bl	bad82 <_ZN6StringC1EPK19__FlashStringHelper>
   b676e:	49a0      	ldr	r1, [pc, #640]	; (b69f0 <_GLOBAL__sub_I_ruid+0x4a8>)
   b6770:	48a0      	ldr	r0, [pc, #640]	; (b69f4 <_GLOBAL__sub_I_ruid+0x4ac>)
   b6772:	f004 fb06 	bl	bad82 <_ZN6StringC1EPK19__FlashStringHelper>
   b6776:	49a0      	ldr	r1, [pc, #640]	; (b69f8 <_GLOBAL__sub_I_ruid+0x4b0>)
   b6778:	48a0      	ldr	r0, [pc, #640]	; (b69fc <_GLOBAL__sub_I_ruid+0x4b4>)
   b677a:	f004 fb02 	bl	bad82 <_ZN6StringC1EPK19__FlashStringHelper>
   b677e:	49a0      	ldr	r1, [pc, #640]	; (b6a00 <_GLOBAL__sub_I_ruid+0x4b8>)
   b6780:	48a0      	ldr	r0, [pc, #640]	; (b6a04 <_GLOBAL__sub_I_ruid+0x4bc>)
   b6782:	f004 fafe 	bl	bad82 <_ZN6StringC1EPK19__FlashStringHelper>
   b6786:	49a0      	ldr	r1, [pc, #640]	; (b6a08 <_GLOBAL__sub_I_ruid+0x4c0>)
   b6788:	48a0      	ldr	r0, [pc, #640]	; (b6a0c <_GLOBAL__sub_I_ruid+0x4c4>)
   b678a:	f004 fafa 	bl	bad82 <_ZN6StringC1EPK19__FlashStringHelper>
   b678e:	49a0      	ldr	r1, [pc, #640]	; (b6a10 <_GLOBAL__sub_I_ruid+0x4c8>)
   b6790:	48a0      	ldr	r0, [pc, #640]	; (b6a14 <_GLOBAL__sub_I_ruid+0x4cc>)
   b6792:	f004 faf6 	bl	bad82 <_ZN6StringC1EPK19__FlashStringHelper>
   b6796:	49a0      	ldr	r1, [pc, #640]	; (b6a18 <_GLOBAL__sub_I_ruid+0x4d0>)
   b6798:	48a0      	ldr	r0, [pc, #640]	; (b6a1c <_GLOBAL__sub_I_ruid+0x4d4>)
   b679a:	f004 faf2 	bl	bad82 <_ZN6StringC1EPK19__FlashStringHelper>
   b679e:	49a0      	ldr	r1, [pc, #640]	; (b6a20 <_GLOBAL__sub_I_ruid+0x4d8>)
   b67a0:	48a0      	ldr	r0, [pc, #640]	; (b6a24 <_GLOBAL__sub_I_ruid+0x4dc>)
   b67a2:	f004 faee 	bl	bad82 <_ZN6StringC1EPK19__FlashStringHelper>
   b67a6:	49a0      	ldr	r1, [pc, #640]	; (b6a28 <_GLOBAL__sub_I_ruid+0x4e0>)
   b67a8:	48a0      	ldr	r0, [pc, #640]	; (b6a2c <_GLOBAL__sub_I_ruid+0x4e4>)
   b67aa:	f004 faea 	bl	bad82 <_ZN6StringC1EPK19__FlashStringHelper>
   b67ae:	49a0      	ldr	r1, [pc, #640]	; (b6a30 <_GLOBAL__sub_I_ruid+0x4e8>)
   b67b0:	48a0      	ldr	r0, [pc, #640]	; (b6a34 <_GLOBAL__sub_I_ruid+0x4ec>)
   b67b2:	f004 fae6 	bl	bad82 <_ZN6StringC1EPK19__FlashStringHelper>
   b67b6:	49a0      	ldr	r1, [pc, #640]	; (b6a38 <_GLOBAL__sub_I_ruid+0x4f0>)
   b67b8:	48a0      	ldr	r0, [pc, #640]	; (b6a3c <_GLOBAL__sub_I_ruid+0x4f4>)
   b67ba:	f004 fae2 	bl	bad82 <_ZN6StringC1EPK19__FlashStringHelper>
   b67be:	49a0      	ldr	r1, [pc, #640]	; (b6a40 <_GLOBAL__sub_I_ruid+0x4f8>)
   b67c0:	48a0      	ldr	r0, [pc, #640]	; (b6a44 <_GLOBAL__sub_I_ruid+0x4fc>)
   b67c2:	f004 fade 	bl	bad82 <_ZN6StringC1EPK19__FlashStringHelper>
   b67c6:	49a0      	ldr	r1, [pc, #640]	; (b6a48 <_GLOBAL__sub_I_ruid+0x500>)
   b67c8:	48a0      	ldr	r0, [pc, #640]	; (b6a4c <_GLOBAL__sub_I_ruid+0x504>)
   b67ca:	f004 fada 	bl	bad82 <_ZN6StringC1EPK19__FlashStringHelper>
   b67ce:	49a0      	ldr	r1, [pc, #640]	; (b6a50 <_GLOBAL__sub_I_ruid+0x508>)
   b67d0:	48a0      	ldr	r0, [pc, #640]	; (b6a54 <_GLOBAL__sub_I_ruid+0x50c>)
   b67d2:	f004 fad6 	bl	bad82 <_ZN6StringC1EPK19__FlashStringHelper>
   b67d6:	49a0      	ldr	r1, [pc, #640]	; (b6a58 <_GLOBAL__sub_I_ruid+0x510>)
   b67d8:	48a0      	ldr	r0, [pc, #640]	; (b6a5c <_GLOBAL__sub_I_ruid+0x514>)
   b67da:	f004 fad2 	bl	bad82 <_ZN6StringC1EPK19__FlashStringHelper>
   b67de:	49a0      	ldr	r1, [pc, #640]	; (b6a60 <_GLOBAL__sub_I_ruid+0x518>)
   b67e0:	48a0      	ldr	r0, [pc, #640]	; (b6a64 <_GLOBAL__sub_I_ruid+0x51c>)
   b67e2:	f004 face 	bl	bad82 <_ZN6StringC1EPK19__FlashStringHelper>
   b67e6:	49a0      	ldr	r1, [pc, #640]	; (b6a68 <_GLOBAL__sub_I_ruid+0x520>)
   b67e8:	48a0      	ldr	r0, [pc, #640]	; (b6a6c <_GLOBAL__sub_I_ruid+0x524>)
   b67ea:	f004 faca 	bl	bad82 <_ZN6StringC1EPK19__FlashStringHelper>
   b67ee:	49a0      	ldr	r1, [pc, #640]	; (b6a70 <_GLOBAL__sub_I_ruid+0x528>)
   b67f0:	48a0      	ldr	r0, [pc, #640]	; (b6a74 <_GLOBAL__sub_I_ruid+0x52c>)
   b67f2:	f004 fac6 	bl	bad82 <_ZN6StringC1EPK19__FlashStringHelper>
   b67f6:	49a0      	ldr	r1, [pc, #640]	; (b6a78 <_GLOBAL__sub_I_ruid+0x530>)
   b67f8:	e140      	b.n	b6a7c <_GLOBAL__sub_I_ruid+0x534>
   b67fa:	bf00      	nop
   b67fc:	2003d6e0 	.word	0x2003d6e0
   b6800:	2003dc88 	.word	0x2003dc88
   b6804:	000bc0fa 	.word	0x000bc0fa
   b6808:	2003cd14 	.word	0x2003cd14
   b680c:	2003d338 	.word	0x2003d338
   b6810:	2003c73c 	.word	0x2003c73c
   b6814:	000bc108 	.word	0x000bc108
   b6818:	2003d388 	.word	0x2003d388
   b681c:	2003d398 	.word	0x2003d398
   b6820:	000bc176 	.word	0x000bc176
   b6824:	2003e378 	.word	0x2003e378
   b6828:	000bc18a 	.word	0x000bc18a
   b682c:	2003e388 	.word	0x2003e388
   b6830:	000bc2ba 	.word	0x000bc2ba
   b6834:	2003e398 	.word	0x2003e398
   b6838:	000bc10a 	.word	0x000bc10a
   b683c:	2003e3a8 	.word	0x2003e3a8
   b6840:	000bc110 	.word	0x000bc110
   b6844:	2003e3b8 	.word	0x2003e3b8
   b6848:	000bc117 	.word	0x000bc117
   b684c:	2003e3c8 	.word	0x2003e3c8
   b6850:	000bc11e 	.word	0x000bc11e
   b6854:	2003e3d8 	.word	0x2003e3d8
   b6858:	000bc126 	.word	0x000bc126
   b685c:	2003e3e8 	.word	0x2003e3e8
   b6860:	000bc12e 	.word	0x000bc12e
   b6864:	2003e3f8 	.word	0x2003e3f8
   b6868:	000bc136 	.word	0x000bc136
   b686c:	2003e408 	.word	0x2003e408
   b6870:	000bc13e 	.word	0x000bc13e
   b6874:	2003e418 	.word	0x2003e418
   b6878:	000bc146 	.word	0x000bc146
   b687c:	2003e428 	.word	0x2003e428
   b6880:	000bc14e 	.word	0x000bc14e
   b6884:	2003e438 	.word	0x2003e438
   b6888:	000bc156 	.word	0x000bc156
   b688c:	2003e448 	.word	0x2003e448
   b6890:	2003e458 	.word	0x2003e458
   b6894:	2003e468 	.word	0x2003e468
   b6898:	000bc15e 	.word	0x000bc15e
   b689c:	2003e1b8 	.word	0x2003e1b8
   b68a0:	000bc168 	.word	0x000bc168
   b68a4:	2003e1c8 	.word	0x2003e1c8
   b68a8:	000bc172 	.word	0x000bc172
   b68ac:	2003e1d8 	.word	0x2003e1d8
   b68b0:	000bc17c 	.word	0x000bc17c
   b68b4:	2003e1e8 	.word	0x2003e1e8
   b68b8:	000bc186 	.word	0x000bc186
   b68bc:	2003e1f8 	.word	0x2003e1f8
   b68c0:	000bc190 	.word	0x000bc190
   b68c4:	2003e208 	.word	0x2003e208
   b68c8:	000bc19a 	.word	0x000bc19a
   b68cc:	2003e218 	.word	0x2003e218
   b68d0:	000bc1a4 	.word	0x000bc1a4
   b68d4:	2003e228 	.word	0x2003e228
   b68d8:	000bc1ae 	.word	0x000bc1ae
   b68dc:	2003e238 	.word	0x2003e238
   b68e0:	000bc1b8 	.word	0x000bc1b8
   b68e4:	2003e248 	.word	0x2003e248
   b68e8:	000bc1c2 	.word	0x000bc1c2
   b68ec:	2003e258 	.word	0x2003e258
   b68f0:	000bc1cc 	.word	0x000bc1cc
   b68f4:	2003e268 	.word	0x2003e268
   b68f8:	000bc1d6 	.word	0x000bc1d6
   b68fc:	2003e278 	.word	0x2003e278
   b6900:	000bc1e0 	.word	0x000bc1e0
   b6904:	2003e288 	.word	0x2003e288
   b6908:	000bc1ea 	.word	0x000bc1ea
   b690c:	2003e298 	.word	0x2003e298
   b6910:	000bc1f4 	.word	0x000bc1f4
   b6914:	2003e2a8 	.word	0x2003e2a8
   b6918:	000bc1fe 	.word	0x000bc1fe
   b691c:	2003e2b8 	.word	0x2003e2b8
   b6920:	000bc208 	.word	0x000bc208
   b6924:	2003e2c8 	.word	0x2003e2c8
   b6928:	000bc212 	.word	0x000bc212
   b692c:	2003e2d8 	.word	0x2003e2d8
   b6930:	000bc21c 	.word	0x000bc21c
   b6934:	2003e2e8 	.word	0x2003e2e8
   b6938:	000bc226 	.word	0x000bc226
   b693c:	2003e2f8 	.word	0x2003e2f8
   b6940:	000bc230 	.word	0x000bc230
   b6944:	2003e308 	.word	0x2003e308
   b6948:	000bc23a 	.word	0x000bc23a
   b694c:	2003e318 	.word	0x2003e318
   b6950:	000bc142 	.word	0x000bc142
   b6954:	2003e328 	.word	0x2003e328
   b6958:	000bc244 	.word	0x000bc244
   b695c:	2003e338 	.word	0x2003e338
   b6960:	000bc24a 	.word	0x000bc24a
   b6964:	2003e348 	.word	0x2003e348
   b6968:	000bc152 	.word	0x000bc152
   b696c:	2003e358 	.word	0x2003e358
   b6970:	000bc15a 	.word	0x000bc15a
   b6974:	2003e368 	.word	0x2003e368
   b6978:	000bc250 	.word	0x000bc250
   b697c:	2003e478 	.word	0x2003e478
   b6980:	000bc258 	.word	0x000bc258
   b6984:	2003e488 	.word	0x2003e488
   b6988:	000bc260 	.word	0x000bc260
   b698c:	2003e498 	.word	0x2003e498
   b6990:	000bc268 	.word	0x000bc268
   b6994:	2003e4a8 	.word	0x2003e4a8
   b6998:	000bc270 	.word	0x000bc270
   b699c:	2003e4b8 	.word	0x2003e4b8
   b69a0:	000bc278 	.word	0x000bc278
   b69a4:	2003e4c8 	.word	0x2003e4c8
   b69a8:	000bc280 	.word	0x000bc280
   b69ac:	2003e4d8 	.word	0x2003e4d8
   b69b0:	000bc288 	.word	0x000bc288
   b69b4:	2003e4e8 	.word	0x2003e4e8
   b69b8:	000bc290 	.word	0x000bc290
   b69bc:	2003e4f8 	.word	0x2003e4f8
   b69c0:	000bc298 	.word	0x000bc298
   b69c4:	2003e508 	.word	0x2003e508
   b69c8:	000bc2a0 	.word	0x000bc2a0
   b69cc:	2003e518 	.word	0x2003e518
   b69d0:	000bc2a8 	.word	0x000bc2a8
   b69d4:	2003e528 	.word	0x2003e528
   b69d8:	000bc2b0 	.word	0x000bc2b0
   b69dc:	2003e538 	.word	0x2003e538
   b69e0:	000bc2b8 	.word	0x000bc2b8
   b69e4:	2003e548 	.word	0x2003e548
   b69e8:	000bc2c0 	.word	0x000bc2c0
   b69ec:	2003e558 	.word	0x2003e558
   b69f0:	000bc2c8 	.word	0x000bc2c8
   b69f4:	2003e568 	.word	0x2003e568
   b69f8:	000bc2d0 	.word	0x000bc2d0
   b69fc:	2003e578 	.word	0x2003e578
   b6a00:	000bc2d8 	.word	0x000bc2d8
   b6a04:	2003e588 	.word	0x2003e588
   b6a08:	000bc2e0 	.word	0x000bc2e0
   b6a0c:	2003e598 	.word	0x2003e598
   b6a10:	000bc2e8 	.word	0x000bc2e8
   b6a14:	2003e5a8 	.word	0x2003e5a8
   b6a18:	000bc2f0 	.word	0x000bc2f0
   b6a1c:	2003e5b8 	.word	0x2003e5b8
   b6a20:	000bc2f8 	.word	0x000bc2f8
   b6a24:	2003e5c8 	.word	0x2003e5c8
   b6a28:	000bc300 	.word	0x000bc300
   b6a2c:	2003e5d8 	.word	0x2003e5d8
   b6a30:	000bc308 	.word	0x000bc308
   b6a34:	2003e5e8 	.word	0x2003e5e8
   b6a38:	000bc310 	.word	0x000bc310
   b6a3c:	2003e5f8 	.word	0x2003e5f8
   b6a40:	000bc316 	.word	0x000bc316
   b6a44:	2003e608 	.word	0x2003e608
   b6a48:	000bc31c 	.word	0x000bc31c
   b6a4c:	2003e618 	.word	0x2003e618
   b6a50:	000bc322 	.word	0x000bc322
   b6a54:	2003e628 	.word	0x2003e628
   b6a58:	000bc328 	.word	0x000bc328
   b6a5c:	2003e638 	.word	0x2003e638
   b6a60:	000bc32e 	.word	0x000bc32e
   b6a64:	2003e648 	.word	0x2003e648
   b6a68:	000bc334 	.word	0x000bc334
   b6a6c:	2003e658 	.word	0x2003e658
   b6a70:	000bc33a 	.word	0x000bc33a
   b6a74:	2003e668 	.word	0x2003e668
   b6a78:	000bc340 	.word	0x000bc340
   b6a7c:	4831      	ldr	r0, [pc, #196]	; (b6b44 <_GLOBAL__sub_I_ruid+0x5fc>)
   b6a7e:	f004 f980 	bl	bad82 <_ZN6StringC1EPK19__FlashStringHelper>
   b6a82:	4931      	ldr	r1, [pc, #196]	; (b6b48 <_GLOBAL__sub_I_ruid+0x600>)
   b6a84:	4831      	ldr	r0, [pc, #196]	; (b6b4c <_GLOBAL__sub_I_ruid+0x604>)
   b6a86:	f004 f97c 	bl	bad82 <_ZN6StringC1EPK19__FlashStringHelper>
   b6a8a:	4931      	ldr	r1, [pc, #196]	; (b6b50 <_GLOBAL__sub_I_ruid+0x608>)
   b6a8c:	4831      	ldr	r0, [pc, #196]	; (b6b54 <_GLOBAL__sub_I_ruid+0x60c>)
   b6a8e:	f004 f978 	bl	bad82 <_ZN6StringC1EPK19__FlashStringHelper>
String tarjetas_comunes[8] = {"6#0#0","6#0#1","6#0#2","6#1#0","6#2#0","6#2#1","6#2#2"};
   b6a92:	4931      	ldr	r1, [pc, #196]	; (b6b58 <_GLOBAL__sub_I_ruid+0x610>)
   b6a94:	4831      	ldr	r0, [pc, #196]	; (b6b5c <_GLOBAL__sub_I_ruid+0x614>)
   b6a96:	f004 f974 	bl	bad82 <_ZN6StringC1EPK19__FlashStringHelper>
   b6a9a:	4931      	ldr	r1, [pc, #196]	; (b6b60 <_GLOBAL__sub_I_ruid+0x618>)
   b6a9c:	4831      	ldr	r0, [pc, #196]	; (b6b64 <_GLOBAL__sub_I_ruid+0x61c>)
   b6a9e:	f004 f970 	bl	bad82 <_ZN6StringC1EPK19__FlashStringHelper>
   b6aa2:	4931      	ldr	r1, [pc, #196]	; (b6b68 <_GLOBAL__sub_I_ruid+0x620>)
   b6aa4:	4831      	ldr	r0, [pc, #196]	; (b6b6c <_GLOBAL__sub_I_ruid+0x624>)
   b6aa6:	f004 f96c 	bl	bad82 <_ZN6StringC1EPK19__FlashStringHelper>
   b6aaa:	4931      	ldr	r1, [pc, #196]	; (b6b70 <_GLOBAL__sub_I_ruid+0x628>)
   b6aac:	4831      	ldr	r0, [pc, #196]	; (b6b74 <_GLOBAL__sub_I_ruid+0x62c>)
   b6aae:	f004 f968 	bl	bad82 <_ZN6StringC1EPK19__FlashStringHelper>
   b6ab2:	4931      	ldr	r1, [pc, #196]	; (b6b78 <_GLOBAL__sub_I_ruid+0x630>)
   b6ab4:	4831      	ldr	r0, [pc, #196]	; (b6b7c <_GLOBAL__sub_I_ruid+0x634>)
   b6ab6:	f004 f964 	bl	bad82 <_ZN6StringC1EPK19__FlashStringHelper>
   b6aba:	4931      	ldr	r1, [pc, #196]	; (b6b80 <_GLOBAL__sub_I_ruid+0x638>)
   b6abc:	4831      	ldr	r0, [pc, #196]	; (b6b84 <_GLOBAL__sub_I_ruid+0x63c>)
   b6abe:	f004 f960 	bl	bad82 <_ZN6StringC1EPK19__FlashStringHelper>
   b6ac2:	4931      	ldr	r1, [pc, #196]	; (b6b88 <_GLOBAL__sub_I_ruid+0x640>)
   b6ac4:	4831      	ldr	r0, [pc, #196]	; (b6b8c <_GLOBAL__sub_I_ruid+0x644>)
   b6ac6:	f004 f95c 	bl	bad82 <_ZN6StringC1EPK19__FlashStringHelper>
   b6aca:	4921      	ldr	r1, [pc, #132]	; (b6b50 <_GLOBAL__sub_I_ruid+0x608>)
   b6acc:	4830      	ldr	r0, [pc, #192]	; (b6b90 <_GLOBAL__sub_I_ruid+0x648>)
   b6ace:	f004 f958 	bl	bad82 <_ZN6StringC1EPK19__FlashStringHelper>
String tarjetas[80] = {"3#0#0#12#0","3#0#1#6#0", "1#0#1#9#3", "1#0#0#12#1", "1#1#0#13#1"};
   b6ad2:	4930      	ldr	r1, [pc, #192]	; (b6b94 <_GLOBAL__sub_I_ruid+0x64c>)
   b6ad4:	4830      	ldr	r0, [pc, #192]	; (b6b98 <_GLOBAL__sub_I_ruid+0x650>)
   b6ad6:	f004 f954 	bl	bad82 <_ZN6StringC1EPK19__FlashStringHelper>
   b6ada:	4930      	ldr	r1, [pc, #192]	; (b6b9c <_GLOBAL__sub_I_ruid+0x654>)
   b6adc:	4830      	ldr	r0, [pc, #192]	; (b6ba0 <_GLOBAL__sub_I_ruid+0x658>)
   b6ade:	f004 f950 	bl	bad82 <_ZN6StringC1EPK19__FlashStringHelper>
   b6ae2:	4930      	ldr	r1, [pc, #192]	; (b6ba4 <_GLOBAL__sub_I_ruid+0x65c>)
   b6ae4:	4830      	ldr	r0, [pc, #192]	; (b6ba8 <_GLOBAL__sub_I_ruid+0x660>)
   b6ae6:	f004 f94c 	bl	bad82 <_ZN6StringC1EPK19__FlashStringHelper>
   b6aea:	4930      	ldr	r1, [pc, #192]	; (b6bac <_GLOBAL__sub_I_ruid+0x664>)
   b6aec:	4830      	ldr	r0, [pc, #192]	; (b6bb0 <_GLOBAL__sub_I_ruid+0x668>)
   b6aee:	f004 f948 	bl	bad82 <_ZN6StringC1EPK19__FlashStringHelper>
   b6af2:	4930      	ldr	r1, [pc, #192]	; (b6bb4 <_GLOBAL__sub_I_ruid+0x66c>)
   b6af4:	4830      	ldr	r0, [pc, #192]	; (b6bb8 <_GLOBAL__sub_I_ruid+0x670>)
   b6af6:	f004 f944 	bl	bad82 <_ZN6StringC1EPK19__FlashStringHelper>
   b6afa:	1928      	adds	r0, r5, r4
   b6afc:	4631      	mov	r1, r6
   b6afe:	3410      	adds	r4, #16
   b6b00:	f004 f93f 	bl	bad82 <_ZN6StringC1EPK19__FlashStringHelper>
   b6b04:	f5b4 6f96 	cmp.w	r4, #1200	; 0x4b0
   b6b08:	d1f7      	bne.n	b6afa <_GLOBAL__sub_I_ruid+0x5b2>
MFRC522 mfrc522(SS_PIN, RST_PIN);
   b6b0a:	482c      	ldr	r0, [pc, #176]	; (b6bbc <_GLOBAL__sub_I_ruid+0x674>)
String secuencia[30];
   b6b0c:	4d2c      	ldr	r5, [pc, #176]	; (b6bc0 <_GLOBAL__sub_I_ruid+0x678>)
   b6b0e:	4e10      	ldr	r6, [pc, #64]	; (b6b50 <_GLOBAL__sub_I_ruid+0x608>)
MFRC522 mfrc522(SS_PIN, RST_PIN);
   b6b10:	2208      	movs	r2, #8
   b6b12:	2110      	movs	r1, #16
   b6b14:	f002 fa73 	bl	b8ffe <_ZN7MFRC522C1Ehh>
   b6b18:	2400      	movs	r4, #0
String secuencia[30];
   b6b1a:	1928      	adds	r0, r5, r4
   b6b1c:	4631      	mov	r1, r6
   b6b1e:	3410      	adds	r4, #16
   b6b20:	f004 f92f 	bl	bad82 <_ZN6StringC1EPK19__FlashStringHelper>
   b6b24:	f5b4 7ff0 	cmp.w	r4, #480	; 0x1e0
   b6b28:	d1f7      	bne.n	b6b1a <_GLOBAL__sub_I_ruid+0x5d2>

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b6b2a:	4b26      	ldr	r3, [pc, #152]	; (b6bc4 <_GLOBAL__sub_I_ruid+0x67c>)
   b6b2c:	2200      	movs	r2, #0
   b6b2e:	e9c3 2200 	strd	r2, r2, [r3]
    SleepResult() {}
   b6b32:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
   b6b36:	609a      	str	r2, [r3, #8]
   b6b38:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b6b3c:	2002      	movs	r0, #2
   b6b3e:	f003 beb3 	b.w	ba8a8 <set_system_mode>
   b6b42:	bf00      	nop
   b6b44:	2003e678 	.word	0x2003e678
   b6b48:	000bc346 	.word	0x000bc346
   b6b4c:	2003e688 	.word	0x2003e688
   b6b50:	000bc0fa 	.word	0x000bc0fa
   b6b54:	2003e698 	.word	0x2003e698
   b6b58:	000bc34c 	.word	0x000bc34c
   b6b5c:	2003e138 	.word	0x2003e138
   b6b60:	000bc352 	.word	0x000bc352
   b6b64:	2003e148 	.word	0x2003e148
   b6b68:	000bc358 	.word	0x000bc358
   b6b6c:	2003e158 	.word	0x2003e158
   b6b70:	000bc35e 	.word	0x000bc35e
   b6b74:	2003e168 	.word	0x2003e168
   b6b78:	000bc364 	.word	0x000bc364
   b6b7c:	2003e178 	.word	0x2003e178
   b6b80:	000bc36a 	.word	0x000bc36a
   b6b84:	2003e188 	.word	0x2003e188
   b6b88:	000bc370 	.word	0x000bc370
   b6b8c:	2003e198 	.word	0x2003e198
   b6b90:	2003e1a8 	.word	0x2003e1a8
   b6b94:	000bc376 	.word	0x000bc376
   b6b98:	2003dc38 	.word	0x2003dc38
   b6b9c:	000bc381 	.word	0x000bc381
   b6ba0:	2003dc48 	.word	0x2003dc48
   b6ba4:	000bc38b 	.word	0x000bc38b
   b6ba8:	2003dc58 	.word	0x2003dc58
   b6bac:	000bc395 	.word	0x000bc395
   b6bb0:	2003dc68 	.word	0x2003dc68
   b6bb4:	000bc3a0 	.word	0x000bc3a0
   b6bb8:	2003dc78 	.word	0x2003dc78
   b6bbc:	2003d6e8 	.word	0x2003d6e8
   b6bc0:	2003da4c 	.word	0x2003da4c
   b6bc4:	2003c72c 	.word	0x2003c72c

000b6bc8 <_Z10showBitmapii6String>:
void showBitmap(int id1, int id2, String msg) {
   b6bc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   display.clearDisplay();
   b6bcc:	4f99      	ldr	r7, [pc, #612]	; (b6e34 <_Z10showBitmapii6String+0x26c>)
void showBitmap(int id1, int id2, String msg) {
   b6bce:	b088      	sub	sp, #32
   b6bd0:	4606      	mov	r6, r0
   display.clearDisplay();
   b6bd2:	4638      	mov	r0, r7
void showBitmap(int id1, int id2, String msg) {
   b6bd4:	460d      	mov	r5, r1
   b6bd6:	4614      	mov	r4, r2
   display.clearDisplay();
   b6bd8:	f003 f8d0 	bl	b9d7c <_ZN16Adafruit_SSD130612clearDisplayEv>
   b6bdc:	2300      	movs	r3, #0
   b6bde:	613b      	str	r3, [r7, #16]
   bitmap = true;
   b6be0:	4b95      	ldr	r3, [pc, #596]	; (b6e38 <_Z10showBitmapii6String+0x270>)
   b6be2:	2201      	movs	r2, #1
   b6be4:	701a      	strb	r2, [r3, #0]
   b6be6:	f003 fd07 	bl	ba5f8 <HAL_Timer_Get_Milli_Seconds>
   startTime = millis();
   b6bea:	4b94      	ldr	r3, [pc, #592]	; (b6e3c <_Z10showBitmapii6String+0x274>)
   b6bec:	6018      	str	r0, [r3, #0]
   switch (id1)
   b6bee:	2e03      	cmp	r6, #3
   b6bf0:	d816      	bhi.n	b6c20 <_Z10showBitmapii6String+0x58>
   b6bf2:	e8df f016 	tbh	[pc, r6, lsl #1]
   b6bf6:	0004      	.short	0x0004
   b6bf8:	00f0002d 	.word	0x00f0002d
   b6bfc:	0116      	.short	0x0116
      switch (id2)
   b6bfe:	2d03      	cmp	r5, #3
   b6c00:	d80e      	bhi.n	b6c20 <_Z10showBitmapii6String+0x58>
   b6c02:	e8df f005 	tbb	[pc, r5]
   b6c06:	0702      	.short	0x0702
   b6c08:	0b09      	.short	0x0b09
         snprintf(buf, sizeof(buf), "MODO BASICO");
   b6c0a:	498d      	ldr	r1, [pc, #564]	; (b6e40 <_Z10showBitmapii6String+0x278>)
         snprintf(buf, sizeof(buf), "Tarjeta invalida para este modo");
   b6c0c:	488d      	ldr	r0, [pc, #564]	; (b6e44 <_Z10showBitmapii6String+0x27c>)
   b6c0e:	f004 ff9d 	bl	bbb4c <strcpy>
         break;
   b6c12:	e00e      	b.n	b6c32 <_Z10showBitmapii6String+0x6a>
         snprintf(buf, sizeof(buf), "MODO AVANZADO");
   b6c14:	498c      	ldr	r1, [pc, #560]	; (b6e48 <_Z10showBitmapii6String+0x280>)
   b6c16:	e7f9      	b.n	b6c0c <_Z10showBitmapii6String+0x44>
         snprintf(buf, sizeof(buf), "MODO MUSICA");
   b6c18:	498c      	ldr	r1, [pc, #560]	; (b6e4c <_Z10showBitmapii6String+0x284>)
   b6c1a:	e7f7      	b.n	b6c0c <_Z10showBitmapii6String+0x44>
         snprintf(buf, sizeof(buf), "MODO EXPLORA");
   b6c1c:	498c      	ldr	r1, [pc, #560]	; (b6e50 <_Z10showBitmapii6String+0x288>)
   b6c1e:	e7f5      	b.n	b6c0c <_Z10showBitmapii6String+0x44>
         snprintf(buf, sizeof(buf), "Bitmap not available.");
   b6c20:	498c      	ldr	r1, [pc, #560]	; (b6e54 <_Z10showBitmapii6String+0x28c>)
   b6c22:	4888      	ldr	r0, [pc, #544]	; (b6e44 <_Z10showBitmapii6String+0x27c>)
   b6c24:	f004 ff92 	bl	bbb4c <strcpy>
         Serial.println("Bitmap not available.");
   b6c28:	f004 fbee 	bl	bb408 <_Z16_fetch_usbserialv>
   b6c2c:	4989      	ldr	r1, [pc, #548]	; (b6e54 <_Z10showBitmapii6String+0x28c>)
   b6c2e:	f004 f99c 	bl	baf6a <_ZN5Print7printlnEPKc>
   Serial.println(buf);
   b6c32:	f004 fbe9 	bl	bb408 <_Z16_fetch_usbserialv>
   b6c36:	4983      	ldr	r1, [pc, #524]	; (b6e44 <_Z10showBitmapii6String+0x27c>)
   b6c38:	f004 f997 	bl	baf6a <_ZN5Print7printlnEPKc>
   display.print(buf);
   b6c3c:	4981      	ldr	r1, [pc, #516]	; (b6e44 <_Z10showBitmapii6String+0x27c>)
   b6c3e:	487d      	ldr	r0, [pc, #500]	; (b6e34 <_Z10showBitmapii6String+0x26c>)
   b6c40:	f004 f980 	bl	baf44 <_ZN5Print5printEPKc>
   display.display();
   b6c44:	487b      	ldr	r0, [pc, #492]	; (b6e34 <_Z10showBitmapii6String+0x26c>)
}
   b6c46:	b008      	add	sp, #32
   b6c48:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   display.display();
   b6c4c:	f003 bafe 	b.w	ba24c <_ZN16Adafruit_SSD13067displayEv>
      switch (id2)
   b6c50:	2d06      	cmp	r5, #6
   b6c52:	d8e5      	bhi.n	b6c20 <_Z10showBitmapii6String+0x58>
   b6c54:	e8df f005 	tbb	[pc, r5]
   b6c58:	6c513704 	.word	0x6c513704
   b6c5c:	b090      	.short	0xb090
   b6c5e:	bd          	.byte	0xbd
   b6c5f:	00          	.byte	0x00
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
   b6c60:	4621      	mov	r1, r4
   b6c62:	a804      	add	r0, sp, #16
   b6c64:	f004 f8cd 	bl	bae02 <_ZN6StringC1ERKS_>
         snprintf(buf, sizeof(buf), msg+"     CONECTAR A:");
   b6c68:	497b      	ldr	r1, [pc, #492]	; (b6e58 <_Z10showBitmapii6String+0x290>)
   b6c6a:	a804      	add	r0, sp, #16
   b6c6c:	f004 f924 	bl	baeb8 <_ZplRK15StringSumHelperPKc>
   b6c70:	2140      	movs	r1, #64	; 0x40
   b6c72:	6802      	ldr	r2, [r0, #0]
   b6c74:	4873      	ldr	r0, [pc, #460]	; (b6e44 <_Z10showBitmapii6String+0x27c>)
   b6c76:	f003 fec3 	bl	baa00 <snprintf>
class StringSumHelper : public String
   b6c7a:	a804      	add	r0, sp, #16
   b6c7c:	f004 f836 	bl	bacec <_ZN6StringD1Ev>
         display.fillTriangle(40, 40, 50, 20, 50, 60,WHITE);
   b6c80:	2414      	movs	r4, #20
   b6c82:	2501      	movs	r5, #1
   b6c84:	2632      	movs	r6, #50	; 0x32
   b6c86:	2228      	movs	r2, #40	; 0x28
   b6c88:	f04f 083c 	mov.w	r8, #60	; 0x3c
   b6c8c:	4611      	mov	r1, r2
   b6c8e:	4869      	ldr	r0, [pc, #420]	; (b6e34 <_Z10showBitmapii6String+0x26c>)
   b6c90:	4633      	mov	r3, r6
         display.fillRect(50,20,20,40,WHITE);
   b6c92:	2728      	movs	r7, #40	; 0x28
         display.fillTriangle(40, 40, 50, 20, 50, 60,WHITE);
   b6c94:	e9cd 8502 	strd	r8, r5, [sp, #8]
   b6c98:	e9cd 4600 	strd	r4, r6, [sp]
   b6c9c:	f001 fe7c 	bl	b8998 <_ZN12Adafruit_GFX12fillTriangleEsssssst>
         display.fillRect(50,20,20,40,WHITE);
   b6ca0:	4623      	mov	r3, r4
   b6ca2:	4622      	mov	r2, r4
   b6ca4:	4631      	mov	r1, r6
   b6ca6:	4863      	ldr	r0, [pc, #396]	; (b6e34 <_Z10showBitmapii6String+0x26c>)
   b6ca8:	9501      	str	r5, [sp, #4]
   b6caa:	9700      	str	r7, [sp, #0]
   b6cac:	f001 fcd3 	bl	b8656 <_ZN12Adafruit_GFX8fillRectEsssst>
         display.fillTriangle(70, 20, 80, 40, 70, 60,WHITE);
   b6cb0:	2146      	movs	r1, #70	; 0x46
   b6cb2:	e9cd 8502 	strd	r8, r5, [sp, #8]
   b6cb6:	e9cd 7100 	strd	r7, r1, [sp]
   b6cba:	2350      	movs	r3, #80	; 0x50
   b6cbc:	4622      	mov	r2, r4
         display.fillTriangle(60, 20, 30, 100, 90, 100,WHITE);
   b6cbe:	485d      	ldr	r0, [pc, #372]	; (b6e34 <_Z10showBitmapii6String+0x26c>)
   b6cc0:	f001 fe6a 	bl	b8998 <_ZN12Adafruit_GFX12fillTriangleEsssssst>
         break;
   b6cc4:	e7b5      	b.n	b6c32 <_Z10showBitmapii6String+0x6a>
	StringSumHelper(const String &s) : String(s) {}
   b6cc6:	4621      	mov	r1, r4
   b6cc8:	a804      	add	r0, sp, #16
   b6cca:	f004 f89a 	bl	bae02 <_ZN6StringC1ERKS_>
         snprintf(buf, sizeof(buf), msg+"     CONECTAR A:");
   b6cce:	4962      	ldr	r1, [pc, #392]	; (b6e58 <_Z10showBitmapii6String+0x290>)
   b6cd0:	a804      	add	r0, sp, #16
   b6cd2:	f004 f8f1 	bl	baeb8 <_ZplRK15StringSumHelperPKc>
   b6cd6:	2140      	movs	r1, #64	; 0x40
   b6cd8:	6802      	ldr	r2, [r0, #0]
   b6cda:	485a      	ldr	r0, [pc, #360]	; (b6e44 <_Z10showBitmapii6String+0x27c>)
   b6cdc:	f003 fe90 	bl	baa00 <snprintf>
class StringSumHelper : public String
   b6ce0:	a804      	add	r0, sp, #16
   b6ce2:	f004 f803 	bl	bacec <_ZN6StringD1Ev>
         display.fillRect(40,20,40,40,WHITE);
   b6ce6:	2328      	movs	r3, #40	; 0x28
   b6ce8:	2001      	movs	r0, #1
   b6cea:	e9cd 3000 	strd	r3, r0, [sp]
   b6cee:	2214      	movs	r2, #20
   b6cf0:	4619      	mov	r1, r3
         display.fillRect(10,50,90,40,BLACK);
   b6cf2:	4850      	ldr	r0, [pc, #320]	; (b6e34 <_Z10showBitmapii6String+0x26c>)
   b6cf4:	f001 fcaf 	bl	b8656 <_ZN12Adafruit_GFX8fillRectEsssst>
         break;
   b6cf8:	e79b      	b.n	b6c32 <_Z10showBitmapii6String+0x6a>
	StringSumHelper(const String &s) : String(s) {}
   b6cfa:	4621      	mov	r1, r4
   b6cfc:	a804      	add	r0, sp, #16
   b6cfe:	f004 f880 	bl	bae02 <_ZN6StringC1ERKS_>
         snprintf(buf, sizeof(buf), msg+"     CONECTAR A:");
   b6d02:	4955      	ldr	r1, [pc, #340]	; (b6e58 <_Z10showBitmapii6String+0x290>)
   b6d04:	a804      	add	r0, sp, #16
   b6d06:	f004 f8d7 	bl	baeb8 <_ZplRK15StringSumHelperPKc>
   b6d0a:	2140      	movs	r1, #64	; 0x40
   b6d0c:	6802      	ldr	r2, [r0, #0]
   b6d0e:	484d      	ldr	r0, [pc, #308]	; (b6e44 <_Z10showBitmapii6String+0x27c>)
   b6d10:	f003 fe76 	bl	baa00 <snprintf>
class StringSumHelper : public String
   b6d14:	a804      	add	r0, sp, #16
   b6d16:	f003 ffe9 	bl	bacec <_ZN6StringD1Ev>
         display.fillTriangle(60, 20, 30, 100, 90, 100,WHITE);
   b6d1a:	2364      	movs	r3, #100	; 0x64
   b6d1c:	225a      	movs	r2, #90	; 0x5a
   b6d1e:	2101      	movs	r1, #1
   b6d20:	e9cd 3200 	strd	r3, r2, [sp]
   b6d24:	e9cd 3102 	strd	r3, r1, [sp, #8]
   b6d28:	2214      	movs	r2, #20
   b6d2a:	231e      	movs	r3, #30
   b6d2c:	213c      	movs	r1, #60	; 0x3c
   b6d2e:	e7c6      	b.n	b6cbe <_Z10showBitmapii6String+0xf6>
	StringSumHelper(const String &s) : String(s) {}
   b6d30:	4621      	mov	r1, r4
   b6d32:	a804      	add	r0, sp, #16
   b6d34:	f004 f865 	bl	bae02 <_ZN6StringC1ERKS_>
         snprintf(buf, sizeof(buf), msg+"     CONECTAR A:");
   b6d38:	4947      	ldr	r1, [pc, #284]	; (b6e58 <_Z10showBitmapii6String+0x290>)
   b6d3a:	a804      	add	r0, sp, #16
   b6d3c:	f004 f8bc 	bl	baeb8 <_ZplRK15StringSumHelperPKc>
   b6d40:	2140      	movs	r1, #64	; 0x40
   b6d42:	6802      	ldr	r2, [r0, #0]
   b6d44:	483f      	ldr	r0, [pc, #252]	; (b6e44 <_Z10showBitmapii6String+0x27c>)
   b6d46:	f003 fe5b 	bl	baa00 <snprintf>
         display.fillTriangle(60, 20, 52, 40, 67, 40,WHITE);
   b6d4a:	2428      	movs	r4, #40	; 0x28
   b6d4c:	2601      	movs	r6, #1
   b6d4e:	2543      	movs	r5, #67	; 0x43
class StringSumHelper : public String
   b6d50:	a804      	add	r0, sp, #16
   b6d52:	f003 ffcb 	bl	bacec <_ZN6StringD1Ev>
   b6d56:	2334      	movs	r3, #52	; 0x34
   b6d58:	2214      	movs	r2, #20
   b6d5a:	e9cd 4602 	strd	r4, r6, [sp, #8]
   b6d5e:	e9cd 4500 	strd	r4, r5, [sp]
   b6d62:	4834      	ldr	r0, [pc, #208]	; (b6e34 <_Z10showBitmapii6String+0x26c>)
   b6d64:	213c      	movs	r1, #60	; 0x3c
   b6d66:	f001 fe17 	bl	b8998 <_ZN12Adafruit_GFX12fillTriangleEsssssst>
         display.fillTriangle(60, 60, 52, 40, 67, 40,WHITE);
   b6d6a:	e9cd 4602 	strd	r4, r6, [sp, #8]
   b6d6e:	e9cd 4500 	strd	r4, r5, [sp]
   b6d72:	2334      	movs	r3, #52	; 0x34
   b6d74:	223c      	movs	r2, #60	; 0x3c
   b6d76:	e7d9      	b.n	b6d2c <_Z10showBitmapii6String+0x164>
	StringSumHelper(const String &s) : String(s) {}
   b6d78:	4621      	mov	r1, r4
   b6d7a:	a804      	add	r0, sp, #16
   b6d7c:	f004 f841 	bl	bae02 <_ZN6StringC1ERKS_>
         snprintf(buf, sizeof(buf), msg+"     CONECTAR A:");
   b6d80:	4935      	ldr	r1, [pc, #212]	; (b6e58 <_Z10showBitmapii6String+0x290>)
   b6d82:	a804      	add	r0, sp, #16
   b6d84:	f004 f898 	bl	baeb8 <_ZplRK15StringSumHelperPKc>
   b6d88:	2140      	movs	r1, #64	; 0x40
   b6d8a:	6802      	ldr	r2, [r0, #0]
   b6d8c:	482d      	ldr	r0, [pc, #180]	; (b6e44 <_Z10showBitmapii6String+0x27c>)
   b6d8e:	f003 fe37 	bl	baa00 <snprintf>
class StringSumHelper : public String
   b6d92:	a804      	add	r0, sp, #16
   b6d94:	f003 ffaa 	bl	bacec <_ZN6StringD1Ev>
         display.fillCircle(60,50,15,WHITE);
   b6d98:	2301      	movs	r3, #1
   b6d9a:	9300      	str	r3, [sp, #0]
   b6d9c:	2232      	movs	r2, #50	; 0x32
   b6d9e:	230f      	movs	r3, #15
   b6da0:	213c      	movs	r1, #60	; 0x3c
   b6da2:	4824      	ldr	r0, [pc, #144]	; (b6e34 <_Z10showBitmapii6String+0x26c>)
   b6da4:	f001 fdcd 	bl	b8942 <_ZN12Adafruit_GFX10fillCircleEssst>
         display.fillRect(10,50,90,40,BLACK);
   b6da8:	2328      	movs	r3, #40	; 0x28
   b6daa:	2200      	movs	r2, #0
   b6dac:	e9cd 3200 	strd	r3, r2, [sp]
   b6db0:	210a      	movs	r1, #10
   b6db2:	235a      	movs	r3, #90	; 0x5a
   b6db4:	2232      	movs	r2, #50	; 0x32
   b6db6:	e79c      	b.n	b6cf2 <_Z10showBitmapii6String+0x12a>
         snprintf(buf, sizeof(buf), "     CONECTAR A:");
   b6db8:	4927      	ldr	r1, [pc, #156]	; (b6e58 <_Z10showBitmapii6String+0x290>)
   b6dba:	4822      	ldr	r0, [pc, #136]	; (b6e44 <_Z10showBitmapii6String+0x27c>)
   b6dbc:	f004 fec6 	bl	bbb4c <strcpy>
         display.fillCircle(60,40,15,WHITE);
   b6dc0:	2301      	movs	r3, #1
   b6dc2:	9300      	str	r3, [sp, #0]
   b6dc4:	481b      	ldr	r0, [pc, #108]	; (b6e34 <_Z10showBitmapii6String+0x26c>)
   b6dc6:	230f      	movs	r3, #15
   b6dc8:	2228      	movs	r2, #40	; 0x28
   b6dca:	213c      	movs	r1, #60	; 0x3c
   b6dcc:	f001 fdb9 	bl	b8942 <_ZN12Adafruit_GFX10fillCircleEssst>
         break;
   b6dd0:	e72f      	b.n	b6c32 <_Z10showBitmapii6String+0x6a>
         snprintf(buf, sizeof(buf), "YA CONECTADO");
   b6dd2:	4922      	ldr	r1, [pc, #136]	; (b6e5c <_Z10showBitmapii6String+0x294>)
   b6dd4:	e71a      	b.n	b6c0c <_Z10showBitmapii6String+0x44>
      switch (id2)
   b6dd6:	2d06      	cmp	r5, #6
   b6dd8:	f63f af22 	bhi.w	b6c20 <_Z10showBitmapii6String+0x58>
   b6ddc:	e8df f005 	tbb	[pc, r5]
   b6de0:	0a080604 	.word	0x0a080604
   b6de4:	1d0c      	.short	0x1d0c
   b6de6:	1f          	.byte	0x1f
   b6de7:	00          	.byte	0x00
         snprintf(buf, sizeof(buf), "Tarjeta invalida para este modo");
   b6de8:	491d      	ldr	r1, [pc, #116]	; (b6e60 <_Z10showBitmapii6String+0x298>)
   b6dea:	e70f      	b.n	b6c0c <_Z10showBitmapii6String+0x44>
         snprintf(buf, sizeof(buf), "Borrado invalido para este modo");
   b6dec:	491d      	ldr	r1, [pc, #116]	; (b6e64 <_Z10showBitmapii6String+0x29c>)
   b6dee:	e70d      	b.n	b6c0c <_Z10showBitmapii6String+0x44>
         snprintf(buf, sizeof(buf), "Orden de tarjetas invalido");
   b6df0:	491d      	ldr	r1, [pc, #116]	; (b6e68 <_Z10showBitmapii6String+0x2a0>)
   b6df2:	e70b      	b.n	b6c0c <_Z10showBitmapii6String+0x44>
         snprintf(buf, sizeof(buf), "Puerto no disponible");
   b6df4:	491d      	ldr	r1, [pc, #116]	; (b6e6c <_Z10showBitmapii6String+0x2a4>)
   b6df6:	e709      	b.n	b6c0c <_Z10showBitmapii6String+0x44>
	StringSumHelper(const char *p) : String(p) {}
   b6df8:	491d      	ldr	r1, [pc, #116]	; (b6e70 <_Z10showBitmapii6String+0x2a8>)
   b6dfa:	a804      	add	r0, sp, #16
   b6dfc:	f003 ffc1 	bl	bad82 <_ZN6StringC1EPK19__FlashStringHelper>
         snprintf(buf, sizeof(buf), "Play no disponible"+msg);
   b6e00:	4621      	mov	r1, r4
   b6e02:	a804      	add	r0, sp, #16
   b6e04:	f004 f84c 	bl	baea0 <_ZplRK15StringSumHelperRK6String>
   b6e08:	2140      	movs	r1, #64	; 0x40
   b6e0a:	6802      	ldr	r2, [r0, #0]
   b6e0c:	480d      	ldr	r0, [pc, #52]	; (b6e44 <_Z10showBitmapii6String+0x27c>)
   b6e0e:	f003 fdf7 	bl	baa00 <snprintf>
class StringSumHelper : public String
   b6e12:	a804      	add	r0, sp, #16
   b6e14:	f003 ff6a 	bl	bacec <_ZN6StringD1Ev>
         break;
   b6e18:	e70b      	b.n	b6c32 <_Z10showBitmapii6String+0x6a>
         snprintf(buf, sizeof(buf), "Sensor no disponible (en uso)");
   b6e1a:	4916      	ldr	r1, [pc, #88]	; (b6e74 <_Z10showBitmapii6String+0x2ac>)
   b6e1c:	e6f6      	b.n	b6c0c <_Z10showBitmapii6String+0x44>
         snprintf(buf, sizeof(buf), "Actuador no disponible (en uso)");
   b6e1e:	4916      	ldr	r1, [pc, #88]	; (b6e78 <_Z10showBitmapii6String+0x2b0>)
   b6e20:	e6f4      	b.n	b6c0c <_Z10showBitmapii6String+0x44>
      switch (id2)
   b6e22:	2d00      	cmp	r5, #0
   b6e24:	f47f aefc 	bne.w	b6c20 <_Z10showBitmapii6String+0x58>
         snprintf(buf, sizeof(buf), msg);
   b6e28:	6822      	ldr	r2, [r4, #0]
   b6e2a:	4806      	ldr	r0, [pc, #24]	; (b6e44 <_Z10showBitmapii6String+0x27c>)
   b6e2c:	2140      	movs	r1, #64	; 0x40
   b6e2e:	f003 fde7 	bl	baa00 <snprintf>
         break;
   b6e32:	e6fe      	b.n	b6c32 <_Z10showBitmapii6String+0x6a>
   b6e34:	2003d338 	.word	0x2003d338
   b6e38:	2003c739 	.word	0x2003c739
   b6e3c:	2003dc2c 	.word	0x2003dc2c
   b6e40:	000bc3ab 	.word	0x000bc3ab
   b6e44:	2003d2ed 	.word	0x2003d2ed
   b6e48:	000bc3b7 	.word	0x000bc3b7
   b6e4c:	000bc3c5 	.word	0x000bc3c5
   b6e50:	000bc3d1 	.word	0x000bc3d1
   b6e54:	000bc3de 	.word	0x000bc3de
   b6e58:	000bc3f4 	.word	0x000bc3f4
   b6e5c:	000bc405 	.word	0x000bc405
   b6e60:	000bc412 	.word	0x000bc412
   b6e64:	000bc432 	.word	0x000bc432
   b6e68:	000bc452 	.word	0x000bc452
   b6e6c:	000bc46d 	.word	0x000bc46d
   b6e70:	000bc482 	.word	0x000bc482
   b6e74:	000bc495 	.word	0x000bc495
   b6e78:	000bc4b3 	.word	0x000bc4b3

000b6e7c <_Z8showPortii>:
void showPort(int id, int puerto ) {
   b6e7c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   if (tagInfo[2]==0) { // A0, A2, A4
   b6e7e:	4b24      	ldr	r3, [pc, #144]	; (b6f10 <_Z8showPortii+0x94>)
   b6e80:	689b      	ldr	r3, [r3, #8]
   b6e82:	bb4b      	cbnz	r3, b6ed8 <_Z8showPortii+0x5c>
      switch (puerto)
   b6e84:	2902      	cmp	r1, #2
   b6e86:	d011      	beq.n	b6eac <_Z8showPortii+0x30>
   b6e88:	2904      	cmp	r1, #4
   b6e8a:	d016      	beq.n	b6eba <_Z8showPortii+0x3e>
   b6e8c:	b9e1      	cbnz	r1, b6ec8 <_Z8showPortii+0x4c>
         showBitmap(1,3,"");
   b6e8e:	4921      	ldr	r1, [pc, #132]	; (b6f14 <_Z8showPortii+0x98>)
   b6e90:	4668      	mov	r0, sp
   b6e92:	f003 ff76 	bl	bad82 <_ZN6StringC1EPK19__FlashStringHelper>
   b6e96:	466a      	mov	r2, sp
   b6e98:	2103      	movs	r1, #3
         showBitmap(1,2,"");
   b6e9a:	2001      	movs	r0, #1
         showBitmap(2,3,""); //PUERTO NO DISPO.
   b6e9c:	f7ff fe94 	bl	b6bc8 <_Z10showBitmapii6String>
   b6ea0:	4668      	mov	r0, sp
   b6ea2:	f003 ff23 	bl	bacec <_ZN6StringD1Ev>
}
   b6ea6:	b005      	add	sp, #20
   b6ea8:	f85d fb04 	ldr.w	pc, [sp], #4
         showBitmap(1,4,"");
   b6eac:	4919      	ldr	r1, [pc, #100]	; (b6f14 <_Z8showPortii+0x98>)
   b6eae:	4668      	mov	r0, sp
   b6eb0:	f003 ff67 	bl	bad82 <_ZN6StringC1EPK19__FlashStringHelper>
   b6eb4:	466a      	mov	r2, sp
   b6eb6:	2104      	movs	r1, #4
   b6eb8:	e7ef      	b.n	b6e9a <_Z8showPortii+0x1e>
         showBitmap(1,5,"");
   b6eba:	4916      	ldr	r1, [pc, #88]	; (b6f14 <_Z8showPortii+0x98>)
   b6ebc:	4668      	mov	r0, sp
   b6ebe:	f003 ff60 	bl	bad82 <_ZN6StringC1EPK19__FlashStringHelper>
   b6ec2:	466a      	mov	r2, sp
   b6ec4:	2105      	movs	r1, #5
   b6ec6:	e7e8      	b.n	b6e9a <_Z8showPortii+0x1e>
         showBitmap(2,3,""); //PUERTO NO DISPO.
   b6ec8:	4912      	ldr	r1, [pc, #72]	; (b6f14 <_Z8showPortii+0x98>)
   b6eca:	4668      	mov	r0, sp
         showBitmap(2,3,""); //PUERTO NO DISPO.
   b6ecc:	f003 ff59 	bl	bad82 <_ZN6StringC1EPK19__FlashStringHelper>
   b6ed0:	466a      	mov	r2, sp
   b6ed2:	2103      	movs	r1, #3
   b6ed4:	2002      	movs	r0, #2
   b6ed6:	e7e1      	b.n	b6e9c <_Z8showPortii+0x20>
      switch (puerto)
   b6ed8:	2904      	cmp	r1, #4
   b6eda:	d00a      	beq.n	b6ef2 <_Z8showPortii+0x76>
   b6edc:	2906      	cmp	r1, #6
   b6ede:	d00f      	beq.n	b6f00 <_Z8showPortii+0x84>
   b6ee0:	2902      	cmp	r1, #2
         showBitmap(2,3,""); //PUERTO NO DISPO.
   b6ee2:	4668      	mov	r0, sp
   b6ee4:	490b      	ldr	r1, [pc, #44]	; (b6f14 <_Z8showPortii+0x98>)
      switch (puerto)
   b6ee6:	d1f1      	bne.n	b6ecc <_Z8showPortii+0x50>
         showBitmap(1,0,"");
   b6ee8:	f003 ff4b 	bl	bad82 <_ZN6StringC1EPK19__FlashStringHelper>
   b6eec:	466a      	mov	r2, sp
   b6eee:	2100      	movs	r1, #0
   b6ef0:	e7d3      	b.n	b6e9a <_Z8showPortii+0x1e>
         showBitmap(1,1,"");
   b6ef2:	4908      	ldr	r1, [pc, #32]	; (b6f14 <_Z8showPortii+0x98>)
   b6ef4:	4668      	mov	r0, sp
   b6ef6:	f003 ff44 	bl	bad82 <_ZN6StringC1EPK19__FlashStringHelper>
   b6efa:	466a      	mov	r2, sp
   b6efc:	2101      	movs	r1, #1
   b6efe:	e7cc      	b.n	b6e9a <_Z8showPortii+0x1e>
         showBitmap(1,2,"");
   b6f00:	4904      	ldr	r1, [pc, #16]	; (b6f14 <_Z8showPortii+0x98>)
   b6f02:	4668      	mov	r0, sp
   b6f04:	f003 ff3d 	bl	bad82 <_ZN6StringC1EPK19__FlashStringHelper>
   b6f08:	466a      	mov	r2, sp
   b6f0a:	2102      	movs	r1, #2
   b6f0c:	e7c5      	b.n	b6e9a <_Z8showPortii+0x1e>
   b6f0e:	bf00      	nop
   b6f10:	2003c690 	.word	0x2003c690
   b6f14:	000bc0fa 	.word	0x000bc0fa

000b6f18 <_Z13borradoBLOQUEi>:
   switch (modo)
   b6f18:	2801      	cmp	r0, #1
{
   b6f1a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   switch (modo)
   b6f1c:	d003      	beq.n	b6f26 <_Z13borradoBLOQUEi+0xe>
   b6f1e:	2802      	cmp	r0, #2
   b6f20:	d047      	beq.n	b6fb2 <_Z13borradoBLOQUEi+0x9a>
}
   b6f22:	b004      	add	sp, #16
   b6f24:	bd70      	pop	{r4, r5, r6, pc}
      if (numBloque==0) {
   b6f26:	4a3d      	ldr	r2, [pc, #244]	; (b701c <_Z13borradoBLOQUEi+0x104>)
   b6f28:	6814      	ldr	r4, [r2, #0]
   b6f2a:	b974      	cbnz	r4, b6f4a <_Z13borradoBLOQUEi+0x32>
   switch (modo)
   b6f2c:	f7fd fda2 	bl	b4a74 <_Z10borradoALLi.part.0>
         showBitmap(3,0,"Borrado de bloque realizado");
   b6f30:	493b      	ldr	r1, [pc, #236]	; (b7020 <_Z13borradoBLOQUEi+0x108>)
   b6f32:	4668      	mov	r0, sp
   b6f34:	f003 ff25 	bl	bad82 <_ZN6StringC1EPK19__FlashStringHelper>
   b6f38:	466a      	mov	r2, sp
   b6f3a:	2100      	movs	r1, #0
   b6f3c:	2003      	movs	r0, #3
   b6f3e:	f7ff fe43 	bl	b6bc8 <_Z10showBitmapii6String>
   b6f42:	4668      	mov	r0, sp
   b6f44:	f003 fed2 	bl	bacec <_ZN6StringD1Ev>
   b6f48:	e7eb      	b.n	b6f22 <_Z13borradoBLOQUEi+0xa>
      } else if (numBloque==1) {
   b6f4a:	2c01      	cmp	r4, #1
   b6f4c:	d129      	bne.n	b6fa2 <_Z13borradoBLOQUEi+0x8a>
         IF_pasado = false;
   b6f4e:	2300      	movs	r3, #0
         numBloque = 0;
   b6f50:	6013      	str	r3, [r2, #0]
         if2 = false; then2 = false; else2 = false;
   b6f52:	4a34      	ldr	r2, [pc, #208]	; (b7024 <_Z13borradoBLOQUEi+0x10c>)
         IF_pasado = false;
   b6f54:	4934      	ldr	r1, [pc, #208]	; (b7028 <_Z13borradoBLOQUEi+0x110>)
         if2 = false; then2 = false; else2 = false;
   b6f56:	7013      	strb	r3, [r2, #0]
   b6f58:	4a34      	ldr	r2, [pc, #208]	; (b702c <_Z13borradoBLOQUEi+0x114>)
         IF_pasado = false;
   b6f5a:	700b      	strb	r3, [r1, #0]
         if2 = false; then2 = false; else2 = false;
   b6f5c:	7013      	strb	r3, [r2, #0]
   b6f5e:	4a34      	ldr	r2, [pc, #208]	; (b7030 <_Z13borradoBLOQUEi+0x118>)
         puertoAnalogico -= puertoAnalogico_bloque;
   b6f60:	4834      	ldr	r0, [pc, #208]	; (b7034 <_Z13borradoBLOQUEi+0x11c>)
         if2 = false; then2 = false; else2 = false;
   b6f62:	7013      	strb	r3, [r2, #0]
         bloques[1].numActuadores = 0;
   b6f64:	4a34      	ldr	r2, [pc, #208]	; (b7038 <_Z13borradoBLOQUEi+0x120>)
         puertoAnalogico -= puertoAnalogico_bloque;
   b6f66:	6800      	ldr	r0, [r0, #0]
         bloques[1].numActuadores = 0;
   b6f68:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
         bloques[1].numSensores = 0;
   b6f6c:	f8c2 32ec 	str.w	r3, [r2, #748]	; 0x2ec
         THEN_pasado = true;           //Para permitir la ejecucion del primer bloque
   b6f70:	4b32      	ldr	r3, [pc, #200]	; (b703c <_Z13borradoBLOQUEi+0x124>)
         if (puertoAnalogico == -1){   
   b6f72:	4a33      	ldr	r2, [pc, #204]	; (b7040 <_Z13borradoBLOQUEi+0x128>)
         THEN_pasado = true;           //Para permitir la ejecucion del primer bloque
   b6f74:	701c      	strb	r4, [r3, #0]
         numActuadoresBloque = 1;      //Para permitir iniciar el segundo bloque
   b6f76:	4b33      	ldr	r3, [pc, #204]	; (b7044 <_Z13borradoBLOQUEi+0x12c>)
   b6f78:	601c      	str	r4, [r3, #0]
         if (puertoAnalogico == -1){   
   b6f7a:	6813      	ldr	r3, [r2, #0]
   b6f7c:	3301      	adds	r3, #1
            puertoAnalogico=3;
   b6f7e:	bf04      	itt	eq
   b6f80:	2303      	moveq	r3, #3
   b6f82:	6013      	streq	r3, [r2, #0]
         if (puertoDigital == -1){
   b6f84:	4b30      	ldr	r3, [pc, #192]	; (b7048 <_Z13borradoBLOQUEi+0x130>)
   b6f86:	6819      	ldr	r1, [r3, #0]
   b6f88:	3101      	adds	r1, #1
            puertoDigital=6;
   b6f8a:	bf04      	itt	eq
   b6f8c:	2106      	moveq	r1, #6
   b6f8e:	6019      	streq	r1, [r3, #0]
         puertoAnalogico -= puertoAnalogico_bloque;
   b6f90:	6811      	ldr	r1, [r2, #0]
   b6f92:	1a09      	subs	r1, r1, r0
   b6f94:	6011      	str	r1, [r2, #0]
         puertoDigital -= puertoDigital_bloque;
   b6f96:	492d      	ldr	r1, [pc, #180]	; (b704c <_Z13borradoBLOQUEi+0x134>)
   b6f98:	681a      	ldr	r2, [r3, #0]
   b6f9a:	6809      	ldr	r1, [r1, #0]
   b6f9c:	1a52      	subs	r2, r2, r1
   b6f9e:	601a      	str	r2, [r3, #0]
   b6fa0:	e7c6      	b.n	b6f30 <_Z13borradoBLOQUEi+0x18>
         Serial.println("Nada que borrar");
   b6fa2:	f004 fa31 	bl	bb408 <_Z16_fetch_usbserialv>
   b6fa6:	492a      	ldr	r1, [pc, #168]	; (b7050 <_Z13borradoBLOQUEi+0x138>)
}
   b6fa8:	b004      	add	sp, #16
   b6faa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
         Serial.println("Nada que borrar");
   b6fae:	f003 bfdc 	b.w	baf6a <_ZN5Print7printlnEPKc>
      if (bucle) {
   b6fb2:	4e28      	ldr	r6, [pc, #160]	; (b7054 <_Z13borradoBLOQUEi+0x13c>)
         posicion = posicion - (tam_bucle+1);
   b6fb4:	4a28      	ldr	r2, [pc, #160]	; (b7058 <_Z13borradoBLOQUEi+0x140>)
      if (bucle) {
   b6fb6:	7834      	ldrb	r4, [r6, #0]
         posicion = posicion - (tam_bucle+1);
   b6fb8:	6813      	ldr	r3, [r2, #0]
   b6fba:	4d28      	ldr	r5, [pc, #160]	; (b705c <_Z13borradoBLOQUEi+0x144>)
      if (bucle) {
   b6fbc:	b19c      	cbz	r4, b6fe6 <_Z13borradoBLOQUEi+0xce>
         posicion = posicion - (tam_bucle+1);
   b6fbe:	6829      	ldr	r1, [r5, #0]
   b6fc0:	3101      	adds	r1, #1
   b6fc2:	1a5b      	subs	r3, r3, r1
         showBitmap(3,0,"Borrado de loop realizado");
   b6fc4:	4668      	mov	r0, sp
   b6fc6:	4926      	ldr	r1, [pc, #152]	; (b7060 <_Z13borradoBLOQUEi+0x148>)
         posicion = posicion - (tam_bucle+1);
   b6fc8:	6013      	str	r3, [r2, #0]
         showBitmap(3,0,"Borrado de loop realizado");
   b6fca:	f003 feda 	bl	bad82 <_ZN6StringC1EPK19__FlashStringHelper>
   b6fce:	466a      	mov	r2, sp
   b6fd0:	2100      	movs	r1, #0
         showBitmap(3,0,"Nada que borrar.");
   b6fd2:	2003      	movs	r0, #3
   b6fd4:	f7ff fdf8 	bl	b6bc8 <_Z10showBitmapii6String>
   b6fd8:	4668      	mov	r0, sp
   b6fda:	f003 fe87 	bl	bacec <_ZN6StringD1Ev>
      bucle = false;
   b6fde:	2300      	movs	r3, #0
   b6fe0:	7033      	strb	r3, [r6, #0]
      tam_bucle = 0;
   b6fe2:	602b      	str	r3, [r5, #0]
}
   b6fe4:	e79d      	b.n	b6f22 <_Z13borradoBLOQUEi+0xa>
      } else if ( notas[posicion-1] == -2 ) {
   b6fe6:	481f      	ldr	r0, [pc, #124]	; (b7064 <_Z13borradoBLOQUEi+0x14c>)
   b6fe8:	1e59      	subs	r1, r3, #1
   b6fea:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
   b6fee:	3002      	adds	r0, #2
   b6ff0:	d10c      	bne.n	b700c <_Z13borradoBLOQUEi+0xf4>
         posicion = posicion - (duraciones[posicion-1]+2);
   b6ff2:	481d      	ldr	r0, [pc, #116]	; (b7068 <_Z13borradoBLOQUEi+0x150>)
   b6ff4:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
   b6ff8:	3102      	adds	r1, #2
   b6ffa:	1a5b      	subs	r3, r3, r1
         showBitmap(3,0,"Borrado de loop realizado");
   b6ffc:	4918      	ldr	r1, [pc, #96]	; (b7060 <_Z13borradoBLOQUEi+0x148>)
         posicion = posicion - (duraciones[posicion-1]+2);
   b6ffe:	6013      	str	r3, [r2, #0]
         showBitmap(3,0,"Nada que borrar.");
   b7000:	4668      	mov	r0, sp
   b7002:	f003 febe 	bl	bad82 <_ZN6StringC1EPK19__FlashStringHelper>
   b7006:	466a      	mov	r2, sp
   b7008:	4621      	mov	r1, r4
   b700a:	e7e2      	b.n	b6fd2 <_Z13borradoBLOQUEi+0xba>
         Serial.println("Nada que borrar.");
   b700c:	f004 f9fc 	bl	bb408 <_Z16_fetch_usbserialv>
   b7010:	4916      	ldr	r1, [pc, #88]	; (b706c <_Z13borradoBLOQUEi+0x154>)
   b7012:	f003 ffaa 	bl	baf6a <_ZN5Print7printlnEPKc>
         showBitmap(3,0,"Nada que borrar.");
   b7016:	4915      	ldr	r1, [pc, #84]	; (b706c <_Z13borradoBLOQUEi+0x154>)
   b7018:	e7f2      	b.n	b7000 <_Z13borradoBLOQUEi+0xe8>
   b701a:	bf00      	nop
   b701c:	2003c688 	.word	0x2003c688
   b7020:	000bc4d3 	.word	0x000bc4d3
   b7024:	2003d6d5 	.word	0x2003d6d5
   b7028:	2003c729 	.word	0x2003c729
   b702c:	2003e6ad 	.word	0x2003e6ad
   b7030:	2003d6c9 	.word	0x2003d6c9
   b7034:	2003da34 	.word	0x2003da34
   b7038:	2003cd14 	.word	0x2003cd14
   b703c:	2003c738 	.word	0x2003c738
   b7040:	2003da30 	.word	0x2003da30
   b7044:	2003da18 	.word	0x2003da18
   b7048:	2003c68c 	.word	0x2003c68c
   b704c:	2003da38 	.word	0x2003da38
   b7050:	000bc4ef 	.word	0x000bc4ef
   b7054:	2003d2ec 	.word	0x2003d2ec
   b7058:	2003da28 	.word	0x2003da28
   b705c:	2003dc34 	.word	0x2003dc34
   b7060:	000bc4ff 	.word	0x000bc4ff
   b7064:	2003d6f8 	.word	0x2003d6f8
   b7068:	2003d3a8 	.word	0x2003d3a8
   b706c:	000bc519 	.word	0x000bc519

000b7070 <_Z10reproducirv>:
void reproducir() {
   b7070:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   if (!bucle) {
   b7074:	4b1e      	ldr	r3, [pc, #120]	; (b70f0 <_Z10reproducirv+0x80>)
   b7076:	781c      	ldrb	r4, [r3, #0]
   b7078:	bb34      	cbnz	r4, b70c8 <_Z10reproducirv+0x58>
      while ( i < posicion) {
   b707a:	f8df a08c 	ldr.w	sl, [pc, #140]	; b7108 <_Z10reproducirv+0x98>
         Serial.printlnf("%d - %d", notas[i], duraciones[i]);
   b707e:	4e1d      	ldr	r6, [pc, #116]	; (b70f4 <_Z10reproducirv+0x84>)
   b7080:	4f1d      	ldr	r7, [pc, #116]	; (b70f8 <_Z10reproducirv+0x88>)
      while ( i < posicion) {
   b7082:	f8da 3000 	ldr.w	r3, [sl]
   b7086:	42a3      	cmp	r3, r4
   b7088:	dd2f      	ble.n	b70ea <_Z10reproducirv+0x7a>
         Serial.printlnf("%d - %d", notas[i], duraciones[i]);
   b708a:	f004 f9bd 	bl	bb408 <_Z16_fetch_usbserialv>
   b708e:	f857 2024 	ldr.w	r2, [r7, r4, lsl #2]
   b7092:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
   b7096:	4919      	ldr	r1, [pc, #100]	; (b70fc <_Z10reproducirv+0x8c>)
   b7098:	f7fd fd34 	bl	b4b04 <_ZN5Print8printlnfEPKcz>
         if ( notas[i] == -1 ) {
   b709c:	f857 0024 	ldr.w	r0, [r7, r4, lsl #2]
   b70a0:	1c42      	adds	r2, r0, #1
   b70a2:	d105      	bne.n	b70b0 <_Z10reproducirv+0x40>
            n = duraciones[i];
   b70a4:	f856 8024 	ldr.w	r8, [r6, r4, lsl #2]
            inicio=i;
   b70a8:	46a1      	mov	r9, r4
            iteracion = 0;            
   b70aa:	2500      	movs	r5, #0
         i++;
   b70ac:	3401      	adds	r4, #1
      while ( i < posicion) {
   b70ae:	e7e8      	b.n	b7082 <_Z10reproducirv+0x12>
         } else if ( notas[i] == -2 ) {
   b70b0:	1c83      	adds	r3, r0, #2
   b70b2:	d104      	bne.n	b70be <_Z10reproducirv+0x4e>
            iteracion++;
   b70b4:	3501      	adds	r5, #1
               i = inicio;
   b70b6:	45a8      	cmp	r8, r5
   b70b8:	bfc8      	it	gt
   b70ba:	464c      	movgt	r4, r9
   b70bc:	e7f6      	b.n	b70ac <_Z10reproducirv+0x3c>
            reproducirNOTA(notas[i],duraciones[i]);
   b70be:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
   b70c2:	f7fe fc8d 	bl	b59e0 <_Z14reproducirNOTAii>
   b70c6:	e7f1      	b.n	b70ac <_Z10reproducirv+0x3c>
      Serial.println("Finaliza el bucle antes de reproducir");
   b70c8:	f004 f99e 	bl	bb408 <_Z16_fetch_usbserialv>
   b70cc:	490c      	ldr	r1, [pc, #48]	; (b7100 <_Z10reproducirv+0x90>)
   b70ce:	f003 ff4c 	bl	baf6a <_ZN5Print7printlnEPKc>
      showBitmap(2,4,"");
   b70d2:	490c      	ldr	r1, [pc, #48]	; (b7104 <_Z10reproducirv+0x94>)
   b70d4:	4668      	mov	r0, sp
   b70d6:	f003 fe54 	bl	bad82 <_ZN6StringC1EPK19__FlashStringHelper>
   b70da:	2002      	movs	r0, #2
   b70dc:	466a      	mov	r2, sp
   b70de:	2104      	movs	r1, #4
   b70e0:	f7ff fd72 	bl	b6bc8 <_Z10showBitmapii6String>
   b70e4:	4668      	mov	r0, sp
   b70e6:	f003 fe01 	bl	bacec <_ZN6StringD1Ev>
}
   b70ea:	b004      	add	sp, #16
   b70ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b70f0:	2003d2ec 	.word	0x2003d2ec
   b70f4:	2003d3a8 	.word	0x2003d3a8
   b70f8:	2003d6f8 	.word	0x2003d6f8
   b70fc:	000bc52a 	.word	0x000bc52a
   b7100:	000bc532 	.word	0x000bc532
   b7104:	000bc0fa 	.word	0x000bc0fa
   b7108:	2003da28 	.word	0x2003da28

000b710c <_Z10cambioModoi>:
{
   b710c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   if (modo == 0 ) {
   b710e:	4604      	mov	r4, r0
   b7110:	b9e0      	cbnz	r0, b714c <_Z10cambioModoi+0x40>
      Serial.println("Modo BASICO detectado");
   b7112:	f004 f979 	bl	bb408 <_Z16_fetch_usbserialv>
   b7116:	4921      	ldr	r1, [pc, #132]	; (b719c <_Z10cambioModoi+0x90>)
   b7118:	f003 ff27 	bl	baf6a <_ZN5Print7printlnEPKc>
      MODE = 0;
   b711c:	4b20      	ldr	r3, [pc, #128]	; (b71a0 <_Z10cambioModoi+0x94>)
      showBitmap(3,0,"Iniciando modo BASICO...");
   b711e:	4921      	ldr	r1, [pc, #132]	; (b71a4 <_Z10cambioModoi+0x98>)
      MODE = 0;
   b7120:	701c      	strb	r4, [r3, #0]
      showBitmap(3,0,"Iniciando modo MUSICA...");
   b7122:	4668      	mov	r0, sp
   b7124:	f003 fe2d 	bl	bad82 <_ZN6StringC1EPK19__FlashStringHelper>
   b7128:	466a      	mov	r2, sp
   b712a:	2100      	movs	r1, #0
   b712c:	2003      	movs	r0, #3
      showBitmap(3,0,"Iniciando modo EXPLORA...");
   b712e:	f7ff fd4b 	bl	b6bc8 <_Z10showBitmapii6String>
   b7132:	4668      	mov	r0, sp
   b7134:	f003 fdda 	bl	bacec <_ZN6StringD1Ev>
   EEPROM.put(0, MODE);
   b7138:	f004 fc4e 	bl	bb9d8 <_Z21__fetch_global_EEPROMv>
   b713c:	4918      	ldr	r1, [pc, #96]	; (b71a0 <_Z10cambioModoi+0x94>)
   b713e:	2201      	movs	r2, #1
   b7140:	2000      	movs	r0, #0
}
   b7142:	b004      	add	sp, #16
   b7144:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b7148:	f003 ba6e 	b.w	ba628 <HAL_EEPROM_Put>
   } else if (modo == 1) {
   b714c:	2801      	cmp	r0, #1
   b714e:	d108      	bne.n	b7162 <_Z10cambioModoi+0x56>
      Serial.println("Modo AVANZADO detectado");
   b7150:	f004 f95a 	bl	bb408 <_Z16_fetch_usbserialv>
   b7154:	4914      	ldr	r1, [pc, #80]	; (b71a8 <_Z10cambioModoi+0x9c>)
   b7156:	f003 ff08 	bl	baf6a <_ZN5Print7printlnEPKc>
      MODE = 1;
   b715a:	4b11      	ldr	r3, [pc, #68]	; (b71a0 <_Z10cambioModoi+0x94>)
      showBitmap(3,0,"Iniciando modo AVANZADO...");
   b715c:	4913      	ldr	r1, [pc, #76]	; (b71ac <_Z10cambioModoi+0xa0>)
      MODE = 1;
   b715e:	701c      	strb	r4, [r3, #0]
      showBitmap(3,0,"Iniciando modo AVANZADO...");
   b7160:	e7df      	b.n	b7122 <_Z10cambioModoi+0x16>
   } else if (modo == 2) {
   b7162:	2802      	cmp	r0, #2
   b7164:	d108      	bne.n	b7178 <_Z10cambioModoi+0x6c>
      Serial.println("Modo MUSICA detectado");
   b7166:	f004 f94f 	bl	bb408 <_Z16_fetch_usbserialv>
   b716a:	4911      	ldr	r1, [pc, #68]	; (b71b0 <_Z10cambioModoi+0xa4>)
   b716c:	f003 fefd 	bl	baf6a <_ZN5Print7printlnEPKc>
      MODE = 2;
   b7170:	4b0b      	ldr	r3, [pc, #44]	; (b71a0 <_Z10cambioModoi+0x94>)
      showBitmap(3,0,"Iniciando modo MUSICA...");
   b7172:	4910      	ldr	r1, [pc, #64]	; (b71b4 <_Z10cambioModoi+0xa8>)
      MODE = 2;
   b7174:	701c      	strb	r4, [r3, #0]
      showBitmap(3,0,"Iniciando modo MUSICA...");
   b7176:	e7d4      	b.n	b7122 <_Z10cambioModoi+0x16>
   } else if (modo == 3) {
   b7178:	2803      	cmp	r0, #3
   b717a:	d1dd      	bne.n	b7138 <_Z10cambioModoi+0x2c>
      Serial.println("Modo EXPLORA detectado");
   b717c:	f004 f944 	bl	bb408 <_Z16_fetch_usbserialv>
   b7180:	490d      	ldr	r1, [pc, #52]	; (b71b8 <_Z10cambioModoi+0xac>)
   b7182:	f003 fef2 	bl	baf6a <_ZN5Print7printlnEPKc>
      MODE = 3;
   b7186:	4b06      	ldr	r3, [pc, #24]	; (b71a0 <_Z10cambioModoi+0x94>)
      showBitmap(3,0,"Iniciando modo EXPLORA...");
   b7188:	490c      	ldr	r1, [pc, #48]	; (b71bc <_Z10cambioModoi+0xb0>)
      MODE = 3;
   b718a:	701c      	strb	r4, [r3, #0]
      showBitmap(3,0,"Iniciando modo EXPLORA...");
   b718c:	4668      	mov	r0, sp
   b718e:	f003 fdf8 	bl	bad82 <_ZN6StringC1EPK19__FlashStringHelper>
   b7192:	466a      	mov	r2, sp
   b7194:	2100      	movs	r1, #0
   b7196:	4620      	mov	r0, r4
   b7198:	e7c9      	b.n	b712e <_Z10cambioModoi+0x22>
   b719a:	bf00      	nop
   b719c:	000bc558 	.word	0x000bc558
   b71a0:	2003c72a 	.word	0x2003c72a
   b71a4:	000bc56e 	.word	0x000bc56e
   b71a8:	000bc587 	.word	0x000bc587
   b71ac:	000bc59f 	.word	0x000bc59f
   b71b0:	000bc5ba 	.word	0x000bc5ba
   b71b4:	000bc5d0 	.word	0x000bc5d0
   b71b8:	000bc5e9 	.word	0x000bc5e9
   b71bc:	000bc600 	.word	0x000bc600

000b71c0 <_Z18borra_POP_Avanzadov>:

   void borra_POP_Avanzado (){
   b71c0:	b530      	push	{r4, r5, lr}
      numActuadoresBloque--;
   b71c2:	4d1b      	ldr	r5, [pc, #108]	; (b7230 <_Z18borra_POP_Avanzadov+0x70>)
      bloque2[0].numActuadores--;
   b71c4:	4c1b      	ldr	r4, [pc, #108]	; (b7234 <_Z18borra_POP_Avanzadov+0x74>)
      numActuadoresBloque--;
   b71c6:	682b      	ldr	r3, [r5, #0]
      bloque2[0].numActuadores--;
   b71c8:	f8d4 2144 	ldr.w	r2, [r4, #324]	; 0x144
      numActuadoresBloque--;
   b71cc:	3b01      	subs	r3, #1
      bloque2[0].numActuadores--;
   b71ce:	3a01      	subs	r2, #1
      if (numActuadoresBloque <= 0){
   b71d0:	2b00      	cmp	r3, #0
   void borra_POP_Avanzado (){
   b71d2:	b085      	sub	sp, #20
      numActuadoresBloque--;
   b71d4:	602b      	str	r3, [r5, #0]
      bloque2[0].numActuadores--;
   b71d6:	f8c4 2144 	str.w	r2, [r4, #324]	; 0x144
      if (numActuadoresBloque <= 0){
   b71da:	dc1b      	bgt.n	b7214 <_Z18borra_POP_Avanzadov+0x54>
         if (numActuadoresBloque < 0){
   b71dc:	d00b      	beq.n	b71f6 <_Z18borra_POP_Avanzadov+0x36>
            showBitmap(3,0,"Nada que borrar");
   b71de:	4916      	ldr	r1, [pc, #88]	; (b7238 <_Z18borra_POP_Avanzadov+0x78>)
   b71e0:	4668      	mov	r0, sp
   b71e2:	f003 fdce 	bl	bad82 <_ZN6StringC1EPK19__FlashStringHelper>
   b71e6:	2003      	movs	r0, #3
   b71e8:	466a      	mov	r2, sp
   b71ea:	2100      	movs	r1, #0
   b71ec:	f7ff fcec 	bl	b6bc8 <_Z10showBitmapii6String>
   b71f0:	4668      	mov	r0, sp
   b71f2:	f003 fd7b 	bl	bacec <_ZN6StringD1Ev>
         }
         numActuadoresBloque = 0;
         puertoAnalogico = 0;
   b71f6:	4a11      	ldr	r2, [pc, #68]	; (b723c <_Z18borra_POP_Avanzadov+0x7c>)
         numActuadoresBloque = 0;
   b71f8:	2300      	movs	r3, #0
         puertoAnalogico = 0;
   b71fa:	6013      	str	r3, [r2, #0]
         puertoDigital = 3;
   b71fc:	4a10      	ldr	r2, [pc, #64]	; (b7240 <_Z18borra_POP_Avanzadov+0x80>)
         numActuadoresBloque = 0;
   b71fe:	602b      	str	r3, [r5, #0]
         puertoDigital = 3;
   b7200:	2103      	movs	r1, #3
   b7202:	6011      	str	r1, [r2, #0]
         puertoAnalogico_bloque = 0;
   b7204:	4a0f      	ldr	r2, [pc, #60]	; (b7244 <_Z18borra_POP_Avanzadov+0x84>)
         puertoDigital_bloque = 0;
         bloque2[0].numActuadores = 0;
   b7206:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
         puertoAnalogico_bloque = 0;
   b720a:	6013      	str	r3, [r2, #0]
         puertoDigital_bloque = 0;
   b720c:	4a0e      	ldr	r2, [pc, #56]	; (b7248 <_Z18borra_POP_Avanzadov+0x88>)
   b720e:	6013      	str	r3, [r2, #0]
      } else {
      showBitmap(3,0,"Borrado del ultimo realizado");}
   }
   b7210:	b005      	add	sp, #20
   b7212:	bd30      	pop	{r4, r5, pc}
      showBitmap(3,0,"Borrado del ultimo realizado");}
   b7214:	490d      	ldr	r1, [pc, #52]	; (b724c <_Z18borra_POP_Avanzadov+0x8c>)
   b7216:	4668      	mov	r0, sp
   b7218:	f003 fdb3 	bl	bad82 <_ZN6StringC1EPK19__FlashStringHelper>
   b721c:	466a      	mov	r2, sp
   b721e:	2100      	movs	r1, #0
   b7220:	2003      	movs	r0, #3
   b7222:	f7ff fcd1 	bl	b6bc8 <_Z10showBitmapii6String>
   b7226:	4668      	mov	r0, sp
   b7228:	f003 fd60 	bl	bacec <_ZN6StringD1Ev>
   }
   b722c:	e7f0      	b.n	b7210 <_Z18borra_POP_Avanzadov+0x50>
   b722e:	bf00      	nop
   b7230:	2003da18 	.word	0x2003da18
   b7234:	2003c73c 	.word	0x2003c73c
   b7238:	000bc4ef 	.word	0x000bc4ef
   b723c:	2003da30 	.word	0x2003da30
   b7240:	2003c68c 	.word	0x2003c68c
   b7244:	2003da34 	.word	0x2003da34
   b7248:	2003da38 	.word	0x2003da38
   b724c:	000bc61a 	.word	0x000bc61a

000b7250 <loop>:
{
   b7250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (iniciando) {
   b7254:	f8df 82e8 	ldr.w	r8, [pc, #744]	; b7540 <loop+0x2f0>
   b7258:	f898 3000 	ldrb.w	r3, [r8]
{
   b725c:	f5ad 7d45 	sub.w	sp, sp, #788	; 0x314
  if (iniciando) {
   b7260:	2b00      	cmp	r3, #0
   b7262:	d034      	beq.n	b72ce <loop+0x7e>
   b7264:	f003 f9c8 	bl	ba5f8 <HAL_Timer_Get_Milli_Seconds>
    currentTime = millis();
   b7268:	4f9d      	ldr	r7, [pc, #628]	; (b74e0 <loop+0x290>)
    while(currentTime-startTime<limit){
   b726a:	f8df 92a0 	ldr.w	r9, [pc, #672]	; b750c <loop+0x2bc>
   b726e:	f8df a2a0 	ldr.w	sl, [pc, #672]	; b7510 <loop+0x2c0>
    currentTime = millis();
   b7272:	6038      	str	r0, [r7, #0]
    while(currentTime-startTime<limit){
   b7274:	f8d9 2000 	ldr.w	r2, [r9]
   b7278:	683b      	ldr	r3, [r7, #0]
   b727a:	1a9b      	subs	r3, r3, r2
   b727c:	f8da 2000 	ldr.w	r2, [sl]
   b7280:	4293      	cmp	r3, r2
   b7282:	d203      	bcs.n	b728c <loop+0x3c>
   b7284:	f003 f9b8 	bl	ba5f8 <HAL_Timer_Get_Milli_Seconds>
      currentTime = millis();
   b7288:	6038      	str	r0, [r7, #0]
    while(currentTime-startTime<limit){
   b728a:	e7f3      	b.n	b7274 <loop+0x24>
    display.clearDisplay();
   b728c:	4e95      	ldr	r6, [pc, #596]	; (b74e4 <loop+0x294>)
   b728e:	4630      	mov	r0, r6
   b7290:	f002 fd74 	bl	b9d7c <_ZN16Adafruit_SSD130612clearDisplayEv>
    display.setTextSize(1.5);
   b7294:	2101      	movs	r1, #1
   b7296:	4630      	mov	r0, r6
   b7298:	f001 feab 	bl	b8ff2 <_ZN12Adafruit_GFX11setTextSizeEh>
    @param   c   16-bit 5-6-5 Color to draw text with
    @note    For 'transparent' background, background and foreground
             are set to same color rather than using a separate flag.
  */
  /**********************************************************************/
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   b729c:	2500      	movs	r5, #0
   b729e:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   b72a2:	e9c6 5304 	strd	r5, r3, [r6, #16]
    if( MODE == 0 )
   b72a6:	4b90      	ldr	r3, [pc, #576]	; (b74e8 <loop+0x298>)
      showBitmap(0,0,"");
   b72a8:	4990      	ldr	r1, [pc, #576]	; (b74ec <loop+0x29c>)
    if( MODE == 0 )
   b72aa:	781c      	ldrb	r4, [r3, #0]
      showBitmap(0,0,"");
   b72ac:	a8c0      	add	r0, sp, #768	; 0x300
    if( MODE == 0 )
   b72ae:	2c00      	cmp	r4, #0
   b72b0:	d15f      	bne.n	b7372 <loop+0x122>
      showBitmap(0,0,"");
   b72b2:	f003 fd66 	bl	bad82 <_ZN6StringC1EPK19__FlashStringHelper>
   b72b6:	aac0      	add	r2, sp, #768	; 0x300
   b72b8:	4621      	mov	r1, r4
   b72ba:	4620      	mov	r0, r4
      showBitmap(1,2,"Zumbador:");
   b72bc:	f7ff fc84 	bl	b6bc8 <_Z10showBitmapii6String>
   b72c0:	a8c0      	add	r0, sp, #768	; 0x300
   b72c2:	f003 fd13 	bl	bacec <_ZN6StringD1Ev>
    iniciando = false;
   b72c6:	2300      	movs	r3, #0
   b72c8:	f888 3000 	strb.w	r3, [r8]
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
   b72cc:	6133      	str	r3, [r6, #16]
  if (mfrc522.PICC_IsNewCardPresent())
   b72ce:	4888      	ldr	r0, [pc, #544]	; (b74f0 <loop+0x2a0>)
   b72d0:	4d88      	ldr	r5, [pc, #544]	; (b74f4 <loop+0x2a4>)
   b72d2:	f002 f921 	bl	b9518 <_ZN7MFRC52221PICC_IsNewCardPresentEv>
   b72d6:	b1a0      	cbz	r0, b7302 <loop+0xb2>
    Serial.print("Tag Detectada --> ");
   b72d8:	f004 f896 	bl	bb408 <_Z16_fetch_usbserialv>
   b72dc:	4986      	ldr	r1, [pc, #536]	; (b74f8 <loop+0x2a8>)
   b72de:	f003 fe31 	bl	baf44 <_ZN5Print5printEPKc>
    if (!mfrc522.PICC_ReadCardSerial())
   b72e2:	4883      	ldr	r0, [pc, #524]	; (b74f0 <loop+0x2a0>)
   b72e4:	f002 fae9 	bl	b98ba <_ZN7MFRC52219PICC_ReadCardSerialEv>
    getTagID(tagInfo);
   b72e8:	4884      	ldr	r0, [pc, #528]	; (b74fc <loop+0x2ac>)
   b72ea:	f7fe fcb3 	bl	b5c54 <_Z8getTagIDPi>
    scroll_timer = 0;
   b72ee:	4a84      	ldr	r2, [pc, #528]	; (b7500 <loop+0x2b0>)
   b72f0:	2300      	movs	r3, #0
   b72f2:	6013      	str	r3, [r2, #0]
    play = false;
   b72f4:	702b      	strb	r3, [r5, #0]
    if ( MODE == 0 ) {
   b72f6:	4b7c      	ldr	r3, [pc, #496]	; (b74e8 <loop+0x298>)
   b72f8:	781b      	ldrb	r3, [r3, #0]
   b72fa:	2b00      	cmp	r3, #0
   b72fc:	d163      	bne.n	b73c6 <loop+0x176>
      pitidoOFF0();
   b72fe:	f7fe f8dc 	bl	b54ba <_Z10pitidoOFF0v>
  if (!play && init) {
   b7302:	782b      	ldrb	r3, [r5, #0]
   b7304:	b923      	cbnz	r3, b7310 <loop+0xc0>
   b7306:	4b7f      	ldr	r3, [pc, #508]	; (b7504 <loop+0x2b4>)
   b7308:	781b      	ldrb	r3, [r3, #0]
   b730a:	b10b      	cbz	r3, b7310 <loop+0xc0>
    ledApagar();
   b730c:	f7fe f82c 	bl	b5368 <_Z9ledApagarv>
  if (bitmap) {
   b7310:	4e7d      	ldr	r6, [pc, #500]	; (b7508 <loop+0x2b8>)
   b7312:	7833      	ldrb	r3, [r6, #0]
   b7314:	2b00      	cmp	r3, #0
   b7316:	d067      	beq.n	b73e8 <loop+0x198>
   b7318:	f003 f96e 	bl	ba5f8 <HAL_Timer_Get_Milli_Seconds>
    currentTime = millis();
   b731c:	4b70      	ldr	r3, [pc, #448]	; (b74e0 <loop+0x290>)
   b731e:	6018      	str	r0, [r3, #0]
    if ( currentTime-startTime >= limit ) {
   b7320:	4b7a      	ldr	r3, [pc, #488]	; (b750c <loop+0x2bc>)
   b7322:	681b      	ldr	r3, [r3, #0]
   b7324:	1ac0      	subs	r0, r0, r3
   b7326:	4b7a      	ldr	r3, [pc, #488]	; (b7510 <loop+0x2c0>)
   b7328:	681b      	ldr	r3, [r3, #0]
   b732a:	4298      	cmp	r0, r3
   b732c:	d35c      	bcc.n	b73e8 <loop+0x198>
   b732e:	486d      	ldr	r0, [pc, #436]	; (b74e4 <loop+0x294>)
      for (int i = 0; i < posicion; i++)
   b7330:	4f78      	ldr	r7, [pc, #480]	; (b7514 <loop+0x2c4>)
          snprintf(buf, sizeof(buf), "...");
   b7332:	f8df 8210 	ldr.w	r8, [pc, #528]	; b7544 <loop+0x2f4>
      bitmap=false;
   b7336:	2400      	movs	r4, #0
   b7338:	6104      	str	r4, [r0, #16]
   b733a:	7034      	strb	r4, [r6, #0]
      display.clearDisplay();
   b733c:	f002 fd1e 	bl	b9d7c <_ZN16Adafruit_SSD130612clearDisplayEv>
      display.display();
   b7340:	4868      	ldr	r0, [pc, #416]	; (b74e4 <loop+0x294>)
          snprintf(buf, sizeof(buf), "...");
   b7342:	4e75      	ldr	r6, [pc, #468]	; (b7518 <loop+0x2c8>)
      display.display();
   b7344:	f002 ff82 	bl	ba24c <_ZN16Adafruit_SSD13067displayEv>
      for (int i = 0; i < posicion; i++)
   b7348:	683b      	ldr	r3, [r7, #0]
   b734a:	42a3      	cmp	r3, r4
   b734c:	dd4c      	ble.n	b73e8 <loop+0x198>
        if (i<23) {
   b734e:	2c16      	cmp	r4, #22
   b7350:	dc43      	bgt.n	b73da <loop+0x18a>
          snprintf(buf, sizeof(buf), secuencia[i]);
   b7352:	4b72      	ldr	r3, [pc, #456]	; (b751c <loop+0x2cc>)
	const char * c_str() const { return buffer; }
   b7354:	0122      	lsls	r2, r4, #4
   b7356:	2140      	movs	r1, #64	; 0x40
   b7358:	58d2      	ldr	r2, [r2, r3]
   b735a:	4630      	mov	r0, r6
   b735c:	f003 fb50 	bl	baa00 <snprintf>
        display.print(buf);
   b7360:	4631      	mov	r1, r6
   b7362:	4860      	ldr	r0, [pc, #384]	; (b74e4 <loop+0x294>)
   b7364:	f003 fdee 	bl	baf44 <_ZN5Print5printEPKc>
        display.display();
   b7368:	485e      	ldr	r0, [pc, #376]	; (b74e4 <loop+0x294>)
   b736a:	f002 ff6f 	bl	ba24c <_ZN16Adafruit_SSD13067displayEv>
      for (int i = 0; i < posicion; i++)
   b736e:	3401      	adds	r4, #1
   b7370:	e7ea      	b.n	b7348 <loop+0xf8>
    } else if (MODE == 1)
   b7372:	2c01      	cmp	r4, #1
   b7374:	d105      	bne.n	b7382 <loop+0x132>
      showBitmap(0,3,"");
   b7376:	f003 fd04 	bl	bad82 <_ZN6StringC1EPK19__FlashStringHelper>
   b737a:	aac0      	add	r2, sp, #768	; 0x300
   b737c:	4621      	mov	r1, r4
   b737e:	4628      	mov	r0, r5
   b7380:	e79c      	b.n	b72bc <loop+0x6c>
    } else if (MODE == 3)
   b7382:	2c03      	cmp	r4, #3
   b7384:	d0f7      	beq.n	b7376 <loop+0x126>
      showBitmap(0,2,"");
   b7386:	f003 fcfc 	bl	bad82 <_ZN6StringC1EPK19__FlashStringHelper>
   b738a:	aac0      	add	r2, sp, #768	; 0x300
   b738c:	2102      	movs	r1, #2
   b738e:	4628      	mov	r0, r5
   b7390:	f7ff fc1a 	bl	b6bc8 <_Z10showBitmapii6String>
   b7394:	a8c0      	add	r0, sp, #768	; 0x300
   b7396:	f003 fca9 	bl	bacec <_ZN6StringD1Ev>
      bitmap=false;
   b739a:	4b5b      	ldr	r3, [pc, #364]	; (b7508 <loop+0x2b8>)
   b739c:	701d      	strb	r5, [r3, #0]
      while(currentTime-startTime<limit){
   b739e:	f8d9 2000 	ldr.w	r2, [r9]
   b73a2:	683b      	ldr	r3, [r7, #0]
   b73a4:	1a9b      	subs	r3, r3, r2
   b73a6:	f8da 2000 	ldr.w	r2, [sl]
   b73aa:	4293      	cmp	r3, r2
   b73ac:	d203      	bcs.n	b73b6 <loop+0x166>
   b73ae:	f003 f923 	bl	ba5f8 <HAL_Timer_Get_Milli_Seconds>
        currentTime = millis();
   b73b2:	6038      	str	r0, [r7, #0]
      while(currentTime-startTime<limit){
   b73b4:	e7f3      	b.n	b739e <loop+0x14e>
      showBitmap(1,2,"Zumbador:");
   b73b6:	495a      	ldr	r1, [pc, #360]	; (b7520 <loop+0x2d0>)
   b73b8:	a8c0      	add	r0, sp, #768	; 0x300
   b73ba:	f003 fce2 	bl	bad82 <_ZN6StringC1EPK19__FlashStringHelper>
   b73be:	aac0      	add	r2, sp, #768	; 0x300
   b73c0:	2102      	movs	r1, #2
   b73c2:	2001      	movs	r0, #1
   b73c4:	e77a      	b.n	b72bc <loop+0x6c>
      pitidoOFF1(2);
   b73c6:	2002      	movs	r0, #2
   b73c8:	f7fe f94b 	bl	b5662 <_Z10pitidoOFF1i>
      pitidoOFF1(4);
   b73cc:	2004      	movs	r0, #4
   b73ce:	f7fe f948 	bl	b5662 <_Z10pitidoOFF1i>
      pitidoOFF1(6);
   b73d2:	2006      	movs	r0, #6
   b73d4:	f7fe f945 	bl	b5662 <_Z10pitidoOFF1i>
   b73d8:	e793      	b.n	b7302 <loop+0xb2>
        } else if (i==23){
   b73da:	2c17      	cmp	r4, #23
   b73dc:	d1c0      	bne.n	b7360 <loop+0x110>
          snprintf(buf, sizeof(buf), "...");
   b73de:	4641      	mov	r1, r8
   b73e0:	4630      	mov	r0, r6
   b73e2:	f004 fbb3 	bl	bbb4c <strcpy>
   b73e6:	e7bb      	b.n	b7360 <loop+0x110>
  if ( MODE == 0 ) 
   b73e8:	4b3f      	ldr	r3, [pc, #252]	; (b74e8 <loop+0x298>)
    switch (tagInfo[0])
   b73ea:	4c44      	ldr	r4, [pc, #272]	; (b74fc <loop+0x2ac>)
  if ( MODE == 0 ) 
   b73ec:	781f      	ldrb	r7, [r3, #0]
    switch (tagInfo[0])
   b73ee:	6826      	ldr	r6, [r4, #0]
  if ( MODE == 0 ) 
   b73f0:	2f00      	cmp	r7, #0
   b73f2:	f040 813d 	bne.w	b7670 <loop+0x420>
    switch (tagInfo[0])
   b73f6:	f8df 8150 	ldr.w	r8, [pc, #336]	; b7548 <loop+0x2f8>
   b73fa:	2e00      	cmp	r6, #0
   b73fc:	f000 80a6 	beq.w	b754c <loop+0x2fc>
   b7400:	2e06      	cmp	r6, #6
   b7402:	f040 8114 	bne.w	b762e <loop+0x3de>
      pitidoBlink0();
   b7406:	f7fe f86b 	bl	b54e0 <_Z12pitidoBlink0v>
        switch (tagInfo[1])
   b740a:	6866      	ldr	r6, [r4, #4]
   b740c:	2e01      	cmp	r6, #1
   b740e:	d03f      	beq.n	b7490 <loop+0x240>
   b7410:	2e02      	cmp	r6, #2
   b7412:	d03f      	beq.n	b7494 <loop+0x244>
   b7414:	b92e      	cbnz	r6, b7422 <loop+0x1d2>
            cambioModo(tagInfo[2]);
   b7416:	68a0      	ldr	r0, [r4, #8]
   b7418:	f7ff fe78 	bl	b710c <_Z10cambioModoi>
            resetFunc();
   b741c:	4b41      	ldr	r3, [pc, #260]	; (b7524 <loop+0x2d4>)
   b741e:	681b      	ldr	r3, [r3, #0]
   b7420:	4798      	blx	r3
    if (tagInfo[0]!=-1) { 
   b7422:	6823      	ldr	r3, [r4, #0]
   b7424:	3301      	adds	r3, #1
      tagInfo[0]=-1;
   b7426:	bf1c      	itt	ne
   b7428:	f04f 33ff 	movne.w	r3, #4294967295
   b742c:	6023      	strne	r3, [r4, #0]
    if (numActuadoresBloque > 0 && play == true)
   b742e:	f8d8 4000 	ldr.w	r4, [r8]
   b7432:	2c00      	cmp	r4, #0
   b7434:	f340 8108 	ble.w	b7648 <loop+0x3f8>
   b7438:	782b      	ldrb	r3, [r5, #0]
   b743a:	2b00      	cmp	r3, #0
   b743c:	f000 8114 	beq.w	b7668 <loop+0x418>
      valor = leerSensor(bloques[0].sensores[0].id, 1, bloques[0].sensores[0].puerto);
   b7440:	4c39      	ldr	r4, [pc, #228]	; (b7528 <loop+0x2d8>)
   b7442:	4d3a      	ldr	r5, [pc, #232]	; (b752c <loop+0x2dc>)
   b7444:	6922      	ldr	r2, [r4, #16]
   b7446:	6860      	ldr	r0, [r4, #4]
   b7448:	2101      	movs	r1, #1
   b744a:	f7fd fee5 	bl	b5218 <_Z10leerSensoriii>
      activarActuador(bloques[0].actuadores[0].id, estado, valor);
   b744e:	4b38      	ldr	r3, [pc, #224]	; (b7530 <loop+0x2e0>)
      valor = leerSensor(bloques[0].sensores[0].id, 1, bloques[0].sensores[0].puerto);
   b7450:	7028      	strb	r0, [r5, #0]
      activarActuador(bloques[0].actuadores[0].id, estado, valor);
   b7452:	6819      	ldr	r1, [r3, #0]
      valor = leerSensor(bloques[0].sensores[0].id, 1, bloques[0].sensores[0].puerto);
   b7454:	4602      	mov	r2, r0
      activarActuador(bloques[0].actuadores[0].id, estado, valor);
   b7456:	f8d4 0148 	ldr.w	r0, [r4, #328]	; 0x148
   b745a:	f7fe f885 	bl	b5568 <_Z15activarActuadoriib>
      valor ? snprintf(buf, sizeof(buf), "TRUE") : snprintf(buf, sizeof(buf), "FALSE");
   b745e:	782b      	ldrb	r3, [r5, #0]
   b7460:	2b00      	cmp	r3, #0
   b7462:	f000 80ef 	beq.w	b7644 <loop+0x3f4>
   b7466:	4933      	ldr	r1, [pc, #204]	; (b7534 <loop+0x2e4>)
      display.clearDisplay();
   b7468:	4c1e      	ldr	r4, [pc, #120]	; (b74e4 <loop+0x294>)
      valor ? snprintf(buf, sizeof(buf), "TRUE") : snprintf(buf, sizeof(buf), "FALSE");
   b746a:	482b      	ldr	r0, [pc, #172]	; (b7518 <loop+0x2c8>)
   b746c:	f004 fb6e 	bl	bbb4c <strcpy>
      display.clearDisplay();
   b7470:	4620      	mov	r0, r4
   b7472:	f002 fc83 	bl	b9d7c <_ZN16Adafruit_SSD130612clearDisplayEv>
   b7476:	2300      	movs	r3, #0
      display.print(buf);
   b7478:	4927      	ldr	r1, [pc, #156]	; (b7518 <loop+0x2c8>)
   b747a:	6123      	str	r3, [r4, #16]
   b747c:	4620      	mov	r0, r4
   b747e:	f003 fd61 	bl	baf44 <_ZN5Print5printEPKc>
      display.display();
   b7482:	4620      	mov	r0, r4
   b7484:	f50d 7d45 	add.w	sp, sp, #788	; 0x314
   b7488:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
          display.display();
   b748c:	f002 bede 	b.w	ba24c <_ZN16Adafruit_SSD13067displayEv>
            play = true;
   b7490:	702e      	strb	r6, [r5, #0]
            break;
   b7492:	e7c6      	b.n	b7422 <loop+0x1d2>
            if ( tagInfo[2] == 1 ) {
   b7494:	68a3      	ldr	r3, [r4, #8]
   b7496:	2b01      	cmp	r3, #1
   b7498:	d10f      	bne.n	b74ba <loop+0x26a>
              borradoALL(0);
   b749a:	4638      	mov	r0, r7
   b749c:	f7fe f9ba 	bl	b5814 <_Z10borradoALLi>
              showBitmap(3,0,"Borrado completo realizado");
   b74a0:	4925      	ldr	r1, [pc, #148]	; (b7538 <loop+0x2e8>)
   b74a2:	a8c0      	add	r0, sp, #768	; 0x300
   b74a4:	f003 fc6d 	bl	bad82 <_ZN6StringC1EPK19__FlashStringHelper>
   b74a8:	aac0      	add	r2, sp, #768	; 0x300
   b74aa:	4639      	mov	r1, r7
   b74ac:	2003      	movs	r0, #3
          showBitmap(2,0,"");
   b74ae:	f7ff fb8b 	bl	b6bc8 <_Z10showBitmapii6String>
   b74b2:	a8c0      	add	r0, sp, #768	; 0x300
   b74b4:	f003 fc1a 	bl	bacec <_ZN6StringD1Ev>
   b74b8:	e7b3      	b.n	b7422 <loop+0x1d2>
              showBitmap(2,1,"");
   b74ba:	490c      	ldr	r1, [pc, #48]	; (b74ec <loop+0x29c>)
   b74bc:	a8c0      	add	r0, sp, #768	; 0x300
   b74be:	f003 fc60 	bl	bad82 <_ZN6StringC1EPK19__FlashStringHelper>
   b74c2:	aac0      	add	r2, sp, #768	; 0x300
   b74c4:	2101      	movs	r1, #1
   b74c6:	4630      	mov	r0, r6
   b74c8:	f7ff fb7e 	bl	b6bc8 <_Z10showBitmapii6String>
   b74cc:	a8c0      	add	r0, sp, #768	; 0x300
   b74ce:	f003 fc0d 	bl	bacec <_ZN6StringD1Ev>
              Serial.println("Borrado no permitido para este modo");
   b74d2:	f003 ff99 	bl	bb408 <_Z16_fetch_usbserialv>
   b74d6:	4919      	ldr	r1, [pc, #100]	; (b753c <loop+0x2ec>)
   b74d8:	f003 fd47 	bl	baf6a <_ZN5Print7printlnEPKc>
   b74dc:	e7a1      	b.n	b7422 <loop+0x1d2>
   b74de:	bf00      	nop
   b74e0:	2003d334 	.word	0x2003d334
   b74e4:	2003d338 	.word	0x2003d338
   b74e8:	2003c72a 	.word	0x2003c72a
   b74ec:	000bc0fa 	.word	0x000bc0fa
   b74f0:	2003d6e8 	.word	0x2003d6e8
   b74f4:	2003da24 	.word	0x2003da24
   b74f8:	000bc641 	.word	0x000bc641
   b74fc:	2003c690 	.word	0x2003c690
   b7500:	2003da48 	.word	0x2003da48
   b7504:	2003d6d6 	.word	0x2003d6d6
   b7508:	2003c739 	.word	0x2003c739
   b750c:	2003dc2c 	.word	0x2003dc2c
   b7510:	2003c684 	.word	0x2003c684
   b7514:	2003da28 	.word	0x2003da28
   b7518:	2003d2ed 	.word	0x2003d2ed
   b751c:	2003da4c 	.word	0x2003da4c
   b7520:	000bc637 	.word	0x000bc637
   b7524:	2003da3c 	.word	0x2003da3c
   b7528:	2003cd14 	.word	0x2003cd14
   b752c:	2003e6b8 	.word	0x2003e6b8
   b7530:	2003d6cc 	.word	0x2003d6cc
   b7534:	000bc8de 	.word	0x000bc8de
   b7538:	000bc654 	.word	0x000bc654
   b753c:	000bc66f 	.word	0x000bc66f
   b7540:	2003c683 	.word	0x2003c683
   b7544:	000bc5e5 	.word	0x000bc5e5
   b7548:	2003da18 	.word	0x2003da18
        id = tagInfo[3];
   b754c:	4f83      	ldr	r7, [pc, #524]	; (b775c <loop+0x50c>)
   b754e:	68e3      	ldr	r3, [r4, #12]
        tipo = tagInfo[2];
   b7550:	4e83      	ldr	r6, [pc, #524]	; (b7760 <loop+0x510>)
        if (tagInfo[1] == 0) {
   b7552:	f8d4 a004 	ldr.w	sl, [r4, #4]
        id = tagInfo[3];
   b7556:	603b      	str	r3, [r7, #0]
        tipo = tagInfo[2];
   b7558:	68a3      	ldr	r3, [r4, #8]
   b755a:	f8df 9240 	ldr.w	r9, [pc, #576]	; b779c <loop+0x54c>
   b755e:	6033      	str	r3, [r6, #0]
        if (tagInfo[1] == 0) {
   b7560:	f1ba 0f00 	cmp.w	sl, #0
   b7564:	d123      	bne.n	b75ae <loop+0x35e>
          Serial.println("Sensor detectado");
   b7566:	f003 ff4f 	bl	bb408 <_Z16_fetch_usbserialv>
   b756a:	497e      	ldr	r1, [pc, #504]	; (b7764 <loop+0x514>)
   b756c:	f003 fcfd 	bl	baf6a <_ZN5Print7printlnEPKc>
          bloques[0].sensores[0] = sensor;
   b7570:	4a7d      	ldr	r2, [pc, #500]	; (b7768 <loop+0x518>)
          tipo == 0 ? sensor.puerto = 0 : sensor.puerto = 2;
   b7572:	6833      	ldr	r3, [r6, #0]
          sensor.id = id;
   b7574:	6839      	ldr	r1, [r7, #0]
          bloques[0].sensores[0] = sensor;
   b7576:	6051      	str	r1, [r2, #4]
          bloques[0].numSensores++;
   b7578:	6811      	ldr	r1, [r2, #0]
          tipo == 0 ? sensor.puerto = 0 : sensor.puerto = 2;
   b757a:	2b00      	cmp	r3, #0
          bloques[0].numSensores++;
   b757c:	f101 0101 	add.w	r1, r1, #1
          tipo == 0 ? sensor.puerto = 0 : sensor.puerto = 2;
   b7580:	bf18      	it	ne
   b7582:	2302      	movne	r3, #2
          bloques[0].numSensores++;
   b7584:	6011      	str	r1, [r2, #0]
          bloques[0].sensores[0] = sensor;
   b7586:	6113      	str	r3, [r2, #16]
          numSensoresBloque++;
   b7588:	f8d9 2000 	ldr.w	r2, [r9]
            showBitmap(1,3,""); //A0
   b758c:	4977      	ldr	r1, [pc, #476]	; (b776c <loop+0x51c>)
          numSensoresBloque++;
   b758e:	3201      	adds	r2, #1
   b7590:	f8c9 2000 	str.w	r2, [r9]
            showBitmap(1,3,""); //A0
   b7594:	a8c0      	add	r0, sp, #768	; 0x300
          if (sensor.puerto == 0) {
   b7596:	2b00      	cmp	r3, #0
   b7598:	d13b      	bne.n	b7612 <loop+0x3c2>
            showBitmap(1,3,""); //A0
   b759a:	f003 fbf2 	bl	bad82 <_ZN6StringC1EPK19__FlashStringHelper>
   b759e:	aac0      	add	r2, sp, #768	; 0x300
   b75a0:	2103      	movs	r1, #3
            showBitmap(1,0,""); //D2
   b75a2:	2001      	movs	r0, #1
   b75a4:	f7ff fb10 	bl	b6bc8 <_Z10showBitmapii6String>
   b75a8:	a8c0      	add	r0, sp, #768	; 0x300
   b75aa:	f003 fb9f 	bl	bacec <_ZN6StringD1Ev>
        if ( numSensoresBloque > 0) {
   b75ae:	f8d9 3000 	ldr.w	r3, [r9]
   b75b2:	2b00      	cmp	r3, #0
   b75b4:	dd38      	ble.n	b7628 <loop+0x3d8>
          if (tagInfo[1] == 1) {
   b75b6:	f8d4 9004 	ldr.w	r9, [r4, #4]
   b75ba:	f1b9 0f01 	cmp.w	r9, #1
   b75be:	f47f af30 	bne.w	b7422 <loop+0x1d2>
            Serial.println("Actuador detectado");
   b75c2:	f003 ff21 	bl	bb408 <_Z16_fetch_usbserialv>
   b75c6:	496a      	ldr	r1, [pc, #424]	; (b7770 <loop+0x520>)
   b75c8:	f003 fccf 	bl	baf6a <_ZN5Print7printlnEPKc>
            estado = tagInfo[4];
   b75cc:	4b69      	ldr	r3, [pc, #420]	; (b7774 <loop+0x524>)
   b75ce:	6922      	ldr	r2, [r4, #16]
   b75d0:	601a      	str	r2, [r3, #0]
            tipo == 0 ? actuador.puerto = 2 : actuador.puerto = 4;
   b75d2:	6833      	ldr	r3, [r6, #0]
            actuador.id = id;
   b75d4:	683a      	ldr	r2, [r7, #0]
            tipo == 0 ? actuador.puerto = 2 : actuador.puerto = 4;
   b75d6:	2b00      	cmp	r3, #0
            bloques[0].actuadores[0] = actuador;
   b75d8:	4b63      	ldr	r3, [pc, #396]	; (b7768 <loop+0x518>)
   b75da:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
            bloques[0].numActuadores++;
   b75de:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
            tipo == 0 ? actuador.puerto = 2 : actuador.puerto = 4;
   b75e2:	bf0c      	ite	eq
   b75e4:	2102      	moveq	r1, #2
   b75e6:	2104      	movne	r1, #4
            bloques[0].numActuadores++;
   b75e8:	3201      	adds	r2, #1
            bloques[0].actuadores[0] = actuador;
   b75ea:	f8c3 1154 	str.w	r1, [r3, #340]	; 0x154
            bloques[0].numActuadores++;
   b75ee:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
            numActuadoresBloque++;
   b75f2:	f8d8 3000 	ldr.w	r3, [r8]
            if (actuador.puerto == 2) {
   b75f6:	2902      	cmp	r1, #2
            numActuadoresBloque++;
   b75f8:	f103 0301 	add.w	r3, r3, #1
              showBitmap(1,4,""); //A2
   b75fc:	495b      	ldr	r1, [pc, #364]	; (b776c <loop+0x51c>)
            numActuadoresBloque++;
   b75fe:	f8c8 3000 	str.w	r3, [r8]
              showBitmap(1,4,""); //A2
   b7602:	a8c0      	add	r0, sp, #768	; 0x300
            if (actuador.puerto == 2) {
   b7604:	d10a      	bne.n	b761c <loop+0x3cc>
              showBitmap(1,4,""); //A2
   b7606:	f003 fbbc 	bl	bad82 <_ZN6StringC1EPK19__FlashStringHelper>
   b760a:	aac0      	add	r2, sp, #768	; 0x300
   b760c:	2104      	movs	r1, #4
   b760e:	4648      	mov	r0, r9
   b7610:	e74d      	b.n	b74ae <loop+0x25e>
            showBitmap(1,0,""); //D2
   b7612:	f003 fbb6 	bl	bad82 <_ZN6StringC1EPK19__FlashStringHelper>
   b7616:	aac0      	add	r2, sp, #768	; 0x300
   b7618:	4651      	mov	r1, sl
   b761a:	e7c2      	b.n	b75a2 <loop+0x352>
              showBitmap(1,1,""); //D4
   b761c:	f003 fbb1 	bl	bad82 <_ZN6StringC1EPK19__FlashStringHelper>
   b7620:	aac0      	add	r2, sp, #768	; 0x300
   b7622:	4649      	mov	r1, r9
   b7624:	4648      	mov	r0, r9
   b7626:	e742      	b.n	b74ae <loop+0x25e>
            ledApagar();
   b7628:	f7fd fe9e 	bl	b5368 <_Z9ledApagarv>
   b762c:	e6f9      	b.n	b7422 <loop+0x1d2>
        if ( tagInfo[0] != -1 ) {
   b762e:	3601      	adds	r6, #1
   b7630:	f43f aef7 	beq.w	b7422 <loop+0x1d2>
          showBitmap(2,0,"");
   b7634:	494d      	ldr	r1, [pc, #308]	; (b776c <loop+0x51c>)
   b7636:	a8c0      	add	r0, sp, #768	; 0x300
   b7638:	f003 fba3 	bl	bad82 <_ZN6StringC1EPK19__FlashStringHelper>
   b763c:	aac0      	add	r2, sp, #768	; 0x300
   b763e:	4639      	mov	r1, r7
   b7640:	2002      	movs	r0, #2
   b7642:	e734      	b.n	b74ae <loop+0x25e>
      valor ? snprintf(buf, sizeof(buf), "TRUE") : snprintf(buf, sizeof(buf), "FALSE");
   b7644:	494c      	ldr	r1, [pc, #304]	; (b7778 <loop+0x528>)
   b7646:	e70f      	b.n	b7468 <loop+0x218>
    } else if (numActuadoresBloque==0 && play == true) {
   b7648:	d10e      	bne.n	b7668 <loop+0x418>
   b764a:	782b      	ldrb	r3, [r5, #0]
   b764c:	b163      	cbz	r3, b7668 <loop+0x418>
      showBitmap(2,4,"");
   b764e:	4947      	ldr	r1, [pc, #284]	; (b776c <loop+0x51c>)
   b7650:	a8c0      	add	r0, sp, #768	; 0x300
   b7652:	f003 fb96 	bl	bad82 <_ZN6StringC1EPK19__FlashStringHelper>
   b7656:	aac0      	add	r2, sp, #768	; 0x300
   b7658:	2104      	movs	r1, #4
   b765a:	2002      	movs	r0, #2
   b765c:	f7ff fab4 	bl	b6bc8 <_Z10showBitmapii6String>
   b7660:	a8c0      	add	r0, sp, #768	; 0x300
   b7662:	f003 fb43 	bl	bacec <_ZN6StringD1Ev>
      play=false;
   b7666:	702c      	strb	r4, [r5, #0]
   b7668:	f50d 7d45 	add.w	sp, sp, #788	; 0x314
   b766c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  } else if ( MODE == 1 ) {
   b7670:	2f01      	cmp	r7, #1
   b7672:	f040 8423 	bne.w	b7ebc <loop+0xc6c>
    switch (tagInfo[0])
   b7676:	2e01      	cmp	r6, #1
   b7678:	d053      	beq.n	b7722 <loop+0x4d2>
   b767a:	2e06      	cmp	r6, #6
   b767c:	f040 8329 	bne.w	b7cd2 <loop+0xa82>
        switch (tagInfo[1])
   b7680:	6866      	ldr	r6, [r4, #4]
   b7682:	2e01      	cmp	r6, #1
   b7684:	d019      	beq.n	b76ba <loop+0x46a>
   b7686:	2e02      	cmp	r6, #2
   b7688:	d01f      	beq.n	b76ca <loop+0x47a>
   b768a:	b92e      	cbnz	r6, b7698 <loop+0x448>
            cambioModo(tagInfo[2]);
   b768c:	68a0      	ldr	r0, [r4, #8]
   b768e:	f7ff fd3d 	bl	b710c <_Z10cambioModoi>
            resetFunc();
   b7692:	4b3a      	ldr	r3, [pc, #232]	; (b777c <loop+0x52c>)
   b7694:	681b      	ldr	r3, [r3, #0]
   b7696:	4798      	blx	r3
    tagInfo[0] = -1;
   b7698:	f04f 33ff 	mov.w	r3, #4294967295
   b769c:	6023      	str	r3, [r4, #0]
    if (play) {
   b769e:	782b      	ldrb	r3, [r5, #0]
   b76a0:	2b00      	cmp	r3, #0
   b76a2:	f040 8325 	bne.w	b7cf0 <loop+0xaa0>
      if (scroll_timer > 50){
   b76a6:	4c36      	ldr	r4, [pc, #216]	; (b7780 <loop+0x530>)
   b76a8:	6823      	ldr	r3, [r4, #0]
   b76aa:	2b32      	cmp	r3, #50	; 0x32
   b76ac:	dd01      	ble.n	b76b2 <loop+0x462>
        listar();
   b76ae:	f7fe fbe1 	bl	b5e74 <_Z6listarv>
      scroll_timer++;}
   b76b2:	6823      	ldr	r3, [r4, #0]
   b76b4:	3301      	adds	r3, #1
   b76b6:	6023      	str	r3, [r4, #0]
   b76b8:	e7d6      	b.n	b7668 <loop+0x418>
            display.clearDisplay();
   b76ba:	4f32      	ldr	r7, [pc, #200]	; (b7784 <loop+0x534>)
   b76bc:	4638      	mov	r0, r7
   b76be:	f002 fb5d 	bl	b9d7c <_ZN16Adafruit_SSD130612clearDisplayEv>
   b76c2:	2300      	movs	r3, #0
   b76c4:	613b      	str	r3, [r7, #16]
            play = true;
   b76c6:	702e      	strb	r6, [r5, #0]
            break;
   b76c8:	e7e6      	b.n	b7698 <loop+0x448>
            if ( tagInfo[2] == 1 ) {
   b76ca:	68a3      	ldr	r3, [r4, #8]
   b76cc:	2b01      	cmp	r3, #1
   b76ce:	d111      	bne.n	b76f4 <loop+0x4a4>
              borradoALL(0);
   b76d0:	2000      	movs	r0, #0
   b76d2:	f7fe f89f 	bl	b5814 <_Z10borradoALLi>
   switch (modo)
   b76d6:	f7fd f9cd 	bl	b4a74 <_Z10borradoALLi.part.0>
              showBitmap(3,0,"Borrado completo realizado");
   b76da:	a8c0      	add	r0, sp, #768	; 0x300
   b76dc:	492a      	ldr	r1, [pc, #168]	; (b7788 <loop+0x538>)
   b76de:	f003 fb50 	bl	bad82 <_ZN6StringC1EPK19__FlashStringHelper>
   b76e2:	aac0      	add	r2, sp, #768	; 0x300
   b76e4:	2100      	movs	r1, #0
   b76e6:	2003      	movs	r0, #3
          showBitmap(2,0,"");
   b76e8:	f7ff fa6e 	bl	b6bc8 <_Z10showBitmapii6String>
   b76ec:	a8c0      	add	r0, sp, #768	; 0x300
   b76ee:	f003 fafd 	bl	bacec <_ZN6StringD1Ev>
   b76f2:	e7d1      	b.n	b7698 <loop+0x448>
            } else if (tagInfo[2] == 2) {
   b76f4:	2b02      	cmp	r3, #2
   b76f6:	d103      	bne.n	b7700 <loop+0x4b0>
              borradoBLOQUE(1);
   b76f8:	4638      	mov	r0, r7
   b76fa:	f7ff fc0d 	bl	b6f18 <_Z13borradoBLOQUEi>
   b76fe:	e7cb      	b.n	b7698 <loop+0x448>
            } else if(tagInfo[2] == 0) {
   b7700:	b913      	cbnz	r3, b7708 <loop+0x4b8>
              borra_POP_Avanzado();
   b7702:	f7ff fd5d 	bl	b71c0 <_Z18borra_POP_Avanzadov>
   b7706:	e7c7      	b.n	b7698 <loop+0x448>
              Serial.println("Borrado no permitido para este modo");
   b7708:	f003 fe7e 	bl	bb408 <_Z16_fetch_usbserialv>
   b770c:	491f      	ldr	r1, [pc, #124]	; (b778c <loop+0x53c>)
   b770e:	f003 fc2c 	bl	baf6a <_ZN5Print7printlnEPKc>
              showBitmap(2,1,"");
   b7712:	4916      	ldr	r1, [pc, #88]	; (b776c <loop+0x51c>)
   b7714:	a8c0      	add	r0, sp, #768	; 0x300
   b7716:	f003 fb34 	bl	bad82 <_ZN6StringC1EPK19__FlashStringHelper>
   b771a:	aac0      	add	r2, sp, #768	; 0x300
   b771c:	4639      	mov	r1, r7
          showBitmap(2,0,"");
   b771e:	2002      	movs	r0, #2
   b7720:	e7e2      	b.n	b76e8 <loop+0x498>
        id = tagInfo[3];
   b7722:	f8df b038 	ldr.w	fp, [pc, #56]	; b775c <loop+0x50c>
   b7726:	68e3      	ldr	r3, [r4, #12]
   b7728:	f8cb 3000 	str.w	r3, [fp]
        Serial.print("Ejecutando tag --> ");
   b772c:	f003 fe6c 	bl	bb408 <_Z16_fetch_usbserialv>
   b7730:	4917      	ldr	r1, [pc, #92]	; (b7790 <loop+0x540>)
   b7732:	4e0d      	ldr	r6, [pc, #52]	; (b7768 <loop+0x518>)
   b7734:	f8df 9064 	ldr.w	r9, [pc, #100]	; b779c <loop+0x54c>
   b7738:	4f16      	ldr	r7, [pc, #88]	; (b7794 <loop+0x544>)
   b773a:	f8df a064 	ldr.w	sl, [pc, #100]	; b77a0 <loop+0x550>
   b773e:	f8df 8058 	ldr.w	r8, [pc, #88]	; b7798 <loop+0x548>
   b7742:	f003 fbff 	bl	baf44 <_ZN5Print5printEPKc>
        switch (tagInfo[1])
   b7746:	6863      	ldr	r3, [r4, #4]
   b7748:	2b05      	cmp	r3, #5
   b774a:	d86c      	bhi.n	b7826 <loop+0x5d6>
   b774c:	e8df f013 	tbh	[pc, r3, lsl #1]
   b7750:	00c8002a 	.word	0x00c8002a
   b7754:	02520219 	.word	0x02520219
   b7758:	02a40282 	.word	0x02a40282
   b775c:	2003d6d0 	.word	0x2003d6d0
   b7760:	2003e6b0 	.word	0x2003e6b0
   b7764:	000bc693 	.word	0x000bc693
   b7768:	2003cd14 	.word	0x2003cd14
   b776c:	000bc0fa 	.word	0x000bc0fa
   b7770:	000bc6a4 	.word	0x000bc6a4
   b7774:	2003d6cc 	.word	0x2003d6cc
   b7778:	000bc8ed 	.word	0x000bc8ed
   b777c:	2003da3c 	.word	0x2003da3c
   b7780:	2003da48 	.word	0x2003da48
   b7784:	2003d338 	.word	0x2003d338
   b7788:	000bc654 	.word	0x000bc654
   b778c:	000bc66f 	.word	0x000bc66f
   b7790:	000bc6b7 	.word	0x000bc6b7
   b7794:	2003da18 	.word	0x2003da18
   b7798:	2003c688 	.word	0x2003c688
   b779c:	2003da20 	.word	0x2003da20
   b77a0:	2003da1c 	.word	0x2003da1c
            if ( IF_pasado && (numSensoresBloque == numCondicionalesBloque) && isValidSensor(id) ) {
   b77a4:	4fad      	ldr	r7, [pc, #692]	; (b7a5c <loop+0x80c>)
            Serial.println("Sensor detectado");
   b77a6:	f003 fe2f 	bl	bb408 <_Z16_fetch_usbserialv>
   b77aa:	49ad      	ldr	r1, [pc, #692]	; (b7a60 <loop+0x810>)
   b77ac:	f003 fbdd 	bl	baf6a <_ZN5Print7printlnEPKc>
            if ( IF_pasado && (numSensoresBloque == numCondicionalesBloque) && isValidSensor(id) ) {
   b77b0:	783b      	ldrb	r3, [r7, #0]
   b77b2:	2b00      	cmp	r3, #0
   b77b4:	d05e      	beq.n	b7874 <loop+0x624>
   b77b6:	f8d9 2000 	ldr.w	r2, [r9]
   b77ba:	f8da 3000 	ldr.w	r3, [sl]
   b77be:	429a      	cmp	r2, r3
   b77c0:	d16f      	bne.n	b78a2 <loop+0x652>
   b77c2:	f8db 0000 	ldr.w	r0, [fp]
   b77c6:	f7fe f925 	bl	b5a14 <_Z13isValidSensori>
   b77ca:	2800      	cmp	r0, #0
   b77cc:	d050      	beq.n	b7870 <loop+0x620>
              puerto = isNewSensor(id);
   b77ce:	f8db 0000 	ldr.w	r0, [fp]
   b77d2:	4fa4      	ldr	r7, [pc, #656]	; (b7a64 <loop+0x814>)
   b77d4:	f7fe f940 	bl	b5a58 <_Z11isNewSensori>
   b77d8:	6038      	str	r0, [r7, #0]
              if (puerto == -1) {
   b77da:	3001      	adds	r0, #1
   b77dc:	d14e      	bne.n	b787c <loop+0x62c>
                puerto = asignarPuerto(tagInfo[2]);
   b77de:	68a0      	ldr	r0, [r4, #8]
   b77e0:	f7fe fd6e 	bl	b62c0 <_Z13asignarPuertoi>
   b77e4:	4601      	mov	r1, r0
   b77e6:	6038      	str	r0, [r7, #0]
                showPort(tagInfo[2], puerto);
   b77e8:	68a0      	ldr	r0, [r4, #8]
   b77ea:	f7ff fb47 	bl	b6e7c <_Z8showPortii>
              if (puerto != -1) {
   b77ee:	6839      	ldr	r1, [r7, #0]
   b77f0:	1c48      	adds	r0, r1, #1
   b77f2:	f000 81b7 	beq.w	b7b64 <loop+0x914>
                newSensor.bloque = numBloque;
   b77f6:	f8d8 0000 	ldr.w	r0, [r8]
                bloques[numBloque].sensores[numSensoresBloque] = newSensor;
   b77fa:	f8d9 c000 	ldr.w	ip, [r9]
   b77fe:	f8db 7000 	ldr.w	r7, [fp]
   b7802:	f44f 723b 	mov.w	r2, #748	; 0x2ec
   b7806:	4342      	muls	r2, r0
   b7808:	eb02 130c 	add.w	r3, r2, ip, lsl #4
   b780c:	4433      	add	r3, r6
   b780e:	605f      	str	r7, [r3, #4]
   b7810:	6927      	ldr	r7, [r4, #16]
   b7812:	6119      	str	r1, [r3, #16]
   b7814:	e9c3 7002 	strd	r7, r0, [r3, #8]
                bloques[numBloque].numSensores++;
   b7818:	58b3      	ldr	r3, [r6, r2]
   b781a:	3301      	adds	r3, #1
                numSensoresBloque++;
   b781c:	f10c 0701 	add.w	r7, ip, #1
                bloques[numBloque].numSensores++;
   b7820:	50b3      	str	r3, [r6, r2]
                numSensoresBloque++;
   b7822:	f8c9 7000 	str.w	r7, [r9]
        Serial.println("Fin Tag");
   b7826:	f003 fdef 	bl	bb408 <_Z16_fetch_usbserialv>
   b782a:	498f      	ldr	r1, [pc, #572]	; (b7a68 <loop+0x818>)
   b782c:	f003 fb9d 	bl	baf6a <_ZN5Print7printlnEPKc>
        Serial.println("# Bloque | # Sensores | # Condiciones | # Actuadores");
   b7830:	f003 fdea 	bl	bb408 <_Z16_fetch_usbserialv>
   b7834:	498d      	ldr	r1, [pc, #564]	; (b7a6c <loop+0x81c>)
   b7836:	f003 fb98 	bl	baf6a <_ZN5Print7printlnEPKc>
        Serial.printlnf("    %d \t|\t %d \t|\t %d \t|\t %d \t|\t %d", numBloque, numSensoresBloque, numCondicionalesBloque, numActuadoresBloque, bloques[numBloque].numActuadores);
   b783a:	f003 fde5 	bl	bb408 <_Z16_fetch_usbserialv>
   b783e:	4b8c      	ldr	r3, [pc, #560]	; (b7a70 <loop+0x820>)
   b7840:	498c      	ldr	r1, [pc, #560]	; (b7a74 <loop+0x824>)
   b7842:	681a      	ldr	r2, [r3, #0]
   b7844:	f44f 733b 	mov.w	r3, #748	; 0x2ec
   b7848:	fb03 6602 	mla	r6, r3, r2, r6
   b784c:	f8d6 3144 	ldr.w	r3, [r6, #324]	; 0x144
   b7850:	9302      	str	r3, [sp, #8]
   b7852:	4b89      	ldr	r3, [pc, #548]	; (b7a78 <loop+0x828>)
   b7854:	681b      	ldr	r3, [r3, #0]
   b7856:	9301      	str	r3, [sp, #4]
   b7858:	4b88      	ldr	r3, [pc, #544]	; (b7a7c <loop+0x82c>)
   b785a:	681b      	ldr	r3, [r3, #0]
   b785c:	9300      	str	r3, [sp, #0]
   b785e:	4b88      	ldr	r3, [pc, #544]	; (b7a80 <loop+0x830>)
   b7860:	681b      	ldr	r3, [r3, #0]
   b7862:	f7fd f94f 	bl	b4b04 <_ZN5Print8printlnfEPKcz>
        Serial.println();
   b7866:	f003 fdcf 	bl	bb408 <_Z16_fetch_usbserialv>
   b786a:	f003 fb72 	bl	baf52 <_ZN5Print7printlnEv>
        break;
   b786e:	e713      	b.n	b7698 <loop+0x448>
              if ((!IF_pasado)) {
   b7870:	783b      	ldrb	r3, [r7, #0]
   b7872:	b983      	cbnz	r3, b7896 <loop+0x646>
                Serial.println("Se esperaba IF tag");
   b7874:	f003 fdc8 	bl	bb408 <_Z16_fetch_usbserialv>
   b7878:	4982      	ldr	r1, [pc, #520]	; (b7a84 <loop+0x834>)
   b787a:	e015      	b.n	b78a8 <loop+0x658>
                showBitmap(1,6,"");
   b787c:	4982      	ldr	r1, [pc, #520]	; (b7a88 <loop+0x838>)
   b787e:	a8c0      	add	r0, sp, #768	; 0x300
   b7880:	f003 fa7f 	bl	bad82 <_ZN6StringC1EPK19__FlashStringHelper>
   b7884:	aac0      	add	r2, sp, #768	; 0x300
   b7886:	2106      	movs	r1, #6
   b7888:	2001      	movs	r0, #1
   b788a:	f7ff f99d 	bl	b6bc8 <_Z10showBitmapii6String>
   b788e:	a8c0      	add	r0, sp, #768	; 0x300
   b7890:	f003 fa2c 	bl	bacec <_ZN6StringD1Ev>
   b7894:	e7ab      	b.n	b77ee <loop+0x59e>
              } else if (numSensoresBloque != numCondicionalesBloque) {
   b7896:	f8d9 2000 	ldr.w	r2, [r9]
   b789a:	f8da 3000 	ldr.w	r3, [sl]
   b789e:	429a      	cmp	r2, r3
   b78a0:	d00c      	beq.n	b78bc <loop+0x66c>
                Serial.println("Despues de un sensor se espera una concion: AND u OR");
   b78a2:	f003 fdb1 	bl	bb408 <_Z16_fetch_usbserialv>
   b78a6:	4979      	ldr	r1, [pc, #484]	; (b7a8c <loop+0x83c>)
                Serial.println("Introduce un Actuador para la evaluación a TRUE");
   b78a8:	f003 fb5f 	bl	baf6a <_ZN5Print7printlnEPKc>
                showBitmap(2,2,"");
   b78ac:	4976      	ldr	r1, [pc, #472]	; (b7a88 <loop+0x838>)
   b78ae:	a8c0      	add	r0, sp, #768	; 0x300
   b78b0:	f003 fa67 	bl	bad82 <_ZN6StringC1EPK19__FlashStringHelper>
   b78b4:	2102      	movs	r1, #2
   b78b6:	aac0      	add	r2, sp, #768	; 0x300
   b78b8:	4608      	mov	r0, r1
   b78ba:	e00b      	b.n	b78d4 <loop+0x684>
                Serial.println("Sensor invalido");
   b78bc:	f003 fda4 	bl	bb408 <_Z16_fetch_usbserialv>
   b78c0:	4973      	ldr	r1, [pc, #460]	; (b7a90 <loop+0x840>)
   b78c2:	f003 fb52 	bl	baf6a <_ZN5Print7printlnEPKc>
                showBitmap(2,5,"");
   b78c6:	4970      	ldr	r1, [pc, #448]	; (b7a88 <loop+0x838>)
   b78c8:	a8c0      	add	r0, sp, #768	; 0x300
   b78ca:	f003 fa5a 	bl	bad82 <_ZN6StringC1EPK19__FlashStringHelper>
   b78ce:	aac0      	add	r2, sp, #768	; 0x300
   b78d0:	2105      	movs	r1, #5
   b78d2:	2002      	movs	r0, #2
                showBitmap(2,2,"");
   b78d4:	f7ff f978 	bl	b6bc8 <_Z10showBitmapii6String>
   b78d8:	a8c0      	add	r0, sp, #768	; 0x300
   b78da:	f003 fa07 	bl	bacec <_ZN6StringD1Ev>
   b78de:	e7a2      	b.n	b7826 <loop+0x5d6>
            Serial.println("Actuador detectado");
   b78e0:	f003 fd92 	bl	bb408 <_Z16_fetch_usbserialv>
            estado = tagInfo[4];
   b78e4:	f8df a1bc 	ldr.w	sl, [pc, #444]	; b7aa4 <loop+0x854>
            Serial.println("Actuador detectado");
   b78e8:	496a      	ldr	r1, [pc, #424]	; (b7a94 <loop+0x844>)
   b78ea:	f003 fb3e 	bl	baf6a <_ZN5Print7printlnEPKc>
            estado = tagInfo[4];
   b78ee:	6923      	ldr	r3, [r4, #16]
   b78f0:	f8ca 3000 	str.w	r3, [sl]
              if (!IF_pasado) {
   b78f4:	4b59      	ldr	r3, [pc, #356]	; (b7a5c <loop+0x80c>)
   b78f6:	781b      	ldrb	r3, [r3, #0]
   b78f8:	bb93      	cbnz	r3, b7960 <loop+0x710>
              puerto = isNewActuador(id);
   b78fa:	f8db 0000 	ldr.w	r0, [fp]
   b78fe:	f8df 9164 	ldr.w	r9, [pc, #356]	; b7a64 <loop+0x814>
   b7902:	f7fe f8d1 	bl	b5aa8 <_Z13isNewActuadori>
   b7906:	f8c9 0000 	str.w	r0, [r9]
              if (puerto == -1) {
   b790a:	3001      	adds	r0, #1
   b790c:	f040 808b 	bne.w	b7a26 <loop+0x7d6>
                puerto = asignarPuerto(tagInfo[2]);
   b7910:	68a0      	ldr	r0, [r4, #8]
   b7912:	f7fe fcd5 	bl	b62c0 <_Z13asignarPuertoi>
   b7916:	4601      	mov	r1, r0
   b7918:	f8c9 0000 	str.w	r0, [r9]
                showPort(tagInfo[2], puerto);
   b791c:	68a0      	ldr	r0, [r4, #8]
   b791e:	f7ff faad 	bl	b6e7c <_Z8showPortii>
              if (puerto != -1) {
   b7922:	f8d9 0000 	ldr.w	r0, [r9]
   b7926:	1c42      	adds	r2, r0, #1
   b7928:	d01a      	beq.n	b7960 <loop+0x710>
                bloque2[0].actuadores[numActuadoresBloque] = newActuador;
   b792a:	f8d7 c000 	ldr.w	ip, [r7]
   b792e:	495a      	ldr	r1, [pc, #360]	; (b7a98 <loop+0x848>)
                newActuador.bloque = numBloque;
   b7930:	f8d8 e000 	ldr.w	lr, [r8]
                bloque2[0].actuadores[numActuadoresBloque] = newActuador;
   b7934:	f8db 2000 	ldr.w	r2, [fp]
                newActuador.condicion = estado;
   b7938:	f8da 9000 	ldr.w	r9, [sl]
                bloque2[0].actuadores[numActuadoresBloque] = newActuador;
   b793c:	2314      	movs	r3, #20
   b793e:	fb03 130c 	mla	r3, r3, ip, r1
   b7942:	e9c3 e054 	strd	lr, r0, [r3, #336]	; 0x150
   b7946:	2001      	movs	r0, #1
   b7948:	f883 0158 	strb.w	r0, [r3, #344]	; 0x158
   b794c:	e9c3 2952 	strd	r2, r9, [r3, #328]	; 0x148
                bloque2[0].numActuadores++;
   b7950:	f8d1 3144 	ldr.w	r3, [r1, #324]	; 0x144
                numActuadoresBloque++;
   b7954:	eb0c 0200 	add.w	r2, ip, r0
                bloque2[0].numActuadores++;
   b7958:	4403      	add	r3, r0
                numActuadoresBloque++;
   b795a:	603a      	str	r2, [r7, #0]
                bloque2[0].numActuadores++;
   b795c:	f8c1 3144 	str.w	r3, [r1, #324]	; 0x144
            if ( THEN_pasado && !ELSE_pasado) {
   b7960:	4b4e      	ldr	r3, [pc, #312]	; (b7a9c <loop+0x84c>)
   b7962:	781b      	ldrb	r3, [r3, #0]
   b7964:	2b00      	cmp	r3, #0
   b7966:	f000 8103 	beq.w	b7b70 <loop+0x920>
   b796a:	4b4d      	ldr	r3, [pc, #308]	; (b7aa0 <loop+0x850>)
              puerto = isNewActuador(id);
   b796c:	f8db 0000 	ldr.w	r0, [fp]
            if ( THEN_pasado && !ELSE_pasado) {
   b7970:	f893 a000 	ldrb.w	sl, [r3]
   b7974:	f8df 80ec 	ldr.w	r8, [pc, #236]	; b7a64 <loop+0x814>
   b7978:	f8df 90f4 	ldr.w	r9, [pc, #244]	; b7a70 <loop+0x820>
              puerto = isNewActuador(id);
   b797c:	f7fe f894 	bl	b5aa8 <_Z13isNewActuadori>
   b7980:	f8c8 0000 	str.w	r0, [r8]
            if ( THEN_pasado && !ELSE_pasado) {
   b7984:	f1ba 0f00 	cmp.w	sl, #0
   b7988:	f040 8092 	bne.w	b7ab0 <loop+0x860>
              if (puerto == -1) {
   b798c:	3001      	adds	r0, #1
   b798e:	d157      	bne.n	b7a40 <loop+0x7f0>
                puerto = asignarPuerto(tagInfo[2]);
   b7990:	68a0      	ldr	r0, [r4, #8]
   b7992:	f7fe fc95 	bl	b62c0 <_Z13asignarPuertoi>
   b7996:	4601      	mov	r1, r0
   b7998:	f8c8 0000 	str.w	r0, [r8]
                showPort(tagInfo[2], puerto);
   b799c:	68a0      	ldr	r0, [r4, #8]
   b799e:	f7ff fa6d 	bl	b6e7c <_Z8showPortii>
              if (puerto != -1) {
   b79a2:	f8d8 1000 	ldr.w	r1, [r8]
   b79a6:	1c4b      	adds	r3, r1, #1
   b79a8:	f000 80dc 	beq.w	b7b64 <loop+0x914>
                newActuador.condicion = estado;
   b79ac:	4b3d      	ldr	r3, [pc, #244]	; (b7aa4 <loop+0x854>)
                newActuador.bloque = numBloque;
   b79ae:	f8d9 e000 	ldr.w	lr, [r9]
                newActuador.condicion = estado;
   b79b2:	f8d3 8000 	ldr.w	r8, [r3]
                bloques[numBloque].actuadores[numActuadoresBloque] = newActuador;
   b79b6:	6838      	ldr	r0, [r7, #0]
                newActuador.id = id;
   b79b8:	f8db c000 	ldr.w	ip, [fp]
                bloques[numBloque].actuadores[numActuadoresBloque] = newActuador;
   b79bc:	f44f 733b 	mov.w	r3, #748	; 0x2ec
   b79c0:	fb03 f20e 	mul.w	r2, r3, lr
   b79c4:	2314      	movs	r3, #20
   b79c6:	fb03 2300 	mla	r3, r3, r0, r2
   b79ca:	4433      	add	r3, r6
   b79cc:	e9c3 c852 	strd	ip, r8, [r3, #328]	; 0x148
   b79d0:	f04f 0801 	mov.w	r8, #1
   b79d4:	e9c3 e154 	strd	lr, r1, [r3, #336]	; 0x150
   b79d8:	f883 8158 	strb.w	r8, [r3, #344]	; 0x158
                bloques[numBloque].numActuadores++;
   b79dc:	18b3      	adds	r3, r6, r2
                numActuadoresBloque++;
   b79de:	4440      	add	r0, r8
                bloques[numBloque].numActuadores++;
   b79e0:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
                numActuadoresBloque++;
   b79e4:	6038      	str	r0, [r7, #0]
                bloques[numBloque].numActuadores++;
   b79e6:	4442      	add	r2, r8
   b79e8:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
                if (id == 0)
   b79ec:	f1bc 0f00 	cmp.w	ip, #0
   b79f0:	f47f af19 	bne.w	b7826 <loop+0x5d6>
                  ledObject = ChainableLED(puerto, puerto+1, 5);
   b79f4:	b2c9      	uxtb	r1, r1
   b79f6:	eb01 0208 	add.w	r2, r1, r8
   b79fa:	afc0      	add	r7, sp, #768	; 0x300
   b79fc:	2305      	movs	r3, #5
   b79fe:	b2d2      	uxtb	r2, r2
   b7a00:	4638      	mov	r0, r7
   b7a02:	f002 fcbd 	bl	ba380 <_ZN12ChainableLEDC1Ehhh>
   b7a06:	e897 0003 	ldmia.w	r7, {r0, r1}
   b7a0a:	f8df 90a0 	ldr.w	r9, [pc, #160]	; b7aac <loop+0x85c>
   b7a0e:	e889 0003 	stmia.w	r9, {r0, r1}
   b7a12:	4638      	mov	r0, r7
   b7a14:	f002 fcc1 	bl	ba39a <_ZN12ChainableLEDD1Ev>
                  ledObject.init();
   b7a18:	4648      	mov	r0, r9
   b7a1a:	f002 fd63 	bl	ba4e4 <_ZN12ChainableLED4initEv>
                  init = true;
   b7a1e:	4b22      	ldr	r3, [pc, #136]	; (b7aa8 <loop+0x858>)
   b7a20:	f883 8000 	strb.w	r8, [r3]
   b7a24:	e6ff      	b.n	b7826 <loop+0x5d6>
                showBitmap(1,6,"");
   b7a26:	4918      	ldr	r1, [pc, #96]	; (b7a88 <loop+0x838>)
   b7a28:	a8c0      	add	r0, sp, #768	; 0x300
   b7a2a:	f003 f9aa 	bl	bad82 <_ZN6StringC1EPK19__FlashStringHelper>
   b7a2e:	aac0      	add	r2, sp, #768	; 0x300
   b7a30:	2106      	movs	r1, #6
   b7a32:	2001      	movs	r0, #1
   b7a34:	f7ff f8c8 	bl	b6bc8 <_Z10showBitmapii6String>
   b7a38:	a8c0      	add	r0, sp, #768	; 0x300
   b7a3a:	f003 f957 	bl	bacec <_ZN6StringD1Ev>
   b7a3e:	e770      	b.n	b7922 <loop+0x6d2>
                showBitmap(1,6,"");
   b7a40:	4911      	ldr	r1, [pc, #68]	; (b7a88 <loop+0x838>)
   b7a42:	a8c0      	add	r0, sp, #768	; 0x300
   b7a44:	f003 f99d 	bl	bad82 <_ZN6StringC1EPK19__FlashStringHelper>
   b7a48:	aac0      	add	r2, sp, #768	; 0x300
   b7a4a:	2106      	movs	r1, #6
   b7a4c:	2001      	movs	r0, #1
   b7a4e:	f7ff f8bb 	bl	b6bc8 <_Z10showBitmapii6String>
   b7a52:	a8c0      	add	r0, sp, #768	; 0x300
   b7a54:	f003 f94a 	bl	bacec <_ZN6StringD1Ev>
   b7a58:	e7a3      	b.n	b79a2 <loop+0x752>
   b7a5a:	bf00      	nop
   b7a5c:	2003c729 	.word	0x2003c729
   b7a60:	000bc693 	.word	0x000bc693
   b7a64:	2003da2c 	.word	0x2003da2c
   b7a68:	000bc848 	.word	0x000bc848
   b7a6c:	000bc850 	.word	0x000bc850
   b7a70:	2003c688 	.word	0x2003c688
   b7a74:	000bc885 	.word	0x000bc885
   b7a78:	2003da18 	.word	0x2003da18
   b7a7c:	2003da1c 	.word	0x2003da1c
   b7a80:	2003da20 	.word	0x2003da20
   b7a84:	000bc6cb 	.word	0x000bc6cb
   b7a88:	000bc0fa 	.word	0x000bc0fa
   b7a8c:	000bc6de 	.word	0x000bc6de
   b7a90:	000bc713 	.word	0x000bc713
   b7a94:	000bc6a4 	.word	0x000bc6a4
   b7a98:	2003c73c 	.word	0x2003c73c
   b7a9c:	2003c738 	.word	0x2003c738
   b7aa0:	2003c728 	.word	0x2003c728
   b7aa4:	2003d6cc 	.word	0x2003d6cc
   b7aa8:	2003d6d6 	.word	0x2003d6d6
   b7aac:	2003d6e0 	.word	0x2003d6e0
              if (puerto == -1) {
   b7ab0:	3001      	adds	r0, #1
   b7ab2:	d14a      	bne.n	b7b4a <loop+0x8fa>
                puerto = asignarPuerto(tagInfo[2]);
   b7ab4:	68a0      	ldr	r0, [r4, #8]
   b7ab6:	f7fe fc03 	bl	b62c0 <_Z13asignarPuertoi>
   b7aba:	4601      	mov	r1, r0
   b7abc:	f8c8 0000 	str.w	r0, [r8]
                showPort(tagInfo[2], puerto);
   b7ac0:	68a0      	ldr	r0, [r4, #8]
   b7ac2:	f7ff f9db 	bl	b6e7c <_Z8showPortii>
              if (puerto != -1) {
   b7ac6:	f8d8 1000 	ldr.w	r1, [r8]
   b7aca:	1c48      	adds	r0, r1, #1
   b7acc:	d04a      	beq.n	b7b64 <loop+0x914>
                newActuador.condicion = estado;
   b7ace:	4bab      	ldr	r3, [pc, #684]	; (b7d7c <loop+0xb2c>)
                newActuador.bloque = numBloque;
   b7ad0:	f8d9 e000 	ldr.w	lr, [r9]
                bloques[numBloque].actuadores[numActuadoresBloque] = newActuador;
   b7ad4:	f8d7 c000 	ldr.w	ip, [r7]
                newActuador.condicion = estado;
   b7ad8:	f8d3 8000 	ldr.w	r8, [r3]
                newActuador.id = id;
   b7adc:	f8db 0000 	ldr.w	r0, [fp]
                bloques[numBloque].actuadores[numActuadoresBloque] = newActuador;
   b7ae0:	f44f 733b 	mov.w	r3, #748	; 0x2ec
   b7ae4:	fb03 f20e 	mul.w	r2, r3, lr
   b7ae8:	2314      	movs	r3, #20
   b7aea:	fb03 230c 	mla	r3, r3, ip, r2
   b7aee:	4433      	add	r3, r6
   b7af0:	f503 79a4 	add.w	r9, r3, #328	; 0x148
   b7af4:	e9c3 0852 	strd	r0, r8, [r3, #328]	; 0x148
   b7af8:	e9c3 e154 	strd	lr, r1, [r3, #336]	; 0x150
   b7afc:	2300      	movs	r3, #0
   b7afe:	f889 3010 	strb.w	r3, [r9, #16]
                bloques[numBloque].numActuadores++;
   b7b02:	18b3      	adds	r3, r6, r2
   b7b04:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
   b7b08:	3201      	adds	r2, #1
   b7b0a:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
                numActuadoresBloque++;
   b7b0e:	f10c 0301 	add.w	r3, ip, #1
   b7b12:	603b      	str	r3, [r7, #0]
                if (id == 0)
   b7b14:	2800      	cmp	r0, #0
   b7b16:	f47f ae86 	bne.w	b7826 <loop+0x5d6>
                  ledObject = ChainableLED(puerto, puerto+1, 5);
   b7b1a:	b2c9      	uxtb	r1, r1
   b7b1c:	1c4a      	adds	r2, r1, #1
   b7b1e:	afc0      	add	r7, sp, #768	; 0x300
   b7b20:	2305      	movs	r3, #5
   b7b22:	b2d2      	uxtb	r2, r2
   b7b24:	4638      	mov	r0, r7
   b7b26:	f002 fc2b 	bl	ba380 <_ZN12ChainableLEDC1Ehhh>
   b7b2a:	e897 0003 	ldmia.w	r7, {r0, r1}
   b7b2e:	f8df 82c8 	ldr.w	r8, [pc, #712]	; b7df8 <loop+0xba8>
   b7b32:	e888 0003 	stmia.w	r8, {r0, r1}
   b7b36:	4638      	mov	r0, r7
   b7b38:	f002 fc2f 	bl	ba39a <_ZN12ChainableLEDD1Ev>
                  ledObject.init();
   b7b3c:	4640      	mov	r0, r8
   b7b3e:	f002 fcd1 	bl	ba4e4 <_ZN12ChainableLED4initEv>
                  init = true;
   b7b42:	4b8f      	ldr	r3, [pc, #572]	; (b7d80 <loop+0xb30>)
   b7b44:	2201      	movs	r2, #1
   b7b46:	701a      	strb	r2, [r3, #0]
   b7b48:	e66d      	b.n	b7826 <loop+0x5d6>
                showBitmap(1,6,"");
   b7b4a:	498e      	ldr	r1, [pc, #568]	; (b7d84 <loop+0xb34>)
   b7b4c:	a8c0      	add	r0, sp, #768	; 0x300
   b7b4e:	f003 f918 	bl	bad82 <_ZN6StringC1EPK19__FlashStringHelper>
   b7b52:	aac0      	add	r2, sp, #768	; 0x300
   b7b54:	2106      	movs	r1, #6
   b7b56:	2001      	movs	r0, #1
   b7b58:	f7ff f836 	bl	b6bc8 <_Z10showBitmapii6String>
   b7b5c:	a8c0      	add	r0, sp, #768	; 0x300
   b7b5e:	f003 f8c5 	bl	bacec <_ZN6StringD1Ev>
   b7b62:	e7b0      	b.n	b7ac6 <loop+0x876>
                Serial.println("Puerto no disponible");
   b7b64:	f003 fc50 	bl	bb408 <_Z16_fetch_usbserialv>
   b7b68:	4987      	ldr	r1, [pc, #540]	; (b7d88 <loop+0xb38>)
   b7b6a:	f003 f9fe 	bl	baf6a <_ZN5Print7printlnEPKc>
   b7b6e:	e65a      	b.n	b7826 <loop+0x5d6>
              if (!IF_pasado) {
   b7b70:	4b86      	ldr	r3, [pc, #536]	; (b7d8c <loop+0xb3c>)
   b7b72:	781b      	ldrb	r3, [r3, #0]
   b7b74:	2b00      	cmp	r3, #0
   b7b76:	f43f ae56 	beq.w	b7826 <loop+0x5d6>
                Serial.println("Se esperaba THEN tag");
   b7b7a:	f003 fc45 	bl	bb408 <_Z16_fetch_usbserialv>
   b7b7e:	4984      	ldr	r1, [pc, #528]	; (b7d90 <loop+0xb40>)
   b7b80:	e692      	b.n	b78a8 <loop+0x658>
            Serial.println("IF detectado");
   b7b82:	f003 fc41 	bl	bb408 <_Z16_fetch_usbserialv>
   b7b86:	4983      	ldr	r1, [pc, #524]	; (b7d94 <loop+0xb44>)
   b7b88:	f003 f9ef 	bl	baf6a <_ZN5Print7printlnEPKc>
            if (numBloque == -1 || ( numBloque == 0 && numActuadoresBloque > 0 ) ) {
   b7b8c:	f8d8 3000 	ldr.w	r3, [r8]
   b7b90:	1c5a      	adds	r2, r3, #1
   b7b92:	d003      	beq.n	b7b9c <loop+0x94c>
   b7b94:	bb53      	cbnz	r3, b7bec <loop+0x99c>
   b7b96:	683a      	ldr	r2, [r7, #0]
   b7b98:	2a00      	cmp	r2, #0
   b7b9a:	dd27      	ble.n	b7bec <loop+0x99c>
              IF_pasado = true;
   b7b9c:	497b      	ldr	r1, [pc, #492]	; (b7d8c <loop+0xb3c>)
              THEN_pasado = false;
   b7b9e:	487e      	ldr	r0, [pc, #504]	; (b7d98 <loop+0xb48>)
              IF_pasado = true;
   b7ba0:	2201      	movs	r2, #1
   b7ba2:	700a      	strb	r2, [r1, #0]
              THEN_pasado = false;
   b7ba4:	2100      	movs	r1, #0
   b7ba6:	7001      	strb	r1, [r0, #0]
              ELSE_pasado = false;
   b7ba8:	487c      	ldr	r0, [pc, #496]	; (b7d9c <loop+0xb4c>)
              numBloque++;
   b7baa:	3301      	adds	r3, #1
   b7bac:	f8c8 3000 	str.w	r3, [r8]
              ELSE_pasado = false;
   b7bb0:	7001      	strb	r1, [r0, #0]
              if (numBloque == 0){
   b7bb2:	b9cb      	cbnz	r3, b7be8 <loop+0x998>
                if1 = true;
   b7bb4:	487a      	ldr	r0, [pc, #488]	; (b7da0 <loop+0xb50>)
                if2 = true;
   b7bb6:	7002      	strb	r2, [r0, #0]
              puertoAnalogico_bloque = 0;
   b7bb8:	4a7a      	ldr	r2, [pc, #488]	; (b7da4 <loop+0xb54>)
              numCondicionalesBloque = 0;
   b7bba:	f8ca 1000 	str.w	r1, [sl]
              puertoAnalogico_bloque = 0;
   b7bbe:	6011      	str	r1, [r2, #0]
              puertoDigital_bloque = 0;
   b7bc0:	4a79      	ldr	r2, [pc, #484]	; (b7da8 <loop+0xb58>)
              numSensoresBloque = 0;
   b7bc2:	f8c9 1000 	str.w	r1, [r9]
              puertoDigital_bloque = 0;
   b7bc6:	6011      	str	r1, [r2, #0]
              bloques[numBloque] = nuevoBloque;
   b7bc8:	f44f 723b 	mov.w	r2, #748	; 0x2ec
   b7bcc:	4353      	muls	r3, r2
   b7bce:	18f2      	adds	r2, r6, r3
   b7bd0:	50f1      	str	r1, [r6, r3]
              numActuadoresBloque = 0;
   b7bd2:	6039      	str	r1, [r7, #0]
              bloques[numBloque] = nuevoBloque;
   b7bd4:	f8c2 1144 	str.w	r1, [r2, #324]	; 0x144
              showBitmap(3,0,"IF");
   b7bd8:	4974      	ldr	r1, [pc, #464]	; (b7dac <loop+0xb5c>)
              showBitmap(3,0,"THEN");
   b7bda:	a8c0      	add	r0, sp, #768	; 0x300
   b7bdc:	f003 f8d1 	bl	bad82 <_ZN6StringC1EPK19__FlashStringHelper>
   b7be0:	aac0      	add	r2, sp, #768	; 0x300
   b7be2:	2100      	movs	r1, #0
   b7be4:	2003      	movs	r0, #3
   b7be6:	e675      	b.n	b78d4 <loop+0x684>
                if2 = true;
   b7be8:	4871      	ldr	r0, [pc, #452]	; (b7db0 <loop+0xb60>)
   b7bea:	e7e4      	b.n	b7bb6 <loop+0x966>
              Serial.println("Numero de bloques > 2 || Se necesita al menos un actuador para terminar el bloque");
   b7bec:	f003 fc0c 	bl	bb408 <_Z16_fetch_usbserialv>
   b7bf0:	4970      	ldr	r1, [pc, #448]	; (b7db4 <loop+0xb64>)
   b7bf2:	e659      	b.n	b78a8 <loop+0x658>
            Serial.println("AND/OR detectado");
   b7bf4:	f003 fc08 	bl	bb408 <_Z16_fetch_usbserialv>
   b7bf8:	496f      	ldr	r1, [pc, #444]	; (b7db8 <loop+0xb68>)
   b7bfa:	f003 f9b6 	bl	baf6a <_ZN5Print7printlnEPKc>
            if ( IF_pasado && (numCondicionalesBloque < numSensoresBloque) && numActuadoresBloque == 0) {
   b7bfe:	4b63      	ldr	r3, [pc, #396]	; (b7d8c <loop+0xb3c>)
   b7c00:	781b      	ldrb	r3, [r3, #0]
   b7c02:	2b00      	cmp	r3, #0
   b7c04:	f43f ae36 	beq.w	b7874 <loop+0x624>
   b7c08:	f8da 3000 	ldr.w	r3, [sl]
   b7c0c:	f8d9 2000 	ldr.w	r2, [r9]
   b7c10:	4293      	cmp	r3, r2
   b7c12:	da19      	bge.n	b7c48 <loop+0x9f8>
   b7c14:	683f      	ldr	r7, [r7, #0]
   b7c16:	b9cf      	cbnz	r7, b7c4c <loop+0x9fc>
              bloques[numBloque].condiciones.condicionesBloque[numCondicionalesBloque] = tagInfo[2];
   b7c18:	f8d8 2000 	ldr.w	r2, [r8]
   b7c1c:	f8d4 9008 	ldr.w	r9, [r4, #8]
   b7c20:	f44f 713b 	mov.w	r1, #748	; 0x2ec
   b7c24:	fb01 6202 	mla	r2, r1, r2, r6
   b7c28:	f1b9 0f00 	cmp.w	r9, #0
   b7c2c:	441a      	add	r2, r3
   b7c2e:	bf14      	ite	ne
   b7c30:	2101      	movne	r1, #1
   b7c32:	2100      	moveq	r1, #0
              numCondicionalesBloque++;
   b7c34:	f103 0301 	add.w	r3, r3, #1
              bloques[numBloque].condiciones.condicionesBloque[numCondicionalesBloque] = tagInfo[2];
   b7c38:	f882 12d8 	strb.w	r1, [r2, #728]	; 0x2d8
              numCondicionalesBloque++;
   b7c3c:	f8ca 3000 	str.w	r3, [sl]
              tagInfo[2]==0 ? showBitmap(3,0,"OR") : showBitmap(3,0,"AND");
   b7c40:	bf0c      	ite	eq
   b7c42:	495e      	ldreq	r1, [pc, #376]	; (b7dbc <loop+0xb6c>)
   b7c44:	495e      	ldrne	r1, [pc, #376]	; (b7dc0 <loop+0xb70>)
   b7c46:	e7c8      	b.n	b7bda <loop+0x98a>
              } else if ( numSensoresBloque >= numCondicionalesBloque ) {
   b7c48:	f73f aded 	bgt.w	b7826 <loop+0x5d6>
                Serial.println("Una concicion solo puede ir seguida de un sensor.");
   b7c4c:	f003 fbdc 	bl	bb408 <_Z16_fetch_usbserialv>
   b7c50:	495c      	ldr	r1, [pc, #368]	; (b7dc4 <loop+0xb74>)
   b7c52:	e629      	b.n	b78a8 <loop+0x658>
            Serial.println("THEN detectado");
   b7c54:	f003 fbd8 	bl	bb408 <_Z16_fetch_usbserialv>
   b7c58:	495b      	ldr	r1, [pc, #364]	; (b7dc8 <loop+0xb78>)
   b7c5a:	f003 f986 	bl	baf6a <_ZN5Print7printlnEPKc>
            if ( IF_pasado && (numSensoresBloque > 0) && (numSensoresBloque > numCondicionalesBloque)) {
   b7c5e:	4b4b      	ldr	r3, [pc, #300]	; (b7d8c <loop+0xb3c>)
   b7c60:	781b      	ldrb	r3, [r3, #0]
   b7c62:	2b00      	cmp	r3, #0
   b7c64:	f43f ae06 	beq.w	b7874 <loop+0x624>
   b7c68:	f8d9 3000 	ldr.w	r3, [r9]
   b7c6c:	2b00      	cmp	r3, #0
   b7c6e:	dd0f      	ble.n	b7c90 <loop+0xa40>
   b7c70:	f8da 2000 	ldr.w	r2, [sl]
   b7c74:	4293      	cmp	r3, r2
   b7c76:	dd0b      	ble.n	b7c90 <loop+0xa40>
              THEN_pasado = true;
   b7c78:	4a47      	ldr	r2, [pc, #284]	; (b7d98 <loop+0xb48>)
   b7c7a:	2301      	movs	r3, #1
   b7c7c:	7013      	strb	r3, [r2, #0]
              if (numBloque == 0){
   b7c7e:	f8d8 2000 	ldr.w	r2, [r8]
   b7c82:	b91a      	cbnz	r2, b7c8c <loop+0xa3c>
                then1 = true;
   b7c84:	4a51      	ldr	r2, [pc, #324]	; (b7dcc <loop+0xb7c>)
              showBitmap(3,0,"THEN");
   b7c86:	4952      	ldr	r1, [pc, #328]	; (b7dd0 <loop+0xb80>)
                then2 = true;
   b7c88:	7013      	strb	r3, [r2, #0]
              showBitmap(3,0,"THEN");
   b7c8a:	e7a6      	b.n	b7bda <loop+0x98a>
                then2 = true;
   b7c8c:	4a51      	ldr	r2, [pc, #324]	; (b7dd4 <loop+0xb84>)
   b7c8e:	e7fa      	b.n	b7c86 <loop+0xa36>
                Serial.println("Numero de sensores infucientes");
   b7c90:	f003 fbba 	bl	bb408 <_Z16_fetch_usbserialv>
   b7c94:	4950      	ldr	r1, [pc, #320]	; (b7dd8 <loop+0xb88>)
   b7c96:	e607      	b.n	b78a8 <loop+0x658>
            Serial.println("ELSE detectado");
   b7c98:	f003 fbb6 	bl	bb408 <_Z16_fetch_usbserialv>
   b7c9c:	494f      	ldr	r1, [pc, #316]	; (b7ddc <loop+0xb8c>)
   b7c9e:	f003 f964 	bl	baf6a <_ZN5Print7printlnEPKc>
            if ( IF_pasado && (numActuadoresBloque > 0)) {
   b7ca2:	4b3a      	ldr	r3, [pc, #232]	; (b7d8c <loop+0xb3c>)
   b7ca4:	781b      	ldrb	r3, [r3, #0]
   b7ca6:	2b00      	cmp	r3, #0
   b7ca8:	f43f ade4 	beq.w	b7874 <loop+0x624>
   b7cac:	683b      	ldr	r3, [r7, #0]
   b7cae:	2b00      	cmp	r3, #0
   b7cb0:	dd0b      	ble.n	b7cca <loop+0xa7a>
              ELSE_pasado = true;
   b7cb2:	4a3a      	ldr	r2, [pc, #232]	; (b7d9c <loop+0xb4c>)
   b7cb4:	2301      	movs	r3, #1
   b7cb6:	7013      	strb	r3, [r2, #0]
              if (numBloque == 0){
   b7cb8:	f8d8 2000 	ldr.w	r2, [r8]
   b7cbc:	b91a      	cbnz	r2, b7cc6 <loop+0xa76>
                else1 = true;
   b7cbe:	4a48      	ldr	r2, [pc, #288]	; (b7de0 <loop+0xb90>)
              showBitmap(3,0,"ELSE");
   b7cc0:	4948      	ldr	r1, [pc, #288]	; (b7de4 <loop+0xb94>)
                else2 = true;
   b7cc2:	7013      	strb	r3, [r2, #0]
              showBitmap(3,0,"ELSE");
   b7cc4:	e789      	b.n	b7bda <loop+0x98a>
                else2 = true;
   b7cc6:	4a48      	ldr	r2, [pc, #288]	; (b7de8 <loop+0xb98>)
   b7cc8:	e7fa      	b.n	b7cc0 <loop+0xa70>
                Serial.println("Introduce un Actuador para la evaluación a TRUE");
   b7cca:	f003 fb9d 	bl	bb408 <_Z16_fetch_usbserialv>
   b7cce:	4947      	ldr	r1, [pc, #284]	; (b7dec <loop+0xb9c>)
   b7cd0:	e5ea      	b.n	b78a8 <loop+0x658>
        if ( tagInfo[0] != -1 ) {
   b7cd2:	3601      	adds	r6, #1
   b7cd4:	f43f ace0 	beq.w	b7698 <loop+0x448>
          Serial.println("Tarjeta inválida para este modo");
   b7cd8:	f003 fb96 	bl	bb408 <_Z16_fetch_usbserialv>
   b7cdc:	4944      	ldr	r1, [pc, #272]	; (b7df0 <loop+0xba0>)
   b7cde:	f003 f944 	bl	baf6a <_ZN5Print7printlnEPKc>
          showBitmap(2,0,"");
   b7ce2:	4928      	ldr	r1, [pc, #160]	; (b7d84 <loop+0xb34>)
   b7ce4:	a8c0      	add	r0, sp, #768	; 0x300
   b7ce6:	f003 f84c 	bl	bad82 <_ZN6StringC1EPK19__FlashStringHelper>
   b7cea:	aac0      	add	r2, sp, #768	; 0x300
   b7cec:	2100      	movs	r1, #0
   b7cee:	e516      	b.n	b771e <loop+0x4ce>
      if (!IF_pasado){
   b7cf0:	4f26      	ldr	r7, [pc, #152]	; (b7d8c <loop+0xb3c>)
   b7cf2:	f897 8000 	ldrb.w	r8, [r7]
   b7cf6:	f1b8 0f00 	cmp.w	r8, #0
   b7cfa:	d11f      	bne.n	b7d3c <loop+0xaec>
          ledObject = ChainableLED(puerto, puerto+1, 5);
   b7cfc:	4b3d      	ldr	r3, [pc, #244]	; (b7df4 <loop+0xba4>)
   b7cfe:	4e3e      	ldr	r6, [pc, #248]	; (b7df8 <loop+0xba8>)
   b7d00:	7819      	ldrb	r1, [r3, #0]
   b7d02:	acc0      	add	r4, sp, #768	; 0x300
   b7d04:	1c4a      	adds	r2, r1, #1
   b7d06:	2305      	movs	r3, #5
   b7d08:	b2d2      	uxtb	r2, r2
   b7d0a:	4620      	mov	r0, r4
   b7d0c:	f002 fb38 	bl	ba380 <_ZN12ChainableLEDC1Ehhh>
   b7d10:	e894 0003 	ldmia.w	r4, {r0, r1}
   b7d14:	e886 0003 	stmia.w	r6, {r0, r1}
   b7d18:	4620      	mov	r0, r4
   b7d1a:	f002 fb3e 	bl	ba39a <_ZN12ChainableLEDD1Ev>
          ledObject.init();
   b7d1e:	4630      	mov	r0, r6
   b7d20:	f002 fbe0 	bl	ba4e4 <_ZN12ChainableLED4initEv>
          showBitmap(3,0,"Ejecutando");
   b7d24:	4935      	ldr	r1, [pc, #212]	; (b7dfc <loop+0xbac>)
   b7d26:	4620      	mov	r0, r4
   b7d28:	f003 f82b 	bl	bad82 <_ZN6StringC1EPK19__FlashStringHelper>
   b7d2c:	2003      	movs	r0, #3
   b7d2e:	4622      	mov	r2, r4
   b7d30:	4641      	mov	r1, r8
   b7d32:	f7fe ff49 	bl	b6bc8 <_Z10showBitmapii6String>
   b7d36:	4620      	mov	r0, r4
   b7d38:	f002 ffd8 	bl	bacec <_ZN6StringD1Ev>
      serieBefore(0);
   b7d3c:	2000      	movs	r0, #0
   b7d3e:	f7fe fa2f 	bl	b61a0 <_Z11serieBeforei>
      if (IF_pasado){
   b7d42:	783b      	ldrb	r3, [r7, #0]
   b7d44:	2b00      	cmp	r3, #0
   b7d46:	f000 80a4 	beq.w	b7e92 <loop+0xc42>
        if ( (numBloque==0 && bloques[0].numActuadores>0) || numBloque==1 ) {
   b7d4a:	4e2d      	ldr	r6, [pc, #180]	; (b7e00 <loop+0xbb0>)
   b7d4c:	6833      	ldr	r3, [r6, #0]
   b7d4e:	2b00      	cmp	r3, #0
   b7d50:	d15c      	bne.n	b7e0c <loop+0xbbc>
   b7d52:	4b2c      	ldr	r3, [pc, #176]	; (b7e04 <loop+0xbb4>)
   b7d54:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
   b7d58:	2b00      	cmp	r3, #0
   b7d5a:	dc59      	bgt.n	b7e10 <loop+0xbc0>
          showBitmap(2,4,"  acaba bloque 1");
   b7d5c:	492a      	ldr	r1, [pc, #168]	; (b7e08 <loop+0xbb8>)
   b7d5e:	a8c0      	add	r0, sp, #768	; 0x300
   b7d60:	f003 f80f 	bl	bad82 <_ZN6StringC1EPK19__FlashStringHelper>
   b7d64:	aac0      	add	r2, sp, #768	; 0x300
   b7d66:	2104      	movs	r1, #4
   b7d68:	2002      	movs	r0, #2
   b7d6a:	f7fe ff2d 	bl	b6bc8 <_Z10showBitmapii6String>
   b7d6e:	a8c0      	add	r0, sp, #768	; 0x300
   b7d70:	f002 ffbc 	bl	bacec <_ZN6StringD1Ev>
          play = false;
   b7d74:	2300      	movs	r3, #0
   b7d76:	702b      	strb	r3, [r5, #0]
   b7d78:	e068      	b.n	b7e4c <loop+0xbfc>
   b7d7a:	bf00      	nop
   b7d7c:	2003d6cc 	.word	0x2003d6cc
   b7d80:	2003d6d6 	.word	0x2003d6d6
   b7d84:	000bc0fa 	.word	0x000bc0fa
   b7d88:	000bc46d 	.word	0x000bc46d
   b7d8c:	2003c729 	.word	0x2003c729
   b7d90:	000bc723 	.word	0x000bc723
   b7d94:	000bc738 	.word	0x000bc738
   b7d98:	2003c738 	.word	0x2003c738
   b7d9c:	2003c728 	.word	0x2003c728
   b7da0:	2003d6d4 	.word	0x2003d6d4
   b7da4:	2003da34 	.word	0x2003da34
   b7da8:	2003da38 	.word	0x2003da38
   b7dac:	000bc013 	.word	0x000bc013
   b7db0:	2003d6d5 	.word	0x2003d6d5
   b7db4:	000bc745 	.word	0x000bc745
   b7db8:	000bc797 	.word	0x000bc797
   b7dbc:	000bc02c 	.word	0x000bc02c
   b7dc0:	000bc01f 	.word	0x000bc01f
   b7dc4:	000bc7a8 	.word	0x000bc7a8
   b7dc8:	000bc7da 	.word	0x000bc7da
   b7dcc:	2003e6ac 	.word	0x2003e6ac
   b7dd0:	000bc037 	.word	0x000bc037
   b7dd4:	2003e6ad 	.word	0x2003e6ad
   b7dd8:	000bc7e9 	.word	0x000bc7e9
   b7ddc:	000bc808 	.word	0x000bc808
   b7de0:	2003d6c8 	.word	0x2003d6c8
   b7de4:	000bc044 	.word	0x000bc044
   b7de8:	2003d6c9 	.word	0x2003d6c9
   b7dec:	000bc817 	.word	0x000bc817
   b7df0:	000bc8a8 	.word	0x000bc8a8
   b7df4:	2003da2c 	.word	0x2003da2c
   b7df8:	2003d6e0 	.word	0x2003d6e0
   b7dfc:	000bc8c9 	.word	0x000bc8c9
   b7e00:	2003c688 	.word	0x2003c688
   b7e04:	2003cd14 	.word	0x2003cd14
   b7e08:	000bc8f3 	.word	0x000bc8f3
        if ( (numBloque==0 && bloques[0].numActuadores>0) || numBloque==1 ) {
   b7e0c:	2b01      	cmp	r3, #1
   b7e0e:	d1a5      	bne.n	b7d5c <loop+0xb0c>
          valor = makeEvaluate(bloques[0]);
   b7e10:	4caa      	ldr	r4, [pc, #680]	; (b80bc <loop+0xe6c>)
   b7e12:	f44f 7237 	mov.w	r2, #732	; 0x2dc
   b7e16:	f104 0110 	add.w	r1, r4, #16
   b7e1a:	4668      	mov	r0, sp
   b7e1c:	f003 fe42 	bl	bbaa4 <memcpy>
   b7e20:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   b7e24:	f7fd fe9e 	bl	b5b64 <_Z12makeEvaluate6BLOQUE>
   b7e28:	4ca5      	ldr	r4, [pc, #660]	; (b80c0 <loop+0xe70>)
          if (play){
   b7e2a:	782b      	ldrb	r3, [r5, #0]
          valor = makeEvaluate(bloques[0]);
   b7e2c:	7020      	strb	r0, [r4, #0]
          if (play){
   b7e2e:	b113      	cbz	r3, b7e36 <loop+0xbe6>
          ejecutarEvaluacion(valor, 0);}
   b7e30:	2100      	movs	r1, #0
   b7e32:	f7fe f9f5 	bl	b6220 <_Z18ejecutarEvaluacionbi>
          valor ? snprintf(buf, sizeof(buf), "BLOQUE 1: TRUE") : snprintf(buf, sizeof(buf), "BLOQUE 1: FALSE");
   b7e36:	7823      	ldrb	r3, [r4, #0]
   b7e38:	2b00      	cmp	r3, #0
   b7e3a:	d039      	beq.n	b7eb0 <loop+0xc60>
   b7e3c:	49a1      	ldr	r1, [pc, #644]	; (b80c4 <loop+0xe74>)
   b7e3e:	48a2      	ldr	r0, [pc, #648]	; (b80c8 <loop+0xe78>)
   b7e40:	f003 fe84 	bl	bbb4c <strcpy>
          display.println(buf);
   b7e44:	49a0      	ldr	r1, [pc, #640]	; (b80c8 <loop+0xe78>)
   b7e46:	48a1      	ldr	r0, [pc, #644]	; (b80cc <loop+0xe7c>)
   b7e48:	f003 f88f 	bl	baf6a <_ZN5Print7printlnEPKc>
        if ( numBloque==1 && bloques[1].numActuadores>0 ) {
   b7e4c:	6836      	ldr	r6, [r6, #0]
   b7e4e:	2e01      	cmp	r6, #1
   b7e50:	d11f      	bne.n	b7e92 <loop+0xc42>
   b7e52:	4c9a      	ldr	r4, [pc, #616]	; (b80bc <loop+0xe6c>)
   b7e54:	f8d4 3430 	ldr.w	r3, [r4, #1072]	; 0x430
   b7e58:	2b00      	cmp	r3, #0
   b7e5a:	dd2d      	ble.n	b7eb8 <loop+0xc68>
          valor = makeEvaluate(bloques[1]);
   b7e5c:	f504 713f 	add.w	r1, r4, #764	; 0x2fc
   b7e60:	f44f 7237 	mov.w	r2, #732	; 0x2dc
   b7e64:	4668      	mov	r0, sp
   b7e66:	f003 fe1d 	bl	bbaa4 <memcpy>
   b7e6a:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
   b7e6e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   b7e70:	f7fd fe78 	bl	b5b64 <_Z12makeEvaluate6BLOQUE>
   b7e74:	4c92      	ldr	r4, [pc, #584]	; (b80c0 <loop+0xe70>)
          ejecutarEvaluacion(valor, 1);
   b7e76:	4631      	mov	r1, r6
          valor = makeEvaluate(bloques[1]);
   b7e78:	7020      	strb	r0, [r4, #0]
          ejecutarEvaluacion(valor, 1);
   b7e7a:	f7fe f9d1 	bl	b6220 <_Z18ejecutarEvaluacionbi>
          valor ? snprintf(buf, sizeof(buf), "BLOQUE 2: TRUE") : snprintf(buf, sizeof(buf), "BLOQUE 2: FALSE");
   b7e7e:	7823      	ldrb	r3, [r4, #0]
   b7e80:	b1c3      	cbz	r3, b7eb4 <loop+0xc64>
   b7e82:	4993      	ldr	r1, [pc, #588]	; (b80d0 <loop+0xe80>)
          snprintf(buf, sizeof(buf), "BLOQUE 2:   no finalizado");
   b7e84:	4890      	ldr	r0, [pc, #576]	; (b80c8 <loop+0xe78>)
   b7e86:	f003 fe61 	bl	bbb4c <strcpy>
          display.print(buf);
   b7e8a:	498f      	ldr	r1, [pc, #572]	; (b80c8 <loop+0xe78>)
   b7e8c:	488f      	ldr	r0, [pc, #572]	; (b80cc <loop+0xe7c>)
   b7e8e:	f003 f859 	bl	baf44 <_ZN5Print5printEPKc>
      display.display();
   b7e92:	4c8e      	ldr	r4, [pc, #568]	; (b80cc <loop+0xe7c>)
   b7e94:	4620      	mov	r0, r4
   b7e96:	f002 f9d9 	bl	ba24c <_ZN16Adafruit_SSD13067displayEv>
      display.clearDisplay();
   b7e9a:	4620      	mov	r0, r4
   b7e9c:	f001 ff6e 	bl	b9d7c <_ZN16Adafruit_SSD130612clearDisplayEv>
   b7ea0:	2300      	movs	r3, #0
   b7ea2:	6123      	str	r3, [r4, #16]
    if (!play){
   b7ea4:	782b      	ldrb	r3, [r5, #0]
   b7ea6:	2b00      	cmp	r3, #0
   b7ea8:	f47f abde 	bne.w	b7668 <loop+0x418>
   b7eac:	f7ff bbfb 	b.w	b76a6 <loop+0x456>
          valor ? snprintf(buf, sizeof(buf), "BLOQUE 1: TRUE") : snprintf(buf, sizeof(buf), "BLOQUE 1: FALSE");
   b7eb0:	4988      	ldr	r1, [pc, #544]	; (b80d4 <loop+0xe84>)
   b7eb2:	e7c4      	b.n	b7e3e <loop+0xbee>
          valor ? snprintf(buf, sizeof(buf), "BLOQUE 2: TRUE") : snprintf(buf, sizeof(buf), "BLOQUE 2: FALSE");
   b7eb4:	4988      	ldr	r1, [pc, #544]	; (b80d8 <loop+0xe88>)
   b7eb6:	e7e5      	b.n	b7e84 <loop+0xc34>
          snprintf(buf, sizeof(buf), "BLOQUE 2:   no finalizado");
   b7eb8:	4988      	ldr	r1, [pc, #544]	; (b80dc <loop+0xe8c>)
   b7eba:	e7e3      	b.n	b7e84 <loop+0xc34>
  } else if (MODE == 2) {
   b7ebc:	2f02      	cmp	r7, #2
   b7ebe:	f040 819f 	bne.w	b8200 <loop+0xfb0>
    switch (tagInfo[0])
   b7ec2:	2e02      	cmp	r6, #2
   b7ec4:	d038      	beq.n	b7f38 <loop+0xce8>
   b7ec6:	2e06      	cmp	r6, #6
   b7ec8:	f040 818a 	bne.w	b81e0 <loop+0xf90>
      switch (tagInfo[1])
   b7ecc:	6860      	ldr	r0, [r4, #4]
   b7ece:	2801      	cmp	r0, #1
   b7ed0:	d015      	beq.n	b7efe <loop+0xcae>
   b7ed2:	2802      	cmp	r0, #2
   b7ed4:	d021      	beq.n	b7f1a <loop+0xcca>
   b7ed6:	b928      	cbnz	r0, b7ee4 <loop+0xc94>
          cambioModo(tagInfo[2]);
   b7ed8:	68a0      	ldr	r0, [r4, #8]
   b7eda:	f7ff f917 	bl	b710c <_Z10cambioModoi>
          resetFunc();
   b7ede:	4b80      	ldr	r3, [pc, #512]	; (b80e0 <loop+0xe90>)
   b7ee0:	681b      	ldr	r3, [r3, #0]
   b7ee2:	4798      	blx	r3
    tagInfo[0] = -1;
   b7ee4:	f04f 33ff 	mov.w	r3, #4294967295
   b7ee8:	6023      	str	r3, [r4, #0]
    if (play) {
   b7eea:	782b      	ldrb	r3, [r5, #0]
   b7eec:	2b00      	cmp	r3, #0
   b7eee:	f43f abbb 	beq.w	b7668 <loop+0x418>
      reproducir();
   b7ef2:	f7ff f8bd 	bl	b7070 <_Z10reproducirv>
      play = false;
   b7ef6:	2300      	movs	r3, #0
   b7ef8:	702b      	strb	r3, [r5, #0]
   b7efa:	f7ff bbb5 	b.w	b7668 <loop+0x418>
          showBitmap(3,0,"Ejecutando...");   
   b7efe:	4979      	ldr	r1, [pc, #484]	; (b80e4 <loop+0xe94>)
          play = true;
   b7f00:	7028      	strb	r0, [r5, #0]
            showBitmap(3,0,"Borrado completo realizado");
   b7f02:	a8c0      	add	r0, sp, #768	; 0x300
   b7f04:	f002 ff3d 	bl	bad82 <_ZN6StringC1EPK19__FlashStringHelper>
   b7f08:	aac0      	add	r2, sp, #768	; 0x300
   b7f0a:	2100      	movs	r1, #0
   b7f0c:	2003      	movs	r0, #3
        showBitmap(2,0,"");
   b7f0e:	f7fe fe5b 	bl	b6bc8 <_Z10showBitmapii6String>
   b7f12:	a8c0      	add	r0, sp, #768	; 0x300
   b7f14:	f002 feea 	bl	bacec <_ZN6StringD1Ev>
   b7f18:	e7e4      	b.n	b7ee4 <loop+0xc94>
          if ( tagInfo[2] == 0 ) {
   b7f1a:	68a6      	ldr	r6, [r4, #8]
   b7f1c:	b91e      	cbnz	r6, b7f26 <loop+0xcd6>
            borradoPOP();
   b7f1e:	f7fd fca3 	bl	b5868 <_Z10borradoPOPv>
            showBitmap(3,0,"Borrada ultima lectura");
   b7f22:	4971      	ldr	r1, [pc, #452]	; (b80e8 <loop+0xe98>)
   b7f24:	e7ed      	b.n	b7f02 <loop+0xcb2>
          } else if ( tagInfo[2] == 1 ){
   b7f26:	2e01      	cmp	r6, #1
   b7f28:	d103      	bne.n	b7f32 <loop+0xce2>
            borradoALL(2);
   b7f2a:	f7fd fc73 	bl	b5814 <_Z10borradoALLi>
            showBitmap(3,0,"Borrado completo realizado");
   b7f2e:	496f      	ldr	r1, [pc, #444]	; (b80ec <loop+0xe9c>)
   b7f30:	e7e7      	b.n	b7f02 <loop+0xcb2>
            borradoBLOQUE(2);
   b7f32:	f7fe fff1 	bl	b6f18 <_Z13borradoBLOQUEi>
   b7f36:	e7d5      	b.n	b7ee4 <loop+0xc94>
      switch (tagInfo[1])
   b7f38:	6863      	ldr	r3, [r4, #4]
   b7f3a:	2b01      	cmp	r3, #1
   b7f3c:	d078      	beq.n	b8030 <loop+0xde0>
   b7f3e:	2b02      	cmp	r3, #2
   b7f40:	f000 80ee 	beq.w	b8120 <loop+0xed0>
   b7f44:	2b00      	cmp	r3, #0
   b7f46:	d1cd      	bne.n	b7ee4 <loop+0xc94>
        secuencia[posicion] = decodificarNOTA_msg(tagInfo[2])+decodificarTIPO_msg(tagInfo[3])+" - ";
   b7f48:	68a1      	ldr	r1, [r4, #8]
   b7f4a:	4e69      	ldr	r6, [pc, #420]	; (b80f0 <loop+0xea0>)
   b7f4c:	4f69      	ldr	r7, [pc, #420]	; (b80f4 <loop+0xea4>)
   b7f4e:	a8b8      	add	r0, sp, #736	; 0x2e0
   b7f50:	f7fd fcfa 	bl	b5948 <_Z19decodificarNOTA_msgi>
	StringSumHelper(const String &s) : String(s) {}
   b7f54:	a9b8      	add	r1, sp, #736	; 0x2e0
   b7f56:	a8c0      	add	r0, sp, #768	; 0x300
   b7f58:	f002 ff53 	bl	bae02 <_ZN6StringC1ERKS_>
   b7f5c:	68e1      	ldr	r1, [r4, #12]
   b7f5e:	a8bc      	add	r0, sp, #752	; 0x2f0
   b7f60:	f7fd fd24 	bl	b59ac <_Z19decodificarTIPO_msgi>
   b7f64:	a9bc      	add	r1, sp, #752	; 0x2f0
   b7f66:	a8c0      	add	r0, sp, #768	; 0x300
   b7f68:	f002 ff9a 	bl	baea0 <_ZplRK15StringSumHelperRK6String>
   b7f6c:	4962      	ldr	r1, [pc, #392]	; (b80f8 <loop+0xea8>)
   b7f6e:	f002 ffa3 	bl	baeb8 <_ZplRK15StringSumHelperPKc>
   b7f72:	4601      	mov	r1, r0
   b7f74:	6830      	ldr	r0, [r6, #0]
   b7f76:	eb07 1000 	add.w	r0, r7, r0, lsl #4
   b7f7a:	f002 ff33 	bl	bade4 <_ZN6StringaSERKS_>
   b7f7e:	a8bc      	add	r0, sp, #752	; 0x2f0
   b7f80:	f002 feb4 	bl	bacec <_ZN6StringD1Ev>
class StringSumHelper : public String
   b7f84:	a8c0      	add	r0, sp, #768	; 0x300
   b7f86:	f002 feb1 	bl	bacec <_ZN6StringD1Ev>
   b7f8a:	a8b8      	add	r0, sp, #736	; 0x2e0
   b7f8c:	f002 feae 	bl	bacec <_ZN6StringD1Ev>
        if (posicion<23) {
   b7f90:	6833      	ldr	r3, [r6, #0]
   b7f92:	2b16      	cmp	r3, #22
   b7f94:	dc45      	bgt.n	b8022 <loop+0xdd2>
	const char * c_str() const { return buffer; }
   b7f96:	011b      	lsls	r3, r3, #4
          snprintf(buf, sizeof(buf), secuencia[posicion]);
   b7f98:	484b      	ldr	r0, [pc, #300]	; (b80c8 <loop+0xe78>)
   b7f9a:	58fa      	ldr	r2, [r7, r3]
   b7f9c:	2140      	movs	r1, #64	; 0x40
   b7f9e:	f002 fd2f 	bl	baa00 <snprintf>
          display.print(buf);
   b7fa2:	4949      	ldr	r1, [pc, #292]	; (b80c8 <loop+0xe78>)
   b7fa4:	4849      	ldr	r0, [pc, #292]	; (b80cc <loop+0xe7c>)
   b7fa6:	f002 ffcd 	bl	baf44 <_ZN5Print5printEPKc>
          display.display();
   b7faa:	4848      	ldr	r0, [pc, #288]	; (b80cc <loop+0xe7c>)
   b7fac:	f002 f94e 	bl	ba24c <_ZN16Adafruit_SSD13067displayEv>
        Serial.printlnf(decodificarNOTA_msg(tagInfo[2])+decodificarTIPO_msg(tagInfo[3]));
   b7fb0:	f003 fa2a 	bl	bb408 <_Z16_fetch_usbserialv>
   b7fb4:	68a1      	ldr	r1, [r4, #8]
   b7fb6:	4607      	mov	r7, r0
   b7fb8:	a8b8      	add	r0, sp, #736	; 0x2e0
   b7fba:	f7fd fcc5 	bl	b5948 <_Z19decodificarNOTA_msgi>
	StringSumHelper(const String &s) : String(s) {}
   b7fbe:	a9b8      	add	r1, sp, #736	; 0x2e0
   b7fc0:	a8c0      	add	r0, sp, #768	; 0x300
   b7fc2:	f002 ff1e 	bl	bae02 <_ZN6StringC1ERKS_>
   b7fc6:	68e1      	ldr	r1, [r4, #12]
   b7fc8:	a8bc      	add	r0, sp, #752	; 0x2f0
   b7fca:	f7fd fcef 	bl	b59ac <_Z19decodificarTIPO_msgi>
   b7fce:	a9bc      	add	r1, sp, #752	; 0x2f0
   b7fd0:	a8c0      	add	r0, sp, #768	; 0x300
   b7fd2:	f002 ff65 	bl	baea0 <_ZplRK15StringSumHelperRK6String>
   b7fd6:	6801      	ldr	r1, [r0, #0]
   b7fd8:	4638      	mov	r0, r7
   b7fda:	f7fc fd93 	bl	b4b04 <_ZN5Print8printlnfEPKcz>
   b7fde:	a8bc      	add	r0, sp, #752	; 0x2f0
   b7fe0:	f002 fe84 	bl	bacec <_ZN6StringD1Ev>
class StringSumHelper : public String
   b7fe4:	a8c0      	add	r0, sp, #768	; 0x300
   b7fe6:	f002 fe81 	bl	bacec <_ZN6StringD1Ev>
   b7fea:	a8b8      	add	r0, sp, #736	; 0x2e0
   b7fec:	f002 fe7e 	bl	bacec <_ZN6StringD1Ev>
        reproducirNOTA(tagInfo[2], tagInfo[3]);
   b7ff0:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
   b7ff4:	f7fd fcf4 	bl	b59e0 <_Z14reproducirNOTAii>
        notas[posicion] = tagInfo[2];
   b7ff8:	6833      	ldr	r3, [r6, #0]
   b7ffa:	4a40      	ldr	r2, [pc, #256]	; (b80fc <loop+0xeac>)
   b7ffc:	68a1      	ldr	r1, [r4, #8]
   b7ffe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        duraciones[posicion] = tagInfo[3];
   b8002:	4a3f      	ldr	r2, [pc, #252]	; (b8100 <loop+0xeb0>)
   b8004:	68e1      	ldr	r1, [r4, #12]
   b8006:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        posicion++;
   b800a:	3301      	adds	r3, #1
   b800c:	6033      	str	r3, [r6, #0]
        if (bucle) {
   b800e:	4b3d      	ldr	r3, [pc, #244]	; (b8104 <loop+0xeb4>)
   b8010:	781b      	ldrb	r3, [r3, #0]
   b8012:	2b00      	cmp	r3, #0
   b8014:	f43f af66 	beq.w	b7ee4 <loop+0xc94>
          tam_bucle++;
   b8018:	4a3b      	ldr	r2, [pc, #236]	; (b8108 <loop+0xeb8>)
   b801a:	6813      	ldr	r3, [r2, #0]
   b801c:	3301      	adds	r3, #1
   b801e:	6013      	str	r3, [r2, #0]
   b8020:	e760      	b.n	b7ee4 <loop+0xc94>
        } else if (posicion==23){
   b8022:	2b17      	cmp	r3, #23
   b8024:	d1c4      	bne.n	b7fb0 <loop+0xd60>
          snprintf(buf, sizeof(buf), "...");
   b8026:	4939      	ldr	r1, [pc, #228]	; (b810c <loop+0xebc>)
   b8028:	4827      	ldr	r0, [pc, #156]	; (b80c8 <loop+0xe78>)
   b802a:	f003 fd8f 	bl	bbb4c <strcpy>
   b802e:	e7b8      	b.n	b7fa2 <loop+0xd52>
        if (!bucle) {
   b8030:	4f34      	ldr	r7, [pc, #208]	; (b8104 <loop+0xeb4>)
   b8032:	783b      	ldrb	r3, [r7, #0]
   b8034:	2b00      	cmp	r3, #0
   b8036:	d134      	bne.n	b80a2 <loop+0xe52>
          secuencia[posicion] = "Loop - ";
   b8038:	4e2d      	ldr	r6, [pc, #180]	; (b80f0 <loop+0xea0>)
   b803a:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b80f4 <loop+0xea4>
          Serial.println("Loop");
   b803e:	f003 f9e3 	bl	bb408 <_Z16_fetch_usbserialv>
   b8042:	4933      	ldr	r1, [pc, #204]	; (b8110 <loop+0xec0>)
   b8044:	f002 ff91 	bl	baf6a <_ZN5Print7printlnEPKc>
          secuencia[posicion] = "Loop - ";
   b8048:	6830      	ldr	r0, [r6, #0]
   b804a:	4932      	ldr	r1, [pc, #200]	; (b8114 <loop+0xec4>)
   b804c:	eb08 1000 	add.w	r0, r8, r0, lsl #4
   b8050:	f002 feea 	bl	bae28 <_ZN6StringaSEPKc>
          if (posicion<23) {
   b8054:	6833      	ldr	r3, [r6, #0]
   b8056:	2b16      	cmp	r3, #22
   b8058:	dc1c      	bgt.n	b8094 <loop+0xe44>
	const char * c_str() const { return buffer; }
   b805a:	011b      	lsls	r3, r3, #4
            snprintf(buf, sizeof(buf), secuencia[posicion]);
   b805c:	481a      	ldr	r0, [pc, #104]	; (b80c8 <loop+0xe78>)
   b805e:	f858 2003 	ldr.w	r2, [r8, r3]
   b8062:	2140      	movs	r1, #64	; 0x40
   b8064:	f002 fccc 	bl	baa00 <snprintf>
            display.print(buf);
   b8068:	4917      	ldr	r1, [pc, #92]	; (b80c8 <loop+0xe78>)
   b806a:	4818      	ldr	r0, [pc, #96]	; (b80cc <loop+0xe7c>)
   b806c:	f002 ff6a 	bl	baf44 <_ZN5Print5printEPKc>
            display.display();
   b8070:	4816      	ldr	r0, [pc, #88]	; (b80cc <loop+0xe7c>)
   b8072:	f002 f8eb 	bl	ba24c <_ZN16Adafruit_SSD13067displayEv>
          notas[posicion] = -1;
   b8076:	6833      	ldr	r3, [r6, #0]
   b8078:	4a20      	ldr	r2, [pc, #128]	; (b80fc <loop+0xeac>)
   b807a:	f04f 31ff 	mov.w	r1, #4294967295
   b807e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
          duraciones[posicion] = 0;
   b8082:	4a1f      	ldr	r2, [pc, #124]	; (b8100 <loop+0xeb0>)
   b8084:	2100      	movs	r1, #0
   b8086:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
          posicion++;
   b808a:	3301      	adds	r3, #1
   b808c:	6033      	str	r3, [r6, #0]
          bucle = true;
   b808e:	2301      	movs	r3, #1
   b8090:	703b      	strb	r3, [r7, #0]
   b8092:	e727      	b.n	b7ee4 <loop+0xc94>
          } else if (posicion==23){
   b8094:	2b17      	cmp	r3, #23
   b8096:	d1ee      	bne.n	b8076 <loop+0xe26>
            snprintf(buf, sizeof(buf), "...");
   b8098:	491c      	ldr	r1, [pc, #112]	; (b810c <loop+0xebc>)
   b809a:	480b      	ldr	r0, [pc, #44]	; (b80c8 <loop+0xe78>)
   b809c:	f003 fd56 	bl	bbb4c <strcpy>
   b80a0:	e7e2      	b.n	b8068 <loop+0xe18>
          Serial.println("Para comenzar un loop hay que finalizar el anterior.");
   b80a2:	f003 f9b1 	bl	bb408 <_Z16_fetch_usbserialv>
   b80a6:	491c      	ldr	r1, [pc, #112]	; (b8118 <loop+0xec8>)
          Serial.println("Loop sin comenzar o sin contenido");
   b80a8:	f002 ff5f 	bl	baf6a <_ZN5Print7printlnEPKc>
          showBitmap(2,2,"");
   b80ac:	491b      	ldr	r1, [pc, #108]	; (b811c <loop+0xecc>)
   b80ae:	a8c0      	add	r0, sp, #768	; 0x300
   b80b0:	f002 fe67 	bl	bad82 <_ZN6StringC1EPK19__FlashStringHelper>
   b80b4:	2102      	movs	r1, #2
   b80b6:	aac0      	add	r2, sp, #768	; 0x300
   b80b8:	4608      	mov	r0, r1
   b80ba:	e728      	b.n	b7f0e <loop+0xcbe>
   b80bc:	2003cd14 	.word	0x2003cd14
   b80c0:	2003e6b8 	.word	0x2003e6b8
   b80c4:	000bc8d4 	.word	0x000bc8d4
   b80c8:	2003d2ed 	.word	0x2003d2ed
   b80cc:	2003d338 	.word	0x2003d338
   b80d0:	000bc904 	.word	0x000bc904
   b80d4:	000bc8e3 	.word	0x000bc8e3
   b80d8:	000bc913 	.word	0x000bc913
   b80dc:	000bc923 	.word	0x000bc923
   b80e0:	2003da3c 	.word	0x2003da3c
   b80e4:	000bc93d 	.word	0x000bc93d
   b80e8:	000bc94b 	.word	0x000bc94b
   b80ec:	000bc654 	.word	0x000bc654
   b80f0:	2003da28 	.word	0x2003da28
   b80f4:	2003da4c 	.word	0x2003da4c
   b80f8:	000bc9ab 	.word	0x000bc9ab
   b80fc:	2003d6f8 	.word	0x2003d6f8
   b8100:	2003d3a8 	.word	0x2003d3a8
   b8104:	2003d2ec 	.word	0x2003d2ec
   b8108:	2003dc34 	.word	0x2003dc34
   b810c:	000bc5e5 	.word	0x000bc5e5
   b8110:	000bc9a3 	.word	0x000bc9a3
   b8114:	000bc962 	.word	0x000bc962
   b8118:	000bc96a 	.word	0x000bc96a
   b811c:	000bc0fa 	.word	0x000bc0fa
        if (bucle && tam_bucle>0) {
   b8120:	4fa2      	ldr	r7, [pc, #648]	; (b83ac <loop+0x115c>)
   b8122:	783b      	ldrb	r3, [r7, #0]
   b8124:	2b00      	cmp	r3, #0
   b8126:	d057      	beq.n	b81d8 <loop+0xf88>
   b8128:	f8df 82f0 	ldr.w	r8, [pc, #752]	; b841c <loop+0x11cc>
   b812c:	f8d8 3000 	ldr.w	r3, [r8]
   b8130:	2b00      	cmp	r3, #0
   b8132:	dd51      	ble.n	b81d8 <loop+0xf88>
          Serial.println("END Loop");
   b8134:	f003 f968 	bl	bb408 <_Z16_fetch_usbserialv>
   b8138:	499d      	ldr	r1, [pc, #628]	; (b83b0 <loop+0x1160>)
          secuencia[posicion] = String(tagInfo[2]+2)+"rep - ";
   b813a:	4e9e      	ldr	r6, [pc, #632]	; (b83b4 <loop+0x1164>)
   b813c:	f8df 92e0 	ldr.w	r9, [pc, #736]	; b8420 <loop+0x11d0>
          Serial.println("END Loop");
   b8140:	f002 ff13 	bl	baf6a <_ZN5Print7printlnEPKc>
          secuencia[posicion] = String(tagInfo[2]+2)+"rep - ";
   b8144:	68a1      	ldr	r1, [r4, #8]
   b8146:	220a      	movs	r2, #10
   b8148:	3102      	adds	r1, #2
   b814a:	a8bc      	add	r0, sp, #752	; 0x2f0
   b814c:	f002 fe7e 	bl	bae4c <_ZN6StringC1Eih>
	StringSumHelper(const String &s) : String(s) {}
   b8150:	a9bc      	add	r1, sp, #752	; 0x2f0
   b8152:	a8c0      	add	r0, sp, #768	; 0x300
   b8154:	f002 fe55 	bl	bae02 <_ZN6StringC1ERKS_>
   b8158:	4997      	ldr	r1, [pc, #604]	; (b83b8 <loop+0x1168>)
   b815a:	a8c0      	add	r0, sp, #768	; 0x300
   b815c:	f002 feac 	bl	baeb8 <_ZplRK15StringSumHelperPKc>
   b8160:	4601      	mov	r1, r0
   b8162:	6830      	ldr	r0, [r6, #0]
   b8164:	eb09 1000 	add.w	r0, r9, r0, lsl #4
   b8168:	f002 fe3c 	bl	bade4 <_ZN6StringaSERKS_>
class StringSumHelper : public String
   b816c:	a8c0      	add	r0, sp, #768	; 0x300
   b816e:	f002 fdbd 	bl	bacec <_ZN6StringD1Ev>
   b8172:	a8bc      	add	r0, sp, #752	; 0x2f0
   b8174:	f002 fdba 	bl	bacec <_ZN6StringD1Ev>
          if (posicion<23) {
   b8178:	6833      	ldr	r3, [r6, #0]
   b817a:	2b16      	cmp	r3, #22
   b817c:	dc25      	bgt.n	b81ca <loop+0xf7a>
	const char * c_str() const { return buffer; }
   b817e:	011b      	lsls	r3, r3, #4
            snprintf(buf, sizeof(buf), secuencia[posicion]);
   b8180:	488e      	ldr	r0, [pc, #568]	; (b83bc <loop+0x116c>)
   b8182:	f859 2003 	ldr.w	r2, [r9, r3]
   b8186:	2140      	movs	r1, #64	; 0x40
   b8188:	f002 fc3a 	bl	baa00 <snprintf>
            display.print(buf);
   b818c:	498b      	ldr	r1, [pc, #556]	; (b83bc <loop+0x116c>)
   b818e:	488c      	ldr	r0, [pc, #560]	; (b83c0 <loop+0x1170>)
   b8190:	f002 fed8 	bl	baf44 <_ZN5Print5printEPKc>
            display.display();
   b8194:	488a      	ldr	r0, [pc, #552]	; (b83c0 <loop+0x1170>)
   b8196:	f002 f859 	bl	ba24c <_ZN16Adafruit_SSD13067displayEv>
          notas[posicion] = -2;
   b819a:	6833      	ldr	r3, [r6, #0]
   b819c:	4a89      	ldr	r2, [pc, #548]	; (b83c4 <loop+0x1174>)
          duraciones[posicion] = tam_bucle; // Almacenamos el tamaño del bucle en la posicion donde acaba
   b819e:	488a      	ldr	r0, [pc, #552]	; (b83c8 <loop+0x1178>)
          notas[posicion] = -2;
   b81a0:	f06f 0101 	mvn.w	r1, #1
   b81a4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
          duraciones[posicion] = tam_bucle; // Almacenamos el tamaño del bucle en la posicion donde acaba
   b81a8:	f8d8 2000 	ldr.w	r2, [r8]
   b81ac:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
          duraciones[posicion - (tam_bucle+1)] = tagInfo[2]+2; // Almacenamos el num de iteraciones en la posicion de inicio del bucle
   b81b0:	68a1      	ldr	r1, [r4, #8]
   b81b2:	3201      	adds	r2, #1
   b81b4:	1a9a      	subs	r2, r3, r2
          posicion++;
   b81b6:	3301      	adds	r3, #1
          duraciones[posicion - (tam_bucle+1)] = tagInfo[2]+2; // Almacenamos el num de iteraciones en la posicion de inicio del bucle
   b81b8:	3102      	adds	r1, #2
          posicion++;
   b81ba:	6033      	str	r3, [r6, #0]
          bucle = false;
   b81bc:	2300      	movs	r3, #0
          duraciones[posicion - (tam_bucle+1)] = tagInfo[2]+2; // Almacenamos el num de iteraciones en la posicion de inicio del bucle
   b81be:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
          bucle = false;
   b81c2:	703b      	strb	r3, [r7, #0]
          tam_bucle = 0;
   b81c4:	f8c8 3000 	str.w	r3, [r8]
   b81c8:	e68c      	b.n	b7ee4 <loop+0xc94>
          } else if (posicion==23){
   b81ca:	2b17      	cmp	r3, #23
   b81cc:	d1e5      	bne.n	b819a <loop+0xf4a>
            snprintf(buf, sizeof(buf), "...");
   b81ce:	497f      	ldr	r1, [pc, #508]	; (b83cc <loop+0x117c>)
   b81d0:	487a      	ldr	r0, [pc, #488]	; (b83bc <loop+0x116c>)
   b81d2:	f003 fcbb 	bl	bbb4c <strcpy>
   b81d6:	e7d9      	b.n	b818c <loop+0xf3c>
          Serial.println("Loop sin comenzar o sin contenido");
   b81d8:	f003 f916 	bl	bb408 <_Z16_fetch_usbserialv>
   b81dc:	497c      	ldr	r1, [pc, #496]	; (b83d0 <loop+0x1180>)
   b81de:	e763      	b.n	b80a8 <loop+0xe58>
      if ( tagInfo[0] != -1 ) {
   b81e0:	3601      	adds	r6, #1
   b81e2:	f43f ae7f 	beq.w	b7ee4 <loop+0xc94>
        Serial.println("Tarjeta inválida para este modo");
   b81e6:	f003 f90f 	bl	bb408 <_Z16_fetch_usbserialv>
   b81ea:	497a      	ldr	r1, [pc, #488]	; (b83d4 <loop+0x1184>)
   b81ec:	f002 febd 	bl	baf6a <_ZN5Print7printlnEPKc>
        showBitmap(2,0,"");
   b81f0:	4979      	ldr	r1, [pc, #484]	; (b83d8 <loop+0x1188>)
   b81f2:	a8c0      	add	r0, sp, #768	; 0x300
   b81f4:	f002 fdc5 	bl	bad82 <_ZN6StringC1EPK19__FlashStringHelper>
   b81f8:	aac0      	add	r2, sp, #768	; 0x300
   b81fa:	2100      	movs	r1, #0
   b81fc:	4638      	mov	r0, r7
   b81fe:	e686      	b.n	b7f0e <loop+0xcbe>
    switch (tagInfo[0])
   b8200:	2e03      	cmp	r6, #3
   b8202:	4f76      	ldr	r7, [pc, #472]	; (b83dc <loop+0x118c>)
   b8204:	d058      	beq.n	b82b8 <loop+0x1068>
   b8206:	2e06      	cmp	r6, #6
   b8208:	f040 8089 	bne.w	b831e <loop+0x10ce>
   b820c:	f7fd f968 	bl	b54e0 <_Z12pitidoBlink0v>
        switch (tagInfo[1])
   b8210:	6866      	ldr	r6, [r4, #4]
   b8212:	2e01      	cmp	r6, #1
   b8214:	d029      	beq.n	b826a <loop+0x101a>
   b8216:	2e02      	cmp	r6, #2
   b8218:	d029      	beq.n	b826e <loop+0x101e>
   b821a:	b92e      	cbnz	r6, b8228 <loop+0xfd8>
            cambioModo(tagInfo[2]);
   b821c:	68a0      	ldr	r0, [r4, #8]
   b821e:	f7fe ff75 	bl	b710c <_Z10cambioModoi>
            resetFunc();
   b8222:	4b6f      	ldr	r3, [pc, #444]	; (b83e0 <loop+0x1190>)
   b8224:	681b      	ldr	r3, [r3, #0]
   b8226:	4798      	blx	r3
    if (tagInfo[0]!=-1) { 
   b8228:	6823      	ldr	r3, [r4, #0]
    if ( numSensoresBloque > 0 &&  play == true) {
   b822a:	683e      	ldr	r6, [r7, #0]
    if (tagInfo[0]!=-1) { 
   b822c:	3301      	adds	r3, #1
      tagInfo[0]=-1;
   b822e:	bf1c      	itt	ne
   b8230:	f04f 33ff 	movne.w	r3, #4294967295
   b8234:	6023      	strne	r3, [r4, #0]
    if ( numSensoresBloque > 0 &&  play == true) {
   b8236:	2e00      	cmp	r6, #0
   b8238:	f340 80fe 	ble.w	b8438 <loop+0x11e8>
   b823c:	782b      	ldrb	r3, [r5, #0]
   b823e:	2b00      	cmp	r3, #0
   b8240:	f43f aa12 	beq.w	b7668 <loop+0x418>
          val = leerSensorExp(bloques[0].sensores[0].id, bloques[0].sensores[0].puerto);
   b8244:	4b67      	ldr	r3, [pc, #412]	; (b83e4 <loop+0x1194>)
   b8246:	4d68      	ldr	r5, [pc, #416]	; (b83e8 <loop+0x1198>)
   b8248:	6919      	ldr	r1, [r3, #16]
   b824a:	6858      	ldr	r0, [r3, #4]
   b824c:	f7fd f85c 	bl	b5308 <_Z13leerSensorExpii>
   b8250:	68e3      	ldr	r3, [r4, #12]
   b8252:	6028      	str	r0, [r5, #0]
          switch (tagInfo[3])
   b8254:	3b02      	subs	r3, #2
   b8256:	2b0a      	cmp	r3, #10
   b8258:	d87c      	bhi.n	b8354 <loop+0x1104>
   b825a:	e8df f003 	tbb	[pc, r3]
   b825e:	6f6a      	.short	0x6f6a
   b8260:	9f73717b 	.word	0x9f73717b
   b8264:	7b7b7b7b 	.word	0x7b7b7b7b
   b8268:	a1          	.byte	0xa1
   b8269:	00          	.byte	0x00
            play = true;
   b826a:	702e      	strb	r6, [r5, #0]
            break;
   b826c:	e7dc      	b.n	b8228 <loop+0xfd8>
            if ( tagInfo[2] == 1 ) {
   b826e:	68a3      	ldr	r3, [r4, #8]
   b8270:	2b01      	cmp	r3, #1
   b8272:	d10f      	bne.n	b8294 <loop+0x1044>
              borradoALL(0);
   b8274:	2000      	movs	r0, #0
   b8276:	f7fd facd 	bl	b5814 <_Z10borradoALLi>
              showBitmap(3,0,"Borrado completo realizado");
   b827a:	495c      	ldr	r1, [pc, #368]	; (b83ec <loop+0x119c>)
   b827c:	a8c0      	add	r0, sp, #768	; 0x300
   b827e:	f002 fd80 	bl	bad82 <_ZN6StringC1EPK19__FlashStringHelper>
   b8282:	aac0      	add	r2, sp, #768	; 0x300
   b8284:	2100      	movs	r1, #0
   b8286:	2003      	movs	r0, #3
          showBitmap(2,0,"");
   b8288:	f7fe fc9e 	bl	b6bc8 <_Z10showBitmapii6String>
   b828c:	a8c0      	add	r0, sp, #768	; 0x300
   b828e:	f002 fd2d 	bl	bacec <_ZN6StringD1Ev>
   b8292:	e7c9      	b.n	b8228 <loop+0xfd8>
              showBitmap(2,1,"");
   b8294:	4950      	ldr	r1, [pc, #320]	; (b83d8 <loop+0x1188>)
   b8296:	a8c0      	add	r0, sp, #768	; 0x300
   b8298:	f002 fd73 	bl	bad82 <_ZN6StringC1EPK19__FlashStringHelper>
   b829c:	aac0      	add	r2, sp, #768	; 0x300
   b829e:	2101      	movs	r1, #1
   b82a0:	4630      	mov	r0, r6
   b82a2:	f7fe fc91 	bl	b6bc8 <_Z10showBitmapii6String>
   b82a6:	a8c0      	add	r0, sp, #768	; 0x300
   b82a8:	f002 fd20 	bl	bacec <_ZN6StringD1Ev>
              Serial.println("Borrado no permitido para este modo");
   b82ac:	f003 f8ac 	bl	bb408 <_Z16_fetch_usbserialv>
   b82b0:	494f      	ldr	r1, [pc, #316]	; (b83f0 <loop+0x11a0>)
   b82b2:	f002 fe5a 	bl	baf6a <_ZN5Print7printlnEPKc>
   b82b6:	e7b7      	b.n	b8228 <loop+0xfd8>
        id = tagInfo[3];
   b82b8:	f8df a168 	ldr.w	sl, [pc, #360]	; b8424 <loop+0x11d4>
   b82bc:	68e3      	ldr	r3, [r4, #12]
        tipo = tagInfo[2];
   b82be:	f8df 9168 	ldr.w	r9, [pc, #360]	; b8428 <loop+0x11d8>
        if (tagInfo[1] == 0) {
   b82c2:	f8d4 8004 	ldr.w	r8, [r4, #4]
        id = tagInfo[3];
   b82c6:	f8ca 3000 	str.w	r3, [sl]
        tipo = tagInfo[2];
   b82ca:	68a3      	ldr	r3, [r4, #8]
   b82cc:	f8c9 3000 	str.w	r3, [r9]
        if (tagInfo[1] == 0) {
   b82d0:	f1b8 0f00 	cmp.w	r8, #0
   b82d4:	d1a8      	bne.n	b8228 <loop+0xfd8>
          Serial.println("Sensor detectado");
   b82d6:	f003 f897 	bl	bb408 <_Z16_fetch_usbserialv>
   b82da:	4946      	ldr	r1, [pc, #280]	; (b83f4 <loop+0x11a4>)
   b82dc:	f002 fe45 	bl	baf6a <_ZN5Print7printlnEPKc>
          bloques[0].sensores[0] = sensor;
   b82e0:	4a40      	ldr	r2, [pc, #256]	; (b83e4 <loop+0x1194>)
          tipo == 0 ? sensor.puerto = 0 : sensor.puerto = 2;
   b82e2:	f8d9 3000 	ldr.w	r3, [r9]
          sensor.id = id;
   b82e6:	f8da 1000 	ldr.w	r1, [sl]
          bloques[0].sensores[0] = sensor;
   b82ea:	6051      	str	r1, [r2, #4]
          bloques[0].numSensores++;
   b82ec:	6811      	ldr	r1, [r2, #0]
          tipo == 0 ? sensor.puerto = 0 : sensor.puerto = 2;
   b82ee:	2b00      	cmp	r3, #0
          bloques[0].numSensores++;
   b82f0:	f101 0101 	add.w	r1, r1, #1
          tipo == 0 ? sensor.puerto = 0 : sensor.puerto = 2;
   b82f4:	bf18      	it	ne
   b82f6:	2302      	movne	r3, #2
          bloques[0].numSensores++;
   b82f8:	6011      	str	r1, [r2, #0]
          bloques[0].sensores[0] = sensor;
   b82fa:	6113      	str	r3, [r2, #16]
          numSensoresBloque++;
   b82fc:	683a      	ldr	r2, [r7, #0]
            showBitmap(1,3,""); //A0
   b82fe:	4936      	ldr	r1, [pc, #216]	; (b83d8 <loop+0x1188>)
          numSensoresBloque++;
   b8300:	3201      	adds	r2, #1
   b8302:	603a      	str	r2, [r7, #0]
            showBitmap(1,3,""); //A0
   b8304:	a8c0      	add	r0, sp, #768	; 0x300
          if (sensor.puerto == 0) {
   b8306:	b92b      	cbnz	r3, b8314 <loop+0x10c4>
            showBitmap(1,3,""); //A0
   b8308:	f002 fd3b 	bl	bad82 <_ZN6StringC1EPK19__FlashStringHelper>
   b830c:	aac0      	add	r2, sp, #768	; 0x300
   b830e:	4631      	mov	r1, r6
            showBitmap(1,0,""); //D2
   b8310:	2001      	movs	r0, #1
   b8312:	e7b9      	b.n	b8288 <loop+0x1038>
   b8314:	f002 fd35 	bl	bad82 <_ZN6StringC1EPK19__FlashStringHelper>
   b8318:	aac0      	add	r2, sp, #768	; 0x300
   b831a:	4641      	mov	r1, r8
   b831c:	e7f8      	b.n	b8310 <loop+0x10c0>
        if ( tagInfo[0] != -1 ) {
   b831e:	3601      	adds	r6, #1
   b8320:	d082      	beq.n	b8228 <loop+0xfd8>
          showBitmap(2,0,"");
   b8322:	492d      	ldr	r1, [pc, #180]	; (b83d8 <loop+0x1188>)
   b8324:	a8c0      	add	r0, sp, #768	; 0x300
   b8326:	f002 fd2c 	bl	bad82 <_ZN6StringC1EPK19__FlashStringHelper>
   b832a:	aac0      	add	r2, sp, #768	; 0x300
   b832c:	2100      	movs	r1, #0
   b832e:	2002      	movs	r0, #2
   b8330:	e7aa      	b.n	b8288 <loop+0x1038>
              snprintf(buf, sizeof(buf), "         Luz:");
   b8332:	4931      	ldr	r1, [pc, #196]	; (b83f8 <loop+0x11a8>)
              snprintf(buf, sizeof(buf), "      Turbidez:");
   b8334:	4821      	ldr	r0, [pc, #132]	; (b83bc <loop+0x116c>)
   b8336:	f003 fc09 	bl	bbb4c <strcpy>
              break;
   b833a:	e00b      	b.n	b8354 <loop+0x1104>
              snprintf(buf, sizeof(buf), "  Ruido (decibelios):");
   b833c:	492f      	ldr	r1, [pc, #188]	; (b83fc <loop+0x11ac>)
   b833e:	e7f9      	b.n	b8334 <loop+0x10e4>
              snprintf(buf, sizeof(buf), "   Angulo (grados):");
   b8340:	492f      	ldr	r1, [pc, #188]	; (b8400 <loop+0x11b0>)
   b8342:	e7f7      	b.n	b8334 <loop+0x10e4>
              snprintf(buf, sizeof(buf), "  Temperatura (grados):");
   b8344:	492f      	ldr	r1, [pc, #188]	; (b8404 <loop+0x11b4>)
   b8346:	481d      	ldr	r0, [pc, #116]	; (b83bc <loop+0x116c>)
   b8348:	f003 fc00 	bl	bbb4c <strcpy>
              val = ajusta_temp(val);
   b834c:	6828      	ldr	r0, [r5, #0]
   b834e:	f7fe f835 	bl	b63bc <_Z11ajusta_tempi>
   b8352:	6028      	str	r0, [r5, #0]
          display.clearDisplay();
   b8354:	4c1a      	ldr	r4, [pc, #104]	; (b83c0 <loop+0x1170>)
   b8356:	4620      	mov	r0, r4
   b8358:	f001 fd10 	bl	b9d7c <_ZN16Adafruit_SSD130612clearDisplayEv>
   b835c:	2300      	movs	r3, #0
          display.print(buf);
   b835e:	4917      	ldr	r1, [pc, #92]	; (b83bc <loop+0x116c>)
   b8360:	6123      	str	r3, [r4, #16]
   b8362:	4620      	mov	r0, r4
   b8364:	f002 fdee 	bl	baf44 <_ZN5Print5printEPKc>
          snprintf(buf, sizeof(buf), "%d", val);
   b8368:	682b      	ldr	r3, [r5, #0]
   b836a:	4a27      	ldr	r2, [pc, #156]	; (b8408 <loop+0x11b8>)
   b836c:	4813      	ldr	r0, [pc, #76]	; (b83bc <loop+0x116c>)
   b836e:	2140      	movs	r1, #64	; 0x40
   b8370:	f002 fb46 	bl	baa00 <snprintf>
          if (val <= 9){
   b8374:	682b      	ldr	r3, [r5, #0]
   b8376:	2b09      	cmp	r3, #9
   b8378:	dc14      	bgt.n	b83a4 <loop+0x1154>
   b837a:	4b24      	ldr	r3, [pc, #144]	; (b840c <loop+0x11bc>)
   b837c:	6123      	str	r3, [r4, #16]
          display.setTextSize(4);
   b837e:	4810      	ldr	r0, [pc, #64]	; (b83c0 <loop+0x1170>)
   b8380:	2104      	movs	r1, #4
   b8382:	f000 fe36 	bl	b8ff2 <_ZN12Adafruit_GFX11setTextSizeEh>
          display.print(buf);
   b8386:	490d      	ldr	r1, [pc, #52]	; (b83bc <loop+0x116c>)
   b8388:	480d      	ldr	r0, [pc, #52]	; (b83c0 <loop+0x1170>)
   b838a:	f002 fddb 	bl	baf44 <_ZN5Print5printEPKc>
          display.setTextSize(1);
   b838e:	480c      	ldr	r0, [pc, #48]	; (b83c0 <loop+0x1170>)
   b8390:	2101      	movs	r1, #1
   b8392:	f000 fe2e 	bl	b8ff2 <_ZN12Adafruit_GFX11setTextSizeEh>
          display.display();
   b8396:	480a      	ldr	r0, [pc, #40]	; (b83c0 <loop+0x1170>)
   b8398:	f7ff b874 	b.w	b7484 <loop+0x234>
              snprintf(buf, sizeof(buf), "   Distancia (cm):");
   b839c:	491c      	ldr	r1, [pc, #112]	; (b8410 <loop+0x11c0>)
   b839e:	e7c9      	b.n	b8334 <loop+0x10e4>
              snprintf(buf, sizeof(buf), "      Turbidez:");
   b83a0:	491c      	ldr	r1, [pc, #112]	; (b8414 <loop+0x11c4>)
   b83a2:	e7c7      	b.n	b8334 <loop+0x10e4>
          } else if (val <= 99){
   b83a4:	2b63      	cmp	r3, #99	; 0x63
   b83a6:	dc41      	bgt.n	b842c <loop+0x11dc>
   b83a8:	4b1b      	ldr	r3, [pc, #108]	; (b8418 <loop+0x11c8>)
   b83aa:	e7e7      	b.n	b837c <loop+0x112c>
   b83ac:	2003d2ec 	.word	0x2003d2ec
   b83b0:	000bc99f 	.word	0x000bc99f
   b83b4:	2003da28 	.word	0x2003da28
   b83b8:	000bc9a8 	.word	0x000bc9a8
   b83bc:	2003d2ed 	.word	0x2003d2ed
   b83c0:	2003d338 	.word	0x2003d338
   b83c4:	2003d6f8 	.word	0x2003d6f8
   b83c8:	2003d3a8 	.word	0x2003d3a8
   b83cc:	000bc5e5 	.word	0x000bc5e5
   b83d0:	000bc9af 	.word	0x000bc9af
   b83d4:	000bc8a8 	.word	0x000bc8a8
   b83d8:	000bc0fa 	.word	0x000bc0fa
   b83dc:	2003da20 	.word	0x2003da20
   b83e0:	2003da3c 	.word	0x2003da3c
   b83e4:	2003cd14 	.word	0x2003cd14
   b83e8:	2003e6b4 	.word	0x2003e6b4
   b83ec:	000bc654 	.word	0x000bc654
   b83f0:	000bc66f 	.word	0x000bc66f
   b83f4:	000bc693 	.word	0x000bc693
   b83f8:	000bc9d1 	.word	0x000bc9d1
   b83fc:	000bc9df 	.word	0x000bc9df
   b8400:	000bc9f5 	.word	0x000bc9f5
   b8404:	000bca09 	.word	0x000bca09
   b8408:	000bc8a5 	.word	0x000bc8a5
   b840c:	00190035 	.word	0x00190035
   b8410:	000bca21 	.word	0x000bca21
   b8414:	000bca34 	.word	0x000bca34
   b8418:	00190028 	.word	0x00190028
   b841c:	2003dc34 	.word	0x2003dc34
   b8420:	2003da4c 	.word	0x2003da4c
   b8424:	2003d6d0 	.word	0x2003d6d0
   b8428:	2003e6b0 	.word	0x2003e6b0
          } else if (val <= 999){
   b842c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   b8430:	bfb4      	ite	lt
   b8432:	4b0c      	ldrlt	r3, [pc, #48]	; (b8464 <loop+0x1214>)
   b8434:	4b0c      	ldrge	r3, [pc, #48]	; (b8468 <loop+0x1218>)
   b8436:	e7a1      	b.n	b837c <loop+0x112c>
        }  else if (numSensoresBloque==0 && play == true) {
   b8438:	f47f a916 	bne.w	b7668 <loop+0x418>
   b843c:	782b      	ldrb	r3, [r5, #0]
   b843e:	2b00      	cmp	r3, #0
   b8440:	f43f a912 	beq.w	b7668 <loop+0x418>
              showBitmap(2,4,"");
   b8444:	4909      	ldr	r1, [pc, #36]	; (b846c <loop+0x121c>)
   b8446:	a8c0      	add	r0, sp, #768	; 0x300
   b8448:	f002 fc9b 	bl	bad82 <_ZN6StringC1EPK19__FlashStringHelper>
   b844c:	aac0      	add	r2, sp, #768	; 0x300
   b844e:	2104      	movs	r1, #4
   b8450:	2002      	movs	r0, #2
   b8452:	f7fe fbb9 	bl	b6bc8 <_Z10showBitmapii6String>
   b8456:	a8c0      	add	r0, sp, #768	; 0x300
   b8458:	f002 fc48 	bl	bacec <_ZN6StringD1Ev>
              play=false;
   b845c:	702e      	strb	r6, [r5, #0]
   b845e:	f7ff b903 	b.w	b7668 <loop+0x418>
   b8462:	bf00      	nop
   b8464:	0019001b 	.word	0x0019001b
   b8468:	0019000a 	.word	0x0019000a
   b846c:	000bc0fa 	.word	0x000bc0fa

000b8470 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   b8470:	4770      	bx	lr

000b8472 <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   b8472:	b510      	push	{r4, lr}
  }
   b8474:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   b8476:	4604      	mov	r4, r0
  }
   b8478:	f7fc fae5 	bl	b4a46 <_ZdlPvj>
   b847c:	4620      	mov	r0, r4
   b847e:	bd10      	pop	{r4, pc}

000b8480 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   b8480:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b8482:	4604      	mov	r4, r0
   b8484:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   b8486:	7922      	ldrb	r2, [r4, #4]
   b8488:	68a3      	ldr	r3, [r4, #8]
   b848a:	b132      	cbz	r2, b849a <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   b848c:	b9a3      	cbnz	r3, b84b8 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   b848e:	490b      	ldr	r1, [pc, #44]	; (b84bc <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   b8490:	b002      	add	sp, #8
   b8492:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   b8496:	f002 bd55 	b.w	baf44 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b849a:	4a09      	ldr	r2, [pc, #36]	; (b84c0 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   b849c:	7b26      	ldrb	r6, [r4, #12]
   b849e:	4d09      	ldr	r5, [pc, #36]	; (b84c4 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   b84a0:	4909      	ldr	r1, [pc, #36]	; (b84c8 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   b84a2:	7b64      	ldrb	r4, [r4, #13]
   b84a4:	2e01      	cmp	r6, #1
   b84a6:	bf18      	it	ne
   b84a8:	4629      	movne	r1, r5
   b84aa:	e9cd 1400 	strd	r1, r4, [sp]
   b84ae:	4907      	ldr	r1, [pc, #28]	; (b84cc <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   b84b0:	f7fc fb1a 	bl	b4ae8 <_ZN5Print6printfEPKcz>
  }
   b84b4:	b002      	add	sp, #8
   b84b6:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b84b8:	4a05      	ldr	r2, [pc, #20]	; (b84d0 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   b84ba:	e7ef      	b.n	b849c <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   b84bc:	000bce61 	.word	0x000bce61
   b84c0:	000bc0fa 	.word	0x000bc0fa
   b84c4:	000bce5d 	.word	0x000bce5d
   b84c8:	000bce59 	.word	0x000bce59
   b84cc:	000bce77 	.word	0x000bce77
   b84d0:	000bce50 	.word	0x000bce50

000b84d4 <_ZN12Adafruit_GFX9writeLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   b84d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b84d8:	b085      	sub	sp, #20
   b84da:	461f      	mov	r7, r3
   b84dc:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
   b84e0:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
#if defined(ESP8266)
    yield();
#endif
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   b84e4:	eba8 0902 	sub.w	r9, r8, r2
   b84e8:	eba7 0a01 	sub.w	sl, r7, r1
   b84ec:	f1b9 0f00 	cmp.w	r9, #0
   b84f0:	bfb8      	it	lt
   b84f2:	f1c9 0900 	rsblt	r9, r9, #0
   b84f6:	f1ba 0f00 	cmp.w	sl, #0
   b84fa:	bfb8      	it	lt
   b84fc:	f1ca 0a00 	rsblt	sl, sl, #0
    if (steep) {
   b8500:	45d1      	cmp	r9, sl
        uint16_t color) {
   b8502:	4683      	mov	fp, r0
   b8504:	460c      	mov	r4, r1
   b8506:	4615      	mov	r5, r2
    if (steep) {
   b8508:	dd04      	ble.n	b8514 <_ZN12Adafruit_GFX9writeLineEsssst+0x40>
   b850a:	463a      	mov	r2, r7
        _swap_int16_t(x0, y0);
   b850c:	462c      	mov	r4, r5
        _swap_int16_t(x1, y1);
   b850e:	4647      	mov	r7, r8
        _swap_int16_t(x0, y0);
   b8510:	460d      	mov	r5, r1
        _swap_int16_t(x1, y1);
   b8512:	4690      	mov	r8, r2
    }

    if (x0 > x1) {
   b8514:	42bc      	cmp	r4, r7
   b8516:	dd05      	ble.n	b8524 <_ZN12Adafruit_GFX9writeLineEsssst+0x50>
   b8518:	462a      	mov	r2, r5
        _swap_int16_t(x0, x1);
        _swap_int16_t(y0, y1);
   b851a:	4645      	mov	r5, r8
   b851c:	4690      	mov	r8, r2
    if (x0 > x1) {
   b851e:	4622      	mov	r2, r4
   b8520:	463c      	mov	r4, r7
   b8522:	4617      	mov	r7, r2
    }

    int16_t dx, dy;
    dx = x1 - x0;
   b8524:	1b3e      	subs	r6, r7, r4
   b8526:	b2b2      	uxth	r2, r6
   b8528:	9200      	str	r2, [sp, #0]
    dy = abs(y1 - y0);
   b852a:	eba8 0205 	sub.w	r2, r8, r5
   b852e:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
   b8532:	eba1 71e2 	sub.w	r1, r1, r2, asr #31

    int16_t err = dx / 2;
   b8536:	f3c6 32c0 	ubfx	r2, r6, #15, #1
   b853a:	fa02 f686 	sxtah	r6, r2, r6
    int16_t ystep;

    if (y0 < y1) {
        ystep = 1;
    } else {
        ystep = -1;
   b853e:	4545      	cmp	r5, r8
   b8540:	bfb4      	ite	lt
   b8542:	2201      	movlt	r2, #1
   b8544:	f04f 32ff 	movge.w	r2, #4294967295
    dy = abs(y1 - y0);
   b8548:	9101      	str	r1, [sp, #4]
    int16_t err = dx / 2;
   b854a:	1076      	asrs	r6, r6, #1
        ystep = -1;
   b854c:	9202      	str	r2, [sp, #8]
    }

    for (; x0<=x1; x0++) {
   b854e:	42bc      	cmp	r4, r7
   b8550:	dc1c      	bgt.n	b858c <_ZN12Adafruit_GFX9writeLineEsssst+0xb8>
        if (steep) {
            writePixel(y0, x0, color);
   b8552:	f8db 2000 	ldr.w	r2, [fp]
   b8556:	9303      	str	r3, [sp, #12]
        if (steep) {
   b8558:	45d1      	cmp	r9, sl
            writePixel(y0, x0, color);
   b855a:	f8d2 8018 	ldr.w	r8, [r2, #24]
   b855e:	bfc7      	ittee	gt
   b8560:	4629      	movgt	r1, r5
   b8562:	4622      	movgt	r2, r4
        } else {
            writePixel(x0, y0, color);
   b8564:	462a      	movle	r2, r5
   b8566:	4621      	movle	r1, r4
   b8568:	4658      	mov	r0, fp
   b856a:	47c0      	blx	r8
        }
        err -= dy;
   b856c:	9a01      	ldr	r2, [sp, #4]
            writePixel(x0, y0, color);
   b856e:	9b03      	ldr	r3, [sp, #12]
        err -= dy;
   b8570:	1ab6      	subs	r6, r6, r2
   b8572:	b2b1      	uxth	r1, r6
   b8574:	b236      	sxth	r6, r6
        if (err < 0) {
   b8576:	2e00      	cmp	r6, #0
   b8578:	da05      	bge.n	b8586 <_ZN12Adafruit_GFX9writeLineEsssst+0xb2>
            y0 += ystep;
   b857a:	9a02      	ldr	r2, [sp, #8]
   b857c:	4415      	add	r5, r2
            err += dx;
   b857e:	9a00      	ldr	r2, [sp, #0]
   b8580:	1856      	adds	r6, r2, r1
            y0 += ystep;
   b8582:	b22d      	sxth	r5, r5
            err += dx;
   b8584:	b236      	sxth	r6, r6
    for (; x0<=x1; x0++) {
   b8586:	3401      	adds	r4, #1
   b8588:	b224      	sxth	r4, r4
   b858a:	e7e0      	b.n	b854e <_ZN12Adafruit_GFX9writeLineEsssst+0x7a>
        }
    }
}
   b858c:	b005      	add	sp, #20
   b858e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b8592 <_ZN12Adafruit_GFX10startWriteEv>:
/*!
   @brief    Start a display-writing routine, overwrite in subclasses.
*/
/**************************************************************************/
void Adafruit_GFX::startWrite(){
}
   b8592:	4770      	bx	lr

000b8594 <_ZN12Adafruit_GFX10writePixelEsst>:
    @param   x   x coordinate
    @param   y   y coordinate
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writePixel(int16_t x, int16_t y, uint16_t color){
   b8594:	b410      	push	{r4}
    drawPixel(x, y, color);
   b8596:	6804      	ldr	r4, [r0, #0]
   b8598:	6924      	ldr	r4, [r4, #16]
   b859a:	46a4      	mov	ip, r4
}
   b859c:	f85d 4b04 	ldr.w	r4, [sp], #4
    drawPixel(x, y, color);
   b85a0:	4760      	bx	ip

000b85a2 <_ZN12Adafruit_GFX14writeFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   b85a2:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Can be just writeLine(x, y, x, y+h-1, color);
    // or writeFillRect(x, y, 1, h, color);
    drawFastVLine(x, y, h, color);
   b85a4:	6804      	ldr	r4, [r0, #0]
        int16_t h, uint16_t color) {
   b85a6:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastVLine(x, y, h, color);
   b85aa:	9502      	str	r5, [sp, #8]
   b85ac:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   b85ae:	46a4      	mov	ip, r4
}
   b85b0:	bc30      	pop	{r4, r5}
    drawFastVLine(x, y, h, color);
   b85b2:	4760      	bx	ip

000b85b4 <_ZN12Adafruit_GFX14writeFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   b85b4:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Example: writeLine(x, y, x+w-1, y, color);
    // or writeFillRect(x, y, w, 1, color);
    drawFastHLine(x, y, w, color);
   b85b6:	6804      	ldr	r4, [r0, #0]
        int16_t w, uint16_t color) {
   b85b8:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastHLine(x, y, w, color);
   b85bc:	9502      	str	r5, [sp, #8]
   b85be:	6be4      	ldr	r4, [r4, #60]	; 0x3c
   b85c0:	46a4      	mov	ip, r4
}
   b85c2:	bc30      	pop	{r4, r5}
    drawFastHLine(x, y, w, color);
   b85c4:	4760      	bx	ip

000b85c6 <_ZN12Adafruit_GFX13writeFillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b85c6:	b470      	push	{r4, r5, r6}
   b85c8:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
   b85cc:	f8bd 6010 	ldrh.w	r6, [sp, #16]
    // Overwrite in subclasses if desired!
    fillRect(x,y,w,h,color);
   b85d0:	6804      	ldr	r4, [r0, #0]
   b85d2:	e9cd 5603 	strd	r5, r6, [sp, #12]
   b85d6:	6c24      	ldr	r4, [r4, #64]	; 0x40
   b85d8:	46a4      	mov	ip, r4
}
   b85da:	bc70      	pop	{r4, r5, r6}
    fillRect(x,y,w,h,color);
   b85dc:	4760      	bx	ip

000b85de <_ZN12Adafruit_GFX13drawFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   b85de:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b85e2:	461c      	mov	r4, r3
    startWrite();
   b85e4:	6803      	ldr	r3, [r0, #0]
        int16_t h, uint16_t color) {
   b85e6:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   b85ea:	695b      	ldr	r3, [r3, #20]
        int16_t h, uint16_t color) {
   b85ec:	4605      	mov	r5, r0
   b85ee:	4616      	mov	r6, r2
    writeLine(x, y, x, y+h-1, color);
   b85f0:	3c01      	subs	r4, #1
   b85f2:	4434      	add	r4, r6
        int16_t h, uint16_t color) {
   b85f4:	460f      	mov	r7, r1
    writeLine(x, y, x, y+h-1, color);
   b85f6:	b224      	sxth	r4, r4
    startWrite();
   b85f8:	4798      	blx	r3
    writeLine(x, y, x, y+h-1, color);
   b85fa:	682b      	ldr	r3, [r5, #0]
   b85fc:	f8cd 8004 	str.w	r8, [sp, #4]
   b8600:	9400      	str	r4, [sp, #0]
   b8602:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   b8604:	4628      	mov	r0, r5
   b8606:	463b      	mov	r3, r7
   b8608:	4632      	mov	r2, r6
   b860a:	4639      	mov	r1, r7
   b860c:	47a0      	blx	r4
    endWrite();
   b860e:	682b      	ldr	r3, [r5, #0]
   b8610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b8612:	4628      	mov	r0, r5
}
   b8614:	b002      	add	sp, #8
   b8616:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   b861a:	4718      	bx	r3

000b861c <_ZN12Adafruit_GFX13drawFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   b861c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b8620:	461d      	mov	r5, r3
    startWrite();
   b8622:	6803      	ldr	r3, [r0, #0]
        int16_t w, uint16_t color) {
   b8624:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   b8628:	695b      	ldr	r3, [r3, #20]
        int16_t w, uint16_t color) {
   b862a:	4604      	mov	r4, r0
   b862c:	4617      	mov	r7, r2
   b862e:	460e      	mov	r6, r1
    startWrite();
   b8630:	4798      	blx	r3
    writeLine(x, y, x+w-1, y, color);
   b8632:	e9cd 7800 	strd	r7, r8, [sp]
   b8636:	6822      	ldr	r2, [r4, #0]
   b8638:	1e6b      	subs	r3, r5, #1
   b863a:	4433      	add	r3, r6
   b863c:	6a95      	ldr	r5, [r2, #40]	; 0x28
   b863e:	4620      	mov	r0, r4
   b8640:	b21b      	sxth	r3, r3
   b8642:	463a      	mov	r2, r7
   b8644:	4631      	mov	r1, r6
   b8646:	47a8      	blx	r5
    endWrite();
   b8648:	6823      	ldr	r3, [r4, #0]
   b864a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b864c:	4620      	mov	r0, r4
}
   b864e:	b002      	add	sp, #8
   b8650:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   b8654:	4718      	bx	r3

000b8656 <_ZN12Adafruit_GFX8fillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b8656:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b865a:	461e      	mov	r6, r3
    startWrite();
   b865c:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   b865e:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
    startWrite();
   b8662:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   b8664:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   b8668:	460c      	mov	r4, r1
   b866a:	4605      	mov	r5, r0
   b866c:	4617      	mov	r7, r2
    startWrite();
   b866e:	4798      	blx	r3
    for (int16_t i=x; i<x+w; i++) {
   b8670:	4426      	add	r6, r4
   b8672:	42b4      	cmp	r4, r6
        writeFastVLine(i, y, h, color);
   b8674:	682b      	ldr	r3, [r5, #0]
    for (int16_t i=x; i<x+w; i++) {
   b8676:	da0b      	bge.n	b8690 <_ZN12Adafruit_GFX8fillRectEsssst+0x3a>
        writeFastVLine(i, y, h, color);
   b8678:	f8cd 8000 	str.w	r8, [sp]
   b867c:	f8d3 a020 	ldr.w	sl, [r3, #32]
   b8680:	4621      	mov	r1, r4
   b8682:	464b      	mov	r3, r9
   b8684:	463a      	mov	r2, r7
   b8686:	4628      	mov	r0, r5
   b8688:	3401      	adds	r4, #1
   b868a:	47d0      	blx	sl
    for (int16_t i=x; i<x+w; i++) {
   b868c:	b224      	sxth	r4, r4
   b868e:	e7f0      	b.n	b8672 <_ZN12Adafruit_GFX8fillRectEsssst+0x1c>
    }
    endWrite();
   b8690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b8692:	4628      	mov	r0, r5
}
   b8694:	b002      	add	sp, #8
   b8696:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   b869a:	4718      	bx	r3

000b869c <_ZN12Adafruit_GFX10fillScreenEt>:
/*!
   @brief    Fill the screen completely with one color. Update in subclasses if desired!
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillScreen(uint16_t color) {
   b869c:	b513      	push	{r0, r1, r4, lr}
    fillRect(0, 0, _width, _height, color);
   b869e:	6802      	ldr	r2, [r0, #0]
   b86a0:	9101      	str	r1, [sp, #4]
   b86a2:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
   b86a6:	9100      	str	r1, [sp, #0]
   b86a8:	6c14      	ldr	r4, [r2, #64]	; 0x40
   b86aa:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b86ae:	2200      	movs	r2, #0
   b86b0:	4611      	mov	r1, r2
   b86b2:	47a0      	blx	r4
}
   b86b4:	b002      	add	sp, #8
   b86b6:	bd10      	pop	{r4, pc}

000b86b8 <_ZN12Adafruit_GFX8drawLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   b86b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    // Update in subclasses if desired!
    if(x0 == x1){
   b86bc:	4299      	cmp	r1, r3
        uint16_t color) {
   b86be:	4616      	mov	r6, r2
   b86c0:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
   b86c4:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
        if(y0 > y1) _swap_int16_t(y0, y1);
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b86c8:	6802      	ldr	r2, [r0, #0]
        uint16_t color) {
   b86ca:	4680      	mov	r8, r0
   b86cc:	460d      	mov	r5, r1
   b86ce:	461c      	mov	r4, r3
    if(x0 == x1){
   b86d0:	d113      	bne.n	b86fa <_ZN12Adafruit_GFX8drawLineEsssst+0x42>
        if(y0 > y1) _swap_int16_t(y0, y1);
   b86d2:	42be      	cmp	r6, r7
   b86d4:	bfc8      	it	gt
   b86d6:	4633      	movgt	r3, r6
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b86d8:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
        if(y0 > y1) _swap_int16_t(y0, y1);
   b86dc:	bfc4      	itt	gt
   b86de:	463e      	movgt	r6, r7
   b86e0:	461f      	movgt	r7, r3
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b86e2:	1c7b      	adds	r3, r7, #1
   b86e4:	6b94      	ldr	r4, [r2, #56]	; 0x38
   b86e6:	1b9b      	subs	r3, r3, r6
    } else if(y0 == y1){
        if(x0 > x1) _swap_int16_t(x0, x1);
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b86e8:	b21b      	sxth	r3, r3
   b86ea:	4632      	mov	r2, r6
   b86ec:	4629      	mov	r1, r5
   b86ee:	4640      	mov	r0, r8
   b86f0:	46a4      	mov	ip, r4
    } else {
        startWrite();
        writeLine(x0, y0, x1, y1, color);
        endWrite();
    }
}
   b86f2:	b003      	add	sp, #12
   b86f4:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b86f8:	4760      	bx	ip
    } else if(y0 == y1){
   b86fa:	42be      	cmp	r6, r7
   b86fc:	d10a      	bne.n	b8714 <_ZN12Adafruit_GFX8drawLineEsssst+0x5c>
        if(x0 > x1) _swap_int16_t(x0, x1);
   b86fe:	4299      	cmp	r1, r3
   b8700:	bfc2      	ittt	gt
   b8702:	460b      	movgt	r3, r1
   b8704:	4625      	movgt	r5, r4
   b8706:	461c      	movgt	r4, r3
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b8708:	1c63      	adds	r3, r4, #1
   b870a:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   b870e:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b8710:	1b5b      	subs	r3, r3, r5
   b8712:	e7e9      	b.n	b86e8 <_ZN12Adafruit_GFX8drawLineEsssst+0x30>
        startWrite();
   b8714:	6953      	ldr	r3, [r2, #20]
   b8716:	4798      	blx	r3
        writeLine(x0, y0, x1, y1, color);
   b8718:	e9cd 7900 	strd	r7, r9, [sp]
   b871c:	f8d8 3000 	ldr.w	r3, [r8]
   b8720:	4640      	mov	r0, r8
   b8722:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   b8724:	4632      	mov	r2, r6
   b8726:	4623      	mov	r3, r4
   b8728:	4629      	mov	r1, r5
   b872a:	47b8      	blx	r7
        endWrite();
   b872c:	f8d8 3000 	ldr.w	r3, [r8]
   b8730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b8732:	4640      	mov	r0, r8
}
   b8734:	b003      	add	sp, #12
   b8736:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        endWrite();
   b873a:	4718      	bx	r3

000b873c <_ZN12Adafruit_GFX8drawRectEsssst>:
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b873c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b8740:	461d      	mov	r5, r3
    startWrite();
   b8742:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   b8744:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
    startWrite();
   b8748:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   b874a:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
   b874e:	4604      	mov	r4, r0
   b8750:	460f      	mov	r7, r1
   b8752:	4616      	mov	r6, r2
    startWrite();
   b8754:	4798      	blx	r3
    writeFastHLine(x, y, w, color);
   b8756:	6823      	ldr	r3, [r4, #0]
   b8758:	f8cd 8000 	str.w	r8, [sp]
   b875c:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   b8760:	4632      	mov	r2, r6
   b8762:	462b      	mov	r3, r5
   b8764:	4639      	mov	r1, r7
   b8766:	4620      	mov	r0, r4
   b8768:	47d0      	blx	sl
    writeFastHLine(x, y+h-1, w, color);
   b876a:	6823      	ldr	r3, [r4, #0]
   b876c:	f8cd 8000 	str.w	r8, [sp]
   b8770:	f109 32ff 	add.w	r2, r9, #4294967295
   b8774:	4432      	add	r2, r6
   b8776:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   b877a:	4639      	mov	r1, r7
   b877c:	462b      	mov	r3, r5
   b877e:	4620      	mov	r0, r4
   b8780:	b212      	sxth	r2, r2
   b8782:	47d0      	blx	sl
    writeFastVLine(x, y, h, color);
   b8784:	6823      	ldr	r3, [r4, #0]
   b8786:	f8cd 8000 	str.w	r8, [sp]
   b878a:	f8d3 a020 	ldr.w	sl, [r3, #32]
   b878e:	4632      	mov	r2, r6
   b8790:	464b      	mov	r3, r9
   b8792:	4639      	mov	r1, r7
   b8794:	4620      	mov	r0, r4
   b8796:	47d0      	blx	sl
    writeFastVLine(x+w-1, y, h, color);
   b8798:	1e6b      	subs	r3, r5, #1
   b879a:	19d9      	adds	r1, r3, r7
   b879c:	6823      	ldr	r3, [r4, #0]
   b879e:	f8cd 8000 	str.w	r8, [sp]
   b87a2:	6a1d      	ldr	r5, [r3, #32]
   b87a4:	4620      	mov	r0, r4
   b87a6:	464b      	mov	r3, r9
   b87a8:	4632      	mov	r2, r6
   b87aa:	b209      	sxth	r1, r1
   b87ac:	47a8      	blx	r5
    endWrite();
   b87ae:	6823      	ldr	r3, [r4, #0]
   b87b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b87b2:	4620      	mov	r0, r4
}
   b87b4:	b002      	add	sp, #8
   b87b6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   b87ba:	4718      	bx	r3

000b87bc <_ZN12Adafruit_GFX13invertDisplayEb>:
    @param   i  True if you want to invert, false to make 'normal'
*/
/**************************************************************************/
void Adafruit_GFX::invertDisplay(boolean i) {
    // Do nothing, must be subclassed if supported by hardware
}
   b87bc:	4770      	bx	lr

000b87be <_ZN12Adafruit_GFX11setRotationEh>:
    rotation = (x & 3);
   b87be:	f001 0303 	and.w	r3, r1, #3
            _height = HEIGHT;
   b87c2:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
    rotation = (x & 3);
   b87c6:	7683      	strb	r3, [r0, #26]
    switch(rotation) {
   b87c8:	07c9      	lsls	r1, r1, #31
            _width  = WIDTH;
   b87ca:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   b87ce:	bf59      	ittee	pl
   b87d0:	8183      	strhpl	r3, [r0, #12]
            _height = HEIGHT;
   b87d2:	81c2      	strhpl	r2, [r0, #14]
            _width  = HEIGHT;
   b87d4:	8182      	strhmi	r2, [r0, #12]
            _height = WIDTH;
   b87d6:	81c3      	strhmi	r3, [r0, #14]
}
   b87d8:	4770      	bx	lr
	...

000b87dc <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   b87dc:	b530      	push	{r4, r5, lr}
WIDTH(w), HEIGHT(h)
   b87de:	8142      	strh	r2, [r0, #10]
    _height   = HEIGHT;
   b87e0:	81c2      	strh	r2, [r0, #14]
    textsize_x = textsize_y  = 1;
   b87e2:	4a07      	ldr	r2, [pc, #28]	; (b8800 <_ZN12Adafruit_GFXC1Ess+0x24>)
WIDTH(w), HEIGHT(h)
   b87e4:	4d07      	ldr	r5, [pc, #28]	; (b8804 <_ZN12Adafruit_GFXC1Ess+0x28>)
   b87e6:	8101      	strh	r1, [r0, #8]
    Print() : write_error(0) {}
   b87e8:	2400      	movs	r4, #0
    _width    = WIDTH;
   b87ea:	8181      	strh	r1, [r0, #12]
    textsize_x = textsize_y  = 1;
   b87ec:	f04f 31ff 	mov.w	r1, #4294967295
   b87f0:	e9c0 1205 	strd	r1, r2, [r0, #20]
   b87f4:	6044      	str	r4, [r0, #4]
WIDTH(w), HEIGHT(h)
   b87f6:	6005      	str	r5, [r0, #0]
    cursor_y  = cursor_x    = 0;
   b87f8:	6104      	str	r4, [r0, #16]
    _cp437    = false;
   b87fa:	7704      	strb	r4, [r0, #28]
    gfxFont   = NULL;
   b87fc:	6204      	str	r4, [r0, #32]
}
   b87fe:	bd30      	pop	{r4, r5, pc}
   b8800:	01000101 	.word	0x01000101
   b8804:	000bd39c 	.word	0x000bd39c

000b8808 <_ZN12Adafruit_GFX16fillCircleHelperEssshst>:
  uint8_t corners, int16_t delta, uint16_t color) {
   b8808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b880c:	b08b      	sub	sp, #44	; 0x2c
   b880e:	461c      	mov	r4, r3
   b8810:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
   b8814:	9304      	str	r3, [sp, #16]
    int16_t f     = 1 - r;
   b8816:	b2a3      	uxth	r3, r4
   b8818:	f1c3 0501 	rsb	r5, r3, #1
    int16_t ddF_y = -2 * r;
   b881c:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
   b8820:	005b      	lsls	r3, r3, #1
   b8822:	b21b      	sxth	r3, r3
   b8824:	9307      	str	r3, [sp, #28]
    delta++; // Avoid some +1's in the loop
   b8826:	f9bd 3054 	ldrsh.w	r3, [sp, #84]	; 0x54
   b882a:	3301      	adds	r3, #1
   b882c:	b29b      	uxth	r3, r3
   b882e:	9305      	str	r3, [sp, #20]
   b8830:	b293      	uxth	r3, r2
   b8832:	9306      	str	r3, [sp, #24]
  uint8_t corners, int16_t delta, uint16_t color) {
   b8834:	4688      	mov	r8, r1
    delta++; // Avoid some +1's in the loop
   b8836:	9b05      	ldr	r3, [sp, #20]
  uint8_t corners, int16_t delta, uint16_t color) {
   b8838:	f89d 1050 	ldrb.w	r1, [sp, #80]	; 0x50
    delta++; // Avoid some +1's in the loop
   b883c:	9303      	str	r3, [sp, #12]
    int16_t x     = 0;
   b883e:	2300      	movs	r3, #0
   b8840:	9302      	str	r3, [sp, #8]
            if(corners & 1) writeFastVLine(x0+x, y0-y, 2*y+delta, color);
   b8842:	f001 0301 	and.w	r3, r1, #1
   b8846:	9308      	str	r3, [sp, #32]
    delta++; // Avoid some +1's in the loop
   b8848:	f8dd a018 	ldr.w	sl, [sp, #24]
            if(corners & 2) writeFastVLine(x0-x, y0-y, 2*y+delta, color);
   b884c:	f001 0302 	and.w	r3, r1, #2
  uint8_t corners, int16_t delta, uint16_t color) {
   b8850:	4683      	mov	fp, r0
    int16_t f     = 1 - r;
   b8852:	b22d      	sxth	r5, r5
            if(corners & 2) writeFastVLine(x0-x, y0-y, 2*y+delta, color);
   b8854:	9309      	str	r3, [sp, #36]	; 0x24
    while(x < y) {
   b8856:	9b02      	ldr	r3, [sp, #8]
   b8858:	42a3      	cmp	r3, r4
   b885a:	da6f      	bge.n	b893c <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0x134>
        if (f >= 0) {
   b885c:	2d00      	cmp	r5, #0
   b885e:	db6b      	blt.n	b8938 <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0x130>
            ddF_y += 2;
   b8860:	9b07      	ldr	r3, [sp, #28]
   b8862:	3302      	adds	r3, #2
            y--;
   b8864:	1e66      	subs	r6, r4, #1
            ddF_y += 2;
   b8866:	b21a      	sxth	r2, r3
            f     += ddF_y;
   b8868:	fa15 f583 	uxtah	r5, r5, r3
            y--;
   b886c:	b236      	sxth	r6, r6
            ddF_y += 2;
   b886e:	9207      	str	r2, [sp, #28]
            f     += ddF_y;
   b8870:	b22d      	sxth	r5, r5
        x++;
   b8872:	9f02      	ldr	r7, [sp, #8]
   b8874:	3701      	adds	r7, #1
   b8876:	fa1f f987 	uxth.w	r9, r7
   b887a:	b23b      	sxth	r3, r7
        ddF_x += 2;
   b887c:	eb05 0549 	add.w	r5, r5, r9, lsl #1
        f     += ddF_x;
   b8880:	3501      	adds	r5, #1
        if(x < (y + 1)) {
   b8882:	429e      	cmp	r6, r3
   b8884:	9302      	str	r3, [sp, #8]
        f     += ddF_x;
   b8886:	b22d      	sxth	r5, r5
        if(x < (y + 1)) {
   b8888:	db29      	blt.n	b88de <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0xd6>
            if(corners & 1) writeFastVLine(x0+x, y0-y, 2*y+delta, color);
   b888a:	9b08      	ldr	r3, [sp, #32]
   b888c:	b193      	cbz	r3, b88b4 <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0xac>
   b888e:	9804      	ldr	r0, [sp, #16]
   b8890:	9000      	str	r0, [sp, #0]
   b8892:	f8db 0000 	ldr.w	r0, [fp]
   b8896:	9906      	ldr	r1, [sp, #24]
   b8898:	9b05      	ldr	r3, [sp, #20]
   b889a:	6a00      	ldr	r0, [r0, #32]
   b889c:	b2b2      	uxth	r2, r6
   b889e:	eb03 0342 	add.w	r3, r3, r2, lsl #1
   b88a2:	1a8a      	subs	r2, r1, r2
   b88a4:	eb09 0108 	add.w	r1, r9, r8
   b88a8:	4607      	mov	r7, r0
   b88aa:	b21b      	sxth	r3, r3
   b88ac:	b212      	sxth	r2, r2
   b88ae:	b209      	sxth	r1, r1
   b88b0:	4658      	mov	r0, fp
   b88b2:	47b8      	blx	r7
            if(corners & 2) writeFastVLine(x0-x, y0-y, 2*y+delta, color);
   b88b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b88b6:	b193      	cbz	r3, b88de <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0xd6>
   b88b8:	9906      	ldr	r1, [sp, #24]
   b88ba:	9804      	ldr	r0, [sp, #16]
   b88bc:	9b05      	ldr	r3, [sp, #20]
   b88be:	9000      	str	r0, [sp, #0]
   b88c0:	b2b2      	uxth	r2, r6
   b88c2:	f8db 0000 	ldr.w	r0, [fp]
   b88c6:	eb03 0342 	add.w	r3, r3, r2, lsl #1
   b88ca:	1a8a      	subs	r2, r1, r2
   b88cc:	eba8 0109 	sub.w	r1, r8, r9
   b88d0:	b21b      	sxth	r3, r3
   b88d2:	f8d0 9020 	ldr.w	r9, [r0, #32]
   b88d6:	b212      	sxth	r2, r2
   b88d8:	b209      	sxth	r1, r1
   b88da:	4658      	mov	r0, fp
   b88dc:	47c8      	blx	r9
        if(y != py) {
   b88de:	42b4      	cmp	r4, r6
   b88e0:	d020      	beq.n	b8924 <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0x11c>
            if(corners & 1) writeFastVLine(x0+py, y0-px, 2*px+delta, color);
   b88e2:	9b08      	ldr	r3, [sp, #32]
   b88e4:	b173      	cbz	r3, b8904 <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0xfc>
   b88e6:	f8db 3000 	ldr.w	r3, [fp]
   b88ea:	9a04      	ldr	r2, [sp, #16]
   b88ec:	9200      	str	r2, [sp, #0]
   b88ee:	eb08 0104 	add.w	r1, r8, r4
   b88f2:	f8d3 9020 	ldr.w	r9, [r3, #32]
   b88f6:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
   b88fa:	fa0f f28a 	sxth.w	r2, sl
   b88fe:	b209      	sxth	r1, r1
   b8900:	4658      	mov	r0, fp
   b8902:	47c8      	blx	r9
            if(corners & 2) writeFastVLine(x0-py, y0-px, 2*px+delta, color);
   b8904:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b8906:	b16b      	cbz	r3, b8924 <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0x11c>
   b8908:	f8db 3000 	ldr.w	r3, [fp]
   b890c:	9a04      	ldr	r2, [sp, #16]
   b890e:	9200      	str	r2, [sp, #0]
   b8910:	eba8 0104 	sub.w	r1, r8, r4
   b8914:	fa0f f28a 	sxth.w	r2, sl
   b8918:	6a1c      	ldr	r4, [r3, #32]
   b891a:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
   b891e:	b209      	sxth	r1, r1
   b8920:	4658      	mov	r0, fp
   b8922:	47a0      	blx	r4
   b8924:	f10a 33ff 	add.w	r3, sl, #4294967295
   b8928:	fa1f fa83 	uxth.w	sl, r3
   b892c:	9b03      	ldr	r3, [sp, #12]
   b892e:	3302      	adds	r3, #2
   b8930:	b29b      	uxth	r3, r3
   b8932:	9303      	str	r3, [sp, #12]
  uint8_t corners, int16_t delta, uint16_t color) {
   b8934:	4634      	mov	r4, r6
   b8936:	e78e      	b.n	b8856 <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0x4e>
   b8938:	4626      	mov	r6, r4
   b893a:	e79a      	b.n	b8872 <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0x6a>
}
   b893c:	b00b      	add	sp, #44	; 0x2c
   b893e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b8942 <_ZN12Adafruit_GFX10fillCircleEssst>:
        uint16_t color) {
   b8942:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b8946:	461e      	mov	r6, r3
   b8948:	b086      	sub	sp, #24
    startWrite();
   b894a:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   b894c:	9105      	str	r1, [sp, #20]
   b894e:	4604      	mov	r4, r0
    startWrite();
   b8950:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   b8952:	f8bd 7030 	ldrh.w	r7, [sp, #48]	; 0x30
   b8956:	4615      	mov	r5, r2
    startWrite();
   b8958:	4798      	blx	r3
    writeFastVLine(x0, y0-r, 2*r+1, color);
   b895a:	b2b2      	uxth	r2, r6
   b895c:	6820      	ldr	r0, [r4, #0]
   b895e:	9700      	str	r7, [sp, #0]
   b8960:	0053      	lsls	r3, r2, #1
   b8962:	3301      	adds	r3, #1
   b8964:	1aaa      	subs	r2, r5, r2
   b8966:	f8d0 8020 	ldr.w	r8, [r0, #32]
   b896a:	9905      	ldr	r1, [sp, #20]
   b896c:	4620      	mov	r0, r4
   b896e:	b21b      	sxth	r3, r3
   b8970:	b212      	sxth	r2, r2
   b8972:	47c0      	blx	r8
    fillCircleHelper(x0, y0, r, 3, 0, color);
   b8974:	2303      	movs	r3, #3
   b8976:	2200      	movs	r2, #0
   b8978:	e9cd 3200 	strd	r3, r2, [sp]
   b897c:	4620      	mov	r0, r4
   b897e:	4633      	mov	r3, r6
   b8980:	9905      	ldr	r1, [sp, #20]
   b8982:	9702      	str	r7, [sp, #8]
   b8984:	462a      	mov	r2, r5
   b8986:	f7ff ff3f 	bl	b8808 <_ZN12Adafruit_GFX16fillCircleHelperEssshst>
    endWrite();
   b898a:	6823      	ldr	r3, [r4, #0]
   b898c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b898e:	4620      	mov	r0, r4
}
   b8990:	b006      	add	sp, #24
   b8992:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   b8996:	4718      	bx	r3

000b8998 <_ZN12Adafruit_GFX12fillTriangleEsssssst>:
        int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color) {
   b8998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b899c:	b08d      	sub	sp, #52	; 0x34
   b899e:	461d      	mov	r5, r3
   b89a0:	f9bd 6058 	ldrsh.w	r6, [sp, #88]	; 0x58
   b89a4:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
   b89a8:	f9bd 805c 	ldrsh.w	r8, [sp, #92]	; 0x5c
   b89ac:	f9bd 7060 	ldrsh.w	r7, [sp, #96]	; 0x60
   b89b0:	9304      	str	r3, [sp, #16]
    if (y0 > y1) {
   b89b2:	42b2      	cmp	r2, r6
        int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color) {
   b89b4:	4683      	mov	fp, r0
   b89b6:	4689      	mov	r9, r1
   b89b8:	4614      	mov	r4, r2
    if (y0 > y1) {
   b89ba:	f340 80ce 	ble.w	b8b5a <_ZN12Adafruit_GFX12fillTriangleEsssssst+0x1c2>
    if (y1 > y2) {
   b89be:	42ba      	cmp	r2, r7
   b89c0:	dd17      	ble.n	b89f2 <_ZN12Adafruit_GFX12fillTriangleEsssssst+0x5a>
    if (y0 > y1) {
   b89c2:	42b7      	cmp	r7, r6
   b89c4:	da0f      	bge.n	b89e6 <_ZN12Adafruit_GFX12fillTriangleEsssssst+0x4e>
   b89c6:	4633      	mov	r3, r6
   b89c8:	463e      	mov	r6, r7
   b89ca:	4627      	mov	r7, r4
   b89cc:	461c      	mov	r4, r3
   b89ce:	462b      	mov	r3, r5
   b89d0:	4645      	mov	r5, r8
   b89d2:	46c8      	mov	r8, r9
    if (y1 > y2) {
   b89d4:	4699      	mov	r9, r3
   b89d6:	e00c      	b.n	b89f2 <_ZN12Adafruit_GFX12fillTriangleEsssssst+0x5a>
   b89d8:	4623      	mov	r3, r4
   b89da:	4634      	mov	r4, r6
   b89dc:	461e      	mov	r6, r3
   b89de:	464b      	mov	r3, r9
   b89e0:	46a9      	mov	r9, r5
   b89e2:	461d      	mov	r5, r3
   b89e4:	e7ed      	b.n	b89c2 <_ZN12Adafruit_GFX12fillTriangleEsssssst+0x2a>
   b89e6:	4623      	mov	r3, r4
   b89e8:	463c      	mov	r4, r7
   b89ea:	461f      	mov	r7, r3
   b89ec:	464b      	mov	r3, r9
   b89ee:	46c1      	mov	r9, r8
   b89f0:	4698      	mov	r8, r3
    startWrite();
   b89f2:	f8db 3000 	ldr.w	r3, [fp]
   b89f6:	4658      	mov	r0, fp
   b89f8:	695b      	ldr	r3, [r3, #20]
   b89fa:	4798      	blx	r3
    if(y0 == y2) { // Handle awkward all-on-same-line case as its own thing
   b89fc:	42be      	cmp	r6, r7
   b89fe:	d122      	bne.n	b8a46 <_ZN12Adafruit_GFX12fillTriangleEsssssst+0xae>
        if(x1 < a)      a = x1;
   b8a00:	454d      	cmp	r5, r9
   b8a02:	bfc2      	ittt	gt
   b8a04:	462b      	movgt	r3, r5
   b8a06:	464d      	movgt	r5, r9
   b8a08:	4699      	movgt	r9, r3
        if(x2 < a)      a = x2;
   b8a0a:	4545      	cmp	r5, r8
   b8a0c:	dc05      	bgt.n	b8a1a <_ZN12Adafruit_GFX12fillTriangleEsssssst+0x82>
        else if(x2 > b) b = x2;
   b8a0e:	45c1      	cmp	r9, r8
   b8a10:	bfb8      	it	lt
   b8a12:	46c1      	movlt	r9, r8
   b8a14:	fa0f f989 	sxth.w	r9, r9
   b8a18:	46a8      	mov	r8, r5
        writeFastHLine(a, y0, b-a+1, color);
   b8a1a:	f8db 2000 	ldr.w	r2, [fp]
   b8a1e:	9904      	ldr	r1, [sp, #16]
   b8a20:	9100      	str	r1, [sp, #0]
   b8a22:	f109 0301 	add.w	r3, r9, #1
   b8a26:	eba3 0308 	sub.w	r3, r3, r8
   b8a2a:	6a54      	ldr	r4, [r2, #36]	; 0x24
   b8a2c:	b21b      	sxth	r3, r3
   b8a2e:	4632      	mov	r2, r6
   b8a30:	4641      	mov	r1, r8
   b8a32:	4658      	mov	r0, fp
   b8a34:	47a0      	blx	r4
    endWrite();
   b8a36:	f8db 3000 	ldr.w	r3, [fp]
   b8a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b8a3c:	4658      	mov	r0, fp
}
   b8a3e:	b00d      	add	sp, #52	; 0x34
   b8a40:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    endWrite();
   b8a44:	4718      	bx	r3
    dx01 = x1 - x0,
   b8a46:	fa1f f389 	uxth.w	r3, r9
   b8a4a:	9303      	str	r3, [sp, #12]
   b8a4c:	b2ab      	uxth	r3, r5
   b8a4e:	9302      	str	r3, [sp, #8]
   b8a50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b8a54:	1a9b      	subs	r3, r3, r2
   b8a56:	b21b      	sxth	r3, r3
    dy01 = y1 - y0,
   b8a58:	fa1f fc86 	uxth.w	ip, r6
    dx01 = x1 - x0,
   b8a5c:	9308      	str	r3, [sp, #32]
    dy01 = y1 - y0,
   b8a5e:	b2a3      	uxth	r3, r4
   b8a60:	eba3 020c 	sub.w	r2, r3, ip
   b8a64:	b212      	sxth	r2, r2
   b8a66:	9209      	str	r2, [sp, #36]	; 0x24
    dx02 = x2 - x0,
   b8a68:	9a02      	ldr	r2, [sp, #8]
   b8a6a:	fa1f f188 	uxth.w	r1, r8
   b8a6e:	eba1 0802 	sub.w	r8, r1, r2
    dy02 = y2 - y0,
   b8a72:	b2ba      	uxth	r2, r7
   b8a74:	eba2 0c0c 	sub.w	ip, r2, ip
   b8a78:	fa0f f08c 	sxth.w	r0, ip
   b8a7c:	9006      	str	r0, [sp, #24]
    dx12 = x2 - x1,
   b8a7e:	9803      	ldr	r0, [sp, #12]
    if(y1 == y2) last = y1;   // Include y1 scanline
   b8a80:	42bc      	cmp	r4, r7
    dy12 = y2 - y1;
   b8a82:	eba2 0203 	sub.w	r2, r2, r3
    dx12 = x2 - x1,
   b8a86:	eba1 0100 	sub.w	r1, r1, r0
    else         last = y1-1; // Skip it
   b8a8a:	bf18      	it	ne
   b8a8c:	f103 33ff 	addne.w	r3, r3, #4294967295
    dy12 = y2 - y1;
   b8a90:	b212      	sxth	r2, r2
    dx12 = x2 - x1,
   b8a92:	b209      	sxth	r1, r1
    else         last = y1-1; // Skip it
   b8a94:	bf18      	it	ne
   b8a96:	b21b      	sxthne	r3, r3
    sb   = 0;
   b8a98:	f04f 0900 	mov.w	r9, #0
    dy12 = y2 - y1;
   b8a9c:	920a      	str	r2, [sp, #40]	; 0x28
    dx02 = x2 - x0,
   b8a9e:	fa0f f888 	sxth.w	r8, r8
    dx12 = x2 - x1,
   b8aa2:	9107      	str	r1, [sp, #28]
    else         last = y1-1; // Skip it
   b8aa4:	bf14      	ite	ne
   b8aa6:	9305      	strne	r3, [sp, #20]
   b8aa8:	9405      	streq	r4, [sp, #20]
    for(y=y0; y<=last; y++) {
   b8aaa:	4632      	mov	r2, r6
    sa   = 0,
   b8aac:	46ca      	mov	sl, r9
    for(y=y0; y<=last; y++) {
   b8aae:	9b05      	ldr	r3, [sp, #20]
   b8ab0:	429a      	cmp	r2, r3
   b8ab2:	dc24      	bgt.n	b8afe <_ZN12Adafruit_GFX12fillTriangleEsssssst+0x166>
        a   = x0 + sa / dy01;
   b8ab4:	9b09      	ldr	r3, [sp, #36]	; 0x24
        b   = x0 + sb / dy02;
   b8ab6:	9802      	ldr	r0, [sp, #8]
        a   = x0 + sa / dy01;
   b8ab8:	fb9a f1f3 	sdiv	r1, sl, r3
   b8abc:	9b02      	ldr	r3, [sp, #8]
        writeFastHLine(a, y, b-a+1, color);
   b8abe:	920b      	str	r2, [sp, #44]	; 0x2c
        a   = x0 + sa / dy01;
   b8ac0:	4419      	add	r1, r3
        b   = x0 + sb / dy02;
   b8ac2:	9b06      	ldr	r3, [sp, #24]
   b8ac4:	fb99 f3f3 	sdiv	r3, r9, r3
   b8ac8:	4403      	add	r3, r0
        sa += dx01;
   b8aca:	9808      	ldr	r0, [sp, #32]
        a   = x0 + sa / dy01;
   b8acc:	b209      	sxth	r1, r1
        b   = x0 + sb / dy02;
   b8ace:	b21b      	sxth	r3, r3
        if(a > b) _swap_int16_t(a,b);
   b8ad0:	4299      	cmp	r1, r3
        sa += dx01;
   b8ad2:	4482      	add	sl, r0
        writeFastHLine(a, y, b-a+1, color);
   b8ad4:	9804      	ldr	r0, [sp, #16]
   b8ad6:	9000      	str	r0, [sp, #0]
        if(a > b) _swap_int16_t(a,b);
   b8ad8:	bfc8      	it	gt
   b8ada:	468c      	movgt	ip, r1
        writeFastHLine(a, y, b-a+1, color);
   b8adc:	f8db 0000 	ldr.w	r0, [fp]
        if(a > b) _swap_int16_t(a,b);
   b8ae0:	bfc4      	itt	gt
   b8ae2:	4619      	movgt	r1, r3
   b8ae4:	4663      	movgt	r3, ip
        writeFastHLine(a, y, b-a+1, color);
   b8ae6:	6a40      	ldr	r0, [r0, #36]	; 0x24
   b8ae8:	3301      	adds	r3, #1
   b8aea:	1a5b      	subs	r3, r3, r1
   b8aec:	4605      	mov	r5, r0
   b8aee:	b21b      	sxth	r3, r3
   b8af0:	4658      	mov	r0, fp
   b8af2:	47a8      	blx	r5
   b8af4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b8af6:	3201      	adds	r2, #1
        sb += dx02;
   b8af8:	44c1      	add	r9, r8
    for(y=y0; y<=last; y++) {
   b8afa:	b212      	sxth	r2, r2
   b8afc:	e7d7      	b.n	b8aae <_ZN12Adafruit_GFX12fillTriangleEsssssst+0x116>
    sa = (int32_t)dx12 * (y - y1);
   b8afe:	9b07      	ldr	r3, [sp, #28]
   b8b00:	1b14      	subs	r4, r2, r4
    sb = (int32_t)dx02 * (y - y0);
   b8b02:	1b96      	subs	r6, r2, r6
    sa = (int32_t)dx12 * (y - y1);
   b8b04:	435c      	muls	r4, r3
    sb = (int32_t)dx02 * (y - y0);
   b8b06:	fb08 f606 	mul.w	r6, r8, r6
    for(; y<=y2; y++) {
   b8b0a:	42ba      	cmp	r2, r7
   b8b0c:	dc93      	bgt.n	b8a36 <_ZN12Adafruit_GFX12fillTriangleEsssssst+0x9e>
        a   = x1 + sa / dy12;
   b8b0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
        b   = x0 + sb / dy02;
   b8b10:	9802      	ldr	r0, [sp, #8]
        a   = x1 + sa / dy12;
   b8b12:	fb94 f1f3 	sdiv	r1, r4, r3
   b8b16:	9b03      	ldr	r3, [sp, #12]
        writeFastHLine(a, y, b-a+1, color);
   b8b18:	9205      	str	r2, [sp, #20]
        a   = x1 + sa / dy12;
   b8b1a:	4419      	add	r1, r3
        b   = x0 + sb / dy02;
   b8b1c:	9b06      	ldr	r3, [sp, #24]
   b8b1e:	fb96 f3f3 	sdiv	r3, r6, r3
   b8b22:	4403      	add	r3, r0
        a   = x1 + sa / dy12;
   b8b24:	b209      	sxth	r1, r1
        b   = x0 + sb / dy02;
   b8b26:	b21b      	sxth	r3, r3
        if(a > b) _swap_int16_t(a,b);
   b8b28:	4299      	cmp	r1, r3
        sa += dx12;
   b8b2a:	9807      	ldr	r0, [sp, #28]
        if(a > b) _swap_int16_t(a,b);
   b8b2c:	bfc8      	it	gt
   b8b2e:	468c      	movgt	ip, r1
        sa += dx12;
   b8b30:	4404      	add	r4, r0
        if(a > b) _swap_int16_t(a,b);
   b8b32:	bfc8      	it	gt
   b8b34:	4619      	movgt	r1, r3
        writeFastHLine(a, y, b-a+1, color);
   b8b36:	9804      	ldr	r0, [sp, #16]
   b8b38:	9000      	str	r0, [sp, #0]
        if(a > b) _swap_int16_t(a,b);
   b8b3a:	bfc8      	it	gt
   b8b3c:	4663      	movgt	r3, ip
        writeFastHLine(a, y, b-a+1, color);
   b8b3e:	f8db 0000 	ldr.w	r0, [fp]
   b8b42:	3301      	adds	r3, #1
   b8b44:	1a5b      	subs	r3, r3, r1
   b8b46:	f8d0 9024 	ldr.w	r9, [r0, #36]	; 0x24
   b8b4a:	b21b      	sxth	r3, r3
   b8b4c:	4658      	mov	r0, fp
   b8b4e:	47c8      	blx	r9
   b8b50:	9a05      	ldr	r2, [sp, #20]
   b8b52:	3201      	adds	r2, #1
        sb += dx02;
   b8b54:	4446      	add	r6, r8
    for(; y<=y2; y++) {
   b8b56:	b212      	sxth	r2, r2
   b8b58:	e7d7      	b.n	b8b0a <_ZN12Adafruit_GFX12fillTriangleEsssssst+0x172>
    if (y1 > y2) {
   b8b5a:	42be      	cmp	r6, r7
   b8b5c:	f73f af3c 	bgt.w	b89d8 <_ZN12Adafruit_GFX12fillTriangleEsssssst+0x40>
   b8b60:	4633      	mov	r3, r6
   b8b62:	461c      	mov	r4, r3
   b8b64:	4616      	mov	r6, r2
   b8b66:	462b      	mov	r3, r5
   b8b68:	460d      	mov	r5, r1
   b8b6a:	e733      	b.n	b89d4 <_ZN12Adafruit_GFX12fillTriangleEsssssst+0x3c>

000b8b6c <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>:
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b8b6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8b70:	b089      	sub	sp, #36	; 0x24
   b8b72:	e9cd 1202 	strd	r1, r2, [sp, #8]
    startWrite();
   b8b76:	6802      	ldr	r2, [r0, #0]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b8b78:	f9bd 8048 	ldrsh.w	r8, [sp, #72]	; 0x48
   b8b7c:	9304      	str	r3, [sp, #16]
   b8b7e:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
    startWrite();
   b8b82:	6952      	ldr	r2, [r2, #20]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b8b84:	9305      	str	r3, [sp, #20]
   b8b86:	f8bd a050 	ldrh.w	sl, [sp, #80]	; 0x50
   b8b8a:	4604      	mov	r4, r0
    startWrite();
   b8b8c:	4790      	blx	r2
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   b8b8e:	f118 0207 	adds.w	r2, r8, #7
    startWrite();
   b8b92:	f04f 0600 	mov.w	r6, #0
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   b8b96:	bf48      	it	mi
   b8b98:	f108 020e 	addmi.w	r2, r8, #14
   b8b9c:	ea4f 0be2 	mov.w	fp, r2, asr #3
    startWrite();
   b8ba0:	9601      	str	r6, [sp, #4]
    uint8_t byte = 0;
   b8ba2:	4635      	mov	r5, r6
   b8ba4:	9b03      	ldr	r3, [sp, #12]
   b8ba6:	9a01      	ldr	r2, [sp, #4]
    for(int16_t j=0; j<h; j++, y++) {
   b8ba8:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
   b8bac:	189a      	adds	r2, r3, r2
   b8bae:	9b05      	ldr	r3, [sp, #20]
   b8bb0:	428b      	cmp	r3, r1
   b8bb2:	b212      	sxth	r2, r2
   b8bb4:	dd27      	ble.n	b8c06 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x9a>
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b8bb6:	9b04      	ldr	r3, [sp, #16]
   b8bb8:	4433      	add	r3, r6
    for(int16_t j=0; j<h; j++, y++) {
   b8bba:	f04f 0900 	mov.w	r9, #0
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b8bbe:	9306      	str	r3, [sp, #24]
   b8bc0:	fa0f f089 	sxth.w	r0, r9
        for(int16_t i=0; i<w; i++) {
   b8bc4:	4580      	cmp	r8, r0
   b8bc6:	fa1f f189 	uxth.w	r1, r9
   b8bca:	dd17      	ble.n	b8bfc <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x90>
            if(i & 7) byte <<= 1;
   b8bcc:	074f      	lsls	r7, r1, #29
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b8bce:	bf05      	ittet	eq
   b8bd0:	9b06      	ldreq	r3, [sp, #24]
   b8bd2:	10c0      	asreq	r0, r0, #3
            if(i & 7) byte <<= 1;
   b8bd4:	006d      	lslne	r5, r5, #1
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b8bd6:	5c1d      	ldrbeq	r5, [r3, r0]
            if(i & 7) byte <<= 1;
   b8bd8:	bf18      	it	ne
   b8bda:	b2ed      	uxtbne	r5, r5
            if(byte & 0x80) writePixel(x+i, y, color);
   b8bdc:	062b      	lsls	r3, r5, #24
   b8bde:	d50a      	bpl.n	b8bf6 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x8a>
   b8be0:	9b02      	ldr	r3, [sp, #8]
   b8be2:	6820      	ldr	r0, [r4, #0]
   b8be4:	9207      	str	r2, [sp, #28]
   b8be6:	4419      	add	r1, r3
   b8be8:	6983      	ldr	r3, [r0, #24]
   b8bea:	b209      	sxth	r1, r1
   b8bec:	461f      	mov	r7, r3
   b8bee:	4620      	mov	r0, r4
   b8bf0:	4653      	mov	r3, sl
   b8bf2:	47b8      	blx	r7
   b8bf4:	9a07      	ldr	r2, [sp, #28]
        for(int16_t i=0; i<w; i++) {
   b8bf6:	f109 0901 	add.w	r9, r9, #1
   b8bfa:	e7e1      	b.n	b8bc0 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x54>
    for(int16_t j=0; j<h; j++, y++) {
   b8bfc:	9b01      	ldr	r3, [sp, #4]
   b8bfe:	3301      	adds	r3, #1
   b8c00:	9301      	str	r3, [sp, #4]
   b8c02:	445e      	add	r6, fp
   b8c04:	e7ce      	b.n	b8ba4 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x38>
    endWrite();
   b8c06:	6823      	ldr	r3, [r4, #0]
   b8c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b8c0a:	4620      	mov	r0, r4
}
   b8c0c:	b009      	add	sp, #36	; 0x24
   b8c0e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    endWrite();
   b8c12:	4718      	bx	r3

000b8c14 <_ZN12Adafruit_GFX8drawCharEsshtthh>:
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   b8c14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8c18:	ed2d 8b02 	vpush	{d8}
   b8c1c:	b091      	sub	sp, #68	; 0x44
   b8c1e:	4616      	mov	r6, r2
    if(!gfxFont) { // 'Classic' built-in font
   b8c20:	6a02      	ldr	r2, [r0, #32]
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   b8c22:	f8bd 8074 	ldrh.w	r8, [sp, #116]	; 0x74
   b8c26:	f89d 5078 	ldrb.w	r5, [sp, #120]	; 0x78
   b8c2a:	f89d 407c 	ldrb.w	r4, [sp, #124]	; 0x7c
   b8c2e:	9103      	str	r1, [sp, #12]
   b8c30:	461f      	mov	r7, r3
   b8c32:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
   b8c36:	9304      	str	r3, [sp, #16]
   b8c38:	4683      	mov	fp, r0
    if(!gfxFont) { // 'Classic' built-in font
   b8c3a:	2a00      	cmp	r2, #0
   b8c3c:	f040 80c5 	bne.w	b8dca <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1b6>
        if((x >= _width)            || // Clip right
   b8c40:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b8c44:	428b      	cmp	r3, r1
   b8c46:	f340 814c 	ble.w	b8ee2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
   b8c4a:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
   b8c4e:	42b3      	cmp	r3, r6
   b8c50:	f340 8147 	ble.w	b8ee2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((x + 6 * size_x - 1) < 0) || // Clip left
   b8c54:	2306      	movs	r3, #6
   b8c56:	fb13 1305 	smlabb	r3, r3, r5, r1
           (y >= _height)           || // Clip bottom
   b8c5a:	2b00      	cmp	r3, #0
   b8c5c:	f340 8141 	ble.w	b8ee2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((y + 8 * size_y - 1) < 0))   // Clip top
   b8c60:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
           ((x + 6 * size_x - 1) < 0) || // Clip left
   b8c64:	2b00      	cmp	r3, #0
   b8c66:	f340 813c 	ble.w	b8ee2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
        if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
   b8c6a:	7f03      	ldrb	r3, [r0, #28]
   b8c6c:	b91b      	cbnz	r3, b8c76 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x62>
   b8c6e:	2faf      	cmp	r7, #175	; 0xaf
   b8c70:	bf84      	itt	hi
   b8c72:	3701      	addhi	r7, #1
   b8c74:	b2ff      	uxtbhi	r7, r7
        startWrite();
   b8c76:	f8db 3000 	ldr.w	r3, [fp]
   b8c7a:	4658      	mov	r0, fp
   b8c7c:	695b      	ldr	r3, [r3, #20]
   b8c7e:	4798      	blx	r3
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b8c80:	2205      	movs	r2, #5
   b8c82:	9209      	str	r2, [sp, #36]	; 0x24
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   b8c84:	2200      	movs	r2, #0
   b8c86:	9205      	str	r2, [sp, #20]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b8c88:	4a98      	ldr	r2, [pc, #608]	; (b8eec <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2d8>)
   b8c8a:	eb07 0387 	add.w	r3, r7, r7, lsl #2
   b8c8e:	18d3      	adds	r3, r2, r3
   b8c90:	930c      	str	r3, [sp, #48]	; 0x30
                        writePixel(x+i, y+j, color);
   b8c92:	b2b3      	uxth	r3, r6
   b8c94:	9306      	str	r3, [sp, #24]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b8c96:	9a05      	ldr	r2, [sp, #20]
   b8c98:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b8c9a:	5c9b      	ldrb	r3, [r3, r2]
   b8c9c:	9307      	str	r3, [sp, #28]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b8c9e:	b2ab      	uxth	r3, r5
   b8ca0:	930b      	str	r3, [sp, #44]	; 0x2c
   b8ca2:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   b8ca6:	9308      	str	r3, [sp, #32]
   b8ca8:	9b03      	ldr	r3, [sp, #12]
   b8caa:	fb02 f905 	mul.w	r9, r2, r5
   b8cae:	fa19 f983 	uxtah	r9, r9, r3
   b8cb2:	fa0f f389 	sxth.w	r3, r9
   b8cb6:	ee08 3a10 	vmov	s16, r3
   b8cba:	2308      	movs	r3, #8
   b8cbc:	930a      	str	r3, [sp, #40]	; 0x28
                        writePixel(x+i, y+j, bg);
   b8cbe:	9b03      	ldr	r3, [sp, #12]
   b8cc0:	eb02 0a03 	add.w	sl, r2, r3
            for(int8_t j=0; j<8; j++, line >>= 1) {
   b8cc4:	f04f 0900 	mov.w	r9, #0
                        writePixel(x+i, y+j, bg);
   b8cc8:	fa0f fa8a 	sxth.w	sl, sl
                if(line & 1) {
   b8ccc:	9a07      	ldr	r2, [sp, #28]
                        writePixel(x+i, y+j, color);
   b8cce:	f8db 3000 	ldr.w	r3, [fp]
                if(line & 1) {
   b8cd2:	07d2      	lsls	r2, r2, #31
   b8cd4:	d552      	bpl.n	b8d7c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x168>
                    if(size_x == 1 && size_y == 1)
   b8cd6:	2d01      	cmp	r5, #1
                        writePixel(x+i, y+j, color);
   b8cd8:	fa1f f289 	uxth.w	r2, r9
                    if(size_x == 1 && size_y == 1)
   b8cdc:	d13e      	bne.n	b8d5c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
   b8cde:	2c01      	cmp	r4, #1
   b8ce0:	d13c      	bne.n	b8d5c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
                        writePixel(x+i, y+j, color);
   b8ce2:	699b      	ldr	r3, [r3, #24]
   b8ce4:	9906      	ldr	r1, [sp, #24]
   b8ce6:	461f      	mov	r7, r3
   b8ce8:	9b04      	ldr	r3, [sp, #16]
   b8cea:	440a      	add	r2, r1
                        writePixel(x+i, y+j, bg);
   b8cec:	b212      	sxth	r2, r2
   b8cee:	4651      	mov	r1, sl
   b8cf0:	4658      	mov	r0, fp
   b8cf2:	47b8      	blx	r7
            for(int8_t j=0; j<8; j++, line >>= 1) {
   b8cf4:	f109 0301 	add.w	r3, r9, #1
   b8cf8:	fa4f f983 	sxtb.w	r9, r3
   b8cfc:	9b07      	ldr	r3, [sp, #28]
   b8cfe:	085b      	lsrs	r3, r3, #1
   b8d00:	9307      	str	r3, [sp, #28]
   b8d02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b8d04:	3b01      	subs	r3, #1
   b8d06:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b8d0a:	930a      	str	r3, [sp, #40]	; 0x28
   b8d0c:	d1de      	bne.n	b8ccc <_ZN12Adafruit_GFX8drawCharEsshtthh+0xb8>
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   b8d0e:	9f05      	ldr	r7, [sp, #20]
   b8d10:	3701      	adds	r7, #1
   b8d12:	b27b      	sxtb	r3, r7
   b8d14:	9305      	str	r3, [sp, #20]
   b8d16:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b8d18:	3b01      	subs	r3, #1
   b8d1a:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b8d1e:	9309      	str	r3, [sp, #36]	; 0x24
   b8d20:	d1b9      	bne.n	b8c96 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x82>
        if(bg != color) { // If opaque, draw vertical line for last column
   b8d22:	9b04      	ldr	r3, [sp, #16]
   b8d24:	4543      	cmp	r3, r8
   b8d26:	d00f      	beq.n	b8d48 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
            if(size_x == 1 && size_y == 1) writeFastVLine(x+5, y, 8, bg);
   b8d28:	2d01      	cmp	r5, #1
   b8d2a:	f8db 3000 	ldr.w	r3, [fp]
   b8d2e:	d13b      	bne.n	b8da8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   b8d30:	2c01      	cmp	r4, #1
   b8d32:	d139      	bne.n	b8da8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   b8d34:	9908      	ldr	r1, [sp, #32]
   b8d36:	f8cd 8000 	str.w	r8, [sp]
   b8d3a:	3105      	adds	r1, #5
   b8d3c:	6a1c      	ldr	r4, [r3, #32]
   b8d3e:	4632      	mov	r2, r6
   b8d40:	2308      	movs	r3, #8
   b8d42:	b209      	sxth	r1, r1
   b8d44:	4658      	mov	r0, fp
   b8d46:	47a0      	blx	r4
        endWrite();
   b8d48:	f8db 3000 	ldr.w	r3, [fp]
   b8d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b8d4e:	4658      	mov	r0, fp
}
   b8d50:	b011      	add	sp, #68	; 0x44
   b8d52:	ecbd 8b02 	vpop	{d8}
   b8d56:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        endWrite();
   b8d5a:	4718      	bx	r3
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, color);
   b8d5c:	9906      	ldr	r1, [sp, #24]
   b8d5e:	fb14 f202 	smulbb	r2, r4, r2
   b8d62:	440a      	add	r2, r1
   b8d64:	9904      	ldr	r1, [sp, #16]
   b8d66:	9101      	str	r1, [sp, #4]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b8d68:	9400      	str	r4, [sp, #0]
   b8d6a:	69db      	ldr	r3, [r3, #28]
   b8d6c:	ee18 1a10 	vmov	r1, s16
   b8d70:	461f      	mov	r7, r3
   b8d72:	b212      	sxth	r2, r2
   b8d74:	462b      	mov	r3, r5
   b8d76:	4658      	mov	r0, fp
   b8d78:	47b8      	blx	r7
   b8d7a:	e7bb      	b.n	b8cf4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                } else if(bg != color) {
   b8d7c:	9a04      	ldr	r2, [sp, #16]
   b8d7e:	4542      	cmp	r2, r8
   b8d80:	d0b8      	beq.n	b8cf4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                    if(size_x == 1 && size_y == 1)
   b8d82:	2d01      	cmp	r5, #1
                        writePixel(x+i, y+j, color);
   b8d84:	fa1f f289 	uxth.w	r2, r9
                    if(size_x == 1 && size_y == 1)
   b8d88:	d107      	bne.n	b8d9a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
   b8d8a:	2c01      	cmp	r4, #1
   b8d8c:	d105      	bne.n	b8d9a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
                        writePixel(x+i, y+j, bg);
   b8d8e:	699b      	ldr	r3, [r3, #24]
   b8d90:	9906      	ldr	r1, [sp, #24]
   b8d92:	461f      	mov	r7, r3
   b8d94:	440a      	add	r2, r1
   b8d96:	4643      	mov	r3, r8
   b8d98:	e7a8      	b.n	b8cec <_ZN12Adafruit_GFX8drawCharEsshtthh+0xd8>
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b8d9a:	9906      	ldr	r1, [sp, #24]
   b8d9c:	f8cd 8004 	str.w	r8, [sp, #4]
   b8da0:	fb14 f202 	smulbb	r2, r4, r2
   b8da4:	440a      	add	r2, r1
   b8da6:	e7df      	b.n	b8d68 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x154>
            else          writeFillRect(x+5*size_x, y, size_x, 8*size_y, bg);
   b8da8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b8daa:	f8cd 8004 	str.w	r8, [sp, #4]
   b8dae:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   b8db2:	9a08      	ldr	r2, [sp, #32]
   b8db4:	00e4      	lsls	r4, r4, #3
   b8db6:	440a      	add	r2, r1
   b8db8:	4611      	mov	r1, r2
   b8dba:	9400      	str	r4, [sp, #0]
   b8dbc:	69dc      	ldr	r4, [r3, #28]
   b8dbe:	4632      	mov	r2, r6
   b8dc0:	462b      	mov	r3, r5
   b8dc2:	b209      	sxth	r1, r1
   b8dc4:	4658      	mov	r0, fp
   b8dc6:	47a0      	blx	r4
        endWrite();
   b8dc8:	e7be      	b.n	b8d48 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   b8dca:	7a13      	ldrb	r3, [r2, #8]
    return gfxFont->glyph + c;
   b8dcc:	6851      	ldr	r1, [r2, #4]
    return gfxFont->bitmap;
   b8dce:	6812      	ldr	r2, [r2, #0]
   b8dd0:	920b      	str	r2, [sp, #44]	; 0x2c
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   b8dd2:	1aff      	subs	r7, r7, r3
    return gfxFont->glyph + c;
   b8dd4:	b2ff      	uxtb	r7, r7
   b8dd6:	eb01 03c7 	add.w	r3, r1, r7, lsl #3
        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
   b8dda:	f831 2037 	ldrh.w	r2, [r1, r7, lsl #3]
   b8dde:	9206      	str	r2, [sp, #24]
        uint8_t  w  = pgm_read_byte(&glyph->width),
   b8de0:	789a      	ldrb	r2, [r3, #2]
   b8de2:	9209      	str	r2, [sp, #36]	; 0x24
                 h  = pgm_read_byte(&glyph->height);
   b8de4:	78da      	ldrb	r2, [r3, #3]
   b8de6:	920c      	str	r2, [sp, #48]	; 0x30
        if(size_x > 1 || size_y > 1) {
   b8de8:	2d01      	cmp	r5, #1
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   b8dea:	f993 2005 	ldrsb.w	r2, [r3, #5]
                 yo = pgm_read_byte(&glyph->yOffset);
   b8dee:	f993 a006 	ldrsb.w	sl, [r3, #6]
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   b8df2:	920a      	str	r2, [sp, #40]	; 0x28
        if(size_x > 1 || size_y > 1) {
   b8df4:	d801      	bhi.n	b8dfa <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1e6>
   b8df6:	2c01      	cmp	r4, #1
   b8df8:	d957      	bls.n	b8eaa <_ZN12Adafruit_GFX8drawCharEsshtthh+0x296>
            xo16 = xo;
   b8dfa:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
   b8dfe:	9308      	str	r3, [sp, #32]
            yo16 = yo;
   b8e00:	fa0f f38a 	sxth.w	r3, sl
   b8e04:	9307      	str	r3, [sp, #28]
        startWrite();
   b8e06:	f8db 3000 	ldr.w	r3, [fp]
   b8e0a:	4658      	mov	r0, fp
   b8e0c:	695b      	ldr	r3, [r3, #20]
   b8e0e:	4798      	blx	r3
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b8e10:	b2b3      	uxth	r3, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   b8e12:	f04f 0800 	mov.w	r8, #0
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b8e16:	930e      	str	r3, [sp, #56]	; 0x38
                        writePixel(x+xo+xx, y+yo+yy, color);
   b8e18:	fa1a f386 	uxtah	r3, sl, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   b8e1c:	46c1      	mov	r9, r8
        for(yy=0; yy<h; yy++) {
   b8e1e:	4647      	mov	r7, r8
                        writePixel(x+xo+xx, y+yo+yy, color);
   b8e20:	930f      	str	r3, [sp, #60]	; 0x3c
        for(yy=0; yy<h; yy++) {
   b8e22:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b8e24:	429f      	cmp	r7, r3
   b8e26:	d28f      	bcs.n	b8d48 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b8e28:	9b07      	ldr	r3, [sp, #28]
   b8e2a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   b8e2c:	443b      	add	r3, r7
   b8e2e:	fb03 2304 	mla	r3, r3, r4, r2
            for(xx=0; xx<w; xx++) {
   b8e32:	2200      	movs	r2, #0
   b8e34:	9205      	str	r2, [sp, #20]
                        writePixel(x+xo+xx, y+yo+yy, color);
   b8e36:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b8e38:	b21b      	sxth	r3, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   b8e3a:	eb02 0a07 	add.w	sl, r2, r7
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b8e3e:	ee08 3a10 	vmov	s16, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   b8e42:	fa0f fa8a 	sxth.w	sl, sl
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b8e46:	4643      	mov	r3, r8
            for(xx=0; xx<w; xx++) {
   b8e48:	9a09      	ldr	r2, [sp, #36]	; 0x24
   b8e4a:	9905      	ldr	r1, [sp, #20]
   b8e4c:	4291      	cmp	r1, r2
   b8e4e:	d241      	bcs.n	b8ed4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2c0>
                if(!(bit++ & 7)) {
   b8e50:	1c5a      	adds	r2, r3, #1
   b8e52:	b2d2      	uxtb	r2, r2
   b8e54:	075b      	lsls	r3, r3, #29
   b8e56:	920d      	str	r2, [sp, #52]	; 0x34
   b8e58:	d107      	bne.n	b8e6a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x256>
                    bits = pgm_read_byte(&bitmap[bo++]);
   b8e5a:	9b06      	ldr	r3, [sp, #24]
   b8e5c:	9906      	ldr	r1, [sp, #24]
   b8e5e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b8e60:	3301      	adds	r3, #1
   b8e62:	b29b      	uxth	r3, r3
   b8e64:	f812 9001 	ldrb.w	r9, [r2, r1]
   b8e68:	9306      	str	r3, [sp, #24]
                if(bits & 0x80) {
   b8e6a:	f019 0f80 	tst.w	r9, #128	; 0x80
   b8e6e:	d012      	beq.n	b8e96 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
                    if(size_x == 1 && size_y == 1) {
   b8e70:	2d01      	cmp	r5, #1
                        writePixel(x+xo+xx, y+yo+yy, color);
   b8e72:	f8db 3000 	ldr.w	r3, [fp]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b8e76:	f8bd 100c 	ldrh.w	r1, [sp, #12]
                    if(size_x == 1 && size_y == 1) {
   b8e7a:	d11a      	bne.n	b8eb2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
   b8e7c:	2c01      	cmp	r4, #1
   b8e7e:	d118      	bne.n	b8eb2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
                        writePixel(x+xo+xx, y+yo+yy, color);
   b8e80:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   b8e82:	699b      	ldr	r3, [r3, #24]
   b8e84:	4411      	add	r1, r2
   b8e86:	9a05      	ldr	r2, [sp, #20]
   b8e88:	4411      	add	r1, r2
   b8e8a:	461e      	mov	r6, r3
   b8e8c:	4652      	mov	r2, sl
   b8e8e:	9b04      	ldr	r3, [sp, #16]
   b8e90:	b209      	sxth	r1, r1
   b8e92:	4658      	mov	r0, fp
   b8e94:	47b0      	blx	r6
            for(xx=0; xx<w; xx++) {
   b8e96:	9e05      	ldr	r6, [sp, #20]
   b8e98:	3601      	adds	r6, #1
   b8e9a:	b2f3      	uxtb	r3, r6
                bits <<= 1;
   b8e9c:	ea4f 0949 	mov.w	r9, r9, lsl #1
            for(xx=0; xx<w; xx++) {
   b8ea0:	9305      	str	r3, [sp, #20]
                bits <<= 1;
   b8ea2:	fa5f f989 	uxtb.w	r9, r9
                if(!(bit++ & 7)) {
   b8ea6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
            for(xx=0; xx<w; xx++) {
   b8ea8:	e7ce      	b.n	b8e48 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x234>
        int16_t  xo16 = 0, yo16 = 0;
   b8eaa:	2300      	movs	r3, #0
   b8eac:	e9cd 3307 	strd	r3, r3, [sp, #28]
   b8eb0:	e7a9      	b.n	b8e06 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1f2>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b8eb2:	9805      	ldr	r0, [sp, #20]
   b8eb4:	9a08      	ldr	r2, [sp, #32]
   b8eb6:	4402      	add	r2, r0
   b8eb8:	fb02 1105 	mla	r1, r2, r5, r1
   b8ebc:	9a04      	ldr	r2, [sp, #16]
   b8ebe:	e9cd 4200 	strd	r4, r2, [sp]
   b8ec2:	69db      	ldr	r3, [r3, #28]
   b8ec4:	ee18 2a10 	vmov	r2, s16
   b8ec8:	461e      	mov	r6, r3
   b8eca:	b209      	sxth	r1, r1
   b8ecc:	462b      	mov	r3, r5
   b8ece:	4658      	mov	r0, fp
   b8ed0:	47b0      	blx	r6
   b8ed2:	e7e0      	b.n	b8e96 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
   b8ed4:	9b09      	ldr	r3, [sp, #36]	; 0x24
        for(yy=0; yy<h; yy++) {
   b8ed6:	3701      	adds	r7, #1
   b8ed8:	4498      	add	r8, r3
   b8eda:	fa5f f888 	uxtb.w	r8, r8
   b8ede:	b2ff      	uxtb	r7, r7
   b8ee0:	e79f      	b.n	b8e22 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x20e>
}
   b8ee2:	b011      	add	sp, #68	; 0x44
   b8ee4:	ecbd 8b02 	vpop	{d8}
   b8ee8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b8eec:	000bce94 	.word	0x000bce94

000b8ef0 <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
   b8ef0:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(!gfxFont) { // 'Classic' built-in font
   b8ef2:	6a02      	ldr	r2, [r0, #32]
size_t Adafruit_GFX::write(uint8_t c) {
   b8ef4:	b085      	sub	sp, #20
   b8ef6:	4604      	mov	r4, r0
   b8ef8:	460b      	mov	r3, r1
    if(!gfxFont) { // 'Classic' built-in font
   b8efa:	2a00      	cmp	r2, #0
   b8efc:	d134      	bne.n	b8f68 <_ZN12Adafruit_GFX5writeEh+0x78>
        if(c == '\n') {                        // Newline?
   b8efe:	290a      	cmp	r1, #10
   b8f00:	d108      	bne.n	b8f14 <_ZN12Adafruit_GFX5writeEh+0x24>
            cursor_y += textsize_y * 8;        // advance y one line
   b8f02:	8a43      	ldrh	r3, [r0, #18]
            cursor_x  = 0;                     // Reset x to zero,
   b8f04:	8202      	strh	r2, [r0, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   b8f06:	7e42      	ldrb	r2, [r0, #25]
   b8f08:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
            cursor_y += (int16_t)textsize_y *
   b8f0c:	8263      	strh	r3, [r4, #18]
}
   b8f0e:	2001      	movs	r0, #1
   b8f10:	b005      	add	sp, #20
   b8f12:	bdf0      	pop	{r4, r5, r6, r7, pc}
        } else if(c != '\r') {                 // Ignore carriage returns
   b8f14:	290d      	cmp	r1, #13
   b8f16:	d0fa      	beq.n	b8f0e <_ZN12Adafruit_GFX5writeEh+0x1e>
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b8f18:	7ee1      	ldrb	r1, [r4, #27]
   b8f1a:	7e00      	ldrb	r0, [r0, #24]
            cursor_y += textsize_y * 8;        // advance y one line
   b8f1c:	7e65      	ldrb	r5, [r4, #25]
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b8f1e:	b171      	cbz	r1, b8f3e <_ZN12Adafruit_GFX5writeEh+0x4e>
   b8f20:	f9b4 6010 	ldrsh.w	r6, [r4, #16]
   b8f24:	2106      	movs	r1, #6
   b8f26:	fb11 6100 	smlabb	r1, r1, r0, r6
   b8f2a:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
   b8f2e:	42b1      	cmp	r1, r6
            cursor_y += textsize_y * 8;        // advance y one line
   b8f30:	bfc1      	itttt	gt
   b8f32:	f9b4 1012 	ldrshgt.w	r1, [r4, #18]
                cursor_x  = 0;                 // Reset x to zero,
   b8f36:	8222      	strhgt	r2, [r4, #16]
                cursor_y += textsize_y * 8;    // advance y one line
   b8f38:	eb01 02c5 	addgt.w	r2, r1, r5, lsl #3
   b8f3c:	8262      	strhgt	r2, [r4, #18]
            drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   b8f3e:	8ae2      	ldrh	r2, [r4, #22]
   b8f40:	9201      	str	r2, [sp, #4]
   b8f42:	8aa2      	ldrh	r2, [r4, #20]
   b8f44:	9200      	str	r2, [sp, #0]
   b8f46:	e9cd 0502 	strd	r0, r5, [sp, #8]
   b8f4a:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   b8f4e:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b8f52:	4620      	mov	r0, r4
   b8f54:	f7ff fe5e 	bl	b8c14 <_ZN12Adafruit_GFX8drawCharEsshtthh>
            cursor_x += textsize_x * 6;          // Advance x one char
   b8f58:	7e23      	ldrb	r3, [r4, #24]
   b8f5a:	8a22      	ldrh	r2, [r4, #16]
   b8f5c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   b8f60:	eb02 0343 	add.w	r3, r2, r3, lsl #1
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   b8f64:	8223      	strh	r3, [r4, #16]
   b8f66:	e7d2      	b.n	b8f0e <_ZN12Adafruit_GFX5writeEh+0x1e>
        if(c == '\n') {
   b8f68:	290a      	cmp	r1, #10
   b8f6a:	d107      	bne.n	b8f7c <_ZN12Adafruit_GFX5writeEh+0x8c>
            cursor_x  = 0;
   b8f6c:	2300      	movs	r3, #0
   b8f6e:	8203      	strh	r3, [r0, #16]
            cursor_y += (int16_t)textsize_y *
   b8f70:	7e41      	ldrb	r1, [r0, #25]
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   b8f72:	7a92      	ldrb	r2, [r2, #10]
            cursor_y += (int16_t)textsize_y *
   b8f74:	8a43      	ldrh	r3, [r0, #18]
   b8f76:	fb01 3302 	mla	r3, r1, r2, r3
   b8f7a:	e7c7      	b.n	b8f0c <_ZN12Adafruit_GFX5writeEh+0x1c>
        } else if(c != '\r') {
   b8f7c:	290d      	cmp	r1, #13
   b8f7e:	d0c6      	beq.n	b8f0e <_ZN12Adafruit_GFX5writeEh+0x1e>
            uint8_t first = pgm_read_byte(&gfxFont->first);
   b8f80:	7a15      	ldrb	r5, [r2, #8]
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
   b8f82:	42a9      	cmp	r1, r5
   b8f84:	d3c3      	bcc.n	b8f0e <_ZN12Adafruit_GFX5writeEh+0x1e>
   b8f86:	7a51      	ldrb	r1, [r2, #9]
   b8f88:	4299      	cmp	r1, r3
   b8f8a:	d3c0      	bcc.n	b8f0e <_ZN12Adafruit_GFX5writeEh+0x1e>
    return gfxFont->glyph + c;
   b8f8c:	6851      	ldr	r1, [r2, #4]
                GFXglyph *glyph  = pgm_read_glyph_ptr(gfxFont, c - first);
   b8f8e:	1b5d      	subs	r5, r3, r5
    return gfxFont->glyph + c;
   b8f90:	b2ed      	uxtb	r5, r5
   b8f92:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
                uint8_t   w     = pgm_read_byte(&glyph->width),
   b8f96:	78a8      	ldrb	r0, [r5, #2]
                if((w > 0) && (h > 0)) { // Is there an associated bitmap?
   b8f98:	b328      	cbz	r0, b8fe6 <_ZN12Adafruit_GFX5writeEh+0xf6>
   b8f9a:	78e9      	ldrb	r1, [r5, #3]
   b8f9c:	b319      	cbz	r1, b8fe6 <_ZN12Adafruit_GFX5writeEh+0xf6>
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   b8f9e:	7ee1      	ldrb	r1, [r4, #27]
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b8fa0:	7e26      	ldrb	r6, [r4, #24]
            cursor_y += textsize_y * 8;        // advance y one line
   b8fa2:	7e67      	ldrb	r7, [r4, #25]
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   b8fa4:	b191      	cbz	r1, b8fcc <_ZN12Adafruit_GFX5writeEh+0xdc>
   b8fa6:	f995 1005 	ldrsb.w	r1, [r5, #5]
   b8faa:	4408      	add	r0, r1
   b8fac:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b8fb0:	fb06 1100 	mla	r1, r6, r0, r1
   b8fb4:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   b8fb8:	4281      	cmp	r1, r0
   b8fba:	dd07      	ble.n	b8fcc <_ZN12Adafruit_GFX5writeEh+0xdc>
                        cursor_x  = 0;
   b8fbc:	2000      	movs	r0, #0
   b8fbe:	8220      	strh	r0, [r4, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   b8fc0:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   b8fc4:	7a92      	ldrb	r2, [r2, #10]
                        cursor_y += (int16_t)textsize_y *
   b8fc6:	fb02 1207 	mla	r2, r2, r7, r1
   b8fca:	8262      	strh	r2, [r4, #18]
                    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   b8fcc:	8ae2      	ldrh	r2, [r4, #22]
   b8fce:	9201      	str	r2, [sp, #4]
   b8fd0:	8aa2      	ldrh	r2, [r4, #20]
   b8fd2:	9200      	str	r2, [sp, #0]
   b8fd4:	e9cd 6702 	strd	r6, r7, [sp, #8]
   b8fd8:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   b8fdc:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b8fe0:	4620      	mov	r0, r4
   b8fe2:	f7ff fe17 	bl	b8c14 <_ZN12Adafruit_GFX8drawCharEsshtthh>
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   b8fe6:	7929      	ldrb	r1, [r5, #4]
   b8fe8:	7e22      	ldrb	r2, [r4, #24]
   b8fea:	8a23      	ldrh	r3, [r4, #16]
   b8fec:	fb01 3302 	mla	r3, r1, r2, r3
   b8ff0:	e7b8      	b.n	b8f64 <_ZN12Adafruit_GFX5writeEh+0x74>

000b8ff2 <_ZN12Adafruit_GFX11setTextSizeEh>:
    textsize_x = (s_x > 0) ? s_x : 1;
   b8ff2:	2901      	cmp	r1, #1
   b8ff4:	bf38      	it	cc
   b8ff6:	2101      	movcc	r1, #1
   b8ff8:	7601      	strb	r1, [r0, #24]
    textsize_y = (s_y > 0) ? s_y : 1;
   b8ffa:	7641      	strb	r1, [r0, #25]
}
   b8ffc:	4770      	bx	lr

000b8ffe <_ZN7MFRC522C1Ehh>:

/**
 * Constructor.
 * Prepares the output pins.
 */
MFRC522::MFRC522(	byte chipSelectPin,		///< Arduino pin connected to MFRC522's SPI slave select input (Pin 24, NSS, active low)
   b8ffe:	b538      	push	{r3, r4, r5, lr}
   b9000:	4604      	mov	r4, r0
   b9002:	4608      	mov	r0, r1
					byte resetPowerDownPin	///< Arduino pin connected to MFRC522's reset and power down input (Pin 6, NRSTPD, active low)
				) {
	// Set the chipSelectPin as digital output, do not select the slave yet
	_chipSelectPin = chipSelectPin;
   b9004:	7321      	strb	r1, [r4, #12]
	pinMode(_chipSelectPin, OUTPUT);
   b9006:	2101      	movs	r1, #1
MFRC522::MFRC522(	byte chipSelectPin,		///< Arduino pin connected to MFRC522's SPI slave select input (Pin 24, NSS, active low)
   b9008:	4615      	mov	r5, r2
	pinMode(_chipSelectPin, OUTPUT);
   b900a:	f002 fc33 	bl	bb874 <pinMode>
	digitalWrite(_chipSelectPin, HIGH);
   b900e:	7b20      	ldrb	r0, [r4, #12]
   b9010:	2101      	movs	r1, #1
   b9012:	f002 fc40 	bl	bb896 <digitalWrite>
	
	// Set the resetPowerDownPin as digital output, do not reset or power down.
	_resetPowerDownPin = resetPowerDownPin;
	pinMode(_resetPowerDownPin, OUTPUT);
   b9016:	4628      	mov	r0, r5
	_resetPowerDownPin = resetPowerDownPin;
   b9018:	7365      	strb	r5, [r4, #13]
	pinMode(_resetPowerDownPin, OUTPUT);
   b901a:	2101      	movs	r1, #1
   b901c:	f002 fc2a 	bl	bb874 <pinMode>
	digitalWrite(_resetPowerDownPin, LOW);
   b9020:	7b60      	ldrb	r0, [r4, #13]
   b9022:	2100      	movs	r1, #0
   b9024:	f002 fc37 	bl	bb896 <digitalWrite>
	
	// Set SPI bus to work with MFRC522 chip.
	//setSPIConfig();
} // End constructor
   b9028:	4620      	mov	r0, r4
   b902a:	bd38      	pop	{r3, r4, r5, pc}

000b902c <_ZN7MFRC52217GetStatusCodeNameEh>:
 * Returns a string pointer to a status code name.
 * 
 */
const char *MFRC522::GetStatusCodeName(byte code	///< One of the StatusCode enums.
										) {
	switch (code) {
   b902c:	3901      	subs	r1, #1
   b902e:	b2c9      	uxtb	r1, r1
   b9030:	2908      	cmp	r1, #8
   b9032:	bf9a      	itte	ls
   b9034:	4b02      	ldrls	r3, [pc, #8]	; (b9040 <_ZN7MFRC52217GetStatusCodeNameEh+0x14>)
   b9036:	f853 0021 	ldrls.w	r0, [r3, r1, lsl #2]
										) {
   b903a:	4802      	ldrhi	r0, [pc, #8]	; (b9044 <_ZN7MFRC52217GetStatusCodeNameEh+0x18>)
		case STATUS_MIFARE_NACK:	return "A MIFARE PICC responded with NAK."; break;
		default:
			return "Unknown error";
			break;
	}
} // End GetStatusCodeName()
   b903c:	4770      	bx	lr
   b903e:	bf00      	nop
   b9040:	000bd4e4 	.word	0x000bd4e4
   b9044:	000bd3ec 	.word	0x000bd3ec

000b9048 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
    static SPIClass& instance() {
   b9048:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   b904a:	4c0b      	ldr	r4, [pc, #44]	; (b9078 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   b904c:	7821      	ldrb	r1, [r4, #0]
   b904e:	f3bf 8f5b 	dmb	ish
   b9052:	f011 0101 	ands.w	r1, r1, #1
   b9056:	d10b      	bne.n	b9070 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b9058:	4620      	mov	r0, r4
   b905a:	9101      	str	r1, [sp, #4]
   b905c:	f7fb fd02 	bl	b4a64 <__cxa_guard_acquire>
   b9060:	9901      	ldr	r1, [sp, #4]
   b9062:	b128      	cbz	r0, b9070 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b9064:	4805      	ldr	r0, [pc, #20]	; (b907c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b9066:	f001 fd37 	bl	baad8 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b906a:	4620      	mov	r0, r4
   b906c:	f7fb fcff 	bl	b4a6e <__cxa_guard_release>
    }
   b9070:	4802      	ldr	r0, [pc, #8]	; (b907c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b9072:	b002      	add	sp, #8
   b9074:	bd10      	pop	{r4, pc}
   b9076:	bf00      	nop
   b9078:	2003c71c 	.word	0x2003c71c
   b907c:	2003c720 	.word	0x2003c720

000b9080 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>:
        return instance().setClockSpeed(value, scale);
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
   b9080:	b507      	push	{r0, r1, r2, lr}
   b9082:	9001      	str	r0, [sp, #4]
        return instance().transfer(data);
   b9084:	f7ff ffe0 	bl	b9048 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b9088:	9901      	ldr	r1, [sp, #4]
    }
   b908a:	b003      	add	sp, #12
   b908c:	f85d eb04 	ldr.w	lr, [sp], #4
        return instance().transfer(data);
   b9090:	f001 bdc8 	b.w	bac24 <_ZN8SPIClass8transferEh>

000b9094 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh>:
								) {
   b9094:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9098:	4607      	mov	r7, r0
   b909a:	f89d 8030 	ldrb.w	r8, [sp, #48]	; 0x30
   b909e:	461e      	mov	r6, r3
	if (count == 0) {
   b90a0:	4615      	mov	r5, r2
   b90a2:	2a00      	cmp	r2, #0
   b90a4:	d042      	beq.n	b912c <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x98>
	byte address = 0x80 | (reg & 0x7E);		// MSB == 1 is for reading. LSB is not used in address. Datasheet section 8.1.2.3.
   b90a6:	f001 017e 	and.w	r1, r1, #126	; 0x7e
	digitalWrite(_chipSelectPin, LOW);		// Select slave
   b90aa:	7b00      	ldrb	r0, [r0, #12]
	byte address = 0x80 | (reg & 0x7E);		// MSB == 1 is for reading. LSB is not used in address. Datasheet section 8.1.2.3.
   b90ac:	f041 0980 	orr.w	r9, r1, #128	; 0x80
	digitalWrite(_chipSelectPin, LOW);		// Select slave
   b90b0:	2100      	movs	r1, #0
   b90b2:	f002 fbf0 	bl	bb896 <digitalWrite>
	SPI.transfer(address);					// Tell MFRC522 which address we want to read
   b90b6:	4648      	mov	r0, r9
   b90b8:	f7ff ffe2 	bl	b9080 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
	count--;								// One read is performed outside of the loop
   b90bc:	3d01      	subs	r5, #1
   b90be:	b2ed      	uxtb	r5, r5
	SPI.transfer(address);					// Tell MFRC522 which address we want to read
   b90c0:	f04f 0b00 	mov.w	fp, #0
				mask |= (1 << i);
   b90c4:	f04f 0a01 	mov.w	sl, #1
	while (index < count) {
   b90c8:	fa5f f48b 	uxtb.w	r4, fp
   b90cc:	42a5      	cmp	r5, r4
   b90ce:	d922      	bls.n	b9116 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x82>
		if (index == 0 && rxAlign) { // Only update bit positions rxAlign..7 in values[0]
   b90d0:	b9dc      	cbnz	r4, b910a <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x76>
   b90d2:	f1b8 0f00 	cmp.w	r8, #0
   b90d6:	d018      	beq.n	b910a <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x76>
   b90d8:	4642      	mov	r2, r8
			for (byte i = rxAlign; i <= 7; i++) {
   b90da:	b2d3      	uxtb	r3, r2
   b90dc:	2b07      	cmp	r3, #7
				mask |= (1 << i);
   b90de:	b261      	sxtb	r1, r4
			for (byte i = rxAlign; i <= 7; i++) {
   b90e0:	d805      	bhi.n	b90ee <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x5a>
				mask |= (1 << i);
   b90e2:	fa0a f402 	lsl.w	r4, sl, r2
   b90e6:	430c      	orrs	r4, r1
   b90e8:	b2e4      	uxtb	r4, r4
			for (byte i = rxAlign; i <= 7; i++) {
   b90ea:	3201      	adds	r2, #1
   b90ec:	e7f5      	b.n	b90da <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x46>
			byte value = SPI.transfer(address);	
   b90ee:	4648      	mov	r0, r9
   b90f0:	9101      	str	r1, [sp, #4]
   b90f2:	f7ff ffc5 	bl	b9080 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
			values[0] = (values[index] & ~mask) | (value & mask);
   b90f6:	7833      	ldrb	r3, [r6, #0]
   b90f8:	9901      	ldr	r1, [sp, #4]
   b90fa:	4004      	ands	r4, r0
   b90fc:	ea23 0301 	bic.w	r3, r3, r1
   b9100:	431c      	orrs	r4, r3
   b9102:	7034      	strb	r4, [r6, #0]
		index++;
   b9104:	f10b 0b01 	add.w	fp, fp, #1
	while (index < count) {
   b9108:	e7de      	b.n	b90c8 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x34>
			values[index] = SPI.transfer(address);	// Read value and tell that we want to read the same address again.
   b910a:	4648      	mov	r0, r9
   b910c:	f7ff ffb8 	bl	b9080 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
   b9110:	f806 000b 	strb.w	r0, [r6, fp]
   b9114:	e7f6      	b.n	b9104 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x70>
	values[index] = SPI.transfer(0);			// Read the final byte. Send 0 to stop reading.
   b9116:	2000      	movs	r0, #0
   b9118:	f7ff ffb2 	bl	b9080 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
   b911c:	5570      	strb	r0, [r6, r5]
	digitalWrite(_chipSelectPin, HIGH);			// Release slave again
   b911e:	7b38      	ldrb	r0, [r7, #12]
   b9120:	2101      	movs	r1, #1
} // End PCD_ReadRegister()
   b9122:	b003      	add	sp, #12
   b9124:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	digitalWrite(_chipSelectPin, HIGH);			// Release slave again
   b9128:	f002 bbb5 	b.w	bb896 <digitalWrite>
} // End PCD_ReadRegister()
   b912c:	b003      	add	sp, #12
   b912e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b9132 <_ZN7MFRC52216PCD_ReadRegisterEh>:
								) {
   b9132:	b538      	push	{r3, r4, r5, lr}
   b9134:	460c      	mov	r4, r1
   b9136:	4605      	mov	r5, r0
	digitalWrite(_chipSelectPin, LOW);			// Select slave
   b9138:	2100      	movs	r1, #0
   b913a:	7b00      	ldrb	r0, [r0, #12]
	SPI.transfer(0x80 | (reg & 0x7E));			// MSB == 1 is for reading. LSB is not used in address. Datasheet section 8.1.2.3.
   b913c:	f004 047e 	and.w	r4, r4, #126	; 0x7e
	digitalWrite(_chipSelectPin, LOW);			// Select slave
   b9140:	f002 fba9 	bl	bb896 <digitalWrite>
	SPI.transfer(0x80 | (reg & 0x7E));			// MSB == 1 is for reading. LSB is not used in address. Datasheet section 8.1.2.3.
   b9144:	f044 0080 	orr.w	r0, r4, #128	; 0x80
   b9148:	f7ff ff9a 	bl	b9080 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
	value = SPI.transfer(0);					// Read the value back. Send 0 to stop reading.
   b914c:	2000      	movs	r0, #0
   b914e:	f7ff ff97 	bl	b9080 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
	digitalWrite(_chipSelectPin, HIGH);			// Release slave again
   b9152:	2101      	movs	r1, #1
	value = SPI.transfer(0);					// Read the value back. Send 0 to stop reading.
   b9154:	4604      	mov	r4, r0
	digitalWrite(_chipSelectPin, HIGH);			// Release slave again
   b9156:	7b28      	ldrb	r0, [r5, #12]
   b9158:	f002 fb9d 	bl	bb896 <digitalWrite>
} // End PCD_ReadRegister()
   b915c:	4620      	mov	r0, r4
   b915e:	bd38      	pop	{r3, r4, r5, pc}

000b9160 <_ZN7MFRC52217PCD_WriteRegisterEhhPh>:
								) {
   b9160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b9162:	460f      	mov	r7, r1
   b9164:	4606      	mov	r6, r0
	digitalWrite(_chipSelectPin, LOW);		// Select slave
   b9166:	2100      	movs	r1, #0
   b9168:	7b00      	ldrb	r0, [r0, #12]
								) {
   b916a:	4615      	mov	r5, r2
   b916c:	461c      	mov	r4, r3
	digitalWrite(_chipSelectPin, LOW);		// Select slave
   b916e:	f002 fb92 	bl	bb896 <digitalWrite>
	SPI.transfer(reg & 0x7E);				// MSB == 0 is for writing. LSB is not used in address. Datasheet section 8.1.2.3.
   b9172:	f007 007e 	and.w	r0, r7, #126	; 0x7e
   b9176:	f7ff ff83 	bl	b9080 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
	for (byte index = 0; index < count; index++) {
   b917a:	4425      	add	r5, r4
   b917c:	42ac      	cmp	r4, r5
   b917e:	d004      	beq.n	b918a <_ZN7MFRC52217PCD_WriteRegisterEhhPh+0x2a>
		SPI.transfer(values[index]);
   b9180:	f814 0b01 	ldrb.w	r0, [r4], #1
   b9184:	f7ff ff7c 	bl	b9080 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
	for (byte index = 0; index < count; index++) {
   b9188:	e7f8      	b.n	b917c <_ZN7MFRC52217PCD_WriteRegisterEhhPh+0x1c>
	digitalWrite(_chipSelectPin, HIGH);		// Release slave again
   b918a:	7b30      	ldrb	r0, [r6, #12]
   b918c:	2101      	movs	r1, #1
} // End PCD_WriteRegister()
   b918e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	digitalWrite(_chipSelectPin, HIGH);		// Release slave again
   b9192:	f002 bb80 	b.w	bb896 <digitalWrite>

000b9196 <_ZN7MFRC52217PCD_WriteRegisterEhh>:
								) {
   b9196:	b570      	push	{r4, r5, r6, lr}
   b9198:	4604      	mov	r4, r0
   b919a:	460e      	mov	r6, r1
	digitalWrite(_chipSelectPin, LOW);		// Select slave
   b919c:	7b00      	ldrb	r0, [r0, #12]
   b919e:	2100      	movs	r1, #0
								) {
   b91a0:	4615      	mov	r5, r2
	digitalWrite(_chipSelectPin, LOW);		// Select slave
   b91a2:	f002 fb78 	bl	bb896 <digitalWrite>
	SPI.transfer(reg & 0x7E);					// MSB == 0 is for writing. LSB is not used in address. Datasheet section 8.1.2.3.
   b91a6:	f006 007e 	and.w	r0, r6, #126	; 0x7e
   b91aa:	f7ff ff69 	bl	b9080 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
	SPI.transfer(value);
   b91ae:	4628      	mov	r0, r5
   b91b0:	f7ff ff66 	bl	b9080 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
	digitalWrite(_chipSelectPin, HIGH);		// Release slave again
   b91b4:	7b20      	ldrb	r0, [r4, #12]
   b91b6:	2101      	movs	r1, #1
} // End PCD_WriteRegister()
   b91b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	digitalWrite(_chipSelectPin, HIGH);		// Release slave again
   b91bc:	f002 bb6b 	b.w	bb896 <digitalWrite>

000b91c0 <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>:
									) { 
   b91c0:	b570      	push	{r4, r5, r6, lr}
   b91c2:	4616      	mov	r6, r2
   b91c4:	4604      	mov	r4, r0
   b91c6:	460d      	mov	r5, r1
	tmp = PCD_ReadRegister(reg);
   b91c8:	f7ff ffb3 	bl	b9132 <_ZN7MFRC52216PCD_ReadRegisterEh>
	PCD_WriteRegister(reg, tmp | mask);			// set bit mask
   b91cc:	4330      	orrs	r0, r6
   b91ce:	b2c2      	uxtb	r2, r0
   b91d0:	4629      	mov	r1, r5
   b91d2:	4620      	mov	r0, r4
} // End PCD_SetRegisterBitMask()
   b91d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	PCD_WriteRegister(reg, tmp | mask);			// set bit mask
   b91d8:	f7ff bfdd 	b.w	b9196 <_ZN7MFRC52217PCD_WriteRegisterEhh>

000b91dc <_ZN7MFRC52224PCD_ClearRegisterBitMaskEhh>:
									  ) {
   b91dc:	b570      	push	{r4, r5, r6, lr}
   b91de:	4616      	mov	r6, r2
   b91e0:	4604      	mov	r4, r0
   b91e2:	460d      	mov	r5, r1
	tmp = PCD_ReadRegister(reg);
   b91e4:	f7ff ffa5 	bl	b9132 <_ZN7MFRC52216PCD_ReadRegisterEh>
	PCD_WriteRegister(reg, tmp & (~mask));		// clear bit mask
   b91e8:	ea20 0006 	bic.w	r0, r0, r6
   b91ec:	b2c2      	uxtb	r2, r0
   b91ee:	4629      	mov	r1, r5
   b91f0:	4620      	mov	r0, r4
} // End PCD_ClearRegisterBitMask()
   b91f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	PCD_WriteRegister(reg, tmp & (~mask));		// clear bit mask
   b91f6:	f7ff bfce 	b.w	b9196 <_ZN7MFRC52217PCD_WriteRegisterEhh>

000b91fa <_ZN7MFRC52215PCD_StopCrypto1Ev>:
	PCD_ClearRegisterBitMask(Status2Reg, 0x08); // Status2Reg[7..0] bits are: TempSensClear I2CForceHS reserved reserved   MFCrypto1On ModemState[2:0]
   b91fa:	2208      	movs	r2, #8
   b91fc:	2110      	movs	r1, #16
   b91fe:	f7ff bfed 	b.w	b91dc <_ZN7MFRC52224PCD_ClearRegisterBitMaskEhh>

000b9202 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>:
					 ) {
   b9202:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b9204:	4604      	mov	r4, r0
   b9206:	4615      	mov	r5, r2
   b9208:	460f      	mov	r7, r1
	PCD_WriteRegister(CommandReg, PCD_Idle);			// Stop any active command.
   b920a:	2200      	movs	r2, #0
   b920c:	2102      	movs	r1, #2
					 ) {
   b920e:	461e      	mov	r6, r3
	PCD_WriteRegister(CommandReg, PCD_Idle);			// Stop any active command.
   b9210:	f7ff ffc1 	bl	b9196 <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_WriteRegister(DivIrqReg, 0x04);					// Clear the CRCIRq interrupt request bit
   b9214:	2204      	movs	r2, #4
   b9216:	210a      	movs	r1, #10
   b9218:	4620      	mov	r0, r4
   b921a:	f7ff ffbc 	bl	b9196 <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_SetRegisterBitMask(FIFOLevelReg, 0x80);		// FlushBuffer = 1, FIFO initialization
   b921e:	2280      	movs	r2, #128	; 0x80
   b9220:	2114      	movs	r1, #20
   b9222:	4620      	mov	r0, r4
   b9224:	f7ff ffcc 	bl	b91c0 <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>
	PCD_WriteRegister(FIFODataReg, length, data);		// Write data to the FIFO
   b9228:	462a      	mov	r2, r5
   b922a:	463b      	mov	r3, r7
   b922c:	2112      	movs	r1, #18
   b922e:	4620      	mov	r0, r4
   b9230:	f7ff ff96 	bl	b9160 <_ZN7MFRC52217PCD_WriteRegisterEhhPh>
	PCD_WriteRegister(CommandReg, PCD_CalcCRC);		// Start the calculation
   b9234:	2203      	movs	r2, #3
   b9236:	2102      	movs	r1, #2
   b9238:	4620      	mov	r0, r4
   b923a:	f7ff ffac 	bl	b9196 <_ZN7MFRC52217PCD_WriteRegisterEhh>
   b923e:	f241 3588 	movw	r5, #5000	; 0x1388
		n = PCD_ReadRegister(DivIrqReg);	// DivIrqReg[7..0] bits are: Set2 reserved reserved MfinActIRq   reserved CRCIRq reserved reserved
   b9242:	210a      	movs	r1, #10
   b9244:	4620      	mov	r0, r4
   b9246:	f7ff ff74 	bl	b9132 <_ZN7MFRC52216PCD_ReadRegisterEh>
		if (n & 0x04) {						// CRCIRq bit set - calculation done
   b924a:	0743      	lsls	r3, r0, #29
   b924c:	d405      	bmi.n	b925a <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0x58>
		if (--i == 0) {						// The emergency break. We will eventually terminate on this one after 89ms. Communication with the MFRC522 might be down.
   b924e:	3d01      	subs	r5, #1
   b9250:	b2ad      	uxth	r5, r5
   b9252:	2d00      	cmp	r5, #0
   b9254:	d1f5      	bne.n	b9242 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0x40>
			return STATUS_TIMEOUT;
   b9256:	2004      	movs	r0, #4
   b9258:	e00f      	b.n	b927a <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0x78>
	PCD_WriteRegister(CommandReg, PCD_Idle);			// Stop calculating CRC for new content in the FIFO.
   b925a:	2200      	movs	r2, #0
   b925c:	2102      	movs	r1, #2
   b925e:	4620      	mov	r0, r4
   b9260:	f7ff ff99 	bl	b9196 <_ZN7MFRC52217PCD_WriteRegisterEhh>
	result[0] = PCD_ReadRegister(CRCResultRegL);
   b9264:	2144      	movs	r1, #68	; 0x44
   b9266:	4620      	mov	r0, r4
   b9268:	f7ff ff63 	bl	b9132 <_ZN7MFRC52216PCD_ReadRegisterEh>
	result[1] = PCD_ReadRegister(CRCResultRegH);
   b926c:	2142      	movs	r1, #66	; 0x42
	result[0] = PCD_ReadRegister(CRCResultRegL);
   b926e:	7030      	strb	r0, [r6, #0]
	result[1] = PCD_ReadRegister(CRCResultRegH);
   b9270:	4620      	mov	r0, r4
   b9272:	f7ff ff5e 	bl	b9132 <_ZN7MFRC52216PCD_ReadRegisterEh>
   b9276:	7070      	strb	r0, [r6, #1]
	return STATUS_OK;
   b9278:	2001      	movs	r0, #1
} // End PCD_CalculateCRC()
   b927a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b927c <_ZN7MFRC5229PCD_ResetEv>:
void MFRC522::PCD_Reset() {
   b927c:	b510      	push	{r4, lr}
	PCD_WriteRegister(CommandReg, PCD_SoftReset);	// Issue the SoftReset command.
   b927e:	220f      	movs	r2, #15
   b9280:	2102      	movs	r1, #2
void MFRC522::PCD_Reset() {
   b9282:	4604      	mov	r4, r0
	PCD_WriteRegister(CommandReg, PCD_SoftReset);	// Issue the SoftReset command.
   b9284:	f7ff ff87 	bl	b9196 <_ZN7MFRC52217PCD_WriteRegisterEhh>
	delay(50);
   b9288:	2032      	movs	r0, #50	; 0x32
   b928a:	f001 ff28 	bl	bb0de <delay>
	while (PCD_ReadRegister(CommandReg) & (1<<4)) {
   b928e:	2102      	movs	r1, #2
   b9290:	4620      	mov	r0, r4
   b9292:	f7ff ff4e 	bl	b9132 <_ZN7MFRC52216PCD_ReadRegisterEh>
   b9296:	06c3      	lsls	r3, r0, #27
   b9298:	d4f9      	bmi.n	b928e <_ZN7MFRC5229PCD_ResetEv+0x12>
} // End PCD_Reset()
   b929a:	bd10      	pop	{r4, pc}

000b929c <_ZN7MFRC52213PCD_AntennaOnEv>:
void MFRC522::PCD_AntennaOn() {
   b929c:	b510      	push	{r4, lr}
	byte value = PCD_ReadRegister(TxControlReg);
   b929e:	2128      	movs	r1, #40	; 0x28
void MFRC522::PCD_AntennaOn() {
   b92a0:	4604      	mov	r4, r0
	byte value = PCD_ReadRegister(TxControlReg);
   b92a2:	f7ff ff46 	bl	b9132 <_ZN7MFRC52216PCD_ReadRegisterEh>
	if ((value & 0x03) != 0x03) {
   b92a6:	f000 0303 	and.w	r3, r0, #3
   b92aa:	2b03      	cmp	r3, #3
   b92ac:	d008      	beq.n	b92c0 <_ZN7MFRC52213PCD_AntennaOnEv+0x24>
		PCD_WriteRegister(TxControlReg, value | 0x03);
   b92ae:	f040 0203 	orr.w	r2, r0, #3
   b92b2:	b2d2      	uxtb	r2, r2
   b92b4:	4620      	mov	r0, r4
   b92b6:	2128      	movs	r1, #40	; 0x28
} // End PCD_AntennaOn()
   b92b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		PCD_WriteRegister(TxControlReg, value | 0x03);
   b92bc:	f7ff bf6b 	b.w	b9196 <_ZN7MFRC52217PCD_WriteRegisterEhh>
} // End PCD_AntennaOn()
   b92c0:	bd10      	pop	{r4, pc}

000b92c2 <_ZN7MFRC5228PCD_InitEv>:
void MFRC522::PCD_Init() {
   b92c2:	b510      	push	{r4, lr}
   b92c4:	4604      	mov	r4, r0
	if (digitalRead(_resetPowerDownPin) == LOW) { //The MFRC522 chip is in power down mode.
   b92c6:	7b40      	ldrb	r0, [r0, #13]
   b92c8:	f002 fafe 	bl	bb8c8 <digitalRead>
   b92cc:	bb48      	cbnz	r0, b9322 <_ZN7MFRC5228PCD_InitEv+0x60>
		digitalWrite(_resetPowerDownPin, HIGH);	// Exit power down mode. This triggers a hard reset.
   b92ce:	7b60      	ldrb	r0, [r4, #13]
   b92d0:	2101      	movs	r1, #1
   b92d2:	f002 fae0 	bl	bb896 <digitalWrite>
		delay(50);
   b92d6:	2032      	movs	r0, #50	; 0x32
   b92d8:	f001 ff01 	bl	bb0de <delay>
    PCD_WriteRegister(TModeReg, 0x80);			// TAuto=1; timer starts automatically at the end of the transmission in all communication modes at all speeds
   b92dc:	4620      	mov	r0, r4
   b92de:	2280      	movs	r2, #128	; 0x80
   b92e0:	2154      	movs	r1, #84	; 0x54
   b92e2:	f7ff ff58 	bl	b9196 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    PCD_WriteRegister(TPrescalerReg, 0xA9);	// TPreScaler = TModeReg[3..0]:TPrescalerReg, ie 0x0A9 = 169 => f_timer=40kHz, ie a timer period of 25�s.
   b92e6:	4620      	mov	r0, r4
   b92e8:	22a9      	movs	r2, #169	; 0xa9
   b92ea:	2156      	movs	r1, #86	; 0x56
   b92ec:	f7ff ff53 	bl	b9196 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    PCD_WriteRegister(TReloadRegH, 0x03);		// Reload timer with 0x3E8 = 1000, ie 25ms before timeout.
   b92f0:	4620      	mov	r0, r4
   b92f2:	2203      	movs	r2, #3
   b92f4:	2158      	movs	r1, #88	; 0x58
   b92f6:	f7ff ff4e 	bl	b9196 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    PCD_WriteRegister(TReloadRegL, 0xE8);
   b92fa:	4620      	mov	r0, r4
   b92fc:	22e8      	movs	r2, #232	; 0xe8
   b92fe:	215a      	movs	r1, #90	; 0x5a
   b9300:	f7ff ff49 	bl	b9196 <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_WriteRegister(TxASKReg, 0x40);		// Default 0x00. Force a 100 % ASK modulation independent of the ModGsPReg register setting
   b9304:	4620      	mov	r0, r4
   b9306:	2240      	movs	r2, #64	; 0x40
   b9308:	212a      	movs	r1, #42	; 0x2a
   b930a:	f7ff ff44 	bl	b9196 <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_WriteRegister(ModeReg, 0x3D);		// Default 0x3F. Set the preset value for the CRC coprocessor for the CalcCRC command to 0x6363 (ISO 14443-3 part 6.2.4)
   b930e:	4620      	mov	r0, r4
   b9310:	223d      	movs	r2, #61	; 0x3d
   b9312:	2122      	movs	r1, #34	; 0x22
   b9314:	f7ff ff3f 	bl	b9196 <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_AntennaOn();						// Enable the antenna driver pins TX1 and TX2 (they were disabled by the reset)
   b9318:	4620      	mov	r0, r4
} // End PCD_Init()
   b931a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	PCD_AntennaOn();						// Enable the antenna driver pins TX1 and TX2 (they were disabled by the reset)
   b931e:	f7ff bfbd 	b.w	b929c <_ZN7MFRC52213PCD_AntennaOnEv>
		PCD_Reset();
   b9322:	4620      	mov	r0, r4
   b9324:	f7ff ffaa 	bl	b927c <_ZN7MFRC5229PCD_ResetEv>
   b9328:	e7d8      	b.n	b92dc <_ZN7MFRC5228PCD_InitEv+0x1a>

000b932a <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb>:
									 ) {
   b932a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b932e:	b089      	sub	sp, #36	; 0x24
   b9330:	e9dd 5613 	ldrd	r5, r6, [sp, #76]	; 0x4c
   b9334:	f8dd 9054 	ldr.w	r9, [sp, #84]	; 0x54
   b9338:	9203      	str	r2, [sp, #12]
   b933a:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
   b933e:	f89d b058 	ldrb.w	fp, [sp, #88]	; 0x58
   b9342:	9204      	str	r2, [sp, #16]
   b9344:	4604      	mov	r4, r0
   b9346:	468a      	mov	sl, r1
   b9348:	2700      	movs	r7, #0
	byte txLastBits = validBits ? *validBits : 0;
   b934a:	f1b9 0f00 	cmp.w	r9, #0
   b934e:	d03e      	beq.n	b93ce <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xa4>
   b9350:	f899 8000 	ldrb.w	r8, [r9]
   b9354:	9305      	str	r3, [sp, #20]
	PCD_WriteRegister(CommandReg, PCD_Idle);			// Stop any active command.
   b9356:	2200      	movs	r2, #0
   b9358:	2102      	movs	r1, #2
   b935a:	4620      	mov	r0, r4
   b935c:	f7ff ff1b 	bl	b9196 <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_WriteRegister(ComIrqReg, 0x7F);					// Clear all seven interrupt request bits
   b9360:	227f      	movs	r2, #127	; 0x7f
   b9362:	2108      	movs	r1, #8
   b9364:	4620      	mov	r0, r4
   b9366:	f7ff ff16 	bl	b9196 <_ZN7MFRC52217PCD_WriteRegisterEhh>
	byte bitFraming	= (rxAlign << 4) + txLastBits;		// RxAlign = BitFramingReg[6..4]. TxLastBits = BitFramingReg[2..0]
   b936a:	eb08 180b 	add.w	r8, r8, fp, lsl #4
	PCD_SetRegisterBitMask(FIFOLevelReg, 0x80);		// FlushBuffer = 1, FIFO initialization
   b936e:	2280      	movs	r2, #128	; 0x80
   b9370:	2114      	movs	r1, #20
   b9372:	4620      	mov	r0, r4
   b9374:	f7ff ff24 	bl	b91c0 <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>
	byte bitFraming	= (rxAlign << 4) + txLastBits;		// RxAlign = BitFramingReg[6..4]. TxLastBits = BitFramingReg[2..0]
   b9378:	fa5f f888 	uxtb.w	r8, r8
	PCD_WriteRegister(FIFODataReg, sendLen, sendData);	// Write sendData to the FIFO
   b937c:	9b05      	ldr	r3, [sp, #20]
   b937e:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
   b9382:	2112      	movs	r1, #18
   b9384:	4620      	mov	r0, r4
   b9386:	f7ff feeb 	bl	b9160 <_ZN7MFRC52217PCD_WriteRegisterEhhPh>
	PCD_WriteRegister(BitFramingReg, bitFraming);		// Bit adjustments
   b938a:	4642      	mov	r2, r8
   b938c:	211a      	movs	r1, #26
   b938e:	4620      	mov	r0, r4
   b9390:	f7ff ff01 	bl	b9196 <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_WriteRegister(CommandReg, command);			// Execute the command
   b9394:	4652      	mov	r2, sl
   b9396:	2102      	movs	r1, #2
   b9398:	4620      	mov	r0, r4
   b939a:	f7ff fefc 	bl	b9196 <_ZN7MFRC52217PCD_WriteRegisterEhh>
	if (command == PCD_Transceive) 	{
   b939e:	f1ba 0f0c 	cmp.w	sl, #12
   b93a2:	d104      	bne.n	b93ae <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x84>
		PCD_SetRegisterBitMask(BitFramingReg, 0x80);	// StartSend=1, transmission of data starts
   b93a4:	2280      	movs	r2, #128	; 0x80
   b93a6:	211a      	movs	r1, #26
   b93a8:	4620      	mov	r0, r4
   b93aa:	f7ff ff09 	bl	b91c0 <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>
	byte txLastBits = validBits ? *validBits : 0;
   b93ae:	f44f 68fa 	mov.w	r8, #2000	; 0x7d0
		n = PCD_ReadRegister(ComIrqReg);	// ComIrqReg[7..0] bits are: Set1 TxIRq RxIRq IdleIRq   HiAlertIRq LoAlertIRq ErrIRq TimerIRq
   b93b2:	2108      	movs	r1, #8
   b93b4:	4620      	mov	r0, r4
   b93b6:	f7ff febc 	bl	b9132 <_ZN7MFRC52216PCD_ReadRegisterEh>
		if (n & waitIRq) {					// One of the interrupts that signal success has been set.
   b93ba:	9b03      	ldr	r3, [sp, #12]
   b93bc:	4218      	tst	r0, r3
   b93be:	d108      	bne.n	b93d2 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xa8>
		if (n & 0x01) {						// Timer interrupt - nothing received in 25ms
   b93c0:	07c3      	lsls	r3, r0, #31
   b93c2:	d402      	bmi.n	b93ca <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xa0>
		if (--i == 0) {						// The emergency break. If all other condions fail we will eventually terminate on this one after 35.7ms. Communication with the MFRC522 might be down.
   b93c4:	f1b8 0801 	subs.w	r8, r8, #1
   b93c8:	d1f3      	bne.n	b93b2 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x88>
			return STATUS_TIMEOUT;
   b93ca:	2004      	movs	r0, #4
   b93cc:	e04d      	b.n	b946a <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
	byte txLastBits = validBits ? *validBits : 0;
   b93ce:	46c8      	mov	r8, r9
   b93d0:	e7c0      	b.n	b9354 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x2a>
	byte errorRegValue = PCD_ReadRegister(ErrorReg); // ErrorReg[7..0] bits are: WrErr TempErr reserved BufferOvfl   CollErr CRCErr ParityErr ProtocolErr
   b93d2:	210c      	movs	r1, #12
   b93d4:	4620      	mov	r0, r4
   b93d6:	f7ff feac 	bl	b9132 <_ZN7MFRC52216PCD_ReadRegisterEh>
	if (errorRegValue & 0x13) {	 // BufferOvfl ParityErr ProtocolErr
   b93da:	f010 0f13 	tst.w	r0, #19
	byte errorRegValue = PCD_ReadRegister(ErrorReg); // ErrorReg[7..0] bits are: WrErr TempErr reserved BufferOvfl   CollErr CRCErr ParityErr ProtocolErr
   b93de:	4680      	mov	r8, r0
	if (errorRegValue & 0x13) {	 // BufferOvfl ParityErr ProtocolErr
   b93e0:	d146      	bne.n	b9470 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x146>
	if (backData && backLen) {
   b93e2:	b1dd      	cbz	r5, b941c <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xf2>
   b93e4:	b1d6      	cbz	r6, b941c <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xf2>
		n = PCD_ReadRegister(FIFOLevelReg);						// Number of bytes in the FIFO
   b93e6:	2114      	movs	r1, #20
   b93e8:	4620      	mov	r0, r4
   b93ea:	f7ff fea2 	bl	b9132 <_ZN7MFRC52216PCD_ReadRegisterEh>
		if (n > *backLen) {
   b93ee:	7833      	ldrb	r3, [r6, #0]
   b93f0:	4283      	cmp	r3, r0
		n = PCD_ReadRegister(FIFOLevelReg);						// Number of bytes in the FIFO
   b93f2:	4602      	mov	r2, r0
		if (n > *backLen) {
   b93f4:	d33e      	bcc.n	b9474 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x14a>
		*backLen = n;												// Number of bytes returned
   b93f6:	7030      	strb	r0, [r6, #0]
		PCD_ReadRegister(FIFODataReg, n, backData, rxAlign);		// Get received data from FIFO
   b93f8:	462b      	mov	r3, r5
   b93fa:	2112      	movs	r1, #18
   b93fc:	4620      	mov	r0, r4
   b93fe:	f8cd b000 	str.w	fp, [sp]
   b9402:	f7ff fe47 	bl	b9094 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh>
		_validBits = PCD_ReadRegister(ControlReg) & 0x07;	// RxLastBits[2:0] indicates the number of valid bits in the last received byte. If this value is 000b, the whole byte is valid.
   b9406:	2118      	movs	r1, #24
   b9408:	4620      	mov	r0, r4
   b940a:	f7ff fe92 	bl	b9132 <_ZN7MFRC52216PCD_ReadRegisterEh>
   b940e:	f000 0707 	and.w	r7, r0, #7
		if (validBits) {
   b9412:	f1b9 0f00 	cmp.w	r9, #0
   b9416:	d001      	beq.n	b941c <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xf2>
			*validBits = _validBits;
   b9418:	f889 7000 	strb.w	r7, [r9]
	if (errorRegValue & 0x08) { // CollErr
   b941c:	f018 0f08 	tst.w	r8, #8
   b9420:	d12a      	bne.n	b9478 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x14e>
	if (backData && backLen && checkCRC) {
   b9422:	b35d      	cbz	r5, b947c <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x152>
   b9424:	b356      	cbz	r6, b947c <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x152>
   b9426:	9b04      	ldr	r3, [sp, #16]
   b9428:	b343      	cbz	r3, b947c <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x152>
		if (*backLen == 1 && _validBits == 4) {
   b942a:	7832      	ldrb	r2, [r6, #0]
   b942c:	2a01      	cmp	r2, #1
   b942e:	d103      	bne.n	b9438 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x10e>
   b9430:	2f04      	cmp	r7, #4
   b9432:	d125      	bne.n	b9480 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x156>
			return STATUS_MIFARE_NACK;
   b9434:	2009      	movs	r0, #9
   b9436:	e018      	b.n	b946a <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
		if (*backLen < 2 || _validBits != 0) {
   b9438:	d922      	bls.n	b9480 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x156>
   b943a:	bb0f      	cbnz	r7, b9480 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x156>
		n = PCD_CalculateCRC(&backData[0], *backLen - 2, &controlBuffer[0]);
   b943c:	3a02      	subs	r2, #2
   b943e:	ab07      	add	r3, sp, #28
   b9440:	b2d2      	uxtb	r2, r2
   b9442:	4629      	mov	r1, r5
   b9444:	4620      	mov	r0, r4
   b9446:	f7ff fedc 	bl	b9202 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
		if (n != STATUS_OK) {
   b944a:	2801      	cmp	r0, #1
   b944c:	d10d      	bne.n	b946a <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
		if ((backData[*backLen - 2] != controlBuffer[0]) || (backData[*backLen - 1] != controlBuffer[1])) {
   b944e:	7833      	ldrb	r3, [r6, #0]
   b9450:	441d      	add	r5, r3
   b9452:	f89d 301c 	ldrb.w	r3, [sp, #28]
   b9456:	f815 2c02 	ldrb.w	r2, [r5, #-2]
   b945a:	429a      	cmp	r2, r3
   b945c:	d110      	bne.n	b9480 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x156>
   b945e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
   b9462:	f89d 301d 	ldrb.w	r3, [sp, #29]
   b9466:	429a      	cmp	r2, r3
   b9468:	d10a      	bne.n	b9480 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x156>
} // End PCD_CommunicateWithPICC()
   b946a:	b009      	add	sp, #36	; 0x24
   b946c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return STATUS_ERROR;
   b9470:	2002      	movs	r0, #2
   b9472:	e7fa      	b.n	b946a <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
			return STATUS_NO_ROOM;
   b9474:	2005      	movs	r0, #5
   b9476:	e7f8      	b.n	b946a <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
		return STATUS_COLLISION;
   b9478:	2003      	movs	r0, #3
   b947a:	e7f6      	b.n	b946a <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
	return STATUS_OK;
   b947c:	2001      	movs	r0, #1
   b947e:	e7f4      	b.n	b946a <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
			return STATUS_CRC_WRONG;
   b9480:	2008      	movs	r0, #8
   b9482:	e7f2      	b.n	b946a <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>

000b9484 <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>:
								 ) {
   b9484:	b510      	push	{r4, lr}
   b9486:	b086      	sub	sp, #24
	return PCD_CommunicateWithPICC(PCD_Transceive, waitIRq, sendData, sendLen, backData, backLen, validBits, rxAlign, checkCRC);
   b9488:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
   b948c:	9405      	str	r4, [sp, #20]
   b948e:	f89d 4028 	ldrb.w	r4, [sp, #40]	; 0x28
   b9492:	9404      	str	r4, [sp, #16]
   b9494:	9c09      	ldr	r4, [sp, #36]	; 0x24
   b9496:	9403      	str	r4, [sp, #12]
   b9498:	9c08      	ldr	r4, [sp, #32]
   b949a:	9200      	str	r2, [sp, #0]
   b949c:	e9cd 3401 	strd	r3, r4, [sp, #4]
   b94a0:	2230      	movs	r2, #48	; 0x30
   b94a2:	460b      	mov	r3, r1
   b94a4:	210c      	movs	r1, #12
   b94a6:	f7ff ff40 	bl	b932a <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb>
} // End PCD_TransceiveData()
   b94aa:	b006      	add	sp, #24
   b94ac:	bd10      	pop	{r4, pc}

000b94ae <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_>:
							   ) {
   b94ae:	b570      	push	{r4, r5, r6, lr}
   b94b0:	b088      	sub	sp, #32
   b94b2:	4606      	mov	r6, r0
   b94b4:	461c      	mov	r4, r3
   b94b6:	f88d 1017 	strb.w	r1, [sp, #23]
	if (bufferATQA == NULL || *bufferSize < 2) {	// The ATQA response is 2 bytes long.
   b94ba:	4615      	mov	r5, r2
   b94bc:	b31a      	cbz	r2, b9506 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x58>
   b94be:	781b      	ldrb	r3, [r3, #0]
   b94c0:	2b01      	cmp	r3, #1
   b94c2:	d920      	bls.n	b9506 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x58>
	PCD_ClearRegisterBitMask(CollReg, 0x80);			// ValuesAfterColl=1 => Bits received after collision are cleared.
   b94c4:	2280      	movs	r2, #128	; 0x80
   b94c6:	211c      	movs	r1, #28
   b94c8:	f7ff fe88 	bl	b91dc <_ZN7MFRC52224PCD_ClearRegisterBitMaskEhh>
	validBits = 7;										// For REQA and WUPA we need the short frame format - transmit only 7 bits of the last (and only) byte. TxLastBits = BitFramingReg[2..0]
   b94cc:	2307      	movs	r3, #7
   b94ce:	f88d 301f 	strb.w	r3, [sp, #31]
	status = PCD_TransceiveData(&command, 1, bufferATQA, bufferSize, &validBits);
   b94d2:	2300      	movs	r3, #0
   b94d4:	e9cd 3302 	strd	r3, r3, [sp, #8]
   b94d8:	f10d 031f 	add.w	r3, sp, #31
   b94dc:	e9cd 4300 	strd	r4, r3, [sp]
   b94e0:	2201      	movs	r2, #1
   b94e2:	462b      	mov	r3, r5
   b94e4:	f10d 0117 	add.w	r1, sp, #23
   b94e8:	4630      	mov	r0, r6
   b94ea:	f7ff ffcb 	bl	b9484 <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>
	if (status != STATUS_OK) {
   b94ee:	2801      	cmp	r0, #1
   b94f0:	d107      	bne.n	b9502 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x54>
	if (*bufferSize != 2 || validBits != 0) {		// ATQA must be exactly 16 bits.
   b94f2:	7823      	ldrb	r3, [r4, #0]
   b94f4:	2b02      	cmp	r3, #2
   b94f6:	d108      	bne.n	b950a <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x5c>
   b94f8:	f89d 301f 	ldrb.w	r3, [sp, #31]
		return STATUS_ERROR;
   b94fc:	2b00      	cmp	r3, #0
   b94fe:	bf18      	it	ne
   b9500:	2002      	movne	r0, #2
} // End PICC_REQA_or_WUPA()
   b9502:	b008      	add	sp, #32
   b9504:	bd70      	pop	{r4, r5, r6, pc}
		return STATUS_NO_ROOM;
   b9506:	2005      	movs	r0, #5
   b9508:	e7fb      	b.n	b9502 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x54>
		return STATUS_ERROR;
   b950a:	2002      	movs	r0, #2
   b950c:	e7f9      	b.n	b9502 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x54>

000b950e <_ZN7MFRC52213PICC_RequestAEPhS0_>:
							) {
   b950e:	4613      	mov	r3, r2
	return PICC_REQA_or_WUPA(PICC_CMD_REQA, bufferATQA, bufferSize);
   b9510:	460a      	mov	r2, r1
   b9512:	2126      	movs	r1, #38	; 0x26
   b9514:	f7ff bfcb 	b.w	b94ae <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_>

000b9518 <_ZN7MFRC52221PICC_IsNewCardPresentEv>:
 * Returns true if a PICC responds to PICC_CMD_REQA.
 * Only "new" cards in state IDLE are invited. Sleeping cards in state HALT are ignored.
 * 
 * @return bool
 */
bool MFRC522::PICC_IsNewCardPresent() {
   b9518:	b507      	push	{r0, r1, r2, lr}
	byte bufferATQA[2];
	byte bufferSize = sizeof(bufferATQA);
   b951a:	2302      	movs	r3, #2
	byte result = PICC_RequestA(bufferATQA, &bufferSize);
   b951c:	f10d 0203 	add.w	r2, sp, #3
   b9520:	a901      	add	r1, sp, #4
	byte bufferSize = sizeof(bufferATQA);
   b9522:	f88d 3003 	strb.w	r3, [sp, #3]
	byte result = PICC_RequestA(bufferATQA, &bufferSize);
   b9526:	f7ff fff2 	bl	b950e <_ZN7MFRC52213PICC_RequestAEPhS0_>
	return (result == STATUS_OK || result == STATUS_COLLISION);
   b952a:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
} // End PICC_IsNewCardPresent()
   b952e:	1e43      	subs	r3, r0, #1
   b9530:	4258      	negs	r0, r3
   b9532:	4158      	adcs	r0, r3
   b9534:	b003      	add	sp, #12
   b9536:	f85d fb04 	ldr.w	pc, [sp], #4

000b953a <_ZN7MFRC52210PICC_HaltAEv>:
byte MFRC522::PICC_HaltA() {
   b953a:	b570      	push	{r4, r5, r6, lr}
   b953c:	b086      	sub	sp, #24
	buffer[0] = PICC_CMD_HLTA;
   b953e:	2350      	movs	r3, #80	; 0x50
   b9540:	f88d 3014 	strb.w	r3, [sp, #20]
	buffer[1] = 0;
   b9544:	2400      	movs	r4, #0
	result = PCD_CalculateCRC(buffer, 2, &buffer[2]);
   b9546:	f10d 0316 	add.w	r3, sp, #22
   b954a:	2202      	movs	r2, #2
   b954c:	a905      	add	r1, sp, #20
byte MFRC522::PICC_HaltA() {
   b954e:	4606      	mov	r6, r0
	buffer[1] = 0;
   b9550:	f88d 4015 	strb.w	r4, [sp, #21]
	result = PCD_CalculateCRC(buffer, 2, &buffer[2]);
   b9554:	f7ff fe55 	bl	b9202 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
	if (result != STATUS_OK) {
   b9558:	2801      	cmp	r0, #1
	result = PCD_CalculateCRC(buffer, 2, &buffer[2]);
   b955a:	4605      	mov	r5, r0
	if (result != STATUS_OK) {
   b955c:	d10f      	bne.n	b957e <_ZN7MFRC52210PICC_HaltAEv+0x44>
	result = PCD_TransceiveData(buffer, sizeof(buffer), NULL, 0);
   b955e:	e9cd 4402 	strd	r4, r4, [sp, #8]
   b9562:	e9cd 4400 	strd	r4, r4, [sp]
   b9566:	4623      	mov	r3, r4
   b9568:	2204      	movs	r2, #4
   b956a:	a905      	add	r1, sp, #20
   b956c:	4630      	mov	r0, r6
   b956e:	f7ff ff89 	bl	b9484 <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>
	if (result == STATUS_TIMEOUT) {
   b9572:	2804      	cmp	r0, #4
   b9574:	d003      	beq.n	b957e <_ZN7MFRC52210PICC_HaltAEv+0x44>
		return STATUS_ERROR;
   b9576:	2801      	cmp	r0, #1
   b9578:	bf14      	ite	ne
   b957a:	4605      	movne	r5, r0
   b957c:	2502      	moveq	r5, #2
} // End PICC_HaltA()
   b957e:	4628      	mov	r0, r5
   b9580:	b006      	add	sp, #24
   b9582:	bd70      	pop	{r4, r5, r6, pc}

000b9584 <_ZN7MFRC52211MIFARE_ReadEhPhS0_>:
						) {
   b9584:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b9586:	4606      	mov	r6, r0
   b9588:	461d      	mov	r5, r3
	if (buffer == NULL || *bufferSize < 18) {
   b958a:	4614      	mov	r4, r2
   b958c:	b1ca      	cbz	r2, b95c2 <_ZN7MFRC52211MIFARE_ReadEhPhS0_+0x3e>
   b958e:	781b      	ldrb	r3, [r3, #0]
   b9590:	2b11      	cmp	r3, #17
   b9592:	d916      	bls.n	b95c2 <_ZN7MFRC52211MIFARE_ReadEhPhS0_+0x3e>
	buffer[0] = PICC_CMD_MF_READ;
   b9594:	2330      	movs	r3, #48	; 0x30
   b9596:	7013      	strb	r3, [r2, #0]
	buffer[1] = blockAddr;
   b9598:	7051      	strb	r1, [r2, #1]
	result = PCD_CalculateCRC(buffer, 2, &buffer[2]);
   b959a:	1c93      	adds	r3, r2, #2
   b959c:	4621      	mov	r1, r4
   b959e:	2202      	movs	r2, #2
   b95a0:	f7ff fe2f 	bl	b9202 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
	if (result != STATUS_OK) {
   b95a4:	2801      	cmp	r0, #1
   b95a6:	d10a      	bne.n	b95be <_ZN7MFRC52211MIFARE_ReadEhPhS0_+0x3a>
	return PCD_TransceiveData(buffer, 4, buffer, bufferSize, NULL, 0, true);
   b95a8:	2300      	movs	r3, #0
   b95aa:	e9cd 3301 	strd	r3, r3, [sp, #4]
   b95ae:	9003      	str	r0, [sp, #12]
   b95b0:	9500      	str	r5, [sp, #0]
   b95b2:	4623      	mov	r3, r4
   b95b4:	2204      	movs	r2, #4
   b95b6:	4621      	mov	r1, r4
   b95b8:	4630      	mov	r0, r6
   b95ba:	f7ff ff63 	bl	b9484 <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>
} // End MIFARE_Read()
   b95be:	b004      	add	sp, #16
   b95c0:	bd70      	pop	{r4, r5, r6, pc}
		return STATUS_NO_ROOM;
   b95c2:	2005      	movs	r0, #5
   b95c4:	e7fb      	b.n	b95be <_ZN7MFRC52211MIFARE_ReadEhPhS0_+0x3a>

000b95c6 <_ZN7MFRC52216PCD_AuthenticateEhhPNS_10MIFARE_KeyEPNS_3UidE>:
								) {
   b95c6:	b510      	push	{r4, lr}
   b95c8:	b08a      	sub	sp, #40	; 0x28
   b95ca:	9c0c      	ldr	r4, [sp, #48]	; 0x30
	sendData[1] = blockAddr;
   b95cc:	f88d 201d 	strb.w	r2, [sp, #29]
		sendData[2+i] = key->keyByte[i];
   b95d0:	681a      	ldr	r2, [r3, #0]
   b95d2:	889b      	ldrh	r3, [r3, #4]
   b95d4:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
		sendData[8+i] = uid->uidByte[i];
   b95d8:	7863      	ldrb	r3, [r4, #1]
   b95da:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   b95de:	78a3      	ldrb	r3, [r4, #2]
   b95e0:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
   b95e4:	78e3      	ldrb	r3, [r4, #3]
   b95e6:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
   b95ea:	7923      	ldrb	r3, [r4, #4]
   b95ec:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
	return PCD_CommunicateWithPICC(PCD_MFAuthent, waitIRq, &sendData[0], sizeof(sendData));
   b95f0:	2300      	movs	r3, #0
   b95f2:	e9cd 3304 	strd	r3, r3, [sp, #16]
   b95f6:	e9cd 3302 	strd	r3, r3, [sp, #8]
   b95fa:	9301      	str	r3, [sp, #4]
   b95fc:	230c      	movs	r3, #12
	sendData[0] = command;
   b95fe:	f88d 101c 	strb.w	r1, [sp, #28]
		sendData[2+i] = key->keyByte[i];
   b9602:	f8cd 201e 	str.w	r2, [sp, #30]
	return PCD_CommunicateWithPICC(PCD_MFAuthent, waitIRq, &sendData[0], sizeof(sendData));
   b9606:	9300      	str	r3, [sp, #0]
   b9608:	2210      	movs	r2, #16
   b960a:	ab07      	add	r3, sp, #28
   b960c:	210e      	movs	r1, #14
   b960e:	f7ff fe8c 	bl	b932a <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb>
} // End PCD_Authenticate()
   b9612:	b00a      	add	sp, #40	; 0x28
   b9614:	bd10      	pop	{r4, pc}

000b9616 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh>:
						 ) {
   b9616:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (validBits > 80) {
   b961a:	2a50      	cmp	r2, #80	; 0x50
						 ) {
   b961c:	b08b      	sub	sp, #44	; 0x2c
   b961e:	4682      	mov	sl, r0
   b9620:	460f      	mov	r7, r1
   b9622:	4690      	mov	r8, r2
	if (validBits > 80) {
   b9624:	f200 8140 	bhi.w	b98a8 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x292>
	PCD_ClearRegisterBitMask(CollReg, 0x80);			// ValuesAfterColl=1 => Bits received after collision are cleared.
   b9628:	2280      	movs	r2, #128	; 0x80
   b962a:	211c      	movs	r1, #28
   b962c:	f7ff fdd6 	bl	b91dc <_ZN7MFRC52224PCD_ClearRegisterBitMaskEhh>
				buffer[0] = PICC_CMD_SEL_CL1;
   b9630:	2393      	movs	r3, #147	; 0x93
   b9632:	f88d 301c 	strb.w	r3, [sp, #28]
				useCascadeTag = validBits && uid->size > 4;	// When we know that the UID has more than 4 bytes
   b9636:	f1b8 0f00 	cmp.w	r8, #0
   b963a:	f000 80bc 	beq.w	b97b6 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1a0>
   b963e:	783c      	ldrb	r4, [r7, #0]
   b9640:	2c04      	cmp	r4, #4
   b9642:	bf94      	ite	ls
   b9644:	2300      	movls	r3, #0
   b9646:	2301      	movhi	r3, #1
				useCascadeTag = validBits && uid->size > 7;	// When we know that the UID has more than 7 bytes
   b9648:	2501      	movs	r5, #1
   b964a:	2600      	movs	r6, #0
   b964c:	e00b      	b.n	b9666 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x50>
				buffer[0] = PICC_CMD_SEL_CL2;
   b964e:	2395      	movs	r3, #149	; 0x95
   b9650:	f88d 301c 	strb.w	r3, [sp, #28]
				useCascadeTag = validBits && uid->size > 7;	// When we know that the UID has more than 7 bytes
   b9654:	f1b8 0f00 	cmp.w	r8, #0
   b9658:	f000 80af 	beq.w	b97ba <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1a4>
   b965c:	783c      	ldrb	r4, [r7, #0]
   b965e:	2c07      	cmp	r4, #7
   b9660:	bf94      	ite	ls
   b9662:	2300      	movls	r3, #0
   b9664:	2301      	movhi	r3, #1
		currentLevelKnownBits = validBits - (8 * uidIndex);
   b9666:	eba8 04c6 	sub.w	r4, r8, r6, lsl #3
   b966a:	b264      	sxtb	r4, r4
		if (currentLevelKnownBits < 0) {
   b966c:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
		if (useCascadeTag) {
   b9670:	2b00      	cmp	r3, #0
   b9672:	f000 80a4 	beq.w	b97be <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1a8>
			buffer[index++] = PICC_CMD_CT;
   b9676:	2288      	movs	r2, #136	; 0x88
   b9678:	f88d 201e 	strb.w	r2, [sp, #30]
   b967c:	2103      	movs	r1, #3
		byte bytesToCopy = currentLevelKnownBits / 8 + (currentLevelKnownBits % 8 ? 1 : 0); // The number of bytes needed to represent the known bits for this level.
   b967e:	f014 0207 	ands.w	r2, r4, #7
   b9682:	bf18      	it	ne
   b9684:	2201      	movne	r2, #1
   b9686:	eb02 02e4 	add.w	r2, r2, r4, asr #3
		if (bytesToCopy) {
   b968a:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
		byte bytesToCopy = currentLevelKnownBits / 8 + (currentLevelKnownBits % 8 ? 1 : 0); // The number of bytes needed to represent the known bits for this level.
   b968e:	b2e0      	uxtb	r0, r4
		if (bytesToCopy) {
   b9690:	d01d      	beq.n	b96ce <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xb8>
			byte maxBytes = useCascadeTag ? 3 : 4; // Max 4 bytes in each Cascade Level. Only 3 left if we use the Cascade Tag
   b9692:	2b00      	cmp	r3, #0
   b9694:	bf14      	ite	ne
   b9696:	f04f 0903 	movne.w	r9, #3
   b969a:	f04f 0904 	moveq.w	r9, #4
			for (count = 0; count < bytesToCopy; count++) {
   b969e:	f106 0c01 	add.w	ip, r6, #1
   b96a2:	4591      	cmp	r9, r2
   b96a4:	bf94      	ite	ls
   b96a6:	eb01 0e09 	addls.w	lr, r1, r9
   b96aa:	eb01 0e02 	addhi.w	lr, r1, r2
   b96ae:	fa57 fc8c 	uxtab	ip, r7, ip
   b96b2:	fa5f fe8e 	uxtb.w	lr, lr
				buffer[index++] = uid->uidByte[uidIndex + count];
   b96b6:	460a      	mov	r2, r1
   b96b8:	f10d 0b28 	add.w	fp, sp, #40	; 0x28
   b96bc:	3101      	adds	r1, #1
   b96be:	b2c9      	uxtb	r1, r1
   b96c0:	445a      	add	r2, fp
   b96c2:	f81c 9b01 	ldrb.w	r9, [ip], #1
   b96c6:	f802 9c0c 	strb.w	r9, [r2, #-12]
			for (count = 0; count < bytesToCopy; count++) {
   b96ca:	4571      	cmp	r1, lr
   b96cc:	d1f3      	bne.n	b96b6 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xa0>
		if (useCascadeTag) {
   b96ce:	b10b      	cbz	r3, b96d4 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xbe>
			currentLevelKnownBits += 8;
   b96d0:	3008      	adds	r0, #8
   b96d2:	b244      	sxtb	r4, r0
			if (currentLevelKnownBits >= 32) { // All UID bits in this Cascade Level are known. This is a SELECT.
   b96d4:	2c1f      	cmp	r4, #31
   b96d6:	dd74      	ble.n	b97c2 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1ac>
				buffer[1] = 0x70; // NVB - Number of Valid Bits: Seven whole bytes
   b96d8:	f04f 0370 	mov.w	r3, #112	; 0x70
				buffer[6] = buffer[2] ^ buffer[3] ^ buffer[4] ^ buffer[5];
   b96dc:	f89d 201f 	ldrb.w	r2, [sp, #31]
				buffer[1] = 0x70; // NVB - Number of Valid Bits: Seven whole bytes
   b96e0:	f88d 301d 	strb.w	r3, [sp, #29]
				buffer[6] = buffer[2] ^ buffer[3] ^ buffer[4] ^ buffer[5];
   b96e4:	f89d 301e 	ldrb.w	r3, [sp, #30]
   b96e8:	4053      	eors	r3, r2
   b96ea:	f89d 2020 	ldrb.w	r2, [sp, #32]
   b96ee:	4053      	eors	r3, r2
   b96f0:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
   b96f4:	4053      	eors	r3, r2
   b96f6:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
				result = PCD_CalculateCRC(buffer, 7, &buffer[7]);
   b96fa:	2207      	movs	r2, #7
   b96fc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
   b9700:	a907      	add	r1, sp, #28
   b9702:	4650      	mov	r0, sl
   b9704:	f7ff fd7d 	bl	b9202 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
				if (result != STATUS_OK) {
   b9708:	2801      	cmp	r0, #1
				result = PCD_CalculateCRC(buffer, 7, &buffer[7]);
   b970a:	4681      	mov	r9, r0
				if (result != STATUS_OK) {
   b970c:	f040 80c8 	bne.w	b98a0 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28a>
				txLastBits		= 0; // 0 => All 8 bits are valid.
   b9710:	2300      	movs	r3, #0
   b9712:	f88d 301a 	strb.w	r3, [sp, #26]
				responseLength	= 3;
   b9716:	2303      	movs	r3, #3
   b9718:	f88d 301b 	strb.w	r3, [sp, #27]
   b971c:	9404      	str	r4, [sp, #16]
				responseBuffer	= &buffer[6];
   b971e:	f10d 0b22 	add.w	fp, sp, #34	; 0x22
				bufferUsed		= 9;
   b9722:	f04f 0909 	mov.w	r9, #9
			rxAlign = txLastBits;											// Having a seperate variable is overkill. But it makes the next line easier to read.
   b9726:	f89d 301a 	ldrb.w	r3, [sp, #26]
			PCD_WriteRegister(BitFramingReg, (rxAlign << 4) + txLastBits);	// RxAlign = BitFramingReg[6..4]. TxLastBits = BitFramingReg[2..0]
   b972a:	9305      	str	r3, [sp, #20]
   b972c:	eb03 1203 	add.w	r2, r3, r3, lsl #4
   b9730:	b2d2      	uxtb	r2, r2
   b9732:	211a      	movs	r1, #26
   b9734:	4650      	mov	r0, sl
   b9736:	f7ff fd2e 	bl	b9196 <_ZN7MFRC52217PCD_WriteRegisterEhh>
			result = PCD_TransceiveData(buffer, bufferUsed, responseBuffer, &responseLength, &txLastBits, rxAlign);			
   b973a:	9b05      	ldr	r3, [sp, #20]
   b973c:	9302      	str	r3, [sp, #8]
   b973e:	f10d 031a 	add.w	r3, sp, #26
   b9742:	2200      	movs	r2, #0
   b9744:	9301      	str	r3, [sp, #4]
   b9746:	f10d 031b 	add.w	r3, sp, #27
   b974a:	9203      	str	r2, [sp, #12]
   b974c:	9300      	str	r3, [sp, #0]
   b974e:	464a      	mov	r2, r9
   b9750:	465b      	mov	r3, fp
   b9752:	a907      	add	r1, sp, #28
   b9754:	4650      	mov	r0, sl
   b9756:	f7ff fe95 	bl	b9484 <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>
			if (result == STATUS_COLLISION) { // More than one PICC in the field => collision.
   b975a:	2803      	cmp	r0, #3
			result = PCD_TransceiveData(buffer, bufferUsed, responseBuffer, &responseLength, &txLastBits, rxAlign);			
   b975c:	4681      	mov	r9, r0
			if (result == STATUS_COLLISION) { // More than one PICC in the field => collision.
   b975e:	d14c      	bne.n	b97fa <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1e4>
				result = PCD_ReadRegister(CollReg); // CollReg[7..0] bits are: ValuesAfterColl reserved CollPosNotValid CollPos[4:0]
   b9760:	211c      	movs	r1, #28
   b9762:	4650      	mov	r0, sl
   b9764:	f7ff fce5 	bl	b9132 <_ZN7MFRC52216PCD_ReadRegisterEh>
				if (result & 0x20) { // CollPosNotValid
   b9768:	0681      	lsls	r1, r0, #26
   b976a:	f100 8099 	bmi.w	b98a0 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28a>
					collisionPos = 32;
   b976e:	f010 001f 	ands.w	r0, r0, #31
   b9772:	bf08      	it	eq
   b9774:	2020      	moveq	r0, #32
				if (collisionPos <= currentLevelKnownBits) { // No progress - should not happen 
   b9776:	42a0      	cmp	r0, r4
   b9778:	f340 8087 	ble.w	b988a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x274>
				count			= (currentLevelKnownBits - 1) % 8; // The bit to modify
   b977c:	1e43      	subs	r3, r0, #1
				index			= 1 + (currentLevelKnownBits / 8) + (count ? 1 : 0); // First byte is index 0.
   b977e:	f003 0207 	and.w	r2, r3, #7
				currentLevelKnownBits = collisionPos;
   b9782:	b244      	sxtb	r4, r0
				index			= 1 + (currentLevelKnownBits / 8) + (count ? 1 : 0); // First byte is index 0.
   b9784:	f013 0307 	ands.w	r3, r3, #7
   b9788:	ea4f 00d0 	mov.w	r0, r0, lsr #3
   b978c:	bf18      	it	ne
   b978e:	2301      	movne	r3, #1
   b9790:	3001      	adds	r0, #1
				buffer[index]	|= (1 << count); 
   b9792:	4418      	add	r0, r3
   b9794:	ab0a      	add	r3, sp, #40	; 0x28
   b9796:	4418      	add	r0, r3
   b9798:	2301      	movs	r3, #1
   b979a:	fa03 f202 	lsl.w	r2, r3, r2
   b979e:	f810 3c0c 	ldrb.w	r3, [r0, #-12]
   b97a2:	4313      	orrs	r3, r2
   b97a4:	f800 3c0c 	strb.w	r3, [r0, #-12]
		while ( ! selectDone) {
   b97a8:	e794      	b.n	b96d4 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xbe>
				buffer[0] = PICC_CMD_SEL_CL3;
   b97aa:	2397      	movs	r3, #151	; 0x97
   b97ac:	f88d 301c 	strb.w	r3, [sp, #28]
				uidIndex = 6;
   b97b0:	2606      	movs	r6, #6
				useCascadeTag = false;						// Never used in CL3.
   b97b2:	4623      	mov	r3, r4
				break;
   b97b4:	e757      	b.n	b9666 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x50>
				useCascadeTag = validBits && uid->size > 4;	// When we know that the UID has more than 4 bytes
   b97b6:	4643      	mov	r3, r8
   b97b8:	e746      	b.n	b9648 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x32>
				useCascadeTag = validBits && uid->size > 7;	// When we know that the UID has more than 7 bytes
   b97ba:	4643      	mov	r3, r8
   b97bc:	e753      	b.n	b9666 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x50>
		index = 2; // destination index in buffer[]
   b97be:	2102      	movs	r1, #2
   b97c0:	e75d      	b.n	b967e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x68>
				count			= currentLevelKnownBits / 8;	// Number of whole bytes in the UID part.
   b97c2:	10e3      	asrs	r3, r4, #3
				index			= 2 + count;					// Number of whole bytes: SEL + NVB + UIDs
   b97c4:	3302      	adds	r3, #2
   b97c6:	b2db      	uxtb	r3, r3
				txLastBits		= currentLevelKnownBits % 8;
   b97c8:	f004 0207 	and.w	r2, r4, #7
				bufferUsed		= index + (txLastBits ? 1 : 0);
   b97cc:	f014 0907 	ands.w	r9, r4, #7
				txLastBits		= currentLevelKnownBits % 8;
   b97d0:	f88d 201a 	strb.w	r2, [sp, #26]
				buffer[1]		= (index << 4) + txLastBits;	// NVB - Number of Valid Bits
   b97d4:	eb02 1203 	add.w	r2, r2, r3, lsl #4
   b97d8:	f88d 201d 	strb.w	r2, [sp, #29]
				bufferUsed		= index + (txLastBits ? 1 : 0);
   b97dc:	bf18      	it	ne
   b97de:	f04f 0901 	movne.w	r9, #1
				responseBuffer	= &buffer[index];
   b97e2:	aa07      	add	r2, sp, #28
				bufferUsed		= index + (txLastBits ? 1 : 0);
   b97e4:	4499      	add	r9, r3
				responseBuffer	= &buffer[index];
   b97e6:	eb02 0b03 	add.w	fp, r2, r3
				responseLength	= sizeof(buffer) - index;
   b97ea:	f1c3 0309 	rsb	r3, r3, #9
				bufferUsed		= index + (txLastBits ? 1 : 0);
   b97ee:	fa5f f989 	uxtb.w	r9, r9
				responseLength	= sizeof(buffer) - index;
   b97f2:	f88d 301b 	strb.w	r3, [sp, #27]
   b97f6:	9404      	str	r4, [sp, #16]
   b97f8:	e795      	b.n	b9726 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x110>
			else if (result != STATUS_OK) {
   b97fa:	2801      	cmp	r0, #1
   b97fc:	d150      	bne.n	b98a0 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28a>
				if (currentLevelKnownBits >= 32) { // This was a SELECT.
   b97fe:	9b04      	ldr	r3, [sp, #16]
   b9800:	2b1f      	cmp	r3, #31
					currentLevelKnownBits = 32;
   b9802:	f04f 0420 	mov.w	r4, #32
				if (currentLevelKnownBits >= 32) { // This was a SELECT.
   b9806:	f77f af67 	ble.w	b96d8 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xc2>
		index			= (buffer[2] == PICC_CMD_CT) ? 3 : 2; // source index in buffer[]
   b980a:	f89d 301e 	ldrb.w	r3, [sp, #30]
   b980e:	2b88      	cmp	r3, #136	; 0x88
   b9810:	d13e      	bne.n	b9890 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x27a>
   b9812:	2303      	movs	r3, #3
		bytesToCopy		= (buffer[2] == PICC_CMD_CT) ? 3 : 4;
   b9814:	461a      	mov	r2, r3
		for (count = 0; count < bytesToCopy; count++) {
   b9816:	3601      	adds	r6, #1
   b9818:	441a      	add	r2, r3
   b981a:	fa57 f686 	uxtab	r6, r7, r6
   b981e:	b2d2      	uxtb	r2, r2
			uid->uidByte[uidIndex + count] = buffer[index++];
   b9820:	4619      	mov	r1, r3
   b9822:	a80a      	add	r0, sp, #40	; 0x28
   b9824:	3301      	adds	r3, #1
   b9826:	4401      	add	r1, r0
   b9828:	b2db      	uxtb	r3, r3
   b982a:	f811 1c0c 	ldrb.w	r1, [r1, #-12]
   b982e:	f806 1b01 	strb.w	r1, [r6], #1
		for (count = 0; count < bytesToCopy; count++) {
   b9832:	4293      	cmp	r3, r2
   b9834:	d1f4      	bne.n	b9820 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x20a>
		if (responseLength != 3 || txLastBits != 0) {		// SAK must be exactly 24 bits (1 byte + CRC_A).
   b9836:	f89d 601b 	ldrb.w	r6, [sp, #27]
   b983a:	2e03      	cmp	r6, #3
   b983c:	d137      	bne.n	b98ae <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x298>
   b983e:	f89d 401a 	ldrb.w	r4, [sp, #26]
   b9842:	bba4      	cbnz	r4, b98ae <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x298>
		result = PCD_CalculateCRC(responseBuffer, 1, &buffer[2]);
   b9844:	f10d 031e 	add.w	r3, sp, #30
   b9848:	2201      	movs	r2, #1
   b984a:	4659      	mov	r1, fp
   b984c:	4650      	mov	r0, sl
   b984e:	f7ff fcd8 	bl	b9202 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
		if (result != STATUS_OK) {
   b9852:	2801      	cmp	r0, #1
		result = PCD_CalculateCRC(responseBuffer, 1, &buffer[2]);
   b9854:	4681      	mov	r9, r0
		if (result != STATUS_OK) {
   b9856:	d123      	bne.n	b98a0 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28a>
		if ((buffer[2] != responseBuffer[1]) || (buffer[3] != responseBuffer[2])) {
   b9858:	f89d 201e 	ldrb.w	r2, [sp, #30]
   b985c:	f89b 3001 	ldrb.w	r3, [fp, #1]
   b9860:	429a      	cmp	r2, r3
   b9862:	d127      	bne.n	b98b4 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x29e>
   b9864:	f89d 201f 	ldrb.w	r2, [sp, #31]
   b9868:	f89b 3002 	ldrb.w	r3, [fp, #2]
   b986c:	429a      	cmp	r2, r3
   b986e:	d121      	bne.n	b98b4 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x29e>
		if (responseBuffer[0] & 0x04) { // Cascade bit set - UID not complete yes
   b9870:	f89b 3000 	ldrb.w	r3, [fp]
   b9874:	075a      	lsls	r2, r3, #29
   b9876:	d50e      	bpl.n	b9896 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x280>
			cascadeLevel++;
   b9878:	3501      	adds	r5, #1
   b987a:	b2ed      	uxtb	r5, r5
		switch (cascadeLevel) {
   b987c:	2d03      	cmp	r5, #3
   b987e:	d094      	beq.n	b97aa <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x194>
   b9880:	2d04      	cmp	r5, #4
   b9882:	d002      	beq.n	b988a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x274>
   b9884:	2d02      	cmp	r5, #2
   b9886:	f43f aee2 	beq.w	b964e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x38>
   b988a:	f04f 0906 	mov.w	r9, #6
   b988e:	e007      	b.n	b98a0 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28a>
		index			= (buffer[2] == PICC_CMD_CT) ? 3 : 2; // source index in buffer[]
   b9890:	2302      	movs	r3, #2
		bytesToCopy		= (buffer[2] == PICC_CMD_CT) ? 3 : 4;
   b9892:	2204      	movs	r2, #4
   b9894:	e7bf      	b.n	b9816 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x200>
	uid->size = 3 * cascadeLevel + 1;
   b9896:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   b989a:	3501      	adds	r5, #1
			uid->sak = responseBuffer[0];
   b989c:	72fb      	strb	r3, [r7, #11]
	uid->size = 3 * cascadeLevel + 1;
   b989e:	703d      	strb	r5, [r7, #0]
} // End PICC_Select()
   b98a0:	4648      	mov	r0, r9
   b98a2:	b00b      	add	sp, #44	; 0x2c
   b98a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return STATUS_INVALID;
   b98a8:	f04f 0907 	mov.w	r9, #7
   b98ac:	e7f8      	b.n	b98a0 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28a>
			return STATUS_ERROR;
   b98ae:	f04f 0902 	mov.w	r9, #2
   b98b2:	e7f5      	b.n	b98a0 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28a>
			return STATUS_CRC_WRONG;
   b98b4:	f04f 0908 	mov.w	r9, #8
   b98b8:	e7f2      	b.n	b98a0 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28a>

000b98ba <_ZN7MFRC52219PICC_ReadCardSerialEv>:
 * Remember to call PICC_IsNewCardPresent(), PICC_RequestA() or PICC_WakeupA() first.
 * The read UID is available in the class variable uid.
 * 
 * @return bool
 */
bool MFRC522::PICC_ReadCardSerial() {
   b98ba:	b508      	push	{r3, lr}
   b98bc:	4601      	mov	r1, r0
	byte result = PICC_Select(&uid);
   b98be:	2200      	movs	r2, #0
   b98c0:	f7ff fea9 	bl	b9616 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh>
	return (result == STATUS_OK);
} // End PICC_ReadCardSerial()
   b98c4:	1e43      	subs	r3, r0, #1
   b98c6:	4258      	negs	r0, r3
   b98c8:	4158      	adcs	r0, r3
   b98ca:	bd08      	pop	{r3, pc}

000b98cc <_ZN10UltrasonicC1Ei>:

#endif

Ultrasonic::Ultrasonic(int pin)
{
	_pin = pin;
   b98cc:	6001      	str	r1, [r0, #0]
}
   b98ce:	4770      	bx	lr

000b98d0 <_ZN10Ultrasonic20MeasureInCentimetersEv>:
/*The measured distance from the range 0 to 400 Centimeters*/
long Ultrasonic::MeasureInCentimeters(void)
{
   b98d0:	b510      	push	{r4, lr}
   b98d2:	4604      	mov	r4, r0
	pinMode(_pin, OUTPUT);
   b98d4:	2101      	movs	r1, #1
   b98d6:	8800      	ldrh	r0, [r0, #0]
   b98d8:	f001 ffcc 	bl	bb874 <pinMode>
	digitalWrite(_pin, LOW);
   b98dc:	8820      	ldrh	r0, [r4, #0]
   b98de:	2100      	movs	r1, #0
   b98e0:	f001 ffd9 	bl	bb896 <digitalWrite>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   b98e4:	2002      	movs	r0, #2
   b98e6:	f000 fe7f 	bl	ba5e8 <HAL_Delay_Microseconds>
	delayMicroseconds(2);
	digitalWrite(_pin, HIGH);
   b98ea:	8820      	ldrh	r0, [r4, #0]
   b98ec:	2101      	movs	r1, #1
   b98ee:	f001 ffd2 	bl	bb896 <digitalWrite>
   b98f2:	2005      	movs	r0, #5
   b98f4:	f000 fe78 	bl	ba5e8 <HAL_Delay_Microseconds>
	delayMicroseconds(5);
	digitalWrite(_pin,LOW);
   b98f8:	8820      	ldrh	r0, [r4, #0]
   b98fa:	2100      	movs	r1, #0
   b98fc:	f001 ffcb 	bl	bb896 <digitalWrite>
	pinMode(_pin,INPUT);
   b9900:	8820      	ldrh	r0, [r4, #0]
   b9902:	2100      	movs	r1, #0
   b9904:	f001 ffb6 	bl	bb874 <pinMode>
	long duration;
	duration = pulseIn(_pin,HIGH);
   b9908:	8820      	ldrh	r0, [r4, #0]
   b990a:	2101      	movs	r1, #1
   b990c:	f002 f822 	bl	bb954 <pulseIn>
	long RangeInCentimeters;
	RangeInCentimeters = duration/29/2;
	return RangeInCentimeters;
}
   b9910:	233a      	movs	r3, #58	; 0x3a
   b9912:	fb90 f0f3 	sdiv	r0, r0, r3
   b9916:	bd10      	pop	{r4, pc}

000b9918 <_ZN3DHTC1Ehhh>:
 * modified for Spark Core by RussGrue
 * */

#include "Adafruit_DHT_Particle.h"

DHT::DHT(uint8_t pin, uint8_t type, uint8_t count) {
   b9918:	b510      	push	{r4, lr}
	_pin = pin;
	_type = type;
	_count = count;
   b991a:	7203      	strb	r3, [r0, #8]
	firstreading = true;
   b991c:	2301      	movs	r3, #1
	_pin = pin;
   b991e:	7181      	strb	r1, [r0, #6]
	_type = type;
   b9920:	71c2      	strb	r2, [r0, #7]
	firstreading = true;
   b9922:	7403      	strb	r3, [r0, #16]
}
   b9924:	bd10      	pop	{r4, pc}

000b9926 <_ZN3DHT5beginEv>:

void DHT::begin(void) {
   b9926:	b510      	push	{r4, lr}
   b9928:	4604      	mov	r4, r0
// set up the pins!
	pinMode(_pin, INPUT);
   b992a:	2100      	movs	r1, #0
   b992c:	7980      	ldrb	r0, [r0, #6]
   b992e:	f001 ffa1 	bl	bb874 <pinMode>
	digitalWrite(_pin, HIGH);
   b9932:	79a0      	ldrb	r0, [r4, #6]
   b9934:	2101      	movs	r1, #1
   b9936:	f001 ffae 	bl	bb896 <digitalWrite>
	_lastreadtime = 0;
   b993a:	2300      	movs	r3, #0
   b993c:	60e3      	str	r3, [r4, #12]
}
   b993e:	bd10      	pop	{r4, pc}

000b9940 <_ZN3DHT4readEv>:
	double Td = (b * tC) / (a - tC);
	return Td;
}


boolean DHT::read(void) {
   b9940:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b9944:	4604      	mov	r4, r0
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b9946:	f000 fe57 	bl	ba5f8 <HAL_Timer_Get_Milli_Seconds>
	unsigned long currenttime;

// Check if sensor was read less than two seconds ago and return early
// to use last reading.
	currenttime = millis();
	if (currenttime < _lastreadtime) {
   b994a:	68e3      	ldr	r3, [r4, #12]
   b994c:	4283      	cmp	r3, r0
// ie there was a rollover
		_lastreadtime = 0;
   b994e:	bf84      	itt	hi
   b9950:	2300      	movhi	r3, #0
   b9952:	60e3      	strhi	r3, [r4, #12]
	}
	if (!firstreading && ((currenttime - _lastreadtime) < 2000)) {
   b9954:	7c23      	ldrb	r3, [r4, #16]
   b9956:	b923      	cbnz	r3, b9962 <_ZN3DHT4readEv+0x22>
   b9958:	68e3      	ldr	r3, [r4, #12]
   b995a:	1ac0      	subs	r0, r0, r3
   b995c:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
   b9960:	d367      	bcc.n	b9a32 <_ZN3DHT4readEv+0xf2>
		return true; // return last correct measurement
//		delay(2000 - (currenttime - _lastreadtime));
	}
	firstreading = false;
   b9962:	2500      	movs	r5, #0
   b9964:	7425      	strb	r5, [r4, #16]
   b9966:	f000 fe47 	bl	ba5f8 <HAL_Timer_Get_Milli_Seconds>
	_lastreadtime = millis();

	data[0] = data[1] = data[2] = data[3] = data[4] = 0;
  
// pull the pin high and wait 250 milliseconds
	digitalWrite(_pin, HIGH);
   b996a:	2101      	movs	r1, #1
	_lastreadtime = millis();
   b996c:	60e0      	str	r0, [r4, #12]
	data[0] = data[1] = data[2] = data[3] = data[4] = 0;
   b996e:	6025      	str	r5, [r4, #0]
	digitalWrite(_pin, HIGH);
   b9970:	79a0      	ldrb	r0, [r4, #6]
	data[0] = data[1] = data[2] = data[3] = data[4] = 0;
   b9972:	7125      	strb	r5, [r4, #4]
	digitalWrite(_pin, HIGH);
   b9974:	f001 ff8f 	bl	bb896 <digitalWrite>
	delay(250);
   b9978:	20fa      	movs	r0, #250	; 0xfa
   b997a:	f001 fbb0 	bl	bb0de <delay>

// now pull it low for ~20 milliseconds
	pinMode(_pin, OUTPUT);
   b997e:	79a0      	ldrb	r0, [r4, #6]
   b9980:	2101      	movs	r1, #1
   b9982:	f001 ff77 	bl	bb874 <pinMode>
	digitalWrite(_pin, LOW);
   b9986:	4629      	mov	r1, r5
   b9988:	79a0      	ldrb	r0, [r4, #6]
   b998a:	f001 ff84 	bl	bb896 <digitalWrite>
	delay(20);
   b998e:	2014      	movs	r0, #20
   b9990:	f001 fba5 	bl	bb0de <delay>
	noInterrupts();
   b9994:	f001 fd5e 	bl	bb454 <_Z12noInterruptsv>
	digitalWrite(_pin, HIGH);
   b9998:	2101      	movs	r1, #1
   b999a:	79a0      	ldrb	r0, [r4, #6]
   b999c:	f001 ff7b 	bl	bb896 <digitalWrite>
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   b99a0:	2028      	movs	r0, #40	; 0x28
   b99a2:	f000 fe21 	bl	ba5e8 <HAL_Delay_Microseconds>
	delayMicroseconds(40);
	pinMode(_pin, INPUT);
   b99a6:	79a0      	ldrb	r0, [r4, #6]
   b99a8:	4629      	mov	r1, r5
   b99aa:	f001 ff63 	bl	bb874 <pinMode>
	uint8_t j = 0, i;
   b99ae:	462e      	mov	r6, r5
	uint8_t laststate = HIGH;
   b99b0:	2701      	movs	r7, #1
   b99b2:	f04f 0800 	mov.w	r8, #0

// read in timings
	for ( i=0; i< MAXTIMINGS; i++) {
		counter = 0;
		while (digitalRead(_pin) == laststate) {
   b99b6:	79a0      	ldrb	r0, [r4, #6]
   b99b8:	f001 ff86 	bl	bb8c8 <digitalRead>
   b99bc:	42b8      	cmp	r0, r7
   b99be:	fa5f f988 	uxtb.w	r9, r8
   b99c2:	d108      	bne.n	b99d6 <_ZN3DHT4readEv+0x96>
   b99c4:	2001      	movs	r0, #1
			counter++;
			delayMicroseconds(1);
			if (counter == 255) {
   b99c6:	f108 0801 	add.w	r8, r8, #1
   b99ca:	f000 fe0d 	bl	ba5e8 <HAL_Delay_Microseconds>
   b99ce:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   b99d2:	d1f0      	bne.n	b99b6 <_ZN3DHT4readEv+0x76>
   b99d4:	46c1      	mov	r9, r8
				break;
			}
		}
		laststate = digitalRead(_pin);
   b99d6:	79a0      	ldrb	r0, [r4, #6]
   b99d8:	f001 ff76 	bl	bb8c8 <digitalRead>

		if (counter == 255) break;
   b99dc:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
		laststate = digitalRead(_pin);
   b99e0:	b2c7      	uxtb	r7, r0
		if (counter == 255) break;
   b99e2:	d014      	beq.n	b9a0e <_ZN3DHT4readEv+0xce>

// ignore first 3 transitions
		if ((i >= 4) && (i%2 == 0)) {
   b99e4:	2d03      	cmp	r5, #3
   b99e6:	d90e      	bls.n	b9a06 <_ZN3DHT4readEv+0xc6>
   b99e8:	07ea      	lsls	r2, r5, #31
   b99ea:	d40c      	bmi.n	b9a06 <_ZN3DHT4readEv+0xc6>
// shove each bit into the storage bytes
			data[j/8] <<= 1;
   b99ec:	08f2      	lsrs	r2, r6, #3
			if (counter > _count)
				data[j/8] |= 1;
			j++;
   b99ee:	3601      	adds	r6, #1
			data[j/8] <<= 1;
   b99f0:	5ca3      	ldrb	r3, [r4, r2]
   b99f2:	005b      	lsls	r3, r3, #1
   b99f4:	b2db      	uxtb	r3, r3
   b99f6:	54a3      	strb	r3, [r4, r2]
			if (counter > _count)
   b99f8:	7a21      	ldrb	r1, [r4, #8]
   b99fa:	4549      	cmp	r1, r9
				data[j/8] |= 1;
   b99fc:	bf3c      	itt	cc
   b99fe:	f043 0301 	orrcc.w	r3, r3, #1
   b9a02:	54a3      	strbcc	r3, [r4, r2]
			j++;
   b9a04:	b2f6      	uxtb	r6, r6
	for ( i=0; i< MAXTIMINGS; i++) {
   b9a06:	3501      	adds	r5, #1
   b9a08:	b2ed      	uxtb	r5, r5
   b9a0a:	2d55      	cmp	r5, #85	; 0x55
   b9a0c:	d1d1      	bne.n	b99b2 <_ZN3DHT4readEv+0x72>
		}

	}

	interrupts();
   b9a0e:	f001 fd23 	bl	bb458 <_Z10interruptsv>
	Serial.print(data[4], HEX); Serial.print(" =? ");
	Serial.println(data[0] + data[1] + data[2] + data[3], HEX);
*/

// check we read 40 bits and that the checksum matches
	if ((j >= 40) && 
   b9a12:	2e27      	cmp	r6, #39	; 0x27
   b9a14:	d90f      	bls.n	b9a36 <_ZN3DHT4readEv+0xf6>
	   (data[4] == ((data[0] + data[1] + data[2] + data[3]) & 0xFF)) ) {
   b9a16:	7863      	ldrb	r3, [r4, #1]
   b9a18:	7820      	ldrb	r0, [r4, #0]
   b9a1a:	4418      	add	r0, r3
   b9a1c:	78a3      	ldrb	r3, [r4, #2]
   b9a1e:	4418      	add	r0, r3
   b9a20:	78e3      	ldrb	r3, [r4, #3]
   b9a22:	4418      	add	r0, r3
   b9a24:	7923      	ldrb	r3, [r4, #4]
   b9a26:	b2c0      	uxtb	r0, r0
	if ((j >= 40) && 
   b9a28:	1ac3      	subs	r3, r0, r3
   b9a2a:	4258      	negs	r0, r3
   b9a2c:	4158      	adcs	r0, r3
		return true;
	}
 
	return false;

}
   b9a2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return true; // return last correct measurement
   b9a32:	2001      	movs	r0, #1
   b9a34:	e7fb      	b.n	b9a2e <_ZN3DHT4readEv+0xee>
	return false;
   b9a36:	2000      	movs	r0, #0
   b9a38:	e7f9      	b.n	b9a2e <_ZN3DHT4readEv+0xee>
	...

000b9a3c <_ZN3DHT15readTemperatureEv>:
float DHT::readTemperature() {
   b9a3c:	b510      	push	{r4, lr}
   b9a3e:	4604      	mov	r4, r0
	if (read()) {
   b9a40:	f7ff ff7e 	bl	b9940 <_ZN3DHT4readEv>
   b9a44:	b320      	cbz	r0, b9a90 <_ZN3DHT15readTemperatureEv+0x54>
		switch (_type) {
   b9a46:	79e3      	ldrb	r3, [r4, #7]
   b9a48:	2b0b      	cmp	r3, #11
   b9a4a:	d01b      	beq.n	b9a84 <_ZN3DHT15readTemperatureEv+0x48>
   b9a4c:	3b15      	subs	r3, #21
   b9a4e:	2b01      	cmp	r3, #1
   b9a50:	d81e      	bhi.n	b9a90 <_ZN3DHT15readTemperatureEv+0x54>
   b9a52:	78a3      	ldrb	r3, [r4, #2]
				f += data[3];
   b9a54:	eddf 6a10 	vldr	s13, [pc, #64]	; b9a98 <_ZN3DHT15readTemperatureEv+0x5c>
				f = data[2] & 0x7F;
   b9a58:	f003 027f 	and.w	r2, r3, #127	; 0x7f
   b9a5c:	ee07 2a10 	vmov	s14, r2
				f += data[3];
   b9a60:	78e2      	ldrb	r2, [r4, #3]
   b9a62:	ee07 2a90 	vmov	s15, r2
				f = data[2] & 0x7F;
   b9a66:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
				f += data[3];
   b9a6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
				if (data[2] & 0x80)
   b9a6e:	061b      	lsls	r3, r3, #24
				f += data[3];
   b9a70:	eee7 7a26 	vfma.f32	s15, s14, s13
				f /= 10;
   b9a74:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
   b9a78:	ee87 0a87 	vdiv.f32	s0, s15, s14
				if (data[2] & 0x80)
   b9a7c:	d507      	bpl.n	b9a8e <_ZN3DHT15readTemperatureEv+0x52>
					f *= -1;
   b9a7e:	eeb1 0a40 	vneg.f32	s0, s0
   b9a82:	e004      	b.n	b9a8e <_ZN3DHT15readTemperatureEv+0x52>
				f = data[2];
   b9a84:	78a3      	ldrb	r3, [r4, #2]
   b9a86:	ee00 3a10 	vmov	s0, r3
   b9a8a:	eeb8 0a40 	vcvt.f32.u32	s0, s0
}
   b9a8e:	bd10      	pop	{r4, pc}
		switch (_type) {
   b9a90:	ed9f 0a02 	vldr	s0, [pc, #8]	; b9a9c <_ZN3DHT15readTemperatureEv+0x60>
   b9a94:	e7fb      	b.n	b9a8e <_ZN3DHT15readTemperatureEv+0x52>
   b9a96:	bf00      	nop
   b9a98:	43800000 	.word	0x43800000
   b9a9c:	7fc00000 	.word	0x7fc00000

000b9aa0 <_ZN3DHT14getTempCelciusEv>:
	return readTemperature();
   b9aa0:	f7ff bfcc 	b.w	b9a3c <_ZN3DHT15readTemperatureEv>

000b9aa4 <_ZN16Adafruit_SSD1306D1Ev>:
}

/*!
    @brief  Destructor for Adafruit_SSD1306 object.
*/
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   b9aa4:	b510      	push	{r4, lr}
   b9aa6:	4b04      	ldr	r3, [pc, #16]	; (b9ab8 <_ZN16Adafruit_SSD1306D1Ev+0x14>)
   b9aa8:	6003      	str	r3, [r0, #0]
   b9aaa:	4604      	mov	r4, r0
  if(buffer) {
   b9aac:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b9aae:	b108      	cbz	r0, b9ab4 <_ZN16Adafruit_SSD1306D1Ev+0x10>
    free(buffer);
   b9ab0:	f000 ff96 	bl	ba9e0 <free>
    buffer = NULL;
  }
}
   b9ab4:	4620      	mov	r0, r4
   b9ab6:	bd10      	pop	{r4, pc}
   b9ab8:	000bdb04 	.word	0x000bdb04

000b9abc <_ZN16Adafruit_SSD1306D0Ev>:
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   b9abc:	b510      	push	{r4, lr}
   b9abe:	4604      	mov	r4, r0
}
   b9ac0:	f7ff fff0 	bl	b9aa4 <_ZN16Adafruit_SSD1306D1Ev>
   b9ac4:	4620      	mov	r0, r4
   b9ac6:	2150      	movs	r1, #80	; 0x50
   b9ac8:	f7fa ffbd 	bl	b4a46 <_ZdlPvj>
   b9acc:	4620      	mov	r0, r4
   b9ace:	bd10      	pop	{r4, pc}

000b9ad0 <_ZN16Adafruit_SSD13069drawPixelEsst>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   b9ad0:	2900      	cmp	r1, #0
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   b9ad2:	b510      	push	{r4, lr}
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   b9ad4:	db4b      	blt.n	b9b6e <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b9ad6:	f9b0 400c 	ldrsh.w	r4, [r0, #12]
   b9ada:	428c      	cmp	r4, r1
   b9adc:	dd47      	ble.n	b9b6e <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b9ade:	2a00      	cmp	r2, #0
   b9ae0:	db45      	blt.n	b9b6e <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b9ae2:	f9b0 400e 	ldrsh.w	r4, [r0, #14]
   b9ae6:	4294      	cmp	r4, r2
   b9ae8:	dd41      	ble.n	b9b6e <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
  /*!
    @brief      Get rotation setting for display
    @returns    0 thru 3 corresponding to 4 cardinal rotations
  */
  /************************************************************************/
  uint8_t getRotation(void) const { return rotation; }
   b9aea:	7e84      	ldrb	r4, [r0, #26]
    // Pixel is in-bounds. Rotate coordinates if needed.
    switch(getRotation()) {
   b9aec:	2c02      	cmp	r4, #2
   b9aee:	d01f      	beq.n	b9b30 <_ZN16Adafruit_SSD13069drawPixelEsst+0x60>
   b9af0:	2c03      	cmp	r4, #3
   b9af2:	d026      	beq.n	b9b42 <_ZN16Adafruit_SSD13069drawPixelEsst+0x72>
   b9af4:	2c01      	cmp	r4, #1
   b9af6:	d104      	bne.n	b9b02 <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case 1:
      ssd1306_swap(x, y);
      x = WIDTH - x - 1;
   b9af8:	8904      	ldrh	r4, [r0, #8]
   b9afa:	43d2      	mvns	r2, r2
   b9afc:	4414      	add	r4, r2
      break;
   b9afe:	460a      	mov	r2, r1
      x = WIDTH - x - 1;
   b9b00:	b221      	sxth	r1, r4
     case 3:
      ssd1306_swap(x, y);
      y = HEIGHT - y - 1;
      break;
    }
    switch(color) {
   b9b02:	2b01      	cmp	r3, #1
   b9b04:	d023      	beq.n	b9b4e <_ZN16Adafruit_SSD13069drawPixelEsst+0x7e>
   b9b06:	2b02      	cmp	r3, #2
   b9b08:	d032      	beq.n	b9b70 <_ZN16Adafruit_SSD13069drawPixelEsst+0xa0>
   b9b0a:	bb83      	cbnz	r3, b9b6e <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
     case BLACK:   buffer[x + (y/8)*WIDTH] &= ~(1 << (y&7)); break;
   b9b0c:	2a00      	cmp	r2, #0
   b9b0e:	4613      	mov	r3, r2
   b9b10:	8904      	ldrh	r4, [r0, #8]
   b9b12:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b9b14:	bfb8      	it	lt
   b9b16:	1dd3      	addlt	r3, r2, #7
   b9b18:	10db      	asrs	r3, r3, #3
   b9b1a:	fb13 1104 	smlabb	r1, r3, r4, r1
   b9b1e:	f002 0207 	and.w	r2, r2, #7
   b9b22:	2301      	movs	r3, #1
   b9b24:	4093      	lsls	r3, r2
   b9b26:	5c42      	ldrb	r2, [r0, r1]
   b9b28:	ea22 0203 	bic.w	r2, r2, r3
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
   b9b2c:	5442      	strb	r2, [r0, r1]
    }
  }
}
   b9b2e:	e01e      	b.n	b9b6e <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
      x = WIDTH  - x - 1;
   b9b30:	8904      	ldrh	r4, [r0, #8]
   b9b32:	3c01      	subs	r4, #1
   b9b34:	1a61      	subs	r1, r4, r1
      y = HEIGHT - y - 1;
   b9b36:	8944      	ldrh	r4, [r0, #10]
   b9b38:	43d2      	mvns	r2, r2
   b9b3a:	4422      	add	r2, r4
      x = WIDTH  - x - 1;
   b9b3c:	b209      	sxth	r1, r1
      y = HEIGHT - y - 1;
   b9b3e:	b212      	sxth	r2, r2
      break;
   b9b40:	e7df      	b.n	b9b02 <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
      y = HEIGHT - y - 1;
   b9b42:	8944      	ldrh	r4, [r0, #10]
   b9b44:	3c01      	subs	r4, #1
   b9b46:	1a64      	subs	r4, r4, r1
      break;
   b9b48:	4611      	mov	r1, r2
      y = HEIGHT - y - 1;
   b9b4a:	b222      	sxth	r2, r4
      break;
   b9b4c:	e7d9      	b.n	b9b02 <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
   b9b4e:	2a00      	cmp	r2, #0
   b9b50:	8904      	ldrh	r4, [r0, #8]
   b9b52:	4613      	mov	r3, r2
   b9b54:	bfb8      	it	lt
   b9b56:	1dd3      	addlt	r3, r2, #7
   b9b58:	10db      	asrs	r3, r3, #3
   b9b5a:	fb13 1104 	smlabb	r1, r3, r4, r1
   b9b5e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   b9b60:	f002 0007 	and.w	r0, r2, #7
   b9b64:	2201      	movs	r2, #1
   b9b66:	4082      	lsls	r2, r0
   b9b68:	5c58      	ldrb	r0, [r3, r1]
   b9b6a:	4302      	orrs	r2, r0
   b9b6c:	545a      	strb	r2, [r3, r1]
}
   b9b6e:	bd10      	pop	{r4, pc}
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
   b9b70:	2a00      	cmp	r2, #0
   b9b72:	4613      	mov	r3, r2
   b9b74:	8904      	ldrh	r4, [r0, #8]
   b9b76:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b9b78:	bfb8      	it	lt
   b9b7a:	1dd3      	addlt	r3, r2, #7
   b9b7c:	10db      	asrs	r3, r3, #3
   b9b7e:	fb13 1104 	smlabb	r1, r3, r4, r1
   b9b82:	f002 0207 	and.w	r2, r2, #7
   b9b86:	2301      	movs	r3, #1
   b9b88:	fa03 f202 	lsl.w	r2, r3, r2
   b9b8c:	5c43      	ldrb	r3, [r0, r1]
   b9b8e:	405a      	eors	r2, r3
   b9b90:	e7cc      	b.n	b9b2c <_ZN16Adafruit_SSD13069drawPixelEsst+0x5c>
	...

000b9b94 <_ZN16Adafruit_SSD1306C1Ea>:
Adafruit_SSD1306::Adafruit_SSD1306(int8_t rst_pin) :
   b9b94:	b570      	push	{r4, r5, r6, lr}
  rstPin(rst_pin) {
   b9b96:	2240      	movs	r2, #64	; 0x40
Adafruit_SSD1306::Adafruit_SSD1306(int8_t rst_pin) :
   b9b98:	4604      	mov	r4, r0
   b9b9a:	460e      	mov	r6, r1
  rstPin(rst_pin) {
   b9b9c:	2180      	movs	r1, #128	; 0x80
   b9b9e:	f7fe fe1d 	bl	b87dc <_ZN12Adafruit_GFXC1Ess>
   b9ba2:	2500      	movs	r5, #0
   b9ba4:	4b0d      	ldr	r3, [pc, #52]	; (b9bdc <_ZN16Adafruit_SSD1306C1Ea+0x48>)
   b9ba6:	6023      	str	r3, [r4, #0]
   b9ba8:	6265      	str	r5, [r4, #36]	; 0x24
  Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT), spi(NULL), wire(&Wire),
   b9baa:	f001 ff47 	bl	bba3c <_Z19__fetch_global_Wirev>
  rstPin(rst_pin) {
   b9bae:	23ff      	movs	r3, #255	; 0xff
   b9bb0:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
   b9bb4:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
  {
   b9bb8:	4b09      	ldr	r3, [pc, #36]	; (b9be0 <_ZN16Adafruit_SSD1306C1Ea+0x4c>)
   b9bba:	63a3      	str	r3, [r4, #56]	; 0x38
   b9bbc:	f64f 72ff 	movw	r2, #65535	; 0xffff
   b9bc0:	2301      	movs	r3, #1
   b9bc2:	e9c4 050a 	strd	r0, r5, [r4, #40]	; 0x28
   b9bc6:	86a2      	strh	r2, [r4, #52]	; 0x34
   b9bc8:	f884 6037 	strb.w	r6, [r4, #55]	; 0x37
   b9bcc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   b9bd0:	6425      	str	r5, [r4, #64]	; 0x40
   b9bd2:	f8a4 5044 	strh.w	r5, [r4, #68]	; 0x44
}
   b9bd6:	4620      	mov	r0, r4
   b9bd8:	bd70      	pop	{r4, r5, r6, pc}
   b9bda:	bf00      	nop
   b9bdc:	000bdb04 	.word	0x000bdb04
   b9be0:	000bd510 	.word	0x000bd510

000b9be4 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>:
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   b9be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b9be6:	4604      	mov	r4, r0
  if(wire) { // I2C
   b9be8:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   b9bea:	460d      	mov	r5, r1
  if(wire) { // I2C
   b9bec:	b190      	cbz	r0, b9c14 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x30>
    wire->beginTransmission(i2caddr);
   b9bee:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b9bf2:	f001 fd07 	bl	bb604 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b9bf6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b9bf8:	6803      	ldr	r3, [r0, #0]
   b9bfa:	2100      	movs	r1, #0
   b9bfc:	689b      	ldr	r3, [r3, #8]
   b9bfe:	4798      	blx	r3
    WIRE_WRITE(c);
   b9c00:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b9c02:	6803      	ldr	r3, [r0, #0]
   b9c04:	4629      	mov	r1, r5
   b9c06:	689b      	ldr	r3, [r3, #8]
   b9c08:	4798      	blx	r3
    wire->endTransmission();
   b9c0a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   b9c0c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    wire->endTransmission();
   b9c10:	f001 bcff 	b.w	bb612 <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   b9c14:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   b9c18:	4601      	mov	r1, r0
   b9c1a:	b298      	uxth	r0, r3
   b9c1c:	f001 fe3b 	bl	bb896 <digitalWrite>
  if(spi) {
   b9c20:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b9c22:	b120      	cbz	r0, b9c2e <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4a>
    (void)spi->transfer(d);
   b9c24:	4629      	mov	r1, r5
}
   b9c26:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    (void)spi->transfer(d);
   b9c2a:	f000 bffb 	b.w	bac24 <_ZN8SPIClass8transferEh>
   b9c2e:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b9c30:	2780      	movs	r7, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b9c32:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b9c36:	ea05 0107 	and.w	r1, r5, r7
   b9c3a:	b280      	uxth	r0, r0
   b9c3c:	f001 fe2b 	bl	bb896 <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b9c40:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b9c44:	2101      	movs	r1, #1
   b9c46:	b280      	uxth	r0, r0
   b9c48:	f001 fe25 	bl	bb896 <digitalWrite>
      digitalWrite(clkPin , LOW);
   b9c4c:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b9c50:	2100      	movs	r1, #0
   b9c52:	b280      	uxth	r0, r0
   b9c54:	f001 fe1f 	bl	bb896 <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b9c58:	3e01      	subs	r6, #1
   b9c5a:	ea4f 0757 	mov.w	r7, r7, lsr #1
   b9c5e:	d1e8      	bne.n	b9c32 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4e>
}
   b9c60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b9c62 <_ZN16Adafruit_SSD130613invertDisplayEb>:
            display() function -- buffer contents are not changed, rather a
            different pixel mode of the display hardware is used. When
            enabled, drawing BLACK (value 0) pixels will actually draw white,
            WHITE (value 1) will draw black.
*/
void Adafruit_SSD1306::invertDisplay(boolean i) {
   b9c62:	b538      	push	{r3, r4, r5, lr}
   b9c64:	4604      	mov	r4, r0
  TRANSACTION_START
   b9c66:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::invertDisplay(boolean i) {
   b9c68:	460d      	mov	r5, r1
  TRANSACTION_START
   b9c6a:	b180      	cbz	r0, b9c8e <_ZN16Adafruit_SSD130613invertDisplayEb+0x2c>

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
  inline void setClock(uint32_t speed) {
	  setSpeed(speed);
   b9c6c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b9c6e:	f001 fcbb 	bl	bb5e8 <_ZN7TwoWire8setSpeedEm>
  ssd1306_command1(i ? SSD1306_INVERTDISPLAY : SSD1306_NORMALDISPLAY);
   b9c72:	2d00      	cmp	r5, #0
   b9c74:	4620      	mov	r0, r4
   b9c76:	bf14      	ite	ne
   b9c78:	21a7      	movne	r1, #167	; 0xa7
   b9c7a:	21a6      	moveq	r1, #166	; 0xa6
   b9c7c:	f7ff ffb2 	bl	b9be4 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  TRANSACTION_END
   b9c80:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b9c82:	b188      	cbz	r0, b9ca8 <_ZN16Adafruit_SSD130613invertDisplayEb+0x46>
   b9c84:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   b9c86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b9c8a:	f001 bcad 	b.w	bb5e8 <_ZN7TwoWire8setSpeedEm>
  TRANSACTION_START
   b9c8e:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b9c90:	b118      	cbz	r0, b9c9a <_ZN16Adafruit_SSD130613invertDisplayEb+0x38>
   b9c92:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b9c96:	f000 ff57 	bl	bab48 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b9c9a:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b9c9e:	2100      	movs	r1, #0
   b9ca0:	b280      	uxth	r0, r0
   b9ca2:	f001 fdf8 	bl	bb896 <digitalWrite>
   b9ca6:	e7e4      	b.n	b9c72 <_ZN16Adafruit_SSD130613invertDisplayEb+0x10>
  TRANSACTION_END
   b9ca8:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b9cac:	2101      	movs	r1, #1
   b9cae:	b280      	uxth	r0, r0
   b9cb0:	f001 fdf1 	bl	bb896 <digitalWrite>
   b9cb4:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b9cb6:	b118      	cbz	r0, b9cc0 <_ZN16Adafruit_SSD130613invertDisplayEb+0x5e>
}
   b9cb8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  TRANSACTION_END
   b9cbc:	f000 bf2a 	b.w	bab14 <_ZN8SPIClass14endTransactionEv>
}
   b9cc0:	bd38      	pop	{r3, r4, r5, pc}

000b9cc2 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>:
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   b9cc2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b9cc6:	4604      	mov	r4, r0
  if(wire) { // I2C
   b9cc8:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   b9cca:	460d      	mov	r5, r1
  if(wire) { // I2C
   b9ccc:	188f      	adds	r7, r1, r2
   b9cce:	b340      	cbz	r0, b9d22 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x60>
    wire->beginTransmission(i2caddr);
   b9cd0:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b9cd4:	f001 fc96 	bl	bb604 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b9cd8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b9cda:	6803      	ldr	r3, [r0, #0]
   b9cdc:	2100      	movs	r1, #0
   b9cde:	689b      	ldr	r3, [r3, #8]
   b9ce0:	4798      	blx	r3
    uint8_t bytesOut = 1;
   b9ce2:	2601      	movs	r6, #1
    while(n--) {
   b9ce4:	42af      	cmp	r7, r5
        wire->endTransmission();
   b9ce6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    while(n--) {
   b9ce8:	d017      	beq.n	b9d1a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x58>
      if(bytesOut >= WIRE_MAX) {
   b9cea:	2e1f      	cmp	r6, #31
   b9cec:	d90c      	bls.n	b9d08 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x46>
        wire->endTransmission();
   b9cee:	f001 fc90 	bl	bb612 <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   b9cf2:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b9cf6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b9cf8:	f001 fc84 	bl	bb604 <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b9cfc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b9cfe:	6803      	ldr	r3, [r0, #0]
   b9d00:	2100      	movs	r1, #0
   b9d02:	689b      	ldr	r3, [r3, #8]
   b9d04:	4798      	blx	r3
        bytesOut = 1;
   b9d06:	2601      	movs	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   b9d08:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b9d0a:	f815 1b01 	ldrb.w	r1, [r5], #1
   b9d0e:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   b9d10:	3601      	adds	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   b9d12:	689b      	ldr	r3, [r3, #8]
   b9d14:	4798      	blx	r3
      bytesOut++;
   b9d16:	b2f6      	uxtb	r6, r6
    while(n--) {
   b9d18:	e7e4      	b.n	b9ce4 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x22>
}
   b9d1a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    wire->endTransmission();
   b9d1e:	f001 bc78 	b.w	bb612 <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   b9d22:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   b9d26:	4601      	mov	r1, r0
   b9d28:	b298      	uxth	r0, r3
   b9d2a:	f001 fdb4 	bl	bb896 <digitalWrite>
    while(n--) SPIwrite(pgm_read_byte(c++));
   b9d2e:	42bd      	cmp	r5, r7
   b9d30:	d022      	beq.n	b9d78 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xb6>
  if(spi) {
   b9d32:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(n--) SPIwrite(pgm_read_byte(c++));
   b9d34:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
   b9d38:	b118      	cbz	r0, b9d42 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x80>
    (void)spi->transfer(d);
   b9d3a:	4649      	mov	r1, r9
   b9d3c:	f000 ff72 	bl	bac24 <_ZN8SPIClass8transferEh>
   b9d40:	e7f5      	b.n	b9d2e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
   b9d42:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b9d44:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b9d48:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b9d4c:	ea09 0108 	and.w	r1, r9, r8
   b9d50:	b280      	uxth	r0, r0
   b9d52:	f001 fda0 	bl	bb896 <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b9d56:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b9d5a:	2101      	movs	r1, #1
   b9d5c:	b280      	uxth	r0, r0
   b9d5e:	f001 fd9a 	bl	bb896 <digitalWrite>
      digitalWrite(clkPin , LOW);
   b9d62:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b9d66:	2100      	movs	r1, #0
   b9d68:	b280      	uxth	r0, r0
   b9d6a:	f001 fd94 	bl	bb896 <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b9d6e:	3e01      	subs	r6, #1
   b9d70:	ea4f 0858 	mov.w	r8, r8, lsr #1
   b9d74:	d1e8      	bne.n	b9d48 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x86>
   b9d76:	e7da      	b.n	b9d2e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
}
   b9d78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000b9d7c <_ZN16Adafruit_SSD130612clearDisplayEv>:
  memset(buffer, 0, WIDTH * ((HEIGHT + 7) / 8));
   b9d7c:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   b9d80:	1dda      	adds	r2, r3, #7
   b9d82:	bf48      	it	mi
   b9d84:	f103 020e 	addmi.w	r2, r3, #14
   b9d88:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   b9d8c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b9d8e:	10d2      	asrs	r2, r2, #3
   b9d90:	435a      	muls	r2, r3
   b9d92:	2100      	movs	r1, #0
   b9d94:	f001 be94 	b.w	bbac0 <memset>

000b9d98 <_ZN16Adafruit_SSD13065beginEhhbb>:
  boolean periphBegin) {
   b9d98:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b9d9c:	461e      	mov	r6, r3
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b9d9e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  boolean periphBegin) {
   b9da0:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   b9da4:	4604      	mov	r4, r0
   b9da6:	460f      	mov	r7, r1
   b9da8:	4615      	mov	r5, r2
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b9daa:	b1d3      	cbz	r3, b9de2 <_ZN16Adafruit_SSD13065beginEhhbb+0x4a>
  clearDisplay();
   b9dac:	4620      	mov	r0, r4
   b9dae:	f7ff ffe5 	bl	b9d7c <_ZN16Adafruit_SSD130612clearDisplayEv>
  if(HEIGHT > 32) {
   b9db2:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
   b9db6:	2a20      	cmp	r2, #32
   b9db8:	dc25      	bgt.n	b9e06 <_ZN16Adafruit_SSD13065beginEhhbb+0x6e>
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   b9dba:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
   b9dbe:	2320      	movs	r3, #32
   b9dc0:	3a20      	subs	r2, #32
   b9dc2:	3973      	subs	r1, #115	; 0x73
   b9dc4:	2001      	movs	r0, #1
   b9dc6:	e9cd 3001 	strd	r3, r0, [sp, #4]
   b9dca:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   b9dce:	2373      	movs	r3, #115	; 0x73
   b9dd0:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   b9dd4:	9300      	str	r3, [sp, #0]
   b9dd6:	f342 024f 	sbfx	r2, r2, #1, #16
   b9dda:	4b85      	ldr	r3, [pc, #532]	; (b9ff0 <_ZN16Adafruit_SSD13065beginEhhbb+0x258>)
   b9ddc:	f341 014f 	sbfx	r1, r1, #1, #16
   b9de0:	e01b      	b.n	b9e1a <_ZN16Adafruit_SSD13065beginEhhbb+0x82>
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b9de2:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   b9de6:	1dd8      	adds	r0, r3, #7
   b9de8:	bf48      	it	mi
   b9dea:	f103 000e 	addmi.w	r0, r3, #14
   b9dee:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
   b9df2:	10c0      	asrs	r0, r0, #3
   b9df4:	4358      	muls	r0, r3
   b9df6:	f000 fdeb 	bl	ba9d0 <malloc>
   b9dfa:	62e0      	str	r0, [r4, #44]	; 0x2c
   b9dfc:	2800      	cmp	r0, #0
   b9dfe:	d1d5      	bne.n	b9dac <_ZN16Adafruit_SSD13065beginEhhbb+0x14>
}
   b9e00:	b004      	add	sp, #16
   b9e02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    drawBitmap(0,0, sucreLogo_data, sucreLogo_width, sucreLogo_height, 1);
   b9e06:	2340      	movs	r3, #64	; 0x40
   b9e08:	f04f 0c01 	mov.w	ip, #1
   b9e0c:	e9cd 3c01 	strd	r3, ip, [sp, #4]
   b9e10:	2380      	movs	r3, #128	; 0x80
   b9e12:	9300      	str	r3, [sp, #0]
   b9e14:	2200      	movs	r2, #0
   b9e16:	4b77      	ldr	r3, [pc, #476]	; (b9ff4 <_ZN16Adafruit_SSD13065beginEhhbb+0x25c>)
   b9e18:	4611      	mov	r1, r2
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   b9e1a:	4620      	mov	r0, r4
   b9e1c:	f7fe fea6 	bl	b8b6c <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
  if(wire) { // Using I2C
   b9e20:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  vccstate = vcs;
   b9e22:	f884 7031 	strb.w	r7, [r4, #49]	; 0x31
  if(wire) { // Using I2C
   b9e26:	2800      	cmp	r0, #0
   b9e28:	d078      	beq.n	b9f1c <_ZN16Adafruit_SSD13065beginEhhbb+0x184>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   b9e2a:	2d00      	cmp	r5, #0
   b9e2c:	d174      	bne.n	b9f18 <_ZN16Adafruit_SSD13065beginEhhbb+0x180>
   b9e2e:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   b9e32:	2b20      	cmp	r3, #32
   b9e34:	bf0c      	ite	eq
   b9e36:	253c      	moveq	r5, #60	; 0x3c
   b9e38:	253d      	movne	r5, #61	; 0x3d
   b9e3a:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    if(periphBegin) wire->begin();
   b9e3e:	f1b8 0f00 	cmp.w	r8, #0
   b9e42:	d001      	beq.n	b9e48 <_ZN16Adafruit_SSD13065beginEhhbb+0xb0>
   b9e44:	f001 fbd4 	bl	bb5f0 <_ZN7TwoWire5beginEv>
  if(reset && (rstPin >= 0)) {
   b9e48:	b1fe      	cbz	r6, b9e8a <_ZN16Adafruit_SSD13065beginEhhbb+0xf2>
   b9e4a:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b9e4e:	2800      	cmp	r0, #0
   b9e50:	db1b      	blt.n	b9e8a <_ZN16Adafruit_SSD13065beginEhhbb+0xf2>
    pinMode(     rstPin, OUTPUT);
   b9e52:	2101      	movs	r1, #1
   b9e54:	b280      	uxth	r0, r0
   b9e56:	f001 fd0d 	bl	bb874 <pinMode>
    digitalWrite(rstPin, HIGH);
   b9e5a:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b9e5e:	2101      	movs	r1, #1
   b9e60:	b280      	uxth	r0, r0
   b9e62:	f001 fd18 	bl	bb896 <digitalWrite>
    delay(1);                   // VDD goes high at start, pause for 1 ms
   b9e66:	2001      	movs	r0, #1
   b9e68:	f001 f939 	bl	bb0de <delay>
    digitalWrite(rstPin, LOW);  // Bring reset low
   b9e6c:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b9e70:	2100      	movs	r1, #0
   b9e72:	b280      	uxth	r0, r0
   b9e74:	f001 fd0f 	bl	bb896 <digitalWrite>
    delay(10);                  // Wait 10 ms
   b9e78:	200a      	movs	r0, #10
   b9e7a:	f001 f930 	bl	bb0de <delay>
    digitalWrite(rstPin, HIGH); // Bring out of reset
   b9e7e:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b9e82:	2101      	movs	r1, #1
   b9e84:	b280      	uxth	r0, r0
   b9e86:	f001 fd06 	bl	bb896 <digitalWrite>
  TRANSACTION_START
   b9e8a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b9e8c:	2800      	cmp	r0, #0
   b9e8e:	d074      	beq.n	b9f7a <_ZN16Adafruit_SSD13065beginEhhbb+0x1e2>
   b9e90:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b9e92:	f001 fba9 	bl	bb5e8 <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(init1, sizeof(init1));
   b9e96:	2204      	movs	r2, #4
   b9e98:	4957      	ldr	r1, [pc, #348]	; (b9ff8 <_ZN16Adafruit_SSD13065beginEhhbb+0x260>)
   b9e9a:	4620      	mov	r0, r4
   b9e9c:	f7ff ff11 	bl	b9cc2 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(HEIGHT - 1);
   b9ea0:	8961      	ldrh	r1, [r4, #10]
   b9ea2:	3901      	subs	r1, #1
   b9ea4:	b2c9      	uxtb	r1, r1
   b9ea6:	4620      	mov	r0, r4
   b9ea8:	f7ff fe9c 	bl	b9be4 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init2, sizeof(init2));
   b9eac:	4953      	ldr	r1, [pc, #332]	; (b9ffc <_ZN16Adafruit_SSD13065beginEhhbb+0x264>)
   b9eae:	2204      	movs	r2, #4
   b9eb0:	4620      	mov	r0, r4
   b9eb2:	f7ff ff06 	bl	b9cc2 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0x14);
   b9eb6:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b9eba:	2b01      	cmp	r3, #1
   b9ebc:	bf0c      	ite	eq
   b9ebe:	2110      	moveq	r1, #16
   b9ec0:	2114      	movne	r1, #20
   b9ec2:	4620      	mov	r0, r4
   b9ec4:	f7ff fe8e 	bl	b9be4 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init3, sizeof(init3));
   b9ec8:	2204      	movs	r2, #4
   b9eca:	494d      	ldr	r1, [pc, #308]	; (ba000 <_ZN16Adafruit_SSD13065beginEhhbb+0x268>)
   b9ecc:	4620      	mov	r0, r4
   b9ece:	f7ff fef8 	bl	b9cc2 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  if((WIDTH == 128) && (HEIGHT == 32)) {
   b9ed2:	68a3      	ldr	r3, [r4, #8]
   b9ed4:	4a4b      	ldr	r2, [pc, #300]	; (ba004 <_ZN16Adafruit_SSD13065beginEhhbb+0x26c>)
   b9ed6:	4293      	cmp	r3, r2
   b9ed8:	d15c      	bne.n	b9f94 <_ZN16Adafruit_SSD13065beginEhhbb+0x1fc>
    ssd1306_commandList(init4a, sizeof(init4a));
   b9eda:	494b      	ldr	r1, [pc, #300]	; (ba008 <_ZN16Adafruit_SSD13065beginEhhbb+0x270>)
   b9edc:	2204      	movs	r2, #4
   b9ede:	4620      	mov	r0, r4
   b9ee0:	f7ff feef 	bl	b9cc2 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(SSD1306_SETPRECHARGE); // 0xd9
   b9ee4:	21d9      	movs	r1, #217	; 0xd9
   b9ee6:	4620      	mov	r0, r4
   b9ee8:	f7ff fe7c 	bl	b9be4 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x22 : 0xF1);
   b9eec:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b9ef0:	2b01      	cmp	r3, #1
   b9ef2:	bf0c      	ite	eq
   b9ef4:	2122      	moveq	r1, #34	; 0x22
   b9ef6:	21f1      	movne	r1, #241	; 0xf1
   b9ef8:	4620      	mov	r0, r4
   b9efa:	f7ff fe73 	bl	b9be4 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init5, sizeof(init5));
   b9efe:	4620      	mov	r0, r4
   b9f00:	4942      	ldr	r1, [pc, #264]	; (ba00c <_ZN16Adafruit_SSD13065beginEhhbb+0x274>)
   b9f02:	2206      	movs	r2, #6
   b9f04:	f7ff fedd 	bl	b9cc2 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  TRANSACTION_END
   b9f08:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b9f0a:	2800      	cmp	r0, #0
   b9f0c:	d063      	beq.n	b9fd6 <_ZN16Adafruit_SSD13065beginEhhbb+0x23e>
   b9f0e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   b9f10:	f001 fb6a 	bl	bb5e8 <_ZN7TwoWire8setSpeedEm>
  return true; // Success
   b9f14:	2001      	movs	r0, #1
   b9f16:	e773      	b.n	b9e00 <_ZN16Adafruit_SSD13065beginEhhbb+0x68>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   b9f18:	b26d      	sxtb	r5, r5
   b9f1a:	e78e      	b.n	b9e3a <_ZN16Adafruit_SSD13065beginEhhbb+0xa2>
    pinMode(dcPin, OUTPUT); // Set data/command pin as output
   b9f1c:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   b9f20:	2101      	movs	r1, #1
   b9f22:	b280      	uxth	r0, r0
   b9f24:	f001 fca6 	bl	bb874 <pinMode>
    pinMode(csPin, OUTPUT); // Same for chip select
   b9f28:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b9f2c:	2101      	movs	r1, #1
   b9f2e:	b280      	uxth	r0, r0
   b9f30:	f001 fca0 	bl	bb874 <pinMode>
    SSD1306_DESELECT
   b9f34:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b9f38:	2101      	movs	r1, #1
   b9f3a:	b280      	uxth	r0, r0
   b9f3c:	f001 fcab 	bl	bb896 <digitalWrite>
    if(spi) { // Hardware SPI
   b9f40:	6a65      	ldr	r5, [r4, #36]	; 0x24
   b9f42:	b13d      	cbz	r5, b9f54 <_ZN16Adafruit_SSD13065beginEhhbb+0x1bc>
      if(periphBegin) spi->begin();
   b9f44:	f1b8 0f00 	cmp.w	r8, #0
   b9f48:	f43f af7e 	beq.w	b9e48 <_ZN16Adafruit_SSD13065beginEhhbb+0xb0>
   b9f4c:	4628      	mov	r0, r5
   b9f4e:	f000 fdcd 	bl	baaec <_ZN8SPIClass5beginEv>
   b9f52:	e779      	b.n	b9e48 <_ZN16Adafruit_SSD13065beginEhhbb+0xb0>
      pinMode(mosiPin, OUTPUT); // MOSI and SCLK outputs
   b9f54:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b9f58:	2101      	movs	r1, #1
   b9f5a:	b280      	uxth	r0, r0
   b9f5c:	f001 fc8a 	bl	bb874 <pinMode>
      pinMode(clkPin , OUTPUT);
   b9f60:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b9f64:	2101      	movs	r1, #1
   b9f66:	b280      	uxth	r0, r0
   b9f68:	f001 fc84 	bl	bb874 <pinMode>
      digitalWrite(clkPin, LOW); // Clock low
   b9f6c:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b9f70:	4629      	mov	r1, r5
   b9f72:	b280      	uxth	r0, r0
   b9f74:	f001 fc8f 	bl	bb896 <digitalWrite>
   b9f78:	e766      	b.n	b9e48 <_ZN16Adafruit_SSD13065beginEhhbb+0xb0>
  TRANSACTION_START
   b9f7a:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b9f7c:	b118      	cbz	r0, b9f86 <_ZN16Adafruit_SSD13065beginEhhbb+0x1ee>
   b9f7e:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b9f82:	f000 fde1 	bl	bab48 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b9f86:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b9f8a:	2100      	movs	r1, #0
   b9f8c:	b280      	uxth	r0, r0
   b9f8e:	f001 fc82 	bl	bb896 <digitalWrite>
   b9f92:	e780      	b.n	b9e96 <_ZN16Adafruit_SSD13065beginEhhbb+0xfe>
  } else if((WIDTH == 128) && (HEIGHT == 64)) {
   b9f94:	4a1e      	ldr	r2, [pc, #120]	; (ba010 <_ZN16Adafruit_SSD13065beginEhhbb+0x278>)
   b9f96:	4293      	cmp	r3, r2
   b9f98:	d10e      	bne.n	b9fb8 <_ZN16Adafruit_SSD13065beginEhhbb+0x220>
    ssd1306_commandList(init4b, sizeof(init4b));
   b9f9a:	491e      	ldr	r1, [pc, #120]	; (ba014 <_ZN16Adafruit_SSD13065beginEhhbb+0x27c>)
   b9f9c:	2203      	movs	r2, #3
   b9f9e:	4620      	mov	r0, r4
   b9fa0:	f7ff fe8f 	bl	b9cc2 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x9F : 0xCF);
   b9fa4:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b9fa8:	2b01      	cmp	r3, #1
   b9faa:	bf0c      	ite	eq
   b9fac:	219f      	moveq	r1, #159	; 0x9f
   b9fae:	21cf      	movne	r1, #207	; 0xcf
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   b9fb0:	4620      	mov	r0, r4
   b9fb2:	f7ff fe17 	bl	b9be4 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
   b9fb6:	e795      	b.n	b9ee4 <_ZN16Adafruit_SSD13065beginEhhbb+0x14c>
  } else if((WIDTH == 96) && (HEIGHT == 16)) {
   b9fb8:	4a17      	ldr	r2, [pc, #92]	; (ba018 <_ZN16Adafruit_SSD13065beginEhhbb+0x280>)
   b9fba:	4293      	cmp	r3, r2
   b9fbc:	d192      	bne.n	b9ee4 <_ZN16Adafruit_SSD13065beginEhhbb+0x14c>
    ssd1306_commandList(init4c, sizeof(init4c));
   b9fbe:	4917      	ldr	r1, [pc, #92]	; (ba01c <_ZN16Adafruit_SSD13065beginEhhbb+0x284>)
   b9fc0:	2203      	movs	r2, #3
   b9fc2:	4620      	mov	r0, r4
   b9fc4:	f7ff fe7d 	bl	b9cc2 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   b9fc8:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b9fcc:	2b01      	cmp	r3, #1
   b9fce:	bf0c      	ite	eq
   b9fd0:	2110      	moveq	r1, #16
   b9fd2:	21af      	movne	r1, #175	; 0xaf
   b9fd4:	e7ec      	b.n	b9fb0 <_ZN16Adafruit_SSD13065beginEhhbb+0x218>
  TRANSACTION_END
   b9fd6:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b9fda:	2101      	movs	r1, #1
   b9fdc:	b280      	uxth	r0, r0
   b9fde:	f001 fc5a 	bl	bb896 <digitalWrite>
   b9fe2:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b9fe4:	2800      	cmp	r0, #0
   b9fe6:	d095      	beq.n	b9f14 <_ZN16Adafruit_SSD13065beginEhhbb+0x17c>
   b9fe8:	f000 fd94 	bl	bab14 <_ZN8SPIClass14endTransactionEv>
   b9fec:	e792      	b.n	b9f14 <_ZN16Adafruit_SSD13065beginEhhbb+0x17c>
   b9fee:	bf00      	nop
   b9ff0:	000bd51c 	.word	0x000bd51c
   b9ff4:	000bd6fc 	.word	0x000bd6fc
   b9ff8:	000bdb64 	.word	0x000bdb64
   b9ffc:	000bdb68 	.word	0x000bdb68
   ba000:	000bdb6c 	.word	0x000bdb6c
   ba004:	00200080 	.word	0x00200080
   ba008:	000bdb76 	.word	0x000bdb76
   ba00c:	000bdb70 	.word	0x000bdb70
   ba010:	00400080 	.word	0x00400080
   ba014:	000bdb7a 	.word	0x000bdb7a
   ba018:	00100060 	.word	0x00100060
   ba01c:	000bdb7d 	.word	0x000bdb7d

000ba020 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   ba020:	b570      	push	{r4, r5, r6, lr}
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   ba022:	2a00      	cmp	r2, #0
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   ba024:	f8bd 5010 	ldrh.w	r5, [sp, #16]
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   ba028:	db3d      	blt.n	ba0a6 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   ba02a:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   ba02e:	4294      	cmp	r4, r2
   ba030:	dd39      	ble.n	ba0a6 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
    if(x < 0) { // Clip left
   ba032:	2900      	cmp	r1, #0
      w += x;
   ba034:	bfbe      	ittt	lt
   ba036:	185b      	addlt	r3, r3, r1
   ba038:	b21b      	sxthlt	r3, r3
      x  = 0;
   ba03a:	2100      	movlt	r1, #0
    if((x + w) > WIDTH) { // Clip right
   ba03c:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
   ba040:	18ce      	adds	r6, r1, r3
   ba042:	42a6      	cmp	r6, r4
      w = (WIDTH - x);
   ba044:	bfc4      	itt	gt
   ba046:	1a63      	subgt	r3, r4, r1
   ba048:	b21b      	sxthgt	r3, r3
    if(w > 0) { // Proceed only if width is positive
   ba04a:	2b00      	cmp	r3, #0
   ba04c:	dd2b      	ble.n	ba0a6 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x],
   ba04e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   ba050:	10d6      	asrs	r6, r2, #3
   ba052:	fb14 1106 	smlabb	r1, r4, r6, r1
   ba056:	4401      	add	r1, r0
               mask = 1 << (y & 7);
   ba058:	f002 0007 	and.w	r0, r2, #7
   ba05c:	2201      	movs	r2, #1
   ba05e:	4082      	lsls	r2, r0
      switch(color) {
   ba060:	2d01      	cmp	r5, #1
               mask = 1 << (y & 7);
   ba062:	b2d2      	uxtb	r2, r2
      switch(color) {
   ba064:	d016      	beq.n	ba094 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x74>
   ba066:	2d02      	cmp	r5, #2
   ba068:	d00b      	beq.n	ba082 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x62>
   ba06a:	b9e5      	cbnz	r5, ba0a6 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
       case BLACK: mask = ~mask; while(w--) { *pBuf++ &= mask; }; break;
   ba06c:	43d2      	mvns	r2, r2
   ba06e:	b2d2      	uxtb	r2, r2
   ba070:	440b      	add	r3, r1
   ba072:	4299      	cmp	r1, r3
   ba074:	d017      	beq.n	ba0a6 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   ba076:	f811 0b01 	ldrb.w	r0, [r1], #1
   ba07a:	4010      	ands	r0, r2
   ba07c:	f801 0c01 	strb.w	r0, [r1, #-1]
   ba080:	e7f7      	b.n	ba072 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x52>
   ba082:	440b      	add	r3, r1
       case INVERSE:             while(w--) { *pBuf++ ^= mask; }; break;
   ba084:	4299      	cmp	r1, r3
   ba086:	d00e      	beq.n	ba0a6 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   ba088:	f811 0b01 	ldrb.w	r0, [r1], #1
   ba08c:	4050      	eors	r0, r2
   ba08e:	f801 0c01 	strb.w	r0, [r1, #-1]
   ba092:	e7f7      	b.n	ba084 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x64>
   ba094:	440b      	add	r3, r1
       case WHITE:               while(w--) { *pBuf++ |= mask; }; break;
   ba096:	4299      	cmp	r1, r3
   ba098:	d005      	beq.n	ba0a6 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   ba09a:	f811 0b01 	ldrb.w	r0, [r1], #1
   ba09e:	4310      	orrs	r0, r2
   ba0a0:	f801 0c01 	strb.w	r0, [r1, #-1]
   ba0a4:	e7f7      	b.n	ba096 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x76>
}
   ba0a6:	bd70      	pop	{r4, r5, r6, pc}

000ba0a8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>:
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
   ba0a8:	b5f0      	push	{r4, r5, r6, r7, lr}
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   ba0aa:	2900      	cmp	r1, #0
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
   ba0ac:	f8bd 5014 	ldrh.w	r5, [sp, #20]
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   ba0b0:	db76      	blt.n	ba1a0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
   ba0b2:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
   ba0b6:	42b1      	cmp	r1, r6
   ba0b8:	da72      	bge.n	ba1a0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
    if(__y < 0) { // Clip top
   ba0ba:	2a00      	cmp	r2, #0
      __h += __y;
   ba0bc:	bfbe      	ittt	lt
   ba0be:	189b      	addlt	r3, r3, r2
   ba0c0:	b21b      	sxthlt	r3, r3
      __y = 0;
   ba0c2:	2200      	movlt	r2, #0
    if((__y + __h) > HEIGHT) { // Clip bottom
   ba0c4:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   ba0c8:	18d7      	adds	r7, r2, r3
   ba0ca:	42a7      	cmp	r7, r4
      __h = (HEIGHT - __y);
   ba0cc:	bfc4      	itt	gt
   ba0ce:	1aa3      	subgt	r3, r4, r2
   ba0d0:	b21b      	sxthgt	r3, r3
    if(__h > 0) { // Proceed only if height is now positive
   ba0d2:	2b00      	cmp	r3, #0
   ba0d4:	dd64      	ble.n	ba1a0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   ba0d6:	f3c2 04c4 	ubfx	r4, r2, #3, #5
   ba0da:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
   ba0dc:	fb16 1604 	smlabb	r6, r6, r4, r1
      if(mod) {
   ba0e0:	f012 0207 	ands.w	r2, r2, #7
      uint8_t  y = __y, h = __h;
   ba0e4:	b2db      	uxtb	r3, r3
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   ba0e6:	eb07 0406 	add.w	r4, r7, r6
      if(mod) {
   ba0ea:	d023      	beq.n	ba134 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x8c>
        mod = 8 - mod;
   ba0ec:	f1c2 0208 	rsb	r2, r2, #8
   ba0f0:	b2d2      	uxtb	r2, r2
        uint8_t mask = pgm_read_byte(&premask[mod]);
   ba0f2:	492d      	ldr	r1, [pc, #180]	; (ba1a8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x100>)
        if(h < mod) mask &= (0XFF >> (mod - h));
   ba0f4:	4293      	cmp	r3, r2
   ba0f6:	bf3c      	itt	cc
   ba0f8:	f04f 0cff 	movcc.w	ip, #255	; 0xff
   ba0fc:	eba2 0e03 	subcc.w	lr, r2, r3
        uint8_t mask = pgm_read_byte(&premask[mod]);
   ba100:	5c89      	ldrb	r1, [r1, r2]
        if(h < mod) mask &= (0XFF >> (mod - h));
   ba102:	bf3c      	itt	cc
   ba104:	fa4c fc0e 	asrcc.w	ip, ip, lr
   ba108:	ea0c 0101 	andcc.w	r1, ip, r1
        switch(color) {
   ba10c:	2d01      	cmp	r5, #1
   ba10e:	d007      	beq.n	ba120 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x78>
   ba110:	2d02      	cmp	r5, #2
   ba112:	d02e      	beq.n	ba172 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xca>
   ba114:	b94d      	cbnz	r5, ba12a <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x82>
         case BLACK:   *pBuf &= ~mask; break;
   ba116:	f817 c006 	ldrb.w	ip, [r7, r6]
   ba11a:	ea2c 0101 	bic.w	r1, ip, r1
   ba11e:	e003      	b.n	ba128 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x80>
         case WHITE:   *pBuf |=  mask; break;
   ba120:	f817 c006 	ldrb.w	ip, [r7, r6]
   ba124:	ea41 010c 	orr.w	r1, r1, ip
         case INVERSE: *pBuf ^=  mask; break;
   ba128:	55b9      	strb	r1, [r7, r6]
      if(h >= mod) { // More to go?
   ba12a:	4293      	cmp	r3, r2
   ba12c:	d338      	bcc.n	ba1a0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
        pBuf += WIDTH;
   ba12e:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
   ba132:	440c      	add	r4, r1
        h -= mod;
   ba134:	1a9a      	subs	r2, r3, r2
   ba136:	b2d2      	uxtb	r2, r2
        if(h >= 8) {
   ba138:	2a07      	cmp	r2, #7
   ba13a:	d90e      	bls.n	ba15a <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xb2>
          if(color == INVERSE) {
   ba13c:	2d02      	cmp	r5, #2
   ba13e:	d11d      	bne.n	ba17c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xd4>
   ba140:	4613      	mov	r3, r2
              *pBuf ^= 0xFF;  // Invert byte
   ba142:	7821      	ldrb	r1, [r4, #0]
   ba144:	43c9      	mvns	r1, r1
   ba146:	7021      	strb	r1, [r4, #0]
              h     -= 8;     // Subtract 8 rows from height
   ba148:	3b08      	subs	r3, #8
              pBuf  += WIDTH; // Advance pointer 8 rows
   ba14a:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
              h     -= 8;     // Subtract 8 rows from height
   ba14e:	b2db      	uxtb	r3, r3
            } while(h >= 8);
   ba150:	2b07      	cmp	r3, #7
              pBuf  += WIDTH; // Advance pointer 8 rows
   ba152:	440c      	add	r4, r1
            } while(h >= 8);
   ba154:	d8f5      	bhi.n	ba142 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x9a>
              h    -= 8;      // Subtract 8 rows from height
   ba156:	f002 0207 	and.w	r2, r2, #7
        if(h) { // Do the final partial byte, if necessary
   ba15a:	b30a      	cbz	r2, ba1a0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   ba15c:	4b13      	ldr	r3, [pc, #76]	; (ba1ac <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x104>)
          switch(color) {
   ba15e:	2d01      	cmp	r5, #1
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   ba160:	5c9b      	ldrb	r3, [r3, r2]
          switch(color) {
   ba162:	d01a      	beq.n	ba19a <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf2>
   ba164:	2d02      	cmp	r5, #2
   ba166:	d01c      	beq.n	ba1a2 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xfa>
   ba168:	b9d5      	cbnz	r5, ba1a0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
           case BLACK:   *pBuf &= ~mask; break;
   ba16a:	7822      	ldrb	r2, [r4, #0]
   ba16c:	ea22 0303 	bic.w	r3, r2, r3
   ba170:	e015      	b.n	ba19e <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
         case INVERSE: *pBuf ^=  mask; break;
   ba172:	f817 c006 	ldrb.w	ip, [r7, r6]
   ba176:	ea81 010c 	eor.w	r1, r1, ip
   ba17a:	e7d5      	b.n	ba128 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x80>
            uint8_t val = (color != BLACK) ? 255 : 0;
   ba17c:	1e29      	subs	r1, r5, #0
   ba17e:	bf18      	it	ne
   ba180:	2101      	movne	r1, #1
   ba182:	4249      	negs	r1, r1
   ba184:	b2c9      	uxtb	r1, r1
   ba186:	4613      	mov	r3, r2
              *pBuf = val;    // Set byte
   ba188:	7021      	strb	r1, [r4, #0]
              h    -= 8;      // Subtract 8 rows from height
   ba18a:	3b08      	subs	r3, #8
              pBuf += WIDTH;  // Advance pointer 8 rows
   ba18c:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
              h    -= 8;      // Subtract 8 rows from height
   ba190:	b2db      	uxtb	r3, r3
            } while(h >= 8);
   ba192:	2b07      	cmp	r3, #7
              pBuf += WIDTH;  // Advance pointer 8 rows
   ba194:	4434      	add	r4, r6
            } while(h >= 8);
   ba196:	d8f7      	bhi.n	ba188 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xe0>
   ba198:	e7dd      	b.n	ba156 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xae>
           case WHITE:   *pBuf |=  mask; break;
   ba19a:	7822      	ldrb	r2, [r4, #0]
   ba19c:	4313      	orrs	r3, r2
           case INVERSE: *pBuf ^=  mask; break;
   ba19e:	7023      	strb	r3, [r4, #0]
}
   ba1a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
           case INVERSE: *pBuf ^=  mask; break;
   ba1a2:	7822      	ldrb	r2, [r4, #0]
   ba1a4:	4053      	eors	r3, r2
   ba1a6:	e7fa      	b.n	ba19e <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
   ba1a8:	000bdb54 	.word	0x000bdb54
   ba1ac:	000bdb5c 	.word	0x000bdb5c

000ba1b0 <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   ba1b0:	b470      	push	{r4, r5, r6}
   ba1b2:	4614      	mov	r4, r2
  switch(rotation) {
   ba1b4:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   ba1b6:	f8bd 600c 	ldrh.w	r6, [sp, #12]
  switch(rotation) {
   ba1ba:	2a02      	cmp	r2, #2
   ba1bc:	d00d      	beq.n	ba1da <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x2a>
   ba1be:	2a03      	cmp	r2, #3
   ba1c0:	d018      	beq.n	ba1f4 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x44>
   ba1c2:	2a01      	cmp	r2, #1
   ba1c4:	d111      	bne.n	ba1ea <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3a>
    x = WIDTH - x - 1;
   ba1c6:	8902      	ldrh	r2, [r0, #8]
   ba1c8:	43e4      	mvns	r4, r4
   ba1ca:	4414      	add	r4, r2
   ba1cc:	b224      	sxth	r4, r4
  if(bSwap) drawFastVLineInternal(x, y, w, color);
   ba1ce:	9603      	str	r6, [sp, #12]
   ba1d0:	460a      	mov	r2, r1
   ba1d2:	4621      	mov	r1, r4
}
   ba1d4:	bc70      	pop	{r4, r5, r6}
  if(bSwap) drawFastVLineInternal(x, y, w, color);
   ba1d6:	f7ff bf67 	b.w	ba0a8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y  = HEIGHT - y - 1;
   ba1da:	8942      	ldrh	r2, [r0, #10]
    x -= (w-1);
   ba1dc:	8905      	ldrh	r5, [r0, #8]
    y  = HEIGHT - y - 1;
   ba1de:	43e4      	mvns	r4, r4
    x -= (w-1);
   ba1e0:	4419      	add	r1, r3
    y  = HEIGHT - y - 1;
   ba1e2:	4414      	add	r4, r2
    x -= (w-1);
   ba1e4:	1a69      	subs	r1, r5, r1
    y  = HEIGHT - y - 1;
   ba1e6:	b224      	sxth	r4, r4
    x -= (w-1);
   ba1e8:	b209      	sxth	r1, r1
  else      drawFastHLineInternal(x, y, w, color);
   ba1ea:	9603      	str	r6, [sp, #12]
   ba1ec:	4622      	mov	r2, r4
}
   ba1ee:	bc70      	pop	{r4, r5, r6}
  else      drawFastHLineInternal(x, y, w, color);
   ba1f0:	f7ff bf16 	b.w	ba020 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    y -= (w-1);
   ba1f4:	8945      	ldrh	r5, [r0, #10]
   ba1f6:	4419      	add	r1, r3
   ba1f8:	1a69      	subs	r1, r5, r1
   ba1fa:	b209      	sxth	r1, r1
    break;
   ba1fc:	e7e7      	b.n	ba1ce <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>

000ba1fe <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
  int16_t x, int16_t y, int16_t h, uint16_t color) {
   ba1fe:	b430      	push	{r4, r5}
   ba200:	4614      	mov	r4, r2
  switch(rotation) {
   ba202:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t h, uint16_t color) {
   ba204:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  switch(rotation) {
   ba208:	2a02      	cmp	r2, #2
   ba20a:	d00d      	beq.n	ba228 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x2a>
   ba20c:	2a03      	cmp	r2, #3
   ba20e:	d018      	beq.n	ba242 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x44>
   ba210:	2a01      	cmp	r2, #1
   ba212:	d111      	bne.n	ba238 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    x -= (h-1);
   ba214:	18e2      	adds	r2, r4, r3
   ba216:	8904      	ldrh	r4, [r0, #8]
   ba218:	1aa4      	subs	r4, r4, r2
   ba21a:	b224      	sxth	r4, r4
  if(bSwap) drawFastHLineInternal(x, y, h, color);
   ba21c:	9502      	str	r5, [sp, #8]
   ba21e:	460a      	mov	r2, r1
   ba220:	4621      	mov	r1, r4
}
   ba222:	bc30      	pop	{r4, r5}
  if(bSwap) drawFastHLineInternal(x, y, h, color);
   ba224:	f7ff befc 	b.w	ba020 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    x = WIDTH  - x - 1;
   ba228:	8902      	ldrh	r2, [r0, #8]
   ba22a:	43c9      	mvns	r1, r1
   ba22c:	4411      	add	r1, r2
    y -= (h-1);
   ba22e:	18e2      	adds	r2, r4, r3
   ba230:	8944      	ldrh	r4, [r0, #10]
   ba232:	1aa4      	subs	r4, r4, r2
    x = WIDTH  - x - 1;
   ba234:	b209      	sxth	r1, r1
    y -= (h-1);
   ba236:	b224      	sxth	r4, r4
  else      drawFastVLineInternal(x, y, h, color);
   ba238:	9502      	str	r5, [sp, #8]
   ba23a:	4622      	mov	r2, r4
}
   ba23c:	bc30      	pop	{r4, r5}
  else      drawFastVLineInternal(x, y, h, color);
   ba23e:	f7ff bf33 	b.w	ba0a8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y = HEIGHT - y - 1;
   ba242:	8942      	ldrh	r2, [r0, #10]
   ba244:	43c9      	mvns	r1, r1
   ba246:	4411      	add	r1, r2
   ba248:	b209      	sxth	r1, r1
    break;
   ba24a:	e7e7      	b.n	ba21c <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>

000ba24c <_ZN16Adafruit_SSD13067displayEv>:
void Adafruit_SSD1306::display(void) {
   ba24c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   ba250:	4604      	mov	r4, r0
  TRANSACTION_START
   ba252:	6a80      	ldr	r0, [r0, #40]	; 0x28
   ba254:	2800      	cmp	r0, #0
   ba256:	d042      	beq.n	ba2de <_ZN16Adafruit_SSD13067displayEv+0x92>
   ba258:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   ba25a:	f001 f9c5 	bl	bb5e8 <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(dlist1, sizeof(dlist1));
   ba25e:	4947      	ldr	r1, [pc, #284]	; (ba37c <_ZN16Adafruit_SSD13067displayEv+0x130>)
   ba260:	2205      	movs	r2, #5
   ba262:	4620      	mov	r0, r4
   ba264:	f7ff fd2d 	bl	b9cc2 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(WIDTH - 1); // Column end address
   ba268:	8921      	ldrh	r1, [r4, #8]
   ba26a:	3901      	subs	r1, #1
   ba26c:	4620      	mov	r0, r4
   ba26e:	b2c9      	uxtb	r1, r1
   ba270:	f7ff fcb8 	bl	b9be4 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   ba274:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   ba278:	1dde      	adds	r6, r3, #7
   ba27a:	bf48      	it	mi
   ba27c:	f103 060e 	addmi.w	r6, r3, #14
  if(wire) { // I2C
   ba280:	e9d4 050a 	ldrd	r0, r5, [r4, #40]	; 0x28
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   ba284:	8923      	ldrh	r3, [r4, #8]
   ba286:	10f6      	asrs	r6, r6, #3
   ba288:	fb13 f606 	smulbb	r6, r3, r6
  uint8_t *ptr   = buffer;
   ba28c:	fa15 f686 	uxtah	r6, r5, r6
  if(wire) { // I2C
   ba290:	2800      	cmp	r0, #0
   ba292:	d03a      	beq.n	ba30a <_ZN16Adafruit_SSD13067displayEv+0xbe>
    wire->beginTransmission(i2caddr);
   ba294:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   ba298:	f001 f9b4 	bl	bb604 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x40);
   ba29c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   ba29e:	6803      	ldr	r3, [r0, #0]
   ba2a0:	2140      	movs	r1, #64	; 0x40
   ba2a2:	689b      	ldr	r3, [r3, #8]
   ba2a4:	4798      	blx	r3
    uint8_t bytesOut = 1;
   ba2a6:	2701      	movs	r7, #1
    while(count--) {
   ba2a8:	42b5      	cmp	r5, r6
        wire->endTransmission();
   ba2aa:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    while(count--) {
   ba2ac:	d024      	beq.n	ba2f8 <_ZN16Adafruit_SSD13067displayEv+0xac>
      if(bytesOut >= WIRE_MAX) {
   ba2ae:	2f1f      	cmp	r7, #31
   ba2b0:	d90c      	bls.n	ba2cc <_ZN16Adafruit_SSD13067displayEv+0x80>
        wire->endTransmission();
   ba2b2:	f001 f9ae 	bl	bb612 <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   ba2b6:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   ba2ba:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   ba2bc:	f001 f9a2 	bl	bb604 <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x40);
   ba2c0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   ba2c2:	6803      	ldr	r3, [r0, #0]
   ba2c4:	2140      	movs	r1, #64	; 0x40
   ba2c6:	689b      	ldr	r3, [r3, #8]
   ba2c8:	4798      	blx	r3
        bytesOut = 1;
   ba2ca:	2701      	movs	r7, #1
      WIRE_WRITE(*ptr++);
   ba2cc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   ba2ce:	f815 1b01 	ldrb.w	r1, [r5], #1
   ba2d2:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   ba2d4:	3701      	adds	r7, #1
      WIRE_WRITE(*ptr++);
   ba2d6:	689b      	ldr	r3, [r3, #8]
   ba2d8:	4798      	blx	r3
      bytesOut++;
   ba2da:	b2ff      	uxtb	r7, r7
    while(count--) {
   ba2dc:	e7e4      	b.n	ba2a8 <_ZN16Adafruit_SSD13067displayEv+0x5c>
  TRANSACTION_START
   ba2de:	6a60      	ldr	r0, [r4, #36]	; 0x24
   ba2e0:	b118      	cbz	r0, ba2ea <_ZN16Adafruit_SSD13067displayEv+0x9e>
   ba2e2:	f104 0138 	add.w	r1, r4, #56	; 0x38
   ba2e6:	f000 fc2f 	bl	bab48 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   ba2ea:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   ba2ee:	2100      	movs	r1, #0
   ba2f0:	b280      	uxth	r0, r0
   ba2f2:	f001 fad0 	bl	bb896 <digitalWrite>
   ba2f6:	e7b2      	b.n	ba25e <_ZN16Adafruit_SSD13067displayEv+0x12>
    wire->endTransmission();
   ba2f8:	f001 f98b 	bl	bb612 <_ZN7TwoWire15endTransmissionEv>
  TRANSACTION_END
   ba2fc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   ba2fe:	b378      	cbz	r0, ba360 <_ZN16Adafruit_SSD13067displayEv+0x114>
   ba300:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   ba302:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   ba306:	f001 b96f 	b.w	bb5e8 <_ZN7TwoWire8setSpeedEm>
    SSD1306_MODE_DATA
   ba30a:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   ba30e:	2101      	movs	r1, #1
   ba310:	b280      	uxth	r0, r0
   ba312:	f001 fac0 	bl	bb896 <digitalWrite>
    while(count--) SPIwrite(*ptr++);
   ba316:	42ae      	cmp	r6, r5
   ba318:	d0f0      	beq.n	ba2fc <_ZN16Adafruit_SSD13067displayEv+0xb0>
  if(spi) {
   ba31a:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(count--) SPIwrite(*ptr++);
   ba31c:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
   ba320:	b118      	cbz	r0, ba32a <_ZN16Adafruit_SSD13067displayEv+0xde>
    (void)spi->transfer(d);
   ba322:	4649      	mov	r1, r9
   ba324:	f000 fc7e 	bl	bac24 <_ZN8SPIClass8transferEh>
   ba328:	e7f5      	b.n	ba316 <_ZN16Adafruit_SSD13067displayEv+0xca>
   ba32a:	2708      	movs	r7, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   ba32c:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   ba330:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   ba334:	ea09 0108 	and.w	r1, r9, r8
   ba338:	b280      	uxth	r0, r0
   ba33a:	f001 faac 	bl	bb896 <digitalWrite>
      digitalWrite(clkPin , HIGH);
   ba33e:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   ba342:	2101      	movs	r1, #1
   ba344:	b280      	uxth	r0, r0
   ba346:	f001 faa6 	bl	bb896 <digitalWrite>
      digitalWrite(clkPin , LOW);
   ba34a:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   ba34e:	2100      	movs	r1, #0
   ba350:	b280      	uxth	r0, r0
   ba352:	f001 faa0 	bl	bb896 <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   ba356:	3f01      	subs	r7, #1
   ba358:	ea4f 0858 	mov.w	r8, r8, lsr #1
   ba35c:	d1e8      	bne.n	ba330 <_ZN16Adafruit_SSD13067displayEv+0xe4>
   ba35e:	e7da      	b.n	ba316 <_ZN16Adafruit_SSD13067displayEv+0xca>
  TRANSACTION_END
   ba360:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   ba364:	2101      	movs	r1, #1
   ba366:	b280      	uxth	r0, r0
   ba368:	f001 fa95 	bl	bb896 <digitalWrite>
   ba36c:	6a60      	ldr	r0, [r4, #36]	; 0x24
   ba36e:	b118      	cbz	r0, ba378 <_ZN16Adafruit_SSD13067displayEv+0x12c>
}
   ba370:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  TRANSACTION_END
   ba374:	f000 bbce 	b.w	bab14 <_ZN8SPIClass14endTransactionEv>
}
   ba378:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   ba37c:	000bdb80 	.word	0x000bdb80

000ba380 <_ZN12ChainableLEDC1Ehhh>:
// Forward declaration
float hue2rgb(float p, float q, float t);

// --------------------------------------------------------------------------------------

ChainableLED::ChainableLED(byte clk_pin, byte data_pin, byte number_of_leds) :
   ba380:	b510      	push	{r4, lr}
   ba382:	4604      	mov	r4, r0
    _clk_pin(clk_pin), _data_pin(data_pin), _num_leds(number_of_leds)
   ba384:	7001      	strb	r1, [r0, #0]
   ba386:	7042      	strb	r2, [r0, #1]
   ba388:	7083      	strb	r3, [r0, #2]
{
    _led_state = (byte*) calloc(_num_leds*3, sizeof(byte));
   ba38a:	2101      	movs	r1, #1
   ba38c:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   ba390:	f001 fb80 	bl	bba94 <calloc>
   ba394:	6060      	str	r0, [r4, #4]
}
   ba396:	4620      	mov	r0, r4
   ba398:	bd10      	pop	{r4, pc}

000ba39a <_ZN12ChainableLEDD1Ev>:

ChainableLED::~ChainableLED()
   ba39a:	b510      	push	{r4, lr}
   ba39c:	4604      	mov	r4, r0
{
    free(_led_state);
   ba39e:	6840      	ldr	r0, [r0, #4]
   ba3a0:	f000 fb1e 	bl	ba9e0 <free>
}
   ba3a4:	4620      	mov	r0, r4
   ba3a6:	bd10      	pop	{r4, pc}

000ba3a8 <_ZN12ChainableLED3clkEv>:
    for (byte i=0; i<_num_leds; i++)
        setColorRGB(i, 0, 0, 0);
}

void ChainableLED::clk(void)
{
   ba3a8:	b510      	push	{r4, lr}
    digitalWrite(_clk_pin, LOW);
   ba3aa:	2100      	movs	r1, #0
{
   ba3ac:	4604      	mov	r4, r0
    digitalWrite(_clk_pin, LOW);
   ba3ae:	7800      	ldrb	r0, [r0, #0]
   ba3b0:	f001 fa71 	bl	bb896 <digitalWrite>
   ba3b4:	2014      	movs	r0, #20
   ba3b6:	f000 f917 	bl	ba5e8 <HAL_Delay_Microseconds>
    delayMicroseconds(_CLK_PULSE_DELAY);
    digitalWrite(_clk_pin, HIGH);
   ba3ba:	7820      	ldrb	r0, [r4, #0]
   ba3bc:	2101      	movs	r1, #1
   ba3be:	f001 fa6a 	bl	bb896 <digitalWrite>
    delayMicroseconds(_CLK_PULSE_DELAY);
}
   ba3c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   ba3c6:	2014      	movs	r0, #20
   ba3c8:	f000 b90e 	b.w	ba5e8 <HAL_Delay_Microseconds>

000ba3cc <_ZN12ChainableLED8sendByteEh>:

void ChainableLED::sendByte(byte b)
{
   ba3cc:	b570      	push	{r4, r5, r6, lr}
   ba3ce:	4606      	mov	r6, r0
   ba3d0:	460c      	mov	r4, r1
   ba3d2:	2508      	movs	r5, #8
    // Send one bit at a time, starting with the MSB
    for (byte i=0; i<8; i++)
    {
        // If MSB is 1, write one and clock it, else write 0 and clock
        if ((b & 0x80) != 0)
   ba3d4:	0623      	lsls	r3, r4, #24
            digitalWrite(_data_pin, HIGH);
   ba3d6:	bf4c      	ite	mi
   ba3d8:	2101      	movmi	r1, #1
        else
            digitalWrite(_data_pin, LOW);
   ba3da:	2100      	movpl	r1, #0
            digitalWrite(_data_pin, HIGH);
   ba3dc:	7870      	ldrb	r0, [r6, #1]
            digitalWrite(_data_pin, LOW);
   ba3de:	f001 fa5a 	bl	bb896 <digitalWrite>
    for (byte i=0; i<8; i++)
   ba3e2:	3d01      	subs	r5, #1
        clk();
   ba3e4:	4630      	mov	r0, r6
   ba3e6:	f7ff ffdf 	bl	ba3a8 <_ZN12ChainableLED3clkEv>

        // Advance to the next bit to send
        b <<= 1;
   ba3ea:	0064      	lsls	r4, r4, #1
    for (byte i=0; i<8; i++)
   ba3ec:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
        b <<= 1;
   ba3f0:	b2e4      	uxtb	r4, r4
    for (byte i=0; i<8; i++)
   ba3f2:	d1ef      	bne.n	ba3d4 <_ZN12ChainableLED8sendByteEh+0x8>
    }
}
   ba3f4:	bd70      	pop	{r4, r5, r6, pc}

000ba3f6 <_ZN12ChainableLED9sendColorEhhh>:

void ChainableLED::sendColor(byte red, byte green, byte blue)
{
   ba3f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
    // Start by sending a byte with the format "1 1 /B7 /B6 /G7 /G6 /R7 /R6"
    byte prefix = 0b11000000;
    if ((blue & 0x80) == 0)     prefix|= 0b00100000;
   ba3f8:	f013 0f80 	tst.w	r3, #128	; 0x80
{
   ba3fc:	461e      	mov	r6, r3
   ba3fe:	460c      	mov	r4, r1
   ba400:	4615      	mov	r5, r2
    if ((blue & 0x80) == 0)     prefix|= 0b00100000;
   ba402:	bf14      	ite	ne
   ba404:	21c0      	movne	r1, #192	; 0xc0
   ba406:	21e0      	moveq	r1, #224	; 0xe0
    if ((blue & 0x40) == 0)     prefix|= 0b00010000;
   ba408:	0673      	lsls	r3, r6, #25
   ba40a:	bf58      	it	pl
   ba40c:	f041 0110 	orrpl.w	r1, r1, #16
    if ((green & 0x80) == 0)    prefix|= 0b00001000;
   ba410:	062a      	lsls	r2, r5, #24
   ba412:	bf58      	it	pl
   ba414:	f041 0108 	orrpl.w	r1, r1, #8
    if ((green & 0x40) == 0)    prefix|= 0b00000100;
   ba418:	066b      	lsls	r3, r5, #25
   ba41a:	bf58      	it	pl
   ba41c:	f041 0104 	orrpl.w	r1, r1, #4
    if ((red & 0x80) == 0)      prefix|= 0b00000010;
   ba420:	0622      	lsls	r2, r4, #24
   ba422:	bf58      	it	pl
   ba424:	f041 0102 	orrpl.w	r1, r1, #2
    if ((red & 0x40) == 0)      prefix|= 0b00000001;
   ba428:	0663      	lsls	r3, r4, #25
   ba42a:	bf58      	it	pl
   ba42c:	f041 0101 	orrpl.w	r1, r1, #1
    sendByte(prefix);
   ba430:	9001      	str	r0, [sp, #4]
   ba432:	f7ff ffcb 	bl	ba3cc <_ZN12ChainableLED8sendByteEh>

    // Now must send the 3 colors
    sendByte(blue);
   ba436:	9801      	ldr	r0, [sp, #4]
   ba438:	4631      	mov	r1, r6
   ba43a:	f7ff ffc7 	bl	ba3cc <_ZN12ChainableLED8sendByteEh>
    sendByte(green);
   ba43e:	9801      	ldr	r0, [sp, #4]
   ba440:	4629      	mov	r1, r5
   ba442:	f7ff ffc3 	bl	ba3cc <_ZN12ChainableLED8sendByteEh>
    sendByte(red);
   ba446:	9801      	ldr	r0, [sp, #4]
   ba448:	4621      	mov	r1, r4
}
   ba44a:	b002      	add	sp, #8
   ba44c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    sendByte(red);
   ba450:	f7ff bfbc 	b.w	ba3cc <_ZN12ChainableLED8sendByteEh>

000ba454 <_ZN12ChainableLED11setColorRGBEhhhh>:

void ChainableLED::setColorRGB(byte led, byte red, byte green, byte blue)
{
   ba454:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   ba458:	4604      	mov	r4, r0
   ba45a:	460f      	mov	r7, r1
    // Send data frame prefix (32x "0")
    sendByte(0x00);
   ba45c:	2100      	movs	r1, #0
{
   ba45e:	4690      	mov	r8, r2
   ba460:	4699      	mov	r9, r3
   ba462:	f89d a020 	ldrb.w	sl, [sp, #32]
    sendByte(0x00);
   ba466:	f7ff ffb1 	bl	ba3cc <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   ba46a:	2100      	movs	r1, #0
   ba46c:	4620      	mov	r0, r4
   ba46e:	f7ff ffad 	bl	ba3cc <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   ba472:	2100      	movs	r1, #0
   ba474:	4620      	mov	r0, r4
   ba476:	f7ff ffa9 	bl	ba3cc <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   ba47a:	2100      	movs	r1, #0
   ba47c:	4620      	mov	r0, r4
   ba47e:	f7ff ffa5 	bl	ba3cc <_ZN12ChainableLED8sendByteEh>
   ba482:	2600      	movs	r6, #0

    // Send color data for each one of the leds
    for (byte i=0; i<_num_leds; i++)
   ba484:	78a3      	ldrb	r3, [r4, #2]
   ba486:	b2f5      	uxtb	r5, r6
   ba488:	42ab      	cmp	r3, r5
   ba48a:	d919      	bls.n	ba4c0 <_ZN12ChainableLED11setColorRGBEhhhh+0x6c>
    {
        if (i == led)
        {
            _led_state[i*3 + _CL_RED] = red;
   ba48c:	eb05 0045 	add.w	r0, r5, r5, lsl #1
        if (i == led)
   ba490:	42af      	cmp	r7, r5
            _led_state[i*3 + _CL_GREEN] = green;
   ba492:	f100 0201 	add.w	r2, r0, #1
            _led_state[i*3 + _CL_BLUE] = blue;
   ba496:	f100 0302 	add.w	r3, r0, #2
        if (i == led)
   ba49a:	d108      	bne.n	ba4ae <_ZN12ChainableLED11setColorRGBEhhhh+0x5a>
            _led_state[i*3 + _CL_RED] = red;
   ba49c:	6861      	ldr	r1, [r4, #4]
   ba49e:	f801 8000 	strb.w	r8, [r1, r0]
            _led_state[i*3 + _CL_GREEN] = green;
   ba4a2:	6861      	ldr	r1, [r4, #4]
   ba4a4:	f801 9002 	strb.w	r9, [r1, r2]
            _led_state[i*3 + _CL_BLUE] = blue;
   ba4a8:	6861      	ldr	r1, [r4, #4]
   ba4aa:	f801 a003 	strb.w	sl, [r1, r3]
        }

        sendColor(_led_state[i*3 + _CL_RED],
   ba4ae:	6861      	ldr	r1, [r4, #4]
   ba4b0:	5ccb      	ldrb	r3, [r1, r3]
   ba4b2:	5c8a      	ldrb	r2, [r1, r2]
   ba4b4:	5c09      	ldrb	r1, [r1, r0]
   ba4b6:	4620      	mov	r0, r4
   ba4b8:	f7ff ff9d 	bl	ba3f6 <_ZN12ChainableLED9sendColorEhhh>
    for (byte i=0; i<_num_leds; i++)
   ba4bc:	3601      	adds	r6, #1
   ba4be:	e7e1      	b.n	ba484 <_ZN12ChainableLED11setColorRGBEhhhh+0x30>
                  _led_state[i*3 + _CL_GREEN],
                  _led_state[i*3 + _CL_BLUE]);
    }

    // Terminate data frame (32x "0")
    sendByte(0x00);
   ba4c0:	4620      	mov	r0, r4
   ba4c2:	2100      	movs	r1, #0
   ba4c4:	f7ff ff82 	bl	ba3cc <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   ba4c8:	4620      	mov	r0, r4
   ba4ca:	2100      	movs	r1, #0
   ba4cc:	f7ff ff7e 	bl	ba3cc <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   ba4d0:	4620      	mov	r0, r4
   ba4d2:	2100      	movs	r1, #0
   ba4d4:	f7ff ff7a 	bl	ba3cc <_ZN12ChainableLED8sendByteEh>
    sendByte(0x00);
   ba4d8:	4620      	mov	r0, r4
   ba4da:	2100      	movs	r1, #0
}
   ba4dc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    sendByte(0x00);
   ba4e0:	f7ff bf74 	b.w	ba3cc <_ZN12ChainableLED8sendByteEh>

000ba4e4 <_ZN12ChainableLED4initEv>:
{
   ba4e4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   ba4e6:	4604      	mov	r4, r0
    pinMode(_clk_pin, OUTPUT);
   ba4e8:	2101      	movs	r1, #1
   ba4ea:	7800      	ldrb	r0, [r0, #0]
   ba4ec:	f001 f9c2 	bl	bb874 <pinMode>
    pinMode(_data_pin, OUTPUT);
   ba4f0:	7860      	ldrb	r0, [r4, #1]
   ba4f2:	2101      	movs	r1, #1
   ba4f4:	f001 f9be 	bl	bb874 <pinMode>
   ba4f8:	2500      	movs	r5, #0
        setColorRGB(i, 0, 0, 0);
   ba4fa:	462e      	mov	r6, r5
    for (byte i=0; i<_num_leds; i++)
   ba4fc:	78a3      	ldrb	r3, [r4, #2]
   ba4fe:	b2e9      	uxtb	r1, r5
   ba500:	428b      	cmp	r3, r1
   ba502:	d907      	bls.n	ba514 <_ZN12ChainableLED4initEv+0x30>
        setColorRGB(i, 0, 0, 0);
   ba504:	2300      	movs	r3, #0
   ba506:	9600      	str	r6, [sp, #0]
   ba508:	461a      	mov	r2, r3
   ba50a:	4620      	mov	r0, r4
   ba50c:	f7ff ffa2 	bl	ba454 <_ZN12ChainableLED11setColorRGBEhhhh>
    for (byte i=0; i<_num_leds; i++)
   ba510:	3501      	adds	r5, #1
   ba512:	e7f3      	b.n	ba4fc <_ZN12ChainableLED4initEv+0x18>
}
   ba514:	b002      	add	sp, #8
   ba516:	bd70      	pop	{r4, r5, r6, pc}

000ba518 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   ba518:	b508      	push	{r3, lr}
   ba51a:	4b02      	ldr	r3, [pc, #8]	; (ba524 <netdb_freeaddrinfo+0xc>)
   ba51c:	681b      	ldr	r3, [r3, #0]
   ba51e:	689b      	ldr	r3, [r3, #8]
   ba520:	9301      	str	r3, [sp, #4]
   ba522:	bd08      	pop	{r3, pc}
   ba524:	00030268 	.word	0x00030268

000ba528 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   ba528:	b508      	push	{r3, lr}
   ba52a:	4b02      	ldr	r3, [pc, #8]	; (ba534 <netdb_getaddrinfo+0xc>)
   ba52c:	681b      	ldr	r3, [r3, #0]
   ba52e:	68db      	ldr	r3, [r3, #12]
   ba530:	9301      	str	r3, [sp, #4]
   ba532:	bd08      	pop	{r3, pc}
   ba534:	00030268 	.word	0x00030268

000ba538 <hal_pin_validate_function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, hal_pin_map, hal_pin_info_t*(void))
DYNALIB_FN(1, hal_gpio, hal_pin_validate_function, PinFunction(hal_pin_t, PinFunction))
   ba538:	b508      	push	{r3, lr}
   ba53a:	4b02      	ldr	r3, [pc, #8]	; (ba544 <hal_pin_validate_function+0xc>)
   ba53c:	681b      	ldr	r3, [r3, #0]
   ba53e:	685b      	ldr	r3, [r3, #4]
   ba540:	9301      	str	r3, [sp, #4]
   ba542:	bd08      	pop	{r3, pc}
   ba544:	0003022c 	.word	0x0003022c

000ba548 <hal_gpio_mode>:
DYNALIB_FN(2, hal_gpio, hal_gpio_mode, void(hal_pin_t, PinMode))
   ba548:	b508      	push	{r3, lr}
   ba54a:	4b02      	ldr	r3, [pc, #8]	; (ba554 <hal_gpio_mode+0xc>)
   ba54c:	681b      	ldr	r3, [r3, #0]
   ba54e:	689b      	ldr	r3, [r3, #8]
   ba550:	9301      	str	r3, [sp, #4]
   ba552:	bd08      	pop	{r3, pc}
   ba554:	0003022c 	.word	0x0003022c

000ba558 <hal_gpio_get_mode>:
DYNALIB_FN(3, hal_gpio, hal_gpio_get_mode, PinMode(hal_pin_t))
   ba558:	b508      	push	{r3, lr}
   ba55a:	4b02      	ldr	r3, [pc, #8]	; (ba564 <hal_gpio_get_mode+0xc>)
   ba55c:	681b      	ldr	r3, [r3, #0]
   ba55e:	68db      	ldr	r3, [r3, #12]
   ba560:	9301      	str	r3, [sp, #4]
   ba562:	bd08      	pop	{r3, pc}
   ba564:	0003022c 	.word	0x0003022c

000ba568 <hal_gpio_write>:
DYNALIB_FN(4, hal_gpio, hal_gpio_write, void(hal_pin_t, uint8_t))
   ba568:	b508      	push	{r3, lr}
   ba56a:	4b02      	ldr	r3, [pc, #8]	; (ba574 <hal_gpio_write+0xc>)
   ba56c:	681b      	ldr	r3, [r3, #0]
   ba56e:	691b      	ldr	r3, [r3, #16]
   ba570:	9301      	str	r3, [sp, #4]
   ba572:	bd08      	pop	{r3, pc}
   ba574:	0003022c 	.word	0x0003022c

000ba578 <hal_gpio_read>:
DYNALIB_FN(5, hal_gpio, hal_gpio_read, int32_t(hal_pin_t))
   ba578:	b508      	push	{r3, lr}
   ba57a:	4b02      	ldr	r3, [pc, #8]	; (ba584 <hal_gpio_read+0xc>)
   ba57c:	681b      	ldr	r3, [r3, #0]
   ba57e:	695b      	ldr	r3, [r3, #20]
   ba580:	9301      	str	r3, [sp, #4]
   ba582:	bd08      	pop	{r3, pc}
   ba584:	0003022c 	.word	0x0003022c

000ba588 <hal_interrupt_enable_all>:
DYNALIB_FN(6, hal_gpio, hal_interrupt_attach, int(uint16_t, hal_interrupt_handler_t, void*, InterruptMode, hal_interrupt_extra_configuration_t*))
DYNALIB_FN(7, hal_gpio, hal_interrupt_detach, int(uint16_t))
DYNALIB_FN(8, hal_gpio, hal_interrupt_enable_all, void(void))
   ba588:	b508      	push	{r3, lr}
   ba58a:	4b02      	ldr	r3, [pc, #8]	; (ba594 <hal_interrupt_enable_all+0xc>)
   ba58c:	681b      	ldr	r3, [r3, #0]
   ba58e:	6a1b      	ldr	r3, [r3, #32]
   ba590:	9301      	str	r3, [sp, #4]
   ba592:	bd08      	pop	{r3, pc}
   ba594:	0003022c 	.word	0x0003022c

000ba598 <hal_interrupt_disable_all>:
DYNALIB_FN(9, hal_gpio, hal_interrupt_disable_all, void(void))
   ba598:	b508      	push	{r3, lr}
   ba59a:	4b02      	ldr	r3, [pc, #8]	; (ba5a4 <hal_interrupt_disable_all+0xc>)
   ba59c:	681b      	ldr	r3, [r3, #0]
   ba59e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   ba5a0:	9301      	str	r3, [sp, #4]
   ba5a2:	bd08      	pop	{r3, pc}
   ba5a4:	0003022c 	.word	0x0003022c

000ba5a8 <hal_adc_read>:

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(hal_pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   ba5a8:	b508      	push	{r3, lr}
   ba5aa:	4b02      	ldr	r3, [pc, #8]	; (ba5b4 <hal_adc_read+0xc>)
   ba5ac:	681b      	ldr	r3, [r3, #0]
   ba5ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   ba5b0:	9301      	str	r3, [sp, #4]
   ba5b2:	bd08      	pop	{r3, pc}
   ba5b4:	0003022c 	.word	0x0003022c

000ba5b8 <hal_gpio_pulse_in>:

DYNALIB_FN(16, hal_gpio, hal_interrupt_set_system_handler, uint8_t(hal_irq_t, const hal_interrupt_callback_t*, hal_interrupt_callback_t*, void*))
DYNALIB_FN(17, hal_gpio, hal_interrupt_get_system_handler, uint8_t(hal_irq_t, hal_interrupt_callback_t*, void*))
DYNALIB_FN(18, hal_gpio, hal_interrupt_trigger_system, void(hal_irq_t, void*))

DYNALIB_FN(19, hal_gpio, hal_gpio_pulse_in, uint32_t(hal_pin_t, uint16_t))
   ba5b8:	b508      	push	{r3, lr}
   ba5ba:	4b02      	ldr	r3, [pc, #8]	; (ba5c4 <hal_gpio_pulse_in+0xc>)
   ba5bc:	681b      	ldr	r3, [r3, #0]
   ba5be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   ba5c0:	9301      	str	r3, [sp, #4]
   ba5c2:	bd08      	pop	{r3, pc}
   ba5c4:	0003022c 	.word	0x0003022c

000ba5c8 <hal_pwm_write_with_frequency_ext>:
DYNALIB_FN(26, hal_gpio, HAL_DAC_Set_Resolution, void(hal_pin_t, uint8_t))
DYNALIB_FN(27, hal_gpio, HAL_DAC_Enable_Buffer, void(hal_pin_t pin, uint8_t state))
DYNALIB_FN(28, hal_gpio, hal_pwm_get_resolution, uint8_t(uint16_t))
DYNALIB_FN(29, hal_gpio, hal_pwm_set_resolution, void(uint16_t, uint8_t))
DYNALIB_FN(30, hal_gpio, hal_pwm_write_ext, void(uint16_t, uint32_t))
DYNALIB_FN(31, hal_gpio, hal_pwm_write_with_frequency_ext, void(uint16_t, uint32_t, uint32_t))
   ba5c8:	b508      	push	{r3, lr}
   ba5ca:	4b02      	ldr	r3, [pc, #8]	; (ba5d4 <hal_pwm_write_with_frequency_ext+0xc>)
   ba5cc:	681b      	ldr	r3, [r3, #0]
   ba5ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   ba5d0:	9301      	str	r3, [sp, #4]
   ba5d2:	bd08      	pop	{r3, pc}
   ba5d4:	0003022c 	.word	0x0003022c

000ba5d8 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   ba5d8:	b508      	push	{r3, lr}
   ba5da:	4b02      	ldr	r3, [pc, #8]	; (ba5e4 <HAL_RNG_GetRandomNumber+0xc>)
   ba5dc:	681b      	ldr	r3, [r3, #0]
   ba5de:	685b      	ldr	r3, [r3, #4]
   ba5e0:	9301      	str	r3, [sp, #4]
   ba5e2:	bd08      	pop	{r3, pc}
   ba5e4:	00030218 	.word	0x00030218

000ba5e8 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   ba5e8:	b508      	push	{r3, lr}
   ba5ea:	4b02      	ldr	r3, [pc, #8]	; (ba5f4 <HAL_Delay_Microseconds+0xc>)
   ba5ec:	681b      	ldr	r3, [r3, #0]
   ba5ee:	68db      	ldr	r3, [r3, #12]
   ba5f0:	9301      	str	r3, [sp, #4]
   ba5f2:	bd08      	pop	{r3, pc}
   ba5f4:	00030218 	.word	0x00030218

000ba5f8 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   ba5f8:	b508      	push	{r3, lr}
   ba5fa:	4b02      	ldr	r3, [pc, #8]	; (ba604 <HAL_Timer_Get_Milli_Seconds+0xc>)
   ba5fc:	681b      	ldr	r3, [r3, #0]
   ba5fe:	695b      	ldr	r3, [r3, #20]
   ba600:	9301      	str	r3, [sp, #4]
   ba602:	bd08      	pop	{r3, pc}
   ba604:	00030218 	.word	0x00030218

000ba608 <HAL_EEPROM_Init>:
DYNALIB_FN(BASE_IDX + 5, hal, hal_rtc_get_unixtime_deprecated, time32_t(void))
DYNALIB_FN(BASE_IDX + 6, hal, hal_rtc_set_unixtime_deprecated, void(time32_t))

DYNALIB_FN(BASE_IDX + 7, hal, hal_rtc_set_alarm, int(const struct timeval*, uint32_t, hal_rtc_alarm_handler, void*, void*))

DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
   ba608:	b508      	push	{r3, lr}
   ba60a:	4b02      	ldr	r3, [pc, #8]	; (ba614 <HAL_EEPROM_Init+0xc>)
   ba60c:	681b      	ldr	r3, [r3, #0]
   ba60e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   ba610:	9301      	str	r3, [sp, #4]
   ba612:	bd08      	pop	{r3, pc}
   ba614:	00030218 	.word	0x00030218

000ba618 <HAL_EEPROM_Read>:
DYNALIB_FN(BASE_IDX + 9, hal, HAL_EEPROM_Read, uint8_t(uint32_t))
   ba618:	b508      	push	{r3, lr}
   ba61a:	4b02      	ldr	r3, [pc, #8]	; (ba624 <HAL_EEPROM_Read+0xc>)
   ba61c:	681b      	ldr	r3, [r3, #0]
   ba61e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   ba620:	9301      	str	r3, [sp, #4]
   ba622:	bd08      	pop	{r3, pc}
   ba624:	00030218 	.word	0x00030218

000ba628 <HAL_EEPROM_Put>:
DYNALIB_FN(BASE_IDX + 12, hal, HAL_disable_irq, int(void))
DYNALIB_FN(BASE_IDX + 13, hal, HAL_enable_irq, void(int))
DYNALIB_FN(BASE_IDX + 14, hal, hal_rtc_cancel_alarm, void(void))

DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
   ba628:	b508      	push	{r3, lr}
   ba62a:	4b02      	ldr	r3, [pc, #8]	; (ba634 <HAL_EEPROM_Put+0xc>)
   ba62c:	681b      	ldr	r3, [r3, #0]
   ba62e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   ba630:	9301      	str	r3, [sp, #4]
   ba632:	bd08      	pop	{r3, pc}
   ba634:	00030218 	.word	0x00030218

000ba638 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   ba638:	b508      	push	{r3, lr}
   ba63a:	4b02      	ldr	r3, [pc, #8]	; (ba644 <os_mutex_recursive_create+0xc>)
   ba63c:	681b      	ldr	r3, [r3, #0]
   ba63e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   ba640:	9301      	str	r3, [sp, #4]
   ba642:	bd08      	pop	{r3, pc}
   ba644:	00030248 	.word	0x00030248

000ba648 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   ba648:	b508      	push	{r3, lr}
   ba64a:	4b02      	ldr	r3, [pc, #8]	; (ba654 <inet_inet_ntop+0xc>)
   ba64c:	681b      	ldr	r3, [r3, #0]
   ba64e:	695b      	ldr	r3, [r3, #20]
   ba650:	9301      	str	r3, [sp, #4]
   ba652:	bd08      	pop	{r3, pc}
   ba654:	00030264 	.word	0x00030264

000ba658 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   ba658:	b508      	push	{r3, lr}
   ba65a:	4b02      	ldr	r3, [pc, #8]	; (ba664 <hal_usart_write+0xc>)
   ba65c:	681b      	ldr	r3, [r3, #0]
   ba65e:	68db      	ldr	r3, [r3, #12]
   ba660:	9301      	str	r3, [sp, #4]
   ba662:	bd08      	pop	{r3, pc}
   ba664:	0003023c 	.word	0x0003023c

000ba668 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   ba668:	b508      	push	{r3, lr}
   ba66a:	4b02      	ldr	r3, [pc, #8]	; (ba674 <hal_usart_available+0xc>)
   ba66c:	681b      	ldr	r3, [r3, #0]
   ba66e:	691b      	ldr	r3, [r3, #16]
   ba670:	9301      	str	r3, [sp, #4]
   ba672:	bd08      	pop	{r3, pc}
   ba674:	0003023c 	.word	0x0003023c

000ba678 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   ba678:	b508      	push	{r3, lr}
   ba67a:	4b02      	ldr	r3, [pc, #8]	; (ba684 <hal_usart_read+0xc>)
   ba67c:	681b      	ldr	r3, [r3, #0]
   ba67e:	695b      	ldr	r3, [r3, #20]
   ba680:	9301      	str	r3, [sp, #4]
   ba682:	bd08      	pop	{r3, pc}
   ba684:	0003023c 	.word	0x0003023c

000ba688 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   ba688:	b508      	push	{r3, lr}
   ba68a:	4b02      	ldr	r3, [pc, #8]	; (ba694 <hal_usart_peek+0xc>)
   ba68c:	681b      	ldr	r3, [r3, #0]
   ba68e:	699b      	ldr	r3, [r3, #24]
   ba690:	9301      	str	r3, [sp, #4]
   ba692:	bd08      	pop	{r3, pc}
   ba694:	0003023c 	.word	0x0003023c

000ba698 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   ba698:	b508      	push	{r3, lr}
   ba69a:	4b02      	ldr	r3, [pc, #8]	; (ba6a4 <hal_usart_flush+0xc>)
   ba69c:	681b      	ldr	r3, [r3, #0]
   ba69e:	69db      	ldr	r3, [r3, #28]
   ba6a0:	9301      	str	r3, [sp, #4]
   ba6a2:	bd08      	pop	{r3, pc}
   ba6a4:	0003023c 	.word	0x0003023c

000ba6a8 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   ba6a8:	b508      	push	{r3, lr}
   ba6aa:	4b02      	ldr	r3, [pc, #8]	; (ba6b4 <hal_usart_is_enabled+0xc>)
   ba6ac:	681b      	ldr	r3, [r3, #0]
   ba6ae:	6a1b      	ldr	r3, [r3, #32]
   ba6b0:	9301      	str	r3, [sp, #4]
   ba6b2:	bd08      	pop	{r3, pc}
   ba6b4:	0003023c 	.word	0x0003023c

000ba6b8 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   ba6b8:	b508      	push	{r3, lr}
   ba6ba:	4b02      	ldr	r3, [pc, #8]	; (ba6c4 <hal_usart_available_data_for_write+0xc>)
   ba6bc:	681b      	ldr	r3, [r3, #0]
   ba6be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   ba6c0:	9301      	str	r3, [sp, #4]
   ba6c2:	bd08      	pop	{r3, pc}
   ba6c4:	0003023c 	.word	0x0003023c

000ba6c8 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   ba6c8:	b508      	push	{r3, lr}
   ba6ca:	4b02      	ldr	r3, [pc, #8]	; (ba6d4 <hal_usart_init_ex+0xc>)
   ba6cc:	681b      	ldr	r3, [r3, #0]
   ba6ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   ba6d0:	9301      	str	r3, [sp, #4]
   ba6d2:	bd08      	pop	{r3, pc}
   ba6d4:	0003023c 	.word	0x0003023c

000ba6d8 <hal_i2c_set_speed>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
   ba6d8:	b508      	push	{r3, lr}
   ba6da:	4b02      	ldr	r3, [pc, #8]	; (ba6e4 <hal_i2c_set_speed+0xc>)
   ba6dc:	681b      	ldr	r3, [r3, #0]
   ba6de:	681b      	ldr	r3, [r3, #0]
   ba6e0:	9301      	str	r3, [sp, #4]
   ba6e2:	bd08      	pop	{r3, pc}
   ba6e4:	00030228 	.word	0x00030228

000ba6e8 <hal_i2c_begin>:
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   ba6e8:	b508      	push	{r3, lr}
   ba6ea:	4b02      	ldr	r3, [pc, #8]	; (ba6f4 <hal_i2c_begin+0xc>)
   ba6ec:	681b      	ldr	r3, [r3, #0]
   ba6ee:	68db      	ldr	r3, [r3, #12]
   ba6f0:	9301      	str	r3, [sp, #4]
   ba6f2:	bd08      	pop	{r3, pc}
   ba6f4:	00030228 	.word	0x00030228

000ba6f8 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   ba6f8:	b508      	push	{r3, lr}
   ba6fa:	4b02      	ldr	r3, [pc, #8]	; (ba704 <hal_i2c_begin_transmission+0xc>)
   ba6fc:	681b      	ldr	r3, [r3, #0]
   ba6fe:	699b      	ldr	r3, [r3, #24]
   ba700:	9301      	str	r3, [sp, #4]
   ba702:	bd08      	pop	{r3, pc}
   ba704:	00030228 	.word	0x00030228

000ba708 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   ba708:	b508      	push	{r3, lr}
   ba70a:	4b02      	ldr	r3, [pc, #8]	; (ba714 <hal_i2c_end_transmission+0xc>)
   ba70c:	681b      	ldr	r3, [r3, #0]
   ba70e:	69db      	ldr	r3, [r3, #28]
   ba710:	9301      	str	r3, [sp, #4]
   ba712:	bd08      	pop	{r3, pc}
   ba714:	00030228 	.word	0x00030228

000ba718 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   ba718:	b508      	push	{r3, lr}
   ba71a:	4b02      	ldr	r3, [pc, #8]	; (ba724 <hal_i2c_write+0xc>)
   ba71c:	681b      	ldr	r3, [r3, #0]
   ba71e:	6a1b      	ldr	r3, [r3, #32]
   ba720:	9301      	str	r3, [sp, #4]
   ba722:	bd08      	pop	{r3, pc}
   ba724:	00030228 	.word	0x00030228

000ba728 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   ba728:	b508      	push	{r3, lr}
   ba72a:	4b02      	ldr	r3, [pc, #8]	; (ba734 <hal_i2c_available+0xc>)
   ba72c:	681b      	ldr	r3, [r3, #0]
   ba72e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   ba730:	9301      	str	r3, [sp, #4]
   ba732:	bd08      	pop	{r3, pc}
   ba734:	00030228 	.word	0x00030228

000ba738 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   ba738:	b508      	push	{r3, lr}
   ba73a:	4b02      	ldr	r3, [pc, #8]	; (ba744 <hal_i2c_read+0xc>)
   ba73c:	681b      	ldr	r3, [r3, #0]
   ba73e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   ba740:	9301      	str	r3, [sp, #4]
   ba742:	bd08      	pop	{r3, pc}
   ba744:	00030228 	.word	0x00030228

000ba748 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   ba748:	b508      	push	{r3, lr}
   ba74a:	4b02      	ldr	r3, [pc, #8]	; (ba754 <hal_i2c_peek+0xc>)
   ba74c:	681b      	ldr	r3, [r3, #0]
   ba74e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   ba750:	9301      	str	r3, [sp, #4]
   ba752:	bd08      	pop	{r3, pc}
   ba754:	00030228 	.word	0x00030228

000ba758 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   ba758:	b508      	push	{r3, lr}
   ba75a:	4b02      	ldr	r3, [pc, #8]	; (ba764 <hal_i2c_flush+0xc>)
   ba75c:	681b      	ldr	r3, [r3, #0]
   ba75e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   ba760:	9301      	str	r3, [sp, #4]
   ba762:	bd08      	pop	{r3, pc}
   ba764:	00030228 	.word	0x00030228

000ba768 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   ba768:	b508      	push	{r3, lr}
   ba76a:	4b02      	ldr	r3, [pc, #8]	; (ba774 <hal_i2c_is_enabled+0xc>)
   ba76c:	681b      	ldr	r3, [r3, #0]
   ba76e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   ba770:	9301      	str	r3, [sp, #4]
   ba772:	bd08      	pop	{r3, pc}
   ba774:	00030228 	.word	0x00030228

000ba778 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   ba778:	b508      	push	{r3, lr}
   ba77a:	4b02      	ldr	r3, [pc, #8]	; (ba784 <hal_i2c_init+0xc>)
   ba77c:	681b      	ldr	r3, [r3, #0]
   ba77e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   ba780:	9301      	str	r3, [sp, #4]
   ba782:	bd08      	pop	{r3, pc}
   ba784:	00030228 	.word	0x00030228

000ba788 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   ba788:	b508      	push	{r3, lr}
   ba78a:	4b02      	ldr	r3, [pc, #8]	; (ba794 <hal_spi_begin+0xc>)
   ba78c:	681b      	ldr	r3, [r3, #0]
   ba78e:	681b      	ldr	r3, [r3, #0]
   ba790:	9301      	str	r3, [sp, #4]
   ba792:	bd08      	pop	{r3, pc}
   ba794:	00030230 	.word	0x00030230

000ba798 <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   ba798:	b508      	push	{r3, lr}
   ba79a:	4b02      	ldr	r3, [pc, #8]	; (ba7a4 <hal_spi_transfer+0xc>)
   ba79c:	681b      	ldr	r3, [r3, #0]
   ba79e:	695b      	ldr	r3, [r3, #20]
   ba7a0:	9301      	str	r3, [sp, #4]
   ba7a2:	bd08      	pop	{r3, pc}
   ba7a4:	00030230 	.word	0x00030230

000ba7a8 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   ba7a8:	b508      	push	{r3, lr}
   ba7aa:	4b02      	ldr	r3, [pc, #8]	; (ba7b4 <hal_spi_init+0xc>)
   ba7ac:	681b      	ldr	r3, [r3, #0]
   ba7ae:	69db      	ldr	r3, [r3, #28]
   ba7b0:	9301      	str	r3, [sp, #4]
   ba7b2:	bd08      	pop	{r3, pc}
   ba7b4:	00030230 	.word	0x00030230

000ba7b8 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   ba7b8:	b508      	push	{r3, lr}
   ba7ba:	4b02      	ldr	r3, [pc, #8]	; (ba7c4 <hal_spi_is_enabled+0xc>)
   ba7bc:	681b      	ldr	r3, [r3, #0]
   ba7be:	6a1b      	ldr	r3, [r3, #32]
   ba7c0:	9301      	str	r3, [sp, #4]
   ba7c2:	bd08      	pop	{r3, pc}
   ba7c4:	00030230 	.word	0x00030230

000ba7c8 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   ba7c8:	b508      	push	{r3, lr}
   ba7ca:	4b02      	ldr	r3, [pc, #8]	; (ba7d4 <hal_spi_info+0xc>)
   ba7cc:	681b      	ldr	r3, [r3, #0]
   ba7ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   ba7d0:	9301      	str	r3, [sp, #4]
   ba7d2:	bd08      	pop	{r3, pc}
   ba7d4:	00030230 	.word	0x00030230

000ba7d8 <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   ba7d8:	b508      	push	{r3, lr}
   ba7da:	4b02      	ldr	r3, [pc, #8]	; (ba7e4 <hal_spi_set_settings+0xc>)
   ba7dc:	681b      	ldr	r3, [r3, #0]
   ba7de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   ba7e0:	9301      	str	r3, [sp, #4]
   ba7e2:	bd08      	pop	{r3, pc}
   ba7e4:	00030230 	.word	0x00030230

000ba7e8 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   ba7e8:	b508      	push	{r3, lr}
   ba7ea:	4b02      	ldr	r3, [pc, #8]	; (ba7f4 <hal_spi_acquire+0xc>)
   ba7ec:	681b      	ldr	r3, [r3, #0]
   ba7ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   ba7f0:	9301      	str	r3, [sp, #4]
   ba7f2:	bd08      	pop	{r3, pc}
   ba7f4:	00030230 	.word	0x00030230

000ba7f8 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   ba7f8:	b508      	push	{r3, lr}
   ba7fa:	4b02      	ldr	r3, [pc, #8]	; (ba804 <hal_spi_release+0xc>)
   ba7fc:	681b      	ldr	r3, [r3, #0]
   ba7fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   ba800:	9301      	str	r3, [sp, #4]
   ba802:	bd08      	pop	{r3, pc}
   ba804:	00030230 	.word	0x00030230

000ba808 <HAL_Tone_Start>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_peripherals)

DYNALIB_FN(0, hal_peripherals, HAL_Tone_Start, void(uint8_t, uint32_t, uint32_t))
   ba808:	b508      	push	{r3, lr}
   ba80a:	4b02      	ldr	r3, [pc, #8]	; (ba814 <HAL_Tone_Start+0xc>)
   ba80c:	681b      	ldr	r3, [r3, #0]
   ba80e:	681b      	ldr	r3, [r3, #0]
   ba810:	9301      	str	r3, [sp, #4]
   ba812:	bd08      	pop	{r3, pc}
   ba814:	00030224 	.word	0x00030224

000ba818 <HAL_Tone_Stop>:
DYNALIB_FN(1, hal_peripherals, HAL_Tone_Stop, void(uint8_t))
   ba818:	b508      	push	{r3, lr}
   ba81a:	4b02      	ldr	r3, [pc, #8]	; (ba824 <HAL_Tone_Stop+0xc>)
   ba81c:	681b      	ldr	r3, [r3, #0]
   ba81e:	685b      	ldr	r3, [r3, #4]
   ba820:	9301      	str	r3, [sp, #4]
   ba822:	bd08      	pop	{r3, pc}
   ba824:	00030224 	.word	0x00030224

000ba828 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   ba828:	b508      	push	{r3, lr}
   ba82a:	4b02      	ldr	r3, [pc, #8]	; (ba834 <HAL_USB_USART_Init+0xc>)
   ba82c:	681b      	ldr	r3, [r3, #0]
   ba82e:	681b      	ldr	r3, [r3, #0]
   ba830:	9301      	str	r3, [sp, #4]
   ba832:	bd08      	pop	{r3, pc}
   ba834:	0003024c 	.word	0x0003024c

000ba838 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   ba838:	b508      	push	{r3, lr}
   ba83a:	4b02      	ldr	r3, [pc, #8]	; (ba844 <HAL_USB_USART_Begin+0xc>)
   ba83c:	681b      	ldr	r3, [r3, #0]
   ba83e:	685b      	ldr	r3, [r3, #4]
   ba840:	9301      	str	r3, [sp, #4]
   ba842:	bd08      	pop	{r3, pc}
   ba844:	0003024c 	.word	0x0003024c

000ba848 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   ba848:	b508      	push	{r3, lr}
   ba84a:	4b02      	ldr	r3, [pc, #8]	; (ba854 <HAL_USB_USART_Available_Data+0xc>)
   ba84c:	681b      	ldr	r3, [r3, #0]
   ba84e:	691b      	ldr	r3, [r3, #16]
   ba850:	9301      	str	r3, [sp, #4]
   ba852:	bd08      	pop	{r3, pc}
   ba854:	0003024c 	.word	0x0003024c

000ba858 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   ba858:	b508      	push	{r3, lr}
   ba85a:	4b02      	ldr	r3, [pc, #8]	; (ba864 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   ba85c:	681b      	ldr	r3, [r3, #0]
   ba85e:	695b      	ldr	r3, [r3, #20]
   ba860:	9301      	str	r3, [sp, #4]
   ba862:	bd08      	pop	{r3, pc}
   ba864:	0003024c 	.word	0x0003024c

000ba868 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   ba868:	b508      	push	{r3, lr}
   ba86a:	4b02      	ldr	r3, [pc, #8]	; (ba874 <HAL_USB_USART_Receive_Data+0xc>)
   ba86c:	681b      	ldr	r3, [r3, #0]
   ba86e:	699b      	ldr	r3, [r3, #24]
   ba870:	9301      	str	r3, [sp, #4]
   ba872:	bd08      	pop	{r3, pc}
   ba874:	0003024c 	.word	0x0003024c

000ba878 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   ba878:	b508      	push	{r3, lr}
   ba87a:	4b02      	ldr	r3, [pc, #8]	; (ba884 <HAL_USB_USART_Send_Data+0xc>)
   ba87c:	681b      	ldr	r3, [r3, #0]
   ba87e:	69db      	ldr	r3, [r3, #28]
   ba880:	9301      	str	r3, [sp, #4]
   ba882:	bd08      	pop	{r3, pc}
   ba884:	0003024c 	.word	0x0003024c

000ba888 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   ba888:	b508      	push	{r3, lr}
   ba88a:	4b02      	ldr	r3, [pc, #8]	; (ba894 <HAL_USB_USART_Flush_Data+0xc>)
   ba88c:	681b      	ldr	r3, [r3, #0]
   ba88e:	6a1b      	ldr	r3, [r3, #32]
   ba890:	9301      	str	r3, [sp, #4]
   ba892:	bd08      	pop	{r3, pc}
   ba894:	0003024c 	.word	0x0003024c

000ba898 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   ba898:	b508      	push	{r3, lr}
   ba89a:	4b02      	ldr	r3, [pc, #8]	; (ba8a4 <panic_+0xc>)
   ba89c:	681b      	ldr	r3, [r3, #0]
   ba89e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   ba8a0:	9301      	str	r3, [sp, #4]
   ba8a2:	bd08      	pop	{r3, pc}
   ba8a4:	00030260 	.word	0x00030260

000ba8a8 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   ba8a8:	b508      	push	{r3, lr}
   ba8aa:	4b02      	ldr	r3, [pc, #8]	; (ba8b4 <set_system_mode+0xc>)
   ba8ac:	681b      	ldr	r3, [r3, #0]
   ba8ae:	685b      	ldr	r3, [r3, #4]
   ba8b0:	9301      	str	r3, [sp, #4]
   ba8b2:	bd08      	pop	{r3, pc}
   ba8b4:	00030220 	.word	0x00030220

000ba8b8 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   ba8b8:	b508      	push	{r3, lr}
   ba8ba:	4b02      	ldr	r3, [pc, #8]	; (ba8c4 <system_delay_ms+0xc>)
   ba8bc:	681b      	ldr	r3, [r3, #0]
   ba8be:	695b      	ldr	r3, [r3, #20]
   ba8c0:	9301      	str	r3, [sp, #4]
   ba8c2:	bd08      	pop	{r3, pc}
   ba8c4:	00030220 	.word	0x00030220

000ba8c8 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   ba8c8:	b508      	push	{r3, lr}
   ba8ca:	4b03      	ldr	r3, [pc, #12]	; (ba8d8 <system_ctrl_set_app_request_handler+0x10>)
   ba8cc:	681b      	ldr	r3, [r3, #0]
   ba8ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   ba8d2:	9301      	str	r3, [sp, #4]
   ba8d4:	bd08      	pop	{r3, pc}
   ba8d6:	0000      	.short	0x0000
   ba8d8:	00030220 	.word	0x00030220

000ba8dc <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   ba8dc:	b508      	push	{r3, lr}
   ba8de:	4b03      	ldr	r3, [pc, #12]	; (ba8ec <system_ctrl_set_result+0x10>)
   ba8e0:	681b      	ldr	r3, [r3, #0]
   ba8e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   ba8e6:	9301      	str	r3, [sp, #4]
   ba8e8:	bd08      	pop	{r3, pc}
   ba8ea:	0000      	.short	0x0000
   ba8ec:	00030220 	.word	0x00030220

000ba8f0 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   ba8f0:	b508      	push	{r3, lr}
   ba8f2:	4b02      	ldr	r3, [pc, #8]	; (ba8fc <network_connect+0xc>)
   ba8f4:	681b      	ldr	r3, [r3, #0]
   ba8f6:	685b      	ldr	r3, [r3, #4]
   ba8f8:	9301      	str	r3, [sp, #4]
   ba8fa:	bd08      	pop	{r3, pc}
   ba8fc:	00030240 	.word	0x00030240

000ba900 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   ba900:	b508      	push	{r3, lr}
   ba902:	4b02      	ldr	r3, [pc, #8]	; (ba90c <network_connecting+0xc>)
   ba904:	681b      	ldr	r3, [r3, #0]
   ba906:	689b      	ldr	r3, [r3, #8]
   ba908:	9301      	str	r3, [sp, #4]
   ba90a:	bd08      	pop	{r3, pc}
   ba90c:	00030240 	.word	0x00030240

000ba910 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   ba910:	b508      	push	{r3, lr}
   ba912:	4b02      	ldr	r3, [pc, #8]	; (ba91c <network_disconnect+0xc>)
   ba914:	681b      	ldr	r3, [r3, #0]
   ba916:	68db      	ldr	r3, [r3, #12]
   ba918:	9301      	str	r3, [sp, #4]
   ba91a:	bd08      	pop	{r3, pc}
   ba91c:	00030240 	.word	0x00030240

000ba920 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   ba920:	b508      	push	{r3, lr}
   ba922:	4b02      	ldr	r3, [pc, #8]	; (ba92c <network_ready+0xc>)
   ba924:	681b      	ldr	r3, [r3, #0]
   ba926:	691b      	ldr	r3, [r3, #16]
   ba928:	9301      	str	r3, [sp, #4]
   ba92a:	bd08      	pop	{r3, pc}
   ba92c:	00030240 	.word	0x00030240

000ba930 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   ba930:	b508      	push	{r3, lr}
   ba932:	4b02      	ldr	r3, [pc, #8]	; (ba93c <network_on+0xc>)
   ba934:	681b      	ldr	r3, [r3, #0]
   ba936:	695b      	ldr	r3, [r3, #20]
   ba938:	9301      	str	r3, [sp, #4]
   ba93a:	bd08      	pop	{r3, pc}
   ba93c:	00030240 	.word	0x00030240

000ba940 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   ba940:	b508      	push	{r3, lr}
   ba942:	4b02      	ldr	r3, [pc, #8]	; (ba94c <network_off+0xc>)
   ba944:	681b      	ldr	r3, [r3, #0]
   ba946:	699b      	ldr	r3, [r3, #24]
   ba948:	9301      	str	r3, [sp, #4]
   ba94a:	bd08      	pop	{r3, pc}
   ba94c:	00030240 	.word	0x00030240

000ba950 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   ba950:	b508      	push	{r3, lr}
   ba952:	4b02      	ldr	r3, [pc, #8]	; (ba95c <network_listen+0xc>)
   ba954:	681b      	ldr	r3, [r3, #0]
   ba956:	69db      	ldr	r3, [r3, #28]
   ba958:	9301      	str	r3, [sp, #4]
   ba95a:	bd08      	pop	{r3, pc}
   ba95c:	00030240 	.word	0x00030240

000ba960 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   ba960:	b508      	push	{r3, lr}
   ba962:	4b02      	ldr	r3, [pc, #8]	; (ba96c <network_listening+0xc>)
   ba964:	681b      	ldr	r3, [r3, #0]
   ba966:	6a1b      	ldr	r3, [r3, #32]
   ba968:	9301      	str	r3, [sp, #4]
   ba96a:	bd08      	pop	{r3, pc}
   ba96c:	00030240 	.word	0x00030240

000ba970 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   ba970:	b508      	push	{r3, lr}
   ba972:	4b02      	ldr	r3, [pc, #8]	; (ba97c <network_set_listen_timeout+0xc>)
   ba974:	681b      	ldr	r3, [r3, #0]
   ba976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   ba978:	9301      	str	r3, [sp, #4]
   ba97a:	bd08      	pop	{r3, pc}
   ba97c:	00030240 	.word	0x00030240

000ba980 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   ba980:	b508      	push	{r3, lr}
   ba982:	4b02      	ldr	r3, [pc, #8]	; (ba98c <network_get_listen_timeout+0xc>)
   ba984:	681b      	ldr	r3, [r3, #0]
   ba986:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   ba988:	9301      	str	r3, [sp, #4]
   ba98a:	bd08      	pop	{r3, pc}
   ba98c:	00030240 	.word	0x00030240

000ba990 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   ba990:	b508      	push	{r3, lr}
   ba992:	4b02      	ldr	r3, [pc, #8]	; (ba99c <network_is_on+0xc>)
   ba994:	681b      	ldr	r3, [r3, #0]
   ba996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   ba998:	9301      	str	r3, [sp, #4]
   ba99a:	bd08      	pop	{r3, pc}
   ba99c:	00030240 	.word	0x00030240

000ba9a0 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   ba9a0:	b508      	push	{r3, lr}
   ba9a2:	4b02      	ldr	r3, [pc, #8]	; (ba9ac <network_is_off+0xc>)
   ba9a4:	681b      	ldr	r3, [r3, #0]
   ba9a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   ba9a8:	9301      	str	r3, [sp, #4]
   ba9aa:	bd08      	pop	{r3, pc}
   ba9ac:	00030240 	.word	0x00030240

000ba9b0 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   ba9b0:	b508      	push	{r3, lr}
   ba9b2:	4b02      	ldr	r3, [pc, #8]	; (ba9bc <spark_set_random_seed_from_cloud_handler+0xc>)
   ba9b4:	681b      	ldr	r3, [r3, #0]
   ba9b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   ba9b8:	9301      	str	r3, [sp, #4]
   ba9ba:	bd08      	pop	{r3, pc}
   ba9bc:	00030244 	.word	0x00030244

000ba9c0 <spark_cloud_disconnect>:
DYNALIB_FN(16, system_cloud, spark_publish_vitals, int(system_tick_t, void*))
DYNALIB_FN(17, system_cloud, spark_cloud_disconnect, int(const spark_cloud_disconnect_options*, void*))
   ba9c0:	b508      	push	{r3, lr}
   ba9c2:	4b02      	ldr	r3, [pc, #8]	; (ba9cc <spark_cloud_disconnect+0xc>)
   ba9c4:	681b      	ldr	r3, [r3, #0]
   ba9c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   ba9c8:	9301      	str	r3, [sp, #4]
   ba9ca:	bd08      	pop	{r3, pc}
   ba9cc:	00030244 	.word	0x00030244

000ba9d0 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   ba9d0:	b508      	push	{r3, lr}
   ba9d2:	4b02      	ldr	r3, [pc, #8]	; (ba9dc <malloc+0xc>)
   ba9d4:	681b      	ldr	r3, [r3, #0]
   ba9d6:	681b      	ldr	r3, [r3, #0]
   ba9d8:	9301      	str	r3, [sp, #4]
   ba9da:	bd08      	pop	{r3, pc}
   ba9dc:	0003021c 	.word	0x0003021c

000ba9e0 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   ba9e0:	b508      	push	{r3, lr}
   ba9e2:	4b02      	ldr	r3, [pc, #8]	; (ba9ec <free+0xc>)
   ba9e4:	681b      	ldr	r3, [r3, #0]
   ba9e6:	685b      	ldr	r3, [r3, #4]
   ba9e8:	9301      	str	r3, [sp, #4]
   ba9ea:	bd08      	pop	{r3, pc}
   ba9ec:	0003021c 	.word	0x0003021c

000ba9f0 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   ba9f0:	b508      	push	{r3, lr}
   ba9f2:	4b02      	ldr	r3, [pc, #8]	; (ba9fc <realloc+0xc>)
   ba9f4:	681b      	ldr	r3, [r3, #0]
   ba9f6:	689b      	ldr	r3, [r3, #8]
   ba9f8:	9301      	str	r3, [sp, #4]
   ba9fa:	bd08      	pop	{r3, pc}
   ba9fc:	0003021c 	.word	0x0003021c

000baa00 <snprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   baa00:	b508      	push	{r3, lr}
   baa02:	4b02      	ldr	r3, [pc, #8]	; (baa0c <snprintf+0xc>)
   baa04:	681b      	ldr	r3, [r3, #0]
   baa06:	69db      	ldr	r3, [r3, #28]
   baa08:	9301      	str	r3, [sp, #4]
   baa0a:	bd08      	pop	{r3, pc}
   baa0c:	0003021c 	.word	0x0003021c

000baa10 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   baa10:	b508      	push	{r3, lr}
   baa12:	4b02      	ldr	r3, [pc, #8]	; (baa1c <vsnprintf+0xc>)
   baa14:	681b      	ldr	r3, [r3, #0]
   baa16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   baa18:	9301      	str	r3, [sp, #4]
   baa1a:	bd08      	pop	{r3, pc}
   baa1c:	0003021c 	.word	0x0003021c

000baa20 <_malloc_r>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   baa20:	b508      	push	{r3, lr}
   baa22:	4b02      	ldr	r3, [pc, #8]	; (baa2c <_malloc_r+0xc>)
   baa24:	681b      	ldr	r3, [r3, #0]
   baa26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   baa28:	9301      	str	r3, [sp, #4]
   baa2a:	bd08      	pop	{r3, pc}
   baa2c:	0003021c 	.word	0x0003021c

000baa30 <__assert_func>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   baa30:	b508      	push	{r3, lr}
   baa32:	4b02      	ldr	r3, [pc, #8]	; (baa3c <__assert_func+0xc>)
   baa34:	681b      	ldr	r3, [r3, #0]
   baa36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   baa38:	9301      	str	r3, [sp, #4]
   baa3a:	bd08      	pop	{r3, pc}
   baa3c:	0003021c 	.word	0x0003021c

000baa40 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   baa40:	b508      	push	{r3, lr}
   baa42:	4b02      	ldr	r3, [pc, #8]	; (baa4c <newlib_impure_ptr_callback+0xc>)
   baa44:	681b      	ldr	r3, [r3, #0]
   baa46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   baa48:	9301      	str	r3, [sp, #4]
   baa4a:	bd08      	pop	{r3, pc}
   baa4c:	0003021c 	.word	0x0003021c

000baa50 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   baa50:	2200      	movs	r2, #0
   baa52:	6840      	ldr	r0, [r0, #4]
   baa54:	4611      	mov	r1, r2
   baa56:	f7ff bf83 	b.w	ba960 <network_listening>

000baa5a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   baa5a:	2200      	movs	r2, #0
   baa5c:	6840      	ldr	r0, [r0, #4]
   baa5e:	4611      	mov	r1, r2
   baa60:	f7ff bf8e 	b.w	ba980 <network_get_listen_timeout>

000baa64 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   baa64:	6840      	ldr	r0, [r0, #4]
   baa66:	2200      	movs	r2, #0
   baa68:	f7ff bf82 	b.w	ba970 <network_set_listen_timeout>

000baa6c <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   baa6c:	6840      	ldr	r0, [r0, #4]
   baa6e:	2200      	movs	r2, #0
   baa70:	f081 0101 	eor.w	r1, r1, #1
   baa74:	f7ff bf6c 	b.w	ba950 <network_listen>

000baa78 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   baa78:	2300      	movs	r3, #0
   baa7a:	6840      	ldr	r0, [r0, #4]
   baa7c:	461a      	mov	r2, r3
   baa7e:	4619      	mov	r1, r3
   baa80:	f7ff bf5e 	b.w	ba940 <network_off>

000baa84 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   baa84:	2300      	movs	r3, #0
   baa86:	6840      	ldr	r0, [r0, #4]
   baa88:	461a      	mov	r2, r3
   baa8a:	4619      	mov	r1, r3
   baa8c:	f7ff bf50 	b.w	ba930 <network_on>

000baa90 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   baa90:	2200      	movs	r2, #0
   baa92:	6840      	ldr	r0, [r0, #4]
   baa94:	4611      	mov	r1, r2
   baa96:	f7ff bf43 	b.w	ba920 <network_ready>

000baa9a <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   baa9a:	2200      	movs	r2, #0
   baa9c:	6840      	ldr	r0, [r0, #4]
   baa9e:	4611      	mov	r1, r2
   baaa0:	f7ff bf2e 	b.w	ba900 <network_connecting>

000baaa4 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   baaa4:	6840      	ldr	r0, [r0, #4]
   baaa6:	2200      	movs	r2, #0
   baaa8:	2102      	movs	r1, #2
   baaaa:	f7ff bf31 	b.w	ba910 <network_disconnect>

000baaae <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   baaae:	2300      	movs	r3, #0
   baab0:	6840      	ldr	r0, [r0, #4]
   baab2:	461a      	mov	r2, r3
   baab4:	f7ff bf1c 	b.w	ba8f0 <network_connect>

000baab8 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   baab8:	4b02      	ldr	r3, [pc, #8]	; (baac4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   baaba:	2203      	movs	r2, #3
   baabc:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   baabe:	4a02      	ldr	r2, [pc, #8]	; (baac8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   baac0:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   baac2:	4770      	bx	lr
   baac4:	2003e6bc 	.word	0x2003e6bc
   baac8:	000bdb90 	.word	0x000bdb90

000baacc <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   baacc:	2100      	movs	r1, #0
   baace:	f7ff be93 	b.w	ba7f8 <hal_spi_release>

000baad2 <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   baad2:	2100      	movs	r1, #0
   baad4:	f7ff be88 	b.w	ba7e8 <hal_spi_acquire>

000baad8 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   baad8:	b510      	push	{r4, lr}
   baada:	4604      	mov	r4, r0
   baadc:	4608      	mov	r0, r1
{
    _spi = spi;
   baade:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   baae0:	f7ff fe62 	bl	ba7a8 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   baae4:	2300      	movs	r3, #0
   baae6:	6063      	str	r3, [r4, #4]
}
   baae8:	4620      	mov	r0, r4
   baaea:	bd10      	pop	{r4, pc}

000baaec <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   baaec:	b513      	push	{r0, r1, r4, lr}
   baaee:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   baaf0:	7800      	ldrb	r0, [r0, #0]
   baaf2:	f7ff ffee 	bl	baad2 <_ZN8SPIClass4lockEv.isra.0>
   baaf6:	b958      	cbnz	r0, bab10 <_ZN8SPIClass5beginEv+0x24>
   baaf8:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   baafa:	9001      	str	r0, [sp, #4]
   baafc:	f64f 71ff 	movw	r1, #65535	; 0xffff
   bab00:	f7ff fe42 	bl	ba788 <hal_spi_begin>
        unlock();
   bab04:	9801      	ldr	r0, [sp, #4]
    }
}
   bab06:	b002      	add	sp, #8
   bab08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   bab0c:	f7ff bfde 	b.w	baacc <_ZN8SPIClass6unlockEv.isra.0>
   bab10:	b002      	add	sp, #8
   bab12:	bd10      	pop	{r4, pc}

000bab14 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   bab14:	7800      	ldrb	r0, [r0, #0]
   bab16:	f7ff bfd9 	b.w	baacc <_ZN8SPIClass6unlockEv.isra.0>
	...

000bab1c <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   bab1c:	0840      	lsrs	r0, r0, #1
{
   bab1e:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   bab20:	6018      	str	r0, [r3, #0]
   bab22:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   bab24:	6818      	ldr	r0, [r3, #0]
   bab26:	4288      	cmp	r0, r1
   bab28:	b2e5      	uxtb	r5, r4
   bab2a:	d906      	bls.n	bab3a <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   bab2c:	3401      	adds	r4, #1
   bab2e:	2c08      	cmp	r4, #8
   bab30:	d002      	beq.n	bab38 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   bab32:	0840      	lsrs	r0, r0, #1
   bab34:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   bab36:	e7f5      	b.n	bab24 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   bab38:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   bab3a:	4b02      	ldr	r3, [pc, #8]	; (bab44 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   bab3c:	5d5b      	ldrb	r3, [r3, r5]
   bab3e:	7013      	strb	r3, [r2, #0]
}
   bab40:	bd30      	pop	{r4, r5, pc}
   bab42:	bf00      	nop
   bab44:	000bdbc4 	.word	0x000bdbc4

000bab48 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   bab48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bab4c:	4606      	mov	r6, r0
   bab4e:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   bab50:	7800      	ldrb	r0, [r0, #0]
{
   bab52:	460c      	mov	r4, r1
    CHECK(lock());
   bab54:	f7ff ffbd 	bl	baad2 <_ZN8SPIClass4lockEv.isra.0>
   bab58:	2800      	cmp	r0, #0
   bab5a:	db1b      	blt.n	bab94 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   bab5c:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   bab5e:	2214      	movs	r2, #20
   bab60:	2100      	movs	r1, #0
   bab62:	a809      	add	r0, sp, #36	; 0x24
   bab64:	f000 ffac 	bl	bbac0 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   bab68:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   bab6a:	2200      	movs	r2, #0
   bab6c:	a909      	add	r1, sp, #36	; 0x24
   bab6e:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   bab70:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   bab74:	f7ff fe28 	bl	ba7c8 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   bab78:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   bab7c:	b113      	cbz	r3, bab84 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   bab7e:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   bab82:	b155      	cbz	r5, bab9a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   bab84:	2700      	movs	r7, #0
   bab86:	46b9      	mov	r9, r7
   bab88:	46b8      	mov	r8, r7
   bab8a:	2501      	movs	r5, #1
    if (default_ && other.default_)
   bab8c:	7923      	ldrb	r3, [r4, #4]
   bab8e:	b15d      	cbz	r5, baba8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   bab90:	b1c3      	cbz	r3, babc4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   bab92:	2000      	movs	r0, #0
}
   bab94:	b00f      	add	sp, #60	; 0x3c
   bab96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   bab9a:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   bab9e:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   baba2:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   baba6:	e7f1      	b.n	bab8c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   baba8:	2b00      	cmp	r3, #0
   babaa:	d135      	bne.n	bac18 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   babac:	68a3      	ldr	r3, [r4, #8]
   babae:	4543      	cmp	r3, r8
   babb0:	d108      	bne.n	babc4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   babb2:	f88d 9020 	strb.w	r9, [sp, #32]
   babb6:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   babba:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   babbe:	89a3      	ldrh	r3, [r4, #12]
   babc0:	429a      	cmp	r2, r3
   babc2:	d0e6      	beq.n	bab92 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   babc4:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   babc6:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   babc8:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   babcc:	980a      	ldr	r0, [sp, #40]	; 0x28
   babce:	ab04      	add	r3, sp, #16
   babd0:	f10d 020f 	add.w	r2, sp, #15
   babd4:	f7ff ffa2 	bl	bab1c <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   babd8:	7921      	ldrb	r1, [r4, #4]
   babda:	b985      	cbnz	r5, babfe <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   babdc:	b989      	cbnz	r1, bac02 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   babde:	68a3      	ldr	r3, [r4, #8]
   babe0:	4543      	cmp	r3, r8
   babe2:	d30e      	bcc.n	bac02 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   babe4:	f88d 9020 	strb.w	r9, [sp, #32]
   babe8:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   babec:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   babf0:	89a3      	ldrh	r3, [r4, #12]
   babf2:	429a      	cmp	r2, r3
   babf4:	d105      	bne.n	bac02 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   babf6:	9b04      	ldr	r3, [sp, #16]
   babf8:	4543      	cmp	r3, r8
   babfa:	d102      	bne.n	bac02 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   babfc:	e7c9      	b.n	bab92 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   babfe:	2900      	cmp	r1, #0
   bac00:	d1f9      	bne.n	babf6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   bac02:	2300      	movs	r3, #0
   bac04:	9301      	str	r3, [sp, #4]
   bac06:	7b63      	ldrb	r3, [r4, #13]
   bac08:	9300      	str	r3, [sp, #0]
   bac0a:	f89d 200f 	ldrb.w	r2, [sp, #15]
   bac0e:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   bac10:	7830      	ldrb	r0, [r6, #0]
   bac12:	f7ff fde1 	bl	ba7d8 <hal_spi_set_settings>
   bac16:	e7bc      	b.n	bab92 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   bac18:	e9cd 5500 	strd	r5, r5, [sp]
   bac1c:	462b      	mov	r3, r5
   bac1e:	462a      	mov	r2, r5
   bac20:	2101      	movs	r1, #1
   bac22:	e7f5      	b.n	bac10 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000bac24 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   bac24:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   bac26:	7800      	ldrb	r0, [r0, #0]
   bac28:	f7ff fdb6 	bl	ba798 <hal_spi_transfer>
}
   bac2c:	b2c0      	uxtb	r0, r0
   bac2e:	bd08      	pop	{r3, pc}

000bac30 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   bac30:	4b05      	ldr	r3, [pc, #20]	; (bac48 <_GLOBAL__sub_I_System+0x18>)
   bac32:	2202      	movs	r2, #2
   bac34:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   bac36:	4b05      	ldr	r3, [pc, #20]	; (bac4c <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   bac38:	4a05      	ldr	r2, [pc, #20]	; (bac50 <_GLOBAL__sub_I_System+0x20>)
   bac3a:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   bac3c:	2000      	movs	r0, #0
   bac3e:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   bac42:	f7ff be31 	b.w	ba8a8 <set_system_mode>
   bac46:	bf00      	nop
   bac48:	2003e6d0 	.word	0x2003e6d0
   bac4c:	2003e6c4 	.word	0x2003e6c4
   bac50:	ffff0000 	.word	0xffff0000

000bac54 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   bac54:	b510      	push	{r4, lr}
   bac56:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   bac58:	f7f9 feb0 	bl	b49bc <strlen>
   bac5c:	3801      	subs	r0, #1
   bac5e:	1823      	adds	r3, r4, r0
   bac60:	4620      	mov	r0, r4
	while(i<j){
   bac62:	4283      	cmp	r3, r0
   bac64:	d906      	bls.n	bac74 <_Z11str_reversePc+0x20>
		c = *i;
   bac66:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   bac68:	7819      	ldrb	r1, [r3, #0]
   bac6a:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   bac6e:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   bac72:	e7f6      	b.n	bac62 <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   bac74:	bd10      	pop	{r4, pc}

000bac76 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   bac76:	b570      	push	{r4, r5, r6, lr}
   bac78:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   bac7a:	1e91      	subs	r1, r2, #2
   bac7c:	2922      	cmp	r1, #34	; 0x22
   bac7e:	d81d      	bhi.n	bacbc <ultoa+0x46>
		return NULL;
	}
	char* ptr=buffer;
   bac80:	4625      	mov	r5, r4

	div_t result;
	while(a){
   bac82:	b930      	cbnz	r0, bac92 <ultoa+0x1c>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   bac84:	4423      	add	r3, r4
            *ptr++ = '0';
   bac86:	2230      	movs	r2, #48	; 0x30
        while (ptr < buffer+pad)
   bac88:	429d      	cmp	r5, r3
   bac8a:	d210      	bcs.n	bacae <ultoa+0x38>
            *ptr++ = '0';
   bac8c:	f805 2b01 	strb.w	r2, [r5], #1
        while (ptr < buffer+pad)
   bac90:	e7fa      	b.n	bac88 <ultoa+0x12>
            result.quot = a/radix;
   bac92:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   bac96:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   bac9a:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
   bac9c:	2809      	cmp	r0, #9
                *ptr += '0';
   bac9e:	bf94      	ite	ls
   baca0:	3130      	addls	r1, #48	; 0x30
                *ptr += 'a'-10;
   baca2:	3157      	addhi	r1, #87	; 0x57
   baca4:	b2c9      	uxtb	r1, r1
   baca6:	f805 1b01 	strb.w	r1, [r5], #1
            a = result.quot;
   bacaa:	4630      	mov	r0, r6
	while(a){
   bacac:	e7e9      	b.n	bac82 <ultoa+0xc>

	*ptr = '\0';
   bacae:	2300      	movs	r3, #0
	str_reverse(buffer);
   bacb0:	4620      	mov	r0, r4
	*ptr = '\0';
   bacb2:	702b      	strb	r3, [r5, #0]
	str_reverse(buffer);
   bacb4:	f7ff ffce 	bl	bac54 <_Z11str_reversePc>
	return buffer;
   bacb8:	4620      	mov	r0, r4
}
   bacba:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   bacbc:	2000      	movs	r0, #0
   bacbe:	e7fc      	b.n	bacba <ultoa+0x44>

000bacc0 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   bacc0:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   bacc2:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   bacc4:	460c      	mov	r4, r1
   bacc6:	4615      	mov	r5, r2
	if(a<0){
   bacc8:	da0e      	bge.n	bace8 <itoa+0x28>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   bacca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
		*buffer = '-';
   bacce:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   bacd2:	bf14      	ite	ne
   bacd4:	4258      	negne	r0, r3
   bacd6:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   bacd8:	2301      	movs	r3, #1
		*buffer = '-';
   bacda:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
   bacdc:	462a      	mov	r2, r5
   bacde:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
   bace0:	f7ff ffc9 	bl	bac76 <ultoa>
	}
	return buffer;
}
   bace4:	4620      	mov	r0, r4
   bace6:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
   bace8:	2301      	movs	r3, #1
   bacea:	e7f9      	b.n	bace0 <itoa+0x20>

000bacec <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   bacec:	b510      	push	{r4, lr}
   bacee:	4604      	mov	r4, r0
{
	free(buffer);
   bacf0:	6800      	ldr	r0, [r0, #0]
   bacf2:	f7ff fe75 	bl	ba9e0 <free>
}
   bacf6:	4620      	mov	r0, r4
   bacf8:	bd10      	pop	{r4, pc}

000bacfa <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   bacfa:	b510      	push	{r4, lr}
   bacfc:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   bacfe:	6800      	ldr	r0, [r0, #0]
   bad00:	b108      	cbz	r0, bad06 <_ZN6String10invalidateEv+0xc>
   bad02:	f7ff fe6d 	bl	ba9e0 <free>
	buffer = NULL;
   bad06:	2300      	movs	r3, #0
	capacity = len = 0;
   bad08:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   bad0c:	6023      	str	r3, [r4, #0]
}
   bad0e:	bd10      	pop	{r4, pc}

000bad10 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   bad10:	b538      	push	{r3, r4, r5, lr}
   bad12:	4604      	mov	r4, r0
   bad14:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   bad16:	6800      	ldr	r0, [r0, #0]
   bad18:	3101      	adds	r1, #1
   bad1a:	f7ff fe69 	bl	ba9f0 <realloc>
	if (newbuffer) {
   bad1e:	b110      	cbz	r0, bad26 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   bad20:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   bad24:	2001      	movs	r0, #1
	}
	return 0;
}
   bad26:	bd38      	pop	{r3, r4, r5, pc}

000bad28 <_ZN6String7reserveEj>:
{
   bad28:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   bad2a:	6803      	ldr	r3, [r0, #0]
{
   bad2c:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   bad2e:	b123      	cbz	r3, bad3a <_ZN6String7reserveEj+0x12>
   bad30:	6843      	ldr	r3, [r0, #4]
   bad32:	428b      	cmp	r3, r1
   bad34:	d301      	bcc.n	bad3a <_ZN6String7reserveEj+0x12>
   bad36:	2001      	movs	r0, #1
}
   bad38:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   bad3a:	4620      	mov	r0, r4
   bad3c:	f7ff ffe8 	bl	bad10 <_ZN6String12changeBufferEj>
   bad40:	2800      	cmp	r0, #0
   bad42:	d0f9      	beq.n	bad38 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   bad44:	68a3      	ldr	r3, [r4, #8]
   bad46:	2b00      	cmp	r3, #0
   bad48:	d1f5      	bne.n	bad36 <_ZN6String7reserveEj+0xe>
   bad4a:	6822      	ldr	r2, [r4, #0]
   bad4c:	7013      	strb	r3, [r2, #0]
   bad4e:	e7f2      	b.n	bad36 <_ZN6String7reserveEj+0xe>

000bad50 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   bad50:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bad52:	460d      	mov	r5, r1
	if (!reserve(length)) {
   bad54:	4611      	mov	r1, r2
   bad56:	9201      	str	r2, [sp, #4]
{
   bad58:	4604      	mov	r4, r0
	if (!reserve(length)) {
   bad5a:	f7ff ffe5 	bl	bad28 <_ZN6String7reserveEj>
   bad5e:	9a01      	ldr	r2, [sp, #4]
   bad60:	b928      	cbnz	r0, bad6e <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   bad62:	4620      	mov	r0, r4
   bad64:	f7ff ffc9 	bl	bacfa <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   bad68:	4620      	mov	r0, r4
   bad6a:	b003      	add	sp, #12
   bad6c:	bd30      	pop	{r4, r5, pc}
	len = length;
   bad6e:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   bad70:	4629      	mov	r1, r5
   bad72:	6820      	ldr	r0, [r4, #0]
   bad74:	f000 fe96 	bl	bbaa4 <memcpy>
	buffer[len] = 0;
   bad78:	6822      	ldr	r2, [r4, #0]
   bad7a:	68a3      	ldr	r3, [r4, #8]
   bad7c:	2100      	movs	r1, #0
   bad7e:	54d1      	strb	r1, [r2, r3]
	return *this;
   bad80:	e7f2      	b.n	bad68 <_ZN6String4copyEPKcj+0x18>

000bad82 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   bad82:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   bad84:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   bad86:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   bad8a:	4604      	mov	r4, r0
	len = 0;
   bad8c:	6083      	str	r3, [r0, #8]
	flags = 0;
   bad8e:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   bad90:	b141      	cbz	r1, bada4 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   bad92:	4608      	mov	r0, r1
   bad94:	9101      	str	r1, [sp, #4]
   bad96:	f7f9 fe11 	bl	b49bc <strlen>
   bad9a:	9901      	ldr	r1, [sp, #4]
   bad9c:	4602      	mov	r2, r0
   bad9e:	4620      	mov	r0, r4
   bada0:	f7ff ffd6 	bl	bad50 <_ZN6String4copyEPKcj>
}
   bada4:	4620      	mov	r0, r4
   bada6:	b002      	add	sp, #8
   bada8:	bd10      	pop	{r4, pc}

000badaa <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   badaa:	b538      	push	{r3, r4, r5, lr}
   badac:	4605      	mov	r5, r0
	if (buffer) {
   badae:	6800      	ldr	r0, [r0, #0]
{
   badb0:	460c      	mov	r4, r1
	if (buffer) {
   badb2:	b168      	cbz	r0, badd0 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   badb4:	686a      	ldr	r2, [r5, #4]
   badb6:	688b      	ldr	r3, [r1, #8]
   badb8:	429a      	cmp	r2, r3
   badba:	d307      	bcc.n	badcc <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   badbc:	6809      	ldr	r1, [r1, #0]
   badbe:	f000 fec5 	bl	bbb4c <strcpy>
			len = rhs.len;
   badc2:	68a3      	ldr	r3, [r4, #8]
   badc4:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   badc6:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   badc8:	60a3      	str	r3, [r4, #8]
}
   badca:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   badcc:	f7ff fe08 	bl	ba9e0 <free>
	buffer = rhs.buffer;
   badd0:	6823      	ldr	r3, [r4, #0]
   badd2:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   badd4:	6863      	ldr	r3, [r4, #4]
   badd6:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   badd8:	68a3      	ldr	r3, [r4, #8]
   badda:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   baddc:	2300      	movs	r3, #0
	rhs.capacity = 0;
   badde:	e9c4 3300 	strd	r3, r3, [r4]
   bade2:	e7f1      	b.n	badc8 <_ZN6String4moveERS_+0x1e>

000bade4 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   bade4:	4288      	cmp	r0, r1
{
   bade6:	b510      	push	{r4, lr}
   bade8:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   badea:	d005      	beq.n	badf8 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   badec:	680b      	ldr	r3, [r1, #0]
   badee:	b12b      	cbz	r3, badfc <_ZN6StringaSERKS_+0x18>
   badf0:	688a      	ldr	r2, [r1, #8]
   badf2:	4619      	mov	r1, r3
   badf4:	f7ff ffac 	bl	bad50 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   badf8:	4620      	mov	r0, r4
   badfa:	bd10      	pop	{r4, pc}
	else invalidate();
   badfc:	f7ff ff7d 	bl	bacfa <_ZN6String10invalidateEv>
   bae00:	e7fa      	b.n	badf8 <_ZN6StringaSERKS_+0x14>

000bae02 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   bae02:	b510      	push	{r4, lr}
	buffer = NULL;
   bae04:	2300      	movs	r3, #0
String::String(const String &value)
   bae06:	4604      	mov	r4, r0
	capacity = 0;
   bae08:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   bae0c:	6083      	str	r3, [r0, #8]
	flags = 0;
   bae0e:	7303      	strb	r3, [r0, #12]
	*this = value;
   bae10:	f7ff ffe8 	bl	bade4 <_ZN6StringaSERKS_>
}
   bae14:	4620      	mov	r0, r4
   bae16:	bd10      	pop	{r4, pc}

000bae18 <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   bae18:	4288      	cmp	r0, r1
{
   bae1a:	b510      	push	{r4, lr}
   bae1c:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   bae1e:	d001      	beq.n	bae24 <_ZN6StringaSEOS_+0xc>
   bae20:	f7ff ffc3 	bl	badaa <_ZN6String4moveERS_>
	return *this;
}
   bae24:	4620      	mov	r0, r4
   bae26:	bd10      	pop	{r4, pc}

000bae28 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   bae28:	b513      	push	{r0, r1, r4, lr}
   bae2a:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   bae2c:	b159      	cbz	r1, bae46 <_ZN6StringaSEPKc+0x1e>
   bae2e:	4608      	mov	r0, r1
   bae30:	9101      	str	r1, [sp, #4]
   bae32:	f7f9 fdc3 	bl	b49bc <strlen>
   bae36:	9901      	ldr	r1, [sp, #4]
   bae38:	4602      	mov	r2, r0
   bae3a:	4620      	mov	r0, r4
   bae3c:	f7ff ff88 	bl	bad50 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   bae40:	4620      	mov	r0, r4
   bae42:	b002      	add	sp, #8
   bae44:	bd10      	pop	{r4, pc}
	else invalidate();
   bae46:	f7ff ff58 	bl	bacfa <_ZN6String10invalidateEv>
   bae4a:	e7f9      	b.n	bae40 <_ZN6StringaSEPKc+0x18>

000bae4c <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
   bae4c:	b510      	push	{r4, lr}
   bae4e:	4604      	mov	r4, r0
   bae50:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   bae52:	2300      	movs	r3, #0
	capacity = 0;
   bae54:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   bae58:	60a3      	str	r3, [r4, #8]
	flags = 0;
   bae5a:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
   bae5c:	4608      	mov	r0, r1
	itoa(value, buf, base);
   bae5e:	a901      	add	r1, sp, #4
   bae60:	f7ff ff2e 	bl	bacc0 <itoa>
	*this = buf;
   bae64:	a901      	add	r1, sp, #4
   bae66:	4620      	mov	r0, r4
   bae68:	f7ff ffde 	bl	bae28 <_ZN6StringaSEPKc>
}
   bae6c:	4620      	mov	r0, r4
   bae6e:	b00a      	add	sp, #40	; 0x28
   bae70:	bd10      	pop	{r4, pc}

000bae72 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   bae72:	b570      	push	{r4, r5, r6, lr}
   bae74:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   bae76:	460e      	mov	r6, r1
   bae78:	b909      	cbnz	r1, bae7e <_ZN6String6concatEPKcj+0xc>
   bae7a:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   bae7c:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   bae7e:	b16a      	cbz	r2, bae9c <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   bae80:	6884      	ldr	r4, [r0, #8]
   bae82:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   bae84:	4621      	mov	r1, r4
   bae86:	f7ff ff4f 	bl	bad28 <_ZN6String7reserveEj>
   bae8a:	2800      	cmp	r0, #0
   bae8c:	d0f5      	beq.n	bae7a <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   bae8e:	6828      	ldr	r0, [r5, #0]
   bae90:	68ab      	ldr	r3, [r5, #8]
   bae92:	4631      	mov	r1, r6
   bae94:	4418      	add	r0, r3
   bae96:	f000 fe59 	bl	bbb4c <strcpy>
	len = newlen;
   bae9a:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   bae9c:	2001      	movs	r0, #1
   bae9e:	e7ed      	b.n	bae7c <_ZN6String6concatEPKcj+0xa>

000baea0 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   baea0:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   baea2:	688a      	ldr	r2, [r1, #8]
   baea4:	6809      	ldr	r1, [r1, #0]
{
   baea6:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   baea8:	f7ff ffe3 	bl	bae72 <_ZN6String6concatEPKcj>
   baeac:	b910      	cbnz	r0, baeb4 <_ZplRK15StringSumHelperRK6String+0x14>
   baeae:	4620      	mov	r0, r4
   baeb0:	f7ff ff23 	bl	bacfa <_ZN6String10invalidateEv>
	return a;
}
   baeb4:	4620      	mov	r0, r4
   baeb6:	bd10      	pop	{r4, pc}

000baeb8 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   baeb8:	b513      	push	{r0, r1, r4, lr}
   baeba:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   baebc:	b929      	cbnz	r1, baeca <_ZplRK15StringSumHelperPKc+0x12>
   baebe:	4620      	mov	r0, r4
   baec0:	f7ff ff1b 	bl	bacfa <_ZN6String10invalidateEv>
	return a;
}
   baec4:	4620      	mov	r0, r4
   baec6:	b002      	add	sp, #8
   baec8:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   baeca:	4608      	mov	r0, r1
   baecc:	9101      	str	r1, [sp, #4]
   baece:	f7f9 fd75 	bl	b49bc <strlen>
   baed2:	9901      	ldr	r1, [sp, #4]
   baed4:	4602      	mov	r2, r0
   baed6:	4620      	mov	r0, r4
   baed8:	f7ff ffcb 	bl	bae72 <_ZN6String6concatEPKcj>
   baedc:	2800      	cmp	r0, #0
   baede:	d0ee      	beq.n	baebe <_ZplRK15StringSumHelperPKc+0x6>
   baee0:	e7f0      	b.n	baec4 <_ZplRK15StringSumHelperPKc+0xc>
	...

000baee4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   baee4:	4802      	ldr	r0, [pc, #8]	; (baef0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   baee6:	2300      	movs	r3, #0
   baee8:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   baeea:	f7ff bba5 	b.w	ba638 <os_mutex_recursive_create>
   baeee:	bf00      	nop
   baef0:	2003e6d4 	.word	0x2003e6d4

000baef4 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   baef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   baef6:	4606      	mov	r6, r0
   baef8:	460d      	mov	r5, r1
  size_t n = 0;
   baefa:	188f      	adds	r7, r1, r2
   baefc:	2400      	movs	r4, #0
  while (size--) {
   baefe:	42bd      	cmp	r5, r7
   baf00:	d00c      	beq.n	baf1c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   baf02:	6833      	ldr	r3, [r6, #0]
   baf04:	f815 1b01 	ldrb.w	r1, [r5], #1
   baf08:	689b      	ldr	r3, [r3, #8]
   baf0a:	4630      	mov	r0, r6
   baf0c:	4798      	blx	r3
     if (chunk>=0)
   baf0e:	1e03      	subs	r3, r0, #0
   baf10:	db01      	blt.n	baf16 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   baf12:	441c      	add	r4, r3
  while (size--) {
   baf14:	e7f3      	b.n	baefe <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   baf16:	2c00      	cmp	r4, #0
   baf18:	bf08      	it	eq
   baf1a:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   baf1c:	4620      	mov	r0, r4
   baf1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000baf20 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   baf20:	b513      	push	{r0, r1, r4, lr}
   baf22:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   baf24:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   baf26:	b159      	cbz	r1, baf40 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   baf28:	9101      	str	r1, [sp, #4]
   baf2a:	f7f9 fd47 	bl	b49bc <strlen>
   baf2e:	6823      	ldr	r3, [r4, #0]
   baf30:	9901      	ldr	r1, [sp, #4]
   baf32:	68db      	ldr	r3, [r3, #12]
   baf34:	4602      	mov	r2, r0
   baf36:	4620      	mov	r0, r4
    }
   baf38:	b002      	add	sp, #8
   baf3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   baf3e:	4718      	bx	r3
    }
   baf40:	b002      	add	sp, #8
   baf42:	bd10      	pop	{r4, pc}

000baf44 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   baf44:	b508      	push	{r3, lr}
  return write(str);
   baf46:	f7ff ffeb 	bl	baf20 <_ZN5Print5writeEPKc>
}
   baf4a:	bd08      	pop	{r3, pc}

000baf4c <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   baf4c:	6803      	ldr	r3, [r0, #0]
   baf4e:	689b      	ldr	r3, [r3, #8]
   baf50:	4718      	bx	r3

000baf52 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   baf52:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   baf54:	210d      	movs	r1, #13
{
   baf56:	4605      	mov	r5, r0
  size_t n = print('\r');
   baf58:	f7ff fff8 	bl	baf4c <_ZN5Print5printEc>
  n += print('\n');
   baf5c:	210a      	movs	r1, #10
  size_t n = print('\r');
   baf5e:	4604      	mov	r4, r0
  n += print('\n');
   baf60:	4628      	mov	r0, r5
   baf62:	f7ff fff3 	bl	baf4c <_ZN5Print5printEc>
  return n;
}
   baf66:	4420      	add	r0, r4
   baf68:	bd38      	pop	{r3, r4, r5, pc}

000baf6a <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   baf6a:	b538      	push	{r3, r4, r5, lr}
   baf6c:	4605      	mov	r5, r0
  return write(str);
   baf6e:	f7ff ffd7 	bl	baf20 <_ZN5Print5writeEPKc>
   baf72:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   baf74:	4628      	mov	r0, r5
   baf76:	f7ff ffec 	bl	baf52 <_ZN5Print7printlnEv>
  return n;
}
   baf7a:	4420      	add	r0, r4
   baf7c:	bd38      	pop	{r3, r4, r5, pc}

000baf7e <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   baf7e:	b530      	push	{r4, r5, lr}
   baf80:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   baf82:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   baf84:	2a01      	cmp	r2, #1
  *str = '\0';
   baf86:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   baf8a:	bf98      	it	ls
   baf8c:	220a      	movls	r2, #10
   baf8e:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   baf90:	460d      	mov	r5, r1
   baf92:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   baf96:	fb01 5312 	mls	r3, r1, r2, r5
   baf9a:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   baf9e:	2b09      	cmp	r3, #9
   bafa0:	bf94      	ite	ls
   bafa2:	3330      	addls	r3, #48	; 0x30
   bafa4:	3337      	addhi	r3, #55	; 0x37
   bafa6:	b2db      	uxtb	r3, r3
  } while(n);
   bafa8:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   bafaa:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   bafae:	d9ef      	bls.n	baf90 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   bafb0:	4621      	mov	r1, r4
   bafb2:	f7ff ffb5 	bl	baf20 <_ZN5Print5writeEPKc>
}
   bafb6:	b00b      	add	sp, #44	; 0x2c
   bafb8:	bd30      	pop	{r4, r5, pc}

000bafba <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   bafba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bafbe:	b086      	sub	sp, #24
   bafc0:	af00      	add	r7, sp, #0
   bafc2:	4605      	mov	r5, r0
   bafc4:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   bafc6:	1d38      	adds	r0, r7, #4
   bafc8:	2114      	movs	r1, #20
{
   bafca:	4614      	mov	r4, r2
    va_copy(args2, args);
   bafcc:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   bafce:	f7ff fd1f 	bl	baa10 <vsnprintf>

    if (n<bufsize)
   bafd2:	2813      	cmp	r0, #19
   bafd4:	d80e      	bhi.n	baff4 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   bafd6:	1d39      	adds	r1, r7, #4
   bafd8:	4628      	mov	r0, r5
   bafda:	f7ff ffa1 	bl	baf20 <_ZN5Print5writeEPKc>
   bafde:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   bafe0:	b11e      	cbz	r6, bafea <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   bafe2:	4628      	mov	r0, r5
   bafe4:	f7ff ffb5 	bl	baf52 <_ZN5Print7printlnEv>
   bafe8:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   bafea:	4620      	mov	r0, r4
   bafec:	3718      	adds	r7, #24
   bafee:	46bd      	mov	sp, r7
   baff0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   baff4:	f100 0308 	add.w	r3, r0, #8
   baff8:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   baffc:	46e8      	mov	r8, sp
        char bigger[n+1];
   baffe:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   bb002:	4622      	mov	r2, r4
   bb004:	1c41      	adds	r1, r0, #1
   bb006:	683b      	ldr	r3, [r7, #0]
   bb008:	4668      	mov	r0, sp
   bb00a:	f7ff fd01 	bl	baa10 <vsnprintf>
  return write(str);
   bb00e:	4669      	mov	r1, sp
   bb010:	4628      	mov	r0, r5
   bb012:	f7ff ff85 	bl	baf20 <_ZN5Print5writeEPKc>
   bb016:	4604      	mov	r4, r0
   bb018:	46c5      	mov	sp, r8
   bb01a:	e7e1      	b.n	bafe0 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000bb01c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   bb01c:	4b01      	ldr	r3, [pc, #4]	; (bb024 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   bb01e:	4a02      	ldr	r2, [pc, #8]	; (bb028 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   bb020:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   bb022:	4770      	bx	lr
   bb024:	2003e6d8 	.word	0x2003e6d8
   bb028:	000bdbcc 	.word	0x000bdbcc

000bb02c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   bb02c:	4b02      	ldr	r3, [pc, #8]	; (bb038 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   bb02e:	681a      	ldr	r2, [r3, #0]
   bb030:	4b02      	ldr	r3, [pc, #8]	; (bb03c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   bb032:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   bb034:	4770      	bx	lr
   bb036:	bf00      	nop
   bb038:	2003c6b0 	.word	0x2003c6b0
   bb03c:	2003e6dc 	.word	0x2003e6dc

000bb040 <_Z3mapiiiii>:
    hal_adc_set_sample_time(ADC_SampleTime);
}

int map(int value, int fromStart, int fromEnd, int toStart, int toEnd)
{
    if (fromEnd == fromStart) {
   bb040:	428a      	cmp	r2, r1
{
   bb042:	b510      	push	{r4, lr}
    if (fromEnd == fromStart) {
   bb044:	d007      	beq.n	bb056 <_Z3mapiiiii+0x16>
        return value;
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
   bb046:	1a44      	subs	r4, r0, r1
   bb048:	9802      	ldr	r0, [sp, #8]
   bb04a:	1ac0      	subs	r0, r0, r3
   bb04c:	4344      	muls	r4, r0
   bb04e:	1a50      	subs	r0, r2, r1
   bb050:	fb94 f0f0 	sdiv	r0, r4, r0
   bb054:	4418      	add	r0, r3
}
   bb056:	bd10      	pop	{r4, pc}

000bb058 <_Z3mapddddd>:

double map(double value, double fromStart, double fromEnd, double toStart, double toEnd)
{
   bb058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bb05c:	ec55 4b11 	vmov	r4, r5, d1
   bb060:	ec57 6b12 	vmov	r6, r7, d2
   bb064:	b085      	sub	sp, #20
    if (fromEnd == fromStart) {
   bb066:	ee11 2a10 	vmov	r2, s2
   bb06a:	ee12 0a10 	vmov	r0, s4
   bb06e:	462b      	mov	r3, r5
   bb070:	4639      	mov	r1, r7
{
   bb072:	ed8d 0b02 	vstr	d0, [sp, #8]
   bb076:	ed8d 4b00 	vstr	d4, [sp]
   bb07a:	ec5b ab13 	vmov	sl, fp, d3
    if (fromEnd == fromStart) {
   bb07e:	f7f9 fbf3 	bl	b4868 <__aeabi_dcmpeq>
   bb082:	ed9d 0b02 	vldr	d0, [sp, #8]
   bb086:	bb38      	cbnz	r0, bb0d8 <_Z3mapddddd+0x80>
        return value;
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
   bb088:	ec51 0b10 	vmov	r0, r1, d0
   bb08c:	4622      	mov	r2, r4
   bb08e:	462b      	mov	r3, r5
   bb090:	f7f8 ffca 	bl	b4028 <__aeabi_dsub>
   bb094:	4652      	mov	r2, sl
   bb096:	4680      	mov	r8, r0
   bb098:	4689      	mov	r9, r1
   bb09a:	465b      	mov	r3, fp
   bb09c:	e9dd 0100 	ldrd	r0, r1, [sp]
   bb0a0:	f7f8 ffc2 	bl	b4028 <__aeabi_dsub>
   bb0a4:	4602      	mov	r2, r0
   bb0a6:	460b      	mov	r3, r1
   bb0a8:	4640      	mov	r0, r8
   bb0aa:	4649      	mov	r1, r9
   bb0ac:	f7f9 f974 	bl	b4398 <__aeabi_dmul>
   bb0b0:	4622      	mov	r2, r4
   bb0b2:	4680      	mov	r8, r0
   bb0b4:	4689      	mov	r9, r1
   bb0b6:	462b      	mov	r3, r5
   bb0b8:	4630      	mov	r0, r6
   bb0ba:	4639      	mov	r1, r7
   bb0bc:	f7f8 ffb4 	bl	b4028 <__aeabi_dsub>
   bb0c0:	4602      	mov	r2, r0
   bb0c2:	460b      	mov	r3, r1
   bb0c4:	4640      	mov	r0, r8
   bb0c6:	4649      	mov	r1, r9
   bb0c8:	f7f9 fa90 	bl	b45ec <__aeabi_ddiv>
   bb0cc:	4652      	mov	r2, sl
   bb0ce:	465b      	mov	r3, fp
   bb0d0:	f7f8 ffac 	bl	b402c <__adddf3>
   bb0d4:	ec41 0b10 	vmov	d0, r0, r1
}
   bb0d8:	b005      	add	sp, #20
   bb0da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bb0de <delay>:

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   bb0de:	2100      	movs	r1, #0
   bb0e0:	f7ff bbea 	b.w	ba8b8 <system_delay_ms>

000bb0e4 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   bb0e4:	4b01      	ldr	r3, [pc, #4]	; (bb0ec <_GLOBAL__sub_I_RGB+0x8>)
   bb0e6:	2200      	movs	r2, #0
   bb0e8:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   bb0ea:	4770      	bx	lr
   bb0ec:	2003e6e0 	.word	0x2003e6e0

000bb0f0 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   bb0f0:	4b01      	ldr	r3, [pc, #4]	; (bb0f8 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   bb0f2:	6018      	str	r0, [r3, #0]
    }, nullptr);
   bb0f4:	4770      	bx	lr
   bb0f6:	bf00      	nop
   bb0f8:	2003c6b4 	.word	0x2003c6b4

000bb0fc <serialEventRun>:
{
   bb0fc:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   bb0fe:	4b0b      	ldr	r3, [pc, #44]	; (bb12c <serialEventRun+0x30>)
   bb100:	b143      	cbz	r3, bb114 <serialEventRun+0x18>
   bb102:	f000 f981 	bl	bb408 <_Z16_fetch_usbserialv>
   bb106:	6803      	ldr	r3, [r0, #0]
   bb108:	691b      	ldr	r3, [r3, #16]
   bb10a:	4798      	blx	r3
   bb10c:	2800      	cmp	r0, #0
   bb10e:	dd01      	ble.n	bb114 <serialEventRun+0x18>
        serialEvent();
   bb110:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   bb114:	4b06      	ldr	r3, [pc, #24]	; (bb130 <serialEventRun+0x34>)
   bb116:	b143      	cbz	r3, bb12a <serialEventRun+0x2e>
   bb118:	f000 fc3a 	bl	bb990 <_Z22__fetch_global_Serial1v>
   bb11c:	6803      	ldr	r3, [r0, #0]
   bb11e:	691b      	ldr	r3, [r3, #16]
   bb120:	4798      	blx	r3
   bb122:	2800      	cmp	r0, #0
   bb124:	dd01      	ble.n	bb12a <serialEventRun+0x2e>
        serialEvent1();
   bb126:	f3af 8000 	nop.w
}
   bb12a:	bd08      	pop	{r3, pc}
	...

000bb134 <_post_loop>:
{
   bb134:	b508      	push	{r3, lr}
	serialEventRun();
   bb136:	f7ff ffe1 	bl	bb0fc <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   bb13a:	f7ff fa5d 	bl	ba5f8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   bb13e:	4b01      	ldr	r3, [pc, #4]	; (bb144 <_post_loop+0x10>)
   bb140:	6018      	str	r0, [r3, #0]
}
   bb142:	bd08      	pop	{r3, pc}
   bb144:	2003e738 	.word	0x2003e738

000bb148 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   bb148:	4805      	ldr	r0, [pc, #20]	; (bb160 <_Z33system_initialize_user_backup_ramv+0x18>)
   bb14a:	4a06      	ldr	r2, [pc, #24]	; (bb164 <_Z33system_initialize_user_backup_ramv+0x1c>)
   bb14c:	4906      	ldr	r1, [pc, #24]	; (bb168 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   bb14e:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   bb150:	1a12      	subs	r2, r2, r0
   bb152:	f000 fca7 	bl	bbaa4 <memcpy>
    __backup_sram_signature = signature;
   bb156:	4b05      	ldr	r3, [pc, #20]	; (bb16c <_Z33system_initialize_user_backup_ramv+0x24>)
   bb158:	4a05      	ldr	r2, [pc, #20]	; (bb170 <_Z33system_initialize_user_backup_ramv+0x28>)
   bb15a:	601a      	str	r2, [r3, #0]
}
   bb15c:	bd08      	pop	{r3, pc}
   bb15e:	bf00      	nop
   bb160:	2003f400 	.word	0x2003f400
   bb164:	2003f404 	.word	0x2003f404
   bb168:	000bdf18 	.word	0x000bdf18
   bb16c:	2003f400 	.word	0x2003f400
   bb170:	9a271c1e 	.word	0x9a271c1e

000bb174 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   bb174:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   bb176:	2300      	movs	r3, #0
   bb178:	9300      	str	r3, [sp, #0]
   bb17a:	461a      	mov	r2, r3
   bb17c:	f06f 0177 	mvn.w	r1, #119	; 0x77
   bb180:	f7ff fbac 	bl	ba8dc <system_ctrl_set_result>
}
   bb184:	b003      	add	sp, #12
   bb186:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000bb18c <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   bb18c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   bb18e:	8843      	ldrh	r3, [r0, #2]
   bb190:	2b0a      	cmp	r3, #10
   bb192:	d008      	beq.n	bb1a6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   bb194:	2b50      	cmp	r3, #80	; 0x50
   bb196:	d10b      	bne.n	bb1b0 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   bb198:	4b09      	ldr	r3, [pc, #36]	; (bb1c0 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   bb19a:	681b      	ldr	r3, [r3, #0]
   bb19c:	b14b      	cbz	r3, bb1b2 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   bb19e:	b003      	add	sp, #12
   bb1a0:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   bb1a4:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   bb1a6:	f7ff ffe5 	bl	bb174 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   bb1aa:	b003      	add	sp, #12
   bb1ac:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   bb1b0:	2300      	movs	r3, #0
   bb1b2:	9300      	str	r3, [sp, #0]
   bb1b4:	461a      	mov	r2, r3
   bb1b6:	f06f 0177 	mvn.w	r1, #119	; 0x77
   bb1ba:	f7ff fb8f 	bl	ba8dc <system_ctrl_set_result>
}
   bb1be:	e7f4      	b.n	bb1aa <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   bb1c0:	2003e6f4 	.word	0x2003e6f4

000bb1c4 <module_user_init_hook>:
{
   bb1c4:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   bb1c6:	4812      	ldr	r0, [pc, #72]	; (bb210 <module_user_init_hook+0x4c>)
   bb1c8:	2100      	movs	r1, #0
   bb1ca:	f7ff fc39 	bl	baa40 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   bb1ce:	4b11      	ldr	r3, [pc, #68]	; (bb214 <module_user_init_hook+0x50>)
   bb1d0:	681a      	ldr	r2, [r3, #0]
   bb1d2:	4b11      	ldr	r3, [pc, #68]	; (bb218 <module_user_init_hook+0x54>)
   bb1d4:	429a      	cmp	r2, r3
   bb1d6:	4b11      	ldr	r3, [pc, #68]	; (bb21c <module_user_init_hook+0x58>)
   bb1d8:	bf0c      	ite	eq
   bb1da:	2201      	moveq	r2, #1
   bb1dc:	2200      	movne	r2, #0
   bb1de:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   bb1e0:	d001      	beq.n	bb1e6 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   bb1e2:	f7ff ffb1 	bl	bb148 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   bb1e6:	f7ff f9f7 	bl	ba5d8 <HAL_RNG_GetRandomNumber>
   bb1ea:	4604      	mov	r4, r0
    srand(seed);
   bb1ec:	f000 fc80 	bl	bbaf0 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   bb1f0:	4b0b      	ldr	r3, [pc, #44]	; (bb220 <module_user_init_hook+0x5c>)
   bb1f2:	b113      	cbz	r3, bb1fa <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   bb1f4:	4620      	mov	r0, r4
   bb1f6:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   bb1fa:	2100      	movs	r1, #0
   bb1fc:	4808      	ldr	r0, [pc, #32]	; (bb220 <module_user_init_hook+0x5c>)
   bb1fe:	f7ff fbd7 	bl	ba9b0 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   bb202:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   bb206:	4807      	ldr	r0, [pc, #28]	; (bb224 <module_user_init_hook+0x60>)
   bb208:	2100      	movs	r1, #0
   bb20a:	f7ff bb5d 	b.w	ba8c8 <system_ctrl_set_app_request_handler>
   bb20e:	bf00      	nop
   bb210:	000bb0f1 	.word	0x000bb0f1
   bb214:	2003f400 	.word	0x2003f400
   bb218:	9a271c1e 	.word	0x9a271c1e
   bb21c:	2003e6f0 	.word	0x2003e6f0
   bb220:	00000000 	.word	0x00000000
   bb224:	000bb18d 	.word	0x000bb18d

000bb228 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>:

int CloudClass::publishVitals(system_tick_t period_s_) {
    return spark_publish_vitals(period_s_, nullptr);
}

void CloudClass::disconnect(const CloudDisconnectOptions& options) {
   bb228:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    opts.size = sizeof(opts);
   bb22a:	230c      	movs	r3, #12
   bb22c:	f8ad 3004 	strh.w	r3, [sp, #4]
    opts.flags = flags_;
   bb230:	6803      	ldr	r3, [r0, #0]
   bb232:	f88d 3006 	strb.w	r3, [sp, #6]
    opts.graceful = graceful_;
   bb236:	7a03      	ldrb	r3, [r0, #8]
   bb238:	f88d 3007 	strb.w	r3, [sp, #7]
    opts.timeout = timeout_;
   bb23c:	6843      	ldr	r3, [r0, #4]
   bb23e:	9302      	str	r3, [sp, #8]
    spark_cloud_disconnect_options opts = {};
   bb240:	2100      	movs	r1, #0
    opts.clear_session = clearSession_;
   bb242:	7a43      	ldrb	r3, [r0, #9]
    spark_cloud_disconnect_options opts = {};
   bb244:	f8ad 100d 	strh.w	r1, [sp, #13]
    const auto opts = options.toSystemOptions();
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   bb248:	a801      	add	r0, sp, #4
    spark_cloud_disconnect_options opts = {};
   bb24a:	f88d 100f 	strb.w	r1, [sp, #15]
    opts.clear_session = clearSession_;
   bb24e:	f88d 300c 	strb.w	r3, [sp, #12]
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   bb252:	f7ff fbb5 	bl	ba9c0 <spark_cloud_disconnect>
}
   bb256:	b005      	add	sp, #20
   bb258:	f85d fb04 	ldr.w	pc, [sp], #4

000bb25c <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   bb25c:	4770      	bx	lr

000bb25e <_ZN9IPAddressD0Ev>:
   bb25e:	b510      	push	{r4, lr}
   bb260:	2118      	movs	r1, #24
   bb262:	4604      	mov	r4, r0
   bb264:	f7f9 fbef 	bl	b4a46 <_ZdlPvj>
   bb268:	4620      	mov	r0, r4
   bb26a:	bd10      	pop	{r4, pc}

000bb26c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   bb26c:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   bb26e:	7d03      	ldrb	r3, [r0, #20]
   bb270:	2b06      	cmp	r3, #6
{
   bb272:	b08d      	sub	sp, #52	; 0x34
   bb274:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   bb276:	f100 0704 	add.w	r7, r0, #4
   bb27a:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   bb27e:	d012      	beq.n	bb2a6 <_ZNK9IPAddress7printToER5Print+0x3a>
   bb280:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   bb284:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   bb288:	220a      	movs	r2, #10
   bb28a:	4630      	mov	r0, r6
   bb28c:	f7ff fe77 	bl	baf7e <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   bb290:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   bb292:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   bb294:	d019      	beq.n	bb2ca <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   bb296:	2c00      	cmp	r4, #0
   bb298:	d0f4      	beq.n	bb284 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   bb29a:	212e      	movs	r1, #46	; 0x2e
   bb29c:	4630      	mov	r0, r6
   bb29e:	f7ff fe55 	bl	baf4c <_ZN5Print5printEc>
   bb2a2:	4404      	add	r4, r0
   bb2a4:	e7ee      	b.n	bb284 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   bb2a6:	232f      	movs	r3, #47	; 0x2f
   bb2a8:	466a      	mov	r2, sp
   bb2aa:	4639      	mov	r1, r7
   bb2ac:	200a      	movs	r0, #10
		buf[0] = 0;
   bb2ae:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   bb2b2:	f7ff f9c9 	bl	ba648 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   bb2b6:	4668      	mov	r0, sp
   bb2b8:	f7f9 fb80 	bl	b49bc <strlen>
   bb2bc:	6833      	ldr	r3, [r6, #0]
   bb2be:	4602      	mov	r2, r0
   bb2c0:	68db      	ldr	r3, [r3, #12]
   bb2c2:	4669      	mov	r1, sp
   bb2c4:	4630      	mov	r0, r6
   bb2c6:	4798      	blx	r3
   bb2c8:	4604      	mov	r4, r0
    }
    return n;
}
   bb2ca:	4620      	mov	r0, r4
   bb2cc:	b00d      	add	sp, #52	; 0x34
   bb2ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

000bb2d0 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   bb2d0:	b510      	push	{r4, lr}
   bb2d2:	4b05      	ldr	r3, [pc, #20]	; (bb2e8 <_ZN9IPAddressC1Ev+0x18>)
   bb2d4:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   bb2d6:	2211      	movs	r2, #17
   bb2d8:	f840 3b04 	str.w	r3, [r0], #4
   bb2dc:	2100      	movs	r1, #0
   bb2de:	f000 fbef 	bl	bbac0 <memset>
}
   bb2e2:	4620      	mov	r0, r4
   bb2e4:	bd10      	pop	{r4, pc}
   bb2e6:	bf00      	nop
   bb2e8:	000bdbf4 	.word	0x000bdbf4

000bb2ec <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   bb2ec:	4603      	mov	r3, r0
   bb2ee:	4a07      	ldr	r2, [pc, #28]	; (bb30c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   bb2f0:	b510      	push	{r4, lr}
   bb2f2:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   bb2f6:	f101 0210 	add.w	r2, r1, #16
   bb2fa:	f851 4b04 	ldr.w	r4, [r1], #4
   bb2fe:	f843 4b04 	str.w	r4, [r3], #4
   bb302:	4291      	cmp	r1, r2
   bb304:	d1f9      	bne.n	bb2fa <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   bb306:	780a      	ldrb	r2, [r1, #0]
   bb308:	701a      	strb	r2, [r3, #0]
}
   bb30a:	bd10      	pop	{r4, pc}
   bb30c:	000bdbf4 	.word	0x000bdbf4

000bb310 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   bb310:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   bb312:	f89d 4008 	ldrb.w	r4, [sp, #8]
   bb316:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   bb31a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   bb31e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   bb322:	2304      	movs	r3, #4
   bb324:	6041      	str	r1, [r0, #4]
   bb326:	7503      	strb	r3, [r0, #20]
}
   bb328:	bd10      	pop	{r4, pc}
	...

000bb32c <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   bb32c:	b507      	push	{r0, r1, r2, lr}
   bb32e:	4b06      	ldr	r3, [pc, #24]	; (bb348 <_ZN9IPAddressC1EPKh+0x1c>)
   bb330:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   bb332:	78cb      	ldrb	r3, [r1, #3]
   bb334:	9300      	str	r3, [sp, #0]
   bb336:	788b      	ldrb	r3, [r1, #2]
   bb338:	784a      	ldrb	r2, [r1, #1]
   bb33a:	7809      	ldrb	r1, [r1, #0]
   bb33c:	f7ff ffe8 	bl	bb310 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   bb340:	b003      	add	sp, #12
   bb342:	f85d fb04 	ldr.w	pc, [sp], #4
   bb346:	bf00      	nop
   bb348:	000bdbf4 	.word	0x000bdbf4

000bb34c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   bb34c:	7441      	strb	r1, [r0, #17]
}
   bb34e:	4770      	bx	lr

000bb350 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   bb350:	4770      	bx	lr

000bb352 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   bb352:	4770      	bx	lr

000bb354 <_ZN9USBSerial4readEv>:
{
   bb354:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   bb356:	2100      	movs	r1, #0
   bb358:	7c00      	ldrb	r0, [r0, #16]
   bb35a:	f7ff fa85 	bl	ba868 <HAL_USB_USART_Receive_Data>
}
   bb35e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bb362:	bd08      	pop	{r3, pc}

000bb364 <_ZN9USBSerial4peekEv>:
{
   bb364:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   bb366:	2101      	movs	r1, #1
   bb368:	7c00      	ldrb	r0, [r0, #16]
   bb36a:	f7ff fa7d 	bl	ba868 <HAL_USB_USART_Receive_Data>
}
   bb36e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bb372:	bd08      	pop	{r3, pc}

000bb374 <_ZN9USBSerial17availableForWriteEv>:
{
   bb374:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   bb376:	7c00      	ldrb	r0, [r0, #16]
   bb378:	f7ff fa6e 	bl	ba858 <HAL_USB_USART_Available_Data_For_Write>
}
   bb37c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bb380:	bd08      	pop	{r3, pc}

000bb382 <_ZN9USBSerial9availableEv>:
{
   bb382:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   bb384:	7c00      	ldrb	r0, [r0, #16]
   bb386:	f7ff fa5f 	bl	ba848 <HAL_USB_USART_Available_Data>
}
   bb38a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bb38e:	bd08      	pop	{r3, pc}

000bb390 <_ZN9USBSerial5writeEh>:
{
   bb390:	b513      	push	{r0, r1, r4, lr}
   bb392:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   bb394:	7c00      	ldrb	r0, [r0, #16]
{
   bb396:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   bb398:	f7ff fa5e 	bl	ba858 <HAL_USB_USART_Available_Data_For_Write>
   bb39c:	2800      	cmp	r0, #0
   bb39e:	9901      	ldr	r1, [sp, #4]
   bb3a0:	dc01      	bgt.n	bb3a6 <_ZN9USBSerial5writeEh+0x16>
   bb3a2:	7c60      	ldrb	r0, [r4, #17]
   bb3a4:	b120      	cbz	r0, bb3b0 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   bb3a6:	7c20      	ldrb	r0, [r4, #16]
   bb3a8:	f7ff fa66 	bl	ba878 <HAL_USB_USART_Send_Data>
   bb3ac:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   bb3b0:	b002      	add	sp, #8
   bb3b2:	bd10      	pop	{r4, pc}

000bb3b4 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   bb3b4:	7c00      	ldrb	r0, [r0, #16]
   bb3b6:	f7ff ba67 	b.w	ba888 <HAL_USB_USART_Flush_Data>

000bb3ba <_ZN9USBSerialD0Ev>:
   bb3ba:	b510      	push	{r4, lr}
   bb3bc:	2114      	movs	r1, #20
   bb3be:	4604      	mov	r4, r0
   bb3c0:	f7f9 fb41 	bl	b4a46 <_ZdlPvj>
   bb3c4:	4620      	mov	r0, r4
   bb3c6:	bd10      	pop	{r4, pc}

000bb3c8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   bb3c8:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   bb3ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   bb3ce:	4604      	mov	r4, r0
   bb3d0:	4608      	mov	r0, r1
   bb3d2:	2100      	movs	r1, #0
   bb3d4:	e9c4 1301 	strd	r1, r3, [r4, #4]
   bb3d8:	4b04      	ldr	r3, [pc, #16]	; (bb3ec <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   bb3da:	6023      	str	r3, [r4, #0]
  _blocking = true;
   bb3dc:	2301      	movs	r3, #1
  _serial = serial;
   bb3de:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   bb3e0:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   bb3e2:	4611      	mov	r1, r2
   bb3e4:	f7ff fa20 	bl	ba828 <HAL_USB_USART_Init>
}
   bb3e8:	4620      	mov	r0, r4
   bb3ea:	bd10      	pop	{r4, pc}
   bb3ec:	000bdc08 	.word	0x000bdc08

000bb3f0 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   bb3f0:	7c00      	ldrb	r0, [r0, #16]
   bb3f2:	2200      	movs	r2, #0
   bb3f4:	f7ff ba20 	b.w	ba838 <HAL_USB_USART_Begin>

000bb3f8 <_Z19acquireSerialBufferv>:
{
   bb3f8:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   bb3fa:	2214      	movs	r2, #20
{
   bb3fc:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   bb3fe:	2100      	movs	r1, #0
   bb400:	f000 fb5e 	bl	bbac0 <memset>
}
   bb404:	4620      	mov	r0, r4
   bb406:	bd10      	pop	{r4, pc}

000bb408 <_Z16_fetch_usbserialv>:
{
   bb408:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   bb40a:	4c0f      	ldr	r4, [pc, #60]	; (bb448 <_Z16_fetch_usbserialv+0x40>)
{
   bb40c:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   bb40e:	a803      	add	r0, sp, #12
   bb410:	f7ff fff2 	bl	bb3f8 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   bb414:	7821      	ldrb	r1, [r4, #0]
   bb416:	f3bf 8f5b 	dmb	ish
   bb41a:	f011 0101 	ands.w	r1, r1, #1
   bb41e:	d10f      	bne.n	bb440 <_Z16_fetch_usbserialv+0x38>
   bb420:	4620      	mov	r0, r4
   bb422:	9101      	str	r1, [sp, #4]
   bb424:	f7f9 fb1e 	bl	b4a64 <__cxa_guard_acquire>
   bb428:	9901      	ldr	r1, [sp, #4]
   bb42a:	b148      	cbz	r0, bb440 <_Z16_fetch_usbserialv+0x38>
   bb42c:	aa03      	add	r2, sp, #12
   bb42e:	4807      	ldr	r0, [pc, #28]	; (bb44c <_Z16_fetch_usbserialv+0x44>)
   bb430:	f7ff ffca 	bl	bb3c8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   bb434:	4620      	mov	r0, r4
   bb436:	f7f9 fb1a 	bl	b4a6e <__cxa_guard_release>
   bb43a:	4805      	ldr	r0, [pc, #20]	; (bb450 <_Z16_fetch_usbserialv+0x48>)
   bb43c:	f000 fb24 	bl	bba88 <atexit>
	return _usbserial;
}
   bb440:	4802      	ldr	r0, [pc, #8]	; (bb44c <_Z16_fetch_usbserialv+0x44>)
   bb442:	b008      	add	sp, #32
   bb444:	bd10      	pop	{r4, pc}
   bb446:	bf00      	nop
   bb448:	2003e6f8 	.word	0x2003e6f8
   bb44c:	2003e6fc 	.word	0x2003e6fc
   bb450:	000bb351 	.word	0x000bb351

000bb454 <_Z12noInterruptsv>:
 * Return         : None.
 *******************************************************************************/
void noInterrupts(void)
{
  //Only disable the interrupts that are exposed to the user
  hal_interrupt_disable_all();
   bb454:	f7ff b8a0 	b.w	ba598 <hal_interrupt_disable_all>

000bb458 <_Z10interruptsv>:
 * Return         : None.
 *******************************************************************************/
void interrupts(void)
{
  //Only enable the interrupts that are exposed to the user
  hal_interrupt_enable_all();
   bb458:	f7ff b896 	b.w	ba588 <hal_interrupt_enable_all>

000bb45c <tone>:

#include "spark_wiring_tone.h"
#include "tone_hal.h"

void tone(uint8_t pin, unsigned int frequency, unsigned long duration)
{
   bb45c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (pinAvailable(pin) && hal_pin_validate_function(pin, PF_TIMER)==PF_TIMER) {
   bb45e:	b287      	uxth	r7, r0
{
   bb460:	4604      	mov	r4, r0
    if (pinAvailable(pin) && hal_pin_validate_function(pin, PF_TIMER)==PF_TIMER) {
   bb462:	4638      	mov	r0, r7
{
   bb464:	460d      	mov	r5, r1
   bb466:	4616      	mov	r6, r2
    if (pinAvailable(pin) && hal_pin_validate_function(pin, PF_TIMER)==PF_TIMER) {
   bb468:	f000 f9c6 	bl	bb7f8 <pinAvailable>
   bb46c:	b160      	cbz	r0, bb488 <tone+0x2c>
   bb46e:	2102      	movs	r1, #2
   bb470:	4638      	mov	r0, r7
   bb472:	f7ff f861 	bl	ba538 <hal_pin_validate_function>
   bb476:	2802      	cmp	r0, #2
   bb478:	d106      	bne.n	bb488 <tone+0x2c>
        HAL_Tone_Start(pin, frequency, duration);
   bb47a:	4632      	mov	r2, r6
   bb47c:	4629      	mov	r1, r5
   bb47e:	4620      	mov	r0, r4
    }
}
   bb480:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        HAL_Tone_Start(pin, frequency, duration);
   bb484:	f7ff b9c0 	b.w	ba808 <HAL_Tone_Start>
}
   bb488:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bb48a <noTone>:

void noTone(uint8_t pin)
{
   bb48a:	b538      	push	{r3, r4, r5, lr}
    if (pinAvailable(pin) && hal_pin_validate_function(pin, PF_TIMER)==PF_TIMER) {
   bb48c:	b285      	uxth	r5, r0
{
   bb48e:	4604      	mov	r4, r0
    if (pinAvailable(pin) && hal_pin_validate_function(pin, PF_TIMER)==PF_TIMER) {
   bb490:	4628      	mov	r0, r5
   bb492:	f000 f9b1 	bl	bb7f8 <pinAvailable>
   bb496:	b150      	cbz	r0, bb4ae <noTone+0x24>
   bb498:	2102      	movs	r1, #2
   bb49a:	4628      	mov	r0, r5
   bb49c:	f7ff f84c 	bl	ba538 <hal_pin_validate_function>
   bb4a0:	2802      	cmp	r0, #2
   bb4a2:	d104      	bne.n	bb4ae <noTone+0x24>
        HAL_Tone_Stop(pin);
   bb4a4:	4620      	mov	r0, r4
    }
}
   bb4a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        HAL_Tone_Stop(pin);
   bb4aa:	f7ff b9b5 	b.w	ba818 <HAL_Tone_Stop>
}
   bb4ae:	bd38      	pop	{r3, r4, r5, pc}

000bb4b0 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   bb4b0:	4770      	bx	lr

000bb4b2 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   bb4b2:	7441      	strb	r1, [r0, #17]
}
   bb4b4:	4770      	bx	lr

000bb4b6 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   bb4b6:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   bb4b8:	7c00      	ldrb	r0, [r0, #16]
   bb4ba:	f7ff f8fd 	bl	ba6b8 <hal_usart_available_data_for_write>
}
   bb4be:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bb4c2:	bd08      	pop	{r3, pc}

000bb4c4 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   bb4c4:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   bb4c6:	7c00      	ldrb	r0, [r0, #16]
   bb4c8:	f7ff f8ce 	bl	ba668 <hal_usart_available>
}
   bb4cc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bb4d0:	bd08      	pop	{r3, pc}

000bb4d2 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   bb4d2:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   bb4d4:	7c00      	ldrb	r0, [r0, #16]
   bb4d6:	f7ff f8d7 	bl	ba688 <hal_usart_peek>
}
   bb4da:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bb4de:	bd08      	pop	{r3, pc}

000bb4e0 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   bb4e0:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   bb4e2:	7c00      	ldrb	r0, [r0, #16]
   bb4e4:	f7ff f8c8 	bl	ba678 <hal_usart_read>
}
   bb4e8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bb4ec:	bd08      	pop	{r3, pc}

000bb4ee <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   bb4ee:	7c00      	ldrb	r0, [r0, #16]
   bb4f0:	f7ff b8d2 	b.w	ba698 <hal_usart_flush>

000bb4f4 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   bb4f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   bb4f6:	7c45      	ldrb	r5, [r0, #17]
{
   bb4f8:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   bb4fa:	b12d      	cbz	r5, bb508 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   bb4fc:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   bb4fe:	b003      	add	sp, #12
   bb500:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   bb504:	f7ff b8a8 	b.w	ba658 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   bb508:	7c00      	ldrb	r0, [r0, #16]
   bb50a:	9101      	str	r1, [sp, #4]
   bb50c:	f7ff f8d4 	bl	ba6b8 <hal_usart_available_data_for_write>
   bb510:	2800      	cmp	r0, #0
   bb512:	9901      	ldr	r1, [sp, #4]
   bb514:	dcf2      	bgt.n	bb4fc <_ZN11USARTSerial5writeEh+0x8>
}
   bb516:	4628      	mov	r0, r5
   bb518:	b003      	add	sp, #12
   bb51a:	bd30      	pop	{r4, r5, pc}

000bb51c <_ZN11USARTSerialD0Ev>:
   bb51c:	b510      	push	{r4, lr}
   bb51e:	2114      	movs	r1, #20
   bb520:	4604      	mov	r4, r0
   bb522:	f7f9 fa90 	bl	b4a46 <_ZdlPvj>
   bb526:	4620      	mov	r0, r4
   bb528:	bd10      	pop	{r4, pc}
	...

000bb52c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   bb52c:	b510      	push	{r4, lr}
   bb52e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   bb532:	4604      	mov	r4, r0
   bb534:	4608      	mov	r0, r1
   bb536:	4611      	mov	r1, r2
   bb538:	2200      	movs	r2, #0
   bb53a:	e9c4 2301 	strd	r2, r3, [r4, #4]
   bb53e:	4b04      	ldr	r3, [pc, #16]	; (bb550 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   bb540:	6023      	str	r3, [r4, #0]
  _blocking = true;
   bb542:	2301      	movs	r3, #1
  _serial = serial;
   bb544:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   bb546:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   bb548:	f7ff f8be 	bl	ba6c8 <hal_usart_init_ex>
}
   bb54c:	4620      	mov	r0, r4
   bb54e:	bd10      	pop	{r4, pc}
   bb550:	000bdc38 	.word	0x000bdc38

000bb554 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   bb554:	4770      	bx	lr

000bb556 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   bb556:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bb558:	4606      	mov	r6, r0
   bb55a:	4615      	mov	r5, r2
   bb55c:	460c      	mov	r4, r1
   bb55e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   bb560:	42bc      	cmp	r4, r7
   bb562:	d006      	beq.n	bb572 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   bb564:	6833      	ldr	r3, [r6, #0]
   bb566:	f814 1b01 	ldrb.w	r1, [r4], #1
   bb56a:	689b      	ldr	r3, [r3, #8]
   bb56c:	4630      	mov	r0, r6
   bb56e:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   bb570:	e7f6      	b.n	bb560 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   bb572:	4628      	mov	r0, r5
   bb574:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bb576 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   bb576:	7c00      	ldrb	r0, [r0, #16]
   bb578:	2200      	movs	r2, #0
   bb57a:	f7ff b8cd 	b.w	ba718 <hal_i2c_write>

000bb57e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   bb57e:	7c00      	ldrb	r0, [r0, #16]
   bb580:	2100      	movs	r1, #0
   bb582:	f7ff b8d1 	b.w	ba728 <hal_i2c_available>

000bb586 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   bb586:	7c00      	ldrb	r0, [r0, #16]
   bb588:	2100      	movs	r1, #0
   bb58a:	f7ff b8d5 	b.w	ba738 <hal_i2c_read>

000bb58e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   bb58e:	7c00      	ldrb	r0, [r0, #16]
   bb590:	2100      	movs	r1, #0
   bb592:	f7ff b8d9 	b.w	ba748 <hal_i2c_peek>

000bb596 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   bb596:	7c00      	ldrb	r0, [r0, #16]
   bb598:	2100      	movs	r1, #0
   bb59a:	f7ff b8dd 	b.w	ba758 <hal_i2c_flush>

000bb59e <_ZN7TwoWireD0Ev>:
   bb59e:	b510      	push	{r4, lr}
   bb5a0:	2114      	movs	r1, #20
   bb5a2:	4604      	mov	r4, r0
   bb5a4:	f7f9 fa4f 	bl	b4a46 <_ZdlPvj>
   bb5a8:	4620      	mov	r0, r4
   bb5aa:	bd10      	pop	{r4, pc}

000bb5ac <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   bb5ac:	b538      	push	{r3, r4, r5, lr}
   bb5ae:	4604      	mov	r4, r0
   bb5b0:	4615      	mov	r5, r2
   bb5b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   bb5b6:	2200      	movs	r2, #0
   bb5b8:	e9c4 2301 	strd	r2, r3, [r4, #4]
   bb5bc:	4b09      	ldr	r3, [pc, #36]	; (bb5e4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   bb5be:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   bb5c0:	4608      	mov	r0, r1
   bb5c2:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   bb5c4:	4629      	mov	r1, r5
   bb5c6:	f7ff f8d7 	bl	ba778 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   bb5ca:	30bf      	adds	r0, #191	; 0xbf
   bb5cc:	d108      	bne.n	bb5e0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   bb5ce:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   bb5d0:	07db      	lsls	r3, r3, #31
   bb5d2:	d505      	bpl.n	bb5e0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   bb5d4:	6868      	ldr	r0, [r5, #4]
   bb5d6:	f7ff fa03 	bl	ba9e0 <free>
    free(conf.tx_buffer);
   bb5da:	68e8      	ldr	r0, [r5, #12]
   bb5dc:	f7ff fa00 	bl	ba9e0 <free>
}
   bb5e0:	4620      	mov	r0, r4
   bb5e2:	bd38      	pop	{r3, r4, r5, pc}
   bb5e4:	000bdc68 	.word	0x000bdc68

000bb5e8 <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
   bb5e8:	7c00      	ldrb	r0, [r0, #16]
   bb5ea:	2200      	movs	r2, #0
   bb5ec:	f7ff b874 	b.w	ba6d8 <hal_i2c_set_speed>

000bb5f0 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   bb5f0:	2300      	movs	r3, #0
   bb5f2:	7c00      	ldrb	r0, [r0, #16]
   bb5f4:	461a      	mov	r2, r3
   bb5f6:	4619      	mov	r1, r3
   bb5f8:	f7ff b876 	b.w	ba6e8 <hal_i2c_begin>

000bb5fc <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   bb5fc:	7c00      	ldrb	r0, [r0, #16]
   bb5fe:	2200      	movs	r2, #0
   bb600:	f7ff b87a 	b.w	ba6f8 <hal_i2c_begin_transmission>

000bb604 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   bb604:	b2c9      	uxtb	r1, r1
   bb606:	f7ff bff9 	b.w	bb5fc <_ZN7TwoWire17beginTransmissionEh>

000bb60a <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   bb60a:	7c00      	ldrb	r0, [r0, #16]
   bb60c:	2200      	movs	r2, #0
   bb60e:	f7ff b87b 	b.w	ba708 <hal_i2c_end_transmission>

000bb612 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   bb612:	2101      	movs	r1, #1
   bb614:	f7ff bff9 	b.w	bb60a <_ZN7TwoWire15endTransmissionEh>

000bb618 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   bb618:	2200      	movs	r2, #0
   bb61a:	6840      	ldr	r0, [r0, #4]
   bb61c:	4611      	mov	r1, r2
   bb61e:	f7ff b97f 	b.w	ba920 <network_ready>

000bb622 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   bb622:	2200      	movs	r2, #0
   bb624:	6840      	ldr	r0, [r0, #4]
   bb626:	4611      	mov	r1, r2
   bb628:	f7ff b99a 	b.w	ba960 <network_listening>

000bb62c <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   bb62c:	2200      	movs	r2, #0
   bb62e:	6840      	ldr	r0, [r0, #4]
   bb630:	4611      	mov	r1, r2
   bb632:	f7ff b9a5 	b.w	ba980 <network_get_listen_timeout>

000bb636 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   bb636:	6840      	ldr	r0, [r0, #4]
   bb638:	2200      	movs	r2, #0
   bb63a:	f7ff b999 	b.w	ba970 <network_set_listen_timeout>

000bb63e <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   bb63e:	6840      	ldr	r0, [r0, #4]
   bb640:	2200      	movs	r2, #0
   bb642:	f081 0101 	eor.w	r1, r1, #1
   bb646:	f7ff b983 	b.w	ba950 <network_listen>

000bb64a <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   bb64a:	2300      	movs	r3, #0
   bb64c:	6840      	ldr	r0, [r0, #4]
   bb64e:	461a      	mov	r2, r3
   bb650:	4619      	mov	r1, r3
   bb652:	f7ff b975 	b.w	ba940 <network_off>

000bb656 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   bb656:	2300      	movs	r3, #0
   bb658:	6840      	ldr	r0, [r0, #4]
   bb65a:	461a      	mov	r2, r3
   bb65c:	4619      	mov	r1, r3
   bb65e:	f7ff b967 	b.w	ba930 <network_on>

000bb662 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   bb662:	2200      	movs	r2, #0
   bb664:	6840      	ldr	r0, [r0, #4]
   bb666:	4611      	mov	r1, r2
   bb668:	f7ff b94a 	b.w	ba900 <network_connecting>

000bb66c <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   bb66c:	6840      	ldr	r0, [r0, #4]
   bb66e:	2200      	movs	r2, #0
   bb670:	2102      	movs	r1, #2
   bb672:	f7ff b94d 	b.w	ba910 <network_disconnect>

000bb676 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   bb676:	2300      	movs	r3, #0
   bb678:	6840      	ldr	r0, [r0, #4]
   bb67a:	461a      	mov	r2, r3
   bb67c:	f7ff b938 	b.w	ba8f0 <network_connect>

000bb680 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   bb680:	4b02      	ldr	r3, [pc, #8]	; (bb68c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   bb682:	2204      	movs	r2, #4
   bb684:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   bb686:	4a02      	ldr	r2, [pc, #8]	; (bb690 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   bb688:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   bb68a:	4770      	bx	lr
   bb68c:	2003e710 	.word	0x2003e710
   bb690:	000bdc90 	.word	0x000bdc90

000bb694 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   bb694:	2300      	movs	r3, #0
   bb696:	6840      	ldr	r0, [r0, #4]
   bb698:	461a      	mov	r2, r3
   bb69a:	f7ff b929 	b.w	ba8f0 <network_connect>

000bb69e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   bb69e:	6840      	ldr	r0, [r0, #4]
   bb6a0:	2200      	movs	r2, #0
   bb6a2:	2102      	movs	r1, #2
   bb6a4:	f7ff b934 	b.w	ba910 <network_disconnect>

000bb6a8 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   bb6a8:	2200      	movs	r2, #0
   bb6aa:	6840      	ldr	r0, [r0, #4]
   bb6ac:	4611      	mov	r1, r2
   bb6ae:	f7ff b927 	b.w	ba900 <network_connecting>

000bb6b2 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   bb6b2:	2200      	movs	r2, #0
   bb6b4:	6840      	ldr	r0, [r0, #4]
   bb6b6:	4611      	mov	r1, r2
   bb6b8:	f7ff b932 	b.w	ba920 <network_ready>

000bb6bc <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   bb6bc:	2300      	movs	r3, #0
   bb6be:	6840      	ldr	r0, [r0, #4]
   bb6c0:	461a      	mov	r2, r3
   bb6c2:	4619      	mov	r1, r3
   bb6c4:	f7ff b934 	b.w	ba930 <network_on>

000bb6c8 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   bb6c8:	2300      	movs	r3, #0
   bb6ca:	6840      	ldr	r0, [r0, #4]
   bb6cc:	461a      	mov	r2, r3
   bb6ce:	4619      	mov	r1, r3
   bb6d0:	f7ff b936 	b.w	ba940 <network_off>

000bb6d4 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   bb6d4:	6840      	ldr	r0, [r0, #4]
   bb6d6:	2100      	movs	r1, #0
   bb6d8:	f7ff b95a 	b.w	ba990 <network_is_on>

000bb6dc <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   bb6dc:	6840      	ldr	r0, [r0, #4]
   bb6de:	2100      	movs	r1, #0
   bb6e0:	f7ff b95e 	b.w	ba9a0 <network_is_off>

000bb6e4 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   bb6e4:	6840      	ldr	r0, [r0, #4]
   bb6e6:	2200      	movs	r2, #0
   bb6e8:	f081 0101 	eor.w	r1, r1, #1
   bb6ec:	f7ff b930 	b.w	ba950 <network_listen>

000bb6f0 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   bb6f0:	6840      	ldr	r0, [r0, #4]
   bb6f2:	2200      	movs	r2, #0
   bb6f4:	f7ff b93c 	b.w	ba970 <network_set_listen_timeout>

000bb6f8 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   bb6f8:	2200      	movs	r2, #0
   bb6fa:	6840      	ldr	r0, [r0, #4]
   bb6fc:	4611      	mov	r1, r2
   bb6fe:	f7ff b93f 	b.w	ba980 <network_get_listen_timeout>

000bb702 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   bb702:	2200      	movs	r2, #0
   bb704:	6840      	ldr	r0, [r0, #4]
   bb706:	4611      	mov	r1, r2
   bb708:	f7ff b92a 	b.w	ba960 <network_listening>

000bb70c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   bb70c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bb710:	b095      	sub	sp, #84	; 0x54
   bb712:	4614      	mov	r4, r2
   bb714:	460d      	mov	r5, r1
   bb716:	4607      	mov	r7, r0
    IPAddress addr;
   bb718:	f7ff fdda 	bl	bb2d0 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   bb71c:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   bb71e:	221c      	movs	r2, #28
   bb720:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   bb722:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   bb724:	f000 f9cc 	bl	bbac0 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   bb728:	2340      	movs	r3, #64	; 0x40
   bb72a:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   bb72c:	4620      	mov	r0, r4
   bb72e:	466b      	mov	r3, sp
   bb730:	aa0c      	add	r2, sp, #48	; 0x30
   bb732:	2100      	movs	r1, #0
   bb734:	f7fe fef8 	bl	ba528 <netdb_getaddrinfo>
    if (!r) {
   bb738:	4604      	mov	r4, r0
   bb73a:	2800      	cmp	r0, #0
   bb73c:	d14b      	bne.n	bb7d6 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   bb73e:	4602      	mov	r2, r0
   bb740:	2101      	movs	r1, #1
   bb742:	6868      	ldr	r0, [r5, #4]
   bb744:	f7ff f8ec 	bl	ba920 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   bb748:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   bb74a:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   bb74c:	4622      	mov	r2, r4
   bb74e:	6868      	ldr	r0, [r5, #4]
   bb750:	f7ff f8e6 	bl	ba920 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   bb754:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   bb756:	4681      	mov	r9, r0
        bool ok = false;
   bb758:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   bb75a:	2e00      	cmp	r6, #0
   bb75c:	d03b      	beq.n	bb7d6 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   bb75e:	2900      	cmp	r1, #0
   bb760:	d139      	bne.n	bb7d6 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   bb762:	6873      	ldr	r3, [r6, #4]
   bb764:	2b02      	cmp	r3, #2
   bb766:	d003      	beq.n	bb770 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   bb768:	2b0a      	cmp	r3, #10
   bb76a:	d011      	beq.n	bb790 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   bb76c:	69f6      	ldr	r6, [r6, #28]
   bb76e:	e7f4      	b.n	bb75a <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   bb770:	f1b8 0f00 	cmp.w	r8, #0
   bb774:	d0fa      	beq.n	bb76c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   bb776:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   bb778:	a806      	add	r0, sp, #24
   bb77a:	3104      	adds	r1, #4
class IPAddress : public Printable {
   bb77c:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   bb77e:	f7ff fdd5 	bl	bb32c <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   bb782:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bb784:	1d3c      	adds	r4, r7, #4
   bb786:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bb788:	682b      	ldr	r3, [r5, #0]
   bb78a:	7023      	strb	r3, [r4, #0]
                    ok = true;
   bb78c:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   bb78e:	e7ed      	b.n	bb76c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   bb790:	f1b9 0f00 	cmp.w	r9, #0
   bb794:	d0ea      	beq.n	bb76c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   bb796:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   bb798:	2210      	movs	r2, #16
   bb79a:	a801      	add	r0, sp, #4
   bb79c:	f000 f990 	bl	bbac0 <memset>
                    a.v = 6;
   bb7a0:	2306      	movs	r3, #6
   bb7a2:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   bb7a6:	ad01      	add	r5, sp, #4
   bb7a8:	f104 0308 	add.w	r3, r4, #8
   bb7ac:	3418      	adds	r4, #24
   bb7ae:	6818      	ldr	r0, [r3, #0]
   bb7b0:	6859      	ldr	r1, [r3, #4]
   bb7b2:	462a      	mov	r2, r5
   bb7b4:	c203      	stmia	r2!, {r0, r1}
   bb7b6:	3308      	adds	r3, #8
   bb7b8:	42a3      	cmp	r3, r4
   bb7ba:	4615      	mov	r5, r2
   bb7bc:	d1f7      	bne.n	bb7ae <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   bb7be:	a901      	add	r1, sp, #4
   bb7c0:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   bb7c2:	ad07      	add	r5, sp, #28
   bb7c4:	f7ff fd92 	bl	bb2ec <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   bb7c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bb7ca:	1d3c      	adds	r4, r7, #4
   bb7cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bb7ce:	682b      	ldr	r3, [r5, #0]
   bb7d0:	7023      	strb	r3, [r4, #0]
                    ok = true;
   bb7d2:	4649      	mov	r1, r9
   bb7d4:	e7ca      	b.n	bb76c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   bb7d6:	9800      	ldr	r0, [sp, #0]
   bb7d8:	f7fe fe9e 	bl	ba518 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   bb7dc:	4638      	mov	r0, r7
   bb7de:	b015      	add	sp, #84	; 0x54
   bb7e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000bb7e4 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   bb7e4:	4b02      	ldr	r3, [pc, #8]	; (bb7f0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   bb7e6:	4a03      	ldr	r2, [pc, #12]	; (bb7f4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   bb7e8:	601a      	str	r2, [r3, #0]
   bb7ea:	2200      	movs	r2, #0
   bb7ec:	605a      	str	r2, [r3, #4]
    network_free_configuration(c, count, nullptr);
    return res;
}
#endif // HAL_USE_SOCKET_HAL_POSIX

} // spark
   bb7ee:	4770      	bx	lr
   bb7f0:	2003e718 	.word	0x2003e718
   bb7f4:	000bdccc 	.word	0x000bdccc

000bb7f8 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   bb7f8:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   bb7fa:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   bb7fc:	d902      	bls.n	bb804 <pinAvailable+0xc>
    return false;
   bb7fe:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   bb800:	b002      	add	sp, #8
   bb802:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   bb804:	f1a0 030b 	sub.w	r3, r0, #11
   bb808:	2b02      	cmp	r3, #2
   bb80a:	d81a      	bhi.n	bb842 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   bb80c:	4c17      	ldr	r4, [pc, #92]	; (bb86c <pinAvailable+0x74>)
   bb80e:	7821      	ldrb	r1, [r4, #0]
   bb810:	f3bf 8f5b 	dmb	ish
   bb814:	f011 0101 	ands.w	r1, r1, #1
   bb818:	d10b      	bne.n	bb832 <pinAvailable+0x3a>
   bb81a:	4620      	mov	r0, r4
   bb81c:	9101      	str	r1, [sp, #4]
   bb81e:	f7f9 f921 	bl	b4a64 <__cxa_guard_acquire>
   bb822:	9901      	ldr	r1, [sp, #4]
   bb824:	b128      	cbz	r0, bb832 <pinAvailable+0x3a>
   bb826:	4812      	ldr	r0, [pc, #72]	; (bb870 <pinAvailable+0x78>)
   bb828:	f7ff f956 	bl	baad8 <_ZN8SPIClassC1E19hal_spi_interface_t>
   bb82c:	4620      	mov	r0, r4
   bb82e:	f7f9 f91e 	bl	b4a6e <__cxa_guard_release>
   bb832:	4b0f      	ldr	r3, [pc, #60]	; (bb870 <pinAvailable+0x78>)
   bb834:	7818      	ldrb	r0, [r3, #0]
   bb836:	f7fe ffbf 	bl	ba7b8 <hal_spi_is_enabled>
   bb83a:	2800      	cmp	r0, #0
   bb83c:	d1df      	bne.n	bb7fe <pinAvailable+0x6>
  return true; // 'pin' is available
   bb83e:	2001      	movs	r0, #1
   bb840:	e7de      	b.n	bb800 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   bb842:	2801      	cmp	r0, #1
   bb844:	d809      	bhi.n	bb85a <pinAvailable+0x62>
   bb846:	f000 f8f9 	bl	bba3c <_Z19__fetch_global_Wirev>
   bb84a:	2100      	movs	r1, #0
   bb84c:	7c00      	ldrb	r0, [r0, #16]
   bb84e:	f7fe ff8b 	bl	ba768 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   bb852:	f080 0001 	eor.w	r0, r0, #1
   bb856:	b2c0      	uxtb	r0, r0
   bb858:	e7d2      	b.n	bb800 <pinAvailable+0x8>
   bb85a:	3809      	subs	r0, #9
   bb85c:	2801      	cmp	r0, #1
   bb85e:	d8ee      	bhi.n	bb83e <pinAvailable+0x46>
   bb860:	f000 f896 	bl	bb990 <_Z22__fetch_global_Serial1v>
   bb864:	7c00      	ldrb	r0, [r0, #16]
   bb866:	f7fe ff1f 	bl	ba6a8 <hal_usart_is_enabled>
   bb86a:	e7f2      	b.n	bb852 <pinAvailable+0x5a>
   bb86c:	2003c71c 	.word	0x2003c71c
   bb870:	2003c720 	.word	0x2003c720

000bb874 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   bb874:	2823      	cmp	r0, #35	; 0x23
{
   bb876:	b538      	push	{r3, r4, r5, lr}
   bb878:	4604      	mov	r4, r0
   bb87a:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   bb87c:	d80a      	bhi.n	bb894 <pinMode+0x20>
   bb87e:	29ff      	cmp	r1, #255	; 0xff
   bb880:	d008      	beq.n	bb894 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   bb882:	f7ff ffb9 	bl	bb7f8 <pinAvailable>
   bb886:	b128      	cbz	r0, bb894 <pinMode+0x20>
  hal_gpio_mode(pin, setMode);
   bb888:	4629      	mov	r1, r5
   bb88a:	4620      	mov	r0, r4
}
   bb88c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_mode(pin, setMode);
   bb890:	f7fe be5a 	b.w	ba548 <hal_gpio_mode>
}
   bb894:	bd38      	pop	{r3, r4, r5, pc}

000bb896 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(hal_pin_t pin, uint8_t value)
{
   bb896:	b538      	push	{r3, r4, r5, lr}
   bb898:	4604      	mov	r4, r0
   bb89a:	460d      	mov	r5, r1
    PinMode mode = hal_gpio_get_mode(pin);
   bb89c:	f7fe fe5c 	bl	ba558 <hal_gpio_get_mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   bb8a0:	28ff      	cmp	r0, #255	; 0xff
   bb8a2:	d010      	beq.n	bb8c6 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   bb8a4:	2806      	cmp	r0, #6
   bb8a6:	d804      	bhi.n	bb8b2 <digitalWrite+0x1c>
   bb8a8:	234d      	movs	r3, #77	; 0x4d
   bb8aa:	fa23 f000 	lsr.w	r0, r3, r0
   bb8ae:	07c3      	lsls	r3, r0, #31
   bb8b0:	d409      	bmi.n	bb8c6 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   bb8b2:	4620      	mov	r0, r4
   bb8b4:	f7ff ffa0 	bl	bb7f8 <pinAvailable>
   bb8b8:	b128      	cbz	r0, bb8c6 <digitalWrite+0x30>
    return;
  }

  hal_gpio_write(pin, value);
   bb8ba:	4629      	mov	r1, r5
   bb8bc:	4620      	mov	r0, r4
}
   bb8be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_write(pin, value);
   bb8c2:	f7fe be51 	b.w	ba568 <hal_gpio_write>
}
   bb8c6:	bd38      	pop	{r3, r4, r5, pc}

000bb8c8 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(hal_pin_t pin)
{
   bb8c8:	b510      	push	{r4, lr}
   bb8ca:	4604      	mov	r4, r0
    PinMode mode = hal_gpio_get_mode(pin);
   bb8cc:	f7fe fe44 	bl	ba558 <hal_gpio_get_mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   bb8d0:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   bb8d2:	b2db      	uxtb	r3, r3
   bb8d4:	2b01      	cmp	r3, #1
   bb8d6:	d908      	bls.n	bb8ea <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   bb8d8:	4620      	mov	r0, r4
   bb8da:	f7ff ff8d 	bl	bb7f8 <pinAvailable>
   bb8de:	b120      	cbz	r0, bb8ea <digitalRead+0x22>
      return LOW;
    }

    return hal_gpio_read(pin);
   bb8e0:	4620      	mov	r0, r4
}
   bb8e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return hal_gpio_read(pin);
   bb8e6:	f7fe be47 	b.w	ba578 <hal_gpio_read>
}
   bb8ea:	2000      	movs	r0, #0
   bb8ec:	bd10      	pop	{r4, pc}

000bb8ee <analogRead>:
int32_t analogRead(hal_pin_t pin)
{
#if !HAL_PLATFORM_RTL872X
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   bb8ee:	280d      	cmp	r0, #13
{
   bb8f0:	b510      	push	{r4, lr}
   bb8f2:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   bb8f4:	bf9c      	itt	ls
   bb8f6:	340e      	addls	r4, #14
   bb8f8:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
#endif

  // Safety check
  if( !pinAvailable(pin) ) {
   bb8fa:	4620      	mov	r0, r4
   bb8fc:	f7ff ff7c 	bl	bb7f8 <pinAvailable>
   bb900:	b150      	cbz	r0, bb918 <analogRead+0x2a>
    return LOW;
  }

  if(hal_pin_validate_function(pin, PF_ADC)!=PF_ADC)
   bb902:	2103      	movs	r1, #3
   bb904:	4620      	mov	r0, r4
   bb906:	f7fe fe17 	bl	ba538 <hal_pin_validate_function>
   bb90a:	2803      	cmp	r0, #3
   bb90c:	d104      	bne.n	bb918 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   bb90e:	4620      	mov	r0, r4
}
   bb910:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   bb914:	f7fe be48 	b.w	ba5a8 <hal_adc_read>
}
   bb918:	2000      	movs	r0, #0
   bb91a:	bd10      	pop	{r4, pc}

000bb91c <_Z11analogWritetmm>:
/*
 * @brief Should take an integer 0-255 and create a PWM signal with a duty cycle from 0-100%
 * and frequency from 1 to 65535 Hz.
 */
void analogWrite(hal_pin_t pin, uint32_t value, uint32_t pwm_frequency)
{
   bb91c:	b570      	push	{r4, r5, r6, lr}
   bb91e:	4604      	mov	r4, r0
   bb920:	460d      	mov	r5, r1
   bb922:	4616      	mov	r6, r2
    // Safety check
    if (!pinAvailable(pin))
   bb924:	f7ff ff68 	bl	bb7f8 <pinAvailable>
   bb928:	b198      	cbz	r0, bb952 <_Z11analogWritetmm+0x36>
    {
        return;
    }

    if (hal_pin_validate_function(pin, PF_TIMER) == PF_TIMER)
   bb92a:	2102      	movs	r1, #2
   bb92c:	4620      	mov	r0, r4
   bb92e:	f7fe fe03 	bl	ba538 <hal_pin_validate_function>
   bb932:	2802      	cmp	r0, #2
   bb934:	d10d      	bne.n	bb952 <_Z11analogWritetmm+0x36>
    {
        PinMode mode = hal_gpio_get_mode(pin);
   bb936:	4620      	mov	r0, r4
   bb938:	f7fe fe0e 	bl	ba558 <hal_gpio_get_mode>

        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
   bb93c:	2801      	cmp	r0, #1
   bb93e:	d001      	beq.n	bb944 <_Z11analogWritetmm+0x28>
   bb940:	2804      	cmp	r0, #4
   bb942:	d106      	bne.n	bb952 <_Z11analogWritetmm+0x36>
        {
            return;
        }

        hal_pwm_write_with_frequency_ext(pin, value, pwm_frequency);
   bb944:	4632      	mov	r2, r6
   bb946:	4629      	mov	r1, r5
   bb948:	4620      	mov	r0, r4
    }
}
   bb94a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        hal_pwm_write_with_frequency_ext(pin, value, pwm_frequency);
   bb94e:	f7fe be3b 	b.w	ba5c8 <hal_pwm_write_with_frequency_ext>
}
   bb952:	bd70      	pop	{r4, r5, r6, pc}

000bb954 <pulseIn>:
 */
uint32_t pulseIn(hal_pin_t pin, uint16_t value) {

    // NO SAFETY CHECKS!!! WILD WILD WEST!!!

    return hal_gpio_pulse_in(pin, value);
   bb954:	f7fe be30 	b.w	ba5b8 <hal_gpio_pulse_in>

000bb958 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   bb958:	4770      	bx	lr
	...

000bb95c <_Z20acquireSerial1Bufferv>:
{
   bb95c:	b538      	push	{r3, r4, r5, lr}
   bb95e:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   bb960:	2514      	movs	r5, #20
   bb962:	462a      	mov	r2, r5
   bb964:	2100      	movs	r1, #0
   bb966:	f000 f8ab 	bl	bbac0 <memset>
   bb96a:	8025      	strh	r5, [r4, #0]
   bb96c:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bb96e:	4907      	ldr	r1, [pc, #28]	; (bb98c <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   bb970:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bb972:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   bb974:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bb976:	f000 f885 	bl	bba84 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bb97a:	4904      	ldr	r1, [pc, #16]	; (bb98c <_Z20acquireSerial1Bufferv+0x30>)
    };
   bb97c:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bb97e:	4628      	mov	r0, r5
   bb980:	f000 f880 	bl	bba84 <_ZnajRKSt9nothrow_t>
    };
   bb984:	60e0      	str	r0, [r4, #12]
}
   bb986:	4620      	mov	r0, r4
   bb988:	bd38      	pop	{r3, r4, r5, pc}
   bb98a:	bf00      	nop
   bb98c:	000bdd00 	.word	0x000bdd00

000bb990 <_Z22__fetch_global_Serial1v>:
{
   bb990:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   bb992:	4d0e      	ldr	r5, [pc, #56]	; (bb9cc <_Z22__fetch_global_Serial1v+0x3c>)
   bb994:	7829      	ldrb	r1, [r5, #0]
   bb996:	f3bf 8f5b 	dmb	ish
   bb99a:	f011 0401 	ands.w	r4, r1, #1
{
   bb99e:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   bb9a0:	d111      	bne.n	bb9c6 <_Z22__fetch_global_Serial1v+0x36>
   bb9a2:	4628      	mov	r0, r5
   bb9a4:	f7f9 f85e 	bl	b4a64 <__cxa_guard_acquire>
   bb9a8:	b168      	cbz	r0, bb9c6 <_Z22__fetch_global_Serial1v+0x36>
   bb9aa:	a801      	add	r0, sp, #4
   bb9ac:	f7ff ffd6 	bl	bb95c <_Z20acquireSerial1Bufferv>
   bb9b0:	aa01      	add	r2, sp, #4
   bb9b2:	4621      	mov	r1, r4
   bb9b4:	4806      	ldr	r0, [pc, #24]	; (bb9d0 <_Z22__fetch_global_Serial1v+0x40>)
   bb9b6:	f7ff fdb9 	bl	bb52c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   bb9ba:	4628      	mov	r0, r5
   bb9bc:	f7f9 f857 	bl	b4a6e <__cxa_guard_release>
   bb9c0:	4804      	ldr	r0, [pc, #16]	; (bb9d4 <_Z22__fetch_global_Serial1v+0x44>)
   bb9c2:	f000 f861 	bl	bba88 <atexit>
    return serial1;
}
   bb9c6:	4802      	ldr	r0, [pc, #8]	; (bb9d0 <_Z22__fetch_global_Serial1v+0x40>)
   bb9c8:	b007      	add	sp, #28
   bb9ca:	bd30      	pop	{r4, r5, pc}
   bb9cc:	2003e720 	.word	0x2003e720
   bb9d0:	2003e724 	.word	0x2003e724
   bb9d4:	000bb959 	.word	0x000bb959

000bb9d8 <_Z21__fetch_global_EEPROMv>:

// we don't use this global instance since there's no actual instance data
// Having this keeps the unoptimized build happy

EEPROMClass& __fetch_global_EEPROM()
{
   bb9d8:	b510      	push	{r4, lr}
	static EEPROMClass eeprom;
   bb9da:	4c08      	ldr	r4, [pc, #32]	; (bb9fc <_Z21__fetch_global_EEPROMv+0x24>)
   bb9dc:	7823      	ldrb	r3, [r4, #0]
   bb9de:	f3bf 8f5b 	dmb	ish
   bb9e2:	07db      	lsls	r3, r3, #31
   bb9e4:	d408      	bmi.n	bb9f8 <_Z21__fetch_global_EEPROMv+0x20>
   bb9e6:	4620      	mov	r0, r4
   bb9e8:	f7f9 f83c 	bl	b4a64 <__cxa_guard_acquire>
   bb9ec:	b120      	cbz	r0, bb9f8 <_Z21__fetch_global_EEPROMv+0x20>

struct EEPROMClass{

	EEPROMClass()
    {
    		HAL_EEPROM_Init();
   bb9ee:	f7fe fe0b 	bl	ba608 <HAL_EEPROM_Init>
   bb9f2:	4620      	mov	r0, r4
   bb9f4:	f7f9 f83b 	bl	b4a6e <__cxa_guard_release>
	return eeprom;
}
   bb9f8:	4801      	ldr	r0, [pc, #4]	; (bba00 <_Z21__fetch_global_EEPROMv+0x28>)
   bb9fa:	bd10      	pop	{r4, pc}
   bb9fc:	2003e73c 	.word	0x2003e73c
   bba00:	2003e740 	.word	0x2003e740

000bba04 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   bba04:	4770      	bx	lr
	...

000bba08 <_Z17acquireWireBufferv>:
{
   bba08:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   bba0a:	4b0a      	ldr	r3, [pc, #40]	; (bba34 <_Z17acquireWireBufferv+0x2c>)
   bba0c:	6003      	str	r3, [r0, #0]
   bba0e:	2301      	movs	r3, #1
{
   bba10:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   bba12:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   bba14:	4908      	ldr	r1, [pc, #32]	; (bba38 <_Z17acquireWireBufferv+0x30>)
   bba16:	2020      	movs	r0, #32
   bba18:	f000 f834 	bl	bba84 <_ZnajRKSt9nothrow_t>
	};
   bba1c:	2520      	movs	r5, #32
   bba1e:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   bba20:	4905      	ldr	r1, [pc, #20]	; (bba38 <_Z17acquireWireBufferv+0x30>)
	};
   bba22:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   bba24:	4628      	mov	r0, r5
   bba26:	f000 f82d 	bl	bba84 <_ZnajRKSt9nothrow_t>
	};
   bba2a:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   bba2e:	4620      	mov	r0, r4
   bba30:	bd38      	pop	{r3, r4, r5, pc}
   bba32:	bf00      	nop
   bba34:	00010018 	.word	0x00010018
   bba38:	000bdd00 	.word	0x000bdd00

000bba3c <_Z19__fetch_global_Wirev>:
{
   bba3c:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   bba3e:	4d0e      	ldr	r5, [pc, #56]	; (bba78 <_Z19__fetch_global_Wirev+0x3c>)
   bba40:	7829      	ldrb	r1, [r5, #0]
   bba42:	f3bf 8f5b 	dmb	ish
   bba46:	f011 0401 	ands.w	r4, r1, #1
{
   bba4a:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   bba4c:	d111      	bne.n	bba72 <_Z19__fetch_global_Wirev+0x36>
   bba4e:	4628      	mov	r0, r5
   bba50:	f7f9 f808 	bl	b4a64 <__cxa_guard_acquire>
   bba54:	b168      	cbz	r0, bba72 <_Z19__fetch_global_Wirev+0x36>
   bba56:	4668      	mov	r0, sp
   bba58:	f7ff ffd6 	bl	bba08 <_Z17acquireWireBufferv>
   bba5c:	466a      	mov	r2, sp
   bba5e:	4621      	mov	r1, r4
   bba60:	4806      	ldr	r0, [pc, #24]	; (bba7c <_Z19__fetch_global_Wirev+0x40>)
   bba62:	f7ff fda3 	bl	bb5ac <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   bba66:	4628      	mov	r0, r5
   bba68:	f7f9 f801 	bl	b4a6e <__cxa_guard_release>
   bba6c:	4804      	ldr	r0, [pc, #16]	; (bba80 <_Z19__fetch_global_Wirev+0x44>)
   bba6e:	f000 f80b 	bl	bba88 <atexit>
	return wire;
}
   bba72:	4802      	ldr	r0, [pc, #8]	; (bba7c <_Z19__fetch_global_Wirev+0x40>)
   bba74:	b007      	add	sp, #28
   bba76:	bd30      	pop	{r4, r5, pc}
   bba78:	2003e744 	.word	0x2003e744
   bba7c:	2003e748 	.word	0x2003e748
   bba80:	000bba05 	.word	0x000bba05

000bba84 <_ZnajRKSt9nothrow_t>:
   bba84:	f7f8 bfdd 	b.w	b4a42 <_Znaj>

000bba88 <atexit>:
   bba88:	2300      	movs	r3, #0
   bba8a:	4601      	mov	r1, r0
   bba8c:	461a      	mov	r2, r3
   bba8e:	4618      	mov	r0, r3
   bba90:	f000 b8c0 	b.w	bbc14 <__register_exitproc>

000bba94 <calloc>:
   bba94:	4b02      	ldr	r3, [pc, #8]	; (bbaa0 <calloc+0xc>)
   bba96:	460a      	mov	r2, r1
   bba98:	4601      	mov	r1, r0
   bba9a:	6818      	ldr	r0, [r3, #0]
   bba9c:	f000 b818 	b.w	bbad0 <_calloc_r>
   bbaa0:	2003c6b4 	.word	0x2003c6b4

000bbaa4 <memcpy>:
   bbaa4:	440a      	add	r2, r1
   bbaa6:	4291      	cmp	r1, r2
   bbaa8:	f100 33ff 	add.w	r3, r0, #4294967295
   bbaac:	d100      	bne.n	bbab0 <memcpy+0xc>
   bbaae:	4770      	bx	lr
   bbab0:	b510      	push	{r4, lr}
   bbab2:	f811 4b01 	ldrb.w	r4, [r1], #1
   bbab6:	f803 4f01 	strb.w	r4, [r3, #1]!
   bbaba:	4291      	cmp	r1, r2
   bbabc:	d1f9      	bne.n	bbab2 <memcpy+0xe>
   bbabe:	bd10      	pop	{r4, pc}

000bbac0 <memset>:
   bbac0:	4402      	add	r2, r0
   bbac2:	4603      	mov	r3, r0
   bbac4:	4293      	cmp	r3, r2
   bbac6:	d100      	bne.n	bbaca <memset+0xa>
   bbac8:	4770      	bx	lr
   bbaca:	f803 1b01 	strb.w	r1, [r3], #1
   bbace:	e7f9      	b.n	bbac4 <memset+0x4>

000bbad0 <_calloc_r>:
   bbad0:	b513      	push	{r0, r1, r4, lr}
   bbad2:	434a      	muls	r2, r1
   bbad4:	4611      	mov	r1, r2
   bbad6:	9201      	str	r2, [sp, #4]
   bbad8:	f7fe ffa2 	bl	baa20 <_malloc_r>
   bbadc:	4604      	mov	r4, r0
   bbade:	b118      	cbz	r0, bbae8 <_calloc_r+0x18>
   bbae0:	9a01      	ldr	r2, [sp, #4]
   bbae2:	2100      	movs	r1, #0
   bbae4:	f7ff ffec 	bl	bbac0 <memset>
   bbae8:	4620      	mov	r0, r4
   bbaea:	b002      	add	sp, #8
   bbaec:	bd10      	pop	{r4, pc}
	...

000bbaf0 <srand>:
   bbaf0:	b538      	push	{r3, r4, r5, lr}
   bbaf2:	4b10      	ldr	r3, [pc, #64]	; (bbb34 <srand+0x44>)
   bbaf4:	681d      	ldr	r5, [r3, #0]
   bbaf6:	6bab      	ldr	r3, [r5, #56]	; 0x38
   bbaf8:	4604      	mov	r4, r0
   bbafa:	b9b3      	cbnz	r3, bbb2a <srand+0x3a>
   bbafc:	2018      	movs	r0, #24
   bbafe:	f7fe ff67 	bl	ba9d0 <malloc>
   bbb02:	4602      	mov	r2, r0
   bbb04:	63a8      	str	r0, [r5, #56]	; 0x38
   bbb06:	b920      	cbnz	r0, bbb12 <srand+0x22>
   bbb08:	4b0b      	ldr	r3, [pc, #44]	; (bbb38 <srand+0x48>)
   bbb0a:	480c      	ldr	r0, [pc, #48]	; (bbb3c <srand+0x4c>)
   bbb0c:	2142      	movs	r1, #66	; 0x42
   bbb0e:	f7fe ff8f 	bl	baa30 <__assert_func>
   bbb12:	490b      	ldr	r1, [pc, #44]	; (bbb40 <srand+0x50>)
   bbb14:	4b0b      	ldr	r3, [pc, #44]	; (bbb44 <srand+0x54>)
   bbb16:	e9c0 1300 	strd	r1, r3, [r0]
   bbb1a:	4b0b      	ldr	r3, [pc, #44]	; (bbb48 <srand+0x58>)
   bbb1c:	6083      	str	r3, [r0, #8]
   bbb1e:	230b      	movs	r3, #11
   bbb20:	8183      	strh	r3, [r0, #12]
   bbb22:	2100      	movs	r1, #0
   bbb24:	2001      	movs	r0, #1
   bbb26:	e9c2 0104 	strd	r0, r1, [r2, #16]
   bbb2a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   bbb2c:	2200      	movs	r2, #0
   bbb2e:	611c      	str	r4, [r3, #16]
   bbb30:	615a      	str	r2, [r3, #20]
   bbb32:	bd38      	pop	{r3, r4, r5, pc}
   bbb34:	2003c6b4 	.word	0x2003c6b4
   bbb38:	000bdd01 	.word	0x000bdd01
   bbb3c:	000bdd18 	.word	0x000bdd18
   bbb40:	abcd330e 	.word	0xabcd330e
   bbb44:	e66d1234 	.word	0xe66d1234
   bbb48:	0005deec 	.word	0x0005deec

000bbb4c <strcpy>:
   bbb4c:	4603      	mov	r3, r0
   bbb4e:	f811 2b01 	ldrb.w	r2, [r1], #1
   bbb52:	f803 2b01 	strb.w	r2, [r3], #1
   bbb56:	2a00      	cmp	r2, #0
   bbb58:	d1f9      	bne.n	bbb4e <strcpy+0x2>
   bbb5a:	4770      	bx	lr

000bbb5c <strtok>:
   bbb5c:	4b16      	ldr	r3, [pc, #88]	; (bbbb8 <strtok+0x5c>)
   bbb5e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   bbb60:	681e      	ldr	r6, [r3, #0]
   bbb62:	6db4      	ldr	r4, [r6, #88]	; 0x58
   bbb64:	4605      	mov	r5, r0
   bbb66:	b9fc      	cbnz	r4, bbba8 <strtok+0x4c>
   bbb68:	2050      	movs	r0, #80	; 0x50
   bbb6a:	9101      	str	r1, [sp, #4]
   bbb6c:	f7fe ff30 	bl	ba9d0 <malloc>
   bbb70:	9901      	ldr	r1, [sp, #4]
   bbb72:	65b0      	str	r0, [r6, #88]	; 0x58
   bbb74:	4602      	mov	r2, r0
   bbb76:	b920      	cbnz	r0, bbb82 <strtok+0x26>
   bbb78:	4b10      	ldr	r3, [pc, #64]	; (bbbbc <strtok+0x60>)
   bbb7a:	4811      	ldr	r0, [pc, #68]	; (bbbc0 <strtok+0x64>)
   bbb7c:	2157      	movs	r1, #87	; 0x57
   bbb7e:	f7fe ff57 	bl	baa30 <__assert_func>
   bbb82:	e9c0 4400 	strd	r4, r4, [r0]
   bbb86:	e9c0 4402 	strd	r4, r4, [r0, #8]
   bbb8a:	e9c0 4404 	strd	r4, r4, [r0, #16]
   bbb8e:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
   bbb92:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
   bbb96:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
   bbb9a:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
   bbb9e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
   bbba2:	6184      	str	r4, [r0, #24]
   bbba4:	7704      	strb	r4, [r0, #28]
   bbba6:	6244      	str	r4, [r0, #36]	; 0x24
   bbba8:	6db2      	ldr	r2, [r6, #88]	; 0x58
   bbbaa:	2301      	movs	r3, #1
   bbbac:	4628      	mov	r0, r5
   bbbae:	b002      	add	sp, #8
   bbbb0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   bbbb4:	f000 b806 	b.w	bbbc4 <__strtok_r>
   bbbb8:	2003c6b4 	.word	0x2003c6b4
   bbbbc:	000bdd01 	.word	0x000bdd01
   bbbc0:	000bdd95 	.word	0x000bdd95

000bbbc4 <__strtok_r>:
   bbbc4:	b5f0      	push	{r4, r5, r6, r7, lr}
   bbbc6:	b908      	cbnz	r0, bbbcc <__strtok_r+0x8>
   bbbc8:	6810      	ldr	r0, [r2, #0]
   bbbca:	b188      	cbz	r0, bbbf0 <__strtok_r+0x2c>
   bbbcc:	4604      	mov	r4, r0
   bbbce:	4620      	mov	r0, r4
   bbbd0:	f814 5b01 	ldrb.w	r5, [r4], #1
   bbbd4:	460f      	mov	r7, r1
   bbbd6:	f817 6b01 	ldrb.w	r6, [r7], #1
   bbbda:	b91e      	cbnz	r6, bbbe4 <__strtok_r+0x20>
   bbbdc:	b965      	cbnz	r5, bbbf8 <__strtok_r+0x34>
   bbbde:	6015      	str	r5, [r2, #0]
   bbbe0:	4628      	mov	r0, r5
   bbbe2:	e005      	b.n	bbbf0 <__strtok_r+0x2c>
   bbbe4:	42b5      	cmp	r5, r6
   bbbe6:	d1f6      	bne.n	bbbd6 <__strtok_r+0x12>
   bbbe8:	2b00      	cmp	r3, #0
   bbbea:	d1f0      	bne.n	bbbce <__strtok_r+0xa>
   bbbec:	6014      	str	r4, [r2, #0]
   bbbee:	7003      	strb	r3, [r0, #0]
   bbbf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   bbbf2:	461c      	mov	r4, r3
   bbbf4:	e00c      	b.n	bbc10 <__strtok_r+0x4c>
   bbbf6:	b915      	cbnz	r5, bbbfe <__strtok_r+0x3a>
   bbbf8:	f814 3b01 	ldrb.w	r3, [r4], #1
   bbbfc:	460e      	mov	r6, r1
   bbbfe:	f816 5b01 	ldrb.w	r5, [r6], #1
   bbc02:	42ab      	cmp	r3, r5
   bbc04:	d1f7      	bne.n	bbbf6 <__strtok_r+0x32>
   bbc06:	2b00      	cmp	r3, #0
   bbc08:	d0f3      	beq.n	bbbf2 <__strtok_r+0x2e>
   bbc0a:	2300      	movs	r3, #0
   bbc0c:	f804 3c01 	strb.w	r3, [r4, #-1]
   bbc10:	6014      	str	r4, [r2, #0]
   bbc12:	e7ed      	b.n	bbbf0 <__strtok_r+0x2c>

000bbc14 <__register_exitproc>:
   bbc14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bbc18:	f8df 80b8 	ldr.w	r8, [pc, #184]	; bbcd4 <__register_exitproc+0xc0>
   bbc1c:	4606      	mov	r6, r0
   bbc1e:	f8d8 0000 	ldr.w	r0, [r8]
   bbc22:	461f      	mov	r7, r3
   bbc24:	460d      	mov	r5, r1
   bbc26:	4691      	mov	r9, r2
   bbc28:	f000 f856 	bl	bbcd8 <__retarget_lock_acquire_recursive>
   bbc2c:	4b25      	ldr	r3, [pc, #148]	; (bbcc4 <__register_exitproc+0xb0>)
   bbc2e:	681c      	ldr	r4, [r3, #0]
   bbc30:	b934      	cbnz	r4, bbc40 <__register_exitproc+0x2c>
   bbc32:	4c25      	ldr	r4, [pc, #148]	; (bbcc8 <__register_exitproc+0xb4>)
   bbc34:	601c      	str	r4, [r3, #0]
   bbc36:	4b25      	ldr	r3, [pc, #148]	; (bbccc <__register_exitproc+0xb8>)
   bbc38:	b113      	cbz	r3, bbc40 <__register_exitproc+0x2c>
   bbc3a:	681b      	ldr	r3, [r3, #0]
   bbc3c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   bbc40:	6863      	ldr	r3, [r4, #4]
   bbc42:	2b1f      	cmp	r3, #31
   bbc44:	dd07      	ble.n	bbc56 <__register_exitproc+0x42>
   bbc46:	f8d8 0000 	ldr.w	r0, [r8]
   bbc4a:	f000 f847 	bl	bbcdc <__retarget_lock_release_recursive>
   bbc4e:	f04f 30ff 	mov.w	r0, #4294967295
   bbc52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bbc56:	b34e      	cbz	r6, bbcac <__register_exitproc+0x98>
   bbc58:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   bbc5c:	b988      	cbnz	r0, bbc82 <__register_exitproc+0x6e>
   bbc5e:	4b1c      	ldr	r3, [pc, #112]	; (bbcd0 <__register_exitproc+0xbc>)
   bbc60:	b923      	cbnz	r3, bbc6c <__register_exitproc+0x58>
   bbc62:	f8d8 0000 	ldr.w	r0, [r8]
   bbc66:	f000 f838 	bl	bbcda <__retarget_lock_release>
   bbc6a:	e7f0      	b.n	bbc4e <__register_exitproc+0x3a>
   bbc6c:	f44f 7084 	mov.w	r0, #264	; 0x108
   bbc70:	f7fe feae 	bl	ba9d0 <malloc>
   bbc74:	2800      	cmp	r0, #0
   bbc76:	d0f4      	beq.n	bbc62 <__register_exitproc+0x4e>
   bbc78:	2300      	movs	r3, #0
   bbc7a:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   bbc7e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   bbc82:	6863      	ldr	r3, [r4, #4]
   bbc84:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   bbc88:	2201      	movs	r2, #1
   bbc8a:	409a      	lsls	r2, r3
   bbc8c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   bbc90:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   bbc94:	4313      	orrs	r3, r2
   bbc96:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   bbc9a:	2e02      	cmp	r6, #2
   bbc9c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   bbca0:	bf02      	ittt	eq
   bbca2:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   bbca6:	4313      	orreq	r3, r2
   bbca8:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   bbcac:	6863      	ldr	r3, [r4, #4]
   bbcae:	f8d8 0000 	ldr.w	r0, [r8]
   bbcb2:	1c5a      	adds	r2, r3, #1
   bbcb4:	3302      	adds	r3, #2
   bbcb6:	6062      	str	r2, [r4, #4]
   bbcb8:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   bbcbc:	f000 f80e 	bl	bbcdc <__retarget_lock_release_recursive>
   bbcc0:	2000      	movs	r0, #0
   bbcc2:	e7c6      	b.n	bbc52 <__register_exitproc+0x3e>
   bbcc4:	2003e7e8 	.word	0x2003e7e8
   bbcc8:	2003e75c 	.word	0x2003e75c
   bbccc:	00000000 	.word	0x00000000
   bbcd0:	000ba9d1 	.word	0x000ba9d1
   bbcd4:	2003c718 	.word	0x2003c718

000bbcd8 <__retarget_lock_acquire_recursive>:
   bbcd8:	4770      	bx	lr

000bbcda <__retarget_lock_release>:
   bbcda:	4770      	bx	lr

000bbcdc <__retarget_lock_release_recursive>:
   bbcdc:	4770      	bx	lr

000bbcde <link_code_end>:
	...

000bbce0 <dynalib_user>:
   bbce0:	49cd 000b 4a09 000b 4a31 000b 4a35 000b     .I...J..1J..5J..
   bbcf0:	0000 0000 6143 6c6c 6f20 206e 7570 6572     ....Call on pure
   bbd00:	7620 7269 7574 6c61 5400 6d65 3a70 2520      virtual.Temp: %
   bbd10:	0066 6e49 6176 696c 5364 6e65 6f73 4572     f.InvalidSensorE
   bbd20:	7272 726f 5600 6c61 726f 6e20 206f 6176     rror.Valor no va
   bbd30:	696c 6f64 4c00 6465 7245 6f72 4f72 7470     lido.LedErrorOpt
   bbd40:	6f69 006e 6f4e 6174 6920 766e a1c3 696c     ion.Nota inv..li
   bbd50:	6164 5400 7069 206f 6e69 c376 6ca1 6469     da.Tipo inv..lid
   bbd60:	006f 4552 4d00 0049 4146 5300 4c4f 4c00     o.RE.MI.FA.SOL.L
   bbd70:	0041 4953 5f00 0043 4e5f 5f00 0042 6e49     A.SI._C._N._B.In
   bbd80:	6176 696c 2064 6573 736e 726f 2021 3e2d     valid sensor! ->
   bbd90:	5320 6e65 6f73 2072 6572 6570 6974 6f64      Sensor repetido
   bbda0:	6520 206e 6c65 6220 6f6c 7571 0065 494d      en el bloque.MI
   bbdb0:	4146 4552 525f 6165 2864 2029 6166 6c69     FARE_Read() fail
   bbdc0:	6465 203a 5000 4443 415f 7475 6568 746e     ed: .PCD_Authent
   bbdd0:	6369 7461 2865 2029 6166 6c69 6465 203a     icate() failed: 
   bbde0:	5400 6761 6e49 6f66 203a 7325 2000 2020     .TagInfo: %s.   
   bbdf0:	2020 4c20 7a75 7620 7265 6564 0020 2020        Luz verde .  
   bbe00:	2020 2020 754c 207a 6f52 616a 0020 2020         Luz Roja .  
   bbe10:	2020 754c 207a 6d41 7261 6c69 616c 0020       Luz Amarilla .
   bbe20:	2020 2020 4c20 7a75 4d20 726f 6461 2061          Luz Morada 
   bbe30:	2000 2020 2020 4c20 7a75 4120 757a 206c     .      Luz Azul 
   bbe40:	2000 2020 4c20 7a75 4e20 7261 6e61 616a     .    Luz Naranja
   bbe50:	0020 2020 2020 754c 207a 6170 7072 6461      .    Luz parpad
   bbe60:	6165 0020 2020 2020 754c 207a 7241 6f63     ea .    Luz Arco
   bbe70:	7269 7369 0020 2020 2020 754c 207a 7061     iris .    Luz ap
   bbe80:	6761 6461 2061 5a00 6d75 6162 6f64 2072     agada .Zumbador 
   bbe90:	6e69 6574 6d72 7469 6e65 6574 0020 2020     intermitente .  
   bbea0:	2020 2020 755a 626d 6461 726f 0020 2020         Zumbador .  
   bbeb0:	2020 2020 754d 6863 2061 756c 207a 2000         Mucha luz . 
   bbec0:	2020 2020 5020 636f 2061 756c 207a 2000          Poca luz . 
   bbed0:	2020 2020 754d 6863 206f 7572 6469 206f         Mucho ruido 
   bbee0:	2000 2020 2020 6f50 6f63 7220 6975 6f64     .     Poco ruido
   bbef0:	0020 2020 4220 746f 6e6f 6120 7463 7669      .   Boton activ
   bbf00:	6461 206f 2000 4220 746f 6e6f 6420 7365     ado .  Boton des
   bbf10:	6361 6974 6176 6f64 0020 2020 2020 4720     activado .     G
   bbf20:	7269 206f 6570 7571 c365 6fb1 0020 2020     iro peque..o .  
   bbf30:	2020 6947 6f72 6720 6172 646e 2065 2000       Giro grande . 
   bbf40:	2020 2020 4320 6c61 726f 0020 2020 2020          Calor .    
   bbf50:	2020 7246 6f69 0020 2020 4d20 6375 6168       Frio .   Mucha
   bbf60:	6420 7369 6174 636e 6169 0020 2020 5020      distancia .   P
   bbf70:	636f 2061 6964 7473 6e61 6963 2061 2000     oca distancia . 
   bbf80:	2020 4820 7961 6120 7567 2061 2000 6f4e        Hay agua . No
   bbf90:	6820 7961 6120 7567 2061 4200 746f 6e6f      hay agua .Boton
   bbfa0:	6420 6175 206c 6f6e 6120 7463 7669 6461      dual no activad
   bbfb0:	006f 6f42 6f74 206e 7564 6c61 6420 7265     o.Boton dual der
   bbfc0:	6365 6f68 4200 746f 6e6f 6420 6175 206c     echo.Boton dual 
   bbfd0:	7a69 7571 6569 6472 006f 6f42 6f74 206e     izquierdo.Boton 
   bbfe0:	7564 6c61 6420 626f 656c 2000 2020 6741     dual doble.   Ag
   bbff0:	6175 7420 7275 6962 2061 2000 2020 6556     ua turbia .   Ve
   bc000:	746e 6c69 6461 726f 0020 2020 2020 2020     ntilador .      
   bc010:	2020 4920 0046 2020 2020 2020 2020 4120        IF.         A
   bc020:	444e 2000 2020 2020 2020 2020 524f 2000     ND.         OR. 
   bc030:	2020 2020 2020 5420 4548 004e 2020 2020            THEN.    
   bc040:	2020 2020 4c45 4553 4300 6e6f 6365 6174         ELSE.Conecta
   bc050:	2072 6c61 7020 6575 7472 206f 3041 000a     r al puerto A0..
   bc060:	6f43 656e 7463 7261 6120 206c 7570 7265     Conectar al puer
   bc070:	6f74 4120 0a32 4300 6e6f 6365 6174 2072     to A2..Conectar 
   bc080:	6c61 7020 6575 7472 206f 3441 000a 6f43     al puerto A4..Co
   bc090:	656e 7463 7261 6120 206c 7570 7265 6f74     nectar al puerto
   bc0a0:	4420 0a32 4300 6e6f 6365 6174 2072 6c61      D2..Conectar al
   bc0b0:	7020 6575 7472 206f 3444 000a 6f43 656e      puerto D4..Cone
   bc0c0:	7463 7261 6120 206c 7570 7265 6f74 4420     ctar al puerto D
   bc0d0:	0a36 4500 7272 726f 203a 6f4e 6820 7961     6..Error: No hay
   bc0e0:	6d20 7361 7020 6575 7472 736f 6420 7369      mas puertos dis
   bc0f0:	6f70 696e 6c62 7365 0a20 4500 5045 4f52     ponibles ..EEPRO
   bc100:	204d 6d65 7470 0079 002d 2330 2339 0031     M empty.-.0#9#1.
   bc110:	2330 3031 3123 3000 3123 2331 0031 2330     0#10#1.0#11#1.0#
   bc120:	2331 2331 0030 2330 2331 2331 0031 2330     1#1#0.0#1#1#1.0#
   bc130:	2330 2331 0030 2330 2330 2331 0031 2330     0#1#0.0#0#1#1.0#
   bc140:	2330 2331 0032 2330 2330 2331 0033 2330     0#1#2.0#0#1#3.0#
   bc150:	2330 2331 0034 2330 2330 2331 0035 2331     0#1#4.0#0#1#5.1#
   bc160:	2330 2331 2337 0030 2331 2330 2331 2337     0#1#7#0.1#0#1#7#
   bc170:	0031 2331 2330 2330 2332 0030 2331 2330     1.1#0#0#2#0.1#0#
   bc180:	2330 2332 0031 2331 2330 2330 2333 0030     0#2#1.1#0#0#3#0.
   bc190:	2331 2330 2330 2333 0031 2331 2330 2331     1#0#0#3#1.1#0#1#
   bc1a0:	2334 0030 2331 2330 2331 2334 0031 2331     4#0.1#0#1#4#1.1#
   bc1b0:	2330 2331 2335 0030 2331 2330 2331 2335     0#1#5#0.1#0#1#5#
   bc1c0:	0031 2331 2330 2331 2336 0030 2331 2330     1.1#0#1#6#0.1#0#
   bc1d0:	2331 2336 0031 2331 2330 2331 2336 0032     1#6#1.1#0#1#6#2.
   bc1e0:	2331 2331 2331 2331 0030 2331 2331 2331     1#1#1#1#0.1#1#1#
   bc1f0:	2331 0031 2331 2331 2331 2330 0030 2331     1#1.1#1#1#0#0.1#
   bc200:	2331 2331 2330 0031 2331 2331 2331 2330     1#1#0#1.1#1#1#0#
   bc210:	0032 2331 2331 2331 2330 0033 2331 2331     2.1#1#1#0#3.1#1#
   bc220:	2331 2330 0034 2331 2331 2331 2330 0035     1#0#4.1#1#1#0#5.
   bc230:	2331 2331 2331 2330 0036 2331 2331 2331     1#1#1#0#6.1#1#1#
   bc240:	2330 0037 2331 2333 0030 2331 2333 0031     0#7.1#3#0.1#3#1.
   bc250:	2332 2330 2330 0030 2332 2330 2330 0031     2#0#0#0.2#0#0#1.
   bc260:	2332 2330 2330 0032 2332 2330 2331 0030     2#0#0#2.2#0#1#0.
   bc270:	2332 2330 2331 0031 2332 2330 2331 0032     2#0#1#1.2#0#1#2.
   bc280:	2332 2330 2332 0030 2332 2330 2332 0031     2#0#2#0.2#0#2#1.
   bc290:	2332 2330 2332 0032 2332 2330 2333 0030     2#0#2#2.2#0#3#0.
   bc2a0:	2332 2330 2333 0031 2332 2330 2333 0032     2#0#3#1.2#0#3#2.
   bc2b0:	2332 2330 2334 0030 2332 2330 2334 0031     2#0#4#0.2#0#4#1.
   bc2c0:	2332 2330 2334 0032 2332 2330 2335 0030     2#0#4#2.2#0#5#0.
   bc2d0:	2332 2330 2335 0031 2332 2330 2335 0032     2#0#5#1.2#0#5#2.
   bc2e0:	2332 2330 2336 0030 2332 2330 2336 0031     2#0#6#0.2#0#6#1.
   bc2f0:	2332 2330 2336 0032 2332 2330 2337 0030     2#0#6#2.2#0#7#0.
   bc300:	2332 2330 2337 0031 2332 2330 2337 0032     2#0#7#1.2#0#7#2.
   bc310:	2332 2331 0030 2332 2332 0030 2332 2332     2#1#0.2#2#0.2#2#
   bc320:	0031 2332 2332 0032 2332 2332 0033 2332     1.2#2#2.2#2#3.2#
   bc330:	2332 0034 2332 2332 0035 2332 2332 0036     2#4.2#2#5.2#2#6.
   bc340:	2332 2332 0037 2332 2332 0038 2336 2330     2#2#7.2#2#8.6#0#
   bc350:	0030 2336 2330 0031 2336 2330 0032 2336     0.6#0#1.6#0#2.6#
   bc360:	2331 0030 2336 2332 0030 2336 2332 0031     1#0.6#2#0.6#2#1.
   bc370:	2336 2332 0032 2333 2330 2330 3231 3023     6#2#2.3#0#0#12#0
   bc380:	3300 3023 3123 3623 3023 3100 3023 3123     .3#0#1#6#0.1#0#1
   bc390:	3923 3323 3100 3023 3023 3123 2332 0031     #9#3.1#0#0#12#1.
   bc3a0:	2331 2331 2330 3331 3123 4d00 444f 204f     1#1#0#13#1.MODO 
   bc3b0:	4142 4953 4f43 4d00 444f 204f 5641 4e41     BASICO.MODO AVAN
   bc3c0:	415a 4f44 4d00 444f 204f 554d 4953 4143     ZADO.MODO MUSICA
   bc3d0:	4d00 444f 204f 5845 4c50 524f 0041 6942     .MODO EXPLORA.Bi
   bc3e0:	6d74 7061 6e20 746f 6120 6176 6c69 6261     tmap not availab
   bc3f0:	656c 002e 2020 2020 4320 4e4f 4345 4154     le..     CONECTA
   bc400:	2052 3a41 5900 2041 4f43 454e 5443 4441     R A:.YA CONECTAD
   bc410:	004f 6154 6a72 7465 2061 6e69 6176 696c     O.Tarjeta invali
   bc420:	6164 7020 7261 2061 7365 6574 6d20 646f     da para este mod
   bc430:	006f 6f42 7272 6461 206f 6e69 6176 696c     o.Borrado invali
   bc440:	6f64 7020 7261 2061 7365 6574 6d20 646f     do para este mod
   bc450:	006f 724f 6564 206e 6564 7420 7261 656a     o.Orden de tarje
   bc460:	6174 2073 6e69 6176 696c 6f64 5000 6575     tas invalido.Pue
   bc470:	7472 206f 6f6e 6420 7369 6f70 696e 6c62     rto no disponibl
   bc480:	0065 6c50 7961 6e20 206f 6964 7073 6e6f     e.Play no dispon
   bc490:	6269 656c 5300 6e65 6f73 2072 6f6e 6420     ible.Sensor no d
   bc4a0:	7369 6f70 696e 6c62 2065 6528 206e 7375     isponible (en us
   bc4b0:	296f 4100 7463 6175 6f64 2072 6f6e 6420     o).Actuador no d
   bc4c0:	7369 6f70 696e 6c62 2065 6528 206e 7375     isponible (en us
   bc4d0:	296f 4200 726f 6172 6f64 6420 2065 6c62     o).Borrado de bl
   bc4e0:	716f 6575 7220 6165 696c 617a 6f64 4e00     oque realizado.N
   bc4f0:	6461 2061 7571 2065 6f62 7272 7261 4200     ada que borrar.B
   bc500:	726f 6172 6f64 6420 2065 6f6c 706f 7220     orrado de loop r
   bc510:	6165 696c 617a 6f64 4e00 6461 2061 7571     ealizado.Nada qu
   bc520:	2065 6f62 7272 7261 002e 6425 2d20 2520     e borrar..%d - %
   bc530:	0064 6946 616e 696c 617a 6520 206c 7562     d.Finaliza el bu
   bc540:	6c63 2065 6e61 6574 2073 6564 7220 7065     cle antes de rep
   bc550:	6f72 7564 6963 0072 6f4d 6f64 4220 5341     roducir.Modo BAS
   bc560:	4349 204f 6564 6574 7463 6461 006f 6e49     ICO detectado.In
   bc570:	6369 6169 646e 206f 6f6d 6f64 4220 5341     iciando modo BAS
   bc580:	4349 2e4f 2e2e 4d00 646f 206f 5641 4e41     ICO....Modo AVAN
   bc590:	415a 4f44 6420 7465 6365 6174 6f64 4900     ZADO detectado.I
   bc5a0:	696e 6963 6e61 6f64 6d20 646f 206f 5641     niciando modo AV
   bc5b0:	4e41 415a 4f44 2e2e 002e 6f4d 6f64 4d20     ANZADO....Modo M
   bc5c0:	5355 4349 2041 6564 6574 7463 6461 006f     USICA detectado.
   bc5d0:	6e49 6369 6169 646e 206f 6f6d 6f64 4d20     Iniciando modo M
   bc5e0:	5355 4349 2e41 2e2e 4d00 646f 206f 5845     USICA....Modo EX
   bc5f0:	4c50 524f 2041 6564 6574 7463 6461 006f     PLORA detectado.
   bc600:	6e49 6369 6169 646e 206f 6f6d 6f64 4520     Iniciando modo E
   bc610:	5058 4f4c 4152 2e2e 002e 6f42 7272 6461     XPLORA....Borrad
   bc620:	206f 6564 206c 6c75 6974 6f6d 7220 6165     o del ultimo rea
   bc630:	696c 617a 6f64 5a00 6d75 6162 6f64 3a72     lizado.Zumbador:
   bc640:	5400 6761 4420 7465 6365 6174 6164 2d20     .Tag Detectada -
   bc650:	3e2d 0020 6f42 7272 6461 206f 6f63 706d     -> .Borrado comp
   bc660:	656c 6f74 7220 6165 696c 617a 6f64 4200     leto realizado.B
   bc670:	726f 6172 6f64 6e20 206f 6570 6d72 7469     orrado no permit
   bc680:	6469 206f 6170 6172 6520 7473 2065 6f6d     ido para este mo
   bc690:	6f64 5300 6e65 6f73 2072 6564 6574 7463     do.Sensor detect
   bc6a0:	6461 006f 6341 7574 6461 726f 6420 7465     ado.Actuador det
   bc6b0:	6365 6174 6f64 4500 656a 7563 6174 646e     ectado.Ejecutand
   bc6c0:	206f 6174 2067 2d2d 203e 5300 2065 7365     o tag --> .Se es
   bc6d0:	6570 6172 6162 4920 2046 6174 0067 6544     peraba IF tag.De
   bc6e0:	7073 6575 2073 6564 7520 206e 6573 736e     spues de un sens
   bc6f0:	726f 7320 2065 7365 6570 6172 7520 616e     or se espera una
   bc700:	6320 6e6f 6963 6e6f 203a 4e41 2044 2075      concion: AND u 
   bc710:	524f 5300 6e65 6f73 2072 6e69 6176 696c     OR.Sensor invali
   bc720:	6f64 5300 2065 7365 6570 6172 6162 5420     do.Se esperaba T
   bc730:	4548 204e 6174 0067 4649 6420 7465 6365     HEN tag.IF detec
   bc740:	6174 6f64 4e00 6d75 7265 206f 6564 6220     tado.Numero de b
   bc750:	6f6c 7571 7365 3e20 3220 7c20 207c 6553     loques > 2 || Se
   bc760:	6e20 6365 7365 7469 2061 6c61 6d20 6e65      necesita al men
   bc770:	736f 7520 206e 6361 7574 6461 726f 7020     os un actuador p
   bc780:	7261 2061 6574 6d72 6e69 7261 6520 206c     ara terminar el 
   bc790:	6c62 716f 6575 4100 444e 4f2f 2052 6564     bloque.AND/OR de
   bc7a0:	6574 7463 6461 006f 6e55 2061 6f63 636e     tectado.Una conc
   bc7b0:	6369 6f69 206e 6f73 6f6c 7020 6575 6564     icion solo puede
   bc7c0:	6920 2072 6573 7567 6469 2061 6564 7520      ir seguida de u
   bc7d0:	206e 6573 736e 726f 002e 4854 4e45 6420     n sensor..THEN d
   bc7e0:	7465 6365 6174 6f64 4e00 6d75 7265 206f     etectado.Numero 
   bc7f0:	6564 7320 6e65 6f73 6572 2073 6e69 7566     de sensores infu
   bc800:	6963 6e65 6574 0073 4c45 4553 6420 7465     cientes.ELSE det
   bc810:	6365 6174 6f64 4900 746e 6f72 7564 6563     ectado.Introduce
   bc820:	7520 206e 6341 7574 6461 726f 7020 7261      un Actuador par
   bc830:	2061 616c 6520 6176 756c 6361 c369 6eb3     a la evaluaci..n
   bc840:	6120 5420 5552 0045 6946 206e 6154 0067      a TRUE.Fin Tag.
   bc850:	2023 6c42 716f 6575 7c20 2320 5320 6e65     # Bloque | # Sen
   bc860:	6f73 6572 2073 207c 2023 6f43 646e 6369     sores | # Condic
   bc870:	6f69 656e 2073 207c 2023 6341 7574 6461     iones | # Actuad
   bc880:	726f 7365 2000 2020 2520 2064 7c09 2009     ores.    %d .|. 
   bc890:	6425 0920 097c 2520 2064 7c09 2009 6425     %d .|. %d .|. %d
   bc8a0:	0920 097c 2520 0064 6154 6a72 7465 2061      .|. %d.Tarjeta 
   bc8b0:	6e69 c376 6ca1 6469 2061 6170 6172 6520     inv..lida para e
   bc8c0:	7473 2065 6f6d 6f64 4500 656a 7563 6174     ste modo.Ejecuta
   bc8d0:	646e 006f 4c42 514f 4555 3120 203a 5254     ndo.BLOQUE 1: TR
   bc8e0:	4555 4200 4f4c 5551 2045 3a31 4620 4c41     UE.BLOQUE 1: FAL
   bc8f0:	4553 2000 6120 6163 6162 6220 6f6c 7571     SE.  acaba bloqu
   bc900:	2065 0031 4c42 514f 4555 3220 203a 5254     e 1.BLOQUE 2: TR
   bc910:	4555 4200 4f4c 5551 2045 3a32 4620 4c41     UE.BLOQUE 2: FAL
   bc920:	4553 4200 4f4c 5551 2045 3a32 2020 6e20     SE.BLOQUE 2:   n
   bc930:	206f 6966 616e 696c 617a 6f64 4500 656a     o finalizado.Eje
   bc940:	7563 6174 646e 2e6f 2e2e 4200 726f 6172     cutando....Borra
   bc950:	6164 7520 746c 6d69 2061 656c 7463 7275     da ultima lectur
   bc960:	0061 6f4c 706f 2d20 0020 6150 6172 6320     a.Loop - .Para c
   bc970:	6d6f 6e65 617a 2072 6e75 6c20 6f6f 2070     omenzar un loop 
   bc980:	6168 2079 7571 2065 6966 616e 696c 617a     hay que finaliza
   bc990:	2072 6c65 6120 746e 7265 6f69 2e72 4500     r el anterior..E
   bc9a0:	444e 4c20 6f6f 0070 6572 2070 202d 4c00     ND Loop.rep - .L
   bc9b0:	6f6f 2070 6973 206e 6f63 656d 7a6e 7261     oop sin comenzar
   bc9c0:	6f20 7320 6e69 6320 6e6f 6574 696e 6f64      o sin contenido
   bc9d0:	2000 2020 2020 2020 2020 754c 3a7a 2000     .         Luz:. 
   bc9e0:	5220 6975 6f64 2820 6564 6963 6562 696c      Ruido (decibeli
   bc9f0:	736f 3a29 2000 2020 6e41 7567 6f6c 2820     os):.   Angulo (
   bca00:	7267 6461 736f 3a29 2000 5420 6d65 6570     grados):.  Tempe
   bca10:	6172 7574 6172 2820 7267 6461 736f 3a29     ratura (grados):
   bca20:	2000 2020 6944 7473 6e61 6963 2061 6328     .   Distancia (c
   bca30:	296d 003a 2020 2020 2020 7554 6272 6469     m):.      Turbid
   bca40:	7a65 003a                                   ez:.

000bca44 <CSWTCH.442>:
   bca44:	ff13 ff11 000f                              ......

000bca4a <CSWTCH.454>:
   bca4a:	00fa 01f4 03e8                              ......

000bca50 <_ZL14sucreLogo_data>:
   bca50:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bca60:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bca70:	ffff ffff ffff fff8 ffff ffff ffff ffff     ................
   bca80:	ffff ffff ffff 7fc0 ffff ffff ffff ffff     ................
   bca90:	ffff ffff feff 7f00 ffff ffff ffff ffff     ................
   bcaa0:	ffff ffff feff 7f00 ffff ffff ffff ffff     ................
   bcab0:	ffff ffff feff 3f00 ffff ffff ffff ffff     .......?........
   bcac0:	ffff ffff feff 3f00 ffff ffff ffff ffff     .......?........
   bcad0:	ffff ffff 3ffc 3f00 ffff ffff ffff ffff     .....?.?........
   bcae0:	ffff ffff 0ffc 1f00 ffff ffff ffff ffff     ................
   bcaf0:	ffff ffff 07fc 1f00 ffff ffff ffff ffff     ................
   bcb00:	ffff ffff 07f8 3f00 ffff ffff ffff ffff     .......?........
   bcb10:	ffff ffff 07f8 ff83 ffff ffff ffff ffff     ................
   bcb20:	ffff ffff 0ff0 ffcf ffff ffff ffff ffff     ................
   bcb30:	ffff ffff 0ff8 ffff ffff ffff ffff ffff     ................
   bcb40:	ffff ffff 0ffe ffff ffff ffff ffff ffff     ................
   bcb50:	ffff ffff 9fff ffff ffff ffff ffff ffff     ................
   bcb60:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bcb70:	ffff ffff fcff ff1f ffff ffff ffff ffff     ................
   bcb80:	ffff 7fc0 fcff ff0d 3fe0 03ef c0ff ff7f     .........?......
   bcb90:	feff 3f00 f8f3 ff09 0780 01e4 00ff ff1f     ...?............
   bcba0:	fcff 1f3f f8f3 ff09 c31f f8e0 3ffc ff87     ..?..........?..
   bcbb0:	f8ff ffff f8f3 fe09 f13f fce1 fff8 ffe3     ........?.......
   bcbc0:	f1ff ffff f8f3 fc19 f87f ffe3 fff1 ffe3     ................
   bcbd0:	e3ff ffff fff3 f819 fcff ffe7 ffe3 ffc7     ................
   bcbe0:	e7ff ffff fff3 f1f9 feff ffe7 ffe7 ff8f     ................
   bcbf0:	c7ff ffff e7f3 f3f9 ffff ffe7 ffe7 ff1f     ................
   bcc00:	cfff ffff c3f3 f3f9 ffff ffe7 fec7 ff3f     ..............?.
   bcc10:	cfff ffff 81f3 f3f9 ffff ffe7 fccf ff7f     ................
   bcc20:	c0ff 0000 00f3 e3f9 ffff ffe7 f8cf ffff     ................
   bcc30:	c0ff 0000 0072 e379 ffff ffe7 f1cf ffff     ....r.y.........
   bcc40:	feff 0000 0072 e379 ffff ffe7 e3cf ffff     ....r.y.........
   bcc50:	ffff fcff 00f3 f3f9 ffff ffe7 c7c7 ffff     ................
   bcc60:	ffff fcff 81f3 f3f9 ffff ffe7 8fc7 ffff     ................
   bcc70:	ffff f8ff c3f3 f1f9 ffff ffe7 1fe7 ffff     ................
   bcc80:	ffff f9ff e7f1 f9f1 fcff ffe7 3fe2 fffb     .............?..
   bcc90:	ffff f1ff fff8 f8f1 fcff ffe7 7ff0 fff3     ................
   bcca0:	ffff e3ff fffc fce1 f87f ffe7 fff8 ffe3     ................
   bccb0:	feff c77f 3ffc fe81 e13f ffe7 7ffc ffc7     .....?..?.......
   bccc0:	feff 0f1e 0efe ff09 8307 ffe7 0efe ff0f     ................
   bccd0:	ffff 1f00 80ff ff39 0fc0 ffe7 00ff ff1f     ......9.........
   bcce0:	ffff ffe0 e0ff ffff 7ff0 ffff e0ff ffff     ................
   bccf0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bcd00:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bcd10:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bcd20:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bcd30:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bcd40:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bcd50:	ffff ffff ffff ffff cfff ffff ffff ffff     ................
   bcd60:	ffff ffff ffff ffff 9fff ffff ffff ffff     ................
   bcd70:	ffff ffff ffff ffff 3fff feff 7cf6 ffff     .........?...|..
   bcd80:	ffff ffff ffff ffff 7cff feff fce7 ffe7     .........|......
   bcd90:	ffff ffff ffff ffff 78ff fe7c fccf ffc7     .........x|.....
   bcda0:	ffff ffff ffff ffff 39ff fe31 e1df ff9f     .........91.....
   bcdb0:	ffff ffff ffff ffff 03fe fe93 413e ff8f     ............>A..
   bcdc0:	ffff ffff ffff ffff 33ff feb7 9c1e ffe3     .........3......
   bcdd0:	ffff ffff ffff ffff 73ff fe37 1dc6 ffbb     .........s7.....
   bcde0:	ffff ffff ffff ffff 38ff fe27 9df2 ff39     .........8'...9.
   bcdf0:	ffff ffff ffff ffff 3cff fe67 417a ff93     .........<g.zA..
   bce00:	ffff ffff ffff ffff 3fff ffe7 61fe ff87     .........?...a..
   bce10:	ffff ffff ffff ffff ffff ffff fdff ffff     ................
   bce20:	ffff ffff ffff ffff ffff ffff fdff ffff     ................
   bce30:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bce40:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bce50:	6564 6166 6c75 2074 4d00 4253 4c00 4253     default .MSB.LSB
   bce60:	3c00 5053 5349 7465 6974 676e 2073 6564     .<SPISettings de
   bce70:	6166 6c75 3e74 3c00 5053 5349 7465 6974     fault>.<SPISetti
   bce80:	676e 2073 7325 7525 2520 2073 4f4d 4544     ngs %s%u %s MODE
   bce90:	7525 003e                                   %u>.

000bce94 <_ZL4font>:
   bce94:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
   bcea4:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
   bceb4:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
   bcec4:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
   bced4:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
   bcee4:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
   bcef4:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
   bcf04:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
   bcf14:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
   bcf24:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
   bcf34:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
   bcf44:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
   bcf54:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
   bcf64:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
   bcf74:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
   bcf84:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
   bcf94:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
   bcfa4:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
   bcfb4:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
   bcfc4:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
   bcfd4:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
   bcfe4:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
   bcff4:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
   bd004:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
   bd014:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
   bd024:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
   bd034:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
   bd044:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
   bd054:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
   bd064:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
   bd074:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
   bd084:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
   bd094:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
   bd0a4:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
   bd0b4:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
   bd0c4:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
   bd0d4:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
   bd0e4:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
   bd0f4:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
   bd104:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
   bd114:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
   bd124:	5555 4179 5422 7854 2142 5455 4078 5420     UUyA"TTxB!UTx@ T
   bd134:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
   bd144:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
   bd154:	0042 4501 407c 127d 1211 f07d 2528 f028     B..E|@}...}.(%(.
   bd164:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
   bd174:	4949 3249 443a 4444 323a 484a 3048 413a     III2:DDD:2JHH0:A
   bd184:	2141 3a7a 4042 7820 9d00 a0a0 3d7d 4242     A!z:B@ x....}=BB
   bd194:	3d42 403d 4040 3c3d ff24 2424 7e48 4349     B==@@@=<$.$$H~IC
   bd1a4:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
   bd1b4:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
   bd1c4:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
   bd1d4:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
   bd1e4:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
   bd1f4:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
   bd204:	0055 0055 aa55 aa55 aa55 55ff 55ff 00ff     U.U.U.U.U..U.U..
   bd214:	0000 00ff 1010 ff10 1400 1414 00ff 1010     ................
   bd224:	00ff 10ff f010 f010 1414 fc14 1400 f714     ................
   bd234:	ff00 0000 00ff 14ff f414 fc04 1414 1017     ................
   bd244:	101f 1f10 1f10 1414 1f14 1000 1010 00f0     ................
   bd254:	0000 1f00 1010 1010 101f 1010 f010 0010     ................
   bd264:	0000 10ff 1010 1010 1010 1010 10ff 0000     ................
   bd274:	ff00 0014 ff00 ff00 0000 101f 0017 fc00     ................
   bd284:	f404 1414 1017 1417 f414 f404 0000 00ff     ................
   bd294:	14f7 1414 1414 1414 00f7 14f7 1414 1417     ................
   bd2a4:	1010 101f 141f 1414 14f4 1010 10f0 00f0     ................
   bd2b4:	1f00 1f10 0000 1f00 0014 0000 14fc 0000     ................
   bd2c4:	10f0 10f0 ff10 ff10 1414 ff14 1014 1010     ................
   bd2d4:	001f 0000 f000 ff10 ffff ffff f0f0 f0f0     ................
   bd2e4:	fff0 ffff 0000 0000 ff00 0fff 0f0f 0f0f     ................
   bd2f4:	4438 3844 fc44 4a4a 344a 027e 0602 0206     8DD8D.JJJ4~.....
   bd304:	027e 027e 5563 4149 3863 4444 043c 7e40     ~.~.cUIAc8DD<.@~
   bd314:	1e20 0620 7e02 0202 a599 a5e7 1c99 492a      . ..~........*I
   bd324:	1c2a 724c 7201 304c 4d4a 304d 4830 4878     *.Lr.rL0JMM00HxH
   bd334:	bc30 5a62 3d46 493e 4949 7e00 0101 7e01     0.bZF=>III.~...~
   bd344:	2a2a 2a2a 442a 5f44 4444 5140 444a 4040     *****DD_DD@QJD@@
   bd354:	4a44 4051 0000 01ff e003 ff80 0000 0808     DJQ@............
   bd364:	6b6b 3608 3612 3624 0f06 0f09 0006 1800     kk.6.6$6........
   bd374:	0018 0000 1010 3000 ff40 0101 1f00 0101     .......0@.......
   bd384:	001e 1d19 1217 3c00 3c3c 003c 0000 0000     .......<<<<.....

000bd394 <_ZTV12Adafruit_GFX>:
	...
   bd3a4:	8ef1 000b aef5 000b 4a4d 000b 8593 000b     ........MJ......
   bd3b4:	8595 000b 85c7 000b 85a3 000b 85b5 000b     ................
   bd3c4:	84d5 000b 8593 000b 87bf 000b 87bd 000b     ................
   bd3d4:	85df 000b 861d 000b 8657 000b 869d 000b     ........W.......
   bd3e4:	86b9 000b 873d 000b 6e55 6e6b 776f 206e     ....=...Unknown 
   bd3f4:	7265 6f72 0072 7553 6363 7365 2e73 4500     error.Success..E
   bd404:	7272 726f 6920 206e 6f63 6d6d 6e75 6369     rror in communic
   bd414:	7461 6f69 2e6e 4300 6c6f 696c 7373 6f69     ation..Collissio
   bd424:	206e 6564 6574 7463 6465 002e 6954 656d     n detected..Time
   bd434:	756f 2074 6e69 6320 6d6f 756d 696e 6163     out in communica
   bd444:	6974 6e6f 002e 2041 7562 6666 7265 6920     tion..A buffer i
   bd454:	2073 6f6e 2074 6962 2067 6e65 756f 6867     s not big enough
   bd464:	002e 6e49 6574 6e72 6c61 6520 7272 726f     ..Internal error
   bd474:	6920 206e 6874 2065 6f63 6564 202e 6853      in the code. Sh
   bd484:	756f 646c 6e20 746f 6820 7061 6570 2e6e     ould not happen.
   bd494:	4900 766e 6c61 6469 6120 6772 6d75 6e65     .Invalid argumen
   bd4a4:	2e74 5400 6568 4320 4352 415f 6420 656f     t..The CRC_A doe
   bd4b4:	2073 6f6e 2074 616d 6374 2e68 4100 4d20     s not match..A M
   bd4c4:	4649 5241 2045 4950 4343 7220 7365 6f70     IFARE PICC respo
   bd4d4:	646e 6465 7720 7469 2068 414e 2e4b 0000     nded with NAK...

000bd4e4 <CSWTCH.84>:
   bd4e4:	d3fa 000b d403 000b d41b 000b d430 000b     ............0...
   bd4f4:	d44a 000b d466 000b d495 000b d4a7 000b     J...f...........
   bd504:	d4c1 000b                                   ....

000bd508 <_ZTVN8particle11SPISettingsE>:
	...
   bd510:	8481 000b 8471 000b 8473 000b               ....q...s...

000bd51c <_ZL12splash2_data>:
   bd51c:	0000 0060 0000 0000 0000 0000 0000 0000     ..`.............
   bd52c:	e000 0000 0000 0000 0000 0000 0000 0100     ................
   bd53c:	00e0 0000 0000 0000 0000 0000 0000 f001     ................
	...
   bd558:	0300 00f0 0000 0000 0000 0000 0000 0000     ................
   bd568:	f007 0000 0000 0000 0000 0000 0000 0700     ................
   bd578:	00f8 0000 0000 0000 0000 0000 0000 f80f     ................
   bd588:	0000 0300 00c0 007e 0100 00e0 0f7f 00f8     ......~.........
   bd598:	0000 c003 fe00 0000 e001 ff00 f8ef 0000     ................
   bd5a8:	0300 00c0 00fe 0100 00e0 ffff 00f8 0000     ................
   bd5b8:	c003 f000 0000 0f00 7f00 7ffe 00c0 0300     ................
   bd5c8:	00c0 00f0 0000 000f fe3f f87f f13f cffb     ........?...?...
   bd5d8:	fefc bcf3 ef3d 1fe0 7ffe 7fff fffb fedf     ....=...........
   bd5e8:	fffe 3dbc e0ef c61f ffff fb7f dfff fefe     ...=............
   bd5f8:	bcff ef3d 0fe0 c7e3 78fe c37b 1ede fff0     ..=......x{.....
   bd608:	3dbc 00ef ff07 fc87 7b78 dec3 f01e 3cf8     .=......x{.....<
   bd618:	ef3d 0100 ffff 00f0 c37b 1ec0 f0f0 3d3c     =.......{.....<=
   bd628:	00ef f301 e07f fb3f cfc3 f0fe 3cf0 ef3d     ......?......<=.
   bd638:	0300 3fe3 7f80 c3fb fedf f0f0 3d3c 00ef     ...?........<=..
   bd648:	e707 003c 7b78 dec3 f01e 3cf0 ef3d 0700     ..<.x{.....<=...
   bd658:	beff 7800 c37b 1ede f0f0 3d3c 00ef ff07     ...x{.....<=....
   bd668:	00fe 7b78 dec3 f01e 3cf0 ef3d 0f00 feff     ..x{.....<=.....
   bd678:	7f00 fffb fedf f0f0 fd3f e0ef ff0f 00ff     ........?.......
   bd688:	fb7f dfff f0fe 3ff0 effd 0fe0 fff9 3e00     .......?.......>
   bd698:	f979 9ecf f0f0 3d1f e0e7 f11f 00ff 0000     y......=........
	...
   bd6b0:	1f00 ff80 7f00 ffff ffff ffff ffff e0ff     ................
   bd6c0:	001c 007f ff7f ffff b4fe 886d 188d 00e0     ..........m.....
   bd6d0:	1f00 7f00 ffff feff ad95 b57d e077 0000     ..........}.w...
   bd6e0:	000f ff7f ffff a5fe 9dad 198d 00e0 0600     ................
   bd6f0:	7f00 ffff feff adb5 b5ed e07e               ..........~.

000bd6fc <_ZL14sucreLogo_data>:
   bd6fc:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bd70c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bd71c:	ffff ffff ffff fff8 ffff ffff ffff ffff     ................
   bd72c:	ffff ffff ffff 7fc0 ffff ffff ffff ffff     ................
   bd73c:	ffff ffff feff 7f00 ffff ffff ffff ffff     ................
   bd74c:	ffff ffff feff 7f00 ffff ffff ffff ffff     ................
   bd75c:	ffff ffff feff 3f00 ffff ffff ffff ffff     .......?........
   bd76c:	ffff ffff feff 3f00 ffff ffff ffff ffff     .......?........
   bd77c:	ffff ffff 3ffc 3f00 ffff ffff ffff ffff     .....?.?........
   bd78c:	ffff ffff 0ffc 1f00 ffff ffff ffff ffff     ................
   bd79c:	ffff ffff 07fc 1f00 ffff ffff ffff ffff     ................
   bd7ac:	ffff ffff 07f8 3f00 ffff ffff ffff ffff     .......?........
   bd7bc:	ffff ffff 07f8 ff83 ffff ffff ffff ffff     ................
   bd7cc:	ffff ffff 0ff0 ffcf ffff ffff ffff ffff     ................
   bd7dc:	ffff ffff 0ff8 ffff ffff ffff ffff ffff     ................
   bd7ec:	ffff ffff 0ffe ffff ffff ffff ffff ffff     ................
   bd7fc:	ffff ffff 9fff ffff ffff ffff ffff ffff     ................
   bd80c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bd81c:	ffff ffff fcff ff1f ffff ffff ffff ffff     ................
   bd82c:	ffff 7fc0 fcff ff0d 3fe0 03ef c0ff ff7f     .........?......
   bd83c:	feff 3f00 f8f3 ff09 0780 01e4 00ff ff1f     ...?............
   bd84c:	fcff 1f3f f8f3 ff09 c31f f8e0 3ffc ff87     ..?..........?..
   bd85c:	f8ff ffff f8f3 fe09 f13f fce1 fff8 ffe3     ........?.......
   bd86c:	f1ff ffff f8f3 fc19 f87f ffe3 fff1 ffe3     ................
   bd87c:	e3ff ffff fff3 f819 fcff ffe7 ffe3 ffc7     ................
   bd88c:	e7ff ffff fff3 f1f9 feff ffe7 ffe7 ff8f     ................
   bd89c:	c7ff ffff e7f3 f3f9 ffff ffe7 ffe7 ff1f     ................
   bd8ac:	cfff ffff c3f3 f3f9 ffff ffe7 fec7 ff3f     ..............?.
   bd8bc:	cfff ffff 81f3 f3f9 ffff ffe7 fccf ff7f     ................
   bd8cc:	c0ff 0000 00f3 e3f9 ffff ffe7 f8cf ffff     ................
   bd8dc:	c0ff 0000 0072 e379 ffff ffe7 f1cf ffff     ....r.y.........
   bd8ec:	feff 0000 0072 e379 ffff ffe7 e3cf ffff     ....r.y.........
   bd8fc:	ffff fcff 00f3 f3f9 ffff ffe7 c7c7 ffff     ................
   bd90c:	ffff fcff 81f3 f3f9 ffff ffe7 8fc7 ffff     ................
   bd91c:	ffff f8ff c3f3 f1f9 ffff ffe7 1fe7 ffff     ................
   bd92c:	ffff f9ff e7f1 f9f1 fcff ffe7 3fe2 fffb     .............?..
   bd93c:	ffff f1ff fff8 f8f1 fcff ffe7 7ff0 fff3     ................
   bd94c:	ffff e3ff fffc fce1 f87f ffe7 fff8 ffe3     ................
   bd95c:	feff c77f 3ffc fe81 e13f ffe7 7ffc ffc7     .....?..?.......
   bd96c:	feff 0f1e 0efe ff09 8307 ffe7 0efe ff0f     ................
   bd97c:	ffff 1f00 80ff ff39 0fc0 ffe7 00ff ff1f     ......9.........
   bd98c:	ffff ffe0 e0ff ffff 7ff0 ffff e0ff ffff     ................
   bd99c:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bd9ac:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bd9bc:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bd9cc:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bd9dc:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bd9ec:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bd9fc:	ffff ffff ffff ffff cfff ffff ffff ffff     ................
   bda0c:	ffff ffff ffff ffff 9fff ffff ffff ffff     ................
   bda1c:	ffff ffff ffff ffff 3fff feff 7cf6 ffff     .........?...|..
   bda2c:	ffff ffff ffff ffff 7cff feff fce7 ffe7     .........|......
   bda3c:	ffff ffff ffff ffff 78ff fe7c fccf ffc7     .........x|.....
   bda4c:	ffff ffff ffff ffff 39ff fe31 e1df ff9f     .........91.....
   bda5c:	ffff ffff ffff ffff 03fe fe93 413e ff8f     ............>A..
   bda6c:	ffff ffff ffff ffff 33ff feb7 9c1e ffe3     .........3......
   bda7c:	ffff ffff ffff ffff 73ff fe37 1dc6 ffbb     .........s7.....
   bda8c:	ffff ffff ffff ffff 38ff fe27 9df2 ff39     .........8'...9.
   bda9c:	ffff ffff ffff ffff 3cff fe67 417a ff93     .........<g.zA..
   bdaac:	ffff ffff ffff ffff 3fff ffe7 61fe ff87     .........?...a..
   bdabc:	ffff ffff ffff ffff ffff ffff fdff ffff     ................
   bdacc:	ffff ffff ffff ffff ffff ffff fdff ffff     ................
   bdadc:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bdaec:	ffff ffff ffff ffff ffff ffff ffff ffff     ................

000bdafc <_ZTV16Adafruit_SSD1306>:
	...
   bdb04:	9aa5 000b 9abd 000b 8ef1 000b aef5 000b     ................
   bdb14:	9ad1 000b 8593 000b 8595 000b 85c7 000b     ................
   bdb24:	85a3 000b 85b5 000b 84d5 000b 8593 000b     ................
   bdb34:	87bf 000b 9c63 000b a1ff 000b a1b1 000b     ....c...........
   bdb44:	8657 000b 869d 000b 86b9 000b 873d 000b     W...........=...

000bdb54 <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE7premask>:
   bdb54:	8000 e0c0 f8f0 fefc                         ........

000bdb5c <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE8postmask>:
   bdb5c:	0100 0703 1f0f 7f3f                         ......?.

000bdb64 <_ZZN16Adafruit_SSD13065beginEhhbbE5init1>:
   bdb64:	d5ae a880                                   ....

000bdb68 <_ZZN16Adafruit_SSD13065beginEhhbbE5init2>:
   bdb68:	00d3 8d40                                   ..@.

000bdb6c <_ZZN16Adafruit_SSD13065beginEhhbbE5init3>:
   bdb6c:	0020 c8a1                                    ...

000bdb70 <_ZZN16Adafruit_SSD13065beginEhhbbE5init5>:
   bdb70:	40db a6a4 af2e                              .@....

000bdb76 <_ZZN16Adafruit_SSD13065beginEhhbbE6init4a>:
   bdb76:	02da 8f81                                   ....

000bdb7a <_ZZN16Adafruit_SSD13065beginEhhbbE6init4b>:
   bdb7a:	12da                                         ...

000bdb7d <_ZZN16Adafruit_SSD13065beginEhhbbE6init4c>:
   bdb7d:	02da                                         ...

000bdb80 <_ZZN16Adafruit_SSD13067displayEvE6dlist1>:
   bdb80:	0022 21ff 0000 0000                         "..!....

000bdb88 <_ZTVN5spark13EthernetClassE>:
	...
   bdb90:	aaaf 000b aaa5 000b aa9b 000b aa91 000b     ................
   bdba0:	aa85 000b aa79 000b b6d5 000b b6dd 000b     ....y...........
   bdbb0:	aa6d 000b aa65 000b aa5b 000b aa51 000b     m...e...[...Q...
   bdbc0:	b70d 000b                                   ....

000bdbc4 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   bdbc4:	0800 1810 2820 3830 7061 0070 5925 252d     .... (08app.%Y-%
   bdbd4:	2d6d 6425 2554 3a48 4d25 253a 2553 007a     m-%dT%H:%M:%S%z.
   bdbe4:	7361 7463 6d69 0065                         asctime.

000bdbec <_ZTV9IPAddress>:
	...
   bdbf4:	b26d 000b b25d 000b b25f 000b               m...]..._...

000bdc00 <_ZTV9USBSerial>:
	...
   bdc08:	b353 000b b3bb 000b b391 000b aef5 000b     S...............
   bdc18:	b383 000b b355 000b b365 000b b3b5 000b     ....U...e.......
   bdc28:	b375 000b b34d 000b                         u...M...

000bdc30 <_ZTV11USARTSerial>:
	...
   bdc38:	b4b1 000b b51d 000b b4f5 000b aef5 000b     ................
   bdc48:	b4c5 000b b4e1 000b b4d3 000b b4ef 000b     ................
   bdc58:	b4b3 000b b4b7 000b                         ........

000bdc60 <_ZTV7TwoWire>:
	...
   bdc68:	b555 000b b59f 000b b577 000b b557 000b     U.......w...W...
   bdc78:	b57f 000b b587 000b b58f 000b b597 000b     ................

000bdc88 <_ZTVN5spark9WiFiClassE>:
	...
   bdc90:	b677 000b b66d 000b b663 000b b619 000b     w...m...c.......
   bdca0:	b657 000b b64b 000b b6d5 000b b6dd 000b     W...K...........
   bdcb0:	b63f 000b b637 000b b62d 000b b623 000b     ?...7...-...#...
   bdcc0:	b70d 000b                                   ....

000bdcc4 <_ZTVN5spark12NetworkClassE>:
	...
   bdccc:	b695 000b b69f 000b b6a9 000b b6b3 000b     ................
   bdcdc:	b6bd 000b b6c9 000b b6d5 000b b6dd 000b     ................
   bdcec:	b6e5 000b b6f1 000b b6f9 000b b703 000b     ................
   bdcfc:	b70d 000b                                   ....

000bdd00 <_ZSt7nothrow>:
   bdd00:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
   bdd10:	6363 6565 6564 0064 6d2f 746e 772f 726f     cceeded./mnt/wor
   bdd20:	736b 6170 6563 772f 726f 736b 6170 6563     kspace/workspace
   bdd30:	472f 4343 312d 2d30 6970 6570 696c 656e     /GCC-10-pipeline
   bdd40:	6a2f 6e65 696b 736e 472d 4343 312d 2d30     /jenkins-GCC-10-
   bdd50:	6970 6570 696c 656e 342d 5f38 3032 3032     pipeline-48_2020
   bdd60:	3131 3432 315f 3036 3136 3038 3436 2f31     1124_1606180641/
   bdd70:	7273 2f63 656e 6c77 6269 6e2f 7765 696c     src/newlib/newli
   bdd80:	2f62 696c 6362 732f 6474 696c 2f62 6172     b/libc/stdlib/ra
   bdd90:	646e 632e 2f00 6e6d 2f74 6f77 6b72 7073     nd.c./mnt/worksp
   bdda0:	6361 2f65 6f77 6b72 7073 6361 2f65 4347     ace/workspace/GC
   bddb0:	2d43 3031 702d 7069 6c65 6e69 2f65 656a     C-10-pipeline/je
   bddc0:	6b6e 6e69 2d73 4347 2d43 3031 702d 7069     nkins-GCC-10-pip
   bddd0:	6c65 6e69 2d65 3834 325f 3230 3130 3231     eline-48_2020112
   bdde0:	5f34 3631 3630 3831 3630 3134 732f 6372     4_1606180641/src
   bddf0:	6e2f 7765 696c 2f62 656e 6c77 6269 6c2f     /newlib/newlib/l
   bde00:	6269 2f63 7473 6972 676e 732f 7274 6f74     ibc/string/strto
   bde10:	2e6b 0063                                   k.c.

000bde14 <link_const_data_end>:
   bde14:	000b6549 	.word	0x000b6549
   bde18:	000baab9 	.word	0x000baab9
   bde1c:	000bac31 	.word	0x000bac31
   bde20:	000baee5 	.word	0x000baee5
   bde24:	000bb01d 	.word	0x000bb01d
   bde28:	000bb02d 	.word	0x000bb02d
   bde2c:	000bb0e5 	.word	0x000bb0e5
   bde30:	000bb681 	.word	0x000bb681
   bde34:	000bb7e5 	.word	0x000bb7e5
