
/Users/marcosgarciagarcia/Documents/Sucre/target/3.2.0-rc.1/argon/Sucre.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000044a4  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000b84c0  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000084  2003e598  000b84c4  0001e598  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000001d4  2003e61c  2003e61c  0002e61c  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000b8548  000b8548  00028548  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000b8570  000b8570  00028570  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   0013819a  00000000  00000000  00028574  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_abbrev 00015206  00000000  00000000  0016070e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_loc    00048b05  00000000  00000000  00175914  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000031c0  00000000  00000000  001be419  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 0000b2a8  00000000  00000000  001c15d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0003c483  00000000  00000000  001cc881  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00049efa  00000000  00000000  00208d04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    001325a4  00000000  00000000  00252bfe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_frame  0000939c  00000000  00000000  003851a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b401c:	4809      	ldr	r0, [pc, #36]	; (b4044 <module_user_pre_init+0x28>)
   b401e:	490a      	ldr	r1, [pc, #40]	; (b4048 <module_user_pre_init+0x2c>)
   b4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4024:	d005      	beq.n	b4032 <module_user_pre_init+0x16>
   b4026:	4a09      	ldr	r2, [pc, #36]	; (b404c <module_user_pre_init+0x30>)
   b4028:	4282      	cmp	r2, r0
   b402a:	d002      	beq.n	b4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b402c:	1a12      	subs	r2, r2, r0
   b402e:	f003 f88f 	bl	b7150 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4032:	4807      	ldr	r0, [pc, #28]	; (b4050 <module_user_pre_init+0x34>)
   b4034:	4a07      	ldr	r2, [pc, #28]	; (b4054 <module_user_pre_init+0x38>)
   b4036:	2100      	movs	r1, #0
   b4038:	1a12      	subs	r2, r2, r0
   b403a:	f003 f897 	bl	b716c <memset>
    return &link_global_data_start;
}
   b403e:	4801      	ldr	r0, [pc, #4]	; (b4044 <module_user_pre_init+0x28>)
   b4040:	bd08      	pop	{r3, pc}
   b4042:	bf00      	nop
   b4044:	2003e598 	.word	0x2003e598
   b4048:	000b84c4 	.word	0x000b84c4
   b404c:	2003e61c 	.word	0x2003e61c
   b4050:	2003e61c 	.word	0x2003e61c
   b4054:	2003e7ed 	.word	0x2003e7ed

000b4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405a:	4e07      	ldr	r6, [pc, #28]	; (b4078 <module_user_init+0x20>)
   b405c:	4c07      	ldr	r4, [pc, #28]	; (b407c <module_user_init+0x24>)
    module_user_init_hook();
   b405e:	f002 ff47 	bl	b6ef0 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4062:	1ba4      	subs	r4, r4, r6
   b4064:	08a4      	lsrs	r4, r4, #2
   b4066:	2500      	movs	r5, #0
   b4068:	42ac      	cmp	r4, r5
   b406a:	d100      	bne.n	b406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b406e:	f856 3b04 	ldr.w	r3, [r6], #4
   b4072:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4074:	3501      	adds	r5, #1
   b4076:	e7f7      	b.n	b4068 <module_user_init+0x10>
   b4078:	000b8490 	.word	0x000b8490
   b407c:	000b84b4 	.word	0x000b84b4

000b4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4080:	f000 b986 	b.w	b4390 <setup>

000b4084 <module_user_loop>:
}

void module_user_loop() {
   b4084:	b508      	push	{r3, lr}
    loop();
   b4086:	f000 f9d1 	bl	b442c <loop>
    _post_loop();
}
   b408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b408e:	f002 bee7 	b.w	b6e60 <_post_loop>

000b4092 <_Znaj>:
   b4092:	f002 b9d3 	b.w	b643c <malloc>

000b4096 <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b4096:	f002 b9d9 	b.w	b644c <free>
	...

000b409c <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b409c:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b409e:	4a03      	ldr	r2, [pc, #12]	; (b40ac <__cxa_pure_virtual+0x10>)
   b40a0:	2100      	movs	r1, #0
   b40a2:	200c      	movs	r0, #12
   b40a4:	f002 f92e 	bl	b6304 <panic_>
  while (1);
   b40a8:	e7fe      	b.n	b40a8 <__cxa_pure_virtual+0xc>
   b40aa:	bf00      	nop
   b40ac:	000b6055 	.word	0x000b6055

000b40b0 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40b0:	7800      	ldrb	r0, [r0, #0]
   b40b2:	fab0 f080 	clz	r0, r0
   b40b6:	0940      	lsrs	r0, r0, #5
   b40b8:	4770      	bx	lr

000b40ba <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40ba:	2301      	movs	r3, #1
   b40bc:	7003      	strb	r3, [r0, #0]
   b40be:	4770      	bx	lr

000b40c0 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40c0:	b40e      	push	{r1, r2, r3}
   b40c2:	b503      	push	{r0, r1, lr}
   b40c4:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b40c6:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40c8:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b40cc:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b40ce:	f002 fc34 	bl	b693a <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b40d2:	b002      	add	sp, #8
   b40d4:	f85d eb04 	ldr.w	lr, [sp], #4
   b40d8:	b003      	add	sp, #12
   b40da:	4770      	bx	lr

000b40dc <_ZN5Print8printlnfEPKcz>:

    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40dc:	b40e      	push	{r1, r2, r3}
   b40de:	b503      	push	{r0, r1, lr}
   b40e0:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(true, format, args);
   b40e2:	2101      	movs	r1, #1
    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40e4:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b40e8:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(true, format, args);
   b40ea:	f002 fc26 	bl	b693a <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b40ee:	b002      	add	sp, #8
   b40f0:	f85d eb04 	ldr.w	lr, [sp], #4
   b40f4:	b003      	add	sp, #12
   b40f6:	4770      	bx	lr

000b40f8 <_Z4atoiPc>:
      Serial.print(buffer[i], HEX);
   }
}

int atoi(char *str)
{ //}, int solution[], int j){
   b40f8:	b530      	push	{r4, r5, lr}
   int num = 0;
   int i = 0;
   bool isNegetive = false;
   if (str[i] == '-')
   b40fa:	7803      	ldrb	r3, [r0, #0]
   b40fc:	2b2d      	cmp	r3, #45	; 0x2d
   {
      isNegetive = true;
   b40fe:	bf0c      	ite	eq
   b4100:	2201      	moveq	r2, #1
   bool isNegetive = false;
   b4102:	2200      	movne	r2, #0
   int i = 0;
   b4104:	4613      	mov	r3, r2
   b4106:	4403      	add	r3, r0
      i++;
   }

   while (str[i] && (str[i] >= '0' && str[i] <= '9'))
   {
      num = num * 10 + (str[i] - '0');
   b4108:	240a      	movs	r4, #10
      i++;
   b410a:	2000      	movs	r0, #0
   while (str[i] && (str[i] >= '0' && str[i] <= '9'))
   b410c:	f813 1b01 	ldrb.w	r1, [r3], #1
   b4110:	3930      	subs	r1, #48	; 0x30
   b4112:	b2cd      	uxtb	r5, r1
   b4114:	2d09      	cmp	r5, #9
   b4116:	d802      	bhi.n	b411e <_Z4atoiPc+0x26>
      num = num * 10 + (str[i] - '0');
   b4118:	fb04 1000 	mla	r0, r4, r0, r1
   while (str[i] && (str[i] >= '0' && str[i] <= '9'))
   b411c:	e7f6      	b.n	b410c <_Z4atoiPc+0x14>
      i++;
   }
   if (isNegetive)
   b411e:	b102      	cbz	r2, b4122 <_Z4atoiPc+0x2a>
      num = -1 * num;
   b4120:	4240      	negs	r0, r0
   return num;
}
   b4122:	bd30      	pop	{r4, r5, pc}

000b4124 <_Z5splitPcS_Pi>:

void split(char cadena[], char delim[], int solution[])
{
   b4124:	b570      	push	{r4, r5, r6, lr}
   b4126:	4614      	mov	r4, r2
   b4128:	460d      	mov	r5, r1
   char *ptr = strtok(cadena, delim);
   b412a:	f003 f85d 	bl	b71e8 <strtok>
   int j = 0;
   b412e:	1f26      	subs	r6, r4, #4
   while (ptr != NULL)
   b4130:	b140      	cbz	r0, b4144 <_Z5splitPcS_Pi+0x20>
   {
      solution[j] = atoi(ptr);
   b4132:	f7ff ffe1 	bl	b40f8 <_Z4atoiPc>
      j++;
      ptr = strtok(NULL, delim);
   b4136:	4629      	mov	r1, r5
      solution[j] = atoi(ptr);
   b4138:	f846 0f04 	str.w	r0, [r6, #4]!
      ptr = strtok(NULL, delim);
   b413c:	2000      	movs	r0, #0
   b413e:	f003 f853 	bl	b71e8 <strtok>
   while (ptr != NULL)
   b4142:	e7f5      	b.n	b4130 <_Z5splitPcS_Pi+0xc>
   }

   if (!solution[0])
   b4144:	6823      	ldr	r3, [r4, #0]
   b4146:	b913      	cbnz	r3, b414e <_Z5splitPcS_Pi+0x2a>
   {
      haveSensor = true;
   b4148:	4b01      	ldr	r3, [pc, #4]	; (b4150 <_Z5splitPcS_Pi+0x2c>)
   b414a:	2201      	movs	r2, #1
   b414c:	701a      	strb	r2, [r3, #0]
   }
}
   b414e:	bd70      	pop	{r4, r5, r6, pc}
   b4150:	2003e6a4 	.word	0x2003e6a4

000b4154 <_Z16writeDataToBLockh>:
      Serial.printf("Es digital\n");
   }
}

void writeDataToBLock(byte blockAddr)
{
   b4154:	b538      	push	{r3, r4, r5, lr}
   b4156:	4601      	mov	r1, r0
   status = (MFRC522::StatusCode)mfrc522.MIFARE_Write(blockAddr, (byte *)data, 16);
   b4158:	4a0d      	ldr	r2, [pc, #52]	; (b4190 <_Z16writeDataToBLockh+0x3c>)
   b415a:	480e      	ldr	r0, [pc, #56]	; (b4194 <_Z16writeDataToBLockh+0x40>)
   b415c:	4d0e      	ldr	r5, [pc, #56]	; (b4198 <_Z16writeDataToBLockh+0x44>)
   b415e:	2310      	movs	r3, #16
   b4160:	f001 fdef 	bl	b5d42 <_ZN7MFRC52212MIFARE_WriteEhPhh>
   if (status != MFRC522::STATUS_OK)
   b4164:	2801      	cmp	r0, #1
   status = (MFRC522::StatusCode)mfrc522.MIFARE_Write(blockAddr, (byte *)data, 16);
   b4166:	7028      	strb	r0, [r5, #0]
   if (status != MFRC522::STATUS_OK)
   b4168:	d011      	beq.n	b418e <_Z16writeDataToBLockh+0x3a>
   {
      Serial.print(F("MIFARE_Write() failed: "));
   b416a:	f002 fdf3 	bl	b6d54 <_Z16_fetch_usbserialv>
   b416e:	490b      	ldr	r1, [pc, #44]	; (b419c <_Z16writeDataToBLockh+0x48>)
   b4170:	f002 fba8 	bl	b68c4 <_ZN5Print5printEPKc>
      Serial.println(mfrc522.GetStatusCodeName(status));
   b4174:	f002 fdee 	bl	b6d54 <_Z16_fetch_usbserialv>
   b4178:	7829      	ldrb	r1, [r5, #0]
   b417a:	4604      	mov	r4, r0
   b417c:	4805      	ldr	r0, [pc, #20]	; (b4194 <_Z16writeDataToBLockh+0x40>)
   b417e:	f001 fab5 	bl	b56ec <_ZN7MFRC52217GetStatusCodeNameEh>
   b4182:	4601      	mov	r1, r0
   b4184:	4620      	mov	r0, r4
   }
}
   b4186:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      Serial.println(mfrc522.GetStatusCodeName(status));
   b418a:	f002 bbae 	b.w	b68ea <_ZN5Print7printlnEPKc>
}
   b418e:	bd38      	pop	{r3, r4, r5, pc}
   b4190:	2003e599 	.word	0x2003e599
   b4194:	2003e6ab 	.word	0x2003e6ab
   b4198:	2003e6c3 	.word	0x2003e6c3
   b419c:	000b7380 	.word	0x000b7380

000b41a0 <_Z17readDataFromBlockhPhh>:

bool readDataFromBlock(byte blockAddr, byte buffer[], byte size)
{
   b41a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b41a2:	f88d 2007 	strb.w	r2, [sp, #7]
   // Serial.print(F("Leer datos del sector ")); Serial.print(blockAddr);
   status = (MFRC522::StatusCode)mfrc522.MIFARE_Read(blockAddr, buffer, &size);
   b41a6:	f10d 0307 	add.w	r3, sp, #7
   b41aa:	460a      	mov	r2, r1
   b41ac:	4601      	mov	r1, r0
   b41ae:	480d      	ldr	r0, [pc, #52]	; (b41e4 <_Z17readDataFromBlockhPhh+0x44>)
   b41b0:	4d0d      	ldr	r5, [pc, #52]	; (b41e8 <_Z17readDataFromBlockhPhh+0x48>)
   b41b2:	f001 fd2b 	bl	b5c0c <_ZN7MFRC52211MIFARE_ReadEhPhS0_>
   if (status != MFRC522::STATUS_OK)
   b41b6:	2801      	cmp	r0, #1
   status = (MFRC522::StatusCode)mfrc522.MIFARE_Read(blockAddr, buffer, &size);
   b41b8:	7028      	strb	r0, [r5, #0]
   if (status != MFRC522::STATUS_OK)
   b41ba:	d010      	beq.n	b41de <_Z17readDataFromBlockhPhh+0x3e>
   {
      Serial.print(F("MIFARE_Read() failed: "));
   b41bc:	f002 fdca 	bl	b6d54 <_Z16_fetch_usbserialv>
   b41c0:	490a      	ldr	r1, [pc, #40]	; (b41ec <_Z17readDataFromBlockhPhh+0x4c>)
   b41c2:	f002 fb7f 	bl	b68c4 <_ZN5Print5printEPKc>
      Serial.println(mfrc522.GetStatusCodeName(status));
   b41c6:	f002 fdc5 	bl	b6d54 <_Z16_fetch_usbserialv>
   b41ca:	7829      	ldrb	r1, [r5, #0]
   b41cc:	4604      	mov	r4, r0
   b41ce:	4805      	ldr	r0, [pc, #20]	; (b41e4 <_Z17readDataFromBlockhPhh+0x44>)
   b41d0:	f001 fa8c 	bl	b56ec <_ZN7MFRC52217GetStatusCodeNameEh>
   b41d4:	4601      	mov	r1, r0
   b41d6:	4620      	mov	r0, r4
   b41d8:	f002 fb87 	bl	b68ea <_ZN5Print7printlnEPKc>
   b41dc:	2000      	movs	r0, #0
      return false;
   }
   return true;
}
   b41de:	b003      	add	sp, #12
   b41e0:	bd30      	pop	{r4, r5, pc}
   b41e2:	bf00      	nop
   b41e4:	2003e6ab 	.word	0x2003e6ab
   b41e8:	2003e6c3 	.word	0x2003e6c3
   b41ec:	000b7398 	.word	0x000b7398

000b41f0 <_Z8getTagIDPi>:

void getTagID(int infoTag[])
{
   b41f0:	b5f0      	push	{r4, r5, r6, r7, lr}
   b41f2:	b08d      	sub	sp, #52	; 0x34

   status = (MFRC522::StatusCode)mfrc522.PCD_Authenticate(MFRC522::PICC_CMD_MF_AUTH_KEY_A, trailerBlock, &key, &(mfrc522.uid));
   b41f4:	4d20      	ldr	r5, [pc, #128]	; (b4278 <_Z8getTagIDPi+0x88>)
   b41f6:	4a21      	ldr	r2, [pc, #132]	; (b427c <_Z8getTagIDPi+0x8c>)
   b41f8:	9500      	str	r5, [sp, #0]
   b41fa:	4b21      	ldr	r3, [pc, #132]	; (b4280 <_Z8getTagIDPi+0x90>)
   b41fc:	7812      	ldrb	r2, [r2, #0]
   b41fe:	4f21      	ldr	r7, [pc, #132]	; (b4284 <_Z8getTagIDPi+0x94>)
{
   b4200:	4606      	mov	r6, r0
   status = (MFRC522::StatusCode)mfrc522.PCD_Authenticate(MFRC522::PICC_CMD_MF_AUTH_KEY_A, trailerBlock, &key, &(mfrc522.uid));
   b4202:	2160      	movs	r1, #96	; 0x60
   b4204:	4628      	mov	r0, r5
   b4206:	f001 fd22 	bl	b5c4e <_ZN7MFRC52216PCD_AuthenticateEhhPNS_10MIFARE_KeyEPNS_3UidE>
   if (status != MFRC522::STATUS_OK)
   b420a:	2801      	cmp	r0, #1
   status = (MFRC522::StatusCode)mfrc522.PCD_Authenticate(MFRC522::PICC_CMD_MF_AUTH_KEY_A, trailerBlock, &key, &(mfrc522.uid));
   b420c:	7038      	strb	r0, [r7, #0]
   if (status != MFRC522::STATUS_OK)
   b420e:	d00f      	beq.n	b4230 <_Z8getTagIDPi+0x40>
   {
      Serial.print(F("PCD_Authenticate() failed: "));
   b4210:	f002 fda0 	bl	b6d54 <_Z16_fetch_usbserialv>
   b4214:	491c      	ldr	r1, [pc, #112]	; (b4288 <_Z8getTagIDPi+0x98>)
   b4216:	f002 fb55 	bl	b68c4 <_ZN5Print5printEPKc>
      Serial.println(mfrc522.GetStatusCodeName(status));
   b421a:	f002 fd9b 	bl	b6d54 <_Z16_fetch_usbserialv>
   b421e:	7839      	ldrb	r1, [r7, #0]
   b4220:	4604      	mov	r4, r0
   b4222:	4628      	mov	r0, r5
   b4224:	f001 fa62 	bl	b56ec <_ZN7MFRC52217GetStatusCodeNameEh>
   b4228:	4601      	mov	r1, r0
   b422a:	4620      	mov	r0, r4
   b422c:	f002 fb5d 	bl	b68ea <_ZN5Print7printlnEPKc>
   }

   // Write data to tag:
   writeDataToBLock(blockAddr);
   b4230:	4c16      	ldr	r4, [pc, #88]	; (b428c <_Z8getTagIDPi+0x9c>)
   b4232:	7820      	ldrb	r0, [r4, #0]
   b4234:	f7ff ff8e 	bl	b4154 <_Z16writeDataToBLockh>

   // Read data from the block's Tag.
   byte buffer[18];
   byte size = sizeof(buffer);
   if (!readDataFromBlock(blockAddr, buffer, size))
   b4238:	7820      	ldrb	r0, [r4, #0]
   b423a:	2212      	movs	r2, #18
   b423c:	a907      	add	r1, sp, #28
   b423e:	f7ff ffaf 	bl	b41a0 <_Z17readDataFromBlockhPhh>
   b4242:	b1b0      	cbz	r0, b4272 <_Z8getTagIDPi+0x82>
   // Convert from hex to String:
   char tagInfo[16];
   int i = 0;
   for (byte j = 0; j < sizeof(buffer); j++)
   {
      tagInfo[i] = (char)buffer[j];
   b4244:	ac07      	add	r4, sp, #28
   b4246:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b4248:	ad03      	add	r5, sp, #12
   b424a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b424c:	6823      	ldr	r3, [r4, #0]
   b424e:	802b      	strh	r3, [r5, #0]
      i++;
      // Serial.write(buffer[j]);
      // tagInfo += Serial.write(buffer[j]);
   }
   Serial.printlnf("TagInfo: %s", tagInfo);
   b4250:	f002 fd80 	bl	b6d54 <_Z16_fetch_usbserialv>
   b4254:	490e      	ldr	r1, [pc, #56]	; (b4290 <_Z8getTagIDPi+0xa0>)
   b4256:	aa03      	add	r2, sp, #12
   b4258:	f7ff ff40 	bl	b40dc <_ZN5Print8printlnfEPKcz>
   split(tagInfo, delim, infoTag);
   b425c:	490d      	ldr	r1, [pc, #52]	; (b4294 <_Z8getTagIDPi+0xa4>)
   b425e:	4632      	mov	r2, r6
   b4260:	a803      	add	r0, sp, #12
   b4262:	f7ff ff5f 	bl	b4124 <_Z5splitPcS_Pi>

   // Evitamos seguir leyendo la misma tag.
   mfrc522.PICC_HaltA();
   b4266:	4804      	ldr	r0, [pc, #16]	; (b4278 <_Z8getTagIDPi+0x88>)
   b4268:	f001 fcab 	bl	b5bc2 <_ZN7MFRC52210PICC_HaltAEv>
   // Stop encryption on PCD
   mfrc522.PCD_StopCrypto1();
   b426c:	4802      	ldr	r0, [pc, #8]	; (b4278 <_Z8getTagIDPi+0x88>)
   b426e:	f001 fb08 	bl	b5882 <_ZN7MFRC52215PCD_StopCrypto1Ev>
}
   b4272:	b00d      	add	sp, #52	; 0x34
   b4274:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b4276:	bf00      	nop
   b4278:	2003e6ab 	.word	0x2003e6ab
   b427c:	2003e5ac 	.word	0x2003e5ac
   b4280:	2003e6a5 	.word	0x2003e6a5
   b4284:	2003e6c3 	.word	0x2003e6c3
   b4288:	000b73af 	.word	0x000b73af
   b428c:	2003e598 	.word	0x2003e598
   b4290:	000b73cb 	.word	0x000b73cb
   b4294:	2003e5a5 	.word	0x2003e5a5

000b4298 <_Z13asignarPuertoi>:
{
   return id == 0;
}

char *asignarPuerto(int id)
{
   b4298:	b508      	push	{r3, lr}
   int option;
   // Serial.printf("Digital %d, Analogico %d\n", puertoDigital, puertoAnalogico);

   if (esAnalogico(id))
   b429a:	b940      	cbnz	r0, b42ae <_Z13asignarPuertoi+0x16>
   {
      // Serial.print(" \t y es analógico\n");
      option = puertoAnalogico;
   b429c:	4b29      	ldr	r3, [pc, #164]	; (b4344 <_Z13asignarPuertoi+0xac>)
   }
   else
   {
      // Serial.print(" \t y es digital\n");
      option = puertoDigital;
   b429e:	681b      	ldr	r3, [r3, #0]
   }

   switch (option)
   b42a0:	2b05      	cmp	r3, #5
   b42a2:	d848      	bhi.n	b4336 <_Z13asignarPuertoi+0x9e>
   b42a4:	e8df f003 	tbb	[pc, r3]
   b42a8:	261b1005 	.word	0x261b1005
   b42ac:	3c31      	.short	0x3c31
      option = puertoDigital;
   b42ae:	4b26      	ldr	r3, [pc, #152]	; (b4348 <_Z13asignarPuertoi+0xb0>)
   b42b0:	e7f5      	b.n	b429e <_Z13asignarPuertoi+0x6>
   {
   case 0:
      Serial.print("Conectar al puerto A0\n");
   b42b2:	f002 fd4f 	bl	b6d54 <_Z16_fetch_usbserialv>
   b42b6:	4925      	ldr	r1, [pc, #148]	; (b434c <_Z13asignarPuertoi+0xb4>)
   b42b8:	f002 fb04 	bl	b68c4 <_ZN5Print5printEPKc>

      puertoAnalogico++;
   b42bc:	4a21      	ldr	r2, [pc, #132]	; (b4344 <_Z13asignarPuertoi+0xac>)
      // Disp[0].pin = A0;
      // Disp[0].pin2 = A1;

      // statements executed if the expression equals the   p_A0
      // value of this constant_expression                  p_A1
      return "A0";
   b42be:	4824      	ldr	r0, [pc, #144]	; (b4350 <_Z13asignarPuertoi+0xb8>)
      puertoAnalogico++;
   b42c0:	6813      	ldr	r3, [r2, #0]
   b42c2:	3301      	adds	r3, #1
   b42c4:	6013      	str	r3, [r2, #0]
      Serial.print("Error: No hay mas puertos disponibles \n");
      return "";
      // statements executed if expression does not equal
      // any case constant_expression
   }
}
   b42c6:	bd08      	pop	{r3, pc}
      Serial.print("Conectar al puerto A2\n");
   b42c8:	f002 fd44 	bl	b6d54 <_Z16_fetch_usbserialv>
   b42cc:	4921      	ldr	r1, [pc, #132]	; (b4354 <_Z13asignarPuertoi+0xbc>)
   b42ce:	f002 faf9 	bl	b68c4 <_ZN5Print5printEPKc>
      puertoAnalogico++;
   b42d2:	4a1c      	ldr	r2, [pc, #112]	; (b4344 <_Z13asignarPuertoi+0xac>)
      return "A2";
   b42d4:	4820      	ldr	r0, [pc, #128]	; (b4358 <_Z13asignarPuertoi+0xc0>)
      puertoAnalogico++;
   b42d6:	6813      	ldr	r3, [r2, #0]
   b42d8:	3301      	adds	r3, #1
   b42da:	6013      	str	r3, [r2, #0]
      return "A2";
   b42dc:	e7f3      	b.n	b42c6 <_Z13asignarPuertoi+0x2e>
      Serial.print("Conectar al puerto A4\n");
   b42de:	f002 fd39 	bl	b6d54 <_Z16_fetch_usbserialv>
   b42e2:	491e      	ldr	r1, [pc, #120]	; (b435c <_Z13asignarPuertoi+0xc4>)
   b42e4:	f002 faee 	bl	b68c4 <_ZN5Print5printEPKc>
      puertoAnalogico = -1;
   b42e8:	4b16      	ldr	r3, [pc, #88]	; (b4344 <_Z13asignarPuertoi+0xac>)
      return "A4";
   b42ea:	481d      	ldr	r0, [pc, #116]	; (b4360 <_Z13asignarPuertoi+0xc8>)
      puertoAnalogico = -1;
   b42ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b42f0:	601a      	str	r2, [r3, #0]
      return "A4";
   b42f2:	e7e8      	b.n	b42c6 <_Z13asignarPuertoi+0x2e>
      Serial.print("Conectar al puerto D2\n");
   b42f4:	f002 fd2e 	bl	b6d54 <_Z16_fetch_usbserialv>
   b42f8:	491a      	ldr	r1, [pc, #104]	; (b4364 <_Z13asignarPuertoi+0xcc>)
   b42fa:	f002 fae3 	bl	b68c4 <_ZN5Print5printEPKc>
      puertoDigital++;
   b42fe:	4a12      	ldr	r2, [pc, #72]	; (b4348 <_Z13asignarPuertoi+0xb0>)
      return "D2";
   b4300:	4819      	ldr	r0, [pc, #100]	; (b4368 <_Z13asignarPuertoi+0xd0>)
      puertoDigital++;
   b4302:	6813      	ldr	r3, [r2, #0]
   b4304:	3301      	adds	r3, #1
   b4306:	6013      	str	r3, [r2, #0]
      return "D2";
   b4308:	e7dd      	b.n	b42c6 <_Z13asignarPuertoi+0x2e>
      Serial.print("Conectar al puerto D4\n");
   b430a:	f002 fd23 	bl	b6d54 <_Z16_fetch_usbserialv>
   b430e:	4917      	ldr	r1, [pc, #92]	; (b436c <_Z13asignarPuertoi+0xd4>)
   b4310:	f002 fad8 	bl	b68c4 <_ZN5Print5printEPKc>
      puertoDigital++;
   b4314:	4a0c      	ldr	r2, [pc, #48]	; (b4348 <_Z13asignarPuertoi+0xb0>)
      return "D4";
   b4316:	4816      	ldr	r0, [pc, #88]	; (b4370 <_Z13asignarPuertoi+0xd8>)
      puertoDigital++;
   b4318:	6813      	ldr	r3, [r2, #0]
   b431a:	3301      	adds	r3, #1
   b431c:	6013      	str	r3, [r2, #0]
      return "D4";
   b431e:	e7d2      	b.n	b42c6 <_Z13asignarPuertoi+0x2e>
      Serial.print("Conectar al puerto D6\n");
   b4320:	f002 fd18 	bl	b6d54 <_Z16_fetch_usbserialv>
   b4324:	4913      	ldr	r1, [pc, #76]	; (b4374 <_Z13asignarPuertoi+0xdc>)
   b4326:	f002 facd 	bl	b68c4 <_ZN5Print5printEPKc>
      puertoDigital = -1;
   b432a:	4b07      	ldr	r3, [pc, #28]	; (b4348 <_Z13asignarPuertoi+0xb0>)
      return "D6";
   b432c:	4812      	ldr	r0, [pc, #72]	; (b4378 <_Z13asignarPuertoi+0xe0>)
      puertoDigital = -1;
   b432e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b4332:	601a      	str	r2, [r3, #0]
      return "D6";
   b4334:	e7c7      	b.n	b42c6 <_Z13asignarPuertoi+0x2e>
      Serial.print("Error: No hay mas puertos disponibles \n");
   b4336:	f002 fd0d 	bl	b6d54 <_Z16_fetch_usbserialv>
   b433a:	4910      	ldr	r1, [pc, #64]	; (b437c <_Z13asignarPuertoi+0xe4>)
   b433c:	f002 fac2 	bl	b68c4 <_ZN5Print5printEPKc>
      return "";
   b4340:	480f      	ldr	r0, [pc, #60]	; (b4380 <_Z13asignarPuertoi+0xe8>)
   b4342:	e7c0      	b.n	b42c6 <_Z13asignarPuertoi+0x2e>
   b4344:	2003e6bc 	.word	0x2003e6bc
   b4348:	2003e5a8 	.word	0x2003e5a8
   b434c:	000b73e9 	.word	0x000b73e9
   b4350:	000b73d7 	.word	0x000b73d7
   b4354:	000b7400 	.word	0x000b7400
   b4358:	000b73da 	.word	0x000b73da
   b435c:	000b7417 	.word	0x000b7417
   b4360:	000b73dd 	.word	0x000b73dd
   b4364:	000b742e 	.word	0x000b742e
   b4368:	000b73e0 	.word	0x000b73e0
   b436c:	000b7445 	.word	0x000b7445
   b4370:	000b73e3 	.word	0x000b73e3
   b4374:	000b745c 	.word	0x000b745c
   b4378:	000b73e6 	.word	0x000b73e6
   b437c:	000b7473 	.word	0x000b7473
   b4380:	000b749a 	.word	0x000b749a

000b4384 <_Z11numSensoresPb>:
   int contador = 0;
   int j = 0;

   for (j; j < 2; j++)
   {
      if (array[j])
   b4384:	7842      	ldrb	r2, [r0, #1]
   int contador = 0;
   b4386:	7803      	ldrb	r3, [r0, #0]
      if (array[j])
   b4388:	b102      	cbz	r2, b438c <_Z11numSensoresPb+0x8>
         contador++;
   b438a:	3301      	adds	r3, #1
   }

   return contador;
}
   b438c:	4618      	mov	r0, r3
   b438e:	4770      	bx	lr

000b4390 <setup>:
// Unconnected mode ON
SYSTEM_MODE(SEMI_AUTOMATIC);

bool sensoresArray[2] = {false, false};
void setup()
{
   b4390:	b510      	push	{r4, lr}

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b4392:	4c20      	ldr	r4, [pc, #128]	; (b4414 <setup+0x84>)
   b4394:	b088      	sub	sp, #32
  // Particle setup
  Serial.begin(9600);
   b4396:	f002 fcdd 	bl	b6d54 <_Z16_fetch_usbserialv>
   b439a:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b439e:	f002 fccd 	bl	b6d3c <_ZN9USBSerial5beginEl>
   b43a2:	7821      	ldrb	r1, [r4, #0]
   b43a4:	f3bf 8f5b 	dmb	ish
   b43a8:	f011 0101 	ands.w	r1, r1, #1
   b43ac:	d10b      	bne.n	b43c6 <setup+0x36>
   b43ae:	4620      	mov	r0, r4
   b43b0:	9103      	str	r1, [sp, #12]
   b43b2:	f7ff fe7d 	bl	b40b0 <__cxa_guard_acquire>
   b43b6:	9903      	ldr	r1, [sp, #12]
   b43b8:	b128      	cbz	r0, b43c6 <setup+0x36>
   b43ba:	4817      	ldr	r0, [pc, #92]	; (b4418 <setup+0x88>)
   b43bc:	f002 fafa 	bl	b69b4 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b43c0:	4620      	mov	r0, r4
   b43c2:	f7ff fe7a 	bl	b40ba <__cxa_guard_release>

    hal_spi_interface_t interface() {
         return instance().interface();
    }
    void begin() {
        instance().begin();
   b43c6:	4814      	ldr	r0, [pc, #80]	; (b4418 <setup+0x88>)
   b43c8:	f002 fafe 	bl	b69c8 <_ZN8SPIClass5beginEv>
inline CloudDisconnectOptions::CloudDisconnectOptions(unsigned flags, system_tick_t timeout, bool graceful,
        bool clearSession) :
        flags_(flags),
        timeout_(timeout),
        graceful_(graceful),
        clearSession_(clearSession) {
   b43cc:	2400      	movs	r4, #0
  SPI.begin();
  // Unconnected mode ON
  Particle.disconnect();
   b43ce:	a805      	add	r0, sp, #20
   b43d0:	e9cd 4405 	strd	r4, r4, [sp, #20]
        bool clearSession) :
   b43d4:	f8ad 401c 	strh.w	r4, [sp, #28]
   b43d8:	f002 f86c 	bl	b64b4 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   b43dc:	480f      	ldr	r0, [pc, #60]	; (b441c <setup+0x8c>)
   b43de:	4623      	mov	r3, r4
   b43e0:	4622      	mov	r2, r4
   b43e2:	4621      	mov	r1, r4
   b43e4:	6840      	ldr	r0, [r0, #4]
   b43e6:	f001 fff1 	bl	b63cc <network_off>
  WiFi.off();

  // Oled setup
  display.begin(SSD1306_SWITCHCAPVCC, 0x3C);
   b43ea:	2301      	movs	r3, #1
   b43ec:	9300      	str	r3, [sp, #0]
   b43ee:	223c      	movs	r2, #60	; 0x3c
   b43f0:	2102      	movs	r1, #2
   b43f2:	480b      	ldr	r0, [pc, #44]	; (b4420 <setup+0x90>)
   b43f4:	f000 fe52 	bl	b509c <_ZN16Adafruit_SSD13065beginEhhbb>

  // NFC Reader setup
  mfrc522.PCD_Init();
   b43f8:	480a      	ldr	r0, [pc, #40]	; (b4424 <setup+0x94>)
   b43fa:	f001 faa6 	bl	b594a <_ZN7MFRC5228PCD_InitEv>
  for (byte i = 0; i < 6; i++)
  {
    key.keyByte[i] = 0xFF;
   b43fe:	4b0a      	ldr	r3, [pc, #40]	; (b4428 <setup+0x98>)
   b4400:	22ff      	movs	r2, #255	; 0xff
   b4402:	701a      	strb	r2, [r3, #0]
   b4404:	705a      	strb	r2, [r3, #1]
   b4406:	709a      	strb	r2, [r3, #2]
   b4408:	70da      	strb	r2, [r3, #3]
   b440a:	711a      	strb	r2, [r3, #4]
   b440c:	715a      	strb	r2, [r3, #5]
  }
}
   b440e:	b008      	add	sp, #32
   b4410:	bd10      	pop	{r4, pc}
   b4412:	bf00      	nop
   b4414:	2003e61c 	.word	0x2003e61c
   b4418:	2003e620 	.word	0x2003e620
   b441c:	2003e718 	.word	0x2003e718
   b4420:	2003e634 	.word	0x2003e634
   b4424:	2003e6ab 	.word	0x2003e6ab
   b4428:	2003e6a5 	.word	0x2003e6a5

000b442c <loop>:

void loop()
{
   b442c:	b570      	push	{r4, r5, r6, lr}
  // If tag detected
  if (mfrc522.PICC_IsNewCardPresent())
   b442e:	4832      	ldr	r0, [pc, #200]	; (b44f8 <loop+0xcc>)
{
   b4430:	b086      	sub	sp, #24
  if (mfrc522.PICC_IsNewCardPresent())
   b4432:	f001 fbb5 	bl	b5ba0 <_ZN7MFRC52221PICC_IsNewCardPresentEv>
   b4436:	2800      	cmp	r0, #0
   b4438:	d058      	beq.n	b44ec <loop+0xc0>
  {
    // Error in comunications, i.e Tag broken:
    if (!mfrc522.PICC_ReadCardSerial())
   b443a:	482f      	ldr	r0, [pc, #188]	; (b44f8 <loop+0xcc>)
   b443c:	f001 fdf0 	bl	b6020 <_ZN7MFRC52219PICC_ReadCardSerialEv>
   b4440:	2800      	cmp	r0, #0
   b4442:	d053      	beq.n	b44ec <loop+0xc0>
    {
      // Not sure if restart loop or finish program.
      return;
    }

    display.clearDisplay();
   b4444:	4c2d      	ldr	r4, [pc, #180]	; (b44fc <loop+0xd0>)

    Serial.printlnf("\nSensores conectados: %d", numSensores(sensoresArray));
    int tagInfo[6];
    getTagID(tagInfo);

    Serial.println(esSensor(tagInfo[0]) ? "Es Sensor" : "Es Actuador");
   b4446:	4e2e      	ldr	r6, [pc, #184]	; (b4500 <loop+0xd4>)
    Serial.println(esAnalogico(tagInfo[1]) ? "Es Analogico" : "Es Digital");
   b4448:	4d2e      	ldr	r5, [pc, #184]	; (b4504 <loop+0xd8>)
    display.clearDisplay();
   b444a:	4620      	mov	r0, r4
   b444c:	f000 fe18 	bl	b5080 <_ZN16Adafruit_SSD130612clearDisplayEv>
    display.setTextSize(1.5);
   b4450:	2101      	movs	r1, #1
   b4452:	4620      	mov	r0, r4
   b4454:	f000 fc6f 	bl	b4d36 <_ZN12Adafruit_GFX11setTextSizeEh>
    @param   c   16-bit 5-6-5 Color to draw text with
    @note    For 'transparent' background, background and foreground
             are set to same color rather than using a separate flag.
  */
  /**********************************************************************/
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   b4458:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   b445c:	2200      	movs	r2, #0
   b445e:	e9c4 2304 	strd	r2, r3, [r4, #16]
    Serial.printlnf("\nSensores conectados: %d", numSensores(sensoresArray));
   b4462:	f002 fc77 	bl	b6d54 <_Z16_fetch_usbserialv>
   b4466:	4604      	mov	r4, r0
   b4468:	4827      	ldr	r0, [pc, #156]	; (b4508 <loop+0xdc>)
   b446a:	4928      	ldr	r1, [pc, #160]	; (b450c <loop+0xe0>)
   b446c:	f7ff ff8a 	bl	b4384 <_Z11numSensoresPb>
   b4470:	4602      	mov	r2, r0
   b4472:	4620      	mov	r0, r4
   b4474:	f7ff fe32 	bl	b40dc <_ZN5Print8printlnfEPKcz>
    getTagID(tagInfo);
   b4478:	4668      	mov	r0, sp
   b447a:	f7ff feb9 	bl	b41f0 <_Z8getTagIDPi>
    Serial.println(esSensor(tagInfo[0]) ? "Es Sensor" : "Es Actuador");
   b447e:	f002 fc69 	bl	b6d54 <_Z16_fetch_usbserialv>
   b4482:	4b23      	ldr	r3, [pc, #140]	; (b4510 <loop+0xe4>)
   b4484:	9900      	ldr	r1, [sp, #0]
   b4486:	2900      	cmp	r1, #0
   b4488:	bf0c      	ite	eq
   b448a:	4631      	moveq	r1, r6
   b448c:	4619      	movne	r1, r3
   b448e:	f002 fa2c 	bl	b68ea <_ZN5Print7printlnEPKc>
    Serial.println(esAnalogico(tagInfo[1]) ? "Es Analogico" : "Es Digital");
   b4492:	f002 fc5f 	bl	b6d54 <_Z16_fetch_usbserialv>
   b4496:	4b1f      	ldr	r3, [pc, #124]	; (b4514 <loop+0xe8>)
   b4498:	9901      	ldr	r1, [sp, #4]
   b449a:	2900      	cmp	r1, #0
   b449c:	bf0c      	ite	eq
   b449e:	4629      	moveq	r1, r5
   b44a0:	4619      	movne	r1, r3
   b44a2:	f002 fa22 	bl	b68ea <_ZN5Print7printlnEPKc>

    char *puerto = asignarPuerto(tagInfo[1]);
   b44a6:	9801      	ldr	r0, [sp, #4]
   b44a8:	f7ff fef6 	bl	b4298 <_Z13asignarPuertoi>
   b44ac:	4604      	mov	r4, r0

    Serial.printlnf("Puerto: %s", puerto);
   b44ae:	f002 fc51 	bl	b6d54 <_Z16_fetch_usbserialv>
   b44b2:	4919      	ldr	r1, [pc, #100]	; (b4518 <loop+0xec>)
   b44b4:	4622      	mov	r2, r4
   b44b6:	f7ff fe11 	bl	b40dc <_ZN5Print8printlnfEPKcz>

    // El puerto disponible, si no es vacio, sera asignado al dispositivo.
    if (strcmp(puerto, "") != 0)
   b44ba:	7823      	ldrb	r3, [r4, #0]
   b44bc:	b133      	cbz	r3, b44cc <loop+0xa0>
    {
      if (esSensor(tagInfo[0]))
   b44be:	9b00      	ldr	r3, [sp, #0]
   b44c0:	b9b3      	cbnz	r3, b44f0 <loop+0xc4>
      {
        Serial.println("Es Sensor");
   b44c2:	f002 fc47 	bl	b6d54 <_Z16_fetch_usbserialv>
   b44c6:	4631      	mov	r1, r6
      }
      else
      {
        Serial.println("Es Analogico");
   b44c8:	f002 fa0f 	bl	b68ea <_ZN5Print7printlnEPKc>
      }
    }
    Serial.printlnf("\nSensorState 0: %d", sensoresArray[0]);
   b44cc:	4c0e      	ldr	r4, [pc, #56]	; (b4508 <loop+0xdc>)
   b44ce:	f002 fc41 	bl	b6d54 <_Z16_fetch_usbserialv>
   b44d2:	7822      	ldrb	r2, [r4, #0]
   b44d4:	4911      	ldr	r1, [pc, #68]	; (b451c <loop+0xf0>)
   b44d6:	f7ff fe01 	bl	b40dc <_ZN5Print8printlnfEPKcz>
    Serial.printlnf("\nSensorState 1: %d", sensoresArray[1]);
   b44da:	f002 fc3b 	bl	b6d54 <_Z16_fetch_usbserialv>
   b44de:	7862      	ldrb	r2, [r4, #1]
   b44e0:	490f      	ldr	r1, [pc, #60]	; (b4520 <loop+0xf4>)
   b44e2:	f7ff fdfb 	bl	b40dc <_ZN5Print8printlnfEPKcz>

    display.display();
   b44e6:	4805      	ldr	r0, [pc, #20]	; (b44fc <loop+0xd0>)
   b44e8:	f001 f832 	bl	b5550 <_ZN16Adafruit_SSD13067displayEv>

  } // Fin loop
}
   b44ec:	b006      	add	sp, #24
   b44ee:	bd70      	pop	{r4, r5, r6, pc}
        Serial.println("Es Analogico");
   b44f0:	f002 fc30 	bl	b6d54 <_Z16_fetch_usbserialv>
   b44f4:	4629      	mov	r1, r5
   b44f6:	e7e7      	b.n	b44c8 <loop+0x9c>
   b44f8:	2003e6ab 	.word	0x2003e6ab
   b44fc:	2003e634 	.word	0x2003e634
   b4500:	000b749b 	.word	0x000b749b
   b4504:	000b74b1 	.word	0x000b74b1
   b4508:	2003e6c0 	.word	0x2003e6c0
   b450c:	000b74c9 	.word	0x000b74c9
   b4510:	000b74a5 	.word	0x000b74a5
   b4514:	000b74be 	.word	0x000b74be
   b4518:	000b74e2 	.word	0x000b74e2
   b451c:	000b74ed 	.word	0x000b74ed
   b4520:	000b7500 	.word	0x000b7500

000b4524 <_GLOBAL__sub_I_trailerBlock>:
}
   b4524:	b510      	push	{r4, lr}
String dispositivos[2] = {"-", "-"};
   b4526:	4c10      	ldr	r4, [pc, #64]	; (b4568 <_GLOBAL__sub_I_trailerBlock+0x44>)
Adafruit_SSD1306 display(-1);
   b4528:	4810      	ldr	r0, [pc, #64]	; (b456c <_GLOBAL__sub_I_trailerBlock+0x48>)
   b452a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   b452e:	f000 fcb3 	bl	b4e98 <_ZN16Adafruit_SSD1306C1Ea>
String dispositivos[2] = {"-", "-"};
   b4532:	490f      	ldr	r1, [pc, #60]	; (b4570 <_GLOBAL__sub_I_trailerBlock+0x4c>)
   b4534:	4620      	mov	r0, r4
   b4536:	f002 fb2d 	bl	b6b94 <_ZN6StringC1EPK19__FlashStringHelper>
   b453a:	490d      	ldr	r1, [pc, #52]	; (b4570 <_GLOBAL__sub_I_trailerBlock+0x4c>)
   b453c:	f104 0010 	add.w	r0, r4, #16
   b4540:	f002 fb28 	bl	b6b94 <_ZN6StringC1EPK19__FlashStringHelper>
MFRC522 mfrc522(SS_PIN, RST_PIN);
   b4544:	2208      	movs	r2, #8
   b4546:	480b      	ldr	r0, [pc, #44]	; (b4574 <_GLOBAL__sub_I_trailerBlock+0x50>)
   b4548:	2110      	movs	r1, #16
   b454a:	f001 f8b7 	bl	b56bc <_ZN7MFRC522C1Ehh>

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b454e:	4b0a      	ldr	r3, [pc, #40]	; (b4578 <_GLOBAL__sub_I_trailerBlock+0x54>)
   b4550:	2200      	movs	r2, #0
   b4552:	e9c3 2200 	strd	r2, r2, [r3]
    SleepResult() {}
   b4556:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
   b455a:	609a      	str	r2, [r3, #8]
   b455c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b4560:	2002      	movs	r0, #2
   b4562:	f001 bed7 	b.w	b6314 <set_system_mode>
   b4566:	bf00      	nop
   b4568:	2003e684 	.word	0x2003e684
   b456c:	2003e634 	.word	0x2003e634
   b4570:	000b7513 	.word	0x000b7513
   b4574:	2003e6ab 	.word	0x2003e6ab
   b4578:	2003e628 	.word	0x2003e628

000b457c <_ZN12Adafruit_GFX9writeLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   b457c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4580:	b085      	sub	sp, #20
   b4582:	461f      	mov	r7, r3
   b4584:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
   b4588:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
#if defined(ESP8266)
    yield();
#endif
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   b458c:	eba8 0902 	sub.w	r9, r8, r2
   b4590:	eba7 0a01 	sub.w	sl, r7, r1
   b4594:	f1b9 0f00 	cmp.w	r9, #0
   b4598:	bfb8      	it	lt
   b459a:	f1c9 0900 	rsblt	r9, r9, #0
   b459e:	f1ba 0f00 	cmp.w	sl, #0
   b45a2:	bfb8      	it	lt
   b45a4:	f1ca 0a00 	rsblt	sl, sl, #0
    if (steep) {
   b45a8:	45d1      	cmp	r9, sl
        uint16_t color) {
   b45aa:	4683      	mov	fp, r0
   b45ac:	460c      	mov	r4, r1
   b45ae:	4615      	mov	r5, r2
    if (steep) {
   b45b0:	dd04      	ble.n	b45bc <_ZN12Adafruit_GFX9writeLineEsssst+0x40>
   b45b2:	463a      	mov	r2, r7
        _swap_int16_t(x0, y0);
   b45b4:	462c      	mov	r4, r5
        _swap_int16_t(x1, y1);
   b45b6:	4647      	mov	r7, r8
        _swap_int16_t(x0, y0);
   b45b8:	460d      	mov	r5, r1
        _swap_int16_t(x1, y1);
   b45ba:	4690      	mov	r8, r2
    }

    if (x0 > x1) {
   b45bc:	42bc      	cmp	r4, r7
   b45be:	dd05      	ble.n	b45cc <_ZN12Adafruit_GFX9writeLineEsssst+0x50>
   b45c0:	462a      	mov	r2, r5
        _swap_int16_t(x0, x1);
        _swap_int16_t(y0, y1);
   b45c2:	4645      	mov	r5, r8
   b45c4:	4690      	mov	r8, r2
    if (x0 > x1) {
   b45c6:	4622      	mov	r2, r4
   b45c8:	463c      	mov	r4, r7
   b45ca:	4617      	mov	r7, r2
    }

    int16_t dx, dy;
    dx = x1 - x0;
   b45cc:	1b3e      	subs	r6, r7, r4
   b45ce:	b2b2      	uxth	r2, r6
   b45d0:	9200      	str	r2, [sp, #0]
    dy = abs(y1 - y0);
   b45d2:	eba8 0205 	sub.w	r2, r8, r5
   b45d6:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
   b45da:	eba1 71e2 	sub.w	r1, r1, r2, asr #31

    int16_t err = dx / 2;
   b45de:	f3c6 32c0 	ubfx	r2, r6, #15, #1
   b45e2:	fa02 f686 	sxtah	r6, r2, r6
    int16_t ystep;

    if (y0 < y1) {
        ystep = 1;
    } else {
        ystep = -1;
   b45e6:	4545      	cmp	r5, r8
   b45e8:	bfb4      	ite	lt
   b45ea:	2201      	movlt	r2, #1
   b45ec:	f04f 32ff 	movge.w	r2, #4294967295	; 0xffffffff
    dy = abs(y1 - y0);
   b45f0:	9101      	str	r1, [sp, #4]
    int16_t err = dx / 2;
   b45f2:	1076      	asrs	r6, r6, #1
        ystep = -1;
   b45f4:	9202      	str	r2, [sp, #8]
    }

    for (; x0<=x1; x0++) {
   b45f6:	42bc      	cmp	r4, r7
   b45f8:	dc1c      	bgt.n	b4634 <_ZN12Adafruit_GFX9writeLineEsssst+0xb8>
        if (steep) {
            writePixel(y0, x0, color);
   b45fa:	f8db 2000 	ldr.w	r2, [fp]
   b45fe:	9303      	str	r3, [sp, #12]
        if (steep) {
   b4600:	45d1      	cmp	r9, sl
            writePixel(y0, x0, color);
   b4602:	f8d2 8018 	ldr.w	r8, [r2, #24]
   b4606:	bfc7      	ittee	gt
   b4608:	4629      	movgt	r1, r5
   b460a:	4622      	movgt	r2, r4
        } else {
            writePixel(x0, y0, color);
   b460c:	462a      	movle	r2, r5
   b460e:	4621      	movle	r1, r4
   b4610:	4658      	mov	r0, fp
   b4612:	47c0      	blx	r8
        }
        err -= dy;
   b4614:	9a01      	ldr	r2, [sp, #4]
            writePixel(x0, y0, color);
   b4616:	9b03      	ldr	r3, [sp, #12]
        err -= dy;
   b4618:	1ab6      	subs	r6, r6, r2
   b461a:	b2b1      	uxth	r1, r6
   b461c:	b236      	sxth	r6, r6
        if (err < 0) {
   b461e:	2e00      	cmp	r6, #0
   b4620:	da05      	bge.n	b462e <_ZN12Adafruit_GFX9writeLineEsssst+0xb2>
            y0 += ystep;
   b4622:	9a02      	ldr	r2, [sp, #8]
   b4624:	4415      	add	r5, r2
            err += dx;
   b4626:	9a00      	ldr	r2, [sp, #0]
   b4628:	1856      	adds	r6, r2, r1
            y0 += ystep;
   b462a:	b22d      	sxth	r5, r5
            err += dx;
   b462c:	b236      	sxth	r6, r6
    for (; x0<=x1; x0++) {
   b462e:	3401      	adds	r4, #1
   b4630:	b224      	sxth	r4, r4
   b4632:	e7e0      	b.n	b45f6 <_ZN12Adafruit_GFX9writeLineEsssst+0x7a>
        }
    }
}
   b4634:	b005      	add	sp, #20
   b4636:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b463a <_ZN12Adafruit_GFX10startWriteEv>:
/*!
   @brief    Start a display-writing routine, overwrite in subclasses.
*/
/**************************************************************************/
void Adafruit_GFX::startWrite(){
}
   b463a:	4770      	bx	lr

000b463c <_ZN12Adafruit_GFX10writePixelEsst>:
    @param   x   x coordinate
    @param   y   y coordinate
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writePixel(int16_t x, int16_t y, uint16_t color){
   b463c:	b410      	push	{r4}
    drawPixel(x, y, color);
   b463e:	6804      	ldr	r4, [r0, #0]
   b4640:	6924      	ldr	r4, [r4, #16]
   b4642:	46a4      	mov	ip, r4
}
   b4644:	f85d 4b04 	ldr.w	r4, [sp], #4
    drawPixel(x, y, color);
   b4648:	4760      	bx	ip

000b464a <_ZN12Adafruit_GFX14writeFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   b464a:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Can be just writeLine(x, y, x, y+h-1, color);
    // or writeFillRect(x, y, 1, h, color);
    drawFastVLine(x, y, h, color);
   b464c:	6804      	ldr	r4, [r0, #0]
        int16_t h, uint16_t color) {
   b464e:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastVLine(x, y, h, color);
   b4652:	9502      	str	r5, [sp, #8]
   b4654:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   b4656:	46a4      	mov	ip, r4
}
   b4658:	bc30      	pop	{r4, r5}
    drawFastVLine(x, y, h, color);
   b465a:	4760      	bx	ip

000b465c <_ZN12Adafruit_GFX14writeFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   b465c:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Example: writeLine(x, y, x+w-1, y, color);
    // or writeFillRect(x, y, w, 1, color);
    drawFastHLine(x, y, w, color);
   b465e:	6804      	ldr	r4, [r0, #0]
        int16_t w, uint16_t color) {
   b4660:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastHLine(x, y, w, color);
   b4664:	9502      	str	r5, [sp, #8]
   b4666:	6be4      	ldr	r4, [r4, #60]	; 0x3c
   b4668:	46a4      	mov	ip, r4
}
   b466a:	bc30      	pop	{r4, r5}
    drawFastHLine(x, y, w, color);
   b466c:	4760      	bx	ip

000b466e <_ZN12Adafruit_GFX13writeFillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b466e:	b470      	push	{r4, r5, r6}
   b4670:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
   b4674:	f8bd 6010 	ldrh.w	r6, [sp, #16]
    // Overwrite in subclasses if desired!
    fillRect(x,y,w,h,color);
   b4678:	6804      	ldr	r4, [r0, #0]
   b467a:	e9cd 5603 	strd	r5, r6, [sp, #12]
   b467e:	6c24      	ldr	r4, [r4, #64]	; 0x40
   b4680:	46a4      	mov	ip, r4
}
   b4682:	bc70      	pop	{r4, r5, r6}
    fillRect(x,y,w,h,color);
   b4684:	4760      	bx	ip

000b4686 <_ZN12Adafruit_GFX13drawFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   b4686:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b468a:	461c      	mov	r4, r3
    startWrite();
   b468c:	6803      	ldr	r3, [r0, #0]
        int16_t h, uint16_t color) {
   b468e:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   b4692:	695b      	ldr	r3, [r3, #20]
        int16_t h, uint16_t color) {
   b4694:	4605      	mov	r5, r0
   b4696:	4616      	mov	r6, r2
    writeLine(x, y, x, y+h-1, color);
   b4698:	3c01      	subs	r4, #1
   b469a:	4434      	add	r4, r6
        int16_t h, uint16_t color) {
   b469c:	460f      	mov	r7, r1
    writeLine(x, y, x, y+h-1, color);
   b469e:	b224      	sxth	r4, r4
    startWrite();
   b46a0:	4798      	blx	r3
    writeLine(x, y, x, y+h-1, color);
   b46a2:	682b      	ldr	r3, [r5, #0]
   b46a4:	f8cd 8004 	str.w	r8, [sp, #4]
   b46a8:	9400      	str	r4, [sp, #0]
   b46aa:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   b46ac:	4628      	mov	r0, r5
   b46ae:	463b      	mov	r3, r7
   b46b0:	4632      	mov	r2, r6
   b46b2:	4639      	mov	r1, r7
   b46b4:	47a0      	blx	r4
    endWrite();
   b46b6:	682b      	ldr	r3, [r5, #0]
   b46b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b46ba:	4628      	mov	r0, r5
}
   b46bc:	b002      	add	sp, #8
   b46be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   b46c2:	4718      	bx	r3

000b46c4 <_ZN12Adafruit_GFX13drawFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   b46c4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b46c8:	461d      	mov	r5, r3
    startWrite();
   b46ca:	6803      	ldr	r3, [r0, #0]
        int16_t w, uint16_t color) {
   b46cc:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   b46d0:	695b      	ldr	r3, [r3, #20]
        int16_t w, uint16_t color) {
   b46d2:	4604      	mov	r4, r0
   b46d4:	4617      	mov	r7, r2
   b46d6:	460e      	mov	r6, r1
    startWrite();
   b46d8:	4798      	blx	r3
    writeLine(x, y, x+w-1, y, color);
   b46da:	e9cd 7800 	strd	r7, r8, [sp]
   b46de:	6822      	ldr	r2, [r4, #0]
   b46e0:	1e6b      	subs	r3, r5, #1
   b46e2:	4433      	add	r3, r6
   b46e4:	6a95      	ldr	r5, [r2, #40]	; 0x28
   b46e6:	4620      	mov	r0, r4
   b46e8:	b21b      	sxth	r3, r3
   b46ea:	463a      	mov	r2, r7
   b46ec:	4631      	mov	r1, r6
   b46ee:	47a8      	blx	r5
    endWrite();
   b46f0:	6823      	ldr	r3, [r4, #0]
   b46f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b46f4:	4620      	mov	r0, r4
}
   b46f6:	b002      	add	sp, #8
   b46f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   b46fc:	4718      	bx	r3

000b46fe <_ZN12Adafruit_GFX8fillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b46fe:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b4702:	461e      	mov	r6, r3
    startWrite();
   b4704:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   b4706:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
    startWrite();
   b470a:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   b470c:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   b4710:	460c      	mov	r4, r1
   b4712:	4605      	mov	r5, r0
   b4714:	4617      	mov	r7, r2
    startWrite();
   b4716:	4798      	blx	r3
    for (int16_t i=x; i<x+w; i++) {
   b4718:	4426      	add	r6, r4
   b471a:	42b4      	cmp	r4, r6
        writeFastVLine(i, y, h, color);
   b471c:	682b      	ldr	r3, [r5, #0]
    for (int16_t i=x; i<x+w; i++) {
   b471e:	da0b      	bge.n	b4738 <_ZN12Adafruit_GFX8fillRectEsssst+0x3a>
        writeFastVLine(i, y, h, color);
   b4720:	f8cd 8000 	str.w	r8, [sp]
   b4724:	f8d3 a020 	ldr.w	sl, [r3, #32]
   b4728:	4621      	mov	r1, r4
   b472a:	464b      	mov	r3, r9
   b472c:	463a      	mov	r2, r7
   b472e:	4628      	mov	r0, r5
   b4730:	3401      	adds	r4, #1
   b4732:	47d0      	blx	sl
    for (int16_t i=x; i<x+w; i++) {
   b4734:	b224      	sxth	r4, r4
   b4736:	e7f0      	b.n	b471a <_ZN12Adafruit_GFX8fillRectEsssst+0x1c>
    }
    endWrite();
   b4738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b473a:	4628      	mov	r0, r5
}
   b473c:	b002      	add	sp, #8
   b473e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   b4742:	4718      	bx	r3

000b4744 <_ZN12Adafruit_GFX10fillScreenEt>:
/*!
   @brief    Fill the screen completely with one color. Update in subclasses if desired!
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillScreen(uint16_t color) {
   b4744:	b513      	push	{r0, r1, r4, lr}
    fillRect(0, 0, _width, _height, color);
   b4746:	6802      	ldr	r2, [r0, #0]
   b4748:	9101      	str	r1, [sp, #4]
   b474a:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
   b474e:	9100      	str	r1, [sp, #0]
   b4750:	6c14      	ldr	r4, [r2, #64]	; 0x40
   b4752:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b4756:	2200      	movs	r2, #0
   b4758:	4611      	mov	r1, r2
   b475a:	47a0      	blx	r4
}
   b475c:	b002      	add	sp, #8
   b475e:	bd10      	pop	{r4, pc}

000b4760 <_ZN12Adafruit_GFX8drawLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   b4760:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    // Update in subclasses if desired!
    if(x0 == x1){
   b4764:	4299      	cmp	r1, r3
        uint16_t color) {
   b4766:	4616      	mov	r6, r2
   b4768:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
   b476c:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
        if(y0 > y1) _swap_int16_t(y0, y1);
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b4770:	6802      	ldr	r2, [r0, #0]
        uint16_t color) {
   b4772:	4680      	mov	r8, r0
   b4774:	460d      	mov	r5, r1
   b4776:	461c      	mov	r4, r3
    if(x0 == x1){
   b4778:	d113      	bne.n	b47a2 <_ZN12Adafruit_GFX8drawLineEsssst+0x42>
        if(y0 > y1) _swap_int16_t(y0, y1);
   b477a:	42be      	cmp	r6, r7
   b477c:	bfc8      	it	gt
   b477e:	4633      	movgt	r3, r6
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b4780:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
        if(y0 > y1) _swap_int16_t(y0, y1);
   b4784:	bfc4      	itt	gt
   b4786:	463e      	movgt	r6, r7
   b4788:	461f      	movgt	r7, r3
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b478a:	1c7b      	adds	r3, r7, #1
   b478c:	6b94      	ldr	r4, [r2, #56]	; 0x38
   b478e:	1b9b      	subs	r3, r3, r6
    } else if(y0 == y1){
        if(x0 > x1) _swap_int16_t(x0, x1);
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b4790:	b21b      	sxth	r3, r3
   b4792:	4632      	mov	r2, r6
   b4794:	4629      	mov	r1, r5
   b4796:	4640      	mov	r0, r8
   b4798:	46a4      	mov	ip, r4
    } else {
        startWrite();
        writeLine(x0, y0, x1, y1, color);
        endWrite();
    }
}
   b479a:	b003      	add	sp, #12
   b479c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b47a0:	4760      	bx	ip
    } else if(y0 == y1){
   b47a2:	42be      	cmp	r6, r7
   b47a4:	d10a      	bne.n	b47bc <_ZN12Adafruit_GFX8drawLineEsssst+0x5c>
        if(x0 > x1) _swap_int16_t(x0, x1);
   b47a6:	4299      	cmp	r1, r3
   b47a8:	bfc2      	ittt	gt
   b47aa:	460b      	movgt	r3, r1
   b47ac:	4625      	movgt	r5, r4
   b47ae:	461c      	movgt	r4, r3
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b47b0:	1c63      	adds	r3, r4, #1
   b47b2:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   b47b6:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b47b8:	1b5b      	subs	r3, r3, r5
   b47ba:	e7e9      	b.n	b4790 <_ZN12Adafruit_GFX8drawLineEsssst+0x30>
        startWrite();
   b47bc:	6953      	ldr	r3, [r2, #20]
   b47be:	4798      	blx	r3
        writeLine(x0, y0, x1, y1, color);
   b47c0:	e9cd 7900 	strd	r7, r9, [sp]
   b47c4:	f8d8 3000 	ldr.w	r3, [r8]
   b47c8:	4640      	mov	r0, r8
   b47ca:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   b47cc:	4632      	mov	r2, r6
   b47ce:	4623      	mov	r3, r4
   b47d0:	4629      	mov	r1, r5
   b47d2:	47b8      	blx	r7
        endWrite();
   b47d4:	f8d8 3000 	ldr.w	r3, [r8]
   b47d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b47da:	4640      	mov	r0, r8
}
   b47dc:	b003      	add	sp, #12
   b47de:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        endWrite();
   b47e2:	4718      	bx	r3

000b47e4 <_ZN12Adafruit_GFX8drawRectEsssst>:
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b47e4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b47e8:	461d      	mov	r5, r3
    startWrite();
   b47ea:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   b47ec:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
    startWrite();
   b47f0:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   b47f2:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
   b47f6:	4604      	mov	r4, r0
   b47f8:	460f      	mov	r7, r1
   b47fa:	4616      	mov	r6, r2
    startWrite();
   b47fc:	4798      	blx	r3
    writeFastHLine(x, y, w, color);
   b47fe:	6823      	ldr	r3, [r4, #0]
   b4800:	f8cd 8000 	str.w	r8, [sp]
   b4804:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   b4808:	4632      	mov	r2, r6
   b480a:	462b      	mov	r3, r5
   b480c:	4639      	mov	r1, r7
   b480e:	4620      	mov	r0, r4
   b4810:	47d0      	blx	sl
    writeFastHLine(x, y+h-1, w, color);
   b4812:	6823      	ldr	r3, [r4, #0]
   b4814:	f8cd 8000 	str.w	r8, [sp]
   b4818:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
   b481c:	4432      	add	r2, r6
   b481e:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   b4822:	4639      	mov	r1, r7
   b4824:	462b      	mov	r3, r5
   b4826:	4620      	mov	r0, r4
   b4828:	b212      	sxth	r2, r2
   b482a:	47d0      	blx	sl
    writeFastVLine(x, y, h, color);
   b482c:	6823      	ldr	r3, [r4, #0]
   b482e:	f8cd 8000 	str.w	r8, [sp]
   b4832:	f8d3 a020 	ldr.w	sl, [r3, #32]
   b4836:	4632      	mov	r2, r6
   b4838:	464b      	mov	r3, r9
   b483a:	4639      	mov	r1, r7
   b483c:	4620      	mov	r0, r4
   b483e:	47d0      	blx	sl
    writeFastVLine(x+w-1, y, h, color);
   b4840:	1e6b      	subs	r3, r5, #1
   b4842:	19d9      	adds	r1, r3, r7
   b4844:	6823      	ldr	r3, [r4, #0]
   b4846:	f8cd 8000 	str.w	r8, [sp]
   b484a:	6a1d      	ldr	r5, [r3, #32]
   b484c:	4620      	mov	r0, r4
   b484e:	464b      	mov	r3, r9
   b4850:	4632      	mov	r2, r6
   b4852:	b209      	sxth	r1, r1
   b4854:	47a8      	blx	r5
    endWrite();
   b4856:	6823      	ldr	r3, [r4, #0]
   b4858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b485a:	4620      	mov	r0, r4
}
   b485c:	b002      	add	sp, #8
   b485e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   b4862:	4718      	bx	r3

000b4864 <_ZN12Adafruit_GFX13invertDisplayEb>:
    @param   i  True if you want to invert, false to make 'normal'
*/
/**************************************************************************/
void Adafruit_GFX::invertDisplay(boolean i) {
    // Do nothing, must be subclassed if supported by hardware
}
   b4864:	4770      	bx	lr

000b4866 <_ZN12Adafruit_GFX11setRotationEh>:
    rotation = (x & 3);
   b4866:	f001 0303 	and.w	r3, r1, #3
            _height = HEIGHT;
   b486a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
    rotation = (x & 3);
   b486e:	7683      	strb	r3, [r0, #26]
    switch(rotation) {
   b4870:	07c9      	lsls	r1, r1, #31
            _width  = WIDTH;
   b4872:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   b4876:	bf59      	ittee	pl
   b4878:	8183      	strhpl	r3, [r0, #12]
            _height = HEIGHT;
   b487a:	81c2      	strhpl	r2, [r0, #14]
            _width  = HEIGHT;
   b487c:	8182      	strhmi	r2, [r0, #12]
            _height = WIDTH;
   b487e:	81c3      	strhmi	r3, [r0, #14]
}
   b4880:	4770      	bx	lr
	...

000b4884 <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   b4884:	b530      	push	{r4, r5, lr}
WIDTH(w), HEIGHT(h)
   b4886:	8142      	strh	r2, [r0, #10]
    _height   = HEIGHT;
   b4888:	81c2      	strh	r2, [r0, #14]
    textsize_x = textsize_y  = 1;
   b488a:	4a07      	ldr	r2, [pc, #28]	; (b48a8 <_ZN12Adafruit_GFXC1Ess+0x24>)
WIDTH(w), HEIGHT(h)
   b488c:	4d07      	ldr	r5, [pc, #28]	; (b48ac <_ZN12Adafruit_GFXC1Ess+0x28>)
   b488e:	8101      	strh	r1, [r0, #8]
    Print() : write_error(0) {}
   b4890:	2400      	movs	r4, #0
    _width    = WIDTH;
   b4892:	8181      	strh	r1, [r0, #12]
    textsize_x = textsize_y  = 1;
   b4894:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   b4898:	e9c0 1205 	strd	r1, r2, [r0, #20]
   b489c:	6044      	str	r4, [r0, #4]
WIDTH(w), HEIGHT(h)
   b489e:	6005      	str	r5, [r0, #0]
    cursor_y  = cursor_x    = 0;
   b48a0:	6104      	str	r4, [r0, #16]
    _cp437    = false;
   b48a2:	7704      	strb	r4, [r0, #28]
    gfxFont   = NULL;
   b48a4:	6204      	str	r4, [r0, #32]
}
   b48a6:	bd30      	pop	{r4, r5, pc}
   b48a8:	01000101 	.word	0x01000101
   b48ac:	000b7a20 	.word	0x000b7a20

000b48b0 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>:
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b48b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b48b4:	b089      	sub	sp, #36	; 0x24
   b48b6:	e9cd 1202 	strd	r1, r2, [sp, #8]
    startWrite();
   b48ba:	6802      	ldr	r2, [r0, #0]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b48bc:	f9bd 8048 	ldrsh.w	r8, [sp, #72]	; 0x48
   b48c0:	9304      	str	r3, [sp, #16]
   b48c2:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
    startWrite();
   b48c6:	6952      	ldr	r2, [r2, #20]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b48c8:	9305      	str	r3, [sp, #20]
   b48ca:	f8bd a050 	ldrh.w	sl, [sp, #80]	; 0x50
   b48ce:	4604      	mov	r4, r0
    startWrite();
   b48d0:	4790      	blx	r2
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   b48d2:	f118 0207 	adds.w	r2, r8, #7
    startWrite();
   b48d6:	f04f 0600 	mov.w	r6, #0
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   b48da:	bf48      	it	mi
   b48dc:	f108 020e 	addmi.w	r2, r8, #14
   b48e0:	ea4f 0be2 	mov.w	fp, r2, asr #3
    startWrite();
   b48e4:	9601      	str	r6, [sp, #4]
    uint8_t byte = 0;
   b48e6:	4635      	mov	r5, r6
   b48e8:	9b03      	ldr	r3, [sp, #12]
   b48ea:	9a01      	ldr	r2, [sp, #4]
    for(int16_t j=0; j<h; j++, y++) {
   b48ec:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
   b48f0:	189a      	adds	r2, r3, r2
   b48f2:	9b05      	ldr	r3, [sp, #20]
   b48f4:	428b      	cmp	r3, r1
   b48f6:	b212      	sxth	r2, r2
   b48f8:	dd27      	ble.n	b494a <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x9a>
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b48fa:	9b04      	ldr	r3, [sp, #16]
   b48fc:	4433      	add	r3, r6
    for(int16_t j=0; j<h; j++, y++) {
   b48fe:	f04f 0900 	mov.w	r9, #0
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b4902:	9306      	str	r3, [sp, #24]
   b4904:	fa0f f089 	sxth.w	r0, r9
        for(int16_t i=0; i<w; i++) {
   b4908:	4580      	cmp	r8, r0
   b490a:	fa1f f189 	uxth.w	r1, r9
   b490e:	dd17      	ble.n	b4940 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x90>
            if(i & 7) byte <<= 1;
   b4910:	074f      	lsls	r7, r1, #29
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b4912:	bf05      	ittet	eq
   b4914:	9b06      	ldreq	r3, [sp, #24]
   b4916:	10c0      	asreq	r0, r0, #3
            if(i & 7) byte <<= 1;
   b4918:	006d      	lslne	r5, r5, #1
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b491a:	5c1d      	ldrbeq	r5, [r3, r0]
            if(i & 7) byte <<= 1;
   b491c:	bf18      	it	ne
   b491e:	b2ed      	uxtbne	r5, r5
            if(byte & 0x80) writePixel(x+i, y, color);
   b4920:	062b      	lsls	r3, r5, #24
   b4922:	d50a      	bpl.n	b493a <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x8a>
   b4924:	9b02      	ldr	r3, [sp, #8]
   b4926:	6820      	ldr	r0, [r4, #0]
   b4928:	9207      	str	r2, [sp, #28]
   b492a:	4419      	add	r1, r3
   b492c:	6983      	ldr	r3, [r0, #24]
   b492e:	b209      	sxth	r1, r1
   b4930:	461f      	mov	r7, r3
   b4932:	4620      	mov	r0, r4
   b4934:	4653      	mov	r3, sl
   b4936:	47b8      	blx	r7
   b4938:	9a07      	ldr	r2, [sp, #28]
        for(int16_t i=0; i<w; i++) {
   b493a:	f109 0901 	add.w	r9, r9, #1
   b493e:	e7e1      	b.n	b4904 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x54>
    for(int16_t j=0; j<h; j++, y++) {
   b4940:	9b01      	ldr	r3, [sp, #4]
   b4942:	3301      	adds	r3, #1
   b4944:	9301      	str	r3, [sp, #4]
   b4946:	445e      	add	r6, fp
   b4948:	e7ce      	b.n	b48e8 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x38>
    endWrite();
   b494a:	6823      	ldr	r3, [r4, #0]
   b494c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b494e:	4620      	mov	r0, r4
}
   b4950:	b009      	add	sp, #36	; 0x24
   b4952:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    endWrite();
   b4956:	4718      	bx	r3

000b4958 <_ZN12Adafruit_GFX8drawCharEsshtthh>:
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   b4958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b495c:	ed2d 8b02 	vpush	{d8}
   b4960:	b091      	sub	sp, #68	; 0x44
   b4962:	4616      	mov	r6, r2
    if(!gfxFont) { // 'Classic' built-in font
   b4964:	6a02      	ldr	r2, [r0, #32]
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   b4966:	f8bd 8074 	ldrh.w	r8, [sp, #116]	; 0x74
   b496a:	f89d 5078 	ldrb.w	r5, [sp, #120]	; 0x78
   b496e:	f89d 407c 	ldrb.w	r4, [sp, #124]	; 0x7c
   b4972:	9103      	str	r1, [sp, #12]
   b4974:	461f      	mov	r7, r3
   b4976:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
   b497a:	9304      	str	r3, [sp, #16]
   b497c:	4683      	mov	fp, r0
    if(!gfxFont) { // 'Classic' built-in font
   b497e:	2a00      	cmp	r2, #0
   b4980:	f040 80c5 	bne.w	b4b0e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1b6>
        if((x >= _width)            || // Clip right
   b4984:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b4988:	428b      	cmp	r3, r1
   b498a:	f340 814c 	ble.w	b4c26 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
   b498e:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
   b4992:	42b3      	cmp	r3, r6
   b4994:	f340 8147 	ble.w	b4c26 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((x + 6 * size_x - 1) < 0) || // Clip left
   b4998:	2306      	movs	r3, #6
   b499a:	fb13 1305 	smlabb	r3, r3, r5, r1
           (y >= _height)           || // Clip bottom
   b499e:	2b00      	cmp	r3, #0
   b49a0:	f340 8141 	ble.w	b4c26 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((y + 8 * size_y - 1) < 0))   // Clip top
   b49a4:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
           ((x + 6 * size_x - 1) < 0) || // Clip left
   b49a8:	2b00      	cmp	r3, #0
   b49aa:	f340 813c 	ble.w	b4c26 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
        if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
   b49ae:	7f03      	ldrb	r3, [r0, #28]
   b49b0:	b91b      	cbnz	r3, b49ba <_ZN12Adafruit_GFX8drawCharEsshtthh+0x62>
   b49b2:	2faf      	cmp	r7, #175	; 0xaf
   b49b4:	bf84      	itt	hi
   b49b6:	3701      	addhi	r7, #1
   b49b8:	b2ff      	uxtbhi	r7, r7
        startWrite();
   b49ba:	f8db 3000 	ldr.w	r3, [fp]
   b49be:	4658      	mov	r0, fp
   b49c0:	695b      	ldr	r3, [r3, #20]
   b49c2:	4798      	blx	r3
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b49c4:	2205      	movs	r2, #5
   b49c6:	9209      	str	r2, [sp, #36]	; 0x24
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   b49c8:	2200      	movs	r2, #0
   b49ca:	9205      	str	r2, [sp, #20]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b49cc:	4a98      	ldr	r2, [pc, #608]	; (b4c30 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2d8>)
   b49ce:	eb07 0387 	add.w	r3, r7, r7, lsl #2
   b49d2:	18d3      	adds	r3, r2, r3
   b49d4:	930c      	str	r3, [sp, #48]	; 0x30
                        writePixel(x+i, y+j, color);
   b49d6:	b2b3      	uxth	r3, r6
   b49d8:	9306      	str	r3, [sp, #24]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b49da:	9a05      	ldr	r2, [sp, #20]
   b49dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b49de:	5c9b      	ldrb	r3, [r3, r2]
   b49e0:	9307      	str	r3, [sp, #28]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b49e2:	b2ab      	uxth	r3, r5
   b49e4:	930b      	str	r3, [sp, #44]	; 0x2c
   b49e6:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   b49ea:	9308      	str	r3, [sp, #32]
   b49ec:	9b03      	ldr	r3, [sp, #12]
   b49ee:	fb02 f905 	mul.w	r9, r2, r5
   b49f2:	fa19 f983 	uxtah	r9, r9, r3
   b49f6:	fa0f f389 	sxth.w	r3, r9
   b49fa:	ee08 3a10 	vmov	s16, r3
   b49fe:	2308      	movs	r3, #8
   b4a00:	930a      	str	r3, [sp, #40]	; 0x28
                        writePixel(x+i, y+j, bg);
   b4a02:	9b03      	ldr	r3, [sp, #12]
   b4a04:	eb02 0a03 	add.w	sl, r2, r3
            for(int8_t j=0; j<8; j++, line >>= 1) {
   b4a08:	f04f 0900 	mov.w	r9, #0
                        writePixel(x+i, y+j, bg);
   b4a0c:	fa0f fa8a 	sxth.w	sl, sl
                if(line & 1) {
   b4a10:	9a07      	ldr	r2, [sp, #28]
                        writePixel(x+i, y+j, color);
   b4a12:	f8db 3000 	ldr.w	r3, [fp]
                if(line & 1) {
   b4a16:	07d2      	lsls	r2, r2, #31
   b4a18:	d552      	bpl.n	b4ac0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x168>
                    if(size_x == 1 && size_y == 1)
   b4a1a:	2d01      	cmp	r5, #1
                        writePixel(x+i, y+j, color);
   b4a1c:	fa1f f289 	uxth.w	r2, r9
                    if(size_x == 1 && size_y == 1)
   b4a20:	d13e      	bne.n	b4aa0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
   b4a22:	2c01      	cmp	r4, #1
   b4a24:	d13c      	bne.n	b4aa0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
                        writePixel(x+i, y+j, color);
   b4a26:	699b      	ldr	r3, [r3, #24]
   b4a28:	9906      	ldr	r1, [sp, #24]
   b4a2a:	461f      	mov	r7, r3
   b4a2c:	9b04      	ldr	r3, [sp, #16]
   b4a2e:	440a      	add	r2, r1
                        writePixel(x+i, y+j, bg);
   b4a30:	b212      	sxth	r2, r2
   b4a32:	4651      	mov	r1, sl
   b4a34:	4658      	mov	r0, fp
   b4a36:	47b8      	blx	r7
            for(int8_t j=0; j<8; j++, line >>= 1) {
   b4a38:	f109 0301 	add.w	r3, r9, #1
   b4a3c:	fa4f f983 	sxtb.w	r9, r3
   b4a40:	9b07      	ldr	r3, [sp, #28]
   b4a42:	085b      	lsrs	r3, r3, #1
   b4a44:	9307      	str	r3, [sp, #28]
   b4a46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b4a48:	3b01      	subs	r3, #1
   b4a4a:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b4a4e:	930a      	str	r3, [sp, #40]	; 0x28
   b4a50:	d1de      	bne.n	b4a10 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xb8>
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   b4a52:	9f05      	ldr	r7, [sp, #20]
   b4a54:	3701      	adds	r7, #1
   b4a56:	b27b      	sxtb	r3, r7
   b4a58:	9305      	str	r3, [sp, #20]
   b4a5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b4a5c:	3b01      	subs	r3, #1
   b4a5e:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b4a62:	9309      	str	r3, [sp, #36]	; 0x24
   b4a64:	d1b9      	bne.n	b49da <_ZN12Adafruit_GFX8drawCharEsshtthh+0x82>
        if(bg != color) { // If opaque, draw vertical line for last column
   b4a66:	9b04      	ldr	r3, [sp, #16]
   b4a68:	4543      	cmp	r3, r8
   b4a6a:	d00f      	beq.n	b4a8c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
            if(size_x == 1 && size_y == 1) writeFastVLine(x+5, y, 8, bg);
   b4a6c:	2d01      	cmp	r5, #1
   b4a6e:	f8db 3000 	ldr.w	r3, [fp]
   b4a72:	d13b      	bne.n	b4aec <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   b4a74:	2c01      	cmp	r4, #1
   b4a76:	d139      	bne.n	b4aec <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   b4a78:	9908      	ldr	r1, [sp, #32]
   b4a7a:	f8cd 8000 	str.w	r8, [sp]
   b4a7e:	3105      	adds	r1, #5
   b4a80:	6a1c      	ldr	r4, [r3, #32]
   b4a82:	4632      	mov	r2, r6
   b4a84:	2308      	movs	r3, #8
   b4a86:	b209      	sxth	r1, r1
   b4a88:	4658      	mov	r0, fp
   b4a8a:	47a0      	blx	r4
        endWrite();
   b4a8c:	f8db 3000 	ldr.w	r3, [fp]
   b4a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4a92:	4658      	mov	r0, fp
}
   b4a94:	b011      	add	sp, #68	; 0x44
   b4a96:	ecbd 8b02 	vpop	{d8}
   b4a9a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        endWrite();
   b4a9e:	4718      	bx	r3
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, color);
   b4aa0:	9906      	ldr	r1, [sp, #24]
   b4aa2:	fb14 f202 	smulbb	r2, r4, r2
   b4aa6:	440a      	add	r2, r1
   b4aa8:	9904      	ldr	r1, [sp, #16]
   b4aaa:	9101      	str	r1, [sp, #4]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b4aac:	9400      	str	r4, [sp, #0]
   b4aae:	69db      	ldr	r3, [r3, #28]
   b4ab0:	ee18 1a10 	vmov	r1, s16
   b4ab4:	461f      	mov	r7, r3
   b4ab6:	b212      	sxth	r2, r2
   b4ab8:	462b      	mov	r3, r5
   b4aba:	4658      	mov	r0, fp
   b4abc:	47b8      	blx	r7
   b4abe:	e7bb      	b.n	b4a38 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                } else if(bg != color) {
   b4ac0:	9a04      	ldr	r2, [sp, #16]
   b4ac2:	4542      	cmp	r2, r8
   b4ac4:	d0b8      	beq.n	b4a38 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                    if(size_x == 1 && size_y == 1)
   b4ac6:	2d01      	cmp	r5, #1
                        writePixel(x+i, y+j, color);
   b4ac8:	fa1f f289 	uxth.w	r2, r9
                    if(size_x == 1 && size_y == 1)
   b4acc:	d107      	bne.n	b4ade <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
   b4ace:	2c01      	cmp	r4, #1
   b4ad0:	d105      	bne.n	b4ade <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
                        writePixel(x+i, y+j, bg);
   b4ad2:	699b      	ldr	r3, [r3, #24]
   b4ad4:	9906      	ldr	r1, [sp, #24]
   b4ad6:	461f      	mov	r7, r3
   b4ad8:	440a      	add	r2, r1
   b4ada:	4643      	mov	r3, r8
   b4adc:	e7a8      	b.n	b4a30 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xd8>
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b4ade:	9906      	ldr	r1, [sp, #24]
   b4ae0:	f8cd 8004 	str.w	r8, [sp, #4]
   b4ae4:	fb14 f202 	smulbb	r2, r4, r2
   b4ae8:	440a      	add	r2, r1
   b4aea:	e7df      	b.n	b4aac <_ZN12Adafruit_GFX8drawCharEsshtthh+0x154>
            else          writeFillRect(x+5*size_x, y, size_x, 8*size_y, bg);
   b4aec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b4aee:	f8cd 8004 	str.w	r8, [sp, #4]
   b4af2:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   b4af6:	9a08      	ldr	r2, [sp, #32]
   b4af8:	00e4      	lsls	r4, r4, #3
   b4afa:	440a      	add	r2, r1
   b4afc:	4611      	mov	r1, r2
   b4afe:	9400      	str	r4, [sp, #0]
   b4b00:	69dc      	ldr	r4, [r3, #28]
   b4b02:	4632      	mov	r2, r6
   b4b04:	462b      	mov	r3, r5
   b4b06:	b209      	sxth	r1, r1
   b4b08:	4658      	mov	r0, fp
   b4b0a:	47a0      	blx	r4
        endWrite();
   b4b0c:	e7be      	b.n	b4a8c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   b4b0e:	7a13      	ldrb	r3, [r2, #8]
    return gfxFont->glyph + c;
   b4b10:	6851      	ldr	r1, [r2, #4]
    return gfxFont->bitmap;
   b4b12:	6812      	ldr	r2, [r2, #0]
   b4b14:	920b      	str	r2, [sp, #44]	; 0x2c
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   b4b16:	1aff      	subs	r7, r7, r3
    return gfxFont->glyph + c;
   b4b18:	b2ff      	uxtb	r7, r7
   b4b1a:	eb01 03c7 	add.w	r3, r1, r7, lsl #3
        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
   b4b1e:	f831 2037 	ldrh.w	r2, [r1, r7, lsl #3]
   b4b22:	9206      	str	r2, [sp, #24]
        uint8_t  w  = pgm_read_byte(&glyph->width),
   b4b24:	789a      	ldrb	r2, [r3, #2]
   b4b26:	9209      	str	r2, [sp, #36]	; 0x24
                 h  = pgm_read_byte(&glyph->height);
   b4b28:	78da      	ldrb	r2, [r3, #3]
   b4b2a:	920c      	str	r2, [sp, #48]	; 0x30
        if(size_x > 1 || size_y > 1) {
   b4b2c:	2d01      	cmp	r5, #1
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   b4b2e:	f993 2005 	ldrsb.w	r2, [r3, #5]
                 yo = pgm_read_byte(&glyph->yOffset);
   b4b32:	f993 a006 	ldrsb.w	sl, [r3, #6]
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   b4b36:	920a      	str	r2, [sp, #40]	; 0x28
        if(size_x > 1 || size_y > 1) {
   b4b38:	d801      	bhi.n	b4b3e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1e6>
   b4b3a:	2c01      	cmp	r4, #1
   b4b3c:	d957      	bls.n	b4bee <_ZN12Adafruit_GFX8drawCharEsshtthh+0x296>
            xo16 = xo;
   b4b3e:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
   b4b42:	9308      	str	r3, [sp, #32]
            yo16 = yo;
   b4b44:	fa0f f38a 	sxth.w	r3, sl
   b4b48:	9307      	str	r3, [sp, #28]
        startWrite();
   b4b4a:	f8db 3000 	ldr.w	r3, [fp]
   b4b4e:	4658      	mov	r0, fp
   b4b50:	695b      	ldr	r3, [r3, #20]
   b4b52:	4798      	blx	r3
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b4b54:	b2b3      	uxth	r3, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   b4b56:	f04f 0800 	mov.w	r8, #0
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b4b5a:	930e      	str	r3, [sp, #56]	; 0x38
                        writePixel(x+xo+xx, y+yo+yy, color);
   b4b5c:	fa1a f386 	uxtah	r3, sl, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   b4b60:	46c1      	mov	r9, r8
        for(yy=0; yy<h; yy++) {
   b4b62:	4647      	mov	r7, r8
                        writePixel(x+xo+xx, y+yo+yy, color);
   b4b64:	930f      	str	r3, [sp, #60]	; 0x3c
        for(yy=0; yy<h; yy++) {
   b4b66:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b4b68:	429f      	cmp	r7, r3
   b4b6a:	d28f      	bcs.n	b4a8c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b4b6c:	9b07      	ldr	r3, [sp, #28]
   b4b6e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   b4b70:	443b      	add	r3, r7
   b4b72:	fb03 2304 	mla	r3, r3, r4, r2
            for(xx=0; xx<w; xx++) {
   b4b76:	2200      	movs	r2, #0
   b4b78:	9205      	str	r2, [sp, #20]
                        writePixel(x+xo+xx, y+yo+yy, color);
   b4b7a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b4b7c:	b21b      	sxth	r3, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   b4b7e:	eb02 0a07 	add.w	sl, r2, r7
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b4b82:	ee08 3a10 	vmov	s16, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   b4b86:	fa0f fa8a 	sxth.w	sl, sl
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b4b8a:	4643      	mov	r3, r8
            for(xx=0; xx<w; xx++) {
   b4b8c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   b4b8e:	9905      	ldr	r1, [sp, #20]
   b4b90:	4291      	cmp	r1, r2
   b4b92:	d241      	bcs.n	b4c18 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2c0>
                if(!(bit++ & 7)) {
   b4b94:	1c5a      	adds	r2, r3, #1
   b4b96:	b2d2      	uxtb	r2, r2
   b4b98:	075b      	lsls	r3, r3, #29
   b4b9a:	920d      	str	r2, [sp, #52]	; 0x34
   b4b9c:	d107      	bne.n	b4bae <_ZN12Adafruit_GFX8drawCharEsshtthh+0x256>
                    bits = pgm_read_byte(&bitmap[bo++]);
   b4b9e:	9b06      	ldr	r3, [sp, #24]
   b4ba0:	9906      	ldr	r1, [sp, #24]
   b4ba2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b4ba4:	3301      	adds	r3, #1
   b4ba6:	b29b      	uxth	r3, r3
   b4ba8:	f812 9001 	ldrb.w	r9, [r2, r1]
   b4bac:	9306      	str	r3, [sp, #24]
                if(bits & 0x80) {
   b4bae:	f019 0f80 	tst.w	r9, #128	; 0x80
   b4bb2:	d012      	beq.n	b4bda <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
                    if(size_x == 1 && size_y == 1) {
   b4bb4:	2d01      	cmp	r5, #1
                        writePixel(x+xo+xx, y+yo+yy, color);
   b4bb6:	f8db 3000 	ldr.w	r3, [fp]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b4bba:	f8bd 100c 	ldrh.w	r1, [sp, #12]
                    if(size_x == 1 && size_y == 1) {
   b4bbe:	d11a      	bne.n	b4bf6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
   b4bc0:	2c01      	cmp	r4, #1
   b4bc2:	d118      	bne.n	b4bf6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
                        writePixel(x+xo+xx, y+yo+yy, color);
   b4bc4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   b4bc6:	699b      	ldr	r3, [r3, #24]
   b4bc8:	4411      	add	r1, r2
   b4bca:	9a05      	ldr	r2, [sp, #20]
   b4bcc:	4411      	add	r1, r2
   b4bce:	461e      	mov	r6, r3
   b4bd0:	4652      	mov	r2, sl
   b4bd2:	9b04      	ldr	r3, [sp, #16]
   b4bd4:	b209      	sxth	r1, r1
   b4bd6:	4658      	mov	r0, fp
   b4bd8:	47b0      	blx	r6
            for(xx=0; xx<w; xx++) {
   b4bda:	9e05      	ldr	r6, [sp, #20]
   b4bdc:	3601      	adds	r6, #1
   b4bde:	b2f3      	uxtb	r3, r6
                bits <<= 1;
   b4be0:	ea4f 0949 	mov.w	r9, r9, lsl #1
            for(xx=0; xx<w; xx++) {
   b4be4:	9305      	str	r3, [sp, #20]
                bits <<= 1;
   b4be6:	fa5f f989 	uxtb.w	r9, r9
                if(!(bit++ & 7)) {
   b4bea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
            for(xx=0; xx<w; xx++) {
   b4bec:	e7ce      	b.n	b4b8c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x234>
        int16_t  xo16 = 0, yo16 = 0;
   b4bee:	2300      	movs	r3, #0
   b4bf0:	e9cd 3307 	strd	r3, r3, [sp, #28]
   b4bf4:	e7a9      	b.n	b4b4a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1f2>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b4bf6:	9805      	ldr	r0, [sp, #20]
   b4bf8:	9a08      	ldr	r2, [sp, #32]
   b4bfa:	4402      	add	r2, r0
   b4bfc:	fb02 1105 	mla	r1, r2, r5, r1
   b4c00:	9a04      	ldr	r2, [sp, #16]
   b4c02:	e9cd 4200 	strd	r4, r2, [sp]
   b4c06:	69db      	ldr	r3, [r3, #28]
   b4c08:	ee18 2a10 	vmov	r2, s16
   b4c0c:	461e      	mov	r6, r3
   b4c0e:	b209      	sxth	r1, r1
   b4c10:	462b      	mov	r3, r5
   b4c12:	4658      	mov	r0, fp
   b4c14:	47b0      	blx	r6
   b4c16:	e7e0      	b.n	b4bda <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
   b4c18:	9b09      	ldr	r3, [sp, #36]	; 0x24
        for(yy=0; yy<h; yy++) {
   b4c1a:	3701      	adds	r7, #1
   b4c1c:	4498      	add	r8, r3
   b4c1e:	fa5f f888 	uxtb.w	r8, r8
   b4c22:	b2ff      	uxtb	r7, r7
   b4c24:	e79f      	b.n	b4b66 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x20e>
}
   b4c26:	b011      	add	sp, #68	; 0x44
   b4c28:	ecbd 8b02 	vpop	{d8}
   b4c2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b4c30:	000b7515 	.word	0x000b7515

000b4c34 <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
   b4c34:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(!gfxFont) { // 'Classic' built-in font
   b4c36:	6a02      	ldr	r2, [r0, #32]
size_t Adafruit_GFX::write(uint8_t c) {
   b4c38:	b085      	sub	sp, #20
   b4c3a:	4604      	mov	r4, r0
   b4c3c:	460b      	mov	r3, r1
    if(!gfxFont) { // 'Classic' built-in font
   b4c3e:	2a00      	cmp	r2, #0
   b4c40:	d134      	bne.n	b4cac <_ZN12Adafruit_GFX5writeEh+0x78>
        if(c == '\n') {                        // Newline?
   b4c42:	290a      	cmp	r1, #10
   b4c44:	d108      	bne.n	b4c58 <_ZN12Adafruit_GFX5writeEh+0x24>
            cursor_y += textsize_y * 8;        // advance y one line
   b4c46:	8a43      	ldrh	r3, [r0, #18]
            cursor_x  = 0;                     // Reset x to zero,
   b4c48:	8202      	strh	r2, [r0, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   b4c4a:	7e42      	ldrb	r2, [r0, #25]
   b4c4c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
            cursor_y += (int16_t)textsize_y *
   b4c50:	8263      	strh	r3, [r4, #18]
}
   b4c52:	2001      	movs	r0, #1
   b4c54:	b005      	add	sp, #20
   b4c56:	bdf0      	pop	{r4, r5, r6, r7, pc}
        } else if(c != '\r') {                 // Ignore carriage returns
   b4c58:	290d      	cmp	r1, #13
   b4c5a:	d0fa      	beq.n	b4c52 <_ZN12Adafruit_GFX5writeEh+0x1e>
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b4c5c:	7ee1      	ldrb	r1, [r4, #27]
   b4c5e:	7e00      	ldrb	r0, [r0, #24]
            cursor_y += textsize_y * 8;        // advance y one line
   b4c60:	7e65      	ldrb	r5, [r4, #25]
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b4c62:	b171      	cbz	r1, b4c82 <_ZN12Adafruit_GFX5writeEh+0x4e>
   b4c64:	f9b4 6010 	ldrsh.w	r6, [r4, #16]
   b4c68:	2106      	movs	r1, #6
   b4c6a:	fb11 6100 	smlabb	r1, r1, r0, r6
   b4c6e:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
   b4c72:	42b1      	cmp	r1, r6
            cursor_y += textsize_y * 8;        // advance y one line
   b4c74:	bfc1      	itttt	gt
   b4c76:	f9b4 1012 	ldrshgt.w	r1, [r4, #18]
                cursor_x  = 0;                 // Reset x to zero,
   b4c7a:	8222      	strhgt	r2, [r4, #16]
                cursor_y += textsize_y * 8;    // advance y one line
   b4c7c:	eb01 02c5 	addgt.w	r2, r1, r5, lsl #3
   b4c80:	8262      	strhgt	r2, [r4, #18]
            drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   b4c82:	8ae2      	ldrh	r2, [r4, #22]
   b4c84:	9201      	str	r2, [sp, #4]
   b4c86:	8aa2      	ldrh	r2, [r4, #20]
   b4c88:	9200      	str	r2, [sp, #0]
   b4c8a:	e9cd 0502 	strd	r0, r5, [sp, #8]
   b4c8e:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   b4c92:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b4c96:	4620      	mov	r0, r4
   b4c98:	f7ff fe5e 	bl	b4958 <_ZN12Adafruit_GFX8drawCharEsshtthh>
            cursor_x += textsize_x * 6;          // Advance x one char
   b4c9c:	7e23      	ldrb	r3, [r4, #24]
   b4c9e:	8a22      	ldrh	r2, [r4, #16]
   b4ca0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   b4ca4:	eb02 0343 	add.w	r3, r2, r3, lsl #1
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   b4ca8:	8223      	strh	r3, [r4, #16]
   b4caa:	e7d2      	b.n	b4c52 <_ZN12Adafruit_GFX5writeEh+0x1e>
        if(c == '\n') {
   b4cac:	290a      	cmp	r1, #10
   b4cae:	d107      	bne.n	b4cc0 <_ZN12Adafruit_GFX5writeEh+0x8c>
            cursor_x  = 0;
   b4cb0:	2300      	movs	r3, #0
   b4cb2:	8203      	strh	r3, [r0, #16]
            cursor_y += (int16_t)textsize_y *
   b4cb4:	7e41      	ldrb	r1, [r0, #25]
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   b4cb6:	7a92      	ldrb	r2, [r2, #10]
            cursor_y += (int16_t)textsize_y *
   b4cb8:	8a43      	ldrh	r3, [r0, #18]
   b4cba:	fb01 3302 	mla	r3, r1, r2, r3
   b4cbe:	e7c7      	b.n	b4c50 <_ZN12Adafruit_GFX5writeEh+0x1c>
        } else if(c != '\r') {
   b4cc0:	290d      	cmp	r1, #13
   b4cc2:	d0c6      	beq.n	b4c52 <_ZN12Adafruit_GFX5writeEh+0x1e>
            uint8_t first = pgm_read_byte(&gfxFont->first);
   b4cc4:	7a15      	ldrb	r5, [r2, #8]
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
   b4cc6:	42a9      	cmp	r1, r5
   b4cc8:	d3c3      	bcc.n	b4c52 <_ZN12Adafruit_GFX5writeEh+0x1e>
   b4cca:	7a51      	ldrb	r1, [r2, #9]
   b4ccc:	4299      	cmp	r1, r3
   b4cce:	d3c0      	bcc.n	b4c52 <_ZN12Adafruit_GFX5writeEh+0x1e>
    return gfxFont->glyph + c;
   b4cd0:	6851      	ldr	r1, [r2, #4]
                GFXglyph *glyph  = pgm_read_glyph_ptr(gfxFont, c - first);
   b4cd2:	1b5d      	subs	r5, r3, r5
    return gfxFont->glyph + c;
   b4cd4:	b2ed      	uxtb	r5, r5
   b4cd6:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
                uint8_t   w     = pgm_read_byte(&glyph->width),
   b4cda:	78a8      	ldrb	r0, [r5, #2]
                if((w > 0) && (h > 0)) { // Is there an associated bitmap?
   b4cdc:	b328      	cbz	r0, b4d2a <_ZN12Adafruit_GFX5writeEh+0xf6>
   b4cde:	78e9      	ldrb	r1, [r5, #3]
   b4ce0:	b319      	cbz	r1, b4d2a <_ZN12Adafruit_GFX5writeEh+0xf6>
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   b4ce2:	7ee1      	ldrb	r1, [r4, #27]
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b4ce4:	7e26      	ldrb	r6, [r4, #24]
            cursor_y += textsize_y * 8;        // advance y one line
   b4ce6:	7e67      	ldrb	r7, [r4, #25]
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   b4ce8:	b191      	cbz	r1, b4d10 <_ZN12Adafruit_GFX5writeEh+0xdc>
   b4cea:	f995 1005 	ldrsb.w	r1, [r5, #5]
   b4cee:	4408      	add	r0, r1
   b4cf0:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b4cf4:	fb06 1100 	mla	r1, r6, r0, r1
   b4cf8:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   b4cfc:	4281      	cmp	r1, r0
   b4cfe:	dd07      	ble.n	b4d10 <_ZN12Adafruit_GFX5writeEh+0xdc>
                        cursor_x  = 0;
   b4d00:	2000      	movs	r0, #0
   b4d02:	8220      	strh	r0, [r4, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   b4d04:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   b4d08:	7a92      	ldrb	r2, [r2, #10]
                        cursor_y += (int16_t)textsize_y *
   b4d0a:	fb02 1207 	mla	r2, r2, r7, r1
   b4d0e:	8262      	strh	r2, [r4, #18]
                    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   b4d10:	8ae2      	ldrh	r2, [r4, #22]
   b4d12:	9201      	str	r2, [sp, #4]
   b4d14:	8aa2      	ldrh	r2, [r4, #20]
   b4d16:	9200      	str	r2, [sp, #0]
   b4d18:	e9cd 6702 	strd	r6, r7, [sp, #8]
   b4d1c:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   b4d20:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b4d24:	4620      	mov	r0, r4
   b4d26:	f7ff fe17 	bl	b4958 <_ZN12Adafruit_GFX8drawCharEsshtthh>
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   b4d2a:	7929      	ldrb	r1, [r5, #4]
   b4d2c:	7e22      	ldrb	r2, [r4, #24]
   b4d2e:	8a23      	ldrh	r3, [r4, #16]
   b4d30:	fb01 3302 	mla	r3, r1, r2, r3
   b4d34:	e7b8      	b.n	b4ca8 <_ZN12Adafruit_GFX5writeEh+0x74>

000b4d36 <_ZN12Adafruit_GFX11setTextSizeEh>:
    textsize_x = (s_x > 0) ? s_x : 1;
   b4d36:	2901      	cmp	r1, #1
   b4d38:	bf38      	it	cc
   b4d3a:	2101      	movcc	r1, #1
   b4d3c:	7601      	strb	r1, [r0, #24]
    textsize_y = (s_y > 0) ? s_y : 1;
   b4d3e:	7641      	strb	r1, [r0, #25]
}
   b4d40:	4770      	bx	lr

000b4d42 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   b4d42:	4770      	bx	lr

000b4d44 <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   b4d44:	b510      	push	{r4, lr}
  }
   b4d46:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   b4d48:	4604      	mov	r4, r0
  }
   b4d4a:	f7ff f9a4 	bl	b4096 <_ZdlPvj>
   b4d4e:	4620      	mov	r0, r4
   b4d50:	bd10      	pop	{r4, pc}
	...

000b4d54 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   b4d54:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b4d56:	4604      	mov	r4, r0
   b4d58:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   b4d5a:	7922      	ldrb	r2, [r4, #4]
   b4d5c:	68a3      	ldr	r3, [r4, #8]
   b4d5e:	b132      	cbz	r2, b4d6e <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   b4d60:	b9a3      	cbnz	r3, b4d8c <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   b4d62:	490b      	ldr	r1, [pc, #44]	; (b4d90 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   b4d64:	b002      	add	sp, #8
   b4d66:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   b4d6a:	f001 bdab 	b.w	b68c4 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b4d6e:	4a09      	ldr	r2, [pc, #36]	; (b4d94 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   b4d70:	7b26      	ldrb	r6, [r4, #12]
   b4d72:	4d09      	ldr	r5, [pc, #36]	; (b4d98 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   b4d74:	4909      	ldr	r1, [pc, #36]	; (b4d9c <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   b4d76:	7b64      	ldrb	r4, [r4, #13]
   b4d78:	2e01      	cmp	r6, #1
   b4d7a:	bf18      	it	ne
   b4d7c:	4629      	movne	r1, r5
   b4d7e:	e9cd 1400 	strd	r1, r4, [sp]
   b4d82:	4907      	ldr	r1, [pc, #28]	; (b4da0 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   b4d84:	f7ff f99c 	bl	b40c0 <_ZN5Print6printfEPKcz>
  }
   b4d88:	b002      	add	sp, #8
   b4d8a:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b4d8c:	4a05      	ldr	r2, [pc, #20]	; (b4da4 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   b4d8e:	e7ef      	b.n	b4d70 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   b4d90:	000b7a81 	.word	0x000b7a81
   b4d94:	000b749a 	.word	0x000b749a
   b4d98:	000b7a7d 	.word	0x000b7a7d
   b4d9c:	000b7a79 	.word	0x000b7a79
   b4da0:	000b7a97 	.word	0x000b7a97
   b4da4:	000b7a70 	.word	0x000b7a70

000b4da8 <_ZN16Adafruit_SSD1306D1Ev>:
}

/*!
    @brief  Destructor for Adafruit_SSD1306 object.
*/
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   b4da8:	b510      	push	{r4, lr}
   b4daa:	4b04      	ldr	r3, [pc, #16]	; (b4dbc <_ZN16Adafruit_SSD1306D1Ev+0x14>)
   b4dac:	6003      	str	r3, [r0, #0]
   b4dae:	4604      	mov	r4, r0
  if(buffer) {
   b4db0:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b4db2:	b108      	cbz	r0, b4db8 <_ZN16Adafruit_SSD1306D1Ev+0x10>
    free(buffer);
   b4db4:	f001 fb4a 	bl	b644c <free>
    buffer = NULL;
  }
}
   b4db8:	4620      	mov	r0, r4
   b4dba:	bd10      	pop	{r4, pc}
   b4dbc:	000b80b0 	.word	0x000b80b0

000b4dc0 <_ZN16Adafruit_SSD1306D0Ev>:
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   b4dc0:	b510      	push	{r4, lr}
   b4dc2:	4604      	mov	r4, r0
}
   b4dc4:	f7ff fff0 	bl	b4da8 <_ZN16Adafruit_SSD1306D1Ev>
   b4dc8:	4620      	mov	r0, r4
   b4dca:	2150      	movs	r1, #80	; 0x50
   b4dcc:	f7ff f963 	bl	b4096 <_ZdlPvj>
   b4dd0:	4620      	mov	r0, r4
   b4dd2:	bd10      	pop	{r4, pc}

000b4dd4 <_ZN16Adafruit_SSD13069drawPixelEsst>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   b4dd4:	2900      	cmp	r1, #0
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   b4dd6:	b510      	push	{r4, lr}
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   b4dd8:	db4b      	blt.n	b4e72 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b4dda:	f9b0 400c 	ldrsh.w	r4, [r0, #12]
   b4dde:	428c      	cmp	r4, r1
   b4de0:	dd47      	ble.n	b4e72 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b4de2:	2a00      	cmp	r2, #0
   b4de4:	db45      	blt.n	b4e72 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b4de6:	f9b0 400e 	ldrsh.w	r4, [r0, #14]
   b4dea:	4294      	cmp	r4, r2
   b4dec:	dd41      	ble.n	b4e72 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
  /*!
    @brief      Get rotation setting for display
    @returns    0 thru 3 corresponding to 4 cardinal rotations
  */
  /************************************************************************/
  uint8_t getRotation(void) const { return rotation; }
   b4dee:	7e84      	ldrb	r4, [r0, #26]
    // Pixel is in-bounds. Rotate coordinates if needed.
    switch(getRotation()) {
   b4df0:	2c02      	cmp	r4, #2
   b4df2:	d01f      	beq.n	b4e34 <_ZN16Adafruit_SSD13069drawPixelEsst+0x60>
   b4df4:	2c03      	cmp	r4, #3
   b4df6:	d026      	beq.n	b4e46 <_ZN16Adafruit_SSD13069drawPixelEsst+0x72>
   b4df8:	2c01      	cmp	r4, #1
   b4dfa:	d104      	bne.n	b4e06 <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case 1:
      ssd1306_swap(x, y);
      x = WIDTH - x - 1;
   b4dfc:	8904      	ldrh	r4, [r0, #8]
   b4dfe:	43d2      	mvns	r2, r2
   b4e00:	4414      	add	r4, r2
      break;
   b4e02:	460a      	mov	r2, r1
      x = WIDTH - x - 1;
   b4e04:	b221      	sxth	r1, r4
     case 3:
      ssd1306_swap(x, y);
      y = HEIGHT - y - 1;
      break;
    }
    switch(color) {
   b4e06:	2b01      	cmp	r3, #1
   b4e08:	d023      	beq.n	b4e52 <_ZN16Adafruit_SSD13069drawPixelEsst+0x7e>
   b4e0a:	2b02      	cmp	r3, #2
   b4e0c:	d032      	beq.n	b4e74 <_ZN16Adafruit_SSD13069drawPixelEsst+0xa0>
   b4e0e:	bb83      	cbnz	r3, b4e72 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
     case BLACK:   buffer[x + (y/8)*WIDTH] &= ~(1 << (y&7)); break;
   b4e10:	2a00      	cmp	r2, #0
   b4e12:	4613      	mov	r3, r2
   b4e14:	8904      	ldrh	r4, [r0, #8]
   b4e16:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b4e18:	bfb8      	it	lt
   b4e1a:	1dd3      	addlt	r3, r2, #7
   b4e1c:	10db      	asrs	r3, r3, #3
   b4e1e:	fb13 1104 	smlabb	r1, r3, r4, r1
   b4e22:	f002 0207 	and.w	r2, r2, #7
   b4e26:	2301      	movs	r3, #1
   b4e28:	4093      	lsls	r3, r2
   b4e2a:	5c42      	ldrb	r2, [r0, r1]
   b4e2c:	ea22 0203 	bic.w	r2, r2, r3
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
   b4e30:	5442      	strb	r2, [r0, r1]
    }
  }
}
   b4e32:	e01e      	b.n	b4e72 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
      x = WIDTH  - x - 1;
   b4e34:	8904      	ldrh	r4, [r0, #8]
   b4e36:	3c01      	subs	r4, #1
   b4e38:	1a61      	subs	r1, r4, r1
      y = HEIGHT - y - 1;
   b4e3a:	8944      	ldrh	r4, [r0, #10]
   b4e3c:	43d2      	mvns	r2, r2
   b4e3e:	4422      	add	r2, r4
      x = WIDTH  - x - 1;
   b4e40:	b209      	sxth	r1, r1
      y = HEIGHT - y - 1;
   b4e42:	b212      	sxth	r2, r2
      break;
   b4e44:	e7df      	b.n	b4e06 <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
      y = HEIGHT - y - 1;
   b4e46:	8944      	ldrh	r4, [r0, #10]
   b4e48:	3c01      	subs	r4, #1
   b4e4a:	1a64      	subs	r4, r4, r1
      break;
   b4e4c:	4611      	mov	r1, r2
      y = HEIGHT - y - 1;
   b4e4e:	b222      	sxth	r2, r4
      break;
   b4e50:	e7d9      	b.n	b4e06 <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
   b4e52:	2a00      	cmp	r2, #0
   b4e54:	8904      	ldrh	r4, [r0, #8]
   b4e56:	4613      	mov	r3, r2
   b4e58:	bfb8      	it	lt
   b4e5a:	1dd3      	addlt	r3, r2, #7
   b4e5c:	10db      	asrs	r3, r3, #3
   b4e5e:	fb13 1104 	smlabb	r1, r3, r4, r1
   b4e62:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   b4e64:	f002 0007 	and.w	r0, r2, #7
   b4e68:	2201      	movs	r2, #1
   b4e6a:	4082      	lsls	r2, r0
   b4e6c:	5c58      	ldrb	r0, [r3, r1]
   b4e6e:	4302      	orrs	r2, r0
   b4e70:	545a      	strb	r2, [r3, r1]
}
   b4e72:	bd10      	pop	{r4, pc}
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
   b4e74:	2a00      	cmp	r2, #0
   b4e76:	4613      	mov	r3, r2
   b4e78:	8904      	ldrh	r4, [r0, #8]
   b4e7a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b4e7c:	bfb8      	it	lt
   b4e7e:	1dd3      	addlt	r3, r2, #7
   b4e80:	10db      	asrs	r3, r3, #3
   b4e82:	fb13 1104 	smlabb	r1, r3, r4, r1
   b4e86:	f002 0207 	and.w	r2, r2, #7
   b4e8a:	2301      	movs	r3, #1
   b4e8c:	fa03 f202 	lsl.w	r2, r3, r2
   b4e90:	5c43      	ldrb	r3, [r0, r1]
   b4e92:	405a      	eors	r2, r3
   b4e94:	e7cc      	b.n	b4e30 <_ZN16Adafruit_SSD13069drawPixelEsst+0x5c>
	...

000b4e98 <_ZN16Adafruit_SSD1306C1Ea>:
Adafruit_SSD1306::Adafruit_SSD1306(int8_t rst_pin) :
   b4e98:	b570      	push	{r4, r5, r6, lr}
  rstPin(rst_pin) {
   b4e9a:	2240      	movs	r2, #64	; 0x40
Adafruit_SSD1306::Adafruit_SSD1306(int8_t rst_pin) :
   b4e9c:	4604      	mov	r4, r0
   b4e9e:	460e      	mov	r6, r1
  rstPin(rst_pin) {
   b4ea0:	2180      	movs	r1, #128	; 0x80
   b4ea2:	f7ff fcef 	bl	b4884 <_ZN12Adafruit_GFXC1Ess>
   b4ea6:	2500      	movs	r5, #0
   b4ea8:	4b0d      	ldr	r3, [pc, #52]	; (b4ee0 <_ZN16Adafruit_SSD1306C1Ea+0x48>)
   b4eaa:	6023      	str	r3, [r4, #0]
   b4eac:	6265      	str	r5, [r4, #36]	; 0x24
  Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT), spi(NULL), wire(&Wire),
   b4eae:	f002 f8e3 	bl	b7078 <_Z19__fetch_global_Wirev>
  rstPin(rst_pin) {
   b4eb2:	23ff      	movs	r3, #255	; 0xff
   b4eb4:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
   b4eb8:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
  {
   b4ebc:	4b09      	ldr	r3, [pc, #36]	; (b4ee4 <_ZN16Adafruit_SSD1306C1Ea+0x4c>)
   b4ebe:	63a3      	str	r3, [r4, #56]	; 0x38
   b4ec0:	f64f 72ff 	movw	r2, #65535	; 0xffff
   b4ec4:	2301      	movs	r3, #1
   b4ec6:	e9c4 050a 	strd	r0, r5, [r4, #40]	; 0x28
   b4eca:	86a2      	strh	r2, [r4, #52]	; 0x34
   b4ecc:	f884 6037 	strb.w	r6, [r4, #55]	; 0x37
   b4ed0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   b4ed4:	6425      	str	r5, [r4, #64]	; 0x40
   b4ed6:	f8a4 5044 	strh.w	r5, [r4, #68]	; 0x44
}
   b4eda:	4620      	mov	r0, r4
   b4edc:	bd70      	pop	{r4, r5, r6, pc}
   b4ede:	bf00      	nop
   b4ee0:	000b80b0 	.word	0x000b80b0
   b4ee4:	000b7abc 	.word	0x000b7abc

000b4ee8 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>:
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   b4ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4eea:	4604      	mov	r4, r0
  if(wire) { // I2C
   b4eec:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   b4eee:	460d      	mov	r5, r1
  if(wire) { // I2C
   b4ef0:	b190      	cbz	r0, b4f18 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x30>
    wire->beginTransmission(i2caddr);
   b4ef2:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b4ef6:	f001 fb81 	bl	b65fc <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b4efa:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b4efc:	6803      	ldr	r3, [r0, #0]
   b4efe:	2100      	movs	r1, #0
   b4f00:	689b      	ldr	r3, [r3, #8]
   b4f02:	4798      	blx	r3
    WIRE_WRITE(c);
   b4f04:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b4f06:	6803      	ldr	r3, [r0, #0]
   b4f08:	4629      	mov	r1, r5
   b4f0a:	689b      	ldr	r3, [r3, #8]
   b4f0c:	4798      	blx	r3
    wire->endTransmission();
   b4f0e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   b4f10:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    wire->endTransmission();
   b4f14:	f001 bb79 	b.w	b660a <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   b4f18:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   b4f1c:	4601      	mov	r1, r0
   b4f1e:	b298      	uxth	r0, r3
   b4f20:	f002 f867 	bl	b6ff2 <digitalWrite>
  if(spi) {
   b4f24:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b4f26:	b120      	cbz	r0, b4f32 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4a>
    (void)spi->transfer(d);
   b4f28:	4629      	mov	r1, r5
}
   b4f2a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    (void)spi->transfer(d);
   b4f2e:	f001 bde7 	b.w	b6b00 <_ZN8SPIClass8transferEh>
   b4f32:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b4f34:	2780      	movs	r7, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b4f36:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b4f3a:	ea05 0107 	and.w	r1, r5, r7
   b4f3e:	b280      	uxth	r0, r0
   b4f40:	f002 f857 	bl	b6ff2 <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b4f44:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b4f48:	2101      	movs	r1, #1
   b4f4a:	b280      	uxth	r0, r0
   b4f4c:	f002 f851 	bl	b6ff2 <digitalWrite>
      digitalWrite(clkPin , LOW);
   b4f50:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b4f54:	2100      	movs	r1, #0
   b4f56:	b280      	uxth	r0, r0
   b4f58:	f002 f84b 	bl	b6ff2 <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b4f5c:	3e01      	subs	r6, #1
   b4f5e:	ea4f 0757 	mov.w	r7, r7, lsr #1
   b4f62:	d1e8      	bne.n	b4f36 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4e>
}
   b4f64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b4f66 <_ZN16Adafruit_SSD130613invertDisplayEb>:
            display() function -- buffer contents are not changed, rather a
            different pixel mode of the display hardware is used. When
            enabled, drawing BLACK (value 0) pixels will actually draw white,
            WHITE (value 1) will draw black.
*/
void Adafruit_SSD1306::invertDisplay(boolean i) {
   b4f66:	b538      	push	{r3, r4, r5, lr}
   b4f68:	4604      	mov	r4, r0
  TRANSACTION_START
   b4f6a:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::invertDisplay(boolean i) {
   b4f6c:	460d      	mov	r5, r1
  TRANSACTION_START
   b4f6e:	b180      	cbz	r0, b4f92 <_ZN16Adafruit_SSD130613invertDisplayEb+0x2c>

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
  inline void setClock(uint32_t speed) {
	  setSpeed(speed);
   b4f70:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b4f72:	f001 fb35 	bl	b65e0 <_ZN7TwoWire8setSpeedEm>
  ssd1306_command1(i ? SSD1306_INVERTDISPLAY : SSD1306_NORMALDISPLAY);
   b4f76:	2d00      	cmp	r5, #0
   b4f78:	4620      	mov	r0, r4
   b4f7a:	bf14      	ite	ne
   b4f7c:	21a7      	movne	r1, #167	; 0xa7
   b4f7e:	21a6      	moveq	r1, #166	; 0xa6
   b4f80:	f7ff ffb2 	bl	b4ee8 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  TRANSACTION_END
   b4f84:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b4f86:	b188      	cbz	r0, b4fac <_ZN16Adafruit_SSD130613invertDisplayEb+0x46>
   b4f88:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   b4f8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b4f8e:	f001 bb27 	b.w	b65e0 <_ZN7TwoWire8setSpeedEm>
  TRANSACTION_START
   b4f92:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b4f94:	b118      	cbz	r0, b4f9e <_ZN16Adafruit_SSD130613invertDisplayEb+0x38>
   b4f96:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b4f9a:	f001 fd43 	bl	b6a24 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b4f9e:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b4fa2:	2100      	movs	r1, #0
   b4fa4:	b280      	uxth	r0, r0
   b4fa6:	f002 f824 	bl	b6ff2 <digitalWrite>
   b4faa:	e7e4      	b.n	b4f76 <_ZN16Adafruit_SSD130613invertDisplayEb+0x10>
  TRANSACTION_END
   b4fac:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b4fb0:	2101      	movs	r1, #1
   b4fb2:	b280      	uxth	r0, r0
   b4fb4:	f002 f81d 	bl	b6ff2 <digitalWrite>
   b4fb8:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b4fba:	b118      	cbz	r0, b4fc4 <_ZN16Adafruit_SSD130613invertDisplayEb+0x5e>
}
   b4fbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  TRANSACTION_END
   b4fc0:	f001 bd16 	b.w	b69f0 <_ZN8SPIClass14endTransactionEv>
}
   b4fc4:	bd38      	pop	{r3, r4, r5, pc}

000b4fc6 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>:
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   b4fc6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b4fca:	4604      	mov	r4, r0
  if(wire) { // I2C
   b4fcc:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   b4fce:	460d      	mov	r5, r1
  if(wire) { // I2C
   b4fd0:	188f      	adds	r7, r1, r2
   b4fd2:	b340      	cbz	r0, b5026 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x60>
    wire->beginTransmission(i2caddr);
   b4fd4:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b4fd8:	f001 fb10 	bl	b65fc <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b4fdc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b4fde:	6803      	ldr	r3, [r0, #0]
   b4fe0:	2100      	movs	r1, #0
   b4fe2:	689b      	ldr	r3, [r3, #8]
   b4fe4:	4798      	blx	r3
    uint8_t bytesOut = 1;
   b4fe6:	2601      	movs	r6, #1
    while(n--) {
   b4fe8:	42af      	cmp	r7, r5
        wire->endTransmission();
   b4fea:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    while(n--) {
   b4fec:	d017      	beq.n	b501e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x58>
      if(bytesOut >= WIRE_MAX) {
   b4fee:	2e1f      	cmp	r6, #31
   b4ff0:	d90c      	bls.n	b500c <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x46>
        wire->endTransmission();
   b4ff2:	f001 fb0a 	bl	b660a <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   b4ff6:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b4ffa:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b4ffc:	f001 fafe 	bl	b65fc <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b5000:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5002:	6803      	ldr	r3, [r0, #0]
   b5004:	2100      	movs	r1, #0
   b5006:	689b      	ldr	r3, [r3, #8]
   b5008:	4798      	blx	r3
        bytesOut = 1;
   b500a:	2601      	movs	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   b500c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b500e:	f815 1b01 	ldrb.w	r1, [r5], #1
   b5012:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   b5014:	3601      	adds	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   b5016:	689b      	ldr	r3, [r3, #8]
   b5018:	4798      	blx	r3
      bytesOut++;
   b501a:	b2f6      	uxtb	r6, r6
    while(n--) {
   b501c:	e7e4      	b.n	b4fe8 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x22>
}
   b501e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    wire->endTransmission();
   b5022:	f001 baf2 	b.w	b660a <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   b5026:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   b502a:	4601      	mov	r1, r0
   b502c:	b298      	uxth	r0, r3
   b502e:	f001 ffe0 	bl	b6ff2 <digitalWrite>
    while(n--) SPIwrite(pgm_read_byte(c++));
   b5032:	42bd      	cmp	r5, r7
   b5034:	d022      	beq.n	b507c <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xb6>
  if(spi) {
   b5036:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(n--) SPIwrite(pgm_read_byte(c++));
   b5038:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
   b503c:	b118      	cbz	r0, b5046 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x80>
    (void)spi->transfer(d);
   b503e:	4649      	mov	r1, r9
   b5040:	f001 fd5e 	bl	b6b00 <_ZN8SPIClass8transferEh>
   b5044:	e7f5      	b.n	b5032 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
   b5046:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b5048:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b504c:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b5050:	ea09 0108 	and.w	r1, r9, r8
   b5054:	b280      	uxth	r0, r0
   b5056:	f001 ffcc 	bl	b6ff2 <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b505a:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b505e:	2101      	movs	r1, #1
   b5060:	b280      	uxth	r0, r0
   b5062:	f001 ffc6 	bl	b6ff2 <digitalWrite>
      digitalWrite(clkPin , LOW);
   b5066:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b506a:	2100      	movs	r1, #0
   b506c:	b280      	uxth	r0, r0
   b506e:	f001 ffc0 	bl	b6ff2 <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b5072:	3e01      	subs	r6, #1
   b5074:	ea4f 0858 	mov.w	r8, r8, lsr #1
   b5078:	d1e8      	bne.n	b504c <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x86>
   b507a:	e7da      	b.n	b5032 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
}
   b507c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000b5080 <_ZN16Adafruit_SSD130612clearDisplayEv>:
  memset(buffer, 0, WIDTH * ((HEIGHT + 7) / 8));
   b5080:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   b5084:	1dda      	adds	r2, r3, #7
   b5086:	bf48      	it	mi
   b5088:	f103 020e 	addmi.w	r2, r3, #14
   b508c:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   b5090:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b5092:	10d2      	asrs	r2, r2, #3
   b5094:	435a      	muls	r2, r3
   b5096:	2100      	movs	r1, #0
   b5098:	f002 b868 	b.w	b716c <memset>

000b509c <_ZN16Adafruit_SSD13065beginEhhbb>:
  boolean periphBegin) {
   b509c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b50a0:	461e      	mov	r6, r3
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b50a2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  boolean periphBegin) {
   b50a4:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   b50a8:	4604      	mov	r4, r0
   b50aa:	460f      	mov	r7, r1
   b50ac:	4615      	mov	r5, r2
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b50ae:	b1d3      	cbz	r3, b50e6 <_ZN16Adafruit_SSD13065beginEhhbb+0x4a>
  clearDisplay();
   b50b0:	4620      	mov	r0, r4
   b50b2:	f7ff ffe5 	bl	b5080 <_ZN16Adafruit_SSD130612clearDisplayEv>
  if(HEIGHT > 32) {
   b50b6:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
   b50ba:	2a20      	cmp	r2, #32
   b50bc:	dc25      	bgt.n	b510a <_ZN16Adafruit_SSD13065beginEhhbb+0x6e>
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   b50be:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
   b50c2:	2320      	movs	r3, #32
   b50c4:	3a20      	subs	r2, #32
   b50c6:	3973      	subs	r1, #115	; 0x73
   b50c8:	2001      	movs	r0, #1
   b50ca:	e9cd 3001 	strd	r3, r0, [sp, #4]
   b50ce:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   b50d2:	2373      	movs	r3, #115	; 0x73
   b50d4:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   b50d8:	9300      	str	r3, [sp, #0]
   b50da:	f342 024f 	sbfx	r2, r2, #1, #16
   b50de:	4b85      	ldr	r3, [pc, #532]	; (b52f4 <_ZN16Adafruit_SSD13065beginEhhbb+0x258>)
   b50e0:	f341 014f 	sbfx	r1, r1, #1, #16
   b50e4:	e01b      	b.n	b511e <_ZN16Adafruit_SSD13065beginEhhbb+0x82>
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b50e6:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   b50ea:	1dd8      	adds	r0, r3, #7
   b50ec:	bf48      	it	mi
   b50ee:	f103 000e 	addmi.w	r0, r3, #14
   b50f2:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
   b50f6:	10c0      	asrs	r0, r0, #3
   b50f8:	4358      	muls	r0, r3
   b50fa:	f001 f99f 	bl	b643c <malloc>
   b50fe:	62e0      	str	r0, [r4, #44]	; 0x2c
   b5100:	2800      	cmp	r0, #0
   b5102:	d1d5      	bne.n	b50b0 <_ZN16Adafruit_SSD13065beginEhhbb+0x14>
}
   b5104:	b004      	add	sp, #16
   b5106:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      drawBitmap(0,0, sucreLogoNew_data, sucreLogo_width, sucreLogo_height, 1);
   b510a:	2340      	movs	r3, #64	; 0x40
   b510c:	f04f 0c01 	mov.w	ip, #1
   b5110:	e9cd 3c01 	strd	r3, ip, [sp, #4]
   b5114:	2380      	movs	r3, #128	; 0x80
   b5116:	9300      	str	r3, [sp, #0]
   b5118:	2200      	movs	r2, #0
   b511a:	4b77      	ldr	r3, [pc, #476]	; (b52f8 <_ZN16Adafruit_SSD13065beginEhhbb+0x25c>)
   b511c:	4611      	mov	r1, r2
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   b511e:	4620      	mov	r0, r4
   b5120:	f7ff fbc6 	bl	b48b0 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
  if(wire) { // Using I2C
   b5124:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  vccstate = vcs;
   b5126:	f884 7031 	strb.w	r7, [r4, #49]	; 0x31
  if(wire) { // Using I2C
   b512a:	2800      	cmp	r0, #0
   b512c:	d078      	beq.n	b5220 <_ZN16Adafruit_SSD13065beginEhhbb+0x184>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   b512e:	2d00      	cmp	r5, #0
   b5130:	d174      	bne.n	b521c <_ZN16Adafruit_SSD13065beginEhhbb+0x180>
   b5132:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   b5136:	2b20      	cmp	r3, #32
   b5138:	bf0c      	ite	eq
   b513a:	253c      	moveq	r5, #60	; 0x3c
   b513c:	253d      	movne	r5, #61	; 0x3d
   b513e:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    if(periphBegin) wire->begin();
   b5142:	f1b8 0f00 	cmp.w	r8, #0
   b5146:	d001      	beq.n	b514c <_ZN16Adafruit_SSD13065beginEhhbb+0xb0>
   b5148:	f001 fa4e 	bl	b65e8 <_ZN7TwoWire5beginEv>
  if(reset && (rstPin >= 0)) {
   b514c:	b1fe      	cbz	r6, b518e <_ZN16Adafruit_SSD13065beginEhhbb+0xf2>
   b514e:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b5152:	2800      	cmp	r0, #0
   b5154:	db1b      	blt.n	b518e <_ZN16Adafruit_SSD13065beginEhhbb+0xf2>
    pinMode(     rstPin, OUTPUT);
   b5156:	2101      	movs	r1, #1
   b5158:	b280      	uxth	r0, r0
   b515a:	f001 ff39 	bl	b6fd0 <pinMode>
    digitalWrite(rstPin, HIGH);
   b515e:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b5162:	2101      	movs	r1, #1
   b5164:	b280      	uxth	r0, r0
   b5166:	f001 ff44 	bl	b6ff2 <digitalWrite>
    delay(1);                   // VDD goes high at start, pause for 1 ms
   b516a:	2001      	movs	r0, #1
   b516c:	f001 f996 	bl	b649c <delay>
    digitalWrite(rstPin, LOW);  // Bring reset low
   b5170:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b5174:	2100      	movs	r1, #0
   b5176:	b280      	uxth	r0, r0
   b5178:	f001 ff3b 	bl	b6ff2 <digitalWrite>
    delay(10);                  // Wait 10 ms
   b517c:	200a      	movs	r0, #10
   b517e:	f001 f98d 	bl	b649c <delay>
    digitalWrite(rstPin, HIGH); // Bring out of reset
   b5182:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b5186:	2101      	movs	r1, #1
   b5188:	b280      	uxth	r0, r0
   b518a:	f001 ff32 	bl	b6ff2 <digitalWrite>
  TRANSACTION_START
   b518e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5190:	2800      	cmp	r0, #0
   b5192:	d074      	beq.n	b527e <_ZN16Adafruit_SSD13065beginEhhbb+0x1e2>
   b5194:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b5196:	f001 fa23 	bl	b65e0 <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(init1, sizeof(init1));
   b519a:	2204      	movs	r2, #4
   b519c:	4957      	ldr	r1, [pc, #348]	; (b52fc <_ZN16Adafruit_SSD13065beginEhhbb+0x260>)
   b519e:	4620      	mov	r0, r4
   b51a0:	f7ff ff11 	bl	b4fc6 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(HEIGHT - 1);
   b51a4:	8961      	ldrh	r1, [r4, #10]
   b51a6:	3901      	subs	r1, #1
   b51a8:	b2c9      	uxtb	r1, r1
   b51aa:	4620      	mov	r0, r4
   b51ac:	f7ff fe9c 	bl	b4ee8 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init2, sizeof(init2));
   b51b0:	4953      	ldr	r1, [pc, #332]	; (b5300 <_ZN16Adafruit_SSD13065beginEhhbb+0x264>)
   b51b2:	2204      	movs	r2, #4
   b51b4:	4620      	mov	r0, r4
   b51b6:	f7ff ff06 	bl	b4fc6 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0x14);
   b51ba:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b51be:	2b01      	cmp	r3, #1
   b51c0:	bf0c      	ite	eq
   b51c2:	2110      	moveq	r1, #16
   b51c4:	2114      	movne	r1, #20
   b51c6:	4620      	mov	r0, r4
   b51c8:	f7ff fe8e 	bl	b4ee8 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init3, sizeof(init3));
   b51cc:	2204      	movs	r2, #4
   b51ce:	494d      	ldr	r1, [pc, #308]	; (b5304 <_ZN16Adafruit_SSD13065beginEhhbb+0x268>)
   b51d0:	4620      	mov	r0, r4
   b51d2:	f7ff fef8 	bl	b4fc6 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  if((WIDTH == 128) && (HEIGHT == 32)) {
   b51d6:	68a3      	ldr	r3, [r4, #8]
   b51d8:	4a4b      	ldr	r2, [pc, #300]	; (b5308 <_ZN16Adafruit_SSD13065beginEhhbb+0x26c>)
   b51da:	4293      	cmp	r3, r2
   b51dc:	d15c      	bne.n	b5298 <_ZN16Adafruit_SSD13065beginEhhbb+0x1fc>
    ssd1306_commandList(init4a, sizeof(init4a));
   b51de:	494b      	ldr	r1, [pc, #300]	; (b530c <_ZN16Adafruit_SSD13065beginEhhbb+0x270>)
   b51e0:	2204      	movs	r2, #4
   b51e2:	4620      	mov	r0, r4
   b51e4:	f7ff feef 	bl	b4fc6 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(SSD1306_SETPRECHARGE); // 0xd9
   b51e8:	21d9      	movs	r1, #217	; 0xd9
   b51ea:	4620      	mov	r0, r4
   b51ec:	f7ff fe7c 	bl	b4ee8 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x22 : 0xF1);
   b51f0:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b51f4:	2b01      	cmp	r3, #1
   b51f6:	bf0c      	ite	eq
   b51f8:	2122      	moveq	r1, #34	; 0x22
   b51fa:	21f1      	movne	r1, #241	; 0xf1
   b51fc:	4620      	mov	r0, r4
   b51fe:	f7ff fe73 	bl	b4ee8 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init5, sizeof(init5));
   b5202:	4620      	mov	r0, r4
   b5204:	4942      	ldr	r1, [pc, #264]	; (b5310 <_ZN16Adafruit_SSD13065beginEhhbb+0x274>)
   b5206:	2206      	movs	r2, #6
   b5208:	f7ff fedd 	bl	b4fc6 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  TRANSACTION_END
   b520c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b520e:	2800      	cmp	r0, #0
   b5210:	d063      	beq.n	b52da <_ZN16Adafruit_SSD13065beginEhhbb+0x23e>
   b5212:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   b5214:	f001 f9e4 	bl	b65e0 <_ZN7TwoWire8setSpeedEm>
  return true; // Success
   b5218:	2001      	movs	r0, #1
   b521a:	e773      	b.n	b5104 <_ZN16Adafruit_SSD13065beginEhhbb+0x68>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   b521c:	b26d      	sxtb	r5, r5
   b521e:	e78e      	b.n	b513e <_ZN16Adafruit_SSD13065beginEhhbb+0xa2>
    pinMode(dcPin, OUTPUT); // Set data/command pin as output
   b5220:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   b5224:	2101      	movs	r1, #1
   b5226:	b280      	uxth	r0, r0
   b5228:	f001 fed2 	bl	b6fd0 <pinMode>
    pinMode(csPin, OUTPUT); // Same for chip select
   b522c:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b5230:	2101      	movs	r1, #1
   b5232:	b280      	uxth	r0, r0
   b5234:	f001 fecc 	bl	b6fd0 <pinMode>
    SSD1306_DESELECT
   b5238:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b523c:	2101      	movs	r1, #1
   b523e:	b280      	uxth	r0, r0
   b5240:	f001 fed7 	bl	b6ff2 <digitalWrite>
    if(spi) { // Hardware SPI
   b5244:	6a65      	ldr	r5, [r4, #36]	; 0x24
   b5246:	b13d      	cbz	r5, b5258 <_ZN16Adafruit_SSD13065beginEhhbb+0x1bc>
      if(periphBegin) spi->begin();
   b5248:	f1b8 0f00 	cmp.w	r8, #0
   b524c:	f43f af7e 	beq.w	b514c <_ZN16Adafruit_SSD13065beginEhhbb+0xb0>
   b5250:	4628      	mov	r0, r5
   b5252:	f001 fbb9 	bl	b69c8 <_ZN8SPIClass5beginEv>
   b5256:	e779      	b.n	b514c <_ZN16Adafruit_SSD13065beginEhhbb+0xb0>
      pinMode(mosiPin, OUTPUT); // MOSI and SCLK outputs
   b5258:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b525c:	2101      	movs	r1, #1
   b525e:	b280      	uxth	r0, r0
   b5260:	f001 feb6 	bl	b6fd0 <pinMode>
      pinMode(clkPin , OUTPUT);
   b5264:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b5268:	2101      	movs	r1, #1
   b526a:	b280      	uxth	r0, r0
   b526c:	f001 feb0 	bl	b6fd0 <pinMode>
      digitalWrite(clkPin, LOW); // Clock low
   b5270:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b5274:	4629      	mov	r1, r5
   b5276:	b280      	uxth	r0, r0
   b5278:	f001 febb 	bl	b6ff2 <digitalWrite>
   b527c:	e766      	b.n	b514c <_ZN16Adafruit_SSD13065beginEhhbb+0xb0>
  TRANSACTION_START
   b527e:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b5280:	b118      	cbz	r0, b528a <_ZN16Adafruit_SSD13065beginEhhbb+0x1ee>
   b5282:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b5286:	f001 fbcd 	bl	b6a24 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b528a:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b528e:	2100      	movs	r1, #0
   b5290:	b280      	uxth	r0, r0
   b5292:	f001 feae 	bl	b6ff2 <digitalWrite>
   b5296:	e780      	b.n	b519a <_ZN16Adafruit_SSD13065beginEhhbb+0xfe>
  } else if((WIDTH == 128) && (HEIGHT == 64)) {
   b5298:	4a1e      	ldr	r2, [pc, #120]	; (b5314 <_ZN16Adafruit_SSD13065beginEhhbb+0x278>)
   b529a:	4293      	cmp	r3, r2
   b529c:	d10e      	bne.n	b52bc <_ZN16Adafruit_SSD13065beginEhhbb+0x220>
    ssd1306_commandList(init4b, sizeof(init4b));
   b529e:	491e      	ldr	r1, [pc, #120]	; (b5318 <_ZN16Adafruit_SSD13065beginEhhbb+0x27c>)
   b52a0:	2203      	movs	r2, #3
   b52a2:	4620      	mov	r0, r4
   b52a4:	f7ff fe8f 	bl	b4fc6 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x9F : 0xCF);
   b52a8:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b52ac:	2b01      	cmp	r3, #1
   b52ae:	bf0c      	ite	eq
   b52b0:	219f      	moveq	r1, #159	; 0x9f
   b52b2:	21cf      	movne	r1, #207	; 0xcf
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   b52b4:	4620      	mov	r0, r4
   b52b6:	f7ff fe17 	bl	b4ee8 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
   b52ba:	e795      	b.n	b51e8 <_ZN16Adafruit_SSD13065beginEhhbb+0x14c>
  } else if((WIDTH == 96) && (HEIGHT == 16)) {
   b52bc:	4a17      	ldr	r2, [pc, #92]	; (b531c <_ZN16Adafruit_SSD13065beginEhhbb+0x280>)
   b52be:	4293      	cmp	r3, r2
   b52c0:	d192      	bne.n	b51e8 <_ZN16Adafruit_SSD13065beginEhhbb+0x14c>
    ssd1306_commandList(init4c, sizeof(init4c));
   b52c2:	4917      	ldr	r1, [pc, #92]	; (b5320 <_ZN16Adafruit_SSD13065beginEhhbb+0x284>)
   b52c4:	2203      	movs	r2, #3
   b52c6:	4620      	mov	r0, r4
   b52c8:	f7ff fe7d 	bl	b4fc6 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   b52cc:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b52d0:	2b01      	cmp	r3, #1
   b52d2:	bf0c      	ite	eq
   b52d4:	2110      	moveq	r1, #16
   b52d6:	21af      	movne	r1, #175	; 0xaf
   b52d8:	e7ec      	b.n	b52b4 <_ZN16Adafruit_SSD13065beginEhhbb+0x218>
  TRANSACTION_END
   b52da:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b52de:	2101      	movs	r1, #1
   b52e0:	b280      	uxth	r0, r0
   b52e2:	f001 fe86 	bl	b6ff2 <digitalWrite>
   b52e6:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b52e8:	2800      	cmp	r0, #0
   b52ea:	d095      	beq.n	b5218 <_ZN16Adafruit_SSD13065beginEhhbb+0x17c>
   b52ec:	f001 fb80 	bl	b69f0 <_ZN8SPIClass14endTransactionEv>
   b52f0:	e792      	b.n	b5218 <_ZN16Adafruit_SSD13065beginEhhbb+0x17c>
   b52f2:	bf00      	nop
   b52f4:	000b7ac8 	.word	0x000b7ac8
   b52f8:	000b7ca8 	.word	0x000b7ca8
   b52fc:	000b8110 	.word	0x000b8110
   b5300:	000b8114 	.word	0x000b8114
   b5304:	000b8118 	.word	0x000b8118
   b5308:	00200080 	.word	0x00200080
   b530c:	000b8122 	.word	0x000b8122
   b5310:	000b811c 	.word	0x000b811c
   b5314:	00400080 	.word	0x00400080
   b5318:	000b8126 	.word	0x000b8126
   b531c:	00100060 	.word	0x00100060
   b5320:	000b8129 	.word	0x000b8129

000b5324 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b5324:	b570      	push	{r4, r5, r6, lr}
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   b5326:	2a00      	cmp	r2, #0
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b5328:	f8bd 5010 	ldrh.w	r5, [sp, #16]
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   b532c:	db3d      	blt.n	b53aa <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b532e:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   b5332:	4294      	cmp	r4, r2
   b5334:	dd39      	ble.n	b53aa <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
    if(x < 0) { // Clip left
   b5336:	2900      	cmp	r1, #0
      w += x;
   b5338:	bfbe      	ittt	lt
   b533a:	185b      	addlt	r3, r3, r1
   b533c:	b21b      	sxthlt	r3, r3
      x  = 0;
   b533e:	2100      	movlt	r1, #0
    if((x + w) > WIDTH) { // Clip right
   b5340:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
   b5344:	18ce      	adds	r6, r1, r3
   b5346:	42a6      	cmp	r6, r4
      w = (WIDTH - x);
   b5348:	bfc4      	itt	gt
   b534a:	1a63      	subgt	r3, r4, r1
   b534c:	b21b      	sxthgt	r3, r3
    if(w > 0) { // Proceed only if width is positive
   b534e:	2b00      	cmp	r3, #0
   b5350:	dd2b      	ble.n	b53aa <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x],
   b5352:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b5354:	10d6      	asrs	r6, r2, #3
   b5356:	fb14 1106 	smlabb	r1, r4, r6, r1
   b535a:	4401      	add	r1, r0
               mask = 1 << (y & 7);
   b535c:	f002 0007 	and.w	r0, r2, #7
   b5360:	2201      	movs	r2, #1
   b5362:	4082      	lsls	r2, r0
      switch(color) {
   b5364:	2d01      	cmp	r5, #1
               mask = 1 << (y & 7);
   b5366:	b2d2      	uxtb	r2, r2
      switch(color) {
   b5368:	d016      	beq.n	b5398 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x74>
   b536a:	2d02      	cmp	r5, #2
   b536c:	d00b      	beq.n	b5386 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x62>
   b536e:	b9e5      	cbnz	r5, b53aa <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
       case BLACK: mask = ~mask; while(w--) { *pBuf++ &= mask; }; break;
   b5370:	43d2      	mvns	r2, r2
   b5372:	b2d2      	uxtb	r2, r2
   b5374:	440b      	add	r3, r1
   b5376:	4299      	cmp	r1, r3
   b5378:	d017      	beq.n	b53aa <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b537a:	f811 0b01 	ldrb.w	r0, [r1], #1
   b537e:	4010      	ands	r0, r2
   b5380:	f801 0c01 	strb.w	r0, [r1, #-1]
   b5384:	e7f7      	b.n	b5376 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x52>
   b5386:	440b      	add	r3, r1
       case INVERSE:             while(w--) { *pBuf++ ^= mask; }; break;
   b5388:	4299      	cmp	r1, r3
   b538a:	d00e      	beq.n	b53aa <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b538c:	f811 0b01 	ldrb.w	r0, [r1], #1
   b5390:	4050      	eors	r0, r2
   b5392:	f801 0c01 	strb.w	r0, [r1, #-1]
   b5396:	e7f7      	b.n	b5388 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x64>
   b5398:	440b      	add	r3, r1
       case WHITE:               while(w--) { *pBuf++ |= mask; }; break;
   b539a:	4299      	cmp	r1, r3
   b539c:	d005      	beq.n	b53aa <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b539e:	f811 0b01 	ldrb.w	r0, [r1], #1
   b53a2:	4310      	orrs	r0, r2
   b53a4:	f801 0c01 	strb.w	r0, [r1, #-1]
   b53a8:	e7f7      	b.n	b539a <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x76>
}
   b53aa:	bd70      	pop	{r4, r5, r6, pc}

000b53ac <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>:
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
   b53ac:	b5f0      	push	{r4, r5, r6, r7, lr}
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   b53ae:	2900      	cmp	r1, #0
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
   b53b0:	f8bd 5014 	ldrh.w	r5, [sp, #20]
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   b53b4:	db76      	blt.n	b54a4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
   b53b6:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
   b53ba:	42b1      	cmp	r1, r6
   b53bc:	da72      	bge.n	b54a4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
    if(__y < 0) { // Clip top
   b53be:	2a00      	cmp	r2, #0
      __h += __y;
   b53c0:	bfbe      	ittt	lt
   b53c2:	189b      	addlt	r3, r3, r2
   b53c4:	b21b      	sxthlt	r3, r3
      __y = 0;
   b53c6:	2200      	movlt	r2, #0
    if((__y + __h) > HEIGHT) { // Clip bottom
   b53c8:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   b53cc:	18d7      	adds	r7, r2, r3
   b53ce:	42a7      	cmp	r7, r4
      __h = (HEIGHT - __y);
   b53d0:	bfc4      	itt	gt
   b53d2:	1aa3      	subgt	r3, r4, r2
   b53d4:	b21b      	sxthgt	r3, r3
    if(__h > 0) { // Proceed only if height is now positive
   b53d6:	2b00      	cmp	r3, #0
   b53d8:	dd64      	ble.n	b54a4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   b53da:	f3c2 04c4 	ubfx	r4, r2, #3, #5
   b53de:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
   b53e0:	fb16 1604 	smlabb	r6, r6, r4, r1
      if(mod) {
   b53e4:	f012 0207 	ands.w	r2, r2, #7
      uint8_t  y = __y, h = __h;
   b53e8:	b2db      	uxtb	r3, r3
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   b53ea:	eb07 0406 	add.w	r4, r7, r6
      if(mod) {
   b53ee:	d023      	beq.n	b5438 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x8c>
        mod = 8 - mod;
   b53f0:	f1c2 0208 	rsb	r2, r2, #8
   b53f4:	b2d2      	uxtb	r2, r2
        uint8_t mask = pgm_read_byte(&premask[mod]);
   b53f6:	492d      	ldr	r1, [pc, #180]	; (b54ac <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x100>)
        if(h < mod) mask &= (0XFF >> (mod - h));
   b53f8:	4293      	cmp	r3, r2
   b53fa:	bf3c      	itt	cc
   b53fc:	f04f 0cff 	movcc.w	ip, #255	; 0xff
   b5400:	eba2 0e03 	subcc.w	lr, r2, r3
        uint8_t mask = pgm_read_byte(&premask[mod]);
   b5404:	5c89      	ldrb	r1, [r1, r2]
        if(h < mod) mask &= (0XFF >> (mod - h));
   b5406:	bf3c      	itt	cc
   b5408:	fa4c fc0e 	asrcc.w	ip, ip, lr
   b540c:	ea0c 0101 	andcc.w	r1, ip, r1
        switch(color) {
   b5410:	2d01      	cmp	r5, #1
   b5412:	d007      	beq.n	b5424 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x78>
   b5414:	2d02      	cmp	r5, #2
   b5416:	d02e      	beq.n	b5476 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xca>
   b5418:	b94d      	cbnz	r5, b542e <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x82>
         case BLACK:   *pBuf &= ~mask; break;
   b541a:	f817 c006 	ldrb.w	ip, [r7, r6]
   b541e:	ea2c 0101 	bic.w	r1, ip, r1
   b5422:	e003      	b.n	b542c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x80>
         case WHITE:   *pBuf |=  mask; break;
   b5424:	f817 c006 	ldrb.w	ip, [r7, r6]
   b5428:	ea41 010c 	orr.w	r1, r1, ip
         case INVERSE: *pBuf ^=  mask; break;
   b542c:	55b9      	strb	r1, [r7, r6]
      if(h >= mod) { // More to go?
   b542e:	4293      	cmp	r3, r2
   b5430:	d338      	bcc.n	b54a4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
        pBuf += WIDTH;
   b5432:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
   b5436:	440c      	add	r4, r1
        h -= mod;
   b5438:	1a9a      	subs	r2, r3, r2
   b543a:	b2d2      	uxtb	r2, r2
        if(h >= 8) {
   b543c:	2a07      	cmp	r2, #7
   b543e:	d90e      	bls.n	b545e <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xb2>
          if(color == INVERSE) {
   b5440:	2d02      	cmp	r5, #2
   b5442:	d11d      	bne.n	b5480 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xd4>
   b5444:	4613      	mov	r3, r2
              *pBuf ^= 0xFF;  // Invert byte
   b5446:	7821      	ldrb	r1, [r4, #0]
   b5448:	43c9      	mvns	r1, r1
   b544a:	7021      	strb	r1, [r4, #0]
              h     -= 8;     // Subtract 8 rows from height
   b544c:	3b08      	subs	r3, #8
              pBuf  += WIDTH; // Advance pointer 8 rows
   b544e:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
              h     -= 8;     // Subtract 8 rows from height
   b5452:	b2db      	uxtb	r3, r3
            } while(h >= 8);
   b5454:	2b07      	cmp	r3, #7
              pBuf  += WIDTH; // Advance pointer 8 rows
   b5456:	440c      	add	r4, r1
            } while(h >= 8);
   b5458:	d8f5      	bhi.n	b5446 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x9a>
              h    -= 8;      // Subtract 8 rows from height
   b545a:	f002 0207 	and.w	r2, r2, #7
        if(h) { // Do the final partial byte, if necessary
   b545e:	b30a      	cbz	r2, b54a4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   b5460:	4b13      	ldr	r3, [pc, #76]	; (b54b0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x104>)
          switch(color) {
   b5462:	2d01      	cmp	r5, #1
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   b5464:	5c9b      	ldrb	r3, [r3, r2]
          switch(color) {
   b5466:	d01a      	beq.n	b549e <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf2>
   b5468:	2d02      	cmp	r5, #2
   b546a:	d01c      	beq.n	b54a6 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xfa>
   b546c:	b9d5      	cbnz	r5, b54a4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
           case BLACK:   *pBuf &= ~mask; break;
   b546e:	7822      	ldrb	r2, [r4, #0]
   b5470:	ea22 0303 	bic.w	r3, r2, r3
   b5474:	e015      	b.n	b54a2 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
         case INVERSE: *pBuf ^=  mask; break;
   b5476:	f817 c006 	ldrb.w	ip, [r7, r6]
   b547a:	ea81 010c 	eor.w	r1, r1, ip
   b547e:	e7d5      	b.n	b542c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x80>
            uint8_t val = (color != BLACK) ? 255 : 0;
   b5480:	1e29      	subs	r1, r5, #0
   b5482:	bf18      	it	ne
   b5484:	2101      	movne	r1, #1
   b5486:	4249      	negs	r1, r1
   b5488:	b2c9      	uxtb	r1, r1
   b548a:	4613      	mov	r3, r2
              *pBuf = val;    // Set byte
   b548c:	7021      	strb	r1, [r4, #0]
              h    -= 8;      // Subtract 8 rows from height
   b548e:	3b08      	subs	r3, #8
              pBuf += WIDTH;  // Advance pointer 8 rows
   b5490:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
              h    -= 8;      // Subtract 8 rows from height
   b5494:	b2db      	uxtb	r3, r3
            } while(h >= 8);
   b5496:	2b07      	cmp	r3, #7
              pBuf += WIDTH;  // Advance pointer 8 rows
   b5498:	4434      	add	r4, r6
            } while(h >= 8);
   b549a:	d8f7      	bhi.n	b548c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xe0>
   b549c:	e7dd      	b.n	b545a <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xae>
           case WHITE:   *pBuf |=  mask; break;
   b549e:	7822      	ldrb	r2, [r4, #0]
   b54a0:	4313      	orrs	r3, r2
           case INVERSE: *pBuf ^=  mask; break;
   b54a2:	7023      	strb	r3, [r4, #0]
}
   b54a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
           case INVERSE: *pBuf ^=  mask; break;
   b54a6:	7822      	ldrb	r2, [r4, #0]
   b54a8:	4053      	eors	r3, r2
   b54aa:	e7fa      	b.n	b54a2 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
   b54ac:	000b8100 	.word	0x000b8100
   b54b0:	000b8108 	.word	0x000b8108

000b54b4 <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b54b4:	b470      	push	{r4, r5, r6}
   b54b6:	4614      	mov	r4, r2
  switch(rotation) {
   b54b8:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b54ba:	f8bd 600c 	ldrh.w	r6, [sp, #12]
  switch(rotation) {
   b54be:	2a02      	cmp	r2, #2
   b54c0:	d00d      	beq.n	b54de <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x2a>
   b54c2:	2a03      	cmp	r2, #3
   b54c4:	d018      	beq.n	b54f8 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x44>
   b54c6:	2a01      	cmp	r2, #1
   b54c8:	d111      	bne.n	b54ee <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3a>
    x = WIDTH - x - 1;
   b54ca:	8902      	ldrh	r2, [r0, #8]
   b54cc:	43e4      	mvns	r4, r4
   b54ce:	4414      	add	r4, r2
   b54d0:	b224      	sxth	r4, r4
  if(bSwap) drawFastVLineInternal(x, y, w, color);
   b54d2:	9603      	str	r6, [sp, #12]
   b54d4:	460a      	mov	r2, r1
   b54d6:	4621      	mov	r1, r4
}
   b54d8:	bc70      	pop	{r4, r5, r6}
  if(bSwap) drawFastVLineInternal(x, y, w, color);
   b54da:	f7ff bf67 	b.w	b53ac <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y  = HEIGHT - y - 1;
   b54de:	8942      	ldrh	r2, [r0, #10]
    x -= (w-1);
   b54e0:	8905      	ldrh	r5, [r0, #8]
    y  = HEIGHT - y - 1;
   b54e2:	43e4      	mvns	r4, r4
    x -= (w-1);
   b54e4:	4419      	add	r1, r3
    y  = HEIGHT - y - 1;
   b54e6:	4414      	add	r4, r2
    x -= (w-1);
   b54e8:	1a69      	subs	r1, r5, r1
    y  = HEIGHT - y - 1;
   b54ea:	b224      	sxth	r4, r4
    x -= (w-1);
   b54ec:	b209      	sxth	r1, r1
  else      drawFastHLineInternal(x, y, w, color);
   b54ee:	9603      	str	r6, [sp, #12]
   b54f0:	4622      	mov	r2, r4
}
   b54f2:	bc70      	pop	{r4, r5, r6}
  else      drawFastHLineInternal(x, y, w, color);
   b54f4:	f7ff bf16 	b.w	b5324 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    y -= (w-1);
   b54f8:	8945      	ldrh	r5, [r0, #10]
   b54fa:	4419      	add	r1, r3
   b54fc:	1a69      	subs	r1, r5, r1
   b54fe:	b209      	sxth	r1, r1
    break;
   b5500:	e7e7      	b.n	b54d2 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>

000b5502 <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
  int16_t x, int16_t y, int16_t h, uint16_t color) {
   b5502:	b430      	push	{r4, r5}
   b5504:	4614      	mov	r4, r2
  switch(rotation) {
   b5506:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t h, uint16_t color) {
   b5508:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  switch(rotation) {
   b550c:	2a02      	cmp	r2, #2
   b550e:	d00d      	beq.n	b552c <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x2a>
   b5510:	2a03      	cmp	r2, #3
   b5512:	d018      	beq.n	b5546 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x44>
   b5514:	2a01      	cmp	r2, #1
   b5516:	d111      	bne.n	b553c <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    x -= (h-1);
   b5518:	18e2      	adds	r2, r4, r3
   b551a:	8904      	ldrh	r4, [r0, #8]
   b551c:	1aa4      	subs	r4, r4, r2
   b551e:	b224      	sxth	r4, r4
  if(bSwap) drawFastHLineInternal(x, y, h, color);
   b5520:	9502      	str	r5, [sp, #8]
   b5522:	460a      	mov	r2, r1
   b5524:	4621      	mov	r1, r4
}
   b5526:	bc30      	pop	{r4, r5}
  if(bSwap) drawFastHLineInternal(x, y, h, color);
   b5528:	f7ff befc 	b.w	b5324 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    x = WIDTH  - x - 1;
   b552c:	8902      	ldrh	r2, [r0, #8]
   b552e:	43c9      	mvns	r1, r1
   b5530:	4411      	add	r1, r2
    y -= (h-1);
   b5532:	18e2      	adds	r2, r4, r3
   b5534:	8944      	ldrh	r4, [r0, #10]
   b5536:	1aa4      	subs	r4, r4, r2
    x = WIDTH  - x - 1;
   b5538:	b209      	sxth	r1, r1
    y -= (h-1);
   b553a:	b224      	sxth	r4, r4
  else      drawFastVLineInternal(x, y, h, color);
   b553c:	9502      	str	r5, [sp, #8]
   b553e:	4622      	mov	r2, r4
}
   b5540:	bc30      	pop	{r4, r5}
  else      drawFastVLineInternal(x, y, h, color);
   b5542:	f7ff bf33 	b.w	b53ac <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y = HEIGHT - y - 1;
   b5546:	8942      	ldrh	r2, [r0, #10]
   b5548:	43c9      	mvns	r1, r1
   b554a:	4411      	add	r1, r2
   b554c:	b209      	sxth	r1, r1
    break;
   b554e:	e7e7      	b.n	b5520 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>

000b5550 <_ZN16Adafruit_SSD13067displayEv>:
void Adafruit_SSD1306::display(void) {
   b5550:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b5554:	4604      	mov	r4, r0
  TRANSACTION_START
   b5556:	6a80      	ldr	r0, [r0, #40]	; 0x28
   b5558:	2800      	cmp	r0, #0
   b555a:	d042      	beq.n	b55e2 <_ZN16Adafruit_SSD13067displayEv+0x92>
   b555c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b555e:	f001 f83f 	bl	b65e0 <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(dlist1, sizeof(dlist1));
   b5562:	4947      	ldr	r1, [pc, #284]	; (b5680 <_ZN16Adafruit_SSD13067displayEv+0x130>)
   b5564:	2205      	movs	r2, #5
   b5566:	4620      	mov	r0, r4
   b5568:	f7ff fd2d 	bl	b4fc6 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(WIDTH - 1); // Column end address
   b556c:	8921      	ldrh	r1, [r4, #8]
   b556e:	3901      	subs	r1, #1
   b5570:	4620      	mov	r0, r4
   b5572:	b2c9      	uxtb	r1, r1
   b5574:	f7ff fcb8 	bl	b4ee8 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   b5578:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   b557c:	1dde      	adds	r6, r3, #7
   b557e:	bf48      	it	mi
   b5580:	f103 060e 	addmi.w	r6, r3, #14
  if(wire) { // I2C
   b5584:	e9d4 050a 	ldrd	r0, r5, [r4, #40]	; 0x28
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   b5588:	8923      	ldrh	r3, [r4, #8]
   b558a:	10f6      	asrs	r6, r6, #3
   b558c:	fb13 f606 	smulbb	r6, r3, r6
  uint8_t *ptr   = buffer;
   b5590:	fa15 f686 	uxtah	r6, r5, r6
  if(wire) { // I2C
   b5594:	2800      	cmp	r0, #0
   b5596:	d03a      	beq.n	b560e <_ZN16Adafruit_SSD13067displayEv+0xbe>
    wire->beginTransmission(i2caddr);
   b5598:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b559c:	f001 f82e 	bl	b65fc <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x40);
   b55a0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b55a2:	6803      	ldr	r3, [r0, #0]
   b55a4:	2140      	movs	r1, #64	; 0x40
   b55a6:	689b      	ldr	r3, [r3, #8]
   b55a8:	4798      	blx	r3
    uint8_t bytesOut = 1;
   b55aa:	2701      	movs	r7, #1
    while(count--) {
   b55ac:	42b5      	cmp	r5, r6
        wire->endTransmission();
   b55ae:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    while(count--) {
   b55b0:	d024      	beq.n	b55fc <_ZN16Adafruit_SSD13067displayEv+0xac>
      if(bytesOut >= WIRE_MAX) {
   b55b2:	2f1f      	cmp	r7, #31
   b55b4:	d90c      	bls.n	b55d0 <_ZN16Adafruit_SSD13067displayEv+0x80>
        wire->endTransmission();
   b55b6:	f001 f828 	bl	b660a <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   b55ba:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b55be:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b55c0:	f001 f81c 	bl	b65fc <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x40);
   b55c4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b55c6:	6803      	ldr	r3, [r0, #0]
   b55c8:	2140      	movs	r1, #64	; 0x40
   b55ca:	689b      	ldr	r3, [r3, #8]
   b55cc:	4798      	blx	r3
        bytesOut = 1;
   b55ce:	2701      	movs	r7, #1
      WIRE_WRITE(*ptr++);
   b55d0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b55d2:	f815 1b01 	ldrb.w	r1, [r5], #1
   b55d6:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   b55d8:	3701      	adds	r7, #1
      WIRE_WRITE(*ptr++);
   b55da:	689b      	ldr	r3, [r3, #8]
   b55dc:	4798      	blx	r3
      bytesOut++;
   b55de:	b2ff      	uxtb	r7, r7
    while(count--) {
   b55e0:	e7e4      	b.n	b55ac <_ZN16Adafruit_SSD13067displayEv+0x5c>
  TRANSACTION_START
   b55e2:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b55e4:	b118      	cbz	r0, b55ee <_ZN16Adafruit_SSD13067displayEv+0x9e>
   b55e6:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b55ea:	f001 fa1b 	bl	b6a24 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b55ee:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b55f2:	2100      	movs	r1, #0
   b55f4:	b280      	uxth	r0, r0
   b55f6:	f001 fcfc 	bl	b6ff2 <digitalWrite>
   b55fa:	e7b2      	b.n	b5562 <_ZN16Adafruit_SSD13067displayEv+0x12>
    wire->endTransmission();
   b55fc:	f001 f805 	bl	b660a <_ZN7TwoWire15endTransmissionEv>
  TRANSACTION_END
   b5600:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5602:	b378      	cbz	r0, b5664 <_ZN16Adafruit_SSD13067displayEv+0x114>
   b5604:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   b5606:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b560a:	f000 bfe9 	b.w	b65e0 <_ZN7TwoWire8setSpeedEm>
    SSD1306_MODE_DATA
   b560e:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   b5612:	2101      	movs	r1, #1
   b5614:	b280      	uxth	r0, r0
   b5616:	f001 fcec 	bl	b6ff2 <digitalWrite>
    while(count--) SPIwrite(*ptr++);
   b561a:	42ae      	cmp	r6, r5
   b561c:	d0f0      	beq.n	b5600 <_ZN16Adafruit_SSD13067displayEv+0xb0>
  if(spi) {
   b561e:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(count--) SPIwrite(*ptr++);
   b5620:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
   b5624:	b118      	cbz	r0, b562e <_ZN16Adafruit_SSD13067displayEv+0xde>
    (void)spi->transfer(d);
   b5626:	4649      	mov	r1, r9
   b5628:	f001 fa6a 	bl	b6b00 <_ZN8SPIClass8transferEh>
   b562c:	e7f5      	b.n	b561a <_ZN16Adafruit_SSD13067displayEv+0xca>
   b562e:	2708      	movs	r7, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b5630:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b5634:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b5638:	ea09 0108 	and.w	r1, r9, r8
   b563c:	b280      	uxth	r0, r0
   b563e:	f001 fcd8 	bl	b6ff2 <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b5642:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b5646:	2101      	movs	r1, #1
   b5648:	b280      	uxth	r0, r0
   b564a:	f001 fcd2 	bl	b6ff2 <digitalWrite>
      digitalWrite(clkPin , LOW);
   b564e:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b5652:	2100      	movs	r1, #0
   b5654:	b280      	uxth	r0, r0
   b5656:	f001 fccc 	bl	b6ff2 <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b565a:	3f01      	subs	r7, #1
   b565c:	ea4f 0858 	mov.w	r8, r8, lsr #1
   b5660:	d1e8      	bne.n	b5634 <_ZN16Adafruit_SSD13067displayEv+0xe4>
   b5662:	e7da      	b.n	b561a <_ZN16Adafruit_SSD13067displayEv+0xca>
  TRANSACTION_END
   b5664:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b5668:	2101      	movs	r1, #1
   b566a:	b280      	uxth	r0, r0
   b566c:	f001 fcc1 	bl	b6ff2 <digitalWrite>
   b5670:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b5672:	b118      	cbz	r0, b567c <_ZN16Adafruit_SSD13067displayEv+0x12c>
}
   b5674:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  TRANSACTION_END
   b5678:	f001 b9ba 	b.w	b69f0 <_ZN8SPIClass14endTransactionEv>
}
   b567c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b5680:	000b812c 	.word	0x000b812c

000b5684 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
    static SPIClass& instance() {
   b5684:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   b5686:	4c0b      	ldr	r4, [pc, #44]	; (b56b4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   b5688:	7821      	ldrb	r1, [r4, #0]
   b568a:	f3bf 8f5b 	dmb	ish
   b568e:	f011 0101 	ands.w	r1, r1, #1
   b5692:	d10b      	bne.n	b56ac <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b5694:	4620      	mov	r0, r4
   b5696:	9101      	str	r1, [sp, #4]
   b5698:	f7fe fd0a 	bl	b40b0 <__cxa_guard_acquire>
   b569c:	9901      	ldr	r1, [sp, #4]
   b569e:	b128      	cbz	r0, b56ac <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b56a0:	4805      	ldr	r0, [pc, #20]	; (b56b8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b56a2:	f001 f987 	bl	b69b4 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b56a6:	4620      	mov	r0, r4
   b56a8:	f7fe fd07 	bl	b40ba <__cxa_guard_release>
    }
   b56ac:	4802      	ldr	r0, [pc, #8]	; (b56b8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b56ae:	b002      	add	sp, #8
   b56b0:	bd10      	pop	{r4, pc}
   b56b2:	bf00      	nop
   b56b4:	2003e61c 	.word	0x2003e61c
   b56b8:	2003e620 	.word	0x2003e620

000b56bc <_ZN7MFRC522C1Ehh>:

/**
 * Constructor.
 * Prepares the output pins.
 */
MFRC522::MFRC522(	byte chipSelectPin,		///< Arduino pin connected to MFRC522's SPI slave select input (Pin 24, NSS, active low)
   b56bc:	b538      	push	{r3, r4, r5, lr}
   b56be:	4604      	mov	r4, r0
   b56c0:	4608      	mov	r0, r1
					byte resetPowerDownPin	///< Arduino pin connected to MFRC522's reset and power down input (Pin 6, NRSTPD, active low)
				) {
	// Set the chipSelectPin as digital output, do not select the slave yet
	_chipSelectPin = chipSelectPin;
   b56c2:	7321      	strb	r1, [r4, #12]
	pinMode(_chipSelectPin, OUTPUT);
   b56c4:	2101      	movs	r1, #1
MFRC522::MFRC522(	byte chipSelectPin,		///< Arduino pin connected to MFRC522's SPI slave select input (Pin 24, NSS, active low)
   b56c6:	4615      	mov	r5, r2
	pinMode(_chipSelectPin, OUTPUT);
   b56c8:	f001 fc82 	bl	b6fd0 <pinMode>
	digitalWrite(_chipSelectPin, HIGH);
   b56cc:	7b20      	ldrb	r0, [r4, #12]
   b56ce:	2101      	movs	r1, #1
   b56d0:	f001 fc8f 	bl	b6ff2 <digitalWrite>
	
	// Set the resetPowerDownPin as digital output, do not reset or power down.
	_resetPowerDownPin = resetPowerDownPin;
	pinMode(_resetPowerDownPin, OUTPUT);
   b56d4:	4628      	mov	r0, r5
	_resetPowerDownPin = resetPowerDownPin;
   b56d6:	7365      	strb	r5, [r4, #13]
	pinMode(_resetPowerDownPin, OUTPUT);
   b56d8:	2101      	movs	r1, #1
   b56da:	f001 fc79 	bl	b6fd0 <pinMode>
	digitalWrite(_resetPowerDownPin, LOW);
   b56de:	7b60      	ldrb	r0, [r4, #13]
   b56e0:	2100      	movs	r1, #0
   b56e2:	f001 fc86 	bl	b6ff2 <digitalWrite>
	
	// Set SPI bus to work with MFRC522 chip.
	//setSPIConfig();
} // End constructor
   b56e6:	4620      	mov	r0, r4
   b56e8:	bd38      	pop	{r3, r4, r5, pc}
	...

000b56ec <_ZN7MFRC52217GetStatusCodeNameEh>:
 * Returns a string pointer to a status code name.
 * 
 */
const char *MFRC522::GetStatusCodeName(byte code	///< One of the StatusCode enums.
										) {
	switch (code) {
   b56ec:	3901      	subs	r1, #1
   b56ee:	b2c9      	uxtb	r1, r1
   b56f0:	2908      	cmp	r1, #8
   b56f2:	bf9a      	itte	ls
   b56f4:	4b02      	ldrls	r3, [pc, #8]	; (b5700 <_ZN7MFRC52217GetStatusCodeNameEh+0x14>)
   b56f6:	f853 0021 	ldrls.w	r0, [r3, r1, lsl #2]
										) {
   b56fa:	4802      	ldrhi	r0, [pc, #8]	; (b5704 <_ZN7MFRC52217GetStatusCodeNameEh+0x18>)
		case STATUS_MIFARE_NACK:	return "A MIFARE PICC responded with NAK."; break;
		default:
			return "Unknown error";
			break;
	}
} // End GetStatusCodeName()
   b56fc:	4770      	bx	lr
   b56fe:	bf00      	nop
   b5700:	000b8228 	.word	0x000b8228
   b5704:	000b8131 	.word	0x000b8131

000b5708 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>:
        return instance().setClockSpeed(value, scale);
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
   b5708:	b507      	push	{r0, r1, r2, lr}
   b570a:	9001      	str	r0, [sp, #4]
        return instance().transfer(data);
   b570c:	f7ff ffba 	bl	b5684 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b5710:	9901      	ldr	r1, [sp, #4]
    }
   b5712:	b003      	add	sp, #12
   b5714:	f85d eb04 	ldr.w	lr, [sp], #4
        return instance().transfer(data);
   b5718:	f001 b9f2 	b.w	b6b00 <_ZN8SPIClass8transferEh>

000b571c <_ZN7MFRC52216PCD_ReadRegisterEhhPhh>:
								) {
   b571c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5720:	4607      	mov	r7, r0
   b5722:	f89d 8030 	ldrb.w	r8, [sp, #48]	; 0x30
   b5726:	461e      	mov	r6, r3
	if (count == 0) {
   b5728:	4615      	mov	r5, r2
   b572a:	2a00      	cmp	r2, #0
   b572c:	d042      	beq.n	b57b4 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x98>
	byte address = 0x80 | (reg & 0x7E);		// MSB == 1 is for reading. LSB is not used in address. Datasheet section 8.1.2.3.
   b572e:	f001 017e 	and.w	r1, r1, #126	; 0x7e
	digitalWrite(_chipSelectPin, LOW);		// Select slave
   b5732:	7b00      	ldrb	r0, [r0, #12]
	byte address = 0x80 | (reg & 0x7E);		// MSB == 1 is for reading. LSB is not used in address. Datasheet section 8.1.2.3.
   b5734:	f041 0980 	orr.w	r9, r1, #128	; 0x80
	digitalWrite(_chipSelectPin, LOW);		// Select slave
   b5738:	2100      	movs	r1, #0
   b573a:	f001 fc5a 	bl	b6ff2 <digitalWrite>
	SPI.transfer(address);					// Tell MFRC522 which address we want to read
   b573e:	4648      	mov	r0, r9
   b5740:	f7ff ffe2 	bl	b5708 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
	count--;								// One read is performed outside of the loop
   b5744:	3d01      	subs	r5, #1
   b5746:	b2ed      	uxtb	r5, r5
	SPI.transfer(address);					// Tell MFRC522 which address we want to read
   b5748:	f04f 0b00 	mov.w	fp, #0
				mask |= (1 << i);
   b574c:	f04f 0a01 	mov.w	sl, #1
	while (index < count) {
   b5750:	fa5f f48b 	uxtb.w	r4, fp
   b5754:	42a5      	cmp	r5, r4
   b5756:	d922      	bls.n	b579e <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x82>
		if (index == 0 && rxAlign) { // Only update bit positions rxAlign..7 in values[0]
   b5758:	b9dc      	cbnz	r4, b5792 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x76>
   b575a:	f1b8 0f00 	cmp.w	r8, #0
   b575e:	d018      	beq.n	b5792 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x76>
   b5760:	4642      	mov	r2, r8
			for (byte i = rxAlign; i <= 7; i++) {
   b5762:	b2d3      	uxtb	r3, r2
   b5764:	2b07      	cmp	r3, #7
				mask |= (1 << i);
   b5766:	b261      	sxtb	r1, r4
			for (byte i = rxAlign; i <= 7; i++) {
   b5768:	d805      	bhi.n	b5776 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x5a>
				mask |= (1 << i);
   b576a:	fa0a f402 	lsl.w	r4, sl, r2
   b576e:	430c      	orrs	r4, r1
   b5770:	b2e4      	uxtb	r4, r4
			for (byte i = rxAlign; i <= 7; i++) {
   b5772:	3201      	adds	r2, #1
   b5774:	e7f5      	b.n	b5762 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x46>
			byte value = SPI.transfer(address);	
   b5776:	4648      	mov	r0, r9
   b5778:	9101      	str	r1, [sp, #4]
   b577a:	f7ff ffc5 	bl	b5708 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
			values[0] = (values[index] & ~mask) | (value & mask);
   b577e:	7833      	ldrb	r3, [r6, #0]
   b5780:	9901      	ldr	r1, [sp, #4]
   b5782:	4004      	ands	r4, r0
   b5784:	ea23 0301 	bic.w	r3, r3, r1
   b5788:	431c      	orrs	r4, r3
   b578a:	7034      	strb	r4, [r6, #0]
		index++;
   b578c:	f10b 0b01 	add.w	fp, fp, #1
	while (index < count) {
   b5790:	e7de      	b.n	b5750 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x34>
			values[index] = SPI.transfer(address);	// Read value and tell that we want to read the same address again.
   b5792:	4648      	mov	r0, r9
   b5794:	f7ff ffb8 	bl	b5708 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
   b5798:	f806 000b 	strb.w	r0, [r6, fp]
   b579c:	e7f6      	b.n	b578c <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x70>
	values[index] = SPI.transfer(0);			// Read the final byte. Send 0 to stop reading.
   b579e:	2000      	movs	r0, #0
   b57a0:	f7ff ffb2 	bl	b5708 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
   b57a4:	5570      	strb	r0, [r6, r5]
	digitalWrite(_chipSelectPin, HIGH);			// Release slave again
   b57a6:	7b38      	ldrb	r0, [r7, #12]
   b57a8:	2101      	movs	r1, #1
} // End PCD_ReadRegister()
   b57aa:	b003      	add	sp, #12
   b57ac:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	digitalWrite(_chipSelectPin, HIGH);			// Release slave again
   b57b0:	f001 bc1f 	b.w	b6ff2 <digitalWrite>
} // End PCD_ReadRegister()
   b57b4:	b003      	add	sp, #12
   b57b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b57ba <_ZN7MFRC52216PCD_ReadRegisterEh>:
								) {
   b57ba:	b538      	push	{r3, r4, r5, lr}
   b57bc:	460c      	mov	r4, r1
   b57be:	4605      	mov	r5, r0
	digitalWrite(_chipSelectPin, LOW);			// Select slave
   b57c0:	2100      	movs	r1, #0
   b57c2:	7b00      	ldrb	r0, [r0, #12]
	SPI.transfer(0x80 | (reg & 0x7E));			// MSB == 1 is for reading. LSB is not used in address. Datasheet section 8.1.2.3.
   b57c4:	f004 047e 	and.w	r4, r4, #126	; 0x7e
	digitalWrite(_chipSelectPin, LOW);			// Select slave
   b57c8:	f001 fc13 	bl	b6ff2 <digitalWrite>
	SPI.transfer(0x80 | (reg & 0x7E));			// MSB == 1 is for reading. LSB is not used in address. Datasheet section 8.1.2.3.
   b57cc:	f044 0080 	orr.w	r0, r4, #128	; 0x80
   b57d0:	f7ff ff9a 	bl	b5708 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
	value = SPI.transfer(0);					// Read the value back. Send 0 to stop reading.
   b57d4:	2000      	movs	r0, #0
   b57d6:	f7ff ff97 	bl	b5708 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
	digitalWrite(_chipSelectPin, HIGH);			// Release slave again
   b57da:	2101      	movs	r1, #1
	value = SPI.transfer(0);					// Read the value back. Send 0 to stop reading.
   b57dc:	4604      	mov	r4, r0
	digitalWrite(_chipSelectPin, HIGH);			// Release slave again
   b57de:	7b28      	ldrb	r0, [r5, #12]
   b57e0:	f001 fc07 	bl	b6ff2 <digitalWrite>
} // End PCD_ReadRegister()
   b57e4:	4620      	mov	r0, r4
   b57e6:	bd38      	pop	{r3, r4, r5, pc}

000b57e8 <_ZN7MFRC52217PCD_WriteRegisterEhhPh>:
								) {
   b57e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b57ea:	460f      	mov	r7, r1
   b57ec:	4606      	mov	r6, r0
	digitalWrite(_chipSelectPin, LOW);		// Select slave
   b57ee:	2100      	movs	r1, #0
   b57f0:	7b00      	ldrb	r0, [r0, #12]
								) {
   b57f2:	4615      	mov	r5, r2
   b57f4:	461c      	mov	r4, r3
	digitalWrite(_chipSelectPin, LOW);		// Select slave
   b57f6:	f001 fbfc 	bl	b6ff2 <digitalWrite>
	SPI.transfer(reg & 0x7E);				// MSB == 0 is for writing. LSB is not used in address. Datasheet section 8.1.2.3.
   b57fa:	f007 007e 	and.w	r0, r7, #126	; 0x7e
   b57fe:	f7ff ff83 	bl	b5708 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
	for (byte index = 0; index < count; index++) {
   b5802:	4425      	add	r5, r4
   b5804:	42ac      	cmp	r4, r5
   b5806:	d004      	beq.n	b5812 <_ZN7MFRC52217PCD_WriteRegisterEhhPh+0x2a>
		SPI.transfer(values[index]);
   b5808:	f814 0b01 	ldrb.w	r0, [r4], #1
   b580c:	f7ff ff7c 	bl	b5708 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
	for (byte index = 0; index < count; index++) {
   b5810:	e7f8      	b.n	b5804 <_ZN7MFRC52217PCD_WriteRegisterEhhPh+0x1c>
	digitalWrite(_chipSelectPin, HIGH);		// Release slave again
   b5812:	7b30      	ldrb	r0, [r6, #12]
   b5814:	2101      	movs	r1, #1
} // End PCD_WriteRegister()
   b5816:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	digitalWrite(_chipSelectPin, HIGH);		// Release slave again
   b581a:	f001 bbea 	b.w	b6ff2 <digitalWrite>

000b581e <_ZN7MFRC52217PCD_WriteRegisterEhh>:
								) {
   b581e:	b570      	push	{r4, r5, r6, lr}
   b5820:	4604      	mov	r4, r0
   b5822:	460e      	mov	r6, r1
	digitalWrite(_chipSelectPin, LOW);		// Select slave
   b5824:	7b00      	ldrb	r0, [r0, #12]
   b5826:	2100      	movs	r1, #0
								) {
   b5828:	4615      	mov	r5, r2
	digitalWrite(_chipSelectPin, LOW);		// Select slave
   b582a:	f001 fbe2 	bl	b6ff2 <digitalWrite>
	SPI.transfer(reg & 0x7E);					// MSB == 0 is for writing. LSB is not used in address. Datasheet section 8.1.2.3.
   b582e:	f006 007e 	and.w	r0, r6, #126	; 0x7e
   b5832:	f7ff ff69 	bl	b5708 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
	SPI.transfer(value);
   b5836:	4628      	mov	r0, r5
   b5838:	f7ff ff66 	bl	b5708 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
	digitalWrite(_chipSelectPin, HIGH);		// Release slave again
   b583c:	7b20      	ldrb	r0, [r4, #12]
   b583e:	2101      	movs	r1, #1
} // End PCD_WriteRegister()
   b5840:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	digitalWrite(_chipSelectPin, HIGH);		// Release slave again
   b5844:	f001 bbd5 	b.w	b6ff2 <digitalWrite>

000b5848 <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>:
									) { 
   b5848:	b570      	push	{r4, r5, r6, lr}
   b584a:	4616      	mov	r6, r2
   b584c:	4604      	mov	r4, r0
   b584e:	460d      	mov	r5, r1
	tmp = PCD_ReadRegister(reg);
   b5850:	f7ff ffb3 	bl	b57ba <_ZN7MFRC52216PCD_ReadRegisterEh>
	PCD_WriteRegister(reg, tmp | mask);			// set bit mask
   b5854:	4330      	orrs	r0, r6
   b5856:	b2c2      	uxtb	r2, r0
   b5858:	4629      	mov	r1, r5
   b585a:	4620      	mov	r0, r4
} // End PCD_SetRegisterBitMask()
   b585c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	PCD_WriteRegister(reg, tmp | mask);			// set bit mask
   b5860:	f7ff bfdd 	b.w	b581e <_ZN7MFRC52217PCD_WriteRegisterEhh>

000b5864 <_ZN7MFRC52224PCD_ClearRegisterBitMaskEhh>:
									  ) {
   b5864:	b570      	push	{r4, r5, r6, lr}
   b5866:	4616      	mov	r6, r2
   b5868:	4604      	mov	r4, r0
   b586a:	460d      	mov	r5, r1
	tmp = PCD_ReadRegister(reg);
   b586c:	f7ff ffa5 	bl	b57ba <_ZN7MFRC52216PCD_ReadRegisterEh>
	PCD_WriteRegister(reg, tmp & (~mask));		// clear bit mask
   b5870:	ea20 0006 	bic.w	r0, r0, r6
   b5874:	b2c2      	uxtb	r2, r0
   b5876:	4629      	mov	r1, r5
   b5878:	4620      	mov	r0, r4
} // End PCD_ClearRegisterBitMask()
   b587a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	PCD_WriteRegister(reg, tmp & (~mask));		// clear bit mask
   b587e:	f7ff bfce 	b.w	b581e <_ZN7MFRC52217PCD_WriteRegisterEhh>

000b5882 <_ZN7MFRC52215PCD_StopCrypto1Ev>:
	PCD_ClearRegisterBitMask(Status2Reg, 0x08); // Status2Reg[7..0] bits are: TempSensClear I2CForceHS reserved reserved   MFCrypto1On ModemState[2:0]
   b5882:	2208      	movs	r2, #8
   b5884:	2110      	movs	r1, #16
   b5886:	f7ff bfed 	b.w	b5864 <_ZN7MFRC52224PCD_ClearRegisterBitMaskEhh>

000b588a <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>:
					 ) {
   b588a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b588c:	4604      	mov	r4, r0
   b588e:	4615      	mov	r5, r2
   b5890:	460f      	mov	r7, r1
	PCD_WriteRegister(CommandReg, PCD_Idle);			// Stop any active command.
   b5892:	2200      	movs	r2, #0
   b5894:	2102      	movs	r1, #2
					 ) {
   b5896:	461e      	mov	r6, r3
	PCD_WriteRegister(CommandReg, PCD_Idle);			// Stop any active command.
   b5898:	f7ff ffc1 	bl	b581e <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_WriteRegister(DivIrqReg, 0x04);					// Clear the CRCIRq interrupt request bit
   b589c:	2204      	movs	r2, #4
   b589e:	210a      	movs	r1, #10
   b58a0:	4620      	mov	r0, r4
   b58a2:	f7ff ffbc 	bl	b581e <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_SetRegisterBitMask(FIFOLevelReg, 0x80);		// FlushBuffer = 1, FIFO initialization
   b58a6:	2280      	movs	r2, #128	; 0x80
   b58a8:	2114      	movs	r1, #20
   b58aa:	4620      	mov	r0, r4
   b58ac:	f7ff ffcc 	bl	b5848 <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>
	PCD_WriteRegister(FIFODataReg, length, data);		// Write data to the FIFO
   b58b0:	462a      	mov	r2, r5
   b58b2:	463b      	mov	r3, r7
   b58b4:	2112      	movs	r1, #18
   b58b6:	4620      	mov	r0, r4
   b58b8:	f7ff ff96 	bl	b57e8 <_ZN7MFRC52217PCD_WriteRegisterEhhPh>
	PCD_WriteRegister(CommandReg, PCD_CalcCRC);		// Start the calculation
   b58bc:	2203      	movs	r2, #3
   b58be:	2102      	movs	r1, #2
   b58c0:	4620      	mov	r0, r4
   b58c2:	f7ff ffac 	bl	b581e <_ZN7MFRC52217PCD_WriteRegisterEhh>
   b58c6:	f241 3588 	movw	r5, #5000	; 0x1388
		n = PCD_ReadRegister(DivIrqReg);	// DivIrqReg[7..0] bits are: Set2 reserved reserved MfinActIRq   reserved CRCIRq reserved reserved
   b58ca:	210a      	movs	r1, #10
   b58cc:	4620      	mov	r0, r4
   b58ce:	f7ff ff74 	bl	b57ba <_ZN7MFRC52216PCD_ReadRegisterEh>
		if (n & 0x04) {						// CRCIRq bit set - calculation done
   b58d2:	0743      	lsls	r3, r0, #29
   b58d4:	d405      	bmi.n	b58e2 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0x58>
		if (--i == 0) {						// The emergency break. We will eventually terminate on this one after 89ms. Communication with the MFRC522 might be down.
   b58d6:	3d01      	subs	r5, #1
   b58d8:	b2ad      	uxth	r5, r5
   b58da:	2d00      	cmp	r5, #0
   b58dc:	d1f5      	bne.n	b58ca <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0x40>
			return STATUS_TIMEOUT;
   b58de:	2004      	movs	r0, #4
   b58e0:	e00f      	b.n	b5902 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0x78>
	PCD_WriteRegister(CommandReg, PCD_Idle);			// Stop calculating CRC for new content in the FIFO.
   b58e2:	2200      	movs	r2, #0
   b58e4:	2102      	movs	r1, #2
   b58e6:	4620      	mov	r0, r4
   b58e8:	f7ff ff99 	bl	b581e <_ZN7MFRC52217PCD_WriteRegisterEhh>
	result[0] = PCD_ReadRegister(CRCResultRegL);
   b58ec:	2144      	movs	r1, #68	; 0x44
   b58ee:	4620      	mov	r0, r4
   b58f0:	f7ff ff63 	bl	b57ba <_ZN7MFRC52216PCD_ReadRegisterEh>
	result[1] = PCD_ReadRegister(CRCResultRegH);
   b58f4:	2142      	movs	r1, #66	; 0x42
	result[0] = PCD_ReadRegister(CRCResultRegL);
   b58f6:	7030      	strb	r0, [r6, #0]
	result[1] = PCD_ReadRegister(CRCResultRegH);
   b58f8:	4620      	mov	r0, r4
   b58fa:	f7ff ff5e 	bl	b57ba <_ZN7MFRC52216PCD_ReadRegisterEh>
   b58fe:	7070      	strb	r0, [r6, #1]
	return STATUS_OK;
   b5900:	2001      	movs	r0, #1
} // End PCD_CalculateCRC()
   b5902:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5904 <_ZN7MFRC5229PCD_ResetEv>:
void MFRC522::PCD_Reset() {
   b5904:	b510      	push	{r4, lr}
	PCD_WriteRegister(CommandReg, PCD_SoftReset);	// Issue the SoftReset command.
   b5906:	220f      	movs	r2, #15
   b5908:	2102      	movs	r1, #2
void MFRC522::PCD_Reset() {
   b590a:	4604      	mov	r4, r0
	PCD_WriteRegister(CommandReg, PCD_SoftReset);	// Issue the SoftReset command.
   b590c:	f7ff ff87 	bl	b581e <_ZN7MFRC52217PCD_WriteRegisterEhh>
	delay(50);
   b5910:	2032      	movs	r0, #50	; 0x32
   b5912:	f000 fdc3 	bl	b649c <delay>
	while (PCD_ReadRegister(CommandReg) & (1<<4)) {
   b5916:	2102      	movs	r1, #2
   b5918:	4620      	mov	r0, r4
   b591a:	f7ff ff4e 	bl	b57ba <_ZN7MFRC52216PCD_ReadRegisterEh>
   b591e:	06c3      	lsls	r3, r0, #27
   b5920:	d4f9      	bmi.n	b5916 <_ZN7MFRC5229PCD_ResetEv+0x12>
} // End PCD_Reset()
   b5922:	bd10      	pop	{r4, pc}

000b5924 <_ZN7MFRC52213PCD_AntennaOnEv>:
void MFRC522::PCD_AntennaOn() {
   b5924:	b510      	push	{r4, lr}
	byte value = PCD_ReadRegister(TxControlReg);
   b5926:	2128      	movs	r1, #40	; 0x28
void MFRC522::PCD_AntennaOn() {
   b5928:	4604      	mov	r4, r0
	byte value = PCD_ReadRegister(TxControlReg);
   b592a:	f7ff ff46 	bl	b57ba <_ZN7MFRC52216PCD_ReadRegisterEh>
	if ((value & 0x03) != 0x03) {
   b592e:	f000 0303 	and.w	r3, r0, #3
   b5932:	2b03      	cmp	r3, #3
   b5934:	d008      	beq.n	b5948 <_ZN7MFRC52213PCD_AntennaOnEv+0x24>
		PCD_WriteRegister(TxControlReg, value | 0x03);
   b5936:	f040 0203 	orr.w	r2, r0, #3
   b593a:	b2d2      	uxtb	r2, r2
   b593c:	4620      	mov	r0, r4
   b593e:	2128      	movs	r1, #40	; 0x28
} // End PCD_AntennaOn()
   b5940:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		PCD_WriteRegister(TxControlReg, value | 0x03);
   b5944:	f7ff bf6b 	b.w	b581e <_ZN7MFRC52217PCD_WriteRegisterEhh>
} // End PCD_AntennaOn()
   b5948:	bd10      	pop	{r4, pc}

000b594a <_ZN7MFRC5228PCD_InitEv>:
void MFRC522::PCD_Init() {
   b594a:	b510      	push	{r4, lr}
   b594c:	4604      	mov	r4, r0
	if (digitalRead(_resetPowerDownPin) == LOW) { //The MFRC522 chip is in power down mode.
   b594e:	7b40      	ldrb	r0, [r0, #13]
   b5950:	f001 fb68 	bl	b7024 <digitalRead>
   b5954:	bb48      	cbnz	r0, b59aa <_ZN7MFRC5228PCD_InitEv+0x60>
		digitalWrite(_resetPowerDownPin, HIGH);	// Exit power down mode. This triggers a hard reset.
   b5956:	7b60      	ldrb	r0, [r4, #13]
   b5958:	2101      	movs	r1, #1
   b595a:	f001 fb4a 	bl	b6ff2 <digitalWrite>
		delay(50);
   b595e:	2032      	movs	r0, #50	; 0x32
   b5960:	f000 fd9c 	bl	b649c <delay>
    PCD_WriteRegister(TModeReg, 0x80);			// TAuto=1; timer starts automatically at the end of the transmission in all communication modes at all speeds
   b5964:	4620      	mov	r0, r4
   b5966:	2280      	movs	r2, #128	; 0x80
   b5968:	2154      	movs	r1, #84	; 0x54
   b596a:	f7ff ff58 	bl	b581e <_ZN7MFRC52217PCD_WriteRegisterEhh>
    PCD_WriteRegister(TPrescalerReg, 0xA9);	// TPreScaler = TModeReg[3..0]:TPrescalerReg, ie 0x0A9 = 169 => f_timer=40kHz, ie a timer period of 25�s.
   b596e:	4620      	mov	r0, r4
   b5970:	22a9      	movs	r2, #169	; 0xa9
   b5972:	2156      	movs	r1, #86	; 0x56
   b5974:	f7ff ff53 	bl	b581e <_ZN7MFRC52217PCD_WriteRegisterEhh>
    PCD_WriteRegister(TReloadRegH, 0x03);		// Reload timer with 0x3E8 = 1000, ie 25ms before timeout.
   b5978:	4620      	mov	r0, r4
   b597a:	2203      	movs	r2, #3
   b597c:	2158      	movs	r1, #88	; 0x58
   b597e:	f7ff ff4e 	bl	b581e <_ZN7MFRC52217PCD_WriteRegisterEhh>
    PCD_WriteRegister(TReloadRegL, 0xE8);
   b5982:	4620      	mov	r0, r4
   b5984:	22e8      	movs	r2, #232	; 0xe8
   b5986:	215a      	movs	r1, #90	; 0x5a
   b5988:	f7ff ff49 	bl	b581e <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_WriteRegister(TxASKReg, 0x40);		// Default 0x00. Force a 100 % ASK modulation independent of the ModGsPReg register setting
   b598c:	4620      	mov	r0, r4
   b598e:	2240      	movs	r2, #64	; 0x40
   b5990:	212a      	movs	r1, #42	; 0x2a
   b5992:	f7ff ff44 	bl	b581e <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_WriteRegister(ModeReg, 0x3D);		// Default 0x3F. Set the preset value for the CRC coprocessor for the CalcCRC command to 0x6363 (ISO 14443-3 part 6.2.4)
   b5996:	4620      	mov	r0, r4
   b5998:	223d      	movs	r2, #61	; 0x3d
   b599a:	2122      	movs	r1, #34	; 0x22
   b599c:	f7ff ff3f 	bl	b581e <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_AntennaOn();						// Enable the antenna driver pins TX1 and TX2 (they were disabled by the reset)
   b59a0:	4620      	mov	r0, r4
} // End PCD_Init()
   b59a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	PCD_AntennaOn();						// Enable the antenna driver pins TX1 and TX2 (they were disabled by the reset)
   b59a6:	f7ff bfbd 	b.w	b5924 <_ZN7MFRC52213PCD_AntennaOnEv>
		PCD_Reset();
   b59aa:	4620      	mov	r0, r4
   b59ac:	f7ff ffaa 	bl	b5904 <_ZN7MFRC5229PCD_ResetEv>
   b59b0:	e7d8      	b.n	b5964 <_ZN7MFRC5228PCD_InitEv+0x1a>

000b59b2 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb>:
									 ) {
   b59b2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b59b6:	b089      	sub	sp, #36	; 0x24
   b59b8:	e9dd 5613 	ldrd	r5, r6, [sp, #76]	; 0x4c
   b59bc:	f8dd 9054 	ldr.w	r9, [sp, #84]	; 0x54
   b59c0:	9203      	str	r2, [sp, #12]
   b59c2:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
   b59c6:	f89d b058 	ldrb.w	fp, [sp, #88]	; 0x58
   b59ca:	9204      	str	r2, [sp, #16]
   b59cc:	4604      	mov	r4, r0
   b59ce:	468a      	mov	sl, r1
   b59d0:	2700      	movs	r7, #0
	byte txLastBits = validBits ? *validBits : 0;
   b59d2:	f1b9 0f00 	cmp.w	r9, #0
   b59d6:	d03e      	beq.n	b5a56 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xa4>
   b59d8:	f899 8000 	ldrb.w	r8, [r9]
   b59dc:	9305      	str	r3, [sp, #20]
	PCD_WriteRegister(CommandReg, PCD_Idle);			// Stop any active command.
   b59de:	2200      	movs	r2, #0
   b59e0:	2102      	movs	r1, #2
   b59e2:	4620      	mov	r0, r4
   b59e4:	f7ff ff1b 	bl	b581e <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_WriteRegister(ComIrqReg, 0x7F);					// Clear all seven interrupt request bits
   b59e8:	227f      	movs	r2, #127	; 0x7f
   b59ea:	2108      	movs	r1, #8
   b59ec:	4620      	mov	r0, r4
   b59ee:	f7ff ff16 	bl	b581e <_ZN7MFRC52217PCD_WriteRegisterEhh>
	byte bitFraming	= (rxAlign << 4) + txLastBits;		// RxAlign = BitFramingReg[6..4]. TxLastBits = BitFramingReg[2..0]
   b59f2:	eb08 180b 	add.w	r8, r8, fp, lsl #4
	PCD_SetRegisterBitMask(FIFOLevelReg, 0x80);		// FlushBuffer = 1, FIFO initialization
   b59f6:	2280      	movs	r2, #128	; 0x80
   b59f8:	2114      	movs	r1, #20
   b59fa:	4620      	mov	r0, r4
   b59fc:	f7ff ff24 	bl	b5848 <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>
	byte bitFraming	= (rxAlign << 4) + txLastBits;		// RxAlign = BitFramingReg[6..4]. TxLastBits = BitFramingReg[2..0]
   b5a00:	fa5f f888 	uxtb.w	r8, r8
	PCD_WriteRegister(FIFODataReg, sendLen, sendData);	// Write sendData to the FIFO
   b5a04:	9b05      	ldr	r3, [sp, #20]
   b5a06:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
   b5a0a:	2112      	movs	r1, #18
   b5a0c:	4620      	mov	r0, r4
   b5a0e:	f7ff feeb 	bl	b57e8 <_ZN7MFRC52217PCD_WriteRegisterEhhPh>
	PCD_WriteRegister(BitFramingReg, bitFraming);		// Bit adjustments
   b5a12:	4642      	mov	r2, r8
   b5a14:	211a      	movs	r1, #26
   b5a16:	4620      	mov	r0, r4
   b5a18:	f7ff ff01 	bl	b581e <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_WriteRegister(CommandReg, command);			// Execute the command
   b5a1c:	4652      	mov	r2, sl
   b5a1e:	2102      	movs	r1, #2
   b5a20:	4620      	mov	r0, r4
   b5a22:	f7ff fefc 	bl	b581e <_ZN7MFRC52217PCD_WriteRegisterEhh>
	if (command == PCD_Transceive) 	{
   b5a26:	f1ba 0f0c 	cmp.w	sl, #12
   b5a2a:	d104      	bne.n	b5a36 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x84>
		PCD_SetRegisterBitMask(BitFramingReg, 0x80);	// StartSend=1, transmission of data starts
   b5a2c:	2280      	movs	r2, #128	; 0x80
   b5a2e:	211a      	movs	r1, #26
   b5a30:	4620      	mov	r0, r4
   b5a32:	f7ff ff09 	bl	b5848 <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>
	byte txLastBits = validBits ? *validBits : 0;
   b5a36:	f44f 68fa 	mov.w	r8, #2000	; 0x7d0
		n = PCD_ReadRegister(ComIrqReg);	// ComIrqReg[7..0] bits are: Set1 TxIRq RxIRq IdleIRq   HiAlertIRq LoAlertIRq ErrIRq TimerIRq
   b5a3a:	2108      	movs	r1, #8
   b5a3c:	4620      	mov	r0, r4
   b5a3e:	f7ff febc 	bl	b57ba <_ZN7MFRC52216PCD_ReadRegisterEh>
		if (n & waitIRq) {					// One of the interrupts that signal success has been set.
   b5a42:	9b03      	ldr	r3, [sp, #12]
   b5a44:	4218      	tst	r0, r3
   b5a46:	d108      	bne.n	b5a5a <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xa8>
		if (n & 0x01) {						// Timer interrupt - nothing received in 25ms
   b5a48:	07c3      	lsls	r3, r0, #31
   b5a4a:	d402      	bmi.n	b5a52 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xa0>
		if (--i == 0) {						// The emergency break. If all other condions fail we will eventually terminate on this one after 35.7ms. Communication with the MFRC522 might be down.
   b5a4c:	f1b8 0801 	subs.w	r8, r8, #1
   b5a50:	d1f3      	bne.n	b5a3a <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x88>
			return STATUS_TIMEOUT;
   b5a52:	2004      	movs	r0, #4
   b5a54:	e04d      	b.n	b5af2 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
	byte txLastBits = validBits ? *validBits : 0;
   b5a56:	46c8      	mov	r8, r9
   b5a58:	e7c0      	b.n	b59dc <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x2a>
	byte errorRegValue = PCD_ReadRegister(ErrorReg); // ErrorReg[7..0] bits are: WrErr TempErr reserved BufferOvfl   CollErr CRCErr ParityErr ProtocolErr
   b5a5a:	210c      	movs	r1, #12
   b5a5c:	4620      	mov	r0, r4
   b5a5e:	f7ff feac 	bl	b57ba <_ZN7MFRC52216PCD_ReadRegisterEh>
	if (errorRegValue & 0x13) {	 // BufferOvfl ParityErr ProtocolErr
   b5a62:	f010 0f13 	tst.w	r0, #19
	byte errorRegValue = PCD_ReadRegister(ErrorReg); // ErrorReg[7..0] bits are: WrErr TempErr reserved BufferOvfl   CollErr CRCErr ParityErr ProtocolErr
   b5a66:	4680      	mov	r8, r0
	if (errorRegValue & 0x13) {	 // BufferOvfl ParityErr ProtocolErr
   b5a68:	d146      	bne.n	b5af8 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x146>
	if (backData && backLen) {
   b5a6a:	b1dd      	cbz	r5, b5aa4 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xf2>
   b5a6c:	b1d6      	cbz	r6, b5aa4 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xf2>
		n = PCD_ReadRegister(FIFOLevelReg);						// Number of bytes in the FIFO
   b5a6e:	2114      	movs	r1, #20
   b5a70:	4620      	mov	r0, r4
   b5a72:	f7ff fea2 	bl	b57ba <_ZN7MFRC52216PCD_ReadRegisterEh>
		if (n > *backLen) {
   b5a76:	7833      	ldrb	r3, [r6, #0]
   b5a78:	4283      	cmp	r3, r0
		n = PCD_ReadRegister(FIFOLevelReg);						// Number of bytes in the FIFO
   b5a7a:	4602      	mov	r2, r0
		if (n > *backLen) {
   b5a7c:	d33e      	bcc.n	b5afc <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x14a>
		*backLen = n;												// Number of bytes returned
   b5a7e:	7030      	strb	r0, [r6, #0]
		PCD_ReadRegister(FIFODataReg, n, backData, rxAlign);		// Get received data from FIFO
   b5a80:	462b      	mov	r3, r5
   b5a82:	2112      	movs	r1, #18
   b5a84:	4620      	mov	r0, r4
   b5a86:	f8cd b000 	str.w	fp, [sp]
   b5a8a:	f7ff fe47 	bl	b571c <_ZN7MFRC52216PCD_ReadRegisterEhhPhh>
		_validBits = PCD_ReadRegister(ControlReg) & 0x07;	// RxLastBits[2:0] indicates the number of valid bits in the last received byte. If this value is 000b, the whole byte is valid.
   b5a8e:	2118      	movs	r1, #24
   b5a90:	4620      	mov	r0, r4
   b5a92:	f7ff fe92 	bl	b57ba <_ZN7MFRC52216PCD_ReadRegisterEh>
   b5a96:	f000 0707 	and.w	r7, r0, #7
		if (validBits) {
   b5a9a:	f1b9 0f00 	cmp.w	r9, #0
   b5a9e:	d001      	beq.n	b5aa4 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xf2>
			*validBits = _validBits;
   b5aa0:	f889 7000 	strb.w	r7, [r9]
	if (errorRegValue & 0x08) { // CollErr
   b5aa4:	f018 0f08 	tst.w	r8, #8
   b5aa8:	d12a      	bne.n	b5b00 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x14e>
	if (backData && backLen && checkCRC) {
   b5aaa:	b35d      	cbz	r5, b5b04 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x152>
   b5aac:	b356      	cbz	r6, b5b04 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x152>
   b5aae:	9b04      	ldr	r3, [sp, #16]
   b5ab0:	b343      	cbz	r3, b5b04 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x152>
		if (*backLen == 1 && _validBits == 4) {
   b5ab2:	7832      	ldrb	r2, [r6, #0]
   b5ab4:	2a01      	cmp	r2, #1
   b5ab6:	d103      	bne.n	b5ac0 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x10e>
   b5ab8:	2f04      	cmp	r7, #4
   b5aba:	d125      	bne.n	b5b08 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x156>
			return STATUS_MIFARE_NACK;
   b5abc:	2009      	movs	r0, #9
   b5abe:	e018      	b.n	b5af2 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
		if (*backLen < 2 || _validBits != 0) {
   b5ac0:	d922      	bls.n	b5b08 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x156>
   b5ac2:	bb0f      	cbnz	r7, b5b08 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x156>
		n = PCD_CalculateCRC(&backData[0], *backLen - 2, &controlBuffer[0]);
   b5ac4:	3a02      	subs	r2, #2
   b5ac6:	ab07      	add	r3, sp, #28
   b5ac8:	b2d2      	uxtb	r2, r2
   b5aca:	4629      	mov	r1, r5
   b5acc:	4620      	mov	r0, r4
   b5ace:	f7ff fedc 	bl	b588a <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
		if (n != STATUS_OK) {
   b5ad2:	2801      	cmp	r0, #1
   b5ad4:	d10d      	bne.n	b5af2 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
		if ((backData[*backLen - 2] != controlBuffer[0]) || (backData[*backLen - 1] != controlBuffer[1])) {
   b5ad6:	7833      	ldrb	r3, [r6, #0]
   b5ad8:	441d      	add	r5, r3
   b5ada:	f89d 301c 	ldrb.w	r3, [sp, #28]
   b5ade:	f815 2c02 	ldrb.w	r2, [r5, #-2]
   b5ae2:	429a      	cmp	r2, r3
   b5ae4:	d110      	bne.n	b5b08 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x156>
   b5ae6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
   b5aea:	f89d 301d 	ldrb.w	r3, [sp, #29]
   b5aee:	429a      	cmp	r2, r3
   b5af0:	d10a      	bne.n	b5b08 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x156>
} // End PCD_CommunicateWithPICC()
   b5af2:	b009      	add	sp, #36	; 0x24
   b5af4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return STATUS_ERROR;
   b5af8:	2002      	movs	r0, #2
   b5afa:	e7fa      	b.n	b5af2 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
			return STATUS_NO_ROOM;
   b5afc:	2005      	movs	r0, #5
   b5afe:	e7f8      	b.n	b5af2 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
		return STATUS_COLLISION;
   b5b00:	2003      	movs	r0, #3
   b5b02:	e7f6      	b.n	b5af2 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
	return STATUS_OK;
   b5b04:	2001      	movs	r0, #1
   b5b06:	e7f4      	b.n	b5af2 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
			return STATUS_CRC_WRONG;
   b5b08:	2008      	movs	r0, #8
   b5b0a:	e7f2      	b.n	b5af2 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>

000b5b0c <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>:
								 ) {
   b5b0c:	b510      	push	{r4, lr}
   b5b0e:	b086      	sub	sp, #24
	return PCD_CommunicateWithPICC(PCD_Transceive, waitIRq, sendData, sendLen, backData, backLen, validBits, rxAlign, checkCRC);
   b5b10:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
   b5b14:	9405      	str	r4, [sp, #20]
   b5b16:	f89d 4028 	ldrb.w	r4, [sp, #40]	; 0x28
   b5b1a:	9404      	str	r4, [sp, #16]
   b5b1c:	9c09      	ldr	r4, [sp, #36]	; 0x24
   b5b1e:	9403      	str	r4, [sp, #12]
   b5b20:	9c08      	ldr	r4, [sp, #32]
   b5b22:	9200      	str	r2, [sp, #0]
   b5b24:	e9cd 3401 	strd	r3, r4, [sp, #4]
   b5b28:	2230      	movs	r2, #48	; 0x30
   b5b2a:	460b      	mov	r3, r1
   b5b2c:	210c      	movs	r1, #12
   b5b2e:	f7ff ff40 	bl	b59b2 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb>
} // End PCD_TransceiveData()
   b5b32:	b006      	add	sp, #24
   b5b34:	bd10      	pop	{r4, pc}

000b5b36 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_>:
							   ) {
   b5b36:	b570      	push	{r4, r5, r6, lr}
   b5b38:	b088      	sub	sp, #32
   b5b3a:	4606      	mov	r6, r0
   b5b3c:	461c      	mov	r4, r3
   b5b3e:	f88d 1017 	strb.w	r1, [sp, #23]
	if (bufferATQA == NULL || *bufferSize < 2) {	// The ATQA response is 2 bytes long.
   b5b42:	4615      	mov	r5, r2
   b5b44:	b31a      	cbz	r2, b5b8e <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x58>
   b5b46:	781b      	ldrb	r3, [r3, #0]
   b5b48:	2b01      	cmp	r3, #1
   b5b4a:	d920      	bls.n	b5b8e <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x58>
	PCD_ClearRegisterBitMask(CollReg, 0x80);			// ValuesAfterColl=1 => Bits received after collision are cleared.
   b5b4c:	2280      	movs	r2, #128	; 0x80
   b5b4e:	211c      	movs	r1, #28
   b5b50:	f7ff fe88 	bl	b5864 <_ZN7MFRC52224PCD_ClearRegisterBitMaskEhh>
	validBits = 7;										// For REQA and WUPA we need the short frame format - transmit only 7 bits of the last (and only) byte. TxLastBits = BitFramingReg[2..0]
   b5b54:	2307      	movs	r3, #7
   b5b56:	f88d 301f 	strb.w	r3, [sp, #31]
	status = PCD_TransceiveData(&command, 1, bufferATQA, bufferSize, &validBits);
   b5b5a:	2300      	movs	r3, #0
   b5b5c:	e9cd 3302 	strd	r3, r3, [sp, #8]
   b5b60:	f10d 031f 	add.w	r3, sp, #31
   b5b64:	e9cd 4300 	strd	r4, r3, [sp]
   b5b68:	2201      	movs	r2, #1
   b5b6a:	462b      	mov	r3, r5
   b5b6c:	f10d 0117 	add.w	r1, sp, #23
   b5b70:	4630      	mov	r0, r6
   b5b72:	f7ff ffcb 	bl	b5b0c <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>
	if (status != STATUS_OK) {
   b5b76:	2801      	cmp	r0, #1
   b5b78:	d107      	bne.n	b5b8a <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x54>
	if (*bufferSize != 2 || validBits != 0) {		// ATQA must be exactly 16 bits.
   b5b7a:	7823      	ldrb	r3, [r4, #0]
   b5b7c:	2b02      	cmp	r3, #2
   b5b7e:	d108      	bne.n	b5b92 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x5c>
   b5b80:	f89d 301f 	ldrb.w	r3, [sp, #31]
		return STATUS_ERROR;
   b5b84:	2b00      	cmp	r3, #0
   b5b86:	bf18      	it	ne
   b5b88:	2002      	movne	r0, #2
} // End PICC_REQA_or_WUPA()
   b5b8a:	b008      	add	sp, #32
   b5b8c:	bd70      	pop	{r4, r5, r6, pc}
		return STATUS_NO_ROOM;
   b5b8e:	2005      	movs	r0, #5
   b5b90:	e7fb      	b.n	b5b8a <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x54>
		return STATUS_ERROR;
   b5b92:	2002      	movs	r0, #2
   b5b94:	e7f9      	b.n	b5b8a <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x54>

000b5b96 <_ZN7MFRC52213PICC_RequestAEPhS0_>:
							) {
   b5b96:	4613      	mov	r3, r2
	return PICC_REQA_or_WUPA(PICC_CMD_REQA, bufferATQA, bufferSize);
   b5b98:	460a      	mov	r2, r1
   b5b9a:	2126      	movs	r1, #38	; 0x26
   b5b9c:	f7ff bfcb 	b.w	b5b36 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_>

000b5ba0 <_ZN7MFRC52221PICC_IsNewCardPresentEv>:
 * Returns true if a PICC responds to PICC_CMD_REQA.
 * Only "new" cards in state IDLE are invited. Sleeping cards in state HALT are ignored.
 * 
 * @return bool
 */
bool MFRC522::PICC_IsNewCardPresent() {
   b5ba0:	b507      	push	{r0, r1, r2, lr}
	byte bufferATQA[2];
	byte bufferSize = sizeof(bufferATQA);
   b5ba2:	2302      	movs	r3, #2
	byte result = PICC_RequestA(bufferATQA, &bufferSize);
   b5ba4:	f10d 0203 	add.w	r2, sp, #3
   b5ba8:	a901      	add	r1, sp, #4
	byte bufferSize = sizeof(bufferATQA);
   b5baa:	f88d 3003 	strb.w	r3, [sp, #3]
	byte result = PICC_RequestA(bufferATQA, &bufferSize);
   b5bae:	f7ff fff2 	bl	b5b96 <_ZN7MFRC52213PICC_RequestAEPhS0_>
	return (result == STATUS_OK || result == STATUS_COLLISION);
   b5bb2:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
} // End PICC_IsNewCardPresent()
   b5bb6:	1e43      	subs	r3, r0, #1
   b5bb8:	4258      	negs	r0, r3
   b5bba:	4158      	adcs	r0, r3
   b5bbc:	b003      	add	sp, #12
   b5bbe:	f85d fb04 	ldr.w	pc, [sp], #4

000b5bc2 <_ZN7MFRC52210PICC_HaltAEv>:
byte MFRC522::PICC_HaltA() {
   b5bc2:	b570      	push	{r4, r5, r6, lr}
   b5bc4:	b086      	sub	sp, #24
	buffer[0] = PICC_CMD_HLTA;
   b5bc6:	2350      	movs	r3, #80	; 0x50
   b5bc8:	f88d 3014 	strb.w	r3, [sp, #20]
	buffer[1] = 0;
   b5bcc:	2400      	movs	r4, #0
	result = PCD_CalculateCRC(buffer, 2, &buffer[2]);
   b5bce:	f10d 0316 	add.w	r3, sp, #22
   b5bd2:	2202      	movs	r2, #2
   b5bd4:	a905      	add	r1, sp, #20
byte MFRC522::PICC_HaltA() {
   b5bd6:	4606      	mov	r6, r0
	buffer[1] = 0;
   b5bd8:	f88d 4015 	strb.w	r4, [sp, #21]
	result = PCD_CalculateCRC(buffer, 2, &buffer[2]);
   b5bdc:	f7ff fe55 	bl	b588a <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
	if (result != STATUS_OK) {
   b5be0:	2801      	cmp	r0, #1
	result = PCD_CalculateCRC(buffer, 2, &buffer[2]);
   b5be2:	4605      	mov	r5, r0
	if (result != STATUS_OK) {
   b5be4:	d10f      	bne.n	b5c06 <_ZN7MFRC52210PICC_HaltAEv+0x44>
	result = PCD_TransceiveData(buffer, sizeof(buffer), NULL, 0);
   b5be6:	e9cd 4402 	strd	r4, r4, [sp, #8]
   b5bea:	e9cd 4400 	strd	r4, r4, [sp]
   b5bee:	4623      	mov	r3, r4
   b5bf0:	2204      	movs	r2, #4
   b5bf2:	a905      	add	r1, sp, #20
   b5bf4:	4630      	mov	r0, r6
   b5bf6:	f7ff ff89 	bl	b5b0c <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>
	if (result == STATUS_TIMEOUT) {
   b5bfa:	2804      	cmp	r0, #4
   b5bfc:	d003      	beq.n	b5c06 <_ZN7MFRC52210PICC_HaltAEv+0x44>
		return STATUS_ERROR;
   b5bfe:	2801      	cmp	r0, #1
   b5c00:	bf14      	ite	ne
   b5c02:	4605      	movne	r5, r0
   b5c04:	2502      	moveq	r5, #2
} // End PICC_HaltA()
   b5c06:	4628      	mov	r0, r5
   b5c08:	b006      	add	sp, #24
   b5c0a:	bd70      	pop	{r4, r5, r6, pc}

000b5c0c <_ZN7MFRC52211MIFARE_ReadEhPhS0_>:
						) {
   b5c0c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b5c0e:	4606      	mov	r6, r0
   b5c10:	461d      	mov	r5, r3
	if (buffer == NULL || *bufferSize < 18) {
   b5c12:	4614      	mov	r4, r2
   b5c14:	b1ca      	cbz	r2, b5c4a <_ZN7MFRC52211MIFARE_ReadEhPhS0_+0x3e>
   b5c16:	781b      	ldrb	r3, [r3, #0]
   b5c18:	2b11      	cmp	r3, #17
   b5c1a:	d916      	bls.n	b5c4a <_ZN7MFRC52211MIFARE_ReadEhPhS0_+0x3e>
	buffer[0] = PICC_CMD_MF_READ;
   b5c1c:	2330      	movs	r3, #48	; 0x30
   b5c1e:	7013      	strb	r3, [r2, #0]
	buffer[1] = blockAddr;
   b5c20:	7051      	strb	r1, [r2, #1]
	result = PCD_CalculateCRC(buffer, 2, &buffer[2]);
   b5c22:	1c93      	adds	r3, r2, #2
   b5c24:	4621      	mov	r1, r4
   b5c26:	2202      	movs	r2, #2
   b5c28:	f7ff fe2f 	bl	b588a <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
	if (result != STATUS_OK) {
   b5c2c:	2801      	cmp	r0, #1
   b5c2e:	d10a      	bne.n	b5c46 <_ZN7MFRC52211MIFARE_ReadEhPhS0_+0x3a>
	return PCD_TransceiveData(buffer, 4, buffer, bufferSize, NULL, 0, true);
   b5c30:	2300      	movs	r3, #0
   b5c32:	e9cd 3301 	strd	r3, r3, [sp, #4]
   b5c36:	9003      	str	r0, [sp, #12]
   b5c38:	9500      	str	r5, [sp, #0]
   b5c3a:	4623      	mov	r3, r4
   b5c3c:	2204      	movs	r2, #4
   b5c3e:	4621      	mov	r1, r4
   b5c40:	4630      	mov	r0, r6
   b5c42:	f7ff ff63 	bl	b5b0c <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>
} // End MIFARE_Read()
   b5c46:	b004      	add	sp, #16
   b5c48:	bd70      	pop	{r4, r5, r6, pc}
		return STATUS_NO_ROOM;
   b5c4a:	2005      	movs	r0, #5
   b5c4c:	e7fb      	b.n	b5c46 <_ZN7MFRC52211MIFARE_ReadEhPhS0_+0x3a>

000b5c4e <_ZN7MFRC52216PCD_AuthenticateEhhPNS_10MIFARE_KeyEPNS_3UidE>:
								) {
   b5c4e:	b510      	push	{r4, lr}
   b5c50:	b08a      	sub	sp, #40	; 0x28
   b5c52:	9c0c      	ldr	r4, [sp, #48]	; 0x30
	sendData[1] = blockAddr;
   b5c54:	f88d 201d 	strb.w	r2, [sp, #29]
		sendData[2+i] = key->keyByte[i];
   b5c58:	681a      	ldr	r2, [r3, #0]
   b5c5a:	889b      	ldrh	r3, [r3, #4]
   b5c5c:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
		sendData[8+i] = uid->uidByte[i];
   b5c60:	7863      	ldrb	r3, [r4, #1]
   b5c62:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   b5c66:	78a3      	ldrb	r3, [r4, #2]
   b5c68:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
   b5c6c:	78e3      	ldrb	r3, [r4, #3]
   b5c6e:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
   b5c72:	7923      	ldrb	r3, [r4, #4]
   b5c74:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
	return PCD_CommunicateWithPICC(PCD_MFAuthent, waitIRq, &sendData[0], sizeof(sendData));
   b5c78:	2300      	movs	r3, #0
   b5c7a:	e9cd 3304 	strd	r3, r3, [sp, #16]
   b5c7e:	e9cd 3302 	strd	r3, r3, [sp, #8]
   b5c82:	9301      	str	r3, [sp, #4]
   b5c84:	230c      	movs	r3, #12
	sendData[0] = command;
   b5c86:	f88d 101c 	strb.w	r1, [sp, #28]
		sendData[2+i] = key->keyByte[i];
   b5c8a:	f8cd 201e 	str.w	r2, [sp, #30]
	return PCD_CommunicateWithPICC(PCD_MFAuthent, waitIRq, &sendData[0], sizeof(sendData));
   b5c8e:	9300      	str	r3, [sp, #0]
   b5c90:	2210      	movs	r2, #16
   b5c92:	ab07      	add	r3, sp, #28
   b5c94:	210e      	movs	r1, #14
   b5c96:	f7ff fe8c 	bl	b59b2 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb>
} // End PCD_Authenticate()
   b5c9a:	b00a      	add	sp, #40	; 0x28
   b5c9c:	bd10      	pop	{r4, pc}

000b5c9e <_ZN7MFRC52221PCD_MIFARE_TransceiveEPhhb.part.0>:
byte MFRC522::PCD_MIFARE_Transceive(	byte *sendData,		///< Pointer to the data to transfer to the FIFO. Do NOT include the CRC_A.
   b5c9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5ca2:	b08c      	sub	sp, #48	; 0x30
	memcpy(cmdBuffer, sendData, sendLen);
   b5ca4:	ae07      	add	r6, sp, #28
byte MFRC522::PCD_MIFARE_Transceive(	byte *sendData,		///< Pointer to the data to transfer to the FIFO. Do NOT include the CRC_A.
   b5ca6:	4615      	mov	r5, r2
   b5ca8:	4680      	mov	r8, r0
	memcpy(cmdBuffer, sendData, sendLen);
   b5caa:	4630      	mov	r0, r6
byte MFRC522::PCD_MIFARE_Transceive(	byte *sendData,		///< Pointer to the data to transfer to the FIFO. Do NOT include the CRC_A.
   b5cac:	461f      	mov	r7, r3
	memcpy(cmdBuffer, sendData, sendLen);
   b5cae:	f001 fa4f 	bl	b7150 <memcpy>
	result = PCD_CalculateCRC(cmdBuffer, sendLen, &cmdBuffer[sendLen]);
   b5cb2:	1973      	adds	r3, r6, r5
   b5cb4:	462a      	mov	r2, r5
   b5cb6:	4631      	mov	r1, r6
   b5cb8:	4640      	mov	r0, r8
   b5cba:	f7ff fde6 	bl	b588a <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
	if (result != STATUS_OK) { 
   b5cbe:	2801      	cmp	r0, #1
	result = PCD_CalculateCRC(cmdBuffer, sendLen, &cmdBuffer[sendLen]);
   b5cc0:	4604      	mov	r4, r0
	if (result != STATUS_OK) { 
   b5cc2:	d12a      	bne.n	b5d1a <_ZN7MFRC52221PCD_MIFARE_TransceiveEPhhb.part.0+0x7c>
	byte cmdBufferSize = sizeof(cmdBuffer);
   b5cc4:	2312      	movs	r3, #18
   b5cc6:	f88d 301a 	strb.w	r3, [sp, #26]
	byte validBits = 0;
   b5cca:	2300      	movs	r3, #0
	result = PCD_CommunicateWithPICC(PCD_Transceive, waitIRq, cmdBuffer, sendLen, cmdBuffer, &cmdBufferSize, &validBits);
   b5ccc:	e9cd 3304 	strd	r3, r3, [sp, #16]
	byte validBits = 0;
   b5cd0:	f88d 301b 	strb.w	r3, [sp, #27]
	sendLen += 2;
   b5cd4:	3502      	adds	r5, #2
	result = PCD_CommunicateWithPICC(PCD_Transceive, waitIRq, cmdBuffer, sendLen, cmdBuffer, &cmdBufferSize, &validBits);
   b5cd6:	f10d 031b 	add.w	r3, sp, #27
   b5cda:	9303      	str	r3, [sp, #12]
   b5cdc:	b2ed      	uxtb	r5, r5
   b5cde:	f10d 031a 	add.w	r3, sp, #26
   b5ce2:	e9cd 6301 	strd	r6, r3, [sp, #4]
   b5ce6:	9500      	str	r5, [sp, #0]
   b5ce8:	4633      	mov	r3, r6
   b5cea:	2230      	movs	r2, #48	; 0x30
   b5cec:	210c      	movs	r1, #12
   b5cee:	4640      	mov	r0, r8
   b5cf0:	f7ff fe5f 	bl	b59b2 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb>
	if (acceptTimeout && result == STATUS_TIMEOUT) {
   b5cf4:	b10f      	cbz	r7, b5cfa <_ZN7MFRC52221PCD_MIFARE_TransceiveEPhhb.part.0+0x5c>
   b5cf6:	2804      	cmp	r0, #4
   b5cf8:	d00f      	beq.n	b5d1a <_ZN7MFRC52221PCD_MIFARE_TransceiveEPhhb.part.0+0x7c>
	if (result != STATUS_OK) {
   b5cfa:	2801      	cmp	r0, #1
   b5cfc:	d111      	bne.n	b5d22 <_ZN7MFRC52221PCD_MIFARE_TransceiveEPhhb.part.0+0x84>
	if (cmdBufferSize != 1 || validBits != 4) {
   b5cfe:	f89d 401a 	ldrb.w	r4, [sp, #26]
   b5d02:	2c01      	cmp	r4, #1
   b5d04:	d10f      	bne.n	b5d26 <_ZN7MFRC52221PCD_MIFARE_TransceiveEPhhb.part.0+0x88>
   b5d06:	f89d 301b 	ldrb.w	r3, [sp, #27]
   b5d0a:	2b04      	cmp	r3, #4
   b5d0c:	d10b      	bne.n	b5d26 <_ZN7MFRC52221PCD_MIFARE_TransceiveEPhhb.part.0+0x88>
	if (cmdBuffer[0] != MF_ACK) {
   b5d0e:	f89d 301c 	ldrb.w	r3, [sp, #28]
		return STATUS_MIFARE_NACK;
   b5d12:	2b0a      	cmp	r3, #10
   b5d14:	bf0c      	ite	eq
   b5d16:	4604      	moveq	r4, r0
   b5d18:	2409      	movne	r4, #9
} // End PCD_MIFARE_Transceive()
   b5d1a:	4620      	mov	r0, r4
   b5d1c:	b00c      	add	sp, #48	; 0x30
   b5d1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b5d22:	4604      	mov	r4, r0
   b5d24:	e7f9      	b.n	b5d1a <_ZN7MFRC52221PCD_MIFARE_TransceiveEPhhb.part.0+0x7c>
		return STATUS_ERROR;
   b5d26:	2402      	movs	r4, #2
   b5d28:	e7f7      	b.n	b5d1a <_ZN7MFRC52221PCD_MIFARE_TransceiveEPhhb.part.0+0x7c>

000b5d2a <_ZN7MFRC52221PCD_MIFARE_TransceiveEPhhb>:
									) {
   b5d2a:	b410      	push	{r4}
	if (sendData == NULL || sendLen > 16) {
   b5d2c:	b129      	cbz	r1, b5d3a <_ZN7MFRC52221PCD_MIFARE_TransceiveEPhhb+0x10>
   b5d2e:	2a10      	cmp	r2, #16
   b5d30:	d803      	bhi.n	b5d3a <_ZN7MFRC52221PCD_MIFARE_TransceiveEPhhb+0x10>
} // End PCD_MIFARE_Transceive()
   b5d32:	f85d 4b04 	ldr.w	r4, [sp], #4
   b5d36:	f7ff bfb2 	b.w	b5c9e <_ZN7MFRC52221PCD_MIFARE_TransceiveEPhhb.part.0>
   b5d3a:	2007      	movs	r0, #7
   b5d3c:	f85d 4b04 	ldr.w	r4, [sp], #4
   b5d40:	4770      	bx	lr

000b5d42 <_ZN7MFRC52212MIFARE_WriteEhPhh>:
						) {
   b5d42:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b5d44:	4606      	mov	r6, r0
   b5d46:	461d      	mov	r5, r3
	if (buffer == NULL || bufferSize < 16) {
   b5d48:	4614      	mov	r4, r2
   b5d4a:	b1aa      	cbz	r2, b5d78 <_ZN7MFRC52212MIFARE_WriteEhPhh+0x36>
   b5d4c:	2b0f      	cmp	r3, #15
   b5d4e:	d913      	bls.n	b5d78 <_ZN7MFRC52212MIFARE_WriteEhPhh+0x36>
	cmdBuffer[0] = PICC_CMD_MF_WRITE;
   b5d50:	23a0      	movs	r3, #160	; 0xa0
   b5d52:	f88d 3004 	strb.w	r3, [sp, #4]
	cmdBuffer[1] = blockAddr;
   b5d56:	f88d 1005 	strb.w	r1, [sp, #5]
	if (sendData == NULL || sendLen > 16) {
   b5d5a:	2300      	movs	r3, #0
   b5d5c:	2202      	movs	r2, #2
   b5d5e:	a901      	add	r1, sp, #4
   b5d60:	f7ff ff9d 	bl	b5c9e <_ZN7MFRC52221PCD_MIFARE_TransceiveEPhhb.part.0>
	if (result != STATUS_OK) {
   b5d64:	2801      	cmp	r0, #1
   b5d66:	d105      	bne.n	b5d74 <_ZN7MFRC52212MIFARE_WriteEhPhh+0x32>
	result = PCD_MIFARE_Transceive(	buffer, bufferSize); // Adds CRC_A and checks that the response is MF_ACK.
   b5d68:	2300      	movs	r3, #0
   b5d6a:	462a      	mov	r2, r5
   b5d6c:	4621      	mov	r1, r4
   b5d6e:	4630      	mov	r0, r6
   b5d70:	f7ff ffdb 	bl	b5d2a <_ZN7MFRC52221PCD_MIFARE_TransceiveEPhhb>
} // End MIFARE_Write()
   b5d74:	b002      	add	sp, #8
   b5d76:	bd70      	pop	{r4, r5, r6, pc}
		return STATUS_INVALID;
   b5d78:	2007      	movs	r0, #7
   b5d7a:	e7fb      	b.n	b5d74 <_ZN7MFRC52212MIFARE_WriteEhPhh+0x32>

000b5d7c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh>:
						 ) {
   b5d7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (validBits > 80) {
   b5d80:	2a50      	cmp	r2, #80	; 0x50
						 ) {
   b5d82:	b08b      	sub	sp, #44	; 0x2c
   b5d84:	4682      	mov	sl, r0
   b5d86:	460f      	mov	r7, r1
   b5d88:	4690      	mov	r8, r2
	if (validBits > 80) {
   b5d8a:	f200 8140 	bhi.w	b600e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x292>
	PCD_ClearRegisterBitMask(CollReg, 0x80);			// ValuesAfterColl=1 => Bits received after collision are cleared.
   b5d8e:	2280      	movs	r2, #128	; 0x80
   b5d90:	211c      	movs	r1, #28
   b5d92:	f7ff fd67 	bl	b5864 <_ZN7MFRC52224PCD_ClearRegisterBitMaskEhh>
				buffer[0] = PICC_CMD_SEL_CL1;
   b5d96:	2393      	movs	r3, #147	; 0x93
   b5d98:	f88d 301c 	strb.w	r3, [sp, #28]
				useCascadeTag = validBits && uid->size > 4;	// When we know that the UID has more than 4 bytes
   b5d9c:	f1b8 0f00 	cmp.w	r8, #0
   b5da0:	f000 80bc 	beq.w	b5f1c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1a0>
   b5da4:	783c      	ldrb	r4, [r7, #0]
   b5da6:	2c04      	cmp	r4, #4
   b5da8:	bf94      	ite	ls
   b5daa:	2300      	movls	r3, #0
   b5dac:	2301      	movhi	r3, #1
				useCascadeTag = validBits && uid->size > 7;	// When we know that the UID has more than 7 bytes
   b5dae:	2501      	movs	r5, #1
   b5db0:	2600      	movs	r6, #0
   b5db2:	e00b      	b.n	b5dcc <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x50>
				buffer[0] = PICC_CMD_SEL_CL2;
   b5db4:	2395      	movs	r3, #149	; 0x95
   b5db6:	f88d 301c 	strb.w	r3, [sp, #28]
				useCascadeTag = validBits && uid->size > 7;	// When we know that the UID has more than 7 bytes
   b5dba:	f1b8 0f00 	cmp.w	r8, #0
   b5dbe:	f000 80af 	beq.w	b5f20 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1a4>
   b5dc2:	783c      	ldrb	r4, [r7, #0]
   b5dc4:	2c07      	cmp	r4, #7
   b5dc6:	bf94      	ite	ls
   b5dc8:	2300      	movls	r3, #0
   b5dca:	2301      	movhi	r3, #1
		currentLevelKnownBits = validBits - (8 * uidIndex);
   b5dcc:	eba8 04c6 	sub.w	r4, r8, r6, lsl #3
   b5dd0:	b264      	sxtb	r4, r4
		if (currentLevelKnownBits < 0) {
   b5dd2:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
		if (useCascadeTag) {
   b5dd6:	2b00      	cmp	r3, #0
   b5dd8:	f000 80a4 	beq.w	b5f24 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1a8>
			buffer[index++] = PICC_CMD_CT;
   b5ddc:	2288      	movs	r2, #136	; 0x88
   b5dde:	f88d 201e 	strb.w	r2, [sp, #30]
   b5de2:	2103      	movs	r1, #3
		byte bytesToCopy = currentLevelKnownBits / 8 + (currentLevelKnownBits % 8 ? 1 : 0); // The number of bytes needed to represent the known bits for this level.
   b5de4:	f014 0207 	ands.w	r2, r4, #7
   b5de8:	bf18      	it	ne
   b5dea:	2201      	movne	r2, #1
   b5dec:	eb02 02e4 	add.w	r2, r2, r4, asr #3
		if (bytesToCopy) {
   b5df0:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
		byte bytesToCopy = currentLevelKnownBits / 8 + (currentLevelKnownBits % 8 ? 1 : 0); // The number of bytes needed to represent the known bits for this level.
   b5df4:	b2e0      	uxtb	r0, r4
		if (bytesToCopy) {
   b5df6:	d01d      	beq.n	b5e34 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xb8>
			byte maxBytes = useCascadeTag ? 3 : 4; // Max 4 bytes in each Cascade Level. Only 3 left if we use the Cascade Tag
   b5df8:	2b00      	cmp	r3, #0
   b5dfa:	bf14      	ite	ne
   b5dfc:	f04f 0903 	movne.w	r9, #3
   b5e00:	f04f 0904 	moveq.w	r9, #4
			for (count = 0; count < bytesToCopy; count++) {
   b5e04:	f106 0c01 	add.w	ip, r6, #1
   b5e08:	4591      	cmp	r9, r2
   b5e0a:	bf94      	ite	ls
   b5e0c:	eb01 0e09 	addls.w	lr, r1, r9
   b5e10:	eb01 0e02 	addhi.w	lr, r1, r2
   b5e14:	fa57 fc8c 	uxtab	ip, r7, ip
   b5e18:	fa5f fe8e 	uxtb.w	lr, lr
				buffer[index++] = uid->uidByte[uidIndex + count];
   b5e1c:	460a      	mov	r2, r1
   b5e1e:	f10d 0b28 	add.w	fp, sp, #40	; 0x28
   b5e22:	3101      	adds	r1, #1
   b5e24:	b2c9      	uxtb	r1, r1
   b5e26:	445a      	add	r2, fp
   b5e28:	f81c 9b01 	ldrb.w	r9, [ip], #1
   b5e2c:	f802 9c0c 	strb.w	r9, [r2, #-12]
			for (count = 0; count < bytesToCopy; count++) {
   b5e30:	4571      	cmp	r1, lr
   b5e32:	d1f3      	bne.n	b5e1c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xa0>
		if (useCascadeTag) {
   b5e34:	b10b      	cbz	r3, b5e3a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xbe>
			currentLevelKnownBits += 8;
   b5e36:	3008      	adds	r0, #8
   b5e38:	b244      	sxtb	r4, r0
			if (currentLevelKnownBits >= 32) { // All UID bits in this Cascade Level are known. This is a SELECT.
   b5e3a:	2c1f      	cmp	r4, #31
   b5e3c:	dd74      	ble.n	b5f28 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1ac>
				buffer[1] = 0x70; // NVB - Number of Valid Bits: Seven whole bytes
   b5e3e:	f04f 0370 	mov.w	r3, #112	; 0x70
				buffer[6] = buffer[2] ^ buffer[3] ^ buffer[4] ^ buffer[5];
   b5e42:	f89d 201f 	ldrb.w	r2, [sp, #31]
				buffer[1] = 0x70; // NVB - Number of Valid Bits: Seven whole bytes
   b5e46:	f88d 301d 	strb.w	r3, [sp, #29]
				buffer[6] = buffer[2] ^ buffer[3] ^ buffer[4] ^ buffer[5];
   b5e4a:	f89d 301e 	ldrb.w	r3, [sp, #30]
   b5e4e:	4053      	eors	r3, r2
   b5e50:	f89d 2020 	ldrb.w	r2, [sp, #32]
   b5e54:	4053      	eors	r3, r2
   b5e56:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
   b5e5a:	4053      	eors	r3, r2
   b5e5c:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
				result = PCD_CalculateCRC(buffer, 7, &buffer[7]);
   b5e60:	2207      	movs	r2, #7
   b5e62:	f10d 0323 	add.w	r3, sp, #35	; 0x23
   b5e66:	a907      	add	r1, sp, #28
   b5e68:	4650      	mov	r0, sl
   b5e6a:	f7ff fd0e 	bl	b588a <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
				if (result != STATUS_OK) {
   b5e6e:	2801      	cmp	r0, #1
				result = PCD_CalculateCRC(buffer, 7, &buffer[7]);
   b5e70:	4681      	mov	r9, r0
				if (result != STATUS_OK) {
   b5e72:	f040 80c8 	bne.w	b6006 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28a>
				txLastBits		= 0; // 0 => All 8 bits are valid.
   b5e76:	2300      	movs	r3, #0
   b5e78:	f88d 301a 	strb.w	r3, [sp, #26]
				responseLength	= 3;
   b5e7c:	2303      	movs	r3, #3
   b5e7e:	f88d 301b 	strb.w	r3, [sp, #27]
   b5e82:	9404      	str	r4, [sp, #16]
				responseBuffer	= &buffer[6];
   b5e84:	f10d 0b22 	add.w	fp, sp, #34	; 0x22
				bufferUsed		= 9;
   b5e88:	f04f 0909 	mov.w	r9, #9
			rxAlign = txLastBits;											// Having a seperate variable is overkill. But it makes the next line easier to read.
   b5e8c:	f89d 301a 	ldrb.w	r3, [sp, #26]
			PCD_WriteRegister(BitFramingReg, (rxAlign << 4) + txLastBits);	// RxAlign = BitFramingReg[6..4]. TxLastBits = BitFramingReg[2..0]
   b5e90:	9305      	str	r3, [sp, #20]
   b5e92:	eb03 1203 	add.w	r2, r3, r3, lsl #4
   b5e96:	b2d2      	uxtb	r2, r2
   b5e98:	211a      	movs	r1, #26
   b5e9a:	4650      	mov	r0, sl
   b5e9c:	f7ff fcbf 	bl	b581e <_ZN7MFRC52217PCD_WriteRegisterEhh>
			result = PCD_TransceiveData(buffer, bufferUsed, responseBuffer, &responseLength, &txLastBits, rxAlign);			
   b5ea0:	9b05      	ldr	r3, [sp, #20]
   b5ea2:	9302      	str	r3, [sp, #8]
   b5ea4:	f10d 031a 	add.w	r3, sp, #26
   b5ea8:	2200      	movs	r2, #0
   b5eaa:	9301      	str	r3, [sp, #4]
   b5eac:	f10d 031b 	add.w	r3, sp, #27
   b5eb0:	9203      	str	r2, [sp, #12]
   b5eb2:	9300      	str	r3, [sp, #0]
   b5eb4:	464a      	mov	r2, r9
   b5eb6:	465b      	mov	r3, fp
   b5eb8:	a907      	add	r1, sp, #28
   b5eba:	4650      	mov	r0, sl
   b5ebc:	f7ff fe26 	bl	b5b0c <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>
			if (result == STATUS_COLLISION) { // More than one PICC in the field => collision.
   b5ec0:	2803      	cmp	r0, #3
			result = PCD_TransceiveData(buffer, bufferUsed, responseBuffer, &responseLength, &txLastBits, rxAlign);			
   b5ec2:	4681      	mov	r9, r0
			if (result == STATUS_COLLISION) { // More than one PICC in the field => collision.
   b5ec4:	d14c      	bne.n	b5f60 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1e4>
				result = PCD_ReadRegister(CollReg); // CollReg[7..0] bits are: ValuesAfterColl reserved CollPosNotValid CollPos[4:0]
   b5ec6:	211c      	movs	r1, #28
   b5ec8:	4650      	mov	r0, sl
   b5eca:	f7ff fc76 	bl	b57ba <_ZN7MFRC52216PCD_ReadRegisterEh>
				if (result & 0x20) { // CollPosNotValid
   b5ece:	0681      	lsls	r1, r0, #26
   b5ed0:	f100 8099 	bmi.w	b6006 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28a>
					collisionPos = 32;
   b5ed4:	f010 001f 	ands.w	r0, r0, #31
   b5ed8:	bf08      	it	eq
   b5eda:	2020      	moveq	r0, #32
				if (collisionPos <= currentLevelKnownBits) { // No progress - should not happen 
   b5edc:	42a0      	cmp	r0, r4
   b5ede:	f340 8087 	ble.w	b5ff0 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x274>
				count			= (currentLevelKnownBits - 1) % 8; // The bit to modify
   b5ee2:	1e43      	subs	r3, r0, #1
				index			= 1 + (currentLevelKnownBits / 8) + (count ? 1 : 0); // First byte is index 0.
   b5ee4:	f003 0207 	and.w	r2, r3, #7
				currentLevelKnownBits = collisionPos;
   b5ee8:	b244      	sxtb	r4, r0
				index			= 1 + (currentLevelKnownBits / 8) + (count ? 1 : 0); // First byte is index 0.
   b5eea:	f013 0307 	ands.w	r3, r3, #7
   b5eee:	ea4f 00d0 	mov.w	r0, r0, lsr #3
   b5ef2:	bf18      	it	ne
   b5ef4:	2301      	movne	r3, #1
   b5ef6:	3001      	adds	r0, #1
				buffer[index]	|= (1 << count); 
   b5ef8:	4418      	add	r0, r3
   b5efa:	ab0a      	add	r3, sp, #40	; 0x28
   b5efc:	4418      	add	r0, r3
   b5efe:	2301      	movs	r3, #1
   b5f00:	fa03 f202 	lsl.w	r2, r3, r2
   b5f04:	f810 3c0c 	ldrb.w	r3, [r0, #-12]
   b5f08:	4313      	orrs	r3, r2
   b5f0a:	f800 3c0c 	strb.w	r3, [r0, #-12]
		while ( ! selectDone) {
   b5f0e:	e794      	b.n	b5e3a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xbe>
				buffer[0] = PICC_CMD_SEL_CL3;
   b5f10:	2397      	movs	r3, #151	; 0x97
   b5f12:	f88d 301c 	strb.w	r3, [sp, #28]
				uidIndex = 6;
   b5f16:	2606      	movs	r6, #6
				useCascadeTag = false;						// Never used in CL3.
   b5f18:	4623      	mov	r3, r4
				break;
   b5f1a:	e757      	b.n	b5dcc <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x50>
				useCascadeTag = validBits && uid->size > 4;	// When we know that the UID has more than 4 bytes
   b5f1c:	4643      	mov	r3, r8
   b5f1e:	e746      	b.n	b5dae <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x32>
				useCascadeTag = validBits && uid->size > 7;	// When we know that the UID has more than 7 bytes
   b5f20:	4643      	mov	r3, r8
   b5f22:	e753      	b.n	b5dcc <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x50>
		index = 2; // destination index in buffer[]
   b5f24:	2102      	movs	r1, #2
   b5f26:	e75d      	b.n	b5de4 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x68>
				count			= currentLevelKnownBits / 8;	// Number of whole bytes in the UID part.
   b5f28:	10e3      	asrs	r3, r4, #3
				index			= 2 + count;					// Number of whole bytes: SEL + NVB + UIDs
   b5f2a:	3302      	adds	r3, #2
   b5f2c:	b2db      	uxtb	r3, r3
				txLastBits		= currentLevelKnownBits % 8;
   b5f2e:	f004 0207 	and.w	r2, r4, #7
				bufferUsed		= index + (txLastBits ? 1 : 0);
   b5f32:	f014 0907 	ands.w	r9, r4, #7
				txLastBits		= currentLevelKnownBits % 8;
   b5f36:	f88d 201a 	strb.w	r2, [sp, #26]
				buffer[1]		= (index << 4) + txLastBits;	// NVB - Number of Valid Bits
   b5f3a:	eb02 1203 	add.w	r2, r2, r3, lsl #4
   b5f3e:	f88d 201d 	strb.w	r2, [sp, #29]
				bufferUsed		= index + (txLastBits ? 1 : 0);
   b5f42:	bf18      	it	ne
   b5f44:	f04f 0901 	movne.w	r9, #1
				responseBuffer	= &buffer[index];
   b5f48:	aa07      	add	r2, sp, #28
				bufferUsed		= index + (txLastBits ? 1 : 0);
   b5f4a:	4499      	add	r9, r3
				responseBuffer	= &buffer[index];
   b5f4c:	eb02 0b03 	add.w	fp, r2, r3
				responseLength	= sizeof(buffer) - index;
   b5f50:	f1c3 0309 	rsb	r3, r3, #9
				bufferUsed		= index + (txLastBits ? 1 : 0);
   b5f54:	fa5f f989 	uxtb.w	r9, r9
				responseLength	= sizeof(buffer) - index;
   b5f58:	f88d 301b 	strb.w	r3, [sp, #27]
   b5f5c:	9404      	str	r4, [sp, #16]
   b5f5e:	e795      	b.n	b5e8c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x110>
			else if (result != STATUS_OK) {
   b5f60:	2801      	cmp	r0, #1
   b5f62:	d150      	bne.n	b6006 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28a>
				if (currentLevelKnownBits >= 32) { // This was a SELECT.
   b5f64:	9b04      	ldr	r3, [sp, #16]
   b5f66:	2b1f      	cmp	r3, #31
					currentLevelKnownBits = 32;
   b5f68:	f04f 0420 	mov.w	r4, #32
				if (currentLevelKnownBits >= 32) { // This was a SELECT.
   b5f6c:	f77f af67 	ble.w	b5e3e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xc2>
		index			= (buffer[2] == PICC_CMD_CT) ? 3 : 2; // source index in buffer[]
   b5f70:	f89d 301e 	ldrb.w	r3, [sp, #30]
   b5f74:	2b88      	cmp	r3, #136	; 0x88
   b5f76:	d13e      	bne.n	b5ff6 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x27a>
   b5f78:	2303      	movs	r3, #3
		bytesToCopy		= (buffer[2] == PICC_CMD_CT) ? 3 : 4;
   b5f7a:	461a      	mov	r2, r3
		for (count = 0; count < bytesToCopy; count++) {
   b5f7c:	3601      	adds	r6, #1
   b5f7e:	441a      	add	r2, r3
   b5f80:	fa57 f686 	uxtab	r6, r7, r6
   b5f84:	b2d2      	uxtb	r2, r2
			uid->uidByte[uidIndex + count] = buffer[index++];
   b5f86:	4619      	mov	r1, r3
   b5f88:	a80a      	add	r0, sp, #40	; 0x28
   b5f8a:	3301      	adds	r3, #1
   b5f8c:	4401      	add	r1, r0
   b5f8e:	b2db      	uxtb	r3, r3
   b5f90:	f811 1c0c 	ldrb.w	r1, [r1, #-12]
   b5f94:	f806 1b01 	strb.w	r1, [r6], #1
		for (count = 0; count < bytesToCopy; count++) {
   b5f98:	4293      	cmp	r3, r2
   b5f9a:	d1f4      	bne.n	b5f86 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x20a>
		if (responseLength != 3 || txLastBits != 0) {		// SAK must be exactly 24 bits (1 byte + CRC_A).
   b5f9c:	f89d 601b 	ldrb.w	r6, [sp, #27]
   b5fa0:	2e03      	cmp	r6, #3
   b5fa2:	d137      	bne.n	b6014 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x298>
   b5fa4:	f89d 401a 	ldrb.w	r4, [sp, #26]
   b5fa8:	bba4      	cbnz	r4, b6014 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x298>
		result = PCD_CalculateCRC(responseBuffer, 1, &buffer[2]);
   b5faa:	f10d 031e 	add.w	r3, sp, #30
   b5fae:	2201      	movs	r2, #1
   b5fb0:	4659      	mov	r1, fp
   b5fb2:	4650      	mov	r0, sl
   b5fb4:	f7ff fc69 	bl	b588a <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
		if (result != STATUS_OK) {
   b5fb8:	2801      	cmp	r0, #1
		result = PCD_CalculateCRC(responseBuffer, 1, &buffer[2]);
   b5fba:	4681      	mov	r9, r0
		if (result != STATUS_OK) {
   b5fbc:	d123      	bne.n	b6006 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28a>
		if ((buffer[2] != responseBuffer[1]) || (buffer[3] != responseBuffer[2])) {
   b5fbe:	f89d 201e 	ldrb.w	r2, [sp, #30]
   b5fc2:	f89b 3001 	ldrb.w	r3, [fp, #1]
   b5fc6:	429a      	cmp	r2, r3
   b5fc8:	d127      	bne.n	b601a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x29e>
   b5fca:	f89d 201f 	ldrb.w	r2, [sp, #31]
   b5fce:	f89b 3002 	ldrb.w	r3, [fp, #2]
   b5fd2:	429a      	cmp	r2, r3
   b5fd4:	d121      	bne.n	b601a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x29e>
		if (responseBuffer[0] & 0x04) { // Cascade bit set - UID not complete yes
   b5fd6:	f89b 3000 	ldrb.w	r3, [fp]
   b5fda:	075a      	lsls	r2, r3, #29
   b5fdc:	d50e      	bpl.n	b5ffc <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x280>
			cascadeLevel++;
   b5fde:	3501      	adds	r5, #1
   b5fe0:	b2ed      	uxtb	r5, r5
		switch (cascadeLevel) {
   b5fe2:	2d03      	cmp	r5, #3
   b5fe4:	d094      	beq.n	b5f10 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x194>
   b5fe6:	2d04      	cmp	r5, #4
   b5fe8:	d002      	beq.n	b5ff0 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x274>
   b5fea:	2d02      	cmp	r5, #2
   b5fec:	f43f aee2 	beq.w	b5db4 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x38>
   b5ff0:	f04f 0906 	mov.w	r9, #6
   b5ff4:	e007      	b.n	b6006 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28a>
		index			= (buffer[2] == PICC_CMD_CT) ? 3 : 2; // source index in buffer[]
   b5ff6:	2302      	movs	r3, #2
		bytesToCopy		= (buffer[2] == PICC_CMD_CT) ? 3 : 4;
   b5ff8:	2204      	movs	r2, #4
   b5ffa:	e7bf      	b.n	b5f7c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x200>
	uid->size = 3 * cascadeLevel + 1;
   b5ffc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   b6000:	3501      	adds	r5, #1
			uid->sak = responseBuffer[0];
   b6002:	72fb      	strb	r3, [r7, #11]
	uid->size = 3 * cascadeLevel + 1;
   b6004:	703d      	strb	r5, [r7, #0]
} // End PICC_Select()
   b6006:	4648      	mov	r0, r9
   b6008:	b00b      	add	sp, #44	; 0x2c
   b600a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return STATUS_INVALID;
   b600e:	f04f 0907 	mov.w	r9, #7
   b6012:	e7f8      	b.n	b6006 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28a>
			return STATUS_ERROR;
   b6014:	f04f 0902 	mov.w	r9, #2
   b6018:	e7f5      	b.n	b6006 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28a>
			return STATUS_CRC_WRONG;
   b601a:	f04f 0908 	mov.w	r9, #8
   b601e:	e7f2      	b.n	b6006 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28a>

000b6020 <_ZN7MFRC52219PICC_ReadCardSerialEv>:
 * Remember to call PICC_IsNewCardPresent(), PICC_RequestA() or PICC_WakeupA() first.
 * The read UID is available in the class variable uid.
 * 
 * @return bool
 */
bool MFRC522::PICC_ReadCardSerial() {
   b6020:	b508      	push	{r3, lr}
   b6022:	4601      	mov	r1, r0
	byte result = PICC_Select(&uid);
   b6024:	2200      	movs	r2, #0
   b6026:	f7ff fea9 	bl	b5d7c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh>
	return (result == STATUS_OK);
} // End PICC_ReadCardSerial()
   b602a:	1e43      	subs	r3, r0, #1
   b602c:	4258      	negs	r0, r3
   b602e:	4158      	adcs	r0, r3
   b6030:	bd08      	pop	{r3, pc}
	...

000b6034 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b6034:	b508      	push	{r3, lr}
   b6036:	4b02      	ldr	r3, [pc, #8]	; (b6040 <os_mutex_recursive_create+0xc>)
   b6038:	681b      	ldr	r3, [r3, #0]
   b603a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b603c:	9301      	str	r3, [sp, #4]
   b603e:	bd08      	pop	{r3, pc}
   b6040:	00030248 	.word	0x00030248

000b6044 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b6044:	b508      	push	{r3, lr}
   b6046:	4b02      	ldr	r3, [pc, #8]	; (b6050 <HAL_RNG_GetRandomNumber+0xc>)
   b6048:	681b      	ldr	r3, [r3, #0]
   b604a:	685b      	ldr	r3, [r3, #4]
   b604c:	9301      	str	r3, [sp, #4]
   b604e:	bd08      	pop	{r3, pc}
   b6050:	00030218 	.word	0x00030218

000b6054 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b6054:	b508      	push	{r3, lr}
   b6056:	4b02      	ldr	r3, [pc, #8]	; (b6060 <HAL_Delay_Microseconds+0xc>)
   b6058:	681b      	ldr	r3, [r3, #0]
   b605a:	68db      	ldr	r3, [r3, #12]
   b605c:	9301      	str	r3, [sp, #4]
   b605e:	bd08      	pop	{r3, pc}
   b6060:	00030218 	.word	0x00030218

000b6064 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b6064:	b508      	push	{r3, lr}
   b6066:	4b02      	ldr	r3, [pc, #8]	; (b6070 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b6068:	681b      	ldr	r3, [r3, #0]
   b606a:	695b      	ldr	r3, [r3, #20]
   b606c:	9301      	str	r3, [sp, #4]
   b606e:	bd08      	pop	{r3, pc}
   b6070:	00030218 	.word	0x00030218

000b6074 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b6074:	b508      	push	{r3, lr}
   b6076:	4b02      	ldr	r3, [pc, #8]	; (b6080 <HAL_Pin_Mode+0xc>)
   b6078:	681b      	ldr	r3, [r3, #0]
   b607a:	689b      	ldr	r3, [r3, #8]
   b607c:	9301      	str	r3, [sp, #4]
   b607e:	bd08      	pop	{r3, pc}
   b6080:	0003022c 	.word	0x0003022c

000b6084 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b6084:	b508      	push	{r3, lr}
   b6086:	4b02      	ldr	r3, [pc, #8]	; (b6090 <HAL_Get_Pin_Mode+0xc>)
   b6088:	681b      	ldr	r3, [r3, #0]
   b608a:	68db      	ldr	r3, [r3, #12]
   b608c:	9301      	str	r3, [sp, #4]
   b608e:	bd08      	pop	{r3, pc}
   b6090:	0003022c 	.word	0x0003022c

000b6094 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b6094:	b508      	push	{r3, lr}
   b6096:	4b02      	ldr	r3, [pc, #8]	; (b60a0 <HAL_GPIO_Write+0xc>)
   b6098:	681b      	ldr	r3, [r3, #0]
   b609a:	691b      	ldr	r3, [r3, #16]
   b609c:	9301      	str	r3, [sp, #4]
   b609e:	bd08      	pop	{r3, pc}
   b60a0:	0003022c 	.word	0x0003022c

000b60a4 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   b60a4:	b508      	push	{r3, lr}
   b60a6:	4b02      	ldr	r3, [pc, #8]	; (b60b0 <HAL_GPIO_Read+0xc>)
   b60a8:	681b      	ldr	r3, [r3, #0]
   b60aa:	695b      	ldr	r3, [r3, #20]
   b60ac:	9301      	str	r3, [sp, #4]
   b60ae:	bd08      	pop	{r3, pc}
   b60b0:	0003022c 	.word	0x0003022c

000b60b4 <hal_i2c_set_speed>:
#define BASE_IDX 16 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
   b60b4:	b508      	push	{r3, lr}
   b60b6:	4b02      	ldr	r3, [pc, #8]	; (b60c0 <hal_i2c_set_speed+0xc>)
   b60b8:	681b      	ldr	r3, [r3, #0]
   b60ba:	681b      	ldr	r3, [r3, #0]
   b60bc:	9301      	str	r3, [sp, #4]
   b60be:	bd08      	pop	{r3, pc}
   b60c0:	00030228 	.word	0x00030228

000b60c4 <hal_i2c_begin>:
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b60c4:	b508      	push	{r3, lr}
   b60c6:	4b02      	ldr	r3, [pc, #8]	; (b60d0 <hal_i2c_begin+0xc>)
   b60c8:	681b      	ldr	r3, [r3, #0]
   b60ca:	68db      	ldr	r3, [r3, #12]
   b60cc:	9301      	str	r3, [sp, #4]
   b60ce:	bd08      	pop	{r3, pc}
   b60d0:	00030228 	.word	0x00030228

000b60d4 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b60d4:	b508      	push	{r3, lr}
   b60d6:	4b02      	ldr	r3, [pc, #8]	; (b60e0 <hal_i2c_begin_transmission+0xc>)
   b60d8:	681b      	ldr	r3, [r3, #0]
   b60da:	699b      	ldr	r3, [r3, #24]
   b60dc:	9301      	str	r3, [sp, #4]
   b60de:	bd08      	pop	{r3, pc}
   b60e0:	00030228 	.word	0x00030228

000b60e4 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b60e4:	b508      	push	{r3, lr}
   b60e6:	4b02      	ldr	r3, [pc, #8]	; (b60f0 <hal_i2c_end_transmission+0xc>)
   b60e8:	681b      	ldr	r3, [r3, #0]
   b60ea:	69db      	ldr	r3, [r3, #28]
   b60ec:	9301      	str	r3, [sp, #4]
   b60ee:	bd08      	pop	{r3, pc}
   b60f0:	00030228 	.word	0x00030228

000b60f4 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b60f4:	b508      	push	{r3, lr}
   b60f6:	4b02      	ldr	r3, [pc, #8]	; (b6100 <hal_i2c_write+0xc>)
   b60f8:	681b      	ldr	r3, [r3, #0]
   b60fa:	6a1b      	ldr	r3, [r3, #32]
   b60fc:	9301      	str	r3, [sp, #4]
   b60fe:	bd08      	pop	{r3, pc}
   b6100:	00030228 	.word	0x00030228

000b6104 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b6104:	b508      	push	{r3, lr}
   b6106:	4b02      	ldr	r3, [pc, #8]	; (b6110 <hal_i2c_available+0xc>)
   b6108:	681b      	ldr	r3, [r3, #0]
   b610a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b610c:	9301      	str	r3, [sp, #4]
   b610e:	bd08      	pop	{r3, pc}
   b6110:	00030228 	.word	0x00030228

000b6114 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b6114:	b508      	push	{r3, lr}
   b6116:	4b02      	ldr	r3, [pc, #8]	; (b6120 <hal_i2c_read+0xc>)
   b6118:	681b      	ldr	r3, [r3, #0]
   b611a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b611c:	9301      	str	r3, [sp, #4]
   b611e:	bd08      	pop	{r3, pc}
   b6120:	00030228 	.word	0x00030228

000b6124 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b6124:	b508      	push	{r3, lr}
   b6126:	4b02      	ldr	r3, [pc, #8]	; (b6130 <hal_i2c_peek+0xc>)
   b6128:	681b      	ldr	r3, [r3, #0]
   b612a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b612c:	9301      	str	r3, [sp, #4]
   b612e:	bd08      	pop	{r3, pc}
   b6130:	00030228 	.word	0x00030228

000b6134 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b6134:	b508      	push	{r3, lr}
   b6136:	4b02      	ldr	r3, [pc, #8]	; (b6140 <hal_i2c_flush+0xc>)
   b6138:	681b      	ldr	r3, [r3, #0]
   b613a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b613c:	9301      	str	r3, [sp, #4]
   b613e:	bd08      	pop	{r3, pc}
   b6140:	00030228 	.word	0x00030228

000b6144 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b6144:	b508      	push	{r3, lr}
   b6146:	4b02      	ldr	r3, [pc, #8]	; (b6150 <hal_i2c_is_enabled+0xc>)
   b6148:	681b      	ldr	r3, [r3, #0]
   b614a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b614c:	9301      	str	r3, [sp, #4]
   b614e:	bd08      	pop	{r3, pc}
   b6150:	00030228 	.word	0x00030228

000b6154 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b6154:	b508      	push	{r3, lr}
   b6156:	4b02      	ldr	r3, [pc, #8]	; (b6160 <hal_i2c_init+0xc>)
   b6158:	681b      	ldr	r3, [r3, #0]
   b615a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b615c:	9301      	str	r3, [sp, #4]
   b615e:	bd08      	pop	{r3, pc}
   b6160:	00030228 	.word	0x00030228

000b6164 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b6164:	b508      	push	{r3, lr}
   b6166:	4b02      	ldr	r3, [pc, #8]	; (b6170 <inet_inet_ntop+0xc>)
   b6168:	681b      	ldr	r3, [r3, #0]
   b616a:	695b      	ldr	r3, [r3, #20]
   b616c:	9301      	str	r3, [sp, #4]
   b616e:	bd08      	pop	{r3, pc}
   b6170:	00030264 	.word	0x00030264

000b6174 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b6174:	b508      	push	{r3, lr}
   b6176:	4b02      	ldr	r3, [pc, #8]	; (b6180 <netdb_freeaddrinfo+0xc>)
   b6178:	681b      	ldr	r3, [r3, #0]
   b617a:	689b      	ldr	r3, [r3, #8]
   b617c:	9301      	str	r3, [sp, #4]
   b617e:	bd08      	pop	{r3, pc}
   b6180:	00030268 	.word	0x00030268

000b6184 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b6184:	b508      	push	{r3, lr}
   b6186:	4b02      	ldr	r3, [pc, #8]	; (b6190 <netdb_getaddrinfo+0xc>)
   b6188:	681b      	ldr	r3, [r3, #0]
   b618a:	68db      	ldr	r3, [r3, #12]
   b618c:	9301      	str	r3, [sp, #4]
   b618e:	bd08      	pop	{r3, pc}
   b6190:	00030268 	.word	0x00030268

000b6194 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b6194:	b508      	push	{r3, lr}
   b6196:	4b02      	ldr	r3, [pc, #8]	; (b61a0 <hal_spi_begin+0xc>)
   b6198:	681b      	ldr	r3, [r3, #0]
   b619a:	681b      	ldr	r3, [r3, #0]
   b619c:	9301      	str	r3, [sp, #4]
   b619e:	bd08      	pop	{r3, pc}
   b61a0:	00030230 	.word	0x00030230

000b61a4 <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b61a4:	b508      	push	{r3, lr}
   b61a6:	4b02      	ldr	r3, [pc, #8]	; (b61b0 <hal_spi_transfer+0xc>)
   b61a8:	681b      	ldr	r3, [r3, #0]
   b61aa:	695b      	ldr	r3, [r3, #20]
   b61ac:	9301      	str	r3, [sp, #4]
   b61ae:	bd08      	pop	{r3, pc}
   b61b0:	00030230 	.word	0x00030230

000b61b4 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b61b4:	b508      	push	{r3, lr}
   b61b6:	4b02      	ldr	r3, [pc, #8]	; (b61c0 <hal_spi_init+0xc>)
   b61b8:	681b      	ldr	r3, [r3, #0]
   b61ba:	69db      	ldr	r3, [r3, #28]
   b61bc:	9301      	str	r3, [sp, #4]
   b61be:	bd08      	pop	{r3, pc}
   b61c0:	00030230 	.word	0x00030230

000b61c4 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b61c4:	b508      	push	{r3, lr}
   b61c6:	4b02      	ldr	r3, [pc, #8]	; (b61d0 <hal_spi_is_enabled+0xc>)
   b61c8:	681b      	ldr	r3, [r3, #0]
   b61ca:	6a1b      	ldr	r3, [r3, #32]
   b61cc:	9301      	str	r3, [sp, #4]
   b61ce:	bd08      	pop	{r3, pc}
   b61d0:	00030230 	.word	0x00030230

000b61d4 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b61d4:	b508      	push	{r3, lr}
   b61d6:	4b02      	ldr	r3, [pc, #8]	; (b61e0 <hal_spi_info+0xc>)
   b61d8:	681b      	ldr	r3, [r3, #0]
   b61da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b61dc:	9301      	str	r3, [sp, #4]
   b61de:	bd08      	pop	{r3, pc}
   b61e0:	00030230 	.word	0x00030230

000b61e4 <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   b61e4:	b508      	push	{r3, lr}
   b61e6:	4b02      	ldr	r3, [pc, #8]	; (b61f0 <hal_spi_set_settings+0xc>)
   b61e8:	681b      	ldr	r3, [r3, #0]
   b61ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b61ec:	9301      	str	r3, [sp, #4]
   b61ee:	bd08      	pop	{r3, pc}
   b61f0:	00030230 	.word	0x00030230

000b61f4 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b61f4:	b508      	push	{r3, lr}
   b61f6:	4b02      	ldr	r3, [pc, #8]	; (b6200 <hal_spi_acquire+0xc>)
   b61f8:	681b      	ldr	r3, [r3, #0]
   b61fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b61fc:	9301      	str	r3, [sp, #4]
   b61fe:	bd08      	pop	{r3, pc}
   b6200:	00030230 	.word	0x00030230

000b6204 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b6204:	b508      	push	{r3, lr}
   b6206:	4b02      	ldr	r3, [pc, #8]	; (b6210 <hal_spi_release+0xc>)
   b6208:	681b      	ldr	r3, [r3, #0]
   b620a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b620c:	9301      	str	r3, [sp, #4]
   b620e:	bd08      	pop	{r3, pc}
   b6210:	00030230 	.word	0x00030230

000b6214 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b6214:	b508      	push	{r3, lr}
   b6216:	4b02      	ldr	r3, [pc, #8]	; (b6220 <hal_usart_write+0xc>)
   b6218:	681b      	ldr	r3, [r3, #0]
   b621a:	68db      	ldr	r3, [r3, #12]
   b621c:	9301      	str	r3, [sp, #4]
   b621e:	bd08      	pop	{r3, pc}
   b6220:	0003023c 	.word	0x0003023c

000b6224 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b6224:	b508      	push	{r3, lr}
   b6226:	4b02      	ldr	r3, [pc, #8]	; (b6230 <hal_usart_available+0xc>)
   b6228:	681b      	ldr	r3, [r3, #0]
   b622a:	691b      	ldr	r3, [r3, #16]
   b622c:	9301      	str	r3, [sp, #4]
   b622e:	bd08      	pop	{r3, pc}
   b6230:	0003023c 	.word	0x0003023c

000b6234 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b6234:	b508      	push	{r3, lr}
   b6236:	4b02      	ldr	r3, [pc, #8]	; (b6240 <hal_usart_read+0xc>)
   b6238:	681b      	ldr	r3, [r3, #0]
   b623a:	695b      	ldr	r3, [r3, #20]
   b623c:	9301      	str	r3, [sp, #4]
   b623e:	bd08      	pop	{r3, pc}
   b6240:	0003023c 	.word	0x0003023c

000b6244 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b6244:	b508      	push	{r3, lr}
   b6246:	4b02      	ldr	r3, [pc, #8]	; (b6250 <hal_usart_peek+0xc>)
   b6248:	681b      	ldr	r3, [r3, #0]
   b624a:	699b      	ldr	r3, [r3, #24]
   b624c:	9301      	str	r3, [sp, #4]
   b624e:	bd08      	pop	{r3, pc}
   b6250:	0003023c 	.word	0x0003023c

000b6254 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b6254:	b508      	push	{r3, lr}
   b6256:	4b02      	ldr	r3, [pc, #8]	; (b6260 <hal_usart_flush+0xc>)
   b6258:	681b      	ldr	r3, [r3, #0]
   b625a:	69db      	ldr	r3, [r3, #28]
   b625c:	9301      	str	r3, [sp, #4]
   b625e:	bd08      	pop	{r3, pc}
   b6260:	0003023c 	.word	0x0003023c

000b6264 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b6264:	b508      	push	{r3, lr}
   b6266:	4b02      	ldr	r3, [pc, #8]	; (b6270 <hal_usart_is_enabled+0xc>)
   b6268:	681b      	ldr	r3, [r3, #0]
   b626a:	6a1b      	ldr	r3, [r3, #32]
   b626c:	9301      	str	r3, [sp, #4]
   b626e:	bd08      	pop	{r3, pc}
   b6270:	0003023c 	.word	0x0003023c

000b6274 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b6274:	b508      	push	{r3, lr}
   b6276:	4b02      	ldr	r3, [pc, #8]	; (b6280 <hal_usart_available_data_for_write+0xc>)
   b6278:	681b      	ldr	r3, [r3, #0]
   b627a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b627c:	9301      	str	r3, [sp, #4]
   b627e:	bd08      	pop	{r3, pc}
   b6280:	0003023c 	.word	0x0003023c

000b6284 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b6284:	b508      	push	{r3, lr}
   b6286:	4b02      	ldr	r3, [pc, #8]	; (b6290 <hal_usart_init_ex+0xc>)
   b6288:	681b      	ldr	r3, [r3, #0]
   b628a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b628c:	9301      	str	r3, [sp, #4]
   b628e:	bd08      	pop	{r3, pc}
   b6290:	0003023c 	.word	0x0003023c

000b6294 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b6294:	b508      	push	{r3, lr}
   b6296:	4b02      	ldr	r3, [pc, #8]	; (b62a0 <HAL_USB_USART_Init+0xc>)
   b6298:	681b      	ldr	r3, [r3, #0]
   b629a:	681b      	ldr	r3, [r3, #0]
   b629c:	9301      	str	r3, [sp, #4]
   b629e:	bd08      	pop	{r3, pc}
   b62a0:	0003024c 	.word	0x0003024c

000b62a4 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b62a4:	b508      	push	{r3, lr}
   b62a6:	4b02      	ldr	r3, [pc, #8]	; (b62b0 <HAL_USB_USART_Begin+0xc>)
   b62a8:	681b      	ldr	r3, [r3, #0]
   b62aa:	685b      	ldr	r3, [r3, #4]
   b62ac:	9301      	str	r3, [sp, #4]
   b62ae:	bd08      	pop	{r3, pc}
   b62b0:	0003024c 	.word	0x0003024c

000b62b4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b62b4:	b508      	push	{r3, lr}
   b62b6:	4b02      	ldr	r3, [pc, #8]	; (b62c0 <HAL_USB_USART_Available_Data+0xc>)
   b62b8:	681b      	ldr	r3, [r3, #0]
   b62ba:	691b      	ldr	r3, [r3, #16]
   b62bc:	9301      	str	r3, [sp, #4]
   b62be:	bd08      	pop	{r3, pc}
   b62c0:	0003024c 	.word	0x0003024c

000b62c4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b62c4:	b508      	push	{r3, lr}
   b62c6:	4b02      	ldr	r3, [pc, #8]	; (b62d0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b62c8:	681b      	ldr	r3, [r3, #0]
   b62ca:	695b      	ldr	r3, [r3, #20]
   b62cc:	9301      	str	r3, [sp, #4]
   b62ce:	bd08      	pop	{r3, pc}
   b62d0:	0003024c 	.word	0x0003024c

000b62d4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b62d4:	b508      	push	{r3, lr}
   b62d6:	4b02      	ldr	r3, [pc, #8]	; (b62e0 <HAL_USB_USART_Receive_Data+0xc>)
   b62d8:	681b      	ldr	r3, [r3, #0]
   b62da:	699b      	ldr	r3, [r3, #24]
   b62dc:	9301      	str	r3, [sp, #4]
   b62de:	bd08      	pop	{r3, pc}
   b62e0:	0003024c 	.word	0x0003024c

000b62e4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b62e4:	b508      	push	{r3, lr}
   b62e6:	4b02      	ldr	r3, [pc, #8]	; (b62f0 <HAL_USB_USART_Send_Data+0xc>)
   b62e8:	681b      	ldr	r3, [r3, #0]
   b62ea:	69db      	ldr	r3, [r3, #28]
   b62ec:	9301      	str	r3, [sp, #4]
   b62ee:	bd08      	pop	{r3, pc}
   b62f0:	0003024c 	.word	0x0003024c

000b62f4 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b62f4:	b508      	push	{r3, lr}
   b62f6:	4b02      	ldr	r3, [pc, #8]	; (b6300 <HAL_USB_USART_Flush_Data+0xc>)
   b62f8:	681b      	ldr	r3, [r3, #0]
   b62fa:	6a1b      	ldr	r3, [r3, #32]
   b62fc:	9301      	str	r3, [sp, #4]
   b62fe:	bd08      	pop	{r3, pc}
   b6300:	0003024c 	.word	0x0003024c

000b6304 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b6304:	b508      	push	{r3, lr}
   b6306:	4b02      	ldr	r3, [pc, #8]	; (b6310 <panic_+0xc>)
   b6308:	681b      	ldr	r3, [r3, #0]
   b630a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b630c:	9301      	str	r3, [sp, #4]
   b630e:	bd08      	pop	{r3, pc}
   b6310:	00030260 	.word	0x00030260

000b6314 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b6314:	b508      	push	{r3, lr}
   b6316:	4b02      	ldr	r3, [pc, #8]	; (b6320 <set_system_mode+0xc>)
   b6318:	681b      	ldr	r3, [r3, #0]
   b631a:	685b      	ldr	r3, [r3, #4]
   b631c:	9301      	str	r3, [sp, #4]
   b631e:	bd08      	pop	{r3, pc}
   b6320:	00030220 	.word	0x00030220

000b6324 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b6324:	b508      	push	{r3, lr}
   b6326:	4b02      	ldr	r3, [pc, #8]	; (b6330 <system_delay_ms+0xc>)
   b6328:	681b      	ldr	r3, [r3, #0]
   b632a:	695b      	ldr	r3, [r3, #20]
   b632c:	9301      	str	r3, [sp, #4]
   b632e:	bd08      	pop	{r3, pc}
   b6330:	00030220 	.word	0x00030220

000b6334 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b6334:	b508      	push	{r3, lr}
   b6336:	4b03      	ldr	r3, [pc, #12]	; (b6344 <system_ctrl_set_app_request_handler+0x10>)
   b6338:	681b      	ldr	r3, [r3, #0]
   b633a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b633e:	9301      	str	r3, [sp, #4]
   b6340:	bd08      	pop	{r3, pc}
   b6342:	0000      	.short	0x0000
   b6344:	00030220 	.word	0x00030220

000b6348 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b6348:	b508      	push	{r3, lr}
   b634a:	4b03      	ldr	r3, [pc, #12]	; (b6358 <system_ctrl_set_result+0x10>)
   b634c:	681b      	ldr	r3, [r3, #0]
   b634e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b6352:	9301      	str	r3, [sp, #4]
   b6354:	bd08      	pop	{r3, pc}
   b6356:	0000      	.short	0x0000
   b6358:	00030220 	.word	0x00030220

000b635c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b635c:	b508      	push	{r3, lr}
   b635e:	4b02      	ldr	r3, [pc, #8]	; (b6368 <spark_set_random_seed_from_cloud_handler+0xc>)
   b6360:	681b      	ldr	r3, [r3, #0]
   b6362:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b6364:	9301      	str	r3, [sp, #4]
   b6366:	bd08      	pop	{r3, pc}
   b6368:	00030244 	.word	0x00030244

000b636c <spark_cloud_disconnect>:
DYNALIB_FN(16, system_cloud, spark_publish_vitals, int(system_tick_t, void*))
DYNALIB_FN(17, system_cloud, spark_cloud_disconnect, int(const spark_cloud_disconnect_options*, void*))
   b636c:	b508      	push	{r3, lr}
   b636e:	4b02      	ldr	r3, [pc, #8]	; (b6378 <spark_cloud_disconnect+0xc>)
   b6370:	681b      	ldr	r3, [r3, #0]
   b6372:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6374:	9301      	str	r3, [sp, #4]
   b6376:	bd08      	pop	{r3, pc}
   b6378:	00030244 	.word	0x00030244

000b637c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b637c:	b508      	push	{r3, lr}
   b637e:	4b02      	ldr	r3, [pc, #8]	; (b6388 <network_connect+0xc>)
   b6380:	681b      	ldr	r3, [r3, #0]
   b6382:	685b      	ldr	r3, [r3, #4]
   b6384:	9301      	str	r3, [sp, #4]
   b6386:	bd08      	pop	{r3, pc}
   b6388:	00030240 	.word	0x00030240

000b638c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b638c:	b508      	push	{r3, lr}
   b638e:	4b02      	ldr	r3, [pc, #8]	; (b6398 <network_connecting+0xc>)
   b6390:	681b      	ldr	r3, [r3, #0]
   b6392:	689b      	ldr	r3, [r3, #8]
   b6394:	9301      	str	r3, [sp, #4]
   b6396:	bd08      	pop	{r3, pc}
   b6398:	00030240 	.word	0x00030240

000b639c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b639c:	b508      	push	{r3, lr}
   b639e:	4b02      	ldr	r3, [pc, #8]	; (b63a8 <network_disconnect+0xc>)
   b63a0:	681b      	ldr	r3, [r3, #0]
   b63a2:	68db      	ldr	r3, [r3, #12]
   b63a4:	9301      	str	r3, [sp, #4]
   b63a6:	bd08      	pop	{r3, pc}
   b63a8:	00030240 	.word	0x00030240

000b63ac <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b63ac:	b508      	push	{r3, lr}
   b63ae:	4b02      	ldr	r3, [pc, #8]	; (b63b8 <network_ready+0xc>)
   b63b0:	681b      	ldr	r3, [r3, #0]
   b63b2:	691b      	ldr	r3, [r3, #16]
   b63b4:	9301      	str	r3, [sp, #4]
   b63b6:	bd08      	pop	{r3, pc}
   b63b8:	00030240 	.word	0x00030240

000b63bc <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b63bc:	b508      	push	{r3, lr}
   b63be:	4b02      	ldr	r3, [pc, #8]	; (b63c8 <network_on+0xc>)
   b63c0:	681b      	ldr	r3, [r3, #0]
   b63c2:	695b      	ldr	r3, [r3, #20]
   b63c4:	9301      	str	r3, [sp, #4]
   b63c6:	bd08      	pop	{r3, pc}
   b63c8:	00030240 	.word	0x00030240

000b63cc <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b63cc:	b508      	push	{r3, lr}
   b63ce:	4b02      	ldr	r3, [pc, #8]	; (b63d8 <network_off+0xc>)
   b63d0:	681b      	ldr	r3, [r3, #0]
   b63d2:	699b      	ldr	r3, [r3, #24]
   b63d4:	9301      	str	r3, [sp, #4]
   b63d6:	bd08      	pop	{r3, pc}
   b63d8:	00030240 	.word	0x00030240

000b63dc <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b63dc:	b508      	push	{r3, lr}
   b63de:	4b02      	ldr	r3, [pc, #8]	; (b63e8 <network_listen+0xc>)
   b63e0:	681b      	ldr	r3, [r3, #0]
   b63e2:	69db      	ldr	r3, [r3, #28]
   b63e4:	9301      	str	r3, [sp, #4]
   b63e6:	bd08      	pop	{r3, pc}
   b63e8:	00030240 	.word	0x00030240

000b63ec <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b63ec:	b508      	push	{r3, lr}
   b63ee:	4b02      	ldr	r3, [pc, #8]	; (b63f8 <network_listening+0xc>)
   b63f0:	681b      	ldr	r3, [r3, #0]
   b63f2:	6a1b      	ldr	r3, [r3, #32]
   b63f4:	9301      	str	r3, [sp, #4]
   b63f6:	bd08      	pop	{r3, pc}
   b63f8:	00030240 	.word	0x00030240

000b63fc <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b63fc:	b508      	push	{r3, lr}
   b63fe:	4b02      	ldr	r3, [pc, #8]	; (b6408 <network_set_listen_timeout+0xc>)
   b6400:	681b      	ldr	r3, [r3, #0]
   b6402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6404:	9301      	str	r3, [sp, #4]
   b6406:	bd08      	pop	{r3, pc}
   b6408:	00030240 	.word	0x00030240

000b640c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b640c:	b508      	push	{r3, lr}
   b640e:	4b02      	ldr	r3, [pc, #8]	; (b6418 <network_get_listen_timeout+0xc>)
   b6410:	681b      	ldr	r3, [r3, #0]
   b6412:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6414:	9301      	str	r3, [sp, #4]
   b6416:	bd08      	pop	{r3, pc}
   b6418:	00030240 	.word	0x00030240

000b641c <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b641c:	b508      	push	{r3, lr}
   b641e:	4b02      	ldr	r3, [pc, #8]	; (b6428 <network_is_on+0xc>)
   b6420:	681b      	ldr	r3, [r3, #0]
   b6422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6424:	9301      	str	r3, [sp, #4]
   b6426:	bd08      	pop	{r3, pc}
   b6428:	00030240 	.word	0x00030240

000b642c <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b642c:	b508      	push	{r3, lr}
   b642e:	4b02      	ldr	r3, [pc, #8]	; (b6438 <network_is_off+0xc>)
   b6430:	681b      	ldr	r3, [r3, #0]
   b6432:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6434:	9301      	str	r3, [sp, #4]
   b6436:	bd08      	pop	{r3, pc}
   b6438:	00030240 	.word	0x00030240

000b643c <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b643c:	b508      	push	{r3, lr}
   b643e:	4b02      	ldr	r3, [pc, #8]	; (b6448 <malloc+0xc>)
   b6440:	681b      	ldr	r3, [r3, #0]
   b6442:	681b      	ldr	r3, [r3, #0]
   b6444:	9301      	str	r3, [sp, #4]
   b6446:	bd08      	pop	{r3, pc}
   b6448:	0003021c 	.word	0x0003021c

000b644c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b644c:	b508      	push	{r3, lr}
   b644e:	4b02      	ldr	r3, [pc, #8]	; (b6458 <free+0xc>)
   b6450:	681b      	ldr	r3, [r3, #0]
   b6452:	685b      	ldr	r3, [r3, #4]
   b6454:	9301      	str	r3, [sp, #4]
   b6456:	bd08      	pop	{r3, pc}
   b6458:	0003021c 	.word	0x0003021c

000b645c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b645c:	b508      	push	{r3, lr}
   b645e:	4b02      	ldr	r3, [pc, #8]	; (b6468 <realloc+0xc>)
   b6460:	681b      	ldr	r3, [r3, #0]
   b6462:	689b      	ldr	r3, [r3, #8]
   b6464:	9301      	str	r3, [sp, #4]
   b6466:	bd08      	pop	{r3, pc}
   b6468:	0003021c 	.word	0x0003021c

000b646c <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b646c:	b508      	push	{r3, lr}
   b646e:	4b02      	ldr	r3, [pc, #8]	; (b6478 <vsnprintf+0xc>)
   b6470:	681b      	ldr	r3, [r3, #0]
   b6472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6474:	9301      	str	r3, [sp, #4]
   b6476:	bd08      	pop	{r3, pc}
   b6478:	0003021c 	.word	0x0003021c

000b647c <__assert_func>:
// on Gen 2 platforms without breaking inter-module dependencies.
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b647c:	b508      	push	{r3, lr}
   b647e:	4b02      	ldr	r3, [pc, #8]	; (b6488 <__assert_func+0xc>)
   b6480:	681b      	ldr	r3, [r3, #0]
   b6482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6484:	9301      	str	r3, [sp, #4]
   b6486:	bd08      	pop	{r3, pc}
   b6488:	0003021c 	.word	0x0003021c

000b648c <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b648c:	b508      	push	{r3, lr}
   b648e:	4b02      	ldr	r3, [pc, #8]	; (b6498 <newlib_impure_ptr_callback+0xc>)
   b6490:	681b      	ldr	r3, [r3, #0]
   b6492:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6494:	9301      	str	r3, [sp, #4]
   b6496:	bd08      	pop	{r3, pc}
   b6498:	0003021c 	.word	0x0003021c

000b649c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b649c:	2100      	movs	r1, #0
   b649e:	f7ff bf41 	b.w	b6324 <system_delay_ms>
	...

000b64a4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b64a4:	4802      	ldr	r0, [pc, #8]	; (b64b0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b64a6:	2300      	movs	r3, #0
   b64a8:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b64aa:	f7ff bdc3 	b.w	b6034 <os_mutex_recursive_create>
   b64ae:	bf00      	nop
   b64b0:	2003e6c4 	.word	0x2003e6c4

000b64b4 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>:

int CloudClass::publishVitals(system_tick_t period_s_) {
    return spark_publish_vitals(period_s_, nullptr);
}

void CloudClass::disconnect(const CloudDisconnectOptions& options) {
   b64b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    opts.size = sizeof(opts);
   b64b6:	230c      	movs	r3, #12
   b64b8:	f8ad 3004 	strh.w	r3, [sp, #4]
    opts.flags = flags_;
   b64bc:	6803      	ldr	r3, [r0, #0]
   b64be:	f88d 3006 	strb.w	r3, [sp, #6]
    opts.graceful = graceful_;
   b64c2:	7a03      	ldrb	r3, [r0, #8]
   b64c4:	f88d 3007 	strb.w	r3, [sp, #7]
    opts.timeout = timeout_;
   b64c8:	6843      	ldr	r3, [r0, #4]
   b64ca:	9302      	str	r3, [sp, #8]
    spark_cloud_disconnect_options opts = {};
   b64cc:	2100      	movs	r1, #0
    opts.clear_session = clearSession_;
   b64ce:	7a43      	ldrb	r3, [r0, #9]
    spark_cloud_disconnect_options opts = {};
   b64d0:	f8ad 100d 	strh.w	r1, [sp, #13]
    const auto opts = options.toSystemOptions();
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   b64d4:	a801      	add	r0, sp, #4
    spark_cloud_disconnect_options opts = {};
   b64d6:	f88d 100f 	strb.w	r1, [sp, #15]
    opts.clear_session = clearSession_;
   b64da:	f88d 300c 	strb.w	r3, [sp, #12]
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   b64de:	f7ff ff45 	bl	b636c <spark_cloud_disconnect>
}
   b64e2:	b005      	add	sp, #20
   b64e4:	f85d fb04 	ldr.w	pc, [sp], #4

000b64e8 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b64e8:	2200      	movs	r2, #0
   b64ea:	6840      	ldr	r0, [r0, #4]
   b64ec:	4611      	mov	r1, r2
   b64ee:	f7ff bf7d 	b.w	b63ec <network_listening>

000b64f2 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b64f2:	2200      	movs	r2, #0
   b64f4:	6840      	ldr	r0, [r0, #4]
   b64f6:	4611      	mov	r1, r2
   b64f8:	f7ff bf88 	b.w	b640c <network_get_listen_timeout>

000b64fc <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b64fc:	6840      	ldr	r0, [r0, #4]
   b64fe:	2200      	movs	r2, #0
   b6500:	f7ff bf7c 	b.w	b63fc <network_set_listen_timeout>

000b6504 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b6504:	6840      	ldr	r0, [r0, #4]
   b6506:	2200      	movs	r2, #0
   b6508:	f081 0101 	eor.w	r1, r1, #1
   b650c:	f7ff bf66 	b.w	b63dc <network_listen>

000b6510 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b6510:	2300      	movs	r3, #0
   b6512:	6840      	ldr	r0, [r0, #4]
   b6514:	461a      	mov	r2, r3
   b6516:	4619      	mov	r1, r3
   b6518:	f7ff bf58 	b.w	b63cc <network_off>

000b651c <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b651c:	2300      	movs	r3, #0
   b651e:	6840      	ldr	r0, [r0, #4]
   b6520:	461a      	mov	r2, r3
   b6522:	4619      	mov	r1, r3
   b6524:	f7ff bf4a 	b.w	b63bc <network_on>

000b6528 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b6528:	2200      	movs	r2, #0
   b652a:	6840      	ldr	r0, [r0, #4]
   b652c:	4611      	mov	r1, r2
   b652e:	f7ff bf3d 	b.w	b63ac <network_ready>

000b6532 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b6532:	2200      	movs	r2, #0
   b6534:	6840      	ldr	r0, [r0, #4]
   b6536:	4611      	mov	r1, r2
   b6538:	f7ff bf28 	b.w	b638c <network_connecting>

000b653c <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b653c:	6840      	ldr	r0, [r0, #4]
   b653e:	2200      	movs	r2, #0
   b6540:	2102      	movs	r1, #2
   b6542:	f7ff bf2b 	b.w	b639c <network_disconnect>

000b6546 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b6546:	2300      	movs	r3, #0
   b6548:	6840      	ldr	r0, [r0, #4]
   b654a:	461a      	mov	r2, r3
   b654c:	f7ff bf16 	b.w	b637c <network_connect>

000b6550 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b6550:	4b02      	ldr	r3, [pc, #8]	; (b655c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b6552:	2203      	movs	r2, #3
   b6554:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b6556:	4a02      	ldr	r2, [pc, #8]	; (b6560 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b6558:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b655a:	4770      	bx	lr
   b655c:	2003e6c8 	.word	0x2003e6c8
   b6560:	000b8254 	.word	0x000b8254

000b6564 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b6564:	4770      	bx	lr

000b6566 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b6566:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6568:	4606      	mov	r6, r0
   b656a:	4615      	mov	r5, r2
   b656c:	460c      	mov	r4, r1
   b656e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b6570:	42bc      	cmp	r4, r7
   b6572:	d006      	beq.n	b6582 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b6574:	6833      	ldr	r3, [r6, #0]
   b6576:	f814 1b01 	ldrb.w	r1, [r4], #1
   b657a:	689b      	ldr	r3, [r3, #8]
   b657c:	4630      	mov	r0, r6
   b657e:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b6580:	e7f6      	b.n	b6570 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b6582:	4628      	mov	r0, r5
   b6584:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6586 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b6586:	7c00      	ldrb	r0, [r0, #16]
   b6588:	2200      	movs	r2, #0
   b658a:	f7ff bdb3 	b.w	b60f4 <hal_i2c_write>

000b658e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b658e:	7c00      	ldrb	r0, [r0, #16]
   b6590:	2100      	movs	r1, #0
   b6592:	f7ff bdb7 	b.w	b6104 <hal_i2c_available>

000b6596 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b6596:	7c00      	ldrb	r0, [r0, #16]
   b6598:	2100      	movs	r1, #0
   b659a:	f7ff bdbb 	b.w	b6114 <hal_i2c_read>

000b659e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b659e:	7c00      	ldrb	r0, [r0, #16]
   b65a0:	2100      	movs	r1, #0
   b65a2:	f7ff bdbf 	b.w	b6124 <hal_i2c_peek>

000b65a6 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b65a6:	7c00      	ldrb	r0, [r0, #16]
   b65a8:	2100      	movs	r1, #0
   b65aa:	f7ff bdc3 	b.w	b6134 <hal_i2c_flush>

000b65ae <_ZN7TwoWireD0Ev>:
   b65ae:	b510      	push	{r4, lr}
   b65b0:	2114      	movs	r1, #20
   b65b2:	4604      	mov	r4, r0
   b65b4:	f7fd fd6f 	bl	b4096 <_ZdlPvj>
   b65b8:	4620      	mov	r0, r4
   b65ba:	bd10      	pop	{r4, pc}

000b65bc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b65bc:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b65be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b65c2:	4604      	mov	r4, r0
   b65c4:	4608      	mov	r0, r1
   b65c6:	2100      	movs	r1, #0
   b65c8:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b65cc:	4b03      	ldr	r3, [pc, #12]	; (b65dc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   b65ce:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   b65d0:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   b65d2:	4611      	mov	r1, r2
   b65d4:	f7ff fdbe 	bl	b6154 <hal_i2c_init>
}
   b65d8:	4620      	mov	r0, r4
   b65da:	bd10      	pop	{r4, pc}
   b65dc:	000b8290 	.word	0x000b8290

000b65e0 <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
   b65e0:	7c00      	ldrb	r0, [r0, #16]
   b65e2:	2200      	movs	r2, #0
   b65e4:	f7ff bd66 	b.w	b60b4 <hal_i2c_set_speed>

000b65e8 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b65e8:	2300      	movs	r3, #0
   b65ea:	7c00      	ldrb	r0, [r0, #16]
   b65ec:	461a      	mov	r2, r3
   b65ee:	4619      	mov	r1, r3
   b65f0:	f7ff bd68 	b.w	b60c4 <hal_i2c_begin>

000b65f4 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b65f4:	7c00      	ldrb	r0, [r0, #16]
   b65f6:	2200      	movs	r2, #0
   b65f8:	f7ff bd6c 	b.w	b60d4 <hal_i2c_begin_transmission>

000b65fc <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   b65fc:	b2c9      	uxtb	r1, r1
   b65fe:	f7ff bff9 	b.w	b65f4 <_ZN7TwoWire17beginTransmissionEh>

000b6602 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b6602:	7c00      	ldrb	r0, [r0, #16]
   b6604:	2200      	movs	r2, #0
   b6606:	f7ff bd6d 	b.w	b60e4 <hal_i2c_end_transmission>

000b660a <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b660a:	2101      	movs	r1, #1
   b660c:	f7ff bff9 	b.w	b6602 <_ZN7TwoWire15endTransmissionEh>

000b6610 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b6610:	4770      	bx	lr

000b6612 <_ZN9IPAddressD0Ev>:
   b6612:	b510      	push	{r4, lr}
   b6614:	2118      	movs	r1, #24
   b6616:	4604      	mov	r4, r0
   b6618:	f7fd fd3d 	bl	b4096 <_ZdlPvj>
   b661c:	4620      	mov	r0, r4
   b661e:	bd10      	pop	{r4, pc}

000b6620 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b6620:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b6622:	7d03      	ldrb	r3, [r0, #20]
   b6624:	2b06      	cmp	r3, #6
{
   b6626:	b08d      	sub	sp, #52	; 0x34
   b6628:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b662a:	f100 0704 	add.w	r7, r0, #4
   b662e:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b6632:	d012      	beq.n	b665a <_ZNK9IPAddress7printToER5Print+0x3a>
   b6634:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b6638:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b663c:	220a      	movs	r2, #10
   b663e:	4630      	mov	r0, r6
   b6640:	f000 f95d 	bl	b68fe <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b6644:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b6646:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b6648:	d019      	beq.n	b667e <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b664a:	2c00      	cmp	r4, #0
   b664c:	d0f4      	beq.n	b6638 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b664e:	212e      	movs	r1, #46	; 0x2e
   b6650:	4630      	mov	r0, r6
   b6652:	f000 f93b 	bl	b68cc <_ZN5Print5printEc>
   b6656:	4404      	add	r4, r0
   b6658:	e7ee      	b.n	b6638 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b665a:	232f      	movs	r3, #47	; 0x2f
   b665c:	466a      	mov	r2, sp
   b665e:	4639      	mov	r1, r7
   b6660:	200a      	movs	r0, #10
		buf[0] = 0;
   b6662:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b6666:	f7ff fd7d 	bl	b6164 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b666a:	4668      	mov	r0, sp
   b666c:	f000 fdb4 	bl	b71d8 <strlen>
   b6670:	6833      	ldr	r3, [r6, #0]
   b6672:	4602      	mov	r2, r0
   b6674:	68db      	ldr	r3, [r3, #12]
   b6676:	4669      	mov	r1, sp
   b6678:	4630      	mov	r0, r6
   b667a:	4798      	blx	r3
   b667c:	4604      	mov	r4, r0
    }
    return n;
}
   b667e:	4620      	mov	r0, r4
   b6680:	b00d      	add	sp, #52	; 0x34
   b6682:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b6684 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b6684:	b510      	push	{r4, lr}
   b6686:	4b05      	ldr	r3, [pc, #20]	; (b669c <_ZN9IPAddressC1Ev+0x18>)
   b6688:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b668a:	2211      	movs	r2, #17
   b668c:	f840 3b04 	str.w	r3, [r0], #4
   b6690:	2100      	movs	r1, #0
   b6692:	f000 fd6b 	bl	b716c <memset>
}
   b6696:	4620      	mov	r0, r4
   b6698:	bd10      	pop	{r4, pc}
   b669a:	bf00      	nop
   b669c:	000b82b8 	.word	0x000b82b8

000b66a0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b66a0:	4603      	mov	r3, r0
   b66a2:	4a07      	ldr	r2, [pc, #28]	; (b66c0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b66a4:	b510      	push	{r4, lr}
   b66a6:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b66aa:	f101 0210 	add.w	r2, r1, #16
   b66ae:	f851 4b04 	ldr.w	r4, [r1], #4
   b66b2:	f843 4b04 	str.w	r4, [r3], #4
   b66b6:	4291      	cmp	r1, r2
   b66b8:	d1f9      	bne.n	b66ae <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b66ba:	780a      	ldrb	r2, [r1, #0]
   b66bc:	701a      	strb	r2, [r3, #0]
}
   b66be:	bd10      	pop	{r4, pc}
   b66c0:	000b82b8 	.word	0x000b82b8

000b66c4 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b66c4:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b66c6:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b66ca:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b66ce:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b66d2:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b66d6:	2304      	movs	r3, #4
   b66d8:	6041      	str	r1, [r0, #4]
   b66da:	7503      	strb	r3, [r0, #20]
}
   b66dc:	bd10      	pop	{r4, pc}
	...

000b66e0 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b66e0:	b507      	push	{r0, r1, r2, lr}
   b66e2:	4b06      	ldr	r3, [pc, #24]	; (b66fc <_ZN9IPAddressC1EPKh+0x1c>)
   b66e4:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b66e6:	78cb      	ldrb	r3, [r1, #3]
   b66e8:	9300      	str	r3, [sp, #0]
   b66ea:	788b      	ldrb	r3, [r1, #2]
   b66ec:	784a      	ldrb	r2, [r1, #1]
   b66ee:	7809      	ldrb	r1, [r1, #0]
   b66f0:	f7ff ffe8 	bl	b66c4 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b66f4:	b003      	add	sp, #12
   b66f6:	f85d fb04 	ldr.w	pc, [sp], #4
   b66fa:	bf00      	nop
   b66fc:	000b82b8 	.word	0x000b82b8

000b6700 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b6700:	4b01      	ldr	r3, [pc, #4]	; (b6708 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b6702:	4a02      	ldr	r2, [pc, #8]	; (b670c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b6704:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b6706:	4770      	bx	lr
   b6708:	2003e6d0 	.word	0x2003e6d0
   b670c:	000b82c4 	.word	0x000b82c4

000b6710 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b6710:	2300      	movs	r3, #0
   b6712:	6840      	ldr	r0, [r0, #4]
   b6714:	461a      	mov	r2, r3
   b6716:	f7ff be31 	b.w	b637c <network_connect>

000b671a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b671a:	6840      	ldr	r0, [r0, #4]
   b671c:	2200      	movs	r2, #0
   b671e:	2102      	movs	r1, #2
   b6720:	f7ff be3c 	b.w	b639c <network_disconnect>

000b6724 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b6724:	2200      	movs	r2, #0
   b6726:	6840      	ldr	r0, [r0, #4]
   b6728:	4611      	mov	r1, r2
   b672a:	f7ff be2f 	b.w	b638c <network_connecting>

000b672e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b672e:	2200      	movs	r2, #0
   b6730:	6840      	ldr	r0, [r0, #4]
   b6732:	4611      	mov	r1, r2
   b6734:	f7ff be3a 	b.w	b63ac <network_ready>

000b6738 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b6738:	2300      	movs	r3, #0
   b673a:	6840      	ldr	r0, [r0, #4]
   b673c:	461a      	mov	r2, r3
   b673e:	4619      	mov	r1, r3
   b6740:	f7ff be3c 	b.w	b63bc <network_on>

000b6744 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b6744:	2300      	movs	r3, #0
   b6746:	6840      	ldr	r0, [r0, #4]
   b6748:	461a      	mov	r2, r3
   b674a:	4619      	mov	r1, r3
   b674c:	f7ff be3e 	b.w	b63cc <network_off>

000b6750 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b6750:	6840      	ldr	r0, [r0, #4]
   b6752:	2100      	movs	r1, #0
   b6754:	f7ff be62 	b.w	b641c <network_is_on>

000b6758 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b6758:	6840      	ldr	r0, [r0, #4]
   b675a:	2100      	movs	r1, #0
   b675c:	f7ff be66 	b.w	b642c <network_is_off>

000b6760 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b6760:	6840      	ldr	r0, [r0, #4]
   b6762:	2200      	movs	r2, #0
   b6764:	f081 0101 	eor.w	r1, r1, #1
   b6768:	f7ff be38 	b.w	b63dc <network_listen>

000b676c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b676c:	6840      	ldr	r0, [r0, #4]
   b676e:	2200      	movs	r2, #0
   b6770:	f7ff be44 	b.w	b63fc <network_set_listen_timeout>

000b6774 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b6774:	2200      	movs	r2, #0
   b6776:	6840      	ldr	r0, [r0, #4]
   b6778:	4611      	mov	r1, r2
   b677a:	f7ff be47 	b.w	b640c <network_get_listen_timeout>

000b677e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b677e:	2200      	movs	r2, #0
   b6780:	6840      	ldr	r0, [r0, #4]
   b6782:	4611      	mov	r1, r2
   b6784:	f7ff be32 	b.w	b63ec <network_listening>

000b6788 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b6788:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b678c:	b095      	sub	sp, #84	; 0x54
   b678e:	4614      	mov	r4, r2
   b6790:	460d      	mov	r5, r1
   b6792:	4607      	mov	r7, r0
    IPAddress addr;
   b6794:	f7ff ff76 	bl	b6684 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b6798:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b679a:	221c      	movs	r2, #28
   b679c:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b679e:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b67a0:	f000 fce4 	bl	b716c <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b67a4:	2340      	movs	r3, #64	; 0x40
   b67a6:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b67a8:	4620      	mov	r0, r4
   b67aa:	466b      	mov	r3, sp
   b67ac:	aa0c      	add	r2, sp, #48	; 0x30
   b67ae:	2100      	movs	r1, #0
   b67b0:	f7ff fce8 	bl	b6184 <netdb_getaddrinfo>
    if (!r) {
   b67b4:	4604      	mov	r4, r0
   b67b6:	2800      	cmp	r0, #0
   b67b8:	d14b      	bne.n	b6852 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b67ba:	4602      	mov	r2, r0
   b67bc:	2101      	movs	r1, #1
   b67be:	6868      	ldr	r0, [r5, #4]
   b67c0:	f7ff fdf4 	bl	b63ac <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b67c4:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b67c6:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b67c8:	4622      	mov	r2, r4
   b67ca:	6868      	ldr	r0, [r5, #4]
   b67cc:	f7ff fdee 	bl	b63ac <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b67d0:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b67d2:	4681      	mov	r9, r0
        bool ok = false;
   b67d4:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b67d6:	2e00      	cmp	r6, #0
   b67d8:	d03b      	beq.n	b6852 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b67da:	2900      	cmp	r1, #0
   b67dc:	d139      	bne.n	b6852 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b67de:	6873      	ldr	r3, [r6, #4]
   b67e0:	2b02      	cmp	r3, #2
   b67e2:	d003      	beq.n	b67ec <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b67e4:	2b0a      	cmp	r3, #10
   b67e6:	d011      	beq.n	b680c <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b67e8:	69f6      	ldr	r6, [r6, #28]
   b67ea:	e7f4      	b.n	b67d6 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b67ec:	f1b8 0f00 	cmp.w	r8, #0
   b67f0:	d0fa      	beq.n	b67e8 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b67f2:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b67f4:	a806      	add	r0, sp, #24
   b67f6:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b67f8:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b67fa:	f7ff ff71 	bl	b66e0 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b67fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6800:	1d3c      	adds	r4, r7, #4
   b6802:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6804:	682b      	ldr	r3, [r5, #0]
   b6806:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b6808:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b680a:	e7ed      	b.n	b67e8 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b680c:	f1b9 0f00 	cmp.w	r9, #0
   b6810:	d0ea      	beq.n	b67e8 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b6812:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b6814:	2210      	movs	r2, #16
   b6816:	a801      	add	r0, sp, #4
   b6818:	f000 fca8 	bl	b716c <memset>
                    a.v = 6;
   b681c:	2306      	movs	r3, #6
   b681e:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b6822:	ad01      	add	r5, sp, #4
   b6824:	f104 0308 	add.w	r3, r4, #8
   b6828:	3418      	adds	r4, #24
   b682a:	6818      	ldr	r0, [r3, #0]
   b682c:	6859      	ldr	r1, [r3, #4]
   b682e:	462a      	mov	r2, r5
   b6830:	c203      	stmia	r2!, {r0, r1}
   b6832:	3308      	adds	r3, #8
   b6834:	42a3      	cmp	r3, r4
   b6836:	4615      	mov	r5, r2
   b6838:	d1f7      	bne.n	b682a <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b683a:	a901      	add	r1, sp, #4
   b683c:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b683e:	ad07      	add	r5, sp, #28
   b6840:	f7ff ff2e 	bl	b66a0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b6844:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6846:	1d3c      	adds	r4, r7, #4
   b6848:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b684a:	682b      	ldr	r3, [r5, #0]
   b684c:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b684e:	4649      	mov	r1, r9
   b6850:	e7ca      	b.n	b67e8 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b6852:	9800      	ldr	r0, [sp, #0]
   b6854:	f7ff fc8e 	bl	b6174 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b6858:	4638      	mov	r0, r7
   b685a:	b015      	add	sp, #84	; 0x54
   b685c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b6860 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b6860:	4b02      	ldr	r3, [pc, #8]	; (b686c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b6862:	4a03      	ldr	r2, [pc, #12]	; (b6870 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b6864:	601a      	str	r2, [r3, #0]
   b6866:	2200      	movs	r2, #0
   b6868:	605a      	str	r2, [r3, #4]

} // spark
   b686a:	4770      	bx	lr
   b686c:	2003e6d4 	.word	0x2003e6d4
   b6870:	000b82d0 	.word	0x000b82d0

000b6874 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b6874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6876:	4606      	mov	r6, r0
   b6878:	460d      	mov	r5, r1
  size_t n = 0;
   b687a:	188f      	adds	r7, r1, r2
   b687c:	2400      	movs	r4, #0
  while (size--) {
   b687e:	42bd      	cmp	r5, r7
   b6880:	d00c      	beq.n	b689c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b6882:	6833      	ldr	r3, [r6, #0]
   b6884:	f815 1b01 	ldrb.w	r1, [r5], #1
   b6888:	689b      	ldr	r3, [r3, #8]
   b688a:	4630      	mov	r0, r6
   b688c:	4798      	blx	r3
     if (chunk>=0)
   b688e:	1e03      	subs	r3, r0, #0
   b6890:	db01      	blt.n	b6896 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b6892:	441c      	add	r4, r3
  while (size--) {
   b6894:	e7f3      	b.n	b687e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b6896:	2c00      	cmp	r4, #0
   b6898:	bf08      	it	eq
   b689a:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b689c:	4620      	mov	r0, r4
   b689e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b68a0 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b68a0:	b513      	push	{r0, r1, r4, lr}
   b68a2:	4604      	mov	r4, r0
    }
   b68a4:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b68a6:	b159      	cbz	r1, b68c0 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b68a8:	9101      	str	r1, [sp, #4]
   b68aa:	f000 fc95 	bl	b71d8 <strlen>
   b68ae:	6823      	ldr	r3, [r4, #0]
   b68b0:	9901      	ldr	r1, [sp, #4]
   b68b2:	68db      	ldr	r3, [r3, #12]
   b68b4:	4602      	mov	r2, r0
   b68b6:	4620      	mov	r0, r4
    }
   b68b8:	b002      	add	sp, #8
   b68ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b68be:	4718      	bx	r3
    }
   b68c0:	b002      	add	sp, #8
   b68c2:	bd10      	pop	{r4, pc}

000b68c4 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b68c4:	b508      	push	{r3, lr}
  return write(str);
   b68c6:	f7ff ffeb 	bl	b68a0 <_ZN5Print5writeEPKc>
}
   b68ca:	bd08      	pop	{r3, pc}

000b68cc <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b68cc:	6803      	ldr	r3, [r0, #0]
   b68ce:	689b      	ldr	r3, [r3, #8]
   b68d0:	4718      	bx	r3

000b68d2 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b68d2:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b68d4:	210d      	movs	r1, #13
{
   b68d6:	4605      	mov	r5, r0
  size_t n = print('\r');
   b68d8:	f7ff fff8 	bl	b68cc <_ZN5Print5printEc>
  n += print('\n');
   b68dc:	210a      	movs	r1, #10
  size_t n = print('\r');
   b68de:	4604      	mov	r4, r0
  n += print('\n');
   b68e0:	4628      	mov	r0, r5
   b68e2:	f7ff fff3 	bl	b68cc <_ZN5Print5printEc>
  return n;
}
   b68e6:	4420      	add	r0, r4
   b68e8:	bd38      	pop	{r3, r4, r5, pc}

000b68ea <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b68ea:	b538      	push	{r3, r4, r5, lr}
   b68ec:	4605      	mov	r5, r0
  return write(str);
   b68ee:	f7ff ffd7 	bl	b68a0 <_ZN5Print5writeEPKc>
   b68f2:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b68f4:	4628      	mov	r0, r5
   b68f6:	f7ff ffec 	bl	b68d2 <_ZN5Print7printlnEv>
  return n;
}
   b68fa:	4420      	add	r0, r4
   b68fc:	bd38      	pop	{r3, r4, r5, pc}

000b68fe <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b68fe:	b530      	push	{r4, r5, lr}
   b6900:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b6902:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b6904:	2a01      	cmp	r2, #1
  *str = '\0';
   b6906:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b690a:	bf98      	it	ls
   b690c:	220a      	movls	r2, #10
   b690e:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b6910:	460d      	mov	r5, r1
   b6912:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b6916:	fb01 5312 	mls	r3, r1, r2, r5
   b691a:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b691e:	2b09      	cmp	r3, #9
   b6920:	bf94      	ite	ls
   b6922:	3330      	addls	r3, #48	; 0x30
   b6924:	3337      	addhi	r3, #55	; 0x37
   b6926:	b2db      	uxtb	r3, r3
  } while(n);
   b6928:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b692a:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b692e:	d9ef      	bls.n	b6910 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b6930:	4621      	mov	r1, r4
   b6932:	f7ff ffb5 	bl	b68a0 <_ZN5Print5writeEPKc>
}
   b6936:	b00b      	add	sp, #44	; 0x2c
   b6938:	bd30      	pop	{r4, r5, pc}

000b693a <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b693a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b693e:	b086      	sub	sp, #24
   b6940:	af00      	add	r7, sp, #0
   b6942:	4605      	mov	r5, r0
   b6944:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b6946:	1d38      	adds	r0, r7, #4
   b6948:	2114      	movs	r1, #20
{
   b694a:	4614      	mov	r4, r2
    va_copy(args2, args);
   b694c:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b694e:	f7ff fd8d 	bl	b646c <vsnprintf>

    if (n<bufsize)
   b6952:	2813      	cmp	r0, #19
   b6954:	d80e      	bhi.n	b6974 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b6956:	1d39      	adds	r1, r7, #4
   b6958:	4628      	mov	r0, r5
   b695a:	f7ff ffa1 	bl	b68a0 <_ZN5Print5writeEPKc>
   b695e:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b6960:	b11e      	cbz	r6, b696a <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b6962:	4628      	mov	r0, r5
   b6964:	f7ff ffb5 	bl	b68d2 <_ZN5Print7printlnEv>
   b6968:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b696a:	4620      	mov	r0, r4
   b696c:	3718      	adds	r7, #24
   b696e:	46bd      	mov	sp, r7
   b6970:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b6974:	f100 0308 	add.w	r3, r0, #8
   b6978:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b697c:	46e8      	mov	r8, sp
        char bigger[n+1];
   b697e:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b6982:	4622      	mov	r2, r4
   b6984:	1c41      	adds	r1, r0, #1
   b6986:	683b      	ldr	r3, [r7, #0]
   b6988:	4668      	mov	r0, sp
   b698a:	f7ff fd6f 	bl	b646c <vsnprintf>
  return write(str);
   b698e:	4669      	mov	r1, sp
   b6990:	4628      	mov	r0, r5
   b6992:	f7ff ff85 	bl	b68a0 <_ZN5Print5writeEPKc>
   b6996:	4604      	mov	r4, r0
   b6998:	46c5      	mov	sp, r8
   b699a:	e7e1      	b.n	b6960 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b699c <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   b699c:	4b01      	ldr	r3, [pc, #4]	; (b69a4 <_GLOBAL__sub_I_RGB+0x8>)
   b699e:	2200      	movs	r2, #0
   b69a0:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b69a2:	4770      	bx	lr
   b69a4:	2003e6dc 	.word	0x2003e6dc

000b69a8 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   b69a8:	2100      	movs	r1, #0
   b69aa:	f7ff bc2b 	b.w	b6204 <hal_spi_release>

000b69ae <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   b69ae:	2100      	movs	r1, #0
   b69b0:	f7ff bc20 	b.w	b61f4 <hal_spi_acquire>

000b69b4 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b69b4:	b510      	push	{r4, lr}
   b69b6:	4604      	mov	r4, r0
   b69b8:	4608      	mov	r0, r1
{
    _spi = spi;
   b69ba:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b69bc:	f7ff fbfa 	bl	b61b4 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b69c0:	2300      	movs	r3, #0
   b69c2:	6063      	str	r3, [r4, #4]
}
   b69c4:	4620      	mov	r0, r4
   b69c6:	bd10      	pop	{r4, pc}

000b69c8 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   b69c8:	b513      	push	{r0, r1, r4, lr}
   b69ca:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   b69cc:	7800      	ldrb	r0, [r0, #0]
   b69ce:	f7ff ffee 	bl	b69ae <_ZN8SPIClass4lockEv.isra.0>
   b69d2:	b958      	cbnz	r0, b69ec <_ZN8SPIClass5beginEv+0x24>
   b69d4:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   b69d6:	9001      	str	r0, [sp, #4]
   b69d8:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b69dc:	f7ff fbda 	bl	b6194 <hal_spi_begin>
        unlock();
   b69e0:	9801      	ldr	r0, [sp, #4]
    }
}
   b69e2:	b002      	add	sp, #8
   b69e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b69e8:	f7ff bfde 	b.w	b69a8 <_ZN8SPIClass6unlockEv.isra.0>
   b69ec:	b002      	add	sp, #8
   b69ee:	bd10      	pop	{r4, pc}

000b69f0 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   b69f0:	7800      	ldrb	r0, [r0, #0]
   b69f2:	f7ff bfd9 	b.w	b69a8 <_ZN8SPIClass6unlockEv.isra.0>
	...

000b69f8 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   b69f8:	0840      	lsrs	r0, r0, #1
{
   b69fa:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   b69fc:	6018      	str	r0, [r3, #0]
   b69fe:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   b6a00:	6818      	ldr	r0, [r3, #0]
   b6a02:	4288      	cmp	r0, r1
   b6a04:	b2e5      	uxtb	r5, r4
   b6a06:	d906      	bls.n	b6a16 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   b6a08:	3401      	adds	r4, #1
   b6a0a:	2c08      	cmp	r4, #8
   b6a0c:	d002      	beq.n	b6a14 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   b6a0e:	0840      	lsrs	r0, r0, #1
   b6a10:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   b6a12:	e7f5      	b.n	b6a00 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   b6a14:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   b6a16:	4b02      	ldr	r3, [pc, #8]	; (b6a20 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   b6a18:	5d5b      	ldrb	r3, [r3, r5]
   b6a1a:	7013      	strb	r3, [r2, #0]
}
   b6a1c:	bd30      	pop	{r4, r5, pc}
   b6a1e:	bf00      	nop
   b6a20:	000b8304 	.word	0x000b8304

000b6a24 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   b6a24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6a28:	4606      	mov	r6, r0
   b6a2a:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   b6a2c:	7800      	ldrb	r0, [r0, #0]
{
   b6a2e:	460c      	mov	r4, r1
    CHECK(lock());
   b6a30:	f7ff ffbd 	bl	b69ae <_ZN8SPIClass4lockEv.isra.0>
   b6a34:	2800      	cmp	r0, #0
   b6a36:	db1b      	blt.n	b6a70 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   b6a38:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   b6a3a:	2214      	movs	r2, #20
   b6a3c:	2100      	movs	r1, #0
   b6a3e:	a809      	add	r0, sp, #36	; 0x24
   b6a40:	f000 fb94 	bl	b716c <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   b6a44:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   b6a46:	2200      	movs	r2, #0
   b6a48:	a909      	add	r1, sp, #36	; 0x24
   b6a4a:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   b6a4c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   b6a50:	f7ff fbc0 	bl	b61d4 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   b6a54:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   b6a58:	b113      	cbz	r3, b6a60 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   b6a5a:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   b6a5e:	b155      	cbz	r5, b6a76 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   b6a60:	2700      	movs	r7, #0
   b6a62:	46b9      	mov	r9, r7
   b6a64:	46b8      	mov	r8, r7
   b6a66:	2501      	movs	r5, #1
    if (default_ && other.default_)
   b6a68:	7923      	ldrb	r3, [r4, #4]
   b6a6a:	b15d      	cbz	r5, b6a84 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   b6a6c:	b1c3      	cbz	r3, b6aa0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   b6a6e:	2000      	movs	r0, #0
}
   b6a70:	b00f      	add	sp, #60	; 0x3c
   b6a72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   b6a76:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   b6a7a:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   b6a7e:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   b6a82:	e7f1      	b.n	b6a68 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   b6a84:	2b00      	cmp	r3, #0
   b6a86:	d135      	bne.n	b6af4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   b6a88:	68a3      	ldr	r3, [r4, #8]
   b6a8a:	4543      	cmp	r3, r8
   b6a8c:	d108      	bne.n	b6aa0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   b6a8e:	f88d 9020 	strb.w	r9, [sp, #32]
   b6a92:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b6a96:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b6a9a:	89a3      	ldrh	r3, [r4, #12]
   b6a9c:	429a      	cmp	r2, r3
   b6a9e:	d0e6      	beq.n	b6a6e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   b6aa0:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b6aa2:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   b6aa4:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b6aa8:	980a      	ldr	r0, [sp, #40]	; 0x28
   b6aaa:	ab04      	add	r3, sp, #16
   b6aac:	f10d 020f 	add.w	r2, sp, #15
   b6ab0:	f7ff ffa2 	bl	b69f8 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   b6ab4:	7921      	ldrb	r1, [r4, #4]
   b6ab6:	b985      	cbnz	r5, b6ada <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   b6ab8:	b989      	cbnz	r1, b6ade <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b6aba:	68a3      	ldr	r3, [r4, #8]
   b6abc:	4543      	cmp	r3, r8
   b6abe:	d30e      	bcc.n	b6ade <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   b6ac0:	f88d 9020 	strb.w	r9, [sp, #32]
   b6ac4:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b6ac8:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b6acc:	89a3      	ldrh	r3, [r4, #12]
   b6ace:	429a      	cmp	r2, r3
   b6ad0:	d105      	bne.n	b6ade <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   b6ad2:	9b04      	ldr	r3, [sp, #16]
   b6ad4:	4543      	cmp	r3, r8
   b6ad6:	d102      	bne.n	b6ade <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b6ad8:	e7c9      	b.n	b6a6e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   b6ada:	2900      	cmp	r1, #0
   b6adc:	d1f9      	bne.n	b6ad2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   b6ade:	2300      	movs	r3, #0
   b6ae0:	9301      	str	r3, [sp, #4]
   b6ae2:	7b63      	ldrb	r3, [r4, #13]
   b6ae4:	9300      	str	r3, [sp, #0]
   b6ae6:	f89d 200f 	ldrb.w	r2, [sp, #15]
   b6aea:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   b6aec:	7830      	ldrb	r0, [r6, #0]
   b6aee:	f7ff fb79 	bl	b61e4 <hal_spi_set_settings>
   b6af2:	e7bc      	b.n	b6a6e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   b6af4:	e9cd 5500 	strd	r5, r5, [sp]
   b6af8:	462b      	mov	r3, r5
   b6afa:	462a      	mov	r2, r5
   b6afc:	2101      	movs	r1, #1
   b6afe:	e7f5      	b.n	b6aec <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000b6b00 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   b6b00:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   b6b02:	7800      	ldrb	r0, [r0, #0]
   b6b04:	f7ff fb4e 	bl	b61a4 <hal_spi_transfer>
}
   b6b08:	b2c0      	uxtb	r0, r0
   b6b0a:	bd08      	pop	{r3, pc}

000b6b0c <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b6b0c:	b510      	push	{r4, lr}
   b6b0e:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b6b10:	6800      	ldr	r0, [r0, #0]
   b6b12:	b108      	cbz	r0, b6b18 <_ZN6String10invalidateEv+0xc>
   b6b14:	f7ff fc9a 	bl	b644c <free>
	buffer = NULL;
   b6b18:	2300      	movs	r3, #0
	capacity = len = 0;
   b6b1a:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b6b1e:	6023      	str	r3, [r4, #0]
}
   b6b20:	bd10      	pop	{r4, pc}

000b6b22 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b6b22:	b538      	push	{r3, r4, r5, lr}
   b6b24:	4604      	mov	r4, r0
   b6b26:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b6b28:	6800      	ldr	r0, [r0, #0]
   b6b2a:	3101      	adds	r1, #1
   b6b2c:	f7ff fc96 	bl	b645c <realloc>
	if (newbuffer) {
   b6b30:	b110      	cbz	r0, b6b38 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b6b32:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b6b36:	2001      	movs	r0, #1
	}
	return 0;
}
   b6b38:	bd38      	pop	{r3, r4, r5, pc}

000b6b3a <_ZN6String7reserveEj>:
{
   b6b3a:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b6b3c:	6803      	ldr	r3, [r0, #0]
{
   b6b3e:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b6b40:	b123      	cbz	r3, b6b4c <_ZN6String7reserveEj+0x12>
   b6b42:	6843      	ldr	r3, [r0, #4]
   b6b44:	428b      	cmp	r3, r1
   b6b46:	d301      	bcc.n	b6b4c <_ZN6String7reserveEj+0x12>
   b6b48:	2001      	movs	r0, #1
}
   b6b4a:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b6b4c:	4620      	mov	r0, r4
   b6b4e:	f7ff ffe8 	bl	b6b22 <_ZN6String12changeBufferEj>
   b6b52:	2800      	cmp	r0, #0
   b6b54:	d0f9      	beq.n	b6b4a <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b6b56:	68a3      	ldr	r3, [r4, #8]
   b6b58:	2b00      	cmp	r3, #0
   b6b5a:	d1f5      	bne.n	b6b48 <_ZN6String7reserveEj+0xe>
   b6b5c:	6822      	ldr	r2, [r4, #0]
   b6b5e:	7013      	strb	r3, [r2, #0]
   b6b60:	e7f2      	b.n	b6b48 <_ZN6String7reserveEj+0xe>

000b6b62 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b6b62:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b6b64:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b6b66:	4611      	mov	r1, r2
   b6b68:	9201      	str	r2, [sp, #4]
{
   b6b6a:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b6b6c:	f7ff ffe5 	bl	b6b3a <_ZN6String7reserveEj>
   b6b70:	9a01      	ldr	r2, [sp, #4]
   b6b72:	b928      	cbnz	r0, b6b80 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b6b74:	4620      	mov	r0, r4
   b6b76:	f7ff ffc9 	bl	b6b0c <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b6b7a:	4620      	mov	r0, r4
   b6b7c:	b003      	add	sp, #12
   b6b7e:	bd30      	pop	{r4, r5, pc}
	len = length;
   b6b80:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b6b82:	4629      	mov	r1, r5
   b6b84:	6820      	ldr	r0, [r4, #0]
   b6b86:	f000 fae3 	bl	b7150 <memcpy>
	buffer[len] = 0;
   b6b8a:	6822      	ldr	r2, [r4, #0]
   b6b8c:	68a3      	ldr	r3, [r4, #8]
   b6b8e:	2100      	movs	r1, #0
   b6b90:	54d1      	strb	r1, [r2, r3]
	return *this;
   b6b92:	e7f2      	b.n	b6b7a <_ZN6String4copyEPKcj+0x18>

000b6b94 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b6b94:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b6b96:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b6b98:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b6b9c:	4604      	mov	r4, r0
	len = 0;
   b6b9e:	6083      	str	r3, [r0, #8]
	flags = 0;
   b6ba0:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b6ba2:	b141      	cbz	r1, b6bb6 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b6ba4:	4608      	mov	r0, r1
   b6ba6:	9101      	str	r1, [sp, #4]
   b6ba8:	f000 fb16 	bl	b71d8 <strlen>
   b6bac:	9901      	ldr	r1, [sp, #4]
   b6bae:	4602      	mov	r2, r0
   b6bb0:	4620      	mov	r0, r4
   b6bb2:	f7ff ffd6 	bl	b6b62 <_ZN6String4copyEPKcj>
}
   b6bb6:	4620      	mov	r0, r4
   b6bb8:	b002      	add	sp, #8
   b6bba:	bd10      	pop	{r4, pc}

000b6bbc <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b6bbc:	4b05      	ldr	r3, [pc, #20]	; (b6bd4 <_GLOBAL__sub_I_System+0x18>)
   b6bbe:	2202      	movs	r2, #2
   b6bc0:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b6bc2:	4b05      	ldr	r3, [pc, #20]	; (b6bd8 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b6bc4:	4a05      	ldr	r2, [pc, #20]	; (b6bdc <_GLOBAL__sub_I_System+0x20>)
   b6bc6:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b6bc8:	2000      	movs	r0, #0
   b6bca:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b6bce:	f7ff bba1 	b.w	b6314 <set_system_mode>
   b6bd2:	bf00      	nop
   b6bd4:	2003e6f8 	.word	0x2003e6f8
   b6bd8:	2003e6ec 	.word	0x2003e6ec
   b6bdc:	ffff0000 	.word	0xffff0000

000b6be0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b6be0:	4b02      	ldr	r3, [pc, #8]	; (b6bec <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b6be2:	681a      	ldr	r2, [r3, #0]
   b6be4:	4b02      	ldr	r3, [pc, #8]	; (b6bf0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b6be6:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b6be8:	4770      	bx	lr
   b6bea:	bf00      	nop
   b6bec:	2003e5b0 	.word	0x2003e5b0
   b6bf0:	2003e6fc 	.word	0x2003e6fc

000b6bf4 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b6bf4:	4770      	bx	lr

000b6bf6 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b6bf6:	7441      	strb	r1, [r0, #17]
}
   b6bf8:	4770      	bx	lr

000b6bfa <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b6bfa:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b6bfc:	7c00      	ldrb	r0, [r0, #16]
   b6bfe:	f7ff fb39 	bl	b6274 <hal_usart_available_data_for_write>
}
   b6c02:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6c06:	bd08      	pop	{r3, pc}

000b6c08 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b6c08:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b6c0a:	7c00      	ldrb	r0, [r0, #16]
   b6c0c:	f7ff fb0a 	bl	b6224 <hal_usart_available>
}
   b6c10:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6c14:	bd08      	pop	{r3, pc}

000b6c16 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b6c16:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b6c18:	7c00      	ldrb	r0, [r0, #16]
   b6c1a:	f7ff fb13 	bl	b6244 <hal_usart_peek>
}
   b6c1e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6c22:	bd08      	pop	{r3, pc}

000b6c24 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b6c24:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b6c26:	7c00      	ldrb	r0, [r0, #16]
   b6c28:	f7ff fb04 	bl	b6234 <hal_usart_read>
}
   b6c2c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6c30:	bd08      	pop	{r3, pc}

000b6c32 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b6c32:	7c00      	ldrb	r0, [r0, #16]
   b6c34:	f7ff bb0e 	b.w	b6254 <hal_usart_flush>

000b6c38 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b6c38:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b6c3a:	7c45      	ldrb	r5, [r0, #17]
{
   b6c3c:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b6c3e:	b12d      	cbz	r5, b6c4c <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b6c40:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b6c42:	b003      	add	sp, #12
   b6c44:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b6c48:	f7ff bae4 	b.w	b6214 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b6c4c:	7c00      	ldrb	r0, [r0, #16]
   b6c4e:	9101      	str	r1, [sp, #4]
   b6c50:	f7ff fb10 	bl	b6274 <hal_usart_available_data_for_write>
   b6c54:	2800      	cmp	r0, #0
   b6c56:	9901      	ldr	r1, [sp, #4]
   b6c58:	dcf2      	bgt.n	b6c40 <_ZN11USARTSerial5writeEh+0x8>
}
   b6c5a:	4628      	mov	r0, r5
   b6c5c:	b003      	add	sp, #12
   b6c5e:	bd30      	pop	{r4, r5, pc}

000b6c60 <_ZN11USARTSerialD0Ev>:
   b6c60:	b510      	push	{r4, lr}
   b6c62:	2114      	movs	r1, #20
   b6c64:	4604      	mov	r4, r0
   b6c66:	f7fd fa16 	bl	b4096 <_ZdlPvj>
   b6c6a:	4620      	mov	r0, r4
   b6c6c:	bd10      	pop	{r4, pc}
	...

000b6c70 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b6c70:	b510      	push	{r4, lr}
   b6c72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6c76:	4604      	mov	r4, r0
   b6c78:	4608      	mov	r0, r1
   b6c7a:	4611      	mov	r1, r2
   b6c7c:	2200      	movs	r2, #0
   b6c7e:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b6c82:	4b04      	ldr	r3, [pc, #16]	; (b6c94 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b6c84:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b6c86:	2301      	movs	r3, #1
  _serial = serial;
   b6c88:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b6c8a:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b6c8c:	f7ff fafa 	bl	b6284 <hal_usart_init_ex>
}
   b6c90:	4620      	mov	r0, r4
   b6c92:	bd10      	pop	{r4, pc}
   b6c94:	000b8330 	.word	0x000b8330

000b6c98 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b6c98:	7441      	strb	r1, [r0, #17]
}
   b6c9a:	4770      	bx	lr

000b6c9c <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b6c9c:	4770      	bx	lr

000b6c9e <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b6c9e:	4770      	bx	lr

000b6ca0 <_ZN9USBSerial4readEv>:
{
   b6ca0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b6ca2:	2100      	movs	r1, #0
   b6ca4:	7c00      	ldrb	r0, [r0, #16]
   b6ca6:	f7ff fb15 	bl	b62d4 <HAL_USB_USART_Receive_Data>
}
   b6caa:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6cae:	bd08      	pop	{r3, pc}

000b6cb0 <_ZN9USBSerial4peekEv>:
{
   b6cb0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b6cb2:	2101      	movs	r1, #1
   b6cb4:	7c00      	ldrb	r0, [r0, #16]
   b6cb6:	f7ff fb0d 	bl	b62d4 <HAL_USB_USART_Receive_Data>
}
   b6cba:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6cbe:	bd08      	pop	{r3, pc}

000b6cc0 <_ZN9USBSerial17availableForWriteEv>:
{
   b6cc0:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b6cc2:	7c00      	ldrb	r0, [r0, #16]
   b6cc4:	f7ff fafe 	bl	b62c4 <HAL_USB_USART_Available_Data_For_Write>
}
   b6cc8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6ccc:	bd08      	pop	{r3, pc}

000b6cce <_ZN9USBSerial9availableEv>:
{
   b6cce:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b6cd0:	7c00      	ldrb	r0, [r0, #16]
   b6cd2:	f7ff faef 	bl	b62b4 <HAL_USB_USART_Available_Data>
}
   b6cd6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6cda:	bd08      	pop	{r3, pc}

000b6cdc <_ZN9USBSerial5writeEh>:
{
   b6cdc:	b513      	push	{r0, r1, r4, lr}
   b6cde:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b6ce0:	7c00      	ldrb	r0, [r0, #16]
{
   b6ce2:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b6ce4:	f7ff faee 	bl	b62c4 <HAL_USB_USART_Available_Data_For_Write>
   b6ce8:	2800      	cmp	r0, #0
   b6cea:	9901      	ldr	r1, [sp, #4]
   b6cec:	dc01      	bgt.n	b6cf2 <_ZN9USBSerial5writeEh+0x16>
   b6cee:	7c60      	ldrb	r0, [r4, #17]
   b6cf0:	b120      	cbz	r0, b6cfc <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b6cf2:	7c20      	ldrb	r0, [r4, #16]
   b6cf4:	f7ff faf6 	bl	b62e4 <HAL_USB_USART_Send_Data>
   b6cf8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b6cfc:	b002      	add	sp, #8
   b6cfe:	bd10      	pop	{r4, pc}

000b6d00 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b6d00:	7c00      	ldrb	r0, [r0, #16]
   b6d02:	f7ff baf7 	b.w	b62f4 <HAL_USB_USART_Flush_Data>

000b6d06 <_ZN9USBSerialD0Ev>:
   b6d06:	b510      	push	{r4, lr}
   b6d08:	2114      	movs	r1, #20
   b6d0a:	4604      	mov	r4, r0
   b6d0c:	f7fd f9c3 	bl	b4096 <_ZdlPvj>
   b6d10:	4620      	mov	r0, r4
   b6d12:	bd10      	pop	{r4, pc}

000b6d14 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b6d14:	b510      	push	{r4, lr}
   b6d16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6d1a:	4604      	mov	r4, r0
   b6d1c:	4608      	mov	r0, r1
   b6d1e:	2100      	movs	r1, #0
   b6d20:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b6d24:	4b04      	ldr	r3, [pc, #16]	; (b6d38 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b6d26:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b6d28:	2301      	movs	r3, #1
  _serial = serial;
   b6d2a:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b6d2c:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b6d2e:	4611      	mov	r1, r2
   b6d30:	f7ff fab0 	bl	b6294 <HAL_USB_USART_Init>
}
   b6d34:	4620      	mov	r0, r4
   b6d36:	bd10      	pop	{r4, pc}
   b6d38:	000b8360 	.word	0x000b8360

000b6d3c <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b6d3c:	7c00      	ldrb	r0, [r0, #16]
   b6d3e:	2200      	movs	r2, #0
   b6d40:	f7ff bab0 	b.w	b62a4 <HAL_USB_USART_Begin>

000b6d44 <_Z19acquireSerialBufferv>:
{
   b6d44:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b6d46:	2214      	movs	r2, #20
{
   b6d48:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b6d4a:	2100      	movs	r1, #0
   b6d4c:	f000 fa0e 	bl	b716c <memset>
}
   b6d50:	4620      	mov	r0, r4
   b6d52:	bd10      	pop	{r4, pc}

000b6d54 <_Z16_fetch_usbserialv>:
{
   b6d54:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b6d56:	4c0f      	ldr	r4, [pc, #60]	; (b6d94 <_Z16_fetch_usbserialv+0x40>)
{
   b6d58:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b6d5a:	a803      	add	r0, sp, #12
   b6d5c:	f7ff fff2 	bl	b6d44 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b6d60:	7821      	ldrb	r1, [r4, #0]
   b6d62:	f3bf 8f5b 	dmb	ish
   b6d66:	f011 0101 	ands.w	r1, r1, #1
   b6d6a:	d10f      	bne.n	b6d8c <_Z16_fetch_usbserialv+0x38>
   b6d6c:	4620      	mov	r0, r4
   b6d6e:	9101      	str	r1, [sp, #4]
   b6d70:	f7fd f99e 	bl	b40b0 <__cxa_guard_acquire>
   b6d74:	9901      	ldr	r1, [sp, #4]
   b6d76:	b148      	cbz	r0, b6d8c <_Z16_fetch_usbserialv+0x38>
   b6d78:	aa03      	add	r2, sp, #12
   b6d7a:	4807      	ldr	r0, [pc, #28]	; (b6d98 <_Z16_fetch_usbserialv+0x44>)
   b6d7c:	f7ff ffca 	bl	b6d14 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b6d80:	4620      	mov	r0, r4
   b6d82:	f7fd f99a 	bl	b40ba <__cxa_guard_release>
   b6d86:	4805      	ldr	r0, [pc, #20]	; (b6d9c <_Z16_fetch_usbserialv+0x48>)
   b6d88:	f000 f9dc 	bl	b7144 <atexit>
	return _usbserial;
}
   b6d8c:	4802      	ldr	r0, [pc, #8]	; (b6d98 <_Z16_fetch_usbserialv+0x44>)
   b6d8e:	b008      	add	sp, #32
   b6d90:	bd10      	pop	{r4, pc}
   b6d92:	bf00      	nop
   b6d94:	2003e700 	.word	0x2003e700
   b6d98:	2003e704 	.word	0x2003e704
   b6d9c:	000b6c9d 	.word	0x000b6c9d

000b6da0 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b6da0:	2200      	movs	r2, #0
   b6da2:	6840      	ldr	r0, [r0, #4]
   b6da4:	4611      	mov	r1, r2
   b6da6:	f7ff bb01 	b.w	b63ac <network_ready>

000b6daa <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b6daa:	2200      	movs	r2, #0
   b6dac:	6840      	ldr	r0, [r0, #4]
   b6dae:	4611      	mov	r1, r2
   b6db0:	f7ff bb1c 	b.w	b63ec <network_listening>

000b6db4 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b6db4:	2200      	movs	r2, #0
   b6db6:	6840      	ldr	r0, [r0, #4]
   b6db8:	4611      	mov	r1, r2
   b6dba:	f7ff bb27 	b.w	b640c <network_get_listen_timeout>

000b6dbe <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b6dbe:	6840      	ldr	r0, [r0, #4]
   b6dc0:	2200      	movs	r2, #0
   b6dc2:	f7ff bb1b 	b.w	b63fc <network_set_listen_timeout>

000b6dc6 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b6dc6:	6840      	ldr	r0, [r0, #4]
   b6dc8:	2200      	movs	r2, #0
   b6dca:	f081 0101 	eor.w	r1, r1, #1
   b6dce:	f7ff bb05 	b.w	b63dc <network_listen>

000b6dd2 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b6dd2:	2300      	movs	r3, #0
   b6dd4:	6840      	ldr	r0, [r0, #4]
   b6dd6:	461a      	mov	r2, r3
   b6dd8:	4619      	mov	r1, r3
   b6dda:	f7ff baf7 	b.w	b63cc <network_off>

000b6dde <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b6dde:	2300      	movs	r3, #0
   b6de0:	6840      	ldr	r0, [r0, #4]
   b6de2:	461a      	mov	r2, r3
   b6de4:	4619      	mov	r1, r3
   b6de6:	f7ff bae9 	b.w	b63bc <network_on>

000b6dea <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b6dea:	2200      	movs	r2, #0
   b6dec:	6840      	ldr	r0, [r0, #4]
   b6dee:	4611      	mov	r1, r2
   b6df0:	f7ff bacc 	b.w	b638c <network_connecting>

000b6df4 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b6df4:	6840      	ldr	r0, [r0, #4]
   b6df6:	2200      	movs	r2, #0
   b6df8:	2102      	movs	r1, #2
   b6dfa:	f7ff bacf 	b.w	b639c <network_disconnect>

000b6dfe <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b6dfe:	2300      	movs	r3, #0
   b6e00:	6840      	ldr	r0, [r0, #4]
   b6e02:	461a      	mov	r2, r3
   b6e04:	f7ff baba 	b.w	b637c <network_connect>

000b6e08 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b6e08:	4b02      	ldr	r3, [pc, #8]	; (b6e14 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b6e0a:	2204      	movs	r2, #4
   b6e0c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b6e0e:	4a02      	ldr	r2, [pc, #8]	; (b6e18 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b6e10:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b6e12:	4770      	bx	lr
   b6e14:	2003e718 	.word	0x2003e718
   b6e18:	000b8390 	.word	0x000b8390

000b6e1c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b6e1c:	4b01      	ldr	r3, [pc, #4]	; (b6e24 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b6e1e:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b6e20:	4770      	bx	lr
   b6e22:	bf00      	nop
   b6e24:	2003e5b4 	.word	0x2003e5b4

000b6e28 <serialEventRun>:
{
   b6e28:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b6e2a:	4b0b      	ldr	r3, [pc, #44]	; (b6e58 <serialEventRun+0x30>)
   b6e2c:	b143      	cbz	r3, b6e40 <serialEventRun+0x18>
   b6e2e:	f7ff ff91 	bl	b6d54 <_Z16_fetch_usbserialv>
   b6e32:	6803      	ldr	r3, [r0, #0]
   b6e34:	691b      	ldr	r3, [r3, #16]
   b6e36:	4798      	blx	r3
   b6e38:	2800      	cmp	r0, #0
   b6e3a:	dd01      	ble.n	b6e40 <serialEventRun+0x18>
        serialEvent();
   b6e3c:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b6e40:	4b06      	ldr	r3, [pc, #24]	; (b6e5c <serialEventRun+0x34>)
   b6e42:	b143      	cbz	r3, b6e56 <serialEventRun+0x2e>
   b6e44:	f000 f958 	bl	b70f8 <_Z22__fetch_global_Serial1v>
   b6e48:	6803      	ldr	r3, [r0, #0]
   b6e4a:	691b      	ldr	r3, [r3, #16]
   b6e4c:	4798      	blx	r3
   b6e4e:	2800      	cmp	r0, #0
   b6e50:	dd01      	ble.n	b6e56 <serialEventRun+0x2e>
        serialEvent1();
   b6e52:	f3af 8000 	nop.w
}
   b6e56:	bd08      	pop	{r3, pc}
	...

000b6e60 <_post_loop>:
{
   b6e60:	b508      	push	{r3, lr}
	serialEventRun();
   b6e62:	f7ff ffe1 	bl	b6e28 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b6e66:	f7ff f8fd 	bl	b6064 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b6e6a:	4b01      	ldr	r3, [pc, #4]	; (b6e70 <_post_loop+0x10>)
   b6e6c:	6018      	str	r0, [r3, #0]
}
   b6e6e:	bd08      	pop	{r3, pc}
   b6e70:	2003e728 	.word	0x2003e728

000b6e74 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b6e74:	4805      	ldr	r0, [pc, #20]	; (b6e8c <_Z33system_initialize_user_backup_ramv+0x18>)
   b6e76:	4a06      	ldr	r2, [pc, #24]	; (b6e90 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b6e78:	4906      	ldr	r1, [pc, #24]	; (b6e94 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b6e7a:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b6e7c:	1a12      	subs	r2, r2, r0
   b6e7e:	f000 f967 	bl	b7150 <memcpy>
    __backup_sram_signature = signature;
   b6e82:	4b05      	ldr	r3, [pc, #20]	; (b6e98 <_Z33system_initialize_user_backup_ramv+0x24>)
   b6e84:	4a05      	ldr	r2, [pc, #20]	; (b6e9c <_Z33system_initialize_user_backup_ramv+0x28>)
   b6e86:	601a      	str	r2, [r3, #0]
}
   b6e88:	bd08      	pop	{r3, pc}
   b6e8a:	bf00      	nop
   b6e8c:	2003f400 	.word	0x2003f400
   b6e90:	2003f404 	.word	0x2003f404
   b6e94:	000b84c0 	.word	0x000b84c0
   b6e98:	2003f400 	.word	0x2003f400
   b6e9c:	9a271c1e 	.word	0x9a271c1e

000b6ea0 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b6ea0:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b6ea2:	2300      	movs	r3, #0
   b6ea4:	9300      	str	r3, [sp, #0]
   b6ea6:	461a      	mov	r2, r3
   b6ea8:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b6eac:	f7ff fa4c 	bl	b6348 <system_ctrl_set_result>
}
   b6eb0:	b003      	add	sp, #12
   b6eb2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b6eb8 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b6eb8:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b6eba:	8843      	ldrh	r3, [r0, #2]
   b6ebc:	2b0a      	cmp	r3, #10
   b6ebe:	d008      	beq.n	b6ed2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b6ec0:	2b50      	cmp	r3, #80	; 0x50
   b6ec2:	d10b      	bne.n	b6edc <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b6ec4:	4b09      	ldr	r3, [pc, #36]	; (b6eec <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b6ec6:	681b      	ldr	r3, [r3, #0]
   b6ec8:	b14b      	cbz	r3, b6ede <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b6eca:	b003      	add	sp, #12
   b6ecc:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b6ed0:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b6ed2:	f7ff ffe5 	bl	b6ea0 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b6ed6:	b003      	add	sp, #12
   b6ed8:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b6edc:	2300      	movs	r3, #0
   b6ede:	9300      	str	r3, [sp, #0]
   b6ee0:	461a      	mov	r2, r3
   b6ee2:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b6ee6:	f7ff fa2f 	bl	b6348 <system_ctrl_set_result>
}
   b6eea:	e7f4      	b.n	b6ed6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b6eec:	2003e724 	.word	0x2003e724

000b6ef0 <module_user_init_hook>:
{
   b6ef0:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b6ef2:	4812      	ldr	r0, [pc, #72]	; (b6f3c <module_user_init_hook+0x4c>)
   b6ef4:	2100      	movs	r1, #0
   b6ef6:	f7ff fac9 	bl	b648c <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b6efa:	4b11      	ldr	r3, [pc, #68]	; (b6f40 <module_user_init_hook+0x50>)
   b6efc:	681a      	ldr	r2, [r3, #0]
   b6efe:	4b11      	ldr	r3, [pc, #68]	; (b6f44 <module_user_init_hook+0x54>)
   b6f00:	429a      	cmp	r2, r3
   b6f02:	4b11      	ldr	r3, [pc, #68]	; (b6f48 <module_user_init_hook+0x58>)
   b6f04:	bf0c      	ite	eq
   b6f06:	2201      	moveq	r2, #1
   b6f08:	2200      	movne	r2, #0
   b6f0a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b6f0c:	d001      	beq.n	b6f12 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b6f0e:	f7ff ffb1 	bl	b6e74 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b6f12:	f7ff f897 	bl	b6044 <HAL_RNG_GetRandomNumber>
   b6f16:	4604      	mov	r4, r0
    srand(seed);
   b6f18:	f000 f930 	bl	b717c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b6f1c:	4b0b      	ldr	r3, [pc, #44]	; (b6f4c <module_user_init_hook+0x5c>)
   b6f1e:	b113      	cbz	r3, b6f26 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b6f20:	4620      	mov	r0, r4
   b6f22:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b6f26:	2100      	movs	r1, #0
   b6f28:	4808      	ldr	r0, [pc, #32]	; (b6f4c <module_user_init_hook+0x5c>)
   b6f2a:	f7ff fa17 	bl	b635c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b6f2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b6f32:	4807      	ldr	r0, [pc, #28]	; (b6f50 <module_user_init_hook+0x60>)
   b6f34:	2100      	movs	r1, #0
   b6f36:	f7ff b9fd 	b.w	b6334 <system_ctrl_set_app_request_handler>
   b6f3a:	bf00      	nop
   b6f3c:	000b6e1d 	.word	0x000b6e1d
   b6f40:	2003f400 	.word	0x2003f400
   b6f44:	9a271c1e 	.word	0x9a271c1e
   b6f48:	2003e720 	.word	0x2003e720
   b6f4c:	00000000 	.word	0x00000000
   b6f50:	000b6eb9 	.word	0x000b6eb9

000b6f54 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b6f54:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b6f56:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b6f58:	d902      	bls.n	b6f60 <pinAvailable+0xc>
    return false;
   b6f5a:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b6f5c:	b002      	add	sp, #8
   b6f5e:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b6f60:	f1a0 030b 	sub.w	r3, r0, #11
   b6f64:	2b02      	cmp	r3, #2
   b6f66:	d81a      	bhi.n	b6f9e <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b6f68:	4c17      	ldr	r4, [pc, #92]	; (b6fc8 <pinAvailable+0x74>)
   b6f6a:	7821      	ldrb	r1, [r4, #0]
   b6f6c:	f3bf 8f5b 	dmb	ish
   b6f70:	f011 0101 	ands.w	r1, r1, #1
   b6f74:	d10b      	bne.n	b6f8e <pinAvailable+0x3a>
   b6f76:	4620      	mov	r0, r4
   b6f78:	9101      	str	r1, [sp, #4]
   b6f7a:	f7fd f899 	bl	b40b0 <__cxa_guard_acquire>
   b6f7e:	9901      	ldr	r1, [sp, #4]
   b6f80:	b128      	cbz	r0, b6f8e <pinAvailable+0x3a>
   b6f82:	4812      	ldr	r0, [pc, #72]	; (b6fcc <pinAvailable+0x78>)
   b6f84:	f7ff fd16 	bl	b69b4 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b6f88:	4620      	mov	r0, r4
   b6f8a:	f7fd f896 	bl	b40ba <__cxa_guard_release>
   b6f8e:	4b0f      	ldr	r3, [pc, #60]	; (b6fcc <pinAvailable+0x78>)
   b6f90:	7818      	ldrb	r0, [r3, #0]
   b6f92:	f7ff f917 	bl	b61c4 <hal_spi_is_enabled>
   b6f96:	2800      	cmp	r0, #0
   b6f98:	d1df      	bne.n	b6f5a <pinAvailable+0x6>
  return true; // 'pin' is available
   b6f9a:	2001      	movs	r0, #1
   b6f9c:	e7de      	b.n	b6f5c <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b6f9e:	2801      	cmp	r0, #1
   b6fa0:	d809      	bhi.n	b6fb6 <pinAvailable+0x62>
   b6fa2:	f000 f869 	bl	b7078 <_Z19__fetch_global_Wirev>
   b6fa6:	2100      	movs	r1, #0
   b6fa8:	7c00      	ldrb	r0, [r0, #16]
   b6faa:	f7ff f8cb 	bl	b6144 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b6fae:	f080 0001 	eor.w	r0, r0, #1
   b6fb2:	b2c0      	uxtb	r0, r0
   b6fb4:	e7d2      	b.n	b6f5c <pinAvailable+0x8>
   b6fb6:	3809      	subs	r0, #9
   b6fb8:	2801      	cmp	r0, #1
   b6fba:	d8ee      	bhi.n	b6f9a <pinAvailable+0x46>
   b6fbc:	f000 f89c 	bl	b70f8 <_Z22__fetch_global_Serial1v>
   b6fc0:	7c00      	ldrb	r0, [r0, #16]
   b6fc2:	f7ff f94f 	bl	b6264 <hal_usart_is_enabled>
   b6fc6:	e7f2      	b.n	b6fae <pinAvailable+0x5a>
   b6fc8:	2003e61c 	.word	0x2003e61c
   b6fcc:	2003e620 	.word	0x2003e620

000b6fd0 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b6fd0:	2823      	cmp	r0, #35	; 0x23
{
   b6fd2:	b538      	push	{r3, r4, r5, lr}
   b6fd4:	4604      	mov	r4, r0
   b6fd6:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b6fd8:	d80a      	bhi.n	b6ff0 <pinMode+0x20>
   b6fda:	29ff      	cmp	r1, #255	; 0xff
   b6fdc:	d008      	beq.n	b6ff0 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b6fde:	f7ff ffb9 	bl	b6f54 <pinAvailable>
   b6fe2:	b128      	cbz	r0, b6ff0 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b6fe4:	4629      	mov	r1, r5
   b6fe6:	4620      	mov	r0, r4
}
   b6fe8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b6fec:	f7ff b842 	b.w	b6074 <HAL_Pin_Mode>
}
   b6ff0:	bd38      	pop	{r3, r4, r5, pc}

000b6ff2 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   b6ff2:	b538      	push	{r3, r4, r5, lr}
   b6ff4:	4604      	mov	r4, r0
   b6ff6:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b6ff8:	f7ff f844 	bl	b6084 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b6ffc:	28ff      	cmp	r0, #255	; 0xff
   b6ffe:	d010      	beq.n	b7022 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b7000:	2806      	cmp	r0, #6
   b7002:	d804      	bhi.n	b700e <digitalWrite+0x1c>
   b7004:	234d      	movs	r3, #77	; 0x4d
   b7006:	fa23 f000 	lsr.w	r0, r3, r0
   b700a:	07c3      	lsls	r3, r0, #31
   b700c:	d409      	bmi.n	b7022 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b700e:	4620      	mov	r0, r4
   b7010:	f7ff ffa0 	bl	b6f54 <pinAvailable>
   b7014:	b128      	cbz	r0, b7022 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   b7016:	4629      	mov	r1, r5
   b7018:	4620      	mov	r0, r4
}
   b701a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   b701e:	f7ff b839 	b.w	b6094 <HAL_GPIO_Write>
}
   b7022:	bd38      	pop	{r3, r4, r5, pc}

000b7024 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   b7024:	b510      	push	{r4, lr}
   b7026:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b7028:	f7ff f82c 	bl	b6084 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   b702c:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   b702e:	b2db      	uxtb	r3, r3
   b7030:	2b01      	cmp	r3, #1
   b7032:	d908      	bls.n	b7046 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   b7034:	4620      	mov	r0, r4
   b7036:	f7ff ff8d 	bl	b6f54 <pinAvailable>
   b703a:	b120      	cbz	r0, b7046 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   b703c:	4620      	mov	r0, r4
}
   b703e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   b7042:	f7ff b82f 	b.w	b60a4 <HAL_GPIO_Read>
}
   b7046:	2000      	movs	r0, #0
   b7048:	bd10      	pop	{r4, pc}

000b704a <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b704a:	4770      	bx	lr

000b704c <_Z17acquireWireBufferv>:
{
   b704c:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b704e:	2520      	movs	r5, #32
   b7050:	2314      	movs	r3, #20
{
   b7052:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b7054:	6003      	str	r3, [r0, #0]
   b7056:	6085      	str	r5, [r0, #8]
   b7058:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b705a:	4906      	ldr	r1, [pc, #24]	; (b7074 <_Z17acquireWireBufferv+0x28>)
   b705c:	4628      	mov	r0, r5
   b705e:	f000 f86f 	bl	b7140 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b7062:	4904      	ldr	r1, [pc, #16]	; (b7074 <_Z17acquireWireBufferv+0x28>)
	};
   b7064:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b7066:	4628      	mov	r0, r5
   b7068:	f000 f86a 	bl	b7140 <_ZnajRKSt9nothrow_t>
	};
   b706c:	60e0      	str	r0, [r4, #12]
}
   b706e:	4620      	mov	r0, r4
   b7070:	bd38      	pop	{r3, r4, r5, pc}
   b7072:	bf00      	nop
   b7074:	000b83c4 	.word	0x000b83c4

000b7078 <_Z19__fetch_global_Wirev>:
{
   b7078:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b707a:	4d0e      	ldr	r5, [pc, #56]	; (b70b4 <_Z19__fetch_global_Wirev+0x3c>)
   b707c:	7829      	ldrb	r1, [r5, #0]
   b707e:	f3bf 8f5b 	dmb	ish
   b7082:	f011 0401 	ands.w	r4, r1, #1
{
   b7086:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b7088:	d111      	bne.n	b70ae <_Z19__fetch_global_Wirev+0x36>
   b708a:	4628      	mov	r0, r5
   b708c:	f7fd f810 	bl	b40b0 <__cxa_guard_acquire>
   b7090:	b168      	cbz	r0, b70ae <_Z19__fetch_global_Wirev+0x36>
   b7092:	a801      	add	r0, sp, #4
   b7094:	f7ff ffda 	bl	b704c <_Z17acquireWireBufferv>
   b7098:	aa01      	add	r2, sp, #4
   b709a:	4621      	mov	r1, r4
   b709c:	4806      	ldr	r0, [pc, #24]	; (b70b8 <_Z19__fetch_global_Wirev+0x40>)
   b709e:	f7ff fa8d 	bl	b65bc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b70a2:	4628      	mov	r0, r5
   b70a4:	f7fd f809 	bl	b40ba <__cxa_guard_release>
   b70a8:	4804      	ldr	r0, [pc, #16]	; (b70bc <_Z19__fetch_global_Wirev+0x44>)
   b70aa:	f000 f84b 	bl	b7144 <atexit>
	return wire;
}
   b70ae:	4802      	ldr	r0, [pc, #8]	; (b70b8 <_Z19__fetch_global_Wirev+0x40>)
   b70b0:	b007      	add	sp, #28
   b70b2:	bd30      	pop	{r4, r5, pc}
   b70b4:	2003e72c 	.word	0x2003e72c
   b70b8:	2003e730 	.word	0x2003e730
   b70bc:	000b704b 	.word	0x000b704b

000b70c0 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b70c0:	4770      	bx	lr
	...

000b70c4 <_Z20acquireSerial1Bufferv>:
{
   b70c4:	b538      	push	{r3, r4, r5, lr}
   b70c6:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b70c8:	2514      	movs	r5, #20
   b70ca:	462a      	mov	r2, r5
   b70cc:	2100      	movs	r1, #0
   b70ce:	f000 f84d 	bl	b716c <memset>
   b70d2:	8025      	strh	r5, [r4, #0]
   b70d4:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b70d6:	4907      	ldr	r1, [pc, #28]	; (b70f4 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b70d8:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b70da:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b70dc:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b70de:	f000 f82f 	bl	b7140 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b70e2:	4904      	ldr	r1, [pc, #16]	; (b70f4 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b70e4:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b70e6:	4628      	mov	r0, r5
   b70e8:	f000 f82a 	bl	b7140 <_ZnajRKSt9nothrow_t>
    };
   b70ec:	60e0      	str	r0, [r4, #12]
}
   b70ee:	4620      	mov	r0, r4
   b70f0:	bd38      	pop	{r3, r4, r5, pc}
   b70f2:	bf00      	nop
   b70f4:	000b83c4 	.word	0x000b83c4

000b70f8 <_Z22__fetch_global_Serial1v>:
{
   b70f8:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b70fa:	4d0e      	ldr	r5, [pc, #56]	; (b7134 <_Z22__fetch_global_Serial1v+0x3c>)
   b70fc:	7829      	ldrb	r1, [r5, #0]
   b70fe:	f3bf 8f5b 	dmb	ish
   b7102:	f011 0401 	ands.w	r4, r1, #1
{
   b7106:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b7108:	d111      	bne.n	b712e <_Z22__fetch_global_Serial1v+0x36>
   b710a:	4628      	mov	r0, r5
   b710c:	f7fc ffd0 	bl	b40b0 <__cxa_guard_acquire>
   b7110:	b168      	cbz	r0, b712e <_Z22__fetch_global_Serial1v+0x36>
   b7112:	a801      	add	r0, sp, #4
   b7114:	f7ff ffd6 	bl	b70c4 <_Z20acquireSerial1Bufferv>
   b7118:	aa01      	add	r2, sp, #4
   b711a:	4621      	mov	r1, r4
   b711c:	4806      	ldr	r0, [pc, #24]	; (b7138 <_Z22__fetch_global_Serial1v+0x40>)
   b711e:	f7ff fda7 	bl	b6c70 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b7122:	4628      	mov	r0, r5
   b7124:	f7fc ffc9 	bl	b40ba <__cxa_guard_release>
   b7128:	4804      	ldr	r0, [pc, #16]	; (b713c <_Z22__fetch_global_Serial1v+0x44>)
   b712a:	f000 f80b 	bl	b7144 <atexit>
    return serial1;
}
   b712e:	4802      	ldr	r0, [pc, #8]	; (b7138 <_Z22__fetch_global_Serial1v+0x40>)
   b7130:	b007      	add	sp, #28
   b7132:	bd30      	pop	{r4, r5, pc}
   b7134:	2003e744 	.word	0x2003e744
   b7138:	2003e748 	.word	0x2003e748
   b713c:	000b70c1 	.word	0x000b70c1

000b7140 <_ZnajRKSt9nothrow_t>:
   b7140:	f7fc bfa7 	b.w	b4092 <_Znaj>

000b7144 <atexit>:
   b7144:	2300      	movs	r3, #0
   b7146:	4601      	mov	r1, r0
   b7148:	461a      	mov	r2, r3
   b714a:	4618      	mov	r0, r3
   b714c:	f000 b8a8 	b.w	b72a0 <__register_exitproc>

000b7150 <memcpy>:
   b7150:	440a      	add	r2, r1
   b7152:	4291      	cmp	r1, r2
   b7154:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b7158:	d100      	bne.n	b715c <memcpy+0xc>
   b715a:	4770      	bx	lr
   b715c:	b510      	push	{r4, lr}
   b715e:	f811 4b01 	ldrb.w	r4, [r1], #1
   b7162:	f803 4f01 	strb.w	r4, [r3, #1]!
   b7166:	4291      	cmp	r1, r2
   b7168:	d1f9      	bne.n	b715e <memcpy+0xe>
   b716a:	bd10      	pop	{r4, pc}

000b716c <memset>:
   b716c:	4402      	add	r2, r0
   b716e:	4603      	mov	r3, r0
   b7170:	4293      	cmp	r3, r2
   b7172:	d100      	bne.n	b7176 <memset+0xa>
   b7174:	4770      	bx	lr
   b7176:	f803 1b01 	strb.w	r1, [r3], #1
   b717a:	e7f9      	b.n	b7170 <memset+0x4>

000b717c <srand>:
   b717c:	b538      	push	{r3, r4, r5, lr}
   b717e:	4b10      	ldr	r3, [pc, #64]	; (b71c0 <srand+0x44>)
   b7180:	681d      	ldr	r5, [r3, #0]
   b7182:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b7184:	4604      	mov	r4, r0
   b7186:	b9b3      	cbnz	r3, b71b6 <srand+0x3a>
   b7188:	2018      	movs	r0, #24
   b718a:	f7ff f957 	bl	b643c <malloc>
   b718e:	4602      	mov	r2, r0
   b7190:	63a8      	str	r0, [r5, #56]	; 0x38
   b7192:	b920      	cbnz	r0, b719e <srand+0x22>
   b7194:	4b0b      	ldr	r3, [pc, #44]	; (b71c4 <srand+0x48>)
   b7196:	480c      	ldr	r0, [pc, #48]	; (b71c8 <srand+0x4c>)
   b7198:	2142      	movs	r1, #66	; 0x42
   b719a:	f7ff f96f 	bl	b647c <__assert_func>
   b719e:	490b      	ldr	r1, [pc, #44]	; (b71cc <srand+0x50>)
   b71a0:	4b0b      	ldr	r3, [pc, #44]	; (b71d0 <srand+0x54>)
   b71a2:	e9c0 1300 	strd	r1, r3, [r0]
   b71a6:	4b0b      	ldr	r3, [pc, #44]	; (b71d4 <srand+0x58>)
   b71a8:	6083      	str	r3, [r0, #8]
   b71aa:	230b      	movs	r3, #11
   b71ac:	8183      	strh	r3, [r0, #12]
   b71ae:	2100      	movs	r1, #0
   b71b0:	2001      	movs	r0, #1
   b71b2:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b71b6:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b71b8:	2200      	movs	r2, #0
   b71ba:	611c      	str	r4, [r3, #16]
   b71bc:	615a      	str	r2, [r3, #20]
   b71be:	bd38      	pop	{r3, r4, r5, pc}
   b71c0:	2003e5b4 	.word	0x2003e5b4
   b71c4:	000b83c5 	.word	0x000b83c5
   b71c8:	000b83dc 	.word	0x000b83dc
   b71cc:	abcd330e 	.word	0xabcd330e
   b71d0:	e66d1234 	.word	0xe66d1234
   b71d4:	0005deec 	.word	0x0005deec

000b71d8 <strlen>:
   b71d8:	4603      	mov	r3, r0
   b71da:	f813 2b01 	ldrb.w	r2, [r3], #1
   b71de:	2a00      	cmp	r2, #0
   b71e0:	d1fb      	bne.n	b71da <strlen+0x2>
   b71e2:	1a18      	subs	r0, r3, r0
   b71e4:	3801      	subs	r0, #1
   b71e6:	4770      	bx	lr

000b71e8 <strtok>:
   b71e8:	4b16      	ldr	r3, [pc, #88]	; (b7244 <strtok+0x5c>)
   b71ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b71ec:	681e      	ldr	r6, [r3, #0]
   b71ee:	6db4      	ldr	r4, [r6, #88]	; 0x58
   b71f0:	4605      	mov	r5, r0
   b71f2:	b9fc      	cbnz	r4, b7234 <strtok+0x4c>
   b71f4:	2050      	movs	r0, #80	; 0x50
   b71f6:	9101      	str	r1, [sp, #4]
   b71f8:	f7ff f920 	bl	b643c <malloc>
   b71fc:	9901      	ldr	r1, [sp, #4]
   b71fe:	65b0      	str	r0, [r6, #88]	; 0x58
   b7200:	4602      	mov	r2, r0
   b7202:	b920      	cbnz	r0, b720e <strtok+0x26>
   b7204:	4b10      	ldr	r3, [pc, #64]	; (b7248 <strtok+0x60>)
   b7206:	4811      	ldr	r0, [pc, #68]	; (b724c <strtok+0x64>)
   b7208:	2157      	movs	r1, #87	; 0x57
   b720a:	f7ff f937 	bl	b647c <__assert_func>
   b720e:	e9c0 4400 	strd	r4, r4, [r0]
   b7212:	e9c0 4402 	strd	r4, r4, [r0, #8]
   b7216:	e9c0 4404 	strd	r4, r4, [r0, #16]
   b721a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
   b721e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
   b7222:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
   b7226:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
   b722a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
   b722e:	6184      	str	r4, [r0, #24]
   b7230:	7704      	strb	r4, [r0, #28]
   b7232:	6244      	str	r4, [r0, #36]	; 0x24
   b7234:	6db2      	ldr	r2, [r6, #88]	; 0x58
   b7236:	2301      	movs	r3, #1
   b7238:	4628      	mov	r0, r5
   b723a:	b002      	add	sp, #8
   b723c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b7240:	f000 b806 	b.w	b7250 <__strtok_r>
   b7244:	2003e5b4 	.word	0x2003e5b4
   b7248:	000b83c5 	.word	0x000b83c5
   b724c:	000b8435 	.word	0x000b8435

000b7250 <__strtok_r>:
   b7250:	b5f0      	push	{r4, r5, r6, r7, lr}
   b7252:	b908      	cbnz	r0, b7258 <__strtok_r+0x8>
   b7254:	6810      	ldr	r0, [r2, #0]
   b7256:	b188      	cbz	r0, b727c <__strtok_r+0x2c>
   b7258:	4604      	mov	r4, r0
   b725a:	4620      	mov	r0, r4
   b725c:	f814 5b01 	ldrb.w	r5, [r4], #1
   b7260:	460f      	mov	r7, r1
   b7262:	f817 6b01 	ldrb.w	r6, [r7], #1
   b7266:	b91e      	cbnz	r6, b7270 <__strtok_r+0x20>
   b7268:	b965      	cbnz	r5, b7284 <__strtok_r+0x34>
   b726a:	6015      	str	r5, [r2, #0]
   b726c:	4628      	mov	r0, r5
   b726e:	e005      	b.n	b727c <__strtok_r+0x2c>
   b7270:	42b5      	cmp	r5, r6
   b7272:	d1f6      	bne.n	b7262 <__strtok_r+0x12>
   b7274:	2b00      	cmp	r3, #0
   b7276:	d1f0      	bne.n	b725a <__strtok_r+0xa>
   b7278:	6014      	str	r4, [r2, #0]
   b727a:	7003      	strb	r3, [r0, #0]
   b727c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b727e:	461c      	mov	r4, r3
   b7280:	e00c      	b.n	b729c <__strtok_r+0x4c>
   b7282:	b915      	cbnz	r5, b728a <__strtok_r+0x3a>
   b7284:	f814 3b01 	ldrb.w	r3, [r4], #1
   b7288:	460e      	mov	r6, r1
   b728a:	f816 5b01 	ldrb.w	r5, [r6], #1
   b728e:	42ab      	cmp	r3, r5
   b7290:	d1f7      	bne.n	b7282 <__strtok_r+0x32>
   b7292:	2b00      	cmp	r3, #0
   b7294:	d0f3      	beq.n	b727e <__strtok_r+0x2e>
   b7296:	2300      	movs	r3, #0
   b7298:	f804 3c01 	strb.w	r3, [r4, #-1]
   b729c:	6014      	str	r4, [r2, #0]
   b729e:	e7ed      	b.n	b727c <__strtok_r+0x2c>

000b72a0 <__register_exitproc>:
   b72a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b72a4:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b7360 <__register_exitproc+0xc0>
   b72a8:	4606      	mov	r6, r0
   b72aa:	f8d8 0000 	ldr.w	r0, [r8]
   b72ae:	461f      	mov	r7, r3
   b72b0:	460d      	mov	r5, r1
   b72b2:	4691      	mov	r9, r2
   b72b4:	f000 f856 	bl	b7364 <__retarget_lock_acquire_recursive>
   b72b8:	4b25      	ldr	r3, [pc, #148]	; (b7350 <__register_exitproc+0xb0>)
   b72ba:	681c      	ldr	r4, [r3, #0]
   b72bc:	b934      	cbnz	r4, b72cc <__register_exitproc+0x2c>
   b72be:	4c25      	ldr	r4, [pc, #148]	; (b7354 <__register_exitproc+0xb4>)
   b72c0:	601c      	str	r4, [r3, #0]
   b72c2:	4b25      	ldr	r3, [pc, #148]	; (b7358 <__register_exitproc+0xb8>)
   b72c4:	b113      	cbz	r3, b72cc <__register_exitproc+0x2c>
   b72c6:	681b      	ldr	r3, [r3, #0]
   b72c8:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b72cc:	6863      	ldr	r3, [r4, #4]
   b72ce:	2b1f      	cmp	r3, #31
   b72d0:	dd07      	ble.n	b72e2 <__register_exitproc+0x42>
   b72d2:	f8d8 0000 	ldr.w	r0, [r8]
   b72d6:	f000 f847 	bl	b7368 <__retarget_lock_release_recursive>
   b72da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b72de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b72e2:	b34e      	cbz	r6, b7338 <__register_exitproc+0x98>
   b72e4:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b72e8:	b988      	cbnz	r0, b730e <__register_exitproc+0x6e>
   b72ea:	4b1c      	ldr	r3, [pc, #112]	; (b735c <__register_exitproc+0xbc>)
   b72ec:	b923      	cbnz	r3, b72f8 <__register_exitproc+0x58>
   b72ee:	f8d8 0000 	ldr.w	r0, [r8]
   b72f2:	f000 f838 	bl	b7366 <__retarget_lock_release>
   b72f6:	e7f0      	b.n	b72da <__register_exitproc+0x3a>
   b72f8:	f44f 7084 	mov.w	r0, #264	; 0x108
   b72fc:	f7ff f89e 	bl	b643c <malloc>
   b7300:	2800      	cmp	r0, #0
   b7302:	d0f4      	beq.n	b72ee <__register_exitproc+0x4e>
   b7304:	2300      	movs	r3, #0
   b7306:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b730a:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b730e:	6863      	ldr	r3, [r4, #4]
   b7310:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b7314:	2201      	movs	r2, #1
   b7316:	409a      	lsls	r2, r3
   b7318:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b731c:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b7320:	4313      	orrs	r3, r2
   b7322:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b7326:	2e02      	cmp	r6, #2
   b7328:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b732c:	bf02      	ittt	eq
   b732e:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b7332:	4313      	orreq	r3, r2
   b7334:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b7338:	6863      	ldr	r3, [r4, #4]
   b733a:	f8d8 0000 	ldr.w	r0, [r8]
   b733e:	1c5a      	adds	r2, r3, #1
   b7340:	3302      	adds	r3, #2
   b7342:	6062      	str	r2, [r4, #4]
   b7344:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b7348:	f000 f80e 	bl	b7368 <__retarget_lock_release_recursive>
   b734c:	2000      	movs	r0, #0
   b734e:	e7c6      	b.n	b72de <__register_exitproc+0x3e>
   b7350:	2003e7e8 	.word	0x2003e7e8
   b7354:	2003e75c 	.word	0x2003e75c
   b7358:	00000000 	.word	0x00000000
   b735c:	000b643d 	.word	0x000b643d
   b7360:	2003e618 	.word	0x2003e618

000b7364 <__retarget_lock_acquire_recursive>:
   b7364:	4770      	bx	lr

000b7366 <__retarget_lock_release>:
   b7366:	4770      	bx	lr

000b7368 <__retarget_lock_release_recursive>:
   b7368:	4770      	bx	lr

000b736a <link_code_end>:
	...

000b736c <dynalib_user>:
   b736c:	401d 000b 4059 000b 4081 000b 4085 000b     .@..Y@...@...@..
   b737c:	0000 0000 494d 4146 4552 575f 6972 6574     ....MIFARE_Write
   b738c:	2928 6620 6961 656c 3a64 0020 494d 4146     () failed: .MIFA
   b739c:	4552 525f 6165 2864 2029 6166 6c69 6465     RE_Read() failed
   b73ac:	203a 5000 4443 415f 7475 6568 746e 6369     : .PCD_Authentic
   b73bc:	7461 2865 2029 6166 6c69 6465 203a 5400     ate() failed: .T
   b73cc:	6761 6e49 6f66 203a 7325 4100 0030 3241     agInfo: %s.A0.A2
   b73dc:	4100 0034 3244 4400 0034 3644 4300 6e6f     .A4.D2.D4.D6.Con
   b73ec:	6365 6174 2072 6c61 7020 6575 7472 206f     ectar al puerto 
   b73fc:	3041 000a 6f43 656e 7463 7261 6120 206c     A0..Conectar al 
   b740c:	7570 7265 6f74 4120 0a32 4300 6e6f 6365     puerto A2..Conec
   b741c:	6174 2072 6c61 7020 6575 7472 206f 3441     tar al puerto A4
   b742c:	000a 6f43 656e 7463 7261 6120 206c 7570     ..Conectar al pu
   b743c:	7265 6f74 4420 0a32 4300 6e6f 6365 6174     erto D2..Conecta
   b744c:	2072 6c61 7020 6575 7472 206f 3444 000a     r al puerto D4..
   b745c:	6f43 656e 7463 7261 6120 206c 7570 7265     Conectar al puer
   b746c:	6f74 4420 0a36 4500 7272 726f 203a 6f4e     to D6..Error: No
   b747c:	6820 7961 6d20 7361 7020 6575 7472 736f      hay mas puertos
   b748c:	6420 7369 6f70 696e 6c62 7365 0a20 4500      disponibles ..E
   b749c:	2073 6553 736e 726f 4500 2073 6341 7574     s Sensor.Es Actu
   b74ac:	6461 726f 4500 2073 6e41 6c61 676f 6369     ador.Es Analogic
   b74bc:	006f 7345 4420 6769 7469 6c61 0a00 6553     o.Es Digital..Se
   b74cc:	736e 726f 7365 6320 6e6f 6365 6174 6f64     nsores conectado
   b74dc:	3a73 2520 0064 7550 7265 6f74 203a 7325     s: %d.Puerto: %s
   b74ec:	0a00 6553 736e 726f 7453 7461 2065 3a30     ..SensorState 0:
   b74fc:	2520 0064 530a 6e65 6f73 5372 6174 6574      %d..SensorState
   b750c:	3120 203a 6425 2d00                           1: %d.-.

000b7515 <_ZL4font>:
   b7515:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
   b7525:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
   b7535:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
   b7545:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
   b7555:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
   b7565:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
   b7575:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
   b7585:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
   b7595:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
   b75a5:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
   b75b5:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
   b75c5:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
   b75d5:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
   b75e5:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
   b75f5:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
   b7605:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
   b7615:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
   b7625:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
   b7635:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
   b7645:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
   b7655:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
   b7665:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
   b7675:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
   b7685:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
   b7695:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
   b76a5:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
   b76b5:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
   b76c5:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
   b76d5:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
   b76e5:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
   b76f5:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
   b7705:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
   b7715:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
   b7725:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
   b7735:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
   b7745:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
   b7755:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
   b7765:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
   b7775:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
   b7785:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
   b7795:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
   b77a5:	5555 4179 5422 7854 2142 5455 4078 5420     UUyA"TTxB!UTx@ T
   b77b5:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
   b77c5:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
   b77d5:	0042 4501 407c 127d 1211 f07d 2528 f028     B..E|@}...}.(%(.
   b77e5:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
   b77f5:	4949 3249 443a 4444 323a 484a 3048 413a     III2:DDD:2JHH0:A
   b7805:	2141 3a7a 4042 7820 9d00 a0a0 3d7d 4242     A!z:B@ x....}=BB
   b7815:	3d42 403d 4040 3c3d ff24 2424 7e48 4349     B==@@@=<$.$$H~IC
   b7825:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
   b7835:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
   b7845:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
   b7855:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
   b7865:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
   b7875:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
   b7885:	0055 0055 aa55 aa55 aa55 55ff 55ff 00ff     U.U.U.U.U..U.U..
   b7895:	0000 00ff 1010 ff10 1400 1414 00ff 1010     ................
   b78a5:	00ff 10ff f010 f010 1414 fc14 1400 f714     ................
   b78b5:	ff00 0000 00ff 14ff f414 fc04 1414 1017     ................
   b78c5:	101f 1f10 1f10 1414 1f14 1000 1010 00f0     ................
   b78d5:	0000 1f00 1010 1010 101f 1010 f010 0010     ................
   b78e5:	0000 10ff 1010 1010 1010 1010 10ff 0000     ................
   b78f5:	ff00 0014 ff00 ff00 0000 101f 0017 fc00     ................
   b7905:	f404 1414 1017 1417 f414 f404 0000 00ff     ................
   b7915:	14f7 1414 1414 1414 00f7 14f7 1414 1417     ................
   b7925:	1010 101f 141f 1414 14f4 1010 10f0 00f0     ................
   b7935:	1f00 1f10 0000 1f00 0014 0000 14fc 0000     ................
   b7945:	10f0 10f0 ff10 ff10 1414 ff14 1014 1010     ................
   b7955:	001f 0000 f000 ff10 ffff ffff f0f0 f0f0     ................
   b7965:	fff0 ffff 0000 0000 ff00 0fff 0f0f 0f0f     ................
   b7975:	4438 3844 fc44 4a4a 344a 027e 0602 0206     8DD8D.JJJ4~.....
   b7985:	027e 027e 5563 4149 3863 4444 043c 7e40     ~.~.cUIAc8DD<.@~
   b7995:	1e20 0620 7e02 0202 a599 a5e7 1c99 492a      . ..~........*I
   b79a5:	1c2a 724c 7201 304c 4d4a 304d 4830 4878     *.Lr.rL0JMM00HxH
   b79b5:	bc30 5a62 3d46 493e 4949 7e00 0101 7e01     0.bZF=>III.~...~
   b79c5:	2a2a 2a2a 442a 5f44 4444 5140 444a 4040     *****DD_DD@QJD@@
   b79d5:	4a44 4051 0000 01ff e003 ff80 0000 0808     DJQ@............
   b79e5:	6b6b 3608 3612 3624 0f06 0f09 0006 1800     kk.6.6$6........
   b79f5:	0018 0000 1010 3000 ff40 0101 1f00 0101     .......0@.......
   b7a05:	001e 1d19 1217 3c00 3c3c 003c 0000 0000     .......<<<<.....
   b7a15:	0000                                         ...

000b7a18 <_ZTV12Adafruit_GFX>:
	...
   b7a28:	4c35 000b 6875 000b 409d 000b 463b 000b     5L..uh...@..;F..
   b7a38:	463d 000b 466f 000b 464b 000b 465d 000b     =F..oF..KF..]F..
   b7a48:	457d 000b 463b 000b 4867 000b 4865 000b     }E..;F..gH..eH..
   b7a58:	4687 000b 46c5 000b 46ff 000b 4745 000b     .F...F...F..EG..
   b7a68:	4761 000b 47e5 000b 6564 6166 6c75 2074     aG...G..default 
   b7a78:	4d00 4253 4c00 4253 3c00 5053 5349 7465     .MSB.LSB.<SPISet
   b7a88:	6974 676e 2073 6564 6166 6c75 3e74 3c00     tings default>.<
   b7a98:	5053 5349 7465 6974 676e 2073 7325 7525     SPISettings %s%u
   b7aa8:	2520 2073 4f4d 4544 7525 003e                %s MODE%u>.

000b7ab4 <_ZTVN8particle11SPISettingsE>:
	...
   b7abc:	4d55 000b 4d43 000b 4d45 000b               UM..CM..EM..

000b7ac8 <_ZL12splash2_data>:
   b7ac8:	0000 0060 0000 0000 0000 0000 0000 0000     ..`.............
   b7ad8:	e000 0000 0000 0000 0000 0000 0000 0100     ................
   b7ae8:	00e0 0000 0000 0000 0000 0000 0000 f001     ................
	...
   b7b04:	0300 00f0 0000 0000 0000 0000 0000 0000     ................
   b7b14:	f007 0000 0000 0000 0000 0000 0000 0700     ................
   b7b24:	00f8 0000 0000 0000 0000 0000 0000 f80f     ................
   b7b34:	0000 0300 00c0 007e 0100 00e0 0f7f 00f8     ......~.........
   b7b44:	0000 c003 fe00 0000 e001 ff00 f8ef 0000     ................
   b7b54:	0300 00c0 00fe 0100 00e0 ffff 00f8 0000     ................
   b7b64:	c003 f000 0000 0f00 7f00 7ffe 00c0 0300     ................
   b7b74:	00c0 00f0 0000 000f fe3f f87f f13f cffb     ........?...?...
   b7b84:	fefc bcf3 ef3d 1fe0 7ffe 7fff fffb fedf     ....=...........
   b7b94:	fffe 3dbc e0ef c61f ffff fb7f dfff fefe     ...=............
   b7ba4:	bcff ef3d 0fe0 c7e3 78fe c37b 1ede fff0     ..=......x{.....
   b7bb4:	3dbc 00ef ff07 fc87 7b78 dec3 f01e 3cf8     .=......x{.....<
   b7bc4:	ef3d 0100 ffff 00f0 c37b 1ec0 f0f0 3d3c     =.......{.....<=
   b7bd4:	00ef f301 e07f fb3f cfc3 f0fe 3cf0 ef3d     ......?......<=.
   b7be4:	0300 3fe3 7f80 c3fb fedf f0f0 3d3c 00ef     ...?........<=..
   b7bf4:	e707 003c 7b78 dec3 f01e 3cf0 ef3d 0700     ..<.x{.....<=...
   b7c04:	beff 7800 c37b 1ede f0f0 3d3c 00ef ff07     ...x{.....<=....
   b7c14:	00fe 7b78 dec3 f01e 3cf0 ef3d 0f00 feff     ..x{.....<=.....
   b7c24:	7f00 fffb fedf f0f0 fd3f e0ef ff0f 00ff     ........?.......
   b7c34:	fb7f dfff f0fe 3ff0 effd 0fe0 fff9 3e00     .......?.......>
   b7c44:	f979 9ecf f0f0 3d1f e0e7 f11f 00ff 0000     y......=........
	...
   b7c5c:	1f00 ff80 7f00 ffff ffff ffff ffff e0ff     ................
   b7c6c:	001c 007f ff7f ffff b4fe 886d 188d 00e0     ..........m.....
   b7c7c:	1f00 7f00 ffff feff ad95 b57d e077 0000     ..........}.w...
   b7c8c:	000f ff7f ffff a5fe 9dad 198d 00e0 0600     ................
   b7c9c:	7f00 ffff feff adb5 b5ed e07e               ..........~.

000b7ca8 <_ZL17sucreLogoNew_data>:
   b7ca8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b7cb8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b7cc8:	ffff ffff ffff fff8 ffff ffff ffff ffff     ................
   b7cd8:	ffff ffff ffff 7fc0 ffff ffff ffff ffff     ................
   b7ce8:	ffff ffff feff 7f00 ffff ffff ffff ffff     ................
   b7cf8:	ffff ffff feff 7f00 ffff ffff ffff ffff     ................
   b7d08:	ffff ffff feff 3f00 ffff ffff ffff ffff     .......?........
   b7d18:	ffff ffff feff 3f00 ffff ffff ffff ffff     .......?........
   b7d28:	ffff ffff 3ffc 3f00 ffff ffff ffff ffff     .....?.?........
   b7d38:	ffff ffff 0ffc 1f00 ffff ffff ffff ffff     ................
   b7d48:	ffff ffff 07fc 1f00 ffff ffff ffff ffff     ................
   b7d58:	ffff ffff 07f8 3f00 ffff ffff ffff ffff     .......?........
   b7d68:	ffff ffff 07f8 ff83 ffff ffff ffff ffff     ................
   b7d78:	ffff ffff 0ff0 ffcf ffff ffff ffff ffff     ................
   b7d88:	ffff ffff 0ff8 ffff ffff ffff ffff ffff     ................
   b7d98:	ffff ffff 0ffe ffff ffff ffff ffff ffff     ................
   b7da8:	ffff ffff 9fff ffff ffff ffff ffff ffff     ................
   b7db8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b7dc8:	ffff ffff fcff ff1f ffff ffff ffff ffff     ................
   b7dd8:	ffff 7fc0 fcff ff0d 3fe0 03ef c0ff ff7f     .........?......
   b7de8:	feff 3f00 f8f3 ff09 0780 01e4 00ff ff1f     ...?............
   b7df8:	fcff 1f3f f8f3 ff09 c31f f8e0 3ffc ff87     ..?..........?..
   b7e08:	f8ff ffff f8f3 fe09 f13f fce1 fff8 ffe3     ........?.......
   b7e18:	f1ff ffff f8f3 fc19 f87f ffe3 fff1 ffe3     ................
   b7e28:	e3ff ffff fff3 f819 fcff ffe7 ffe3 ffc7     ................
   b7e38:	e7ff ffff fff3 f1f9 feff ffe7 ffe7 ff8f     ................
   b7e48:	c7ff ffff e7f3 f3f9 ffff ffe7 ffe7 ff1f     ................
   b7e58:	cfff ffff c3f3 f3f9 ffff ffe7 fec7 ff3f     ..............?.
   b7e68:	cfff ffff 81f3 f3f9 ffff ffe7 fccf ff7f     ................
   b7e78:	c0ff 0000 00f3 e3f9 ffff ffe7 f8cf ffff     ................
   b7e88:	c0ff 0000 0072 e379 ffff ffe7 f1cf ffff     ....r.y.........
   b7e98:	feff 0000 0072 e379 ffff ffe7 e3cf ffff     ....r.y.........
   b7ea8:	ffff fcff 00f3 f3f9 ffff ffe7 c7c7 ffff     ................
   b7eb8:	ffff fcff 81f3 f3f9 ffff ffe7 8fc7 ffff     ................
   b7ec8:	ffff f8ff c3f3 f1f9 ffff ffe7 1fe7 ffff     ................
   b7ed8:	ffff f9ff e7f1 f9f1 fcff ffe7 3fe2 fffb     .............?..
   b7ee8:	ffff f1ff fff8 f8f1 fcff ffe7 7ff0 fff3     ................
   b7ef8:	ffff e3ff fffc fce1 f87f ffe7 fff8 ffe3     ................
   b7f08:	feff c77f 3ffc fe81 e13f ffe7 7ffc ffc7     .....?..?.......
   b7f18:	feff 0f1e 0efe ff09 8307 ffe7 0efe ff0f     ................
   b7f28:	ffff 1f00 80ff ff39 0fc0 ffe7 00ff ff1f     ......9.........
   b7f38:	ffff ffe0 e0ff ffff 7ff0 ffff e0ff ffff     ................
   b7f48:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b7f58:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b7f68:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b7f78:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b7f88:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b7f98:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b7fa8:	ffff ffff ffff ffff cfff ffff ffff ffff     ................
   b7fb8:	ffff ffff ffff ffff 9fff ffff ffff ffff     ................
   b7fc8:	ffff ffff ffff ffff 3fff feff 7cf6 ffff     .........?...|..
   b7fd8:	ffff ffff ffff ffff 7cff feff fce7 ffe7     .........|......
   b7fe8:	ffff ffff ffff ffff 78ff fe7c fccf ffc7     .........x|.....
   b7ff8:	ffff ffff ffff ffff 39ff fe31 e1df ff9f     .........91.....
   b8008:	ffff ffff ffff ffff 03fe fe93 413e ff8f     ............>A..
   b8018:	ffff ffff ffff ffff 33ff feb7 9c1e ffe3     .........3......
   b8028:	ffff ffff ffff ffff 73ff fe37 1dc6 ffbb     .........s7.....
   b8038:	ffff ffff ffff ffff 38ff fe27 9df2 ff39     .........8'...9.
   b8048:	ffff ffff ffff ffff 3cff fe67 417a ff93     .........<g.zA..
   b8058:	ffff ffff ffff ffff 3fff ffe7 61fe ff87     .........?...a..
   b8068:	ffff ffff ffff ffff ffff ffff fdff ffff     ................
   b8078:	ffff ffff ffff ffff ffff ffff fdff ffff     ................
   b8088:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b8098:	ffff ffff ffff ffff ffff ffff ffff ffff     ................

000b80a8 <_ZTV16Adafruit_SSD1306>:
	...
   b80b0:	4da9 000b 4dc1 000b 4c35 000b 6875 000b     .M...M..5L..uh..
   b80c0:	4dd5 000b 463b 000b 463d 000b 466f 000b     .M..;F..=F..oF..
   b80d0:	464b 000b 465d 000b 457d 000b 463b 000b     KF..]F..}E..;F..
   b80e0:	4867 000b 4f67 000b 5503 000b 54b5 000b     gH..gO...U...T..
   b80f0:	46ff 000b 4745 000b 4761 000b 47e5 000b     .F..EG..aG...G..

000b8100 <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE7premask>:
   b8100:	8000 e0c0 f8f0 fefc                         ........

000b8108 <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE8postmask>:
   b8108:	0100 0703 1f0f 7f3f                         ......?.

000b8110 <_ZZN16Adafruit_SSD13065beginEhhbbE5init1>:
   b8110:	d5ae a880                                   ....

000b8114 <_ZZN16Adafruit_SSD13065beginEhhbbE5init2>:
   b8114:	00d3 8d40                                   ..@.

000b8118 <_ZZN16Adafruit_SSD13065beginEhhbbE5init3>:
   b8118:	0020 c8a1                                    ...

000b811c <_ZZN16Adafruit_SSD13065beginEhhbbE5init5>:
   b811c:	40db a6a4 af2e                              .@....

000b8122 <_ZZN16Adafruit_SSD13065beginEhhbbE6init4a>:
   b8122:	02da 8f81                                   ....

000b8126 <_ZZN16Adafruit_SSD13065beginEhhbbE6init4b>:
   b8126:	12da                                         ...

000b8129 <_ZZN16Adafruit_SSD13065beginEhhbbE6init4c>:
   b8129:	02da                                         ...

000b812c <_ZZN16Adafruit_SSD13067displayEvE6dlist1>:
   b812c:	0022 21ff 5500 6b6e 6f6e 6e77 6520 7272     "..!.Unknown err
   b813c:	726f 5300 6375 6563 7373 002e 7245 6f72     or.Success..Erro
   b814c:	2072 6e69 6320 6d6f 756d 696e 6163 6974     r in communicati
   b815c:	6e6f 002e 6f43 6c6c 7369 6973 6e6f 6420     on..Collission d
   b816c:	7465 6365 6574 2e64 5400 6d69 6f65 7475     etected..Timeout
   b817c:	6920 206e 6f63 6d6d 6e75 6369 7461 6f69      in communicatio
   b818c:	2e6e 4100 6220 6675 6566 2072 7369 6e20     n..A buffer is n
   b819c:	746f 6220 6769 6520 6f6e 6775 2e68 4900     ot big enough..I
   b81ac:	746e 7265 616e 206c 7265 6f72 2072 6e69     nternal error in
   b81bc:	7420 6568 6320 646f 2e65 5320 6f68 6c75      the code. Shoul
   b81cc:	2064 6f6e 2074 6168 7070 6e65 002e 6e49     d not happen..In
   b81dc:	6176 696c 2064 7261 7567 656d 746e 002e     valid argument..
   b81ec:	6854 2065 5243 5f43 2041 6f64 7365 6e20     The CRC_A does n
   b81fc:	746f 6d20 7461 6863 002e 2041 494d 4146     ot match..A MIFA
   b820c:	4552 5020 4349 2043 6572 7073 6e6f 6564     RE PICC responde
   b821c:	2064 6977 6874 4e20 4b41 002e               d with NAK..

000b8228 <CSWTCH.84>:
   b8228:	813f 000b 8148 000b 8160 000b 8175 000b     ?...H...`...u...
   b8238:	818f 000b 81ab 000b 81da 000b 81ec 000b     ................
   b8248:	8206 000b                                   ....

000b824c <_ZTVN5spark13EthernetClassE>:
	...
   b8254:	6547 000b 653d 000b 6533 000b 6529 000b     Ge..=e..3e..)e..
   b8264:	651d 000b 6511 000b 6751 000b 6759 000b     .e...e..Qg..Yg..
   b8274:	6505 000b 64fd 000b 64f3 000b 64e9 000b     .e...d...d...d..
   b8284:	6789 000b                                   .g..

000b8288 <_ZTV7TwoWire>:
	...
   b8290:	6565 000b 65af 000b 6587 000b 6567 000b     ee...e...e..ge..
   b82a0:	658f 000b 6597 000b 659f 000b 65a7 000b     .e...e...e...e..

000b82b0 <_ZTV9IPAddress>:
	...
   b82b8:	6621 000b 6611 000b 6613 000b 7061 0070     !f...f...f..app.

000b82c8 <_ZTVN5spark12NetworkClassE>:
	...
   b82d0:	6711 000b 671b 000b 6725 000b 672f 000b     .g...g..%g../g..
   b82e0:	6739 000b 6745 000b 6751 000b 6759 000b     9g..Eg..Qg..Yg..
   b82f0:	6761 000b 676d 000b 6775 000b 677f 000b     ag..mg..ug...g..
   b8300:	6789 000b                                   .g..

000b8304 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   b8304:	0800 1810 2820 3830 5925 252d 2d6d 6425     .... (08%Y-%m-%d
   b8314:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
   b8324:	6d69 0065                                   ime.

000b8328 <_ZTV11USARTSerial>:
	...
   b8330:	6bf5 000b 6c61 000b 6c39 000b 6875 000b     .k..al..9l..uh..
   b8340:	6c09 000b 6c25 000b 6c17 000b 6c33 000b     .l..%l...l..3l..
   b8350:	6bf7 000b 6bfb 000b                         .k...k..

000b8358 <_ZTV9USBSerial>:
	...
   b8360:	6c9f 000b 6d07 000b 6cdd 000b 6875 000b     .l...m...l..uh..
   b8370:	6ccf 000b 6ca1 000b 6cb1 000b 6d01 000b     .l...l...l...m..
   b8380:	6cc1 000b 6c99 000b                         .l...l..

000b8388 <_ZTVN5spark9WiFiClassE>:
	...
   b8390:	6dff 000b 6df5 000b 6deb 000b 6da1 000b     .m...m...m...m..
   b83a0:	6ddf 000b 6dd3 000b 6751 000b 6759 000b     .m...m..Qg..Yg..
   b83b0:	6dc7 000b 6dbf 000b 6db5 000b 6dab 000b     .m...m...m...m..
   b83c0:	6789 000b                                   .g..

000b83c4 <_ZSt7nothrow>:
   b83c4:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
   b83d4:	6363 6565 6564 0064 742f 706d 6a2f 6e65     cceeded./tmp/jen
   b83e4:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   b83f4:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   b8404:	315f 3036 3136 3038 3336 2f39 7273 2f63     _1606180639/src/
   b8414:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   b8424:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
   b8434:	2f00 6d74 2f70 656a 6b6e 6e69 2d73 4347     ./tmp/jenkins-GC
   b8444:	2d43 3031 702d 7069 6c65 6e69 2d65 3834     C-10-pipeline-48
   b8454:	325f 3230 3130 3231 5f34 3631 3630 3831     _20201124_160618
   b8464:	3630 3933 732f 6372 6e2f 7765 696c 2f62     0639/src/newlib/
   b8474:	656e 6c77 6269 6c2f 6269 2f63 7473 6972     newlib/libc/stri
   b8484:	676e 732f 7274 6f74 2e6b 0063               ng/strtok.c.

000b8490 <link_const_variable_data_end>:
   b8490:	000b4525 	.word	0x000b4525
   b8494:	000b64a5 	.word	0x000b64a5
   b8498:	000b6551 	.word	0x000b6551
   b849c:	000b6701 	.word	0x000b6701
   b84a0:	000b6861 	.word	0x000b6861
   b84a4:	000b699d 	.word	0x000b699d
   b84a8:	000b6bbd 	.word	0x000b6bbd
   b84ac:	000b6be1 	.word	0x000b6be1
   b84b0:	000b6e09 	.word	0x000b6e09

000b84b4 <link_constructors_end>:
	...
